LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 7A6A5E31AE038C9FD5E8D536135BE0FBC91DA8C57AF58193A440676CB492E7FB
LOAD:0000000000000000 ; Input MD5    : FA5AF4AA6ECB75513D39532BE43BB6D1
LOAD:0000000000000000 ; Input CRC32  : 56E0AD4B
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/logname
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'logname.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'long-options.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 22658h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 5F78h                ; Size in file image
LOAD:00000000000000D8                 dq 5F78h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 6BB0h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 206BB0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 4D0h                 ; Size in file image
LOAD:0000000000000110                 dq 688h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 6C78h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 206C78h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 5210h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 5210h                ; Physical address
LOAD:00000000000001B0                 dq 24Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 24Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 6BB0h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 206BB0h              ; Physical address
LOAD:0000000000000220                 dq 450h                 ; Size in file image
LOAD:0000000000000228                 dq 450h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 55h, 5, 5Dh, 0FBh, 38h, 13h, 9Fh, 26h, 0BAh, 7Eh, 0ADh ; Desc
LOAD:0000000000000284                 db 45h, 0A3h, 31h, 1Eh, 11h, 0FAh, 0EDh, 0D0h, 0F8h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 2Fh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121801200041C906h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 2Fh, 30h, 36h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 12F7B3C0h, 1C8BF239h, 12F7C433h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_808, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_808, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_808, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_808, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_808, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_808, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aFpending - offset byte_808, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aPuts - offset byte_808, 12h, 0, 0, offset dword_0, \ ; "puts"
LOAD:00000000000003A0                            0>
LOAD:00000000000003B8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_808, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFclose - offset byte_808, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain - offset byte_808, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aDcgettext - offset byte_808, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_808, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aStrlen - offset byte_808, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStackChkFail - offset byte_808, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aGetoptLong - offset byte_808, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aMbrtowc - offset byte_808, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aStrrchr - offset byte_808, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aLseek - offset byte_808, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004A8                            0>
LOAD:00000000000004C0                 Elf64_Sym <offset aMemset - offset byte_808, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aLibcStartMain - offset byte_808, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aMemcmp - offset byte_808, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aFputsUnlocked - offset byte_808, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aCalloc - offset byte_808, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aGmonStart - offset byte_808, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aMemcpy - offset byte_808, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aFileno - offset byte_808, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aMalloc - offset byte_808, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aFflush - offset byte_808, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aNlLanginfo - offset byte_808, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aGetlogin - offset byte_808, 12h, 0, 0, \ ; "getlogin"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aFreading - offset byte_808, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aRealloc - offset byte_808, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aSetlocale - offset byte_808, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aPrintfChk - offset byte_808, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aError - offset byte_808, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000640                            0>
LOAD:0000000000000658                 Elf64_Sym <offset aFseeko - offset byte_808, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aCxaAtexit - offset byte_808, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aExit+1 - offset byte_808, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aFwrite - offset byte_808, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aFprintfChk - offset byte_808, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aItmRegistertmc - offset byte_808, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aMbsinit - offset byte_808, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aIswprint - offset byte_808, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aCxaFinalize - offset byte_808, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aCtypeBLoc - offset byte_808, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aStdout - offset byte_808, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000748                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000760                 Elf64_Sym <offset aProgname - offset byte_808, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000760                            offset __bss_start, 8>
LOAD:0000000000000778                 Elf64_Sym <offset aProgramInvocat - offset byte_808, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000778                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000790                 Elf64_Sym <offset aPrognameFull - offset byte_808, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000790                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007A8                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_808, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:00000000000007A8                            offset __bss_start, 8>
LOAD:00000000000007C0                 Elf64_Sym <offset aOpterr - offset byte_808, 11h, 0, 19h, \ ; "opterr"
LOAD:00000000000007C0                            offset opterr@@GLIBC_2_2_5, 4>
LOAD:00000000000007D8                 Elf64_Sym <offset aStderr - offset byte_808, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000007D8                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000007F0                 Elf64_Sym <offset aOptind - offset byte_808, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000007F0                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000808 ; ELF String Table
LOAD:0000000000000808 byte_808        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000808                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000809 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000B08↓o
LOAD:0000000000000813 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:000000000000081A aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000827 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000831 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000839 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000841 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000848 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000850 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000400↑o
LOAD:000000000000085A aError          db 'error',0            ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000860 aPuts           db 'puts',0             ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000865 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000876 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000700↑o
LOAD:000000000000087F aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000887 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:000000000000088D aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:000000000000088D                                         ; LOAD:0000000000000688↑o
LOAD:0000000000000893 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000893                                         ; DATA XREF: LOAD:0000000000000778↑o
LOAD:00000000000008AB aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:00000000000008AB                                         ; DATA XREF: LOAD:0000000000000418↑o
LOAD:00000000000008C2 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:00000000000008C9 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000430↑o
LOAD:00000000000008D0 aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:00000000000008D7 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:00000000000008E8 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:00000000000008EF aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:00000000000008FD aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000904 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:000000000000090A aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000911 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000918 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:000000000000091F aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000927 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000933 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000941 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:000000000000094C aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000953 aGetlogin       db 'getlogin',0         ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:000000000000095C aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000968 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:000000000000096F aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000976 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000981 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000981                                         ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:000000000000099F aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000718↑o
LOAD:00000000000009AE aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:00000000000009AE                                         ; LOAD:00000000000003B8↑o
LOAD:00000000000009BD aOpterr         db 'opterr',0           ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:00000000000009C4 aLibcStartMain  db '__libc_start_main',0
LOAD:00000000000009C4                                         ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:00000000000009D6 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:00000000000009DD aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000508↑o
LOAD:00000000000009EC aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000009F1 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000760↑o
LOAD:00000000000009FC aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000A0C aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000A19 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000B18↓o
LOAD:0000000000000A23 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000B28↓o
LOAD:0000000000000A2F aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000B38↓o
LOAD:0000000000000A3A aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000B48↓o
LOAD:0000000000000A44 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000B58↓o
LOAD:0000000000000A50 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000A50                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000A6C aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000A7B aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000A7B                                         ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000A95                 align 2
LOAD:0000000000000A96 ; ELF GNU Symbol Version Table
LOAD:0000000000000A96                 dw 0
LOAD:0000000000000A98                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000A9A                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000A9C                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000A9E                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000AA0                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000AA2                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000AA4                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000AA6                 dw 2                    ; puts@@GLIBC_2.2.5
LOAD:0000000000000AA8                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000AAA                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000AAC                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000AAE                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000AB0                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000AB2                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000AB4                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000AB6                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000AB8                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000ABA                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000ABC                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000ABE                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000AC0                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000AC2                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000AC4                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000AC6                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000AC8                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000ACA                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000ACC                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000ACE                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000AD0                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000AD2                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000AD4                 dw 2                    ; getlogin@@GLIBC_2.2.5
LOAD:0000000000000AD6                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000AD8                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000ADA                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000ADC                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000ADE                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000AE0                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000AE2                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000AE4                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000AE6                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000AE8                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000AEA                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000AEC                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000AEE                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000AF0                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000AF2                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000AF4                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000AF6                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000AF8                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000AFA                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000AFC                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000AFE                 dw 2                    ; opterr@@GLIBC_2.2.5
LOAD:0000000000000B00                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000B02                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000B04                 dw 0
LOAD:0000000000000B06                 dw 0
LOAD:0000000000000B08 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000B08                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_808, 10h, 0> ; "libc.so.6"
LOAD:0000000000000B18                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_808, \ ; "GLIBC_2.3"
LOAD:0000000000000B18                                10h>
LOAD:0000000000000B28                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_808, \ ; "GLIBC_2.3.4"
LOAD:0000000000000B28                                10h>
LOAD:0000000000000B38                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_808, \ ; "GLIBC_2.14"
LOAD:0000000000000B38                                10h>
LOAD:0000000000000B48                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_808, \ ; "GLIBC_2.4"
LOAD:0000000000000B48                                10h>
LOAD:0000000000000B58                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_808, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000B68 ; ELF RELA Relocation Table
LOAD:0000000000000B68                 Elf64_Rela <206BB0h, 8, 16E0h> ; R_X86_64_RELATIVE +16E0h
LOAD:0000000000000B80                 Elf64_Rela <206BB8h, 8, 16A0h> ; R_X86_64_RELATIVE +16A0h
LOAD:0000000000000B98                 Elf64_Rela <206BC0h, 8, 4965h> ; R_X86_64_RELATIVE +4965h
LOAD:0000000000000BB0                 Elf64_Rela <206BE0h, 8, 496Ah> ; R_X86_64_RELATIVE +496Ah
LOAD:0000000000000BC8                 Elf64_Rela <206C20h, 8, 49D1h> ; R_X86_64_RELATIVE +49D1h
LOAD:0000000000000BE0                 Elf64_Rela <206C28h, 8, 49D9h> ; R_X86_64_RELATIVE +49D9h
LOAD:0000000000000BF8                 Elf64_Rela <206C30h, 8, 49DFh> ; R_X86_64_RELATIVE +49DFh
LOAD:0000000000000C10                 Elf64_Rela <206C38h, 8, 49ECh> ; R_X86_64_RELATIVE +49ECh
LOAD:0000000000000C28                 Elf64_Rela <206C40h, 8, 49F9h> ; R_X86_64_RELATIVE +49F9h
LOAD:0000000000000C40                 Elf64_Rela <206C48h, 8, 4A0Dh> ; R_X86_64_RELATIVE +4A0Dh
LOAD:0000000000000C58                 Elf64_Rela <206C50h, 8, 4A0Fh> ; R_X86_64_RELATIVE +4A0Fh
LOAD:0000000000000C70                 Elf64_Rela <206C58h, 8, 49F2h> ; R_X86_64_RELATIVE +49F2h
LOAD:0000000000000C88                 Elf64_Rela <206C60h, 8, 47B4h> ; R_X86_64_RELATIVE +47B4h
LOAD:0000000000000CA0                 Elf64_Rela <206C68h, 8, 4A17h> ; R_X86_64_RELATIVE +4A17h
LOAD:0000000000000CB8                 Elf64_Rela <207008h, 8, 207008h> ; R_X86_64_RELATIVE +207008h
LOAD:0000000000000CD0                 Elf64_Rela <207010h, 8, 494Bh> ; R_X86_64_RELATIVE +494Bh
LOAD:0000000000000CE8                 Elf64_Rela <207060h, 8, 207070h> ; R_X86_64_RELATIVE +207070h
LOAD:0000000000000D00                 Elf64_Rela <207078h, 8, 207100h> ; R_X86_64_RELATIVE +207100h
LOAD:0000000000000D18                 Elf64_Rela <206FC8h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000D30                 Elf64_Rela <206FD0h, 1500000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000D48                 Elf64_Rela <206FD8h, 1900000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000D60                 Elf64_Rela <206FE0h, 2A00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000D78                 Elf64_Rela <206FE8h, 2D00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000D90                 Elf64_Rela <207080h, 3000000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000DA8                 Elf64_Rela <207088h, 2F00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000DC0                 Elf64_Rela <207090h, 3600000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000DD8                 Elf64_Rela <207098h, 3200000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000DF0                 Elf64_Rela <2070A0h, 3400000005h, 0> ; R_X86_64_COPY opterr
LOAD:0000000000000E08                 Elf64_Rela <2070C0h, 3500000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000E20 ; ELF JMPREL Relocation Table
LOAD:0000000000000E20                 Elf64_Rela <206E80h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000E38                 Elf64_Rela <206E88h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000E50                 Elf64_Rela <206E90h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000E68                 Elf64_Rela <206E98h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000E80                 Elf64_Rela <206EA0h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000E98                 Elf64_Rela <206EA8h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000EB0                 Elf64_Rela <206EB0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT puts
LOAD:0000000000000EC8                 Elf64_Rela <206EB8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000EE0                 Elf64_Rela <206EC0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000EF8                 Elf64_Rela <206EC8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000F10                 Elf64_Rela <206ED0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000F28                 Elf64_Rela <206ED8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000F40                 Elf64_Rela <206EE0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000000F58                 Elf64_Rela <206EE8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000F70                 Elf64_Rela <206EF0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000000F88                 Elf64_Rela <206EF8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000000FA0                 Elf64_Rela <206F00h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000000FB8                 Elf64_Rela <206F08h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000000FD0                 Elf64_Rela <206F10h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000000FE8                 Elf64_Rela <206F18h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001000                 Elf64_Rela <206F20h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001018                 Elf64_Rela <206F28h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001030                 Elf64_Rela <206F30h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001048                 Elf64_Rela <206F38h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001060                 Elf64_Rela <206F40h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001078                 Elf64_Rela <206F48h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001090                 Elf64_Rela <206F50h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000010A8                 Elf64_Rela <206F58h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT getlogin
LOAD:00000000000010C0                 Elf64_Rela <206F60h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000010D8                 Elf64_Rela <206F68h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000010F0                 Elf64_Rela <206F70h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001108                 Elf64_Rela <206F78h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001120                 Elf64_Rela <206F80h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001138                 Elf64_Rela <206F88h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001150                 Elf64_Rela <206F90h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001168                 Elf64_Rela <206F98h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001180                 Elf64_Rela <206FA0h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001198                 Elf64_Rela <206FA8h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000011B0                 Elf64_Rela <206FB0h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000011C8                 Elf64_Rela <206FB8h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000011E0                 Elf64_Rela <206FC0h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000011E0 LOAD            ends
LOAD:00000000000011E0
.init:00000000000011F8 ; ===========================================================================
.init:00000000000011F8
.init:00000000000011F8 ; Segment type: Pure code
.init:00000000000011F8 ; Segment permissions: Read/Execute
.init:00000000000011F8 _init           segment dword public 'CODE' use64
.init:00000000000011F8                 assume cs:_init
.init:00000000000011F8                 ;org 11F8h
.init:00000000000011F8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000011F8
.init:00000000000011F8 ; =============== S U B R O U T I N E =======================================
.init:00000000000011F8
.init:00000000000011F8
.init:00000000000011F8                 public _init_proc
.init:00000000000011F8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000011F8                 sub     rsp, 8          ; _init
.init:00000000000011FC                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001203                 test    rax, rax
.init:0000000000001206                 jz      short loc_120A
.init:0000000000001208                 call    rax ; __gmon_start__
.init:000000000000120A
.init:000000000000120A loc_120A:                               ; CODE XREF: _init_proc+E↑j
.init:000000000000120A                 add     rsp, 8
.init:000000000000120E                 retn
.init:000000000000120E _init_proc      endp
.init:000000000000120E
.init:000000000000120E _init           ends
.init:000000000000120E
LOAD:000000000000120F ; ===========================================================================
LOAD:000000000000120F
LOAD:000000000000120F ; Segment type: Pure code
LOAD:000000000000120F ; Segment permissions: Read/Execute
LOAD:000000000000120F LOAD            segment byte public 'CODE' use64
LOAD:000000000000120F                 assume cs:LOAD
LOAD:000000000000120F                 ;org 120Fh
LOAD:000000000000120F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000120F                 align 10h
LOAD:000000000000120F LOAD            ends
LOAD:000000000000120F
.plt:0000000000001210 ; ===========================================================================
.plt:0000000000001210
.plt:0000000000001210 ; Segment type: Pure code
.plt:0000000000001210 ; Segment permissions: Read/Execute
.plt:0000000000001210 _plt            segment para public 'CODE' use64
.plt:0000000000001210                 assume cs:_plt
.plt:0000000000001210                 ;org 1210h
.plt:0000000000001210                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001210
.plt:0000000000001210 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001210
.plt:0000000000001210
.plt:0000000000001210 sub_1210        proc near               ; CODE XREF: .plt:000000000000122B↓j
.plt:0000000000001210                                         ; .plt:000000000000123B↓j ...
.plt:0000000000001210 ; __unwind {
.plt:0000000000001210                 push    cs:qword_206E70
.plt:0000000000001216                 jmp     cs:qword_206E78
.plt:0000000000001216 sub_1210        endp
.plt:0000000000001216
.plt:0000000000001216 ; ---------------------------------------------------------------------------
.plt:000000000000121C                 align 20h
.plt:0000000000001220
.plt:0000000000001220 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001220
.plt:0000000000001220 ; Attributes: thunk
.plt:0000000000001220
.plt:0000000000001220 ; void free(void *ptr)
.plt:0000000000001220 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:0000000000001220                                         ; quotearg_free+37↓p ...
.plt:0000000000001220                 jmp     cs:free_ptr
.plt:0000000000001220 _free           endp
.plt:0000000000001220
.plt:0000000000001226 ; ---------------------------------------------------------------------------
.plt:0000000000001226                 push    0
.plt:000000000000122B                 jmp     sub_1210
.plt:0000000000001230
.plt:0000000000001230 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001230
.plt:0000000000001230 ; Attributes: noreturn thunk
.plt:0000000000001230
.plt:0000000000001230 ; void __noreturn abort(void)
.plt:0000000000001230 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001230                                         ; quotearg_buffer_restyled:def_1FB1↓p ...
.plt:0000000000001230                 jmp     cs:abort_ptr
.plt:0000000000001230 _abort          endp
.plt:0000000000001230
.plt:0000000000001236 ; ---------------------------------------------------------------------------
.plt:0000000000001236                 push    1
.plt:000000000000123B                 jmp     sub_1210
.plt:0000000000001240
.plt:0000000000001240 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001240
.plt:0000000000001240 ; Attributes: thunk
.plt:0000000000001240
.plt:0000000000001240 ; int *__errno_location(void)
.plt:0000000000001240 ___errno_location proc near             ; CODE XREF: close_stdout+16↓p
.plt:0000000000001240                                         ; quotearg_n_options+1C↓p ...
.plt:0000000000001240                 jmp     cs:__errno_location_ptr
.plt:0000000000001240 ___errno_location endp
.plt:0000000000001240
.plt:0000000000001246 ; ---------------------------------------------------------------------------
.plt:0000000000001246                 push    2
.plt:000000000000124B                 jmp     sub_1210
.plt:0000000000001250
.plt:0000000000001250 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001250
.plt:0000000000001250 ; Attributes: thunk
.plt:0000000000001250
.plt:0000000000001250 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001250 _strncmp        proc near               ; CODE XREF: usage+204↓p
.plt:0000000000001250                                         ; usage+2C5↓p
.plt:0000000000001250                 jmp     cs:strncmp_ptr
.plt:0000000000001250 _strncmp        endp
.plt:0000000000001250
.plt:0000000000001256 ; ---------------------------------------------------------------------------
.plt:0000000000001256                 push    3
.plt:000000000000125B                 jmp     sub_1210
.plt:0000000000001260
.plt:0000000000001260 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001260
.plt:0000000000001260 ; Attributes: noreturn thunk
.plt:0000000000001260
.plt:0000000000001260 ; void __noreturn _exit(int status)
.plt:0000000000001260 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001260                 jmp     cs:_exit_ptr
.plt:0000000000001260 __exit          endp
.plt:0000000000001260
.plt:0000000000001266 ; ---------------------------------------------------------------------------
.plt:0000000000001266                 push    4
.plt:000000000000126B                 jmp     sub_1210
.plt:0000000000001270
.plt:0000000000001270 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001270
.plt:0000000000001270 ; Attributes: thunk
.plt:0000000000001270
.plt:0000000000001270 ; size_t __fpending(FILE *fp)
.plt:0000000000001270 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001270                 jmp     cs:__fpending_ptr
.plt:0000000000001270 ___fpending     endp
.plt:0000000000001270
.plt:0000000000001276 ; ---------------------------------------------------------------------------
.plt:0000000000001276                 push    5
.plt:000000000000127B                 jmp     sub_1210
.plt:0000000000001280
.plt:0000000000001280 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001280
.plt:0000000000001280 ; Attributes: thunk
.plt:0000000000001280
.plt:0000000000001280 ; int puts(const char *s)
.plt:0000000000001280 _puts           proc near               ; CODE XREF: main+A8↓p
.plt:0000000000001280                 jmp     cs:puts_ptr
.plt:0000000000001280 _puts           endp
.plt:0000000000001280
.plt:0000000000001286 ; ---------------------------------------------------------------------------
.plt:0000000000001286                 push    6
.plt:000000000000128B                 jmp     sub_1210
.plt:0000000000001290
.plt:0000000000001290 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001290
.plt:0000000000001290 ; Attributes: thunk
.plt:0000000000001290
.plt:0000000000001290 ; char *textdomain(const char *domainname)
.plt:0000000000001290 _textdomain     proc near               ; CODE XREF: main+3E↓p
.plt:0000000000001290                 jmp     cs:textdomain_ptr
.plt:0000000000001290 _textdomain     endp
.plt:0000000000001290
.plt:0000000000001296 ; ---------------------------------------------------------------------------
.plt:0000000000001296                 push    7
.plt:000000000000129B                 jmp     sub_1210
.plt:00000000000012A0
.plt:00000000000012A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012A0
.plt:00000000000012A0 ; Attributes: thunk
.plt:00000000000012A0
.plt:00000000000012A0 ; int fclose(FILE *stream)
.plt:00000000000012A0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000012A0                                         ; rpl_fclose+6B↓j
.plt:00000000000012A0                 jmp     cs:fclose_ptr
.plt:00000000000012A0 _fclose         endp
.plt:00000000000012A0
.plt:00000000000012A6 ; ---------------------------------------------------------------------------
.plt:00000000000012A6                 push    8
.plt:00000000000012AB                 jmp     sub_1210
.plt:00000000000012B0
.plt:00000000000012B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012B0
.plt:00000000000012B0 ; Attributes: thunk
.plt:00000000000012B0
.plt:00000000000012B0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000012B0 _bindtextdomain proc near               ; CODE XREF: main+32↓p
.plt:00000000000012B0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000012B0 _bindtextdomain endp
.plt:00000000000012B0
.plt:00000000000012B6 ; ---------------------------------------------------------------------------
.plt:00000000000012B6                 push    9
.plt:00000000000012BB                 jmp     sub_1210
.plt:00000000000012C0
.plt:00000000000012C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012C0
.plt:00000000000012C0 ; Attributes: thunk
.plt:00000000000012C0
.plt:00000000000012C0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000012C0 _dcgettext      proc near               ; CODE XREF: main+D0↓p
.plt:00000000000012C0                                         ; main+FE↓p ...
.plt:00000000000012C0                 jmp     cs:dcgettext_ptr
.plt:00000000000012C0 _dcgettext      endp
.plt:00000000000012C0
.plt:00000000000012C6 ; ---------------------------------------------------------------------------
.plt:00000000000012C6                 push    0Ah
.plt:00000000000012CB                 jmp     sub_1210
.plt:00000000000012D0
.plt:00000000000012D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012D0
.plt:00000000000012D0 ; Attributes: thunk
.plt:00000000000012D0
.plt:00000000000012D0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000012D0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000012D0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000012D0 ___ctype_get_mb_cur_max endp
.plt:00000000000012D0
.plt:00000000000012D6 ; ---------------------------------------------------------------------------
.plt:00000000000012D6                 push    0Bh
.plt:00000000000012DB                 jmp     sub_1210
.plt:00000000000012E0
.plt:00000000000012E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012E0
.plt:00000000000012E0 ; Attributes: thunk
.plt:00000000000012E0
.plt:00000000000012E0 ; size_t strlen(const char *s)
.plt:00000000000012E0 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:00000000000012E0                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:00000000000012E0                 jmp     cs:strlen_ptr
.plt:00000000000012E0 _strlen         endp
.plt:00000000000012E0
.plt:00000000000012E6 ; ---------------------------------------------------------------------------
.plt:00000000000012E6                 push    0Ch
.plt:00000000000012EB                 jmp     sub_1210
.plt:00000000000012F0
.plt:00000000000012F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012F0
.plt:00000000000012F0 ; Attributes: noreturn thunk
.plt:00000000000012F0
.plt:00000000000012F0 ___stack_chk_fail proc near             ; CODE XREF: parse_long_options:loc_1C4A↓p
.plt:00000000000012F0                                         ; parse_gnu_standard_options_only:loc_1D86↓p ...
.plt:00000000000012F0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000012F0 ___stack_chk_fail endp
.plt:00000000000012F0
.plt:00000000000012F6 ; ---------------------------------------------------------------------------
.plt:00000000000012F6                 push    0Dh
.plt:00000000000012FB                 jmp     sub_1210
.plt:0000000000001300
.plt:0000000000001300 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001300
.plt:0000000000001300 ; Attributes: thunk
.plt:0000000000001300
.plt:0000000000001300 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001300 _getopt_long    proc near               ; CODE XREF: parse_long_options+C6↓p
.plt:0000000000001300                                         ; parse_gnu_standard_options_only+9A↓p
.plt:0000000000001300                 jmp     cs:getopt_long_ptr
.plt:0000000000001300 _getopt_long    endp
.plt:0000000000001300
.plt:0000000000001306 ; ---------------------------------------------------------------------------
.plt:0000000000001306                 push    0Eh
.plt:000000000000130B                 jmp     sub_1210
.plt:0000000000001310
.plt:0000000000001310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001310
.plt:0000000000001310 ; Attributes: thunk
.plt:0000000000001310
.plt:0000000000001310 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001310 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001310                 jmp     cs:mbrtowc_ptr
.plt:0000000000001310 _mbrtowc        endp
.plt:0000000000001310
.plt:0000000000001316 ; ---------------------------------------------------------------------------
.plt:0000000000001316                 push    0Fh
.plt:000000000000131B                 jmp     sub_1210
.plt:0000000000001320
.plt:0000000000001320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001320
.plt:0000000000001320 ; Attributes: thunk
.plt:0000000000001320
.plt:0000000000001320 ; char *strrchr(const char *s, int c)
.plt:0000000000001320 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001320                 jmp     cs:strrchr_ptr
.plt:0000000000001320 _strrchr        endp
.plt:0000000000001320
.plt:0000000000001326 ; ---------------------------------------------------------------------------
.plt:0000000000001326                 push    10h
.plt:000000000000132B                 jmp     sub_1210
.plt:0000000000001330
.plt:0000000000001330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001330
.plt:0000000000001330 ; Attributes: thunk
.plt:0000000000001330
.plt:0000000000001330 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001330 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001330                                         ; rpl_fseeko+3B↓p
.plt:0000000000001330                 jmp     cs:lseek_ptr
.plt:0000000000001330 _lseek          endp
.plt:0000000000001330
.plt:0000000000001336 ; ---------------------------------------------------------------------------
.plt:0000000000001336                 push    11h
.plt:000000000000133B                 jmp     sub_1210
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340 ; Attributes: thunk
.plt:0000000000001340
.plt:0000000000001340 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001340 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001340                                         ; xzalloc+12↓j
.plt:0000000000001340                 jmp     cs:memset_ptr
.plt:0000000000001340 _memset         endp
.plt:0000000000001340
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:0000000000001346                 push    12h
.plt:000000000000134B                 jmp     sub_1210
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: thunk
.plt:0000000000001350
.plt:0000000000001350 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001350 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001350                 jmp     cs:memcmp_ptr
.plt:0000000000001350 _memcmp         endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    13h
.plt:000000000000135B                 jmp     sub_1210
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: thunk
.plt:0000000000001360
.plt:0000000000001360 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001360 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001360                                         ; usage+C2↓p ...
.plt:0000000000001360                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001360 _fputs_unlocked endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    14h
.plt:000000000000136B                 jmp     sub_1210
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370 ; Attributes: thunk
.plt:0000000000001370
.plt:0000000000001370 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001370 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001370                 jmp     cs:calloc_ptr
.plt:0000000000001370 _calloc         endp
.plt:0000000000001370
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:0000000000001376                 push    15h
.plt:000000000000137B                 jmp     sub_1210
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: thunk
.plt:0000000000001380
.plt:0000000000001380 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001380 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001380                 jmp     cs:memcpy_ptr
.plt:0000000000001380 _memcpy         endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    16h
.plt:000000000000138B                 jmp     sub_1210
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: thunk
.plt:0000000000001390
.plt:0000000000001390 ; int fileno(FILE *stream)
.plt:0000000000001390 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001390                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001390                 jmp     cs:fileno_ptr
.plt:0000000000001390 _fileno         endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    17h
.plt:000000000000139B                 jmp     sub_1210
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; void *malloc(size_t size)
.plt:00000000000013A0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:00000000000013A0                 jmp     cs:malloc_ptr
.plt:00000000000013A0 _malloc         endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    18h
.plt:00000000000013AB                 jmp     sub_1210
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ; int fflush(FILE *stream)
.plt:00000000000013B0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000013B0                                         ; rpl_fflush+3B↓j
.plt:00000000000013B0                 jmp     cs:fflush_ptr
.plt:00000000000013B0 _fflush         endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    19h
.plt:00000000000013BB                 jmp     sub_1210
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; char *nl_langinfo(nl_item item)
.plt:00000000000013C0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000013C0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000013C0 _nl_langinfo    endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    1Ah
.plt:00000000000013CB                 jmp     sub_1210
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; char *getlogin(void)
.plt:00000000000013D0 _getlogin       proc near               ; CODE XREF: main+9B↓p
.plt:00000000000013D0                 jmp     cs:getlogin_ptr
.plt:00000000000013D0 _getlogin       endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    1Bh
.plt:00000000000013DB                 jmp     sub_1210
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; int __freading(FILE *fp)
.plt:00000000000013E0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000013E0                                         ; rpl_fflush+9↓p
.plt:00000000000013E0                 jmp     cs:__freading_ptr
.plt:00000000000013E0 ___freading     endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    1Ch
.plt:00000000000013EB                 jmp     sub_1210
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000013F0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000013F0                 jmp     cs:realloc_ptr
.plt:00000000000013F0 _realloc        endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    1Dh
.plt:00000000000013FB                 jmp     sub_1210
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ; char *setlocale(int category, const char *locale)
.plt:0000000000001400 _setlocale      proc near               ; CODE XREF: main+1F↓p
.plt:0000000000001400                                         ; usage+1EB↓p ...
.plt:0000000000001400                 jmp     cs:setlocale_ptr
.plt:0000000000001400 _setlocale      endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    1Eh
.plt:000000000000140B                 jmp     sub_1210
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001410                                         ; usage+1DF↓p ...
.plt:0000000000001410                 jmp     cs:__printf_chk_ptr
.plt:0000000000001410 ___printf_chk   endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    1Fh
.plt:000000000000141B                 jmp     sub_1210
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001420 _error          proc near               ; CODE XREF: main+E1↓p
.plt:0000000000001420                                         ; main+10F↓p ...
.plt:0000000000001420                 jmp     cs:error_ptr
.plt:0000000000001420 _error          endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    20h ; ' '
.plt:000000000000142B                 jmp     sub_1210
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001430 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_45EA↓j
.plt:0000000000001430                 jmp     cs:fseeko_ptr
.plt:0000000000001430 _fseeko         endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    21h ; '!'
.plt:000000000000143B                 jmp     sub_1210
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001440 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001440                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001440 ___cxa_atexit   endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    22h ; '"'
.plt:000000000000144B                 jmp     sub_1210
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: noreturn thunk
.plt:0000000000001450
.plt:0000000000001450 ; void __noreturn exit(int status)
.plt:0000000000001450 _exit           proc near               ; CODE XREF: usage+58↓p
.plt:0000000000001450                                         ; parse_long_options+122↓p ...
.plt:0000000000001450                 jmp     cs:exit_ptr
.plt:0000000000001450 _exit           endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    23h ; '#'
.plt:000000000000145B                 jmp     sub_1210
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001460 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001460                 jmp     cs:fwrite_ptr
.plt:0000000000001460 _fwrite         endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    24h ; '$'
.plt:000000000000146B                 jmp     sub_1210
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001470                                         ; version_etc_arn+37↓p ...
.plt:0000000000001470                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001470 ___fprintf_chk  endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    25h ; '%'
.plt:000000000000147B                 jmp     sub_1210
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001480 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001480                 jmp     cs:mbsinit_ptr
.plt:0000000000001480 _mbsinit        endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    26h ; '&'
.plt:000000000000148B                 jmp     sub_1210
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; int iswprint(wint_t wc)
.plt:0000000000001490 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001490                 jmp     cs:iswprint_ptr
.plt:0000000000001490 _iswprint       endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    27h ; '''
.plt:000000000000149B                 jmp     sub_1210
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000014A0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000014A0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000014A0 ___ctype_b_loc  endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    28h ; '('
.plt:00000000000014AB                 jmp     sub_1210
.plt:00000000000014AB ; } // starts at 1210
.plt:00000000000014AB _plt            ends
.plt:00000000000014AB
.plt.got:00000000000014B0 ; ===========================================================================
.plt.got:00000000000014B0
.plt.got:00000000000014B0 ; Segment type: Pure code
.plt.got:00000000000014B0 ; Segment permissions: Read/Execute
.plt.got:00000000000014B0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000014B0                 assume cs:_plt_got
.plt.got:00000000000014B0                 ;org 14B0h
.plt.got:00000000000014B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000014B0
.plt.got:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000014B0
.plt.got:00000000000014B0 ; Attributes: thunk
.plt.got:00000000000014B0
.plt.got:00000000000014B0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000014B0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000014B0 ; __unwind {
.plt.got:00000000000014B0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000014B0 __cxa_finalize  endp
.plt.got:00000000000014B0
.plt.got:00000000000014B0 ; ---------------------------------------------------------------------------
.plt.got:00000000000014B6                 align 8
.plt.got:00000000000014B6 ; } // starts at 14B0
.plt.got:00000000000014B6 _plt_got        ends
.plt.got:00000000000014B6
LOAD:00000000000014B8 ; ===========================================================================
LOAD:00000000000014B8
LOAD:00000000000014B8 ; Segment type: Pure code
LOAD:00000000000014B8 ; Segment permissions: Read/Execute
LOAD:00000000000014B8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000014B8                 assume cs:LOAD
LOAD:00000000000014B8                 ;org 14B8h
LOAD:00000000000014B8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000014B8                 align 20h
LOAD:00000000000014B8 LOAD            ends
LOAD:00000000000014B8
.text:00000000000014C0 ; ===========================================================================
.text:00000000000014C0
.text:00000000000014C0 ; Segment type: Pure code
.text:00000000000014C0 ; Segment permissions: Read/Execute
.text:00000000000014C0 _text           segment para public 'CODE' use64
.text:00000000000014C0                 assume cs:_text
.text:00000000000014C0                 ;org 14C0h
.text:00000000000014C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000014C0
.text:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000014C0
.text:00000000000014C0
.text:00000000000014C0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000014C0                 public main
.text:00000000000014C0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000014C0 ; __unwind {
.text:00000000000014C0                 push    rbp
.text:00000000000014C1                 push    rbx
.text:00000000000014C2                 mov     ebp, edi
.text:00000000000014C4                 mov     rbx, rsi
.text:00000000000014C7                 sub     rsp, 8
.text:00000000000014CB                 mov     rdi, [rsi]
.text:00000000000014CE                 call    set_program_name
.text:00000000000014D3                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:00000000000014DA                 mov     edi, 6          ; category
.text:00000000000014DF                 call    _setlocale
.text:00000000000014E4                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:00000000000014EB                 lea     rdi, domainname ; "coreutils"
.text:00000000000014F2                 call    _bindtextdomain
.text:00000000000014F7                 lea     rdi, domainname ; "coreutils"
.text:00000000000014FE                 call    _textdomain
.text:0000000000001503                 lea     rdi, close_stdout
.text:000000000000150A                 call    atexit
.text:000000000000150F                 lea     rax, aFixmeUnknown ; "FIXME: unknown"
.text:0000000000001516                 sub     rsp, 8
.text:000000000000151A                 mov     r8, cs:Version
.text:0000000000001521                 push    0
.text:0000000000001523                 lea     rcx, unk_4776
.text:000000000000152A                 lea     rdx, aLogname   ; "logname"
.text:0000000000001531                 push    rax
.text:0000000000001532                 lea     rax, usage
.text:0000000000001539                 mov     r9d, 1
.text:000000000000153F                 mov     rsi, rbx
.text:0000000000001542                 mov     edi, ebp
.text:0000000000001544                 push    rax
.text:0000000000001545                 xor     eax, eax
.text:0000000000001547                 call    parse_gnu_standard_options_only
.text:000000000000154C                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001553                 add     rsp, 20h
.text:0000000000001557                 cmp     eax, ebp
.text:0000000000001559                 jl      short loc_1576
.text:000000000000155B                 call    _getlogin
.text:0000000000001560                 test    rax, rax
.text:0000000000001563                 jz      short loc_15B0
.text:0000000000001565                 mov     rdi, rax        ; s
.text:0000000000001568                 call    _puts
.text:000000000000156D                 add     rsp, 8
.text:0000000000001571                 xor     eax, eax
.text:0000000000001573                 pop     rbx
.text:0000000000001574                 pop     rbp
.text:0000000000001575                 retn
.text:0000000000001576 ; ---------------------------------------------------------------------------
.text:0000000000001576
.text:0000000000001576 loc_1576:                               ; CODE XREF: main+99↑j
.text:0000000000001576                 mov     rdi, [rbx+rax*8]
.text:000000000000157A                 call    quote
.text:000000000000157F                 lea     rsi, msgid      ; "extra operand %s"
.text:0000000000001586                 mov     rbx, rax
.text:0000000000001589                 mov     edx, 5          ; category
.text:000000000000158E                 xor     edi, edi        ; domainname
.text:0000000000001590                 call    _dcgettext
.text:0000000000001595                 xor     edi, edi        ; status
.text:0000000000001597                 mov     rdx, rax        ; format
.text:000000000000159A                 mov     rcx, rbx
.text:000000000000159D                 xor     esi, esi        ; errnum
.text:000000000000159F                 xor     eax, eax
.text:00000000000015A1                 call    _error
.text:00000000000015A6                 mov     edi, 1          ; status
.text:00000000000015AB                 call    usage
.text:00000000000015B0 ; ---------------------------------------------------------------------------
.text:00000000000015B0
.text:00000000000015B0 loc_15B0:                               ; CODE XREF: main+A3↑j
.text:00000000000015B0                 lea     rsi, aNoLoginName ; "no login name"
.text:00000000000015B7                 mov     edx, 5          ; category
.text:00000000000015BC                 xor     edi, edi        ; domainname
.text:00000000000015BE                 call    _dcgettext
.text:00000000000015C3                 xor     esi, esi        ; errnum
.text:00000000000015C5                 mov     rdx, rax        ; format
.text:00000000000015C8                 mov     edi, 1          ; status
.text:00000000000015CD                 xor     eax, eax
.text:00000000000015CF                 call    _error
.text:00000000000015CF ; } // starts at 14C0
.text:00000000000015D4                 db      2Eh
.text:00000000000015D4                 nop     word ptr [rax+rax+00000000h]
.text:00000000000015DE                 xchg    ax, ax
.text:00000000000015DE main            endp ; sp-analysis failed
.text:00000000000015DE
.text:00000000000015E0
.text:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000015E0
.text:00000000000015E0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000015E0
.text:00000000000015E0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000015E0                 public start
.text:00000000000015E0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000015E0 ; __unwind {
.text:00000000000015E0                 xor     ebp, ebp
.text:00000000000015E2                 mov     r9, rdx         ; rtld_fini
.text:00000000000015E5                 pop     rsi             ; argc
.text:00000000000015E6                 mov     rdx, rsp        ; ubp_av
.text:00000000000015E9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000015ED                 push    rax
.text:00000000000015EE                 push    rsp             ; stack_end
.text:00000000000015EF                 lea     r8, __libc_csu_fini ; fini
.text:00000000000015F6                 lea     rcx, __libc_csu_init ; init
.text:00000000000015FD                 lea     rdi, main       ; main
.text:0000000000001604                 call    cs:__libc_start_main_ptr
.text:000000000000160A                 hlt
.text:000000000000160A ; } // starts at 15E0
.text:000000000000160A start           endp
.text:000000000000160A
.text:000000000000160A ; ---------------------------------------------------------------------------
.text:000000000000160B                 align 10h
.text:0000000000001610
.text:0000000000001610 ; =============== S U B R O U T I N E =======================================
.text:0000000000001610
.text:0000000000001610 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001610
.text:0000000000001610 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_16C3↓p
.text:0000000000001610                 lea     rdi, __bss_start
.text:0000000000001617                 push    rbp
.text:0000000000001618                 lea     rax, __bss_start
.text:000000000000161F                 cmp     rax, rdi
.text:0000000000001622                 mov     rbp, rsp
.text:0000000000001625                 jz      short loc_1640
.text:0000000000001627                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000162E                 test    rax, rax
.text:0000000000001631                 jz      short loc_1640
.text:0000000000001633                 pop     rbp
.text:0000000000001634                 jmp     rax
.text:0000000000001634 ; ---------------------------------------------------------------------------
.text:0000000000001636                 align 20h
.text:0000000000001640
.text:0000000000001640 loc_1640:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001640                                         ; deregister_tm_clones+21↑j
.text:0000000000001640                 pop     rbp
.text:0000000000001641                 retn
.text:0000000000001641 deregister_tm_clones endp
.text:0000000000001641
.text:0000000000001641 ; ---------------------------------------------------------------------------
.text:0000000000001642                 align 10h
.text:0000000000001650
.text:0000000000001650 ; =============== S U B R O U T I N E =======================================
.text:0000000000001650
.text:0000000000001650 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001650
.text:0000000000001650 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001650                 lea     rdi, __bss_start
.text:0000000000001657                 lea     rsi, __bss_start
.text:000000000000165E                 push    rbp
.text:000000000000165F                 sub     rsi, rdi
.text:0000000000001662                 mov     rbp, rsp
.text:0000000000001665                 sar     rsi, 3
.text:0000000000001669                 mov     rax, rsi
.text:000000000000166C                 shr     rax, 3Fh
.text:0000000000001670                 add     rsi, rax
.text:0000000000001673                 sar     rsi, 1
.text:0000000000001676                 jz      short loc_1690
.text:0000000000001678                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000167F                 test    rax, rax
.text:0000000000001682                 jz      short loc_1690
.text:0000000000001684                 pop     rbp
.text:0000000000001685                 jmp     rax
.text:0000000000001685 ; ---------------------------------------------------------------------------
.text:0000000000001687                 align 10h
.text:0000000000001690
.text:0000000000001690 loc_1690:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001690                                         ; register_tm_clones+32↑j
.text:0000000000001690                 pop     rbp
.text:0000000000001691                 retn
.text:0000000000001691 register_tm_clones endp
.text:0000000000001691
.text:0000000000001691 ; ---------------------------------------------------------------------------
.text:0000000000001692                 align 20h
.text:00000000000016A0
.text:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000016A0
.text:00000000000016A0 ; Attributes: info_from_lumina
.text:00000000000016A0
.text:00000000000016A0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000016A0                 cmp     cs:completed_7697, 0
.text:00000000000016A7                 jnz     short locret_16D8
.text:00000000000016A9                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000016B1                 push    rbp
.text:00000000000016B2                 mov     rbp, rsp
.text:00000000000016B5                 jz      short loc_16C3
.text:00000000000016B7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000016BE                 call    __cxa_finalize
.text:00000000000016C3
.text:00000000000016C3 loc_16C3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000016C3                 call    deregister_tm_clones
.text:00000000000016C8                 mov     cs:completed_7697, 1
.text:00000000000016CF                 pop     rbp
.text:00000000000016D0                 retn
.text:00000000000016D0 ; ---------------------------------------------------------------------------
.text:00000000000016D1                 align 8
.text:00000000000016D8
.text:00000000000016D8 locret_16D8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000016D8                 rep retn
.text:00000000000016D8 __do_global_dtors_aux endp
.text:00000000000016D8
.text:00000000000016D8 ; ---------------------------------------------------------------------------
.text:00000000000016DA                 align 20h
.text:00000000000016E0
.text:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000016E0
.text:00000000000016E0 ; Attributes: bp-based frame
.text:00000000000016E0
.text:00000000000016E0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000016E0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000016E0                 push    rbp
.text:00000000000016E1                 mov     rbp, rsp
.text:00000000000016E4                 pop     rbp
.text:00000000000016E5                 jmp     register_tm_clones
.text:00000000000016E5 frame_dummy     endp
.text:00000000000016E5
.text:00000000000016E5 ; ---------------------------------------------------------------------------
.text:00000000000016EA                 align 10h
.text:00000000000016F0
.text:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000016F0
.text:00000000000016F0 ; Attributes: noreturn
.text:00000000000016F0
.text:00000000000016F0 ; void __fastcall __noreturn usage(int status)
.text:00000000000016F0                 public usage
.text:00000000000016F0 usage           proc near               ; CODE XREF: main+EB↑p
.text:00000000000016F0                                         ; DATA XREF: main+72↑o
.text:00000000000016F0
.text:00000000000016F0 var_A8          = qword ptr -0A8h
.text:00000000000016F0 var_A0          = qword ptr -0A0h
.text:00000000000016F0 var_98          = qword ptr -98h
.text:00000000000016F0 var_90          = qword ptr -90h
.text:00000000000016F0 var_88          = qword ptr -88h
.text:00000000000016F0 var_80          = qword ptr -80h
.text:00000000000016F0 var_78          = qword ptr -78h
.text:00000000000016F0 var_70          = qword ptr -70h
.text:00000000000016F0 var_68          = qword ptr -68h
.text:00000000000016F0 var_60          = qword ptr -60h
.text:00000000000016F0 var_58          = qword ptr -58h
.text:00000000000016F0 var_50          = qword ptr -50h
.text:00000000000016F0 var_48          = qword ptr -48h
.text:00000000000016F0 var_40          = qword ptr -40h
.text:00000000000016F0 var_30          = qword ptr -30h
.text:00000000000016F0
.text:00000000000016F0 ; __unwind {
.text:00000000000016F0                 push    r13
.text:00000000000016F2                 push    r12
.text:00000000000016F4                 mov     edx, 5          ; category
.text:00000000000016F9                 push    rbp
.text:00000000000016FA                 push    rbx
.text:00000000000016FB                 mov     ebp, edi
.text:00000000000016FD                 sub     rsp, 88h
.text:0000000000001704                 mov     rbx, cs:program_name
.text:000000000000170B                 mov     rax, fs:28h
.text:0000000000001714                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001719                 xor     eax, eax
.text:000000000000171B                 test    edi, edi
.text:000000000000171D                 jz      short loc_174D
.text:000000000000171F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001726                 xor     edi, edi        ; domainname
.text:0000000000001728                 call    _dcgettext
.text:000000000000172D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001734                 mov     rdx, rax
.text:0000000000001737                 mov     rcx, rbx
.text:000000000000173A                 mov     esi, 1
.text:000000000000173F                 xor     eax, eax
.text:0000000000001741                 call    ___fprintf_chk
.text:0000000000001746
.text:0000000000001746 loc_1746:                               ; CODE XREF: usage+27E↓j
.text:0000000000001746                 mov     edi, ebp        ; status
.text:0000000000001748                 call    _exit
.text:000000000000174D ; ---------------------------------------------------------------------------
.text:000000000000174D
.text:000000000000174D loc_174D:                               ; CODE XREF: usage+2D↑j
.text:000000000000174D                 lea     rsi, aUsageSOption ; "Usage: %s [OPTION]\n"
.text:0000000000001754                 xor     edi, edi        ; domainname
.text:0000000000001756                 call    _dcgettext
.text:000000000000175B                 mov     rdx, rbx
.text:000000000000175E                 mov     rsi, rax
.text:0000000000001761                 mov     edi, 1
.text:0000000000001766                 xor     eax, eax
.text:0000000000001768                 call    ___printf_chk
.text:000000000000176D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001774                 lea     rsi, aPrintTheNameOf ; "Print the name of the current user.\n\n"
.text:000000000000177B                 mov     edx, 5          ; category
.text:0000000000001780                 xor     edi, edi        ; domainname
.text:0000000000001782                 call    _dcgettext
.text:0000000000001787                 mov     rsi, rbx        ; stream
.text:000000000000178A                 mov     rdi, rax        ; s
.text:000000000000178D                 call    _fputs_unlocked
.text:0000000000001792                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001799                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000017A0                 mov     edx, 5          ; category
.text:00000000000017A5                 xor     edi, edi        ; domainname
.text:00000000000017A7                 call    _dcgettext
.text:00000000000017AC                 mov     rsi, rbx        ; stream
.text:00000000000017AF                 mov     rdi, rax        ; s
.text:00000000000017B2                 call    _fputs_unlocked
.text:00000000000017B7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000017BE                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000017C5                 mov     edx, 5          ; category
.text:00000000000017CA                 xor     edi, edi        ; domainname
.text:00000000000017CC                 call    _dcgettext
.text:00000000000017D1                 mov     rsi, rbx        ; stream
.text:00000000000017D4                 mov     rdi, rax        ; s
.text:00000000000017D7                 lea     rbx, aLogname   ; "logname"
.text:00000000000017DE                 call    _fputs_unlocked
.text:00000000000017E3                 lea     rax, asc_4700   ; "["
.text:00000000000017EA                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000017F1                 mov     [rsp+0A8h+var_48], 0
.text:00000000000017FA                 mov     [rsp+0A8h+var_40], 0
.text:0000000000001803                 mov     rdx, rsp
.text:0000000000001806                 mov     [rsp+0A8h+var_A8], rax
.text:000000000000180A                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001811                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000001816                 lea     rcx, aSha384sum ; "sha384sum"
.text:000000000000181D                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000001822                 lea     rax, domainname ; "coreutils"
.text:0000000000001829                 mov     [rsp+0A8h+var_68], rcx
.text:000000000000182E                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000001835                 mov     [rsp+0A8h+var_98], rax
.text:000000000000183A                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001841                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000001846                 mov     [rsp+0A8h+var_90], rax
.text:000000000000184B                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000001852                 mov     [rsp+0A8h+var_88], rax
.text:0000000000001857                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:000000000000185E                 mov     [rsp+0A8h+var_80], rax
.text:0000000000001863                 mov     [rsp+0A8h+var_70], rax
.text:0000000000001868                 mov     [rsp+0A8h+var_60], rax
.text:000000000000186D                 mov     [rsp+0A8h+var_50], rax
.text:0000000000001872                 nop     word ptr [rax+rax+00h]
.text:0000000000001878
.text:0000000000001878 loc_1878:                               ; CODE XREF: usage+1A5↓j
.text:0000000000001878                 add     rdx, 10h
.text:000000000000187C                 mov     rdi, [rdx]
.text:000000000000187F                 test    rdi, rdi
.text:0000000000001882                 jz      short loc_1897
.text:0000000000001884                 mov     ecx, 8
.text:0000000000001889                 mov     rsi, rbx
.text:000000000000188C                 repe cmpsb
.text:000000000000188E                 setnbe  al
.text:0000000000001891                 sbb     al, 0
.text:0000000000001893                 test    al, al
.text:0000000000001895                 jnz     short loc_1878
.text:0000000000001897
.text:0000000000001897 loc_1897:                               ; CODE XREF: usage+192↑j
.text:0000000000001897                 mov     r12, [rdx+8]
.text:000000000000189B                 xor     edi, edi        ; domainname
.text:000000000000189D                 mov     edx, 5          ; category
.text:00000000000018A2                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:00000000000018A9                 test    r12, r12
.text:00000000000018AC                 jz      loc_1973
.text:00000000000018B2                 call    _dcgettext
.text:00000000000018B7                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000018BE                 lea     rdx, unk_4776
.text:00000000000018C5                 mov     rsi, rax
.text:00000000000018C8                 mov     edi, 1
.text:00000000000018CD                 xor     eax, eax
.text:00000000000018CF                 call    ___printf_chk
.text:00000000000018D4                 xor     esi, esi        ; locale
.text:00000000000018D6                 mov     edi, 5          ; category
.text:00000000000018DB                 call    _setlocale
.text:00000000000018E0                 test    rax, rax
.text:00000000000018E3                 jz      short loc_1901
.text:00000000000018E5                 lea     rsi, s2         ; "en_"
.text:00000000000018EC                 mov     edx, 3          ; n
.text:00000000000018F1                 mov     rdi, rax        ; s1
.text:00000000000018F4                 call    _strncmp
.text:00000000000018F9                 test    eax, eax
.text:00000000000018FB                 jnz     loc_1A08
.text:0000000000001901
.text:0000000000001901 loc_1901:                               ; CODE XREF: usage+1F3↑j
.text:0000000000001901                                         ; usage+33D↓j
.text:0000000000001901                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001908                 xor     edi, edi        ; domainname
.text:000000000000190A                 mov     edx, 5          ; category
.text:000000000000190F                 call    _dcgettext
.text:0000000000001914                 lea     rcx, aLogname   ; "logname"
.text:000000000000191B                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001922                 mov     rsi, rax
.text:0000000000001925                 mov     edi, 1
.text:000000000000192A                 xor     eax, eax
.text:000000000000192C                 call    ___printf_chk
.text:0000000000001931                 cmp     r12, rbx
.text:0000000000001934                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000193B                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001942                 cmovz   rbx, rcx
.text:0000000000001946
.text:0000000000001946 loc_1946:                               ; CODE XREF: usage+30C↓j
.text:0000000000001946                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:000000000000194D                 xor     edi, edi        ; domainname
.text:000000000000194F                 mov     edx, 5          ; category
.text:0000000000001954                 call    _dcgettext
.text:0000000000001959                 mov     rcx, rbx
.text:000000000000195C                 mov     rsi, rax
.text:000000000000195F                 mov     rdx, r12
.text:0000000000001962                 mov     edi, 1
.text:0000000000001967                 xor     eax, eax
.text:0000000000001969                 call    ___printf_chk
.text:000000000000196E                 jmp     loc_1746
.text:0000000000001973 ; ---------------------------------------------------------------------------
.text:0000000000001973
.text:0000000000001973 loc_1973:                               ; CODE XREF: usage+1BC↑j
.text:0000000000001973                 call    _dcgettext
.text:0000000000001978                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000197F                 lea     rdx, unk_4776
.text:0000000000001986                 mov     rsi, rax
.text:0000000000001989                 mov     edi, 1
.text:000000000000198E                 xor     eax, eax
.text:0000000000001990                 call    ___printf_chk
.text:0000000000001995                 xor     esi, esi        ; locale
.text:0000000000001997                 mov     edi, 5          ; category
.text:000000000000199C                 call    _setlocale
.text:00000000000019A1                 test    rax, rax
.text:00000000000019A4                 jz      short loc_19BE
.text:00000000000019A6                 lea     rsi, s2         ; "en_"
.text:00000000000019AD                 mov     edx, 3          ; n
.text:00000000000019B2                 mov     rdi, rax        ; s1
.text:00000000000019B5                 call    _strncmp
.text:00000000000019BA                 test    eax, eax
.text:00000000000019BC                 jnz     short loc_1A01
.text:00000000000019BE
.text:00000000000019BE loc_19BE:                               ; CODE XREF: usage+2B4↑j
.text:00000000000019BE                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000019C5                 mov     edx, 5          ; category
.text:00000000000019CA                 xor     edi, edi        ; domainname
.text:00000000000019CC                 lea     r12, aLogname   ; "logname"
.text:00000000000019D3                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000019DA                 call    _dcgettext
.text:00000000000019DF                 lea     rcx, aLogname   ; "logname"
.text:00000000000019E6                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000019ED                 mov     rsi, rax
.text:00000000000019F0                 mov     edi, 1
.text:00000000000019F5                 xor     eax, eax
.text:00000000000019F7                 call    ___printf_chk
.text:00000000000019FC                 jmp     loc_1946
.text:0000000000001A01 ; ---------------------------------------------------------------------------
.text:0000000000001A01
.text:0000000000001A01 loc_1A01:                               ; CODE XREF: usage+2CC↑j
.text:0000000000001A01                 lea     r12, aLogname   ; "logname"
.text:0000000000001A08
.text:0000000000001A08 loc_1A08:                               ; CODE XREF: usage+20B↑j
.text:0000000000001A08                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001A0F                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001A16                 xor     edi, edi        ; domainname
.text:0000000000001A18                 mov     edx, 5          ; category
.text:0000000000001A1D                 call    _dcgettext
.text:0000000000001A22                 mov     rsi, r13        ; stream
.text:0000000000001A25                 mov     rdi, rax        ; s
.text:0000000000001A28                 call    _fputs_unlocked
.text:0000000000001A2D                 jmp     loc_1901
.text:0000000000001A2D ; } // starts at 16F0
.text:0000000000001A2D usage           endp
.text:0000000000001A2D
.text:0000000000001A2D ; ---------------------------------------------------------------------------
.text:0000000000001A32                 align 20h
.text:0000000000001A40
.text:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A40
.text:0000000000001A40
.text:0000000000001A40                 public close_stdout_set_file_name
.text:0000000000001A40 close_stdout_set_file_name proc near
.text:0000000000001A40 ; __unwind {
.text:0000000000001A40                 mov     cs:file_name, rdi
.text:0000000000001A47                 retn
.text:0000000000001A47 ; } // starts at 1A40
.text:0000000000001A47 close_stdout_set_file_name endp
.text:0000000000001A47
.text:0000000000001A47 ; ---------------------------------------------------------------------------
.text:0000000000001A48                 align 10h
.text:0000000000001A50
.text:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A50
.text:0000000000001A50
.text:0000000000001A50                 public close_stdout_set_ignore_EPIPE
.text:0000000000001A50 close_stdout_set_ignore_EPIPE proc near
.text:0000000000001A50 ; __unwind {
.text:0000000000001A50                 mov     cs:ignore_EPIPE, dil
.text:0000000000001A57                 retn
.text:0000000000001A57 ; } // starts at 1A50
.text:0000000000001A57 close_stdout_set_ignore_EPIPE endp
.text:0000000000001A57
.text:0000000000001A57 ; ---------------------------------------------------------------------------
.text:0000000000001A58                 align 20h
.text:0000000000001A60
.text:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A60
.text:0000000000001A60 ; Attributes: info_from_lumina
.text:0000000000001A60
.text:0000000000001A60 ; void __cdecl close_stdout()
.text:0000000000001A60                 public close_stdout
.text:0000000000001A60 close_stdout    proc near               ; DATA XREF: main+43↑o
.text:0000000000001A60 ; __unwind {
.text:0000000000001A60                 push    rbp
.text:0000000000001A61                 push    rbx
.text:0000000000001A62                 sub     rsp, 8
.text:0000000000001A66                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001A6D                 call    close_stream
.text:0000000000001A72                 test    eax, eax
.text:0000000000001A74                 jz      short loc_1A8C
.text:0000000000001A76                 call    ___errno_location
.text:0000000000001A7B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000001A82                 mov     rbx, rax
.text:0000000000001A85                 jz      short loc_1AA3
.text:0000000000001A87                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000001A8A                 jnz     short loc_1AA3
.text:0000000000001A8C
.text:0000000000001A8C loc_1A8C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000001A8C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000001A93                 call    close_stream
.text:0000000000001A98                 test    eax, eax
.text:0000000000001A9A                 jnz     short loc_1AE2
.text:0000000000001A9C                 add     rsp, 8
.text:0000000000001AA0                 pop     rbx
.text:0000000000001AA1                 pop     rbp
.text:0000000000001AA2                 retn
.text:0000000000001AA3 ; ---------------------------------------------------------------------------
.text:0000000000001AA3
.text:0000000000001AA3 loc_1AA3:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000001AA3                                         ; close_stdout+2A↑j
.text:0000000000001AA3                 lea     rsi, aWriteError ; "write error"
.text:0000000000001AAA                 xor     edi, edi        ; domainname
.text:0000000000001AAC                 mov     edx, 5          ; category
.text:0000000000001AB1                 call    _dcgettext
.text:0000000000001AB6                 mov     rdi, cs:file_name
.text:0000000000001ABD                 mov     rbp, rax
.text:0000000000001AC0                 test    rdi, rdi
.text:0000000000001AC3                 jz      short loc_1AED
.text:0000000000001AC5                 call    quotearg_colon
.text:0000000000001ACA                 mov     esi, [rbx]      ; errnum
.text:0000000000001ACC                 lea     rdx, format     ; "%s: %s"
.text:0000000000001AD3                 mov     rcx, rax
.text:0000000000001AD6                 mov     r8, rbp
.text:0000000000001AD9                 xor     edi, edi        ; status
.text:0000000000001ADB                 xor     eax, eax
.text:0000000000001ADD                 call    _error
.text:0000000000001AE2
.text:0000000000001AE2 loc_1AE2:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000001AE2                                         ; close_stdout+A2↓j
.text:0000000000001AE2                 mov     edi, cs:exit_failure ; status
.text:0000000000001AE8                 call    __exit
.text:0000000000001AED ; ---------------------------------------------------------------------------
.text:0000000000001AED
.text:0000000000001AED loc_1AED:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000001AED                 mov     esi, [rbx]      ; errnum
.text:0000000000001AEF                 lea     rdx, format+4   ; format
.text:0000000000001AF6                 mov     rcx, rax
.text:0000000000001AF9                 xor     edi, edi        ; status
.text:0000000000001AFB                 xor     eax, eax
.text:0000000000001AFD                 call    _error
.text:0000000000001B02                 jmp     short loc_1AE2
.text:0000000000001B02 ; } // starts at 1A60
.text:0000000000001B02 close_stdout    endp
.text:0000000000001B02
.text:0000000000001B02 ; ---------------------------------------------------------------------------
.text:0000000000001B04                 align 10h
.text:0000000000001B10
.text:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B10
.text:0000000000001B10
.text:0000000000001B10                 public parse_long_options
.text:0000000000001B10 parse_long_options proc near
.text:0000000000001B10
.text:0000000000001B10 var_100         = qword ptr -100h
.text:0000000000001B10 var_F8          = dword ptr -0F8h
.text:0000000000001B10 var_F4          = dword ptr -0F4h
.text:0000000000001B10 var_F0          = qword ptr -0F0h
.text:0000000000001B10 var_E8          = qword ptr -0E8h
.text:0000000000001B10 var_E0          = qword ptr -0E0h
.text:0000000000001B10 var_D8          = byte ptr -0D8h
.text:0000000000001B10 var_A8          = xmmword ptr -0A8h
.text:0000000000001B10 var_98          = xmmword ptr -98h
.text:0000000000001B10 var_88          = xmmword ptr -88h
.text:0000000000001B10 var_78          = xmmword ptr -78h
.text:0000000000001B10 var_68          = xmmword ptr -68h
.text:0000000000001B10 var_58          = xmmword ptr -58h
.text:0000000000001B10 var_48          = xmmword ptr -48h
.text:0000000000001B10 var_38          = xmmword ptr -38h
.text:0000000000001B10 arg_0           = byte ptr  8
.text:0000000000001B10
.text:0000000000001B10 ; __unwind {
.text:0000000000001B10                 push    r13
.text:0000000000001B12                 push    r12
.text:0000000000001B14                 mov     r13, r8
.text:0000000000001B17                 push    rbp
.text:0000000000001B18                 push    rbx
.text:0000000000001B19                 mov     rbp, rdx
.text:0000000000001B1C                 mov     r12, rcx
.text:0000000000001B1F                 sub     rsp, 0E8h
.text:0000000000001B26                 test    al, al
.text:0000000000001B28                 jz      short loc_1B64
.text:0000000000001B2A                 movaps  [rsp+108h+var_A8], xmm0
.text:0000000000001B2F                 movaps  [rsp+108h+var_98], xmm1
.text:0000000000001B34                 movaps  [rsp+108h+var_88], xmm2
.text:0000000000001B3C                 movaps  [rsp+108h+var_78], xmm3
.text:0000000000001B44                 movaps  [rsp+108h+var_68], xmm4
.text:0000000000001B4C                 movaps  [rsp+108h+var_58], xmm5
.text:0000000000001B54                 movaps  [rsp+108h+var_48], xmm6
.text:0000000000001B5C                 movaps  [rsp+108h+var_38], xmm7
.text:0000000000001B64
.text:0000000000001B64 loc_1B64:                               ; CODE XREF: parse_long_options+18↑j
.text:0000000000001B64                 mov     rax, fs:28h
.text:0000000000001B6D                 mov     [rsp+108h+var_E0], rax
.text:0000000000001B72                 xor     eax, eax
.text:0000000000001B74                 cmp     edi, 2
.text:0000000000001B77                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000001B7D                 mov     cs:opterr@@GLIBC_2_2_5, 0
.text:0000000000001B87                 jz      short loc_1BC0
.text:0000000000001B89
.text:0000000000001B89 loc_1B89:                               ; CODE XREF: parse_long_options+CE↓j
.text:0000000000001B89                                         ; parse_long_options+DD↓j ...
.text:0000000000001B89                 mov     rax, [rsp+108h+var_E0]
.text:0000000000001B8E                 xor     rax, fs:28h
.text:0000000000001B97                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:0000000000001B9D                 mov     cs:optind@@GLIBC_2_2_5, 0
.text:0000000000001BA7                 jnz     loc_1C4A
.text:0000000000001BAD                 add     rsp, 0E8h
.text:0000000000001BB4                 pop     rbx
.text:0000000000001BB5                 pop     rbp
.text:0000000000001BB6                 pop     r12
.text:0000000000001BB8                 pop     r13
.text:0000000000001BBA                 retn
.text:0000000000001BBA ; ---------------------------------------------------------------------------
.text:0000000000001BBB                 align 20h
.text:0000000000001BC0
.text:0000000000001BC0 loc_1BC0:                               ; CODE XREF: parse_long_options+77↑j
.text:0000000000001BC0                 lea     rcx, long_options ; longopts
.text:0000000000001BC7                 lea     rdx, shortopts  ; "+"
.text:0000000000001BCE                 xor     r8d, r8d        ; longind
.text:0000000000001BD1                 mov     [rsp+108h+var_100], r9
.text:0000000000001BD6                 call    _getopt_long
.text:0000000000001BDB                 cmp     eax, 0FFFFFFFFh
.text:0000000000001BDE                 jz      short loc_1B89
.text:0000000000001BE0                 cmp     eax, 68h ; 'h'
.text:0000000000001BE3                 mov     r9, [rsp+108h+var_100]
.text:0000000000001BE8                 jz      short loc_1C40
.text:0000000000001BEA                 cmp     eax, 76h ; 'v'
.text:0000000000001BED                 jnz     short loc_1B89
.text:0000000000001BEF                 lea     rax, [rsp+108h+arg_0]
.text:0000000000001BF7                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001BFE                 lea     r8, [rsp+108h+var_F8]
.text:0000000000001C03                 mov     rcx, r13
.text:0000000000001C06                 mov     rdx, r12
.text:0000000000001C09                 mov     rsi, rbp
.text:0000000000001C0C                 mov     [rsp+108h+var_F0], rax
.text:0000000000001C11                 lea     rax, [rsp+108h+var_D8]
.text:0000000000001C16                 mov     [rsp+108h+var_F8], 30h ; '0'
.text:0000000000001C1E                 mov     [rsp+108h+var_F4], 30h ; '0'
.text:0000000000001C26                 mov     [rsp+108h+var_E8], rax
.text:0000000000001C2B                 call    version_etc_va
.text:0000000000001C30                 xor     edi, edi        ; status
.text:0000000000001C32                 call    _exit
.text:0000000000001C32 ; ---------------------------------------------------------------------------
.text:0000000000001C37                 align 20h
.text:0000000000001C40
.text:0000000000001C40 loc_1C40:                               ; CODE XREF: parse_long_options+D8↑j
.text:0000000000001C40                 xor     edi, edi
.text:0000000000001C42                 call    r9
.text:0000000000001C45                 jmp     loc_1B89
.text:0000000000001C4A ; ---------------------------------------------------------------------------
.text:0000000000001C4A
.text:0000000000001C4A loc_1C4A:                               ; CODE XREF: parse_long_options+97↑j
.text:0000000000001C4A                 call    ___stack_chk_fail
.text:0000000000001C4A ; } // starts at 1B10
.text:0000000000001C4A parse_long_options endp
.text:0000000000001C4A
.text:0000000000001C4A ; ---------------------------------------------------------------------------
.text:0000000000001C4F                 align 10h
.text:0000000000001C50
.text:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C50
.text:0000000000001C50
.text:0000000000001C50                 public parse_gnu_standard_options_only
.text:0000000000001C50 parse_gnu_standard_options_only proc near
.text:0000000000001C50                                         ; CODE XREF: main+87↑p
.text:0000000000001C50
.text:0000000000001C50 var_F8          = dword ptr -0F8h
.text:0000000000001C50 var_F4          = dword ptr -0F4h
.text:0000000000001C50 var_F0          = qword ptr -0F0h
.text:0000000000001C50 var_E8          = qword ptr -0E8h
.text:0000000000001C50 var_E0          = qword ptr -0E0h
.text:0000000000001C50 var_D8          = byte ptr -0D8h
.text:0000000000001C50 var_A8          = xmmword ptr -0A8h
.text:0000000000001C50 var_98          = xmmword ptr -98h
.text:0000000000001C50 var_88          = xmmword ptr -88h
.text:0000000000001C50 var_78          = xmmword ptr -78h
.text:0000000000001C50 var_68          = xmmword ptr -68h
.text:0000000000001C50 var_58          = xmmword ptr -58h
.text:0000000000001C50 var_48          = xmmword ptr -48h
.text:0000000000001C50 var_38          = xmmword ptr -38h
.text:0000000000001C50 arg_0           = qword ptr  8
.text:0000000000001C50 arg_8           = byte ptr  10h
.text:0000000000001C50
.text:0000000000001C50 ; __unwind {
.text:0000000000001C50                 push    r14
.text:0000000000001C52                 push    r13
.text:0000000000001C54                 mov     r14, r8
.text:0000000000001C57                 push    r12
.text:0000000000001C59                 push    rbp
.text:0000000000001C5A                 mov     r12, rdx
.text:0000000000001C5D                 push    rbx
.text:0000000000001C5E                 mov     r13, rcx
.text:0000000000001C61                 sub     rsp, 0D0h
.text:0000000000001C68                 test    al, al
.text:0000000000001C6A                 mov     rbp, [rsp+0F8h+arg_0]
.text:0000000000001C72                 jz      short loc_1CAB
.text:0000000000001C74                 movaps  [rsp+0F8h+var_A8], xmm0
.text:0000000000001C79                 movaps  [rsp+0F8h+var_98], xmm1
.text:0000000000001C7E                 movaps  [rsp+0F8h+var_88], xmm2
.text:0000000000001C83                 movaps  [rsp+0F8h+var_78], xmm3
.text:0000000000001C8B                 movaps  [rsp+0F8h+var_68], xmm4
.text:0000000000001C93                 movaps  [rsp+0F8h+var_58], xmm5
.text:0000000000001C9B                 movaps  [rsp+0F8h+var_48], xmm6
.text:0000000000001CA3                 movaps  [rsp+0F8h+var_38], xmm7
.text:0000000000001CAB
.text:0000000000001CAB loc_1CAB:                               ; CODE XREF: parse_gnu_standard_options_only+22↑j
.text:0000000000001CAB                 mov     rax, fs:28h
.text:0000000000001CB4                 mov     [rsp+0F8h+var_E0], rax
.text:0000000000001CB9                 xor     eax, eax
.text:0000000000001CBB                 lea     rdx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001CC2                 lea     rax, shortopts  ; "+"
.text:0000000000001CC9                 test    r9b, r9b
.text:0000000000001CCC                 lea     rcx, long_options ; longopts
.text:0000000000001CD3                 cmovz   rdx, rax        ; shortopts
.text:0000000000001CD7                 xor     r8d, r8d        ; longind
.text:0000000000001CDA                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000001CE0                 mov     cs:opterr@@GLIBC_2_2_5, 1
.text:0000000000001CEA                 call    _getopt_long
.text:0000000000001CEF                 cmp     eax, 0FFFFFFFFh
.text:0000000000001CF2                 jz      short loc_1D58
.text:0000000000001CF4                 cmp     eax, 68h ; 'h'
.text:0000000000001CF7                 jz      loc_1D80
.text:0000000000001CFD                 cmp     eax, 76h ; 'v'
.text:0000000000001D00                 jnz     short loc_1D50
.text:0000000000001D02                 lea     rax, [rsp+0F8h+arg_8]
.text:0000000000001D0A                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001D11                 mov     r8, rsp
.text:0000000000001D14                 mov     rcx, r14
.text:0000000000001D17                 mov     rdx, r13
.text:0000000000001D1A                 mov     rsi, r12
.text:0000000000001D1D                 mov     [rsp+0F8h+var_F0], rax
.text:0000000000001D22                 lea     rax, [rsp+0F8h+var_D8]
.text:0000000000001D27                 mov     [rsp+0F8h+var_F8], 30h ; '0'
.text:0000000000001D2E                 mov     [rsp+0F8h+var_F4], 30h ; '0'
.text:0000000000001D36                 mov     [rsp+0F8h+var_E8], rax
.text:0000000000001D3B                 call    version_etc_va
.text:0000000000001D40                 xor     edi, edi        ; status
.text:0000000000001D42                 call    _exit
.text:0000000000001D42 ; ---------------------------------------------------------------------------
.text:0000000000001D47                 align 10h
.text:0000000000001D50
.text:0000000000001D50 loc_1D50:                               ; CODE XREF: parse_gnu_standard_options_only+B0↑j
.text:0000000000001D50                 mov     edi, cs:exit_failure
.text:0000000000001D56                 call    rbp
.text:0000000000001D58
.text:0000000000001D58 loc_1D58:                               ; CODE XREF: parse_gnu_standard_options_only+A2↑j
.text:0000000000001D58                                         ; parse_gnu_standard_options_only+134↓j
.text:0000000000001D58                 mov     rax, [rsp+0F8h+var_E0]
.text:0000000000001D5D                 xor     rax, fs:28h
.text:0000000000001D66                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:0000000000001D6C                 jnz     short loc_1D86
.text:0000000000001D6E                 add     rsp, 0D0h
.text:0000000000001D75                 pop     rbx
.text:0000000000001D76                 pop     rbp
.text:0000000000001D77                 pop     r12
.text:0000000000001D79                 pop     r13
.text:0000000000001D7B                 pop     r14
.text:0000000000001D7D                 retn
.text:0000000000001D7D ; ---------------------------------------------------------------------------
.text:0000000000001D7E                 align 20h
.text:0000000000001D80
.text:0000000000001D80 loc_1D80:                               ; CODE XREF: parse_gnu_standard_options_only+A7↑j
.text:0000000000001D80                 xor     edi, edi
.text:0000000000001D82                 call    rbp
.text:0000000000001D84                 jmp     short loc_1D58
.text:0000000000001D86 ; ---------------------------------------------------------------------------
.text:0000000000001D86
.text:0000000000001D86 loc_1D86:                               ; CODE XREF: parse_gnu_standard_options_only+11C↑j
.text:0000000000001D86                 call    ___stack_chk_fail
.text:0000000000001D86 ; } // starts at 1C50
.text:0000000000001D86 parse_gnu_standard_options_only endp
.text:0000000000001D86
.text:0000000000001D86 ; ---------------------------------------------------------------------------
.text:0000000000001D8B                 align 10h
.text:0000000000001D90
.text:0000000000001D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D90
.text:0000000000001D90
.text:0000000000001D90                 public set_program_name
.text:0000000000001D90 set_program_name proc near              ; CODE XREF: main+E↑p
.text:0000000000001D90 ; __unwind {
.text:0000000000001D90                 test    rdi, rdi
.text:0000000000001D93                 push    rbx
.text:0000000000001D94                 jz      short loc_1E0D
.text:0000000000001D96                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000001D9B                 mov     rbx, rdi
.text:0000000000001D9E                 call    _strrchr
.text:0000000000001DA3                 test    rax, rax
.text:0000000000001DA6                 jz      short loc_1DFD
.text:0000000000001DA8                 lea     r8, [rax+1]
.text:0000000000001DAC                 mov     rdx, r8
.text:0000000000001DAF                 sub     rdx, rbx
.text:0000000000001DB2                 cmp     rdx, 6
.text:0000000000001DB6                 jle     short loc_1DFD
.text:0000000000001DB8                 lea     rsi, [rax-6]
.text:0000000000001DBC                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000001DC3                 mov     ecx, 7
.text:0000000000001DC8                 repe cmpsb
.text:0000000000001DCA                 setnbe  dl
.text:0000000000001DCD                 sbb     dl, 0
.text:0000000000001DD0                 test    dl, dl
.text:0000000000001DD2                 jnz     short loc_1DFD
.text:0000000000001DD4                 lea     rdi, aLt        ; "lt-"
.text:0000000000001DDB                 mov     ecx, 3
.text:0000000000001DE0                 mov     rsi, r8
.text:0000000000001DE3                 mov     rbx, r8
.text:0000000000001DE6                 repe cmpsb
.text:0000000000001DE8                 setnbe  dl
.text:0000000000001DEB                 sbb     dl, 0
.text:0000000000001DEE                 test    dl, dl
.text:0000000000001DF0                 jnz     short loc_1DFD
.text:0000000000001DF2                 lea     rbx, [rax+4]
.text:0000000000001DF6                 mov     cs:__bss_start, rbx
.text:0000000000001DFD
.text:0000000000001DFD loc_1DFD:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000001DFD                                         ; set_program_name+26↑j ...
.text:0000000000001DFD                 mov     cs:program_name, rbx
.text:0000000000001E04                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000001E0B                 pop     rbx
.text:0000000000001E0C                 retn
.text:0000000000001E0D ; ---------------------------------------------------------------------------
.text:0000000000001E0D
.text:0000000000001E0D loc_1E0D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000001E0D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000001E14                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000001E1B                 mov     edx, 37h ; '7'  ; n
.text:0000000000001E20                 mov     esi, 1          ; size
.text:0000000000001E25                 call    _fwrite
.text:0000000000001E2A                 call    _abort
.text:0000000000001E2A ; } // starts at 1D90
.text:0000000000001E2A set_program_name endp
.text:0000000000001E2A
.text:0000000000001E2A ; ---------------------------------------------------------------------------
.text:0000000000001E2F                 align 10h
.text:0000000000001E30
.text:0000000000001E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E30
.text:0000000000001E30 ; Attributes: info_from_lumina
.text:0000000000001E30
.text:0000000000001E30 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000001E30 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000001E30                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000001E30 ; __unwind {
.text:0000000000001E30                 push    rbp
.text:0000000000001E31                 push    rbx
.text:0000000000001E32                 mov     rbp, rdi
.text:0000000000001E35                 mov     ebx, esi
.text:0000000000001E37                 sub     rsp, 8
.text:0000000000001E3B                 call    locale_charset
.text:0000000000001E40                 movzx   edx, byte ptr [rax]
.text:0000000000001E43                 and     edx, 0FFFFFFDFh
.text:0000000000001E46                 cmp     dl, 55h ; 'U'
.text:0000000000001E49                 jz      short loc_1EC0
.text:0000000000001E4B                 cmp     dl, 47h ; 'G'
.text:0000000000001E4E                 jz      short loc_1E70
.text:0000000000001E50
.text:0000000000001E50 loc_1E50:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000001E50                                         ; gettext_quote+50↓j ...
.text:0000000000001E50                 lea     rax, unk_49CB
.text:0000000000001E57                 lea     rdx, asc_49CD   ; "'"
.text:0000000000001E5E                 cmp     ebx, 9
.text:0000000000001E61                 cmovnz  rax, rdx
.text:0000000000001E65                 add     rsp, 8
.text:0000000000001E69                 pop     rbx
.text:0000000000001E6A                 pop     rbp
.text:0000000000001E6B                 retn
.text:0000000000001E6B ; ---------------------------------------------------------------------------
.text:0000000000001E6C                 align 10h
.text:0000000000001E70
.text:0000000000001E70 loc_1E70:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000001E70                 movzx   edx, byte ptr [rax+1]
.text:0000000000001E74                 and     edx, 0FFFFFFDFh
.text:0000000000001E77                 cmp     dl, 42h ; 'B'
.text:0000000000001E7A                 jnz     short loc_1E50
.text:0000000000001E7C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000001E80                 jnz     short loc_1E50
.text:0000000000001E82                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000001E86                 jnz     short loc_1E50
.text:0000000000001E88                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000001E8C                 jnz     short loc_1E50
.text:0000000000001E8E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000001E92                 jnz     short loc_1E50
.text:0000000000001E94                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000001E98                 jnz     short loc_1E50
.text:0000000000001E9A                 cmp     byte ptr [rax+7], 0
.text:0000000000001E9E                 jnz     short loc_1E50
.text:0000000000001EA0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000001EA4                 lea     rax, unk_49C4
.text:0000000000001EAB                 lea     rdx, unk_49C8
.text:0000000000001EB2                 cmovnz  rax, rdx
.text:0000000000001EB6                 add     rsp, 8
.text:0000000000001EBA                 pop     rbx
.text:0000000000001EBB                 pop     rbp
.text:0000000000001EBC                 retn
.text:0000000000001EBC ; ---------------------------------------------------------------------------
.text:0000000000001EBD                 align 20h
.text:0000000000001EC0
.text:0000000000001EC0 loc_1EC0:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000001EC0                 movzx   edx, byte ptr [rax+1]
.text:0000000000001EC4                 and     edx, 0FFFFFFDFh
.text:0000000000001EC7                 cmp     dl, 54h ; 'T'
.text:0000000000001ECA                 jnz     short loc_1E50
.text:0000000000001ECC                 movzx   edx, byte ptr [rax+2]
.text:0000000000001ED0                 and     edx, 0FFFFFFDFh
.text:0000000000001ED3                 cmp     dl, 46h ; 'F'
.text:0000000000001ED6                 jnz     loc_1E50
.text:0000000000001EDC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000001EE0                 jnz     loc_1E50
.text:0000000000001EE6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000001EEA                 jnz     loc_1E50
.text:0000000000001EF0                 cmp     byte ptr [rax+5], 0
.text:0000000000001EF4                 jnz     loc_1E50
.text:0000000000001EFA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000001EFE                 lea     rax, unk_49BC
.text:0000000000001F05                 lea     rdx, unk_49C0
.text:0000000000001F0C                 cmovnz  rax, rdx
.text:0000000000001F10                 add     rsp, 8
.text:0000000000001F14                 pop     rbx
.text:0000000000001F15                 pop     rbp
.text:0000000000001F16                 retn
.text:0000000000001F16 ; } // starts at 1E30
.text:0000000000001F16 gettext_quote   endp
.text:0000000000001F16
.text:0000000000001F16 ; ---------------------------------------------------------------------------
.text:0000000000001F17                 align 20h
.text:0000000000001F20
.text:0000000000001F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F20
.text:0000000000001F20 ; Attributes: info_from_lumina
.text:0000000000001F20
.text:0000000000001F20 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000001F20 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000001F20                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000001F20
.text:0000000000001F20 var_E0          = dword ptr -0E0h
.text:0000000000001F20 var_DB          = byte ptr -0DBh
.text:0000000000001F20 var_DA          = byte ptr -0DAh
.text:0000000000001F20 var_D9          = byte ptr -0D9h
.text:0000000000001F20 s               = qword ptr -0D8h
.text:0000000000001F20 n               = qword ptr -0D0h
.text:0000000000001F20 var_C8          = qword ptr -0C8h
.text:0000000000001F20 ps              = qword ptr -0C0h
.text:0000000000001F20 var_B8          = qword ptr -0B8h
.text:0000000000001F20 var_B0          = qword ptr -0B0h
.text:0000000000001F20 var_A8          = qword ptr -0A8h
.text:0000000000001F20 s2              = qword ptr -0A0h
.text:0000000000001F20 var_98          = qword ptr -98h
.text:0000000000001F20 var_90          = qword ptr -90h
.text:0000000000001F20 var_88          = qword ptr -88h
.text:0000000000001F20 var_80          = qword ptr -80h
.text:0000000000001F20 var_78          = qword ptr -78h
.text:0000000000001F20 var_70          = dword ptr -70h
.text:0000000000001F20 var_6C          = byte ptr -6Ch
.text:0000000000001F20 var_6B          = byte ptr -6Bh
.text:0000000000001F20 var_6A          = byte ptr -6Ah
.text:0000000000001F20 var_69          = byte ptr -69h
.text:0000000000001F20 var_68          = qword ptr -68h
.text:0000000000001F20 var_60          = qword ptr -60h
.text:0000000000001F20 wc              = dword ptr -4Ch
.text:0000000000001F20 var_48          = qword ptr -48h
.text:0000000000001F20 var_40          = qword ptr -40h
.text:0000000000001F20 arg_0           = qword ptr  8
.text:0000000000001F20 arg_8           = qword ptr  10h
.text:0000000000001F20 arg_10          = qword ptr  18h
.text:0000000000001F20
.text:0000000000001F20 ; __unwind {
.text:0000000000001F20                 push    r15
.text:0000000000001F22                 push    r14
.text:0000000000001F24                 mov     r15d, r8d
.text:0000000000001F27                 push    r13
.text:0000000000001F29                 push    r12
.text:0000000000001F2B                 mov     r14, rdi
.text:0000000000001F2E                 push    rbp
.text:0000000000001F2F                 push    rbx
.text:0000000000001F30                 mov     ebx, r9d
.text:0000000000001F33                 mov     r13, rsi
.text:0000000000001F36                 mov     rbp, rcx
.text:0000000000001F39                 and     ebx, 2
.text:0000000000001F3C                 sub     rsp, 0B8h
.text:0000000000001F43                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000001F4B                 mov     [rsp+0E8h+s], rdx
.text:0000000000001F50                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000001F55                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000001F5A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000001F5F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000001F67                 mov     [rsp+0E8h+var_80], rax
.text:0000000000001F6C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000001F74                 mov     [rsp+0E8h+var_88], rax
.text:0000000000001F79                 mov     rax, fs:28h
.text:0000000000001F82                 mov     [rsp+0E8h+var_40], rax
.text:0000000000001F8A                 xor     eax, eax
.text:0000000000001F8C                 call    ___ctype_get_mb_cur_max
.text:0000000000001F91                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000001F95                 mov     [rsp+0E8h+var_90], rax
.text:0000000000001F9A                 ja      def_1FB1        ; jumptable 00000000000121F1 default case
.text:0000000000001FA0                 lea     rcx, jpt_1FB1
.text:0000000000001FA7                 mov     edx, r15d
.text:0000000000001FAA                 movsxd  rax, ds:(jpt_1FB1 - 4A20h)[rcx+rdx*4]
.text:0000000000001FAE                 add     rax, rcx
.text:0000000000001FB1                 jmp     rax             ; switch jump
.text:0000000000001FB3 ; ---------------------------------------------------------------------------
.text:0000000000001FB3
.text:0000000000001FB3 loc_1FB3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000001FB3                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000001FB3                                         ; DATA XREF: ...
.text:0000000000001FB3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000001FB8                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000001FBD                 xor     r12d, r12d
.text:0000000000001FC0                 mov     [rsp+0E8h+var_98], 0
.text:0000000000001FC9                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000001FCE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000001FD3
.text:0000000000001FD3 loc_1FD3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000001FD3                 lea     rax, asc_49CD   ; "'"
.text:0000000000001FDA                 mov     [rsp+0E8h+n], 1
.text:0000000000001FE3                 xor     r15d, r15d
.text:0000000000001FE6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000001FEE                 mov     [rsp+0E8h+s2], rax
.text:0000000000001FF3
.text:0000000000001FF3 loc_1FF3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000001FF3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000001FF3                 xor     r11d, r11d
.text:0000000000001FF6                 mov     rax, rbp
.text:0000000000001FF9                 mov     r8d, r12d
.text:0000000000001FFC                 mov     rbp, r11
.text:0000000000001FFF                 mov     r11, rax
.text:0000000000002002                 nop     word ptr [rax+rax+00h]
.text:0000000000002008
.text:0000000000002008 loc_2008:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002008                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002008                 cmp     r11, rbp
.text:000000000000200B                 setnz   r12b
.text:000000000000200F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002013                 jnz     short loc_2022
.text:0000000000002015                 mov     rax, [rsp+0E8h+s]
.text:000000000000201A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000201E                 setnz   r12b
.text:0000000000002022
.text:0000000000002022 loc_2022:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002022                 test    r12b, r12b
.text:0000000000002025                 jz      loc_2680
.text:000000000000202B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002030                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002035                 lea     r9, [rdi+rbp]
.text:0000000000002039                 setnz   al
.text:000000000000203C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002040                 mov     r10d, eax
.text:0000000000002043                 jz      loc_20F0
.text:0000000000002049                 mov     rax, [rsp+0E8h+n]
.text:000000000000204E                 test    rax, rax
.text:0000000000002051                 jz      loc_2480
.text:0000000000002057                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000205B                 lea     rbx, [rbp+rax+0]
.text:0000000000002060                 jnz     short loc_2090
.text:0000000000002062                 cmp     rax, 1
.text:0000000000002066                 jbe     short loc_2090
.text:0000000000002068                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000206D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002072                 mov     [rsp+0E8h+ps], r9
.text:0000000000002077                 call    _strlen
.text:000000000000207C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002082                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002088                 mov     r11, rax
.text:000000000000208B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002090
.text:0000000000002090 loc_2090:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002090                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002090                 cmp     rbx, r11
.text:0000000000002093                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002098                 ja      loc_2650
.text:000000000000209E                 mov     rdx, [rsp+0E8h+n] ; n
.text:00000000000020A3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:00000000000020A8                 mov     rdi, r9         ; s1
.text:00000000000020AB                 mov     [rsp+0E8h+var_A8], r11
.text:00000000000020B0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000020B5                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000020BA                 call    _memcmp
.text:00000000000020BF                 test    eax, eax
.text:00000000000020C1                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000020C6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000020CC                 mov     r11, [rsp+0E8h+var_A8]
.text:00000000000020D1                 jnz     loc_2650
.text:00000000000020D7                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000020DC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000020E2                 jnz     loc_3065
.text:00000000000020E8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000020F0
.text:00000000000020F0 loc_20F0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:00000000000020F0                                         ; quotearg_buffer_restyled+733↓j
.text:00000000000020F0                 movzx   ebx, byte ptr [r9]
.text:00000000000020F4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000020F7                 ja      def_210E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000020FD                 lea     rcx, jpt_210E
.text:0000000000002104                 movzx   edx, bl
.text:0000000000002107                 movsxd  rax, ds:(jpt_210E - 4A4Ch)[rcx+rdx*4]
.text:000000000000210B                 add     rax, rcx
.text:000000000000210E                 jmp     rax             ; switch jump
.text:0000000000002110 ; ---------------------------------------------------------------------------
.text:0000000000002110
.text:0000000000002110 loc_2110:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002110                                         ; DATA XREF: .rodata:jpt_249A↓o
.text:0000000000002110                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002113
.text:0000000000002113 loc_2113:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002113                                         ; DATA XREF: .rodata:jpt_210E↓o
.text:0000000000002113                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002117                 setnz   al
.text:000000000000211A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000211E                 jnz     short loc_212C
.text:0000000000002120                 mov     rax, [rsp+0E8h+s]
.text:0000000000002125                 cmp     byte ptr [rax+1], 0
.text:0000000000002129                 setnz   al
.text:000000000000212C
.text:000000000000212C loc_212C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000212C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002131                 setz    dl
.text:0000000000002134                 test    al, al
.text:0000000000002136                 jz      loc_2388
.text:000000000000213C
.text:000000000000213C loc_213C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000213C                 xor     r12d, r12d
.text:000000000000213F                 xor     eax, eax
.text:0000000000002141                 nop     dword ptr [rax+00000000h]
.text:0000000000002148
.text:0000000000002148 loc_2148:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002148                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002148                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000214D                 jnz     loc_2262
.text:0000000000002153                 test    dl, dl
.text:0000000000002155                 jnz     loc_2262
.text:000000000000215B
.text:000000000000215B loc_215B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000215B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002160                 test    rsi, rsi
.text:0000000000002163                 jz      short loc_2179
.text:0000000000002165                 mov     edx, ebx
.text:0000000000002167                 shr     dl, 5
.text:000000000000216A                 movzx   edx, dl
.text:000000000000216D                 mov     edx, [rsi+rdx*4]
.text:0000000000002170                 bt      edx, ebx
.text:0000000000002173                 jb      loc_22C3
.text:0000000000002179
.text:0000000000002179 loc_2179:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002179                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002179                 test    r10b, r10b
.text:000000000000217C                 jnz     loc_22C3
.text:0000000000002182                 xor     eax, 1
.text:0000000000002185                 add     rbp, 1
.text:0000000000002189                 and     eax, r8d
.text:000000000000218C
.text:000000000000218C loc_218C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000218C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000218C                 test    al, al
.text:000000000000218E                 jz      short loc_21B0
.text:0000000000002190                 cmp     r13, r15
.text:0000000000002193                 jbe     short loc_219A
.text:0000000000002195                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000219A
.text:000000000000219A loc_219A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000219A                 lea     rax, [r15+1]
.text:000000000000219E                 cmp     r13, rax
.text:00000000000021A1                 jbe     short loc_21A9
.text:00000000000021A3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000021A9
.text:00000000000021A9 loc_21A9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:00000000000021A9                 add     r15, 2
.text:00000000000021AD                 xor     r8d, r8d
.text:00000000000021B0
.text:00000000000021B0 loc_21B0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:00000000000021B0                                         ; quotearg_buffer_restyled+403↓j ...
.text:00000000000021B0                 cmp     r15, r13
.text:00000000000021B3                 jnb     short loc_21B9
.text:00000000000021B5                 mov     [r14+r15], bl
.text:00000000000021B9
.text:00000000000021B9 loc_21B9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:00000000000021B9                 movzx   edi, [rsp+0E8h+var_DA]
.text:00000000000021BE                 add     r15, 1
.text:00000000000021C2                 mov     eax, 0
.text:00000000000021C7                 test    r12b, r12b
.text:00000000000021CA                 cmovz   edi, eax
.text:00000000000021CD                 mov     [rsp+0E8h+var_DA], dil
.text:00000000000021D2                 jmp     loc_2008
.text:00000000000021D2 ; ---------------------------------------------------------------------------
.text:00000000000021D7                 align 20h
.text:00000000000021E0
.text:00000000000021E0 loc_21E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000021E0                                         ; DATA XREF: .rodata:jpt_249A↓o
.text:00000000000021E0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000021E3
.text:00000000000021E3 loc_21E3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000021E3                                         ; DATA XREF: .rodata:jpt_210E↓o
.text:00000000000021E3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000021E7                 cmp     eax, 2
.text:00000000000021EA                 jz      loc_27A8
.text:00000000000021F0                 cmp     eax, 5
.text:00000000000021F3                 jz      loc_2768
.text:00000000000021F9                 cmp     eax, 2
.text:00000000000021FC                 mov     ebx, 3Fh ; '?'
.text:0000000000002201                 setz    dl
.text:0000000000002204                 xor     r12d, r12d
.text:0000000000002207                 xor     eax, eax
.text:0000000000002209                 jmp     loc_2148
.text:0000000000002209 ; ---------------------------------------------------------------------------
.text:000000000000220E                 align 10h
.text:0000000000002210
.text:0000000000002210 loc_2210:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002210                                         ; DATA XREF: .rodata:jpt_249A↓o
.text:0000000000002210                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002213
.text:0000000000002213 loc_2213:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002213                                         ; DATA XREF: .rodata:jpt_210E↓o
.text:0000000000002213                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002218                 jz      loc_2720
.text:000000000000221E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002223                 xor     edx, edx
.text:0000000000002225                 xor     eax, eax
.text:0000000000002227                 mov     ebx, 27h ; '''
.text:000000000000222C                 jmp     loc_2148
.text:000000000000222C ; ---------------------------------------------------------------------------
.text:0000000000002231                 align 8
.text:0000000000002238
.text:0000000000002238 loc_2238:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002238                                         ; DATA XREF: .rodata:jpt_210E↓o
.text:0000000000002238                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000223D                 mov     ebx, 74h ; 't'
.text:0000000000002242
.text:0000000000002242 loc_2242:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002242                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002242                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002247                 setz    al
.text:000000000000224A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000224E                 jnz     loc_239E
.text:0000000000002254
.text:0000000000002254 loc_2254:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002254                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002254                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002259                 jnz     short loc_22C0
.text:000000000000225B
.text:000000000000225B loc_225B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000225B                 mov     ebx, edx
.text:000000000000225D                 xor     r12d, r12d
.text:0000000000002260                 xor     eax, eax
.text:0000000000002262
.text:0000000000002262 loc_2262:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002262                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002262                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002267                 jnz     loc_215B
.text:000000000000226D                 jmp     loc_2179
.text:000000000000226D ; ---------------------------------------------------------------------------
.text:0000000000002272                 align 8
.text:0000000000002278
.text:0000000000002278 loc_2278:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002278                                         ; DATA XREF: .rodata:jpt_210E↓o
.text:0000000000002278                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000227D                 mov     ebx, 62h ; 'b'
.text:0000000000002282                 jmp     short loc_2254
.text:0000000000002282 ; ---------------------------------------------------------------------------
.text:0000000000002284                 align 8
.text:0000000000002288
.text:0000000000002288 loc_2288:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002288                                         ; DATA XREF: .rodata:jpt_210E↓o
.text:0000000000002288                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000228D                 jz      loc_2660
.text:0000000000002293                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002298                 jz      loc_24B0
.text:000000000000229E
.text:000000000000229E loc_229E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000229E                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000022A3                 jz      loc_24B0
.text:00000000000022A9                 cmp     [rsp+0E8h+n], 0
.text:00000000000022AF                 jnz     loc_266B
.text:00000000000022B5                 mov     ebx, 5Ch ; '\'
.text:00000000000022BA                 nop     word ptr [rax+rax+00h]
.text:00000000000022C0
.text:00000000000022C0 loc_22C0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000022C0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000022C0                 xor     r12d, r12d
.text:00000000000022C3
.text:00000000000022C3 loc_22C3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000022C3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000022C3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000022C8                 setz    dl
.text:00000000000022CB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000022D0                 mov     eax, edx
.text:00000000000022D2                 jnz     loc_2B28
.text:00000000000022D8                 mov     eax, r8d
.text:00000000000022DB                 xor     eax, 1
.text:00000000000022DE                 and     al, dl
.text:00000000000022E0                 jz      short loc_2311
.text:00000000000022E2                 cmp     r13, r15
.text:00000000000022E5                 jbe     short loc_22EC
.text:00000000000022E7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000022EC
.text:00000000000022EC loc_22EC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000022EC                 lea     rdx, [r15+1]
.text:00000000000022F0                 cmp     r13, rdx
.text:00000000000022F3                 jbe     short loc_22FB
.text:00000000000022F5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000022FB
.text:00000000000022FB loc_22FB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000022FB                 lea     rdx, [r15+2]
.text:00000000000022FF                 cmp     r13, rdx
.text:0000000000002302                 jbe     short loc_230A
.text:0000000000002304                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000230A
.text:000000000000230A loc_230A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000230A                 add     r15, 3
.text:000000000000230E                 mov     r8d, eax
.text:0000000000002311
.text:0000000000002311 loc_2311:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002311                 cmp     r13, r15
.text:0000000000002314                 jbe     short loc_231B
.text:0000000000002316                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000231B
.text:000000000000231B loc_231B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000231B                 add     r15, 1
.text:000000000000231F                 add     rbp, 1
.text:0000000000002323                 jmp     loc_21B0
.text:0000000000002323 ; ---------------------------------------------------------------------------
.text:0000000000002328                 align 10h
.text:0000000000002330
.text:0000000000002330 loc_2330:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002330                                         ; DATA XREF: .rodata:jpt_210E↓o
.text:0000000000002330                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002335                 jnz     loc_2503
.text:000000000000233B                 xor     edx, edx
.text:000000000000233D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002342                 jz      loc_225B
.text:0000000000002348                 add     rbp, 1
.text:000000000000234C                 jmp     loc_2008
.text:000000000000234C ; ---------------------------------------------------------------------------
.text:0000000000002351                 align 8
.text:0000000000002358
.text:0000000000002358 loc_2358:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002358                                         ; DATA XREF: .rodata:jpt_210E↓o
.text:0000000000002358                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000235D                 setz    dl
.text:0000000000002360                 xor     eax, eax
.text:0000000000002362                 jmp     loc_2148
.text:0000000000002362 ; ---------------------------------------------------------------------------
.text:0000000000002367                 align 10h
.text:0000000000002370
.text:0000000000002370 loc_2370:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002370                                         ; DATA XREF: .rodata:jpt_210E↓o
.text:0000000000002370                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000002375                 mov     ebx, 61h ; 'a'
.text:000000000000237A                 jmp     loc_2254
.text:000000000000237A ; ---------------------------------------------------------------------------
.text:000000000000237F                 align 20h
.text:0000000000002380
.text:0000000000002380 loc_2380:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002380                                         ; DATA XREF: .rodata:jpt_210E↓o
.text:0000000000002380                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000002385                 setz    dl
.text:0000000000002388
.text:0000000000002388 loc_2388:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000002388                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000002388                 test    rbp, rbp
.text:000000000000238B                 jnz     loc_213C
.text:0000000000002391
.text:0000000000002391 loc_2391:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000002391                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000002391                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002396                 and     al, dl
.text:0000000000002398                 jz      loc_2148
.text:000000000000239E
.text:000000000000239E loc_239E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000239E                 mov     rbp, r11
.text:00000000000023A1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000023A9                 jmp     loc_2AA9
.text:00000000000023A9 ; ---------------------------------------------------------------------------
.text:00000000000023AE                 align 10h
.text:00000000000023B0
.text:00000000000023B0 loc_23B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023B0                                         ; DATA XREF: .rodata:jpt_210E↓o
.text:00000000000023B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000023B5                 setz    dl
.text:00000000000023B8                 xor     r12d, r12d
.text:00000000000023BB                 jmp     short loc_2391
.text:00000000000023BB ; ---------------------------------------------------------------------------
.text:00000000000023BD                 align 20h
.text:00000000000023C0
.text:00000000000023C0 loc_23C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023C0                                         ; DATA XREF: .rodata:jpt_210E↓o
.text:00000000000023C0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000023C5                 mov     ebx, 20h ; ' '
.text:00000000000023CA                 setz    dl
.text:00000000000023CD                 jmp     short loc_2391
.text:00000000000023CD ; ---------------------------------------------------------------------------
.text:00000000000023CF                 align 10h
.text:00000000000023D0
.text:00000000000023D0 loc_23D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023D0                                         ; DATA XREF: .rodata:jpt_210E↓o
.text:00000000000023D0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000023D5                 mov     ebx, 72h ; 'r'
.text:00000000000023DA                 jmp     loc_2242
.text:00000000000023DA ; ---------------------------------------------------------------------------
.text:00000000000023DF                 align 20h
.text:00000000000023E0
.text:00000000000023E0 loc_23E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023E0                                         ; DATA XREF: .rodata:jpt_210E↓o
.text:00000000000023E0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000023E5                 mov     ebx, 66h ; 'f'
.text:00000000000023EA                 jmp     loc_2254
.text:00000000000023EA ; ---------------------------------------------------------------------------
.text:00000000000023EF                 align 10h
.text:00000000000023F0
.text:00000000000023F0 loc_23F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023F0                                         ; DATA XREF: .rodata:jpt_210E↓o
.text:00000000000023F0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000023F5                 mov     ebx, 76h ; 'v'
.text:00000000000023FA                 jmp     loc_2254
.text:00000000000023FA ; ---------------------------------------------------------------------------
.text:00000000000023FF                 align 20h
.text:0000000000002400
.text:0000000000002400 loc_2400:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002400                                         ; DATA XREF: .rodata:jpt_210E↓o
.text:0000000000002400                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002405                 mov     ebx, 6Eh ; 'n'
.text:000000000000240A                 jmp     loc_2242
.text:000000000000240A ; ---------------------------------------------------------------------------
.text:000000000000240F                 align 10h
.text:0000000000002410
.text:0000000000002410 def_249A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002410                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002410                                         ; DATA XREF: ...
.text:0000000000002410                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002413                 nop     dword ptr [rax+rax+00h]
.text:0000000000002418
.text:0000000000002418 def_210E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002418                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002418                                         ; DATA XREF: ...
.text:0000000000002418                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000241E                 jnz     loc_27C8
.text:0000000000002424                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002429                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000242E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002433                 call    ___ctype_b_loc
.text:0000000000002438                 mov     rcx, [rax]
.text:000000000000243B                 movzx   edx, bl
.text:000000000000243E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002444                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000244A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000244F                 mov     edi, 1
.text:0000000000002454                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000002458                 and     ax, 4000h
.text:000000000000245C                 setnz   r12b
.text:0000000000002460                 setz    al
.text:0000000000002463                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002467
.text:0000000000002467 loc_2467:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002467                 test    al, al
.text:0000000000002469                 jnz     loc_2E01
.text:000000000000246F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002474                 setz    dl
.text:0000000000002477                 jmp     loc_2148
.text:0000000000002477 ; ---------------------------------------------------------------------------
.text:000000000000247C                 align 20h
.text:0000000000002480
.text:0000000000002480 loc_2480:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000002480                 movzx   ebx, byte ptr [r9]
.text:0000000000002484                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002487                 ja      short def_249A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002489                 lea     rcx, jpt_249A
.text:0000000000002490                 movzx   edx, bl
.text:0000000000002493                 movsxd  rax, ds:(jpt_249A - 4C48h)[rcx+rdx*4]
.text:0000000000002497                 add     rax, rcx
.text:000000000000249A                 jmp     rax             ; switch jump
.text:000000000000249A ; ---------------------------------------------------------------------------
.text:000000000000249C                 align 20h
.text:00000000000024A0
.text:00000000000024A0 loc_24A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000024A0                                         ; DATA XREF: .rodata:jpt_249A↓o
.text:00000000000024A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000024A3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000024A8                 jnz     loc_229E
.text:00000000000024AE                 xchg    ax, ax
.text:00000000000024B0
.text:00000000000024B0 loc_24B0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000024B0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000024B0                 mov     edx, 5Ch ; '\'
.text:00000000000024B5                 mov     ebx, 5Ch ; '\'
.text:00000000000024BA                 jmp     loc_2254
.text:00000000000024BA ; ---------------------------------------------------------------------------
.text:00000000000024BF                 align 20h
.text:00000000000024C0
.text:00000000000024C0 loc_24C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000024C0                                         ; DATA XREF: .rodata:jpt_249A↓o
.text:00000000000024C0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000024C5                 xor     r10d, r10d
.text:00000000000024C8                 mov     ebx, 66h ; 'f'
.text:00000000000024CD                 jmp     loc_2254
.text:00000000000024CD ; ---------------------------------------------------------------------------
.text:00000000000024D2                 align 8
.text:00000000000024D8
.text:00000000000024D8 loc_24D8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000024D8                                         ; DATA XREF: .rodata:jpt_249A↓o
.text:00000000000024D8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000024DD                 xor     r10d, r10d
.text:00000000000024E0                 mov     ebx, 6Eh ; 'n'
.text:00000000000024E5                 jmp     loc_2242
.text:00000000000024E5 ; ---------------------------------------------------------------------------
.text:00000000000024EA                 align 10h
.text:00000000000024F0
.text:00000000000024F0 loc_24F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000024F0                                         ; DATA XREF: .rodata:jpt_249A↓o
.text:00000000000024F0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000024F5                 jmp     loc_22C0
.text:00000000000024F5 ; ---------------------------------------------------------------------------
.text:00000000000024FA                 align 20h
.text:0000000000002500
.text:0000000000002500 loc_2500:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002500                                         ; DATA XREF: .rodata:jpt_249A↓o
.text:0000000000002500                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002503
.text:0000000000002503 loc_2503:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002503                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002508                 setz    dl
.text:000000000000250B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002510                 jnz     loc_30AA
.text:0000000000002516                 mov     eax, r8d
.text:0000000000002519                 mov     rcx, r15
.text:000000000000251C                 xor     eax, 1
.text:000000000000251F                 and     al, dl
.text:0000000000002521                 jz      short loc_2550
.text:0000000000002523                 cmp     r13, r15
.text:0000000000002526                 jbe     short loc_252D
.text:0000000000002528                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000252D
.text:000000000000252D loc_252D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000252D                 lea     rcx, [r15+1]
.text:0000000000002531                 cmp     r13, rcx
.text:0000000000002534                 jbe     short loc_253C
.text:0000000000002536                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000253C
.text:000000000000253C loc_253C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000253C                 lea     rcx, [r15+2]
.text:0000000000002540                 cmp     r13, rcx
.text:0000000000002543                 ja      loc_2B79
.text:0000000000002549
.text:0000000000002549 loc_2549:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000002549                 lea     rcx, [r15+3]
.text:000000000000254D                 mov     r8d, eax
.text:0000000000002550
.text:0000000000002550 loc_2550:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000002550                 cmp     r13, rcx
.text:0000000000002553                 jbe     short loc_255A
.text:0000000000002555                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000255A
.text:000000000000255A loc_255A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000255A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000255F                 lea     r15, [rcx+1]
.text:0000000000002563                 jz      loc_2B69
.text:0000000000002569                 lea     rax, [rbp+1]
.text:000000000000256D                 cmp     rax, r11
.text:0000000000002570                 jnb     short loc_258B
.text:0000000000002572                 mov     rax, [rsp+0E8h+s]
.text:0000000000002577                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000257C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000002580                 sub     eax, 30h ; '0'
.text:0000000000002583                 cmp     al, 9
.text:0000000000002585                 jbe     loc_2DB9
.text:000000000000258B
.text:000000000000258B loc_258B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000258B                 mov     eax, r12d
.text:000000000000258E                 mov     ebx, 30h ; '0'
.text:0000000000002593                 xor     r12d, r12d
.text:0000000000002596                 jmp     loc_2148
.text:0000000000002596 ; ---------------------------------------------------------------------------
.text:000000000000259B                 align 20h
.text:00000000000025A0
.text:00000000000025A0 loc_25A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000025A0                                         ; DATA XREF: .rodata:jpt_249A↓o
.text:00000000000025A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000025A5                 mov     r12d, r10d
.text:00000000000025A8                 setz    dl
.text:00000000000025AB                 xor     r10d, r10d
.text:00000000000025AE                 xor     eax, eax
.text:00000000000025B0                 jmp     loc_2148
.text:00000000000025B0 ; ---------------------------------------------------------------------------
.text:00000000000025B5                 align 8
.text:00000000000025B8
.text:00000000000025B8 loc_25B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000025B8                                         ; DATA XREF: .rodata:jpt_249A↓o
.text:00000000000025B8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000025BD                 setz    dl
.text:00000000000025C0                 xor     r10d, r10d
.text:00000000000025C3                 jmp     loc_2388
.text:00000000000025C3 ; ---------------------------------------------------------------------------
.text:00000000000025C8                 align 10h
.text:00000000000025D0
.text:00000000000025D0 loc_25D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000025D0                                         ; DATA XREF: .rodata:jpt_249A↓o
.text:00000000000025D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000025D5                 setz    dl
.text:00000000000025D8                 xor     r10d, r10d
.text:00000000000025DB                 xor     r12d, r12d
.text:00000000000025DE                 jmp     loc_2391
.text:00000000000025DE ; ---------------------------------------------------------------------------
.text:00000000000025E3                 align 8
.text:00000000000025E8
.text:00000000000025E8 loc_25E8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000025E8                                         ; DATA XREF: .rodata:jpt_249A↓o
.text:00000000000025E8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000025ED                 mov     r12d, r10d
.text:00000000000025F0                 mov     ebx, 20h ; ' '
.text:00000000000025F5                 setz    dl
.text:00000000000025F8                 xor     r10d, r10d
.text:00000000000025FB                 jmp     loc_2391
.text:0000000000002600 ; ---------------------------------------------------------------------------
.text:0000000000002600
.text:0000000000002600 loc_2600:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002600                                         ; DATA XREF: .rodata:jpt_249A↓o
.text:0000000000002600                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002605                 xor     r10d, r10d
.text:0000000000002608                 mov     ebx, 72h ; 'r'
.text:000000000000260D                 jmp     loc_2242
.text:000000000000260D ; ---------------------------------------------------------------------------
.text:0000000000002612                 align 8
.text:0000000000002618
.text:0000000000002618 loc_2618:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002618                                         ; DATA XREF: .rodata:jpt_249A↓o
.text:0000000000002618                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000261D                 jmp     loc_22C0
.text:000000000000261D ; ---------------------------------------------------------------------------
.text:0000000000002622                 align 8
.text:0000000000002628
.text:0000000000002628 loc_2628:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002628                                         ; DATA XREF: .rodata:jpt_249A↓o
.text:0000000000002628                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000262D                 xor     r10d, r10d
.text:0000000000002630                 mov     ebx, 74h ; 't'
.text:0000000000002635                 jmp     loc_2242
.text:0000000000002635 ; ---------------------------------------------------------------------------
.text:000000000000263A                 align 20h
.text:0000000000002640
.text:0000000000002640 loc_2640:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002640                                         ; DATA XREF: .rodata:jpt_249A↓o
.text:0000000000002640                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000002645                 jmp     loc_22C0
.text:0000000000002645 ; ---------------------------------------------------------------------------
.text:000000000000264A                 align 10h
.text:0000000000002650
.text:0000000000002650 loc_2650:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000002650                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000002650                 xor     r10d, r10d
.text:0000000000002653                 jmp     loc_20F0
.text:0000000000002653 ; ---------------------------------------------------------------------------
.text:0000000000002658                 align 20h
.text:0000000000002660
.text:0000000000002660 loc_2660:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000002660                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002665                 jnz     loc_2FD0
.text:000000000000266B
.text:000000000000266B loc_266B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000266B                 add     rbp, 1
.text:000000000000266F                 mov     eax, r8d
.text:0000000000002672                 xor     r12d, r12d
.text:0000000000002675                 mov     ebx, 5Ch ; '\'
.text:000000000000267A                 jmp     loc_218C
.text:000000000000267A ; ---------------------------------------------------------------------------
.text:000000000000267F                 align 20h
.text:0000000000002680
.text:0000000000002680 loc_2680:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000002680                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002685                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000268A                 mov     r12d, r8d
.text:000000000000268D                 mov     rbp, r11
.text:0000000000002690                 setz    dl
.text:0000000000002693                 mov     eax, ebx
.text:0000000000002695                 test    r15, r15
.text:0000000000002698                 setz    cl
.text:000000000000269B                 and     eax, edx
.text:000000000000269D                 and     al, cl
.text:000000000000269F                 jnz     loc_3106
.text:00000000000026A5                 mov     eax, ebx
.text:00000000000026A7                 xor     eax, 1
.text:00000000000026AA                 and     dl, al
.text:00000000000026AC                 jz      loc_301C
.text:00000000000026B2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000026B7                 jz      loc_301A
.text:00000000000026BD                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000026C2                 jnz     loc_30BD
.text:00000000000026C8                 test    r13, r13
.text:00000000000026CB                 setz    al
.text:00000000000026CE                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000026D4                 setnz   dl
.text:00000000000026D7                 and     al, dl
.text:00000000000026D9                 jz      loc_30FC
.text:00000000000026DF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000026E4
.text:00000000000026E4 loc_26E4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000026E4                 lea     rbx, asc_49CD   ; "'"
.text:00000000000026EB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000026EF                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000026F7                 mov     r15d, 1
.text:00000000000026FD                 mov     [rsp+0E8h+n], 1
.text:0000000000002706                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000270B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002710                 mov     [rsp+0E8h+var_6C], al
.text:0000000000002714                 jmp     loc_1FF3
.text:0000000000002714 ; ---------------------------------------------------------------------------
.text:0000000000002719                 align 20h
.text:0000000000002720
.text:0000000000002720 loc_2720:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000002720                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002725                 jnz     loc_2FD0
.text:000000000000272B                 test    r13, r13
.text:000000000000272E                 jz      loc_2B30
.text:0000000000002734                 xor     edx, edx
.text:0000000000002736                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000273C                 jnz     loc_2B30
.text:0000000000002742
.text:0000000000002742 loc_2742:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000002742                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000002742                 mov     [rsp+0E8h+var_98], r13
.text:0000000000002747                 add     r15, 3
.text:000000000000274B                 xor     eax, eax
.text:000000000000274D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002752                 xor     r8d, r8d
.text:0000000000002755                 mov     r13, rdx
.text:0000000000002758                 mov     ebx, 27h ; '''
.text:000000000000275D                 jmp     loc_2179
.text:000000000000275D ; ---------------------------------------------------------------------------
.text:0000000000002762                 align 8
.text:0000000000002768
.text:0000000000002768 loc_2768:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000002768                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000276D                 jz      short loc_2790
.text:000000000000276F                 lea     rcx, [rbp+2]
.text:0000000000002773                 cmp     rcx, r11
.text:0000000000002776                 jnb     short loc_2790
.text:0000000000002778                 mov     rax, [rsp+0E8h+s]
.text:000000000000277D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000002782                 jz      loc_2F12
.text:0000000000002788                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002790
.text:0000000000002790 loc_2790:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000002790                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000002790                 xor     edx, edx
.text:0000000000002792                 xor     r12d, r12d
.text:0000000000002795                 xor     eax, eax
.text:0000000000002797                 mov     ebx, 3Fh ; '?'
.text:000000000000279C                 jmp     loc_2148
.text:000000000000279C ; ---------------------------------------------------------------------------
.text:00000000000027A1                 align 8
.text:00000000000027A8
.text:00000000000027A8 loc_27A8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000027A8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000027AD                 jnz     loc_2FD0
.text:00000000000027B3                 xor     r12d, r12d
.text:00000000000027B6                 xor     eax, eax
.text:00000000000027B8                 mov     ebx, 3Fh ; '?'
.text:00000000000027BD                 jmp     loc_2179
.text:00000000000027BD ; ---------------------------------------------------------------------------
.text:00000000000027C2                 align 8
.text:00000000000027C8
.text:00000000000027C8 loc_27C8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000027C8                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000027D0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000027D4                 mov     [rsp+0E8h+var_48], 0
.text:00000000000027E0                 mov     [rsp+0E8h+ps], rax
.text:00000000000027E5                 jnz     short loc_2814
.text:00000000000027E7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000027EC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:00000000000027F1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:00000000000027F6                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000027FB                 call    _strlen
.text:0000000000002800                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000002806                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000280C                 mov     r11, rax
.text:000000000000280F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002814
.text:0000000000002814 loc_2814:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000002814                 lea     rax, [rsp+0E8h+wc]
.text:000000000000281C                 xor     ecx, ecx
.text:000000000000281E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000002822                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000002827                 mov     rbx, rcx
.text:000000000000282A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000002832                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000002837                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000283C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000002844                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000002849                 mov     [rsp+0E8h+var_78], r13
.text:000000000000284E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000002853
.text:0000000000002853 loc_2853:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000002853                 mov     rax, [rsp+0E8h+s]
.text:0000000000002858                 lea     r14, [rbp+rbx+0]
.text:000000000000285D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000002862                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000002867                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000286C                 lea     r13, [rax+r14]
.text:0000000000002870                 sub     rdx, r14
.text:0000000000002873                 mov     rsi, r13
.text:0000000000002876                 call    rpl_mbrtowc
.text:000000000000287B                 test    rax, rax
.text:000000000000287E                 mov     r15, rax
.text:0000000000002881                 jz      short loc_28D1
.text:0000000000002883                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002887                 jz      loc_2EA5
.text:000000000000288D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002891                 jz      loc_2E31
.text:0000000000002897                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000289C                 setz    al
.text:000000000000289F                 and     al, [rsp+0E8h+var_D9]
.text:00000000000028A3                 jnz     loc_2A40
.text:00000000000028A9
.text:00000000000028A9 loc_28A9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000028A9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000028A9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000028B0                 call    _iswprint
.text:00000000000028B5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000028BA                 test    eax, eax
.text:00000000000028BC                 mov     eax, 0
.text:00000000000028C1                 cmovz   r12d, eax
.text:00000000000028C5                 add     rbx, r15
.text:00000000000028C8                 call    _mbsinit
.text:00000000000028CD                 test    eax, eax
.text:00000000000028CF                 jz      short loc_2853
.text:00000000000028D1
.text:00000000000028D1 loc_28D1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:00000000000028D1                 mov     edx, r12d
.text:00000000000028D4                 mov     rdi, rbx
.text:00000000000028D7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000028DD                 xor     edx, 1
.text:00000000000028E0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000028E5                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000028EB                 and     dl, [rsp+0E8h+var_DB]
.text:00000000000028EF                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000028F7                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000028FC                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002901                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002906
.text:0000000000002906 loc_2906:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000002906                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000002906                 cmp     rdi, 1
.text:000000000000290A                 jbe     loc_2F0B
.text:0000000000002910
.text:0000000000002910 loc_2910:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000002910                 mov     rcx, rdi
.text:0000000000002913                 xor     esi, esi
.text:0000000000002915                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000291B                 add     rcx, rbp
.text:000000000000291E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002923                 jmp     loc_29DE
.text:0000000000002923 ; ---------------------------------------------------------------------------
.text:0000000000002928                 align 10h
.text:0000000000002930
.text:0000000000002930 loc_2930:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000002930                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002935                 setz    al
.text:0000000000002938                 test    r9b, r9b
.text:000000000000293B                 jnz     loc_2DF0
.text:0000000000002941                 mov     esi, r8d
.text:0000000000002944                 xor     esi, 1
.text:0000000000002947                 and     al, sil
.text:000000000000294A                 jz      short loc_297B
.text:000000000000294C                 cmp     r13, r15
.text:000000000000294F                 jbe     short loc_2956
.text:0000000000002951                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002956
.text:0000000000002956 loc_2956:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000002956                 lea     rsi, [r15+1]
.text:000000000000295A                 cmp     r13, rsi
.text:000000000000295D                 jbe     short loc_2965
.text:000000000000295F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002965
.text:0000000000002965 loc_2965:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000002965                 lea     rsi, [r15+2]
.text:0000000000002969                 cmp     r13, rsi
.text:000000000000296C                 jbe     short loc_2974
.text:000000000000296E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002974
.text:0000000000002974 loc_2974:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000002974                 add     r15, 3
.text:0000000000002978                 mov     r8d, eax
.text:000000000000297B
.text:000000000000297B loc_297B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000297B                 cmp     r13, r15
.text:000000000000297E                 jbe     short loc_2985
.text:0000000000002980                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002985
.text:0000000000002985 loc_2985:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000002985                 lea     rax, [r15+1]
.text:0000000000002989                 cmp     r13, rax
.text:000000000000298C                 jbe     short loc_299B
.text:000000000000298E                 mov     eax, ebx
.text:0000000000002990                 shr     al, 6
.text:0000000000002993                 add     eax, 30h ; '0'
.text:0000000000002996                 mov     [r14+r15+1], al
.text:000000000000299B
.text:000000000000299B loc_299B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000299B                 lea     rax, [r15+2]
.text:000000000000299F                 cmp     r13, rax
.text:00000000000029A2                 jbe     short loc_29B4
.text:00000000000029A4                 mov     eax, ebx
.text:00000000000029A6                 shr     al, 3
.text:00000000000029A9                 and     eax, 7
.text:00000000000029AC                 add     eax, 30h ; '0'
.text:00000000000029AF                 mov     [r14+r15+2], al
.text:00000000000029B4
.text:00000000000029B4 loc_29B4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:00000000000029B4                 and     ebx, 7
.text:00000000000029B7                 add     rbp, 1
.text:00000000000029BB                 add     r15, 3
.text:00000000000029BF                 add     ebx, 30h ; '0'
.text:00000000000029C2                 cmp     rbp, rcx
.text:00000000000029C5                 jnb     loc_21B0
.text:00000000000029CB                 mov     esi, edx
.text:00000000000029CD
.text:00000000000029CD loc_29CD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000029CD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000029CD                 cmp     r13, r15
.text:00000000000029D0                 jbe     short loc_29D6
.text:00000000000029D2                 mov     [r14+r15], bl
.text:00000000000029D6
.text:00000000000029D6 loc_29D6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:00000000000029D6                 movzx   ebx, byte ptr [rdi+rbp]
.text:00000000000029DA                 add     r15, 1
.text:00000000000029DE
.text:00000000000029DE loc_29DE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:00000000000029DE                 test    dl, dl
.text:00000000000029E0                 jnz     loc_2930
.text:00000000000029E6                 mov     eax, esi
.text:00000000000029E8                 xor     eax, 1
.text:00000000000029EB                 and     eax, r8d
.text:00000000000029EE                 test    r10b, r10b
.text:00000000000029F1                 jz      short loc_2A01
.text:00000000000029F3                 cmp     r13, r15
.text:00000000000029F6                 jbe     short loc_29FD
.text:00000000000029F8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000029FD
.text:00000000000029FD loc_29FD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000029FD                 add     r15, 1
.text:0000000000002A01
.text:0000000000002A01 loc_2A01:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000002A01                 add     rbp, 1
.text:0000000000002A05                 cmp     rbp, rcx
.text:0000000000002A08                 jnb     loc_218C
.text:0000000000002A0E                 test    al, al
.text:0000000000002A10                 jz      loc_2E0E
.text:0000000000002A16                 cmp     r13, r15
.text:0000000000002A19                 jbe     short loc_2A20
.text:0000000000002A1B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002A20
.text:0000000000002A20 loc_2A20:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000002A20                 lea     rax, [r15+1]
.text:0000000000002A24                 cmp     r13, rax
.text:0000000000002A27                 jbe     short loc_2A2F
.text:0000000000002A29                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002A2F
.text:0000000000002A2F loc_2A2F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000002A2F                 add     r15, 2
.text:0000000000002A33                 xor     r10d, r10d
.text:0000000000002A36                 xor     r8d, r8d
.text:0000000000002A39                 jmp     short loc_29CD
.text:0000000000002A39 ; ---------------------------------------------------------------------------
.text:0000000000002A3B                 align 20h
.text:0000000000002A40
.text:0000000000002A40 loc_2A40:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000002A40                 cmp     r15, 1
.text:0000000000002A44                 jz      loc_28A9
.text:0000000000002A4A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002A4F                 lea     rcx, [rdi+r15]
.text:0000000000002A53                 lea     rdx, [rdi+r14+1]
.text:0000000000002A58                 lea     r8, [rcx+r14]
.text:0000000000002A5C                 jmp     short loc_2A6D
.text:0000000000002A5C ; ---------------------------------------------------------------------------
.text:0000000000002A5E                 align 20h
.text:0000000000002A60
.text:0000000000002A60 loc_2A60:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000002A60                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000002A60                 add     rdx, 1
.text:0000000000002A64                 cmp     r8, rdx
.text:0000000000002A67                 jz      loc_28A9
.text:0000000000002A6D
.text:0000000000002A6D loc_2A6D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000002A6D                 movzx   ecx, byte ptr [rdx]
.text:0000000000002A70                 sub     ecx, 5Bh ; '['
.text:0000000000002A73                 cmp     cl, 21h ; '!'
.text:0000000000002A76                 ja      short loc_2A60
.text:0000000000002A78                 mov     esi, 1
.text:0000000000002A7D                 shl     rsi, cl
.text:0000000000002A80                 mov     rcx, rsi
.text:0000000000002A83                 mov     rsi, 20000002Bh
.text:0000000000002A8D                 test    rcx, rsi
.text:0000000000002A90                 jz      short loc_2A60
.text:0000000000002A92                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002A97                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002A9C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000002AA1                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002AA9
.text:0000000000002AA9 loc_2AA9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000002AA9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000002AA9                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002AAE                 jz      short loc_2AC0
.text:0000000000002AB0                 test    al, al
.text:0000000000002AB2                 mov     eax, 4
.text:0000000000002AB7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000002ABC                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000002AC0
.text:0000000000002AC0 loc_2AC0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000002AC0                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000002AC0                 sub     rsp, 8
.text:0000000000002AC4                 mov     rcx, rbp
.text:0000000000002AC7                 mov     rsi, r13
.text:0000000000002ACA                 push    [rsp+0F0h+var_88]
.text:0000000000002ACE                 push    [rsp+0F8h+var_80]
.text:0000000000002AD2                 mov     rdi, r14
.text:0000000000002AD5                 push    0
.text:0000000000002AD7                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002ADF                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000002AE4                 mov     rdx, [rsp+108h+s]
.text:0000000000002AE9                 and     r9d, 0FFFFFFFDh
.text:0000000000002AED                 call    quotearg_buffer_restyled
.text:0000000000002AF2                 add     rsp, 20h
.text:0000000000002AF6                 mov     r15, rax
.text:0000000000002AF9
.text:0000000000002AF9 loc_2AF9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000002AF9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000002AF9                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000002B01                 xor     rbx, fs:28h
.text:0000000000002B0A                 mov     rax, r15
.text:0000000000002B0D                 jnz     loc_3113
.text:0000000000002B13                 add     rsp, 0B8h
.text:0000000000002B1A                 pop     rbx
.text:0000000000002B1B                 pop     rbp
.text:0000000000002B1C                 pop     r12
.text:0000000000002B1E                 pop     r13
.text:0000000000002B20                 pop     r14
.text:0000000000002B22                 pop     r15
.text:0000000000002B24                 retn
.text:0000000000002B24 ; ---------------------------------------------------------------------------
.text:0000000000002B25                 align 8
.text:0000000000002B28
.text:0000000000002B28 loc_2B28:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000002B28                 mov     rbp, r11
.text:0000000000002B2B                 jmp     loc_2AA9
.text:0000000000002B30 ; ---------------------------------------------------------------------------
.text:0000000000002B30
.text:0000000000002B30 loc_2B30:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000002B30                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000002B30                 cmp     r13, r15
.text:0000000000002B33                 jbe     short loc_2B3A
.text:0000000000002B35                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002B3A
.text:0000000000002B3A loc_2B3A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000002B3A                 lea     rax, [r15+1]
.text:0000000000002B3E                 cmp     r13, rax
.text:0000000000002B41                 jbe     short loc_2B49
.text:0000000000002B43                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000002B49
.text:0000000000002B49 loc_2B49:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000002B49                 lea     rax, [r15+2]
.text:0000000000002B4D                 cmp     r13, rax
.text:0000000000002B50                 jbe     loc_3142
.text:0000000000002B56                 mov     rdx, r13
.text:0000000000002B59                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002B5F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002B64                 jmp     loc_2742
.text:0000000000002B69 ; ---------------------------------------------------------------------------
.text:0000000000002B69
.text:0000000000002B69 loc_2B69:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002B69                 mov     eax, r12d
.text:0000000000002B6C                 mov     ebx, 30h ; '0'
.text:0000000000002B71                 xor     r12d, r12d
.text:0000000000002B74                 jmp     loc_2179
.text:0000000000002B79 ; ---------------------------------------------------------------------------
.text:0000000000002B79
.text:0000000000002B79 loc_2B79:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000002B79                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002B7F                 jmp     loc_2549
.text:0000000000002B84 ; ---------------------------------------------------------------------------
.text:0000000000002B84
.text:0000000000002B84 loc_2B84:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002B84                                         ; DATA XREF: .rodata:jpt_1FB1↓o
.text:0000000000002B84                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000002B86                 jnz     loc_1FB3        ; jumptable 00000000000121F1 case 1
.text:0000000000002B8C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002B91
.text:0000000000002B91 loc_2B91:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000002B91                 test    r13, r13
.text:0000000000002B94                 jnz     loc_312A
.text:0000000000002B9A                 lea     rax, asc_49CD   ; "'"
.text:0000000000002BA1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002BAA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002BAF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002BB4                 xor     r12d, r12d
.text:0000000000002BB7                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002BBC                 mov     [rsp+0E8h+n], 1
.text:0000000000002BC5                 mov     [rsp+0E8h+s2], rax
.text:0000000000002BCA                 mov     r15d, 1
.text:0000000000002BD0                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002BD8                 jmp     loc_1FF3
.text:0000000000002BD8 ; ---------------------------------------------------------------------------
.text:0000000000002BDD                 align 20h
.text:0000000000002BE0
.text:0000000000002BE0 loc_2BE0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002BE0                                         ; DATA XREF: .rodata:jpt_1FB1↓o
.text:0000000000002BE0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000002BE2                 jnz     loc_2FDD
.text:0000000000002BE8                 test    r13, r13
.text:0000000000002BEB                 jz      loc_2E16
.text:0000000000002BF1                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000002BF5                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002BFA                 xor     r12d, r12d
.text:0000000000002BFD                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002C02                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002C0B
.text:0000000000002C0B loc_2C0B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000002C0B                 lea     rax, unk_49CB
.text:0000000000002C12                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002C17                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002C1C                 mov     [rsp+0E8h+n], 1
.text:0000000000002C25                 mov     r15d, 1
.text:0000000000002C2B                 mov     [rsp+0E8h+s2], rax
.text:0000000000002C30                 jmp     loc_1FF3
.text:0000000000002C35 ; ---------------------------------------------------------------------------
.text:0000000000002C35
.text:0000000000002C35 loc_2C35:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002C35                                         ; DATA XREF: .rodata:jpt_1FB1↓o
.text:0000000000002C35                 lea     rax, unk_49CB   ; jumptable 00000000000121F1 case 6
.text:0000000000002C3C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002C41                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002C46                 xor     r12d, r12d
.text:0000000000002C49                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002C52                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002C57                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002C5C                 mov     [rsp+0E8h+n], 1
.text:0000000000002C65                 xor     r15d, r15d
.text:0000000000002C68                 mov     [rsp+0E8h+s2], rax
.text:0000000000002C6D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000002C75                 jmp     loc_1FF3
.text:0000000000002C7A ; ---------------------------------------------------------------------------
.text:0000000000002C7A
.text:0000000000002C7A loc_2C7A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002C7A                                         ; DATA XREF: .rodata:jpt_1FB1↓o
.text:0000000000002C7A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000002C7F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002C84                 xor     r12d, r12d
.text:0000000000002C87                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002C90                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002C95                 xor     r15d, r15d
.text:0000000000002C98                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002C9D                 mov     [rsp+0E8h+n], 0
.text:0000000000002CA6                 mov     [rsp+0E8h+s2], 0
.text:0000000000002CAF                 jmp     loc_1FF3
.text:0000000000002CB4 ; ---------------------------------------------------------------------------
.text:0000000000002CB4
.text:0000000000002CB4 loc_2CB4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002CB4                                         ; DATA XREF: .rodata:jpt_1FB1↓o
.text:0000000000002CB4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000002CB9                 jz      short loc_2D11
.text:0000000000002CBB                 lea     rsi, asc_49CF   ; "`"
.text:0000000000002CC2                 xor     edi, edi        ; domainname
.text:0000000000002CC4                 mov     edx, 5          ; category
.text:0000000000002CC9                 call    _dcgettext
.text:0000000000002CCE                 mov     rcx, rax
.text:0000000000002CD1                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002CD6                 lea     rax, asc_49CF   ; "`"
.text:0000000000002CDD                 cmp     rcx, rax
.text:0000000000002CE0                 jz      loc_307E
.text:0000000000002CE6
.text:0000000000002CE6 loc_2CE6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000002CE6                 lea     rsi, asc_49CD   ; "'"
.text:0000000000002CED                 xor     edi, edi        ; domainname
.text:0000000000002CEF                 mov     edx, 5          ; category
.text:0000000000002CF4                 call    _dcgettext
.text:0000000000002CF9                 mov     rcx, rax
.text:0000000000002CFC                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002D01                 lea     rax, asc_49CD   ; "'"
.text:0000000000002D08                 cmp     rcx, rax
.text:0000000000002D0B                 jz      loc_3094
.text:0000000000002D11
.text:0000000000002D11 loc_2D11:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000002D11                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000002D11                 xor     r15d, r15d
.text:0000000000002D14                 test    ebx, ebx
.text:0000000000002D16                 jz      loc_2EDD
.text:0000000000002D1C
.text:0000000000002D1C loc_2D1C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000002D1C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000002D1C                 test    ebx, ebx
.text:0000000000002D1E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000002D23                 setnz   [rsp+0E8h+var_D9]
.text:0000000000002D28                 xor     r12d, r12d
.text:0000000000002D2B                 mov     rdi, rbx        ; s
.text:0000000000002D2E                 call    _strlen
.text:0000000000002D33                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002D38                 mov     [rsp+0E8h+n], rax
.text:0000000000002D3D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002D42                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002D47                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002D50                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002D55                 jmp     loc_1FF3
.text:0000000000002D5A ; ---------------------------------------------------------------------------
.text:0000000000002D5A
.text:0000000000002D5A loc_2D5A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002D5A                                         ; DATA XREF: .rodata:jpt_1FB1↓o
.text:0000000000002D5A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000002D5F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002D64                 xor     r12d, r12d
.text:0000000000002D67                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002D70                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002D75                 xor     r15d, r15d
.text:0000000000002D78                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002D7D                 mov     [rsp+0E8h+n], 0
.text:0000000000002D86                 mov     [rsp+0E8h+s2], 0
.text:0000000000002D8F                 jmp     loc_1FF3
.text:0000000000002D94 ; ---------------------------------------------------------------------------
.text:0000000000002D94
.text:0000000000002D94 loc_2D94:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002D94                                         ; DATA XREF: .rodata:jpt_1FB1↓o
.text:0000000000002D94                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000002D99                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002D9E                 xor     r12d, r12d
.text:0000000000002DA1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002DAA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002DAF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002DB4                 jmp     loc_1FD3
.text:0000000000002DB9 ; ---------------------------------------------------------------------------
.text:0000000000002DB9
.text:0000000000002DB9 loc_2DB9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000002DB9                 cmp     r13, r15
.text:0000000000002DBC                 jbe     short loc_2DC3
.text:0000000000002DBE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000002DC3
.text:0000000000002DC3 loc_2DC3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000002DC3                 lea     rax, [rcx+2]
.text:0000000000002DC7                 cmp     r13, rax
.text:0000000000002DCA                 jbe     short loc_2DD2
.text:0000000000002DCC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000002DD2
.text:0000000000002DD2 loc_2DD2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000002DD2                 mov     eax, r12d
.text:0000000000002DD5                 lea     r15, [rcx+3]
.text:0000000000002DD9                 xor     r12d, r12d
.text:0000000000002DDC                 mov     ebx, 30h ; '0'
.text:0000000000002DE1                 jmp     loc_2148
.text:0000000000002DE1 ; ---------------------------------------------------------------------------
.text:0000000000002DE6                 align 10h
.text:0000000000002DF0
.text:0000000000002DF0 loc_2DF0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000002DF0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002DF5                 mov     rbp, r11
.text:0000000000002DF8                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000002DFC                 jmp     loc_2AA9
.text:0000000000002E01 ; ---------------------------------------------------------------------------
.text:0000000000002E01
.text:0000000000002E01 loc_2E01:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000002E01                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002E06                 xor     r12d, r12d
.text:0000000000002E09                 jmp     loc_2910
.text:0000000000002E0E ; ---------------------------------------------------------------------------
.text:0000000000002E0E
.text:0000000000002E0E loc_2E0E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000002E0E                 xor     r10d, r10d
.text:0000000000002E11                 jmp     loc_29CD
.text:0000000000002E16 ; ---------------------------------------------------------------------------
.text:0000000000002E16
.text:0000000000002E16 loc_2E16:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000002E16                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002E1F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002E24                 xor     r12d, r12d
.text:0000000000002E27                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002E2C                 jmp     loc_2C0B
.text:0000000000002E31 ; ---------------------------------------------------------------------------
.text:0000000000002E31
.text:0000000000002E31 loc_2E31:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000002E31                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002E36                 mov     rsi, r14
.text:0000000000002E39                 mov     rcx, r13
.text:0000000000002E3C                 mov     rax, rbx
.text:0000000000002E3F                 mov     rdi, rbx
.text:0000000000002E42                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002E48                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002E4D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000002E55                 cmp     rsi, r11
.text:0000000000002E58                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002E5E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002E66                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002E6B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002E70                 jnb     short loc_2E98
.text:0000000000002E72                 cmp     byte ptr [rcx], 0
.text:0000000000002E75                 jnz     short loc_2E87
.text:0000000000002E77                 jmp     short loc_2E98
.text:0000000000002E77 ; ---------------------------------------------------------------------------
.text:0000000000002E79                 align 20h
.text:0000000000002E80
.text:0000000000002E80 loc_2E80:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000002E80                 cmp     byte ptr [r9+rax], 0
.text:0000000000002E85                 jz      short loc_2E95
.text:0000000000002E87
.text:0000000000002E87 loc_2E87:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000002E87                 add     rax, 1
.text:0000000000002E8B                 lea     rdx, [rbp+rax+0]
.text:0000000000002E90                 cmp     r11, rdx
.text:0000000000002E93                 ja      short loc_2E80
.text:0000000000002E95
.text:0000000000002E95 loc_2E95:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000002E95                 mov     rdi, rax
.text:0000000000002E98
.text:0000000000002E98 loc_2E98:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000002E98                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000002E98                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002E9D                 xor     r12d, r12d
.text:0000000000002EA0                 jmp     loc_2906
.text:0000000000002EA5 ; ---------------------------------------------------------------------------
.text:0000000000002EA5
.text:0000000000002EA5 loc_2EA5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000002EA5                 mov     rdi, rbx
.text:0000000000002EA8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002EAE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002EB3                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002EB9                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002EC1                 xor     r12d, r12d
.text:0000000000002EC4                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002EC9                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002ECE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002ED3                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002ED8                 jmp     loc_2906
.text:0000000000002EDD ; ---------------------------------------------------------------------------
.text:0000000000002EDD
.text:0000000000002EDD loc_2EDD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000002EDD                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000002EE2                 movzx   eax, byte ptr [rdx]
.text:0000000000002EE5                 test    al, al
.text:0000000000002EE7                 jz      loc_2D1C
.text:0000000000002EED                 nop     dword ptr [rax]
.text:0000000000002EF0
.text:0000000000002EF0 loc_2EF0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000002EF0                 cmp     r13, r15
.text:0000000000002EF3                 jbe     short loc_2EF9
.text:0000000000002EF5                 mov     [r14+r15], al
.text:0000000000002EF9
.text:0000000000002EF9 loc_2EF9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000002EF9                 add     r15, 1
.text:0000000000002EFD                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000002F02                 test    al, al
.text:0000000000002F04                 jnz     short loc_2EF0
.text:0000000000002F06                 jmp     loc_2D1C
.text:0000000000002F0B ; ---------------------------------------------------------------------------
.text:0000000000002F0B
.text:0000000000002F0B loc_2F0B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000002F0B                 mov     eax, edx
.text:0000000000002F0D                 jmp     loc_2467
.text:0000000000002F12 ; ---------------------------------------------------------------------------
.text:0000000000002F12
.text:0000000000002F12 loc_2F12:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000002F12                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000002F16                 cmp     bl, 3Eh ; '>'
.text:0000000000002F19                 ja      loc_2790
.text:0000000000002F1F                 mov     rax, 7000A38200000000h
.text:0000000000002F29                 bt      rax, rbx
.text:0000000000002F2D                 jnb     loc_2790
.text:0000000000002F33                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002F38                 jnz     loc_3122
.text:0000000000002F3E                 cmp     r13, r15
.text:0000000000002F41                 jbe     short loc_2F48
.text:0000000000002F43                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000002F48
.text:0000000000002F48 loc_2F48:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000002F48                 lea     rax, [r15+1]
.text:0000000000002F4C                 cmp     r13, rax
.text:0000000000002F4F                 jbe     short loc_2F57
.text:0000000000002F51                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000002F57
.text:0000000000002F57 loc_2F57:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000002F57                 lea     rax, [r15+2]
.text:0000000000002F5B                 cmp     r13, rax
.text:0000000000002F5E                 jbe     short loc_2F66
.text:0000000000002F60                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000002F66
.text:0000000000002F66 loc_2F66:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000002F66                 lea     rax, [r15+3]
.text:0000000000002F6A                 cmp     r13, rax
.text:0000000000002F6D                 jbe     short loc_2F75
.text:0000000000002F6F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000002F75
.text:0000000000002F75 loc_2F75:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000002F75                 add     r15, 4
.text:0000000000002F79                 xor     edx, edx
.text:0000000000002F7B                 xor     r12d, r12d
.text:0000000000002F7E                 xor     eax, eax
.text:0000000000002F80                 mov     rbp, rcx
.text:0000000000002F83                 jmp     loc_2148
.text:0000000000002F88 ; ---------------------------------------------------------------------------
.text:0000000000002F88
.text:0000000000002F88 loc_2F88:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002F88                                         ; DATA XREF: .rodata:jpt_1FB1↓o
.text:0000000000002F88                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000002F8A                 jz      loc_3118
.text:0000000000002F90                 lea     rax, asc_49CD   ; "'"
.text:0000000000002F97                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002F9C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002FA1                 xor     r12d, r12d
.text:0000000000002FA4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002FAD                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002FB2                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002FB7                 mov     [rsp+0E8h+n], 1
.text:0000000000002FC0                 xor     r15d, r15d
.text:0000000000002FC3                 mov     [rsp+0E8h+s2], rax
.text:0000000000002FC8                 jmp     loc_1FF3
.text:0000000000002FC8 ; ---------------------------------------------------------------------------
.text:0000000000002FCD                 align 10h
.text:0000000000002FD0
.text:0000000000002FD0 loc_2FD0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000002FD0                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000002FD0                 mov     rbp, r11
.text:0000000000002FD3                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002FD8                 jmp     loc_2AA9
.text:0000000000002FDD ; ---------------------------------------------------------------------------
.text:0000000000002FDD
.text:0000000000002FDD loc_2FDD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000002FDD                 lea     rax, unk_49CB
.text:0000000000002FE4                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002FE9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002FEE                 xor     r12d, r12d
.text:0000000000002FF1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002FFA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002FFF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003004                 mov     [rsp+0E8h+n], 1
.text:000000000000300D                 xor     r15d, r15d
.text:0000000000003010                 mov     [rsp+0E8h+s2], rax
.text:0000000000003015                 jmp     loc_1FF3
.text:000000000000301A ; ---------------------------------------------------------------------------
.text:000000000000301A
.text:000000000000301A loc_301A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000301A                 mov     eax, edx
.text:000000000000301C
.text:000000000000301C loc_301C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000301C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000301C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003021                 test    rbx, rbx
.text:0000000000003024                 jz      short loc_3052
.text:0000000000003026                 test    al, al
.text:0000000000003028                 jz      short loc_3052
.text:000000000000302A                 movzx   ecx, byte ptr [rbx]
.text:000000000000302D                 mov     rax, rbx
.text:0000000000003030                 test    cl, cl
.text:0000000000003032                 jz      short loc_3052
.text:0000000000003034                 mov     rdx, r15
.text:0000000000003037                 sub     rax, r15
.text:000000000000303A
.text:000000000000303A loc_303A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000303A                 cmp     r13, rdx
.text:000000000000303D                 jbe     short loc_3043
.text:000000000000303F                 mov     [r14+rdx], cl
.text:0000000000003043
.text:0000000000003043 loc_3043:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003043                 add     rdx, 1
.text:0000000000003047                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000304B                 test    cl, cl
.text:000000000000304D                 jnz     short loc_303A
.text:000000000000304F                 mov     r15, rdx
.text:0000000000003052
.text:0000000000003052 loc_3052:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003052                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003052                 cmp     r13, r15
.text:0000000000003055                 jbe     loc_2AF9
.text:000000000000305B                 mov     byte ptr [r14+r15], 0
.text:0000000000003060                 jmp     loc_2AF9
.text:0000000000003065 ; ---------------------------------------------------------------------------
.text:0000000000003065
.text:0000000000003065 loc_3065:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003065                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000306A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000306F                 mov     rbp, r11
.text:0000000000003072                 setz    al
.text:0000000000003075                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003079                 jmp     loc_2AA9
.text:000000000000307E ; ---------------------------------------------------------------------------
.text:000000000000307E
.text:000000000000307E loc_307E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000307E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003082                 mov     rdi, rcx
.text:0000000000003085                 call    gettext_quote
.text:000000000000308A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000308F                 jmp     loc_2CE6
.text:0000000000003094 ; ---------------------------------------------------------------------------
.text:0000000000003094
.text:0000000000003094 loc_3094:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003094                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003098                 mov     rdi, rcx
.text:000000000000309B                 call    gettext_quote
.text:00000000000030A0                 mov     [rsp+0E8h+var_88], rax
.text:00000000000030A5                 jmp     loc_2D11
.text:00000000000030AA ; ---------------------------------------------------------------------------
.text:00000000000030AA
.text:00000000000030AA loc_30AA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:00000000000030AA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000030AF                 mov     rbp, r11
.text:00000000000030B2                 mov     eax, edx
.text:00000000000030B4                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000030B8                 jmp     loc_2AA9
.text:00000000000030BD ; ---------------------------------------------------------------------------
.text:00000000000030BD
.text:00000000000030BD loc_30BD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:00000000000030BD                 sub     rsp, 8
.text:00000000000030C1                 mov     r8d, 5
.text:00000000000030C7                 mov     rcx, r11
.text:00000000000030CA                 push    [rsp+0F0h+var_88]
.text:00000000000030CE                 push    [rsp+0F8h+var_80]
.text:00000000000030D2                 mov     rdi, r14
.text:00000000000030D5                 push    [rsp+100h+var_C8]
.text:00000000000030D9                 mov     r9d, [rsp+108h+var_70]
.text:00000000000030E1                 mov     rdx, [rsp+108h+s]
.text:00000000000030E6                 mov     rsi, [rsp+108h+var_98]
.text:00000000000030EB                 call    quotearg_buffer_restyled
.text:00000000000030F0                 add     rsp, 20h
.text:00000000000030F4                 mov     r15, rax
.text:00000000000030F7                 jmp     loc_2AF9
.text:00000000000030FC ; ---------------------------------------------------------------------------
.text:00000000000030FC
.text:00000000000030FC loc_30FC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:00000000000030FC                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003101                 jmp     loc_301C
.text:0000000000003106 ; ---------------------------------------------------------------------------
.text:0000000000003106
.text:0000000000003106 loc_3106:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003106                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000310E                 jmp     loc_2AA9
.text:0000000000003113 ; ---------------------------------------------------------------------------
.text:0000000000003113
.text:0000000000003113 loc_3113:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003113                 call    ___stack_chk_fail
.text:0000000000003118 ; ---------------------------------------------------------------------------
.text:0000000000003118
.text:0000000000003118 loc_3118:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003118                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000311D                 jmp     loc_2B91
.text:0000000000003122 ; ---------------------------------------------------------------------------
.text:0000000000003122
.text:0000000000003122 loc_3122:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003122                 mov     rbp, r11
.text:0000000000003125                 jmp     loc_2AC0
.text:000000000000312A ; ---------------------------------------------------------------------------
.text:000000000000312A
.text:000000000000312A loc_312A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000312A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000312F                 xor     eax, eax
.text:0000000000003131                 xor     r12d, r12d
.text:0000000000003134                 mov     [rsp+0E8h+var_98], 0
.text:000000000000313D                 jmp     loc_26E4
.text:0000000000003142 ; ---------------------------------------------------------------------------
.text:0000000000003142
.text:0000000000003142 loc_3142:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003142                 mov     rdx, r13
.text:0000000000003145                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000314A                 jmp     loc_2742
.text:000000000000314F ; ---------------------------------------------------------------------------
.text:000000000000314F
.text:000000000000314F def_1FB1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000314F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000314F ; } // starts at 1F20
.text:000000000000314F quotearg_buffer_restyled endp
.text:000000000000314F
.text:000000000000314F ; ---------------------------------------------------------------------------
.text:0000000000003154                 align 20h
.text:0000000000003160
.text:0000000000003160 ; =============== S U B R O U T I N E =======================================
.text:0000000000003160
.text:0000000000003160
.text:0000000000003160 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003160                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003160
.text:0000000000003160 var_50          = qword ptr -50h
.text:0000000000003160 var_48          = qword ptr -48h
.text:0000000000003160 var_40          = dword ptr -40h
.text:0000000000003160 var_3C          = dword ptr -3Ch
.text:0000000000003160
.text:0000000000003160 ; __unwind {
.text:0000000000003160                 push    r15
.text:0000000000003162                 push    r14
.text:0000000000003164                 movsxd  r15, edi
.text:0000000000003167                 push    r13
.text:0000000000003169                 push    r12
.text:000000000000316B                 mov     r14, rdx
.text:000000000000316E                 push    rbp
.text:000000000000316F                 push    rbx
.text:0000000000003170                 mov     rbp, rcx
.text:0000000000003173                 sub     rsp, 28h
.text:0000000000003177                 mov     [rsp+58h+var_50], rsi
.text:000000000000317C                 call    ___errno_location
.text:0000000000003181                 mov     r13, rax
.text:0000000000003184                 mov     eax, [rax]
.text:0000000000003186                 test    r15d, r15d
.text:0000000000003189                 mov     rbx, cs:slotvec
.text:0000000000003190                 mov     [rsp+58h+var_40], eax
.text:0000000000003194                 js      loc_3301
.text:000000000000319A                 cmp     cs:nslots, r15d
.text:00000000000031A1                 jg      short loc_3205
.text:00000000000031A3                 cmp     r15d, 7FFFFFFFh
.text:00000000000031AA                 jz      loc_3306
.text:00000000000031B0                 lea     r12d, [r15+1]
.text:00000000000031B4                 lea     rax, slotvec0
.text:00000000000031BB                 movsxd  rsi, r12d
.text:00000000000031BE                 shl     rsi, 4
.text:00000000000031C2                 cmp     rbx, rax
.text:00000000000031C5                 jz      loc_32E0
.text:00000000000031CB                 mov     rdi, rbx
.text:00000000000031CE                 call    xrealloc
.text:00000000000031D3                 mov     rbx, rax
.text:00000000000031D6                 mov     cs:slotvec, rax
.text:00000000000031DD
.text:00000000000031DD loc_31DD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:00000000000031DD                 movsxd  rdi, cs:nslots
.text:00000000000031E4                 mov     edx, r12d
.text:00000000000031E7                 xor     esi, esi        ; c
.text:00000000000031E9                 sub     edx, edi
.text:00000000000031EB                 shl     rdi, 4
.text:00000000000031EF                 movsxd  rdx, edx
.text:00000000000031F2                 add     rdi, rbx        ; s
.text:00000000000031F5                 shl     rdx, 4          ; n
.text:00000000000031F9                 call    _memset
.text:00000000000031FE                 mov     cs:nslots, r12d
.text:0000000000003205
.text:0000000000003205 loc_3205:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003205                 mov     eax, [rbp+4]
.text:0000000000003208                 shl     r15, 4
.text:000000000000320C                 sub     rsp, 8
.text:0000000000003210                 add     rbx, r15
.text:0000000000003213                 lea     r15, [rbp+8]
.text:0000000000003217                 mov     r8d, [rbp+0]
.text:000000000000321B                 mov     r11, [rbx]
.text:000000000000321E                 mov     r12, [rbx+8]
.text:0000000000003222                 mov     rcx, r14
.text:0000000000003225                 or      eax, 1
.text:0000000000003228                 mov     [rsp+60h+var_3C], eax
.text:000000000000322C                 push    qword ptr [rbp+30h]
.text:000000000000322F                 mov     r9d, eax
.text:0000000000003232                 push    qword ptr [rbp+28h]
.text:0000000000003235                 push    r15
.text:0000000000003237                 mov     rsi, r11
.text:000000000000323A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000323F                 mov     rdi, r12
.text:0000000000003242                 mov     [rsp+78h+var_48], r11
.text:0000000000003247                 call    quotearg_buffer_restyled
.text:000000000000324C                 add     rsp, 20h
.text:0000000000003250                 mov     r11, [rsp+58h+var_48]
.text:0000000000003255                 cmp     r11, rax
.text:0000000000003258                 ja      short loc_32C1
.text:000000000000325A                 lea     rsi, [rax+1]
.text:000000000000325E                 lea     rax, slot0
.text:0000000000003265                 cmp     r12, rax
.text:0000000000003268                 mov     [rbx], rsi
.text:000000000000326B                 jz      short loc_327F
.text:000000000000326D                 mov     rdi, r12        ; ptr
.text:0000000000003270                 mov     [rsp+58h+var_48], rsi
.text:0000000000003275                 call    _free
.text:000000000000327A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000327F
.text:000000000000327F loc_327F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000327F                 mov     rdi, rsi
.text:0000000000003282                 mov     [rsp+58h+var_48], rsi
.text:0000000000003287                 call    xmalloc
.text:000000000000328C                 sub     rsp, 8
.text:0000000000003290                 mov     [rbx+8], rax
.text:0000000000003294                 mov     r8d, [rbp+0]
.text:0000000000003298                 push    qword ptr [rbp+30h]
.text:000000000000329B                 push    qword ptr [rbp+28h]
.text:000000000000329E                 mov     rcx, r14
.text:00000000000032A1                 push    r15
.text:00000000000032A3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000032A8                 mov     rdi, rax
.text:00000000000032AB                 mov     rdx, [rsp+78h+var_50]
.text:00000000000032B0                 mov     rsi, [rsp+78h+var_48]
.text:00000000000032B5                 mov     r12, rax
.text:00000000000032B8                 call    quotearg_buffer_restyled
.text:00000000000032BD                 add     rsp, 20h
.text:00000000000032C1
.text:00000000000032C1 loc_32C1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000032C1                 mov     eax, [rsp+58h+var_40]
.text:00000000000032C5                 mov     [r13+0], eax
.text:00000000000032C9                 add     rsp, 28h
.text:00000000000032CD                 mov     rax, r12
.text:00000000000032D0                 pop     rbx
.text:00000000000032D1                 pop     rbp
.text:00000000000032D2                 pop     r12
.text:00000000000032D4                 pop     r13
.text:00000000000032D6                 pop     r14
.text:00000000000032D8                 pop     r15
.text:00000000000032DA                 retn
.text:00000000000032DA ; ---------------------------------------------------------------------------
.text:00000000000032DB                 align 20h
.text:00000000000032E0
.text:00000000000032E0 loc_32E0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000032E0                 xor     edi, edi
.text:00000000000032E2                 call    xrealloc
.text:00000000000032E7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000032EF                 mov     rbx, rax
.text:00000000000032F2                 mov     cs:slotvec, rax
.text:00000000000032F9                 movups  xmmword ptr [rax], xmm0
.text:00000000000032FC                 jmp     loc_31DD
.text:0000000000003301 ; ---------------------------------------------------------------------------
.text:0000000000003301
.text:0000000000003301 loc_3301:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003301                 call    _abort
.text:0000000000003306 ; ---------------------------------------------------------------------------
.text:0000000000003306
.text:0000000000003306 loc_3306:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003306                 call    xalloc_die
.text:0000000000003306 ; } // starts at 3160
.text:0000000000003306 quotearg_n_options endp
.text:0000000000003306
.text:0000000000003306 ; ---------------------------------------------------------------------------
.text:000000000000330B                 align 10h
.text:0000000000003310
.text:0000000000003310 ; =============== S U B R O U T I N E =======================================
.text:0000000000003310
.text:0000000000003310 ; Attributes: info_from_lumina
.text:0000000000003310
.text:0000000000003310 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003310                 public clone_quoting_options
.text:0000000000003310 clone_quoting_options proc near
.text:0000000000003310 ; __unwind {
.text:0000000000003310                 push    r12
.text:0000000000003312                 push    rbp
.text:0000000000003313                 push    rbx
.text:0000000000003314                 mov     rbx, rdi
.text:0000000000003317                 call    ___errno_location
.text:000000000000331C                 mov     r12d, [rax]
.text:000000000000331F                 mov     rbp, rax
.text:0000000000003322                 lea     rax, default_quoting_options
.text:0000000000003329                 test    rbx, rbx
.text:000000000000332C                 mov     esi, 38h ; '8'  ; n
.text:0000000000003331                 cmovz   rbx, rax
.text:0000000000003335                 mov     rdi, rbx        ; src
.text:0000000000003338                 call    xmemdup
.text:000000000000333D                 mov     [rbp+0], r12d
.text:0000000000003341                 pop     rbx
.text:0000000000003342                 pop     rbp
.text:0000000000003343                 pop     r12
.text:0000000000003345                 retn
.text:0000000000003345 ; } // starts at 3310
.text:0000000000003345 clone_quoting_options endp
.text:0000000000003345
.text:0000000000003345 ; ---------------------------------------------------------------------------
.text:0000000000003346                 align 10h
.text:0000000000003350
.text:0000000000003350 ; =============== S U B R O U T I N E =======================================
.text:0000000000003350
.text:0000000000003350
.text:0000000000003350                 public get_quoting_style
.text:0000000000003350 get_quoting_style proc near
.text:0000000000003350 ; __unwind {
.text:0000000000003350                 lea     rax, default_quoting_options
.text:0000000000003357                 test    rdi, rdi
.text:000000000000335A                 cmovz   rdi, rax
.text:000000000000335E                 mov     eax, [rdi]
.text:0000000000003360                 retn
.text:0000000000003360 ; } // starts at 3350
.text:0000000000003360 get_quoting_style endp
.text:0000000000003360
.text:0000000000003360 ; ---------------------------------------------------------------------------
.text:0000000000003361                 align 10h
.text:0000000000003370
.text:0000000000003370 ; =============== S U B R O U T I N E =======================================
.text:0000000000003370
.text:0000000000003370
.text:0000000000003370                 public set_quoting_style
.text:0000000000003370 set_quoting_style proc near
.text:0000000000003370 ; __unwind {
.text:0000000000003370                 lea     rax, default_quoting_options
.text:0000000000003377                 test    rdi, rdi
.text:000000000000337A                 cmovz   rdi, rax
.text:000000000000337E                 mov     [rdi], esi
.text:0000000000003380                 retn
.text:0000000000003380 ; } // starts at 3370
.text:0000000000003380 set_quoting_style endp
.text:0000000000003380
.text:0000000000003380 ; ---------------------------------------------------------------------------
.text:0000000000003381                 align 10h
.text:0000000000003390
.text:0000000000003390 ; =============== S U B R O U T I N E =======================================
.text:0000000000003390
.text:0000000000003390 ; Attributes: info_from_lumina
.text:0000000000003390
.text:0000000000003390 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000003390                 public set_char_quoting
.text:0000000000003390 set_char_quoting proc near
.text:0000000000003390 ; __unwind {
.text:0000000000003390                 lea     rax, default_quoting_options
.text:0000000000003397                 test    rdi, rdi
.text:000000000000339A                 mov     ecx, esi
.text:000000000000339C                 cmovz   rdi, rax
.text:00000000000033A0                 mov     eax, esi
.text:00000000000033A2                 and     ecx, 1Fh
.text:00000000000033A5                 shr     al, 5
.text:00000000000033A8                 movzx   eax, al
.text:00000000000033AB                 lea     rdi, [rdi+rax*4+8]
.text:00000000000033B0                 mov     esi, [rdi]
.text:00000000000033B2                 mov     eax, esi
.text:00000000000033B4                 shr     eax, cl
.text:00000000000033B6                 xor     edx, eax
.text:00000000000033B8                 and     eax, 1
.text:00000000000033BB                 and     edx, 1
.text:00000000000033BE                 shl     edx, cl
.text:00000000000033C0                 xor     edx, esi
.text:00000000000033C2                 mov     [rdi], edx
.text:00000000000033C4                 retn
.text:00000000000033C4 ; } // starts at 3390
.text:00000000000033C4 set_char_quoting endp
.text:00000000000033C4
.text:00000000000033C4 ; ---------------------------------------------------------------------------
.text:00000000000033C5                 align 10h
.text:00000000000033D0
.text:00000000000033D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033D0
.text:00000000000033D0
.text:00000000000033D0                 public set_quoting_flags
.text:00000000000033D0 set_quoting_flags proc near
.text:00000000000033D0 ; __unwind {
.text:00000000000033D0                 lea     rax, default_quoting_options
.text:00000000000033D7                 test    rdi, rdi
.text:00000000000033DA                 cmovz   rdi, rax
.text:00000000000033DE                 mov     eax, [rdi+4]
.text:00000000000033E1                 mov     [rdi+4], esi
.text:00000000000033E4                 retn
.text:00000000000033E4 ; } // starts at 33D0
.text:00000000000033E4 set_quoting_flags endp
.text:00000000000033E4
.text:00000000000033E4 ; ---------------------------------------------------------------------------
.text:00000000000033E5                 align 10h
.text:00000000000033F0
.text:00000000000033F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033F0
.text:00000000000033F0 ; Attributes: info_from_lumina
.text:00000000000033F0
.text:00000000000033F0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000033F0                 public set_custom_quoting
.text:00000000000033F0 set_custom_quoting proc near
.text:00000000000033F0 ; __unwind {
.text:00000000000033F0                 lea     rax, default_quoting_options
.text:00000000000033F7                 test    rdi, rdi
.text:00000000000033FA                 cmovz   rdi, rax
.text:00000000000033FE                 test    rsi, rsi
.text:0000000000003401                 mov     dword ptr [rdi], 0Ah
.text:0000000000003407                 jz      short loc_3417
.text:0000000000003409                 test    rdx, rdx
.text:000000000000340C                 jz      short loc_3417
.text:000000000000340E                 mov     [rdi+28h], rsi
.text:0000000000003412                 mov     [rdi+30h], rdx
.text:0000000000003416                 retn
.text:0000000000003417 ; ---------------------------------------------------------------------------
.text:0000000000003417
.text:0000000000003417 loc_3417:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003417                                         ; set_custom_quoting+1C↑j
.text:0000000000003417                 sub     rsp, 8
.text:000000000000341B                 call    _abort
.text:000000000000341B ; } // starts at 33F0
.text:000000000000341B set_custom_quoting endp
.text:000000000000341B
.text:0000000000003420
.text:0000000000003420 ; =============== S U B R O U T I N E =======================================
.text:0000000000003420
.text:0000000000003420 ; Attributes: info_from_lumina
.text:0000000000003420
.text:0000000000003420 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003420                 public quotearg_buffer
.text:0000000000003420 quotearg_buffer proc near
.text:0000000000003420
.text:0000000000003420 var_40          = qword ptr -40h
.text:0000000000003420
.text:0000000000003420 ; __unwind {
.text:0000000000003420                 push    r15
.text:0000000000003422                 push    r14
.text:0000000000003424                 lea     rax, default_quoting_options
.text:000000000000342B                 push    r13
.text:000000000000342D                 push    r12
.text:000000000000342F                 mov     r13, rdi
.text:0000000000003432                 push    rbp
.text:0000000000003433                 push    rbx
.text:0000000000003434                 mov     rbx, r8
.text:0000000000003437                 mov     r14, rsi
.text:000000000000343A                 mov     r15, rdx
.text:000000000000343D                 sub     rsp, 18h
.text:0000000000003441                 test    r8, r8
.text:0000000000003444                 cmovz   rbx, rax
.text:0000000000003448                 mov     [rsp+48h+var_40], rcx
.text:000000000000344D                 call    ___errno_location
.text:0000000000003452                 mov     r12d, [rax]
.text:0000000000003455                 mov     rbp, rax
.text:0000000000003458                 lea     rax, [rbx+8]
.text:000000000000345C                 sub     rsp, 8
.text:0000000000003460                 mov     r9d, [rbx+4]
.text:0000000000003464                 push    qword ptr [rbx+30h]
.text:0000000000003467                 mov     r8d, [rbx]
.text:000000000000346A                 push    qword ptr [rbx+28h]
.text:000000000000346D                 mov     rdx, r15
.text:0000000000003470                 push    rax
.text:0000000000003471                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003476                 mov     rsi, r14
.text:0000000000003479                 mov     rdi, r13
.text:000000000000347C                 call    quotearg_buffer_restyled
.text:0000000000003481                 mov     [rbp+0], r12d
.text:0000000000003485                 add     rsp, 38h
.text:0000000000003489                 pop     rbx
.text:000000000000348A                 pop     rbp
.text:000000000000348B                 pop     r12
.text:000000000000348D                 pop     r13
.text:000000000000348F                 pop     r14
.text:0000000000003491                 pop     r15
.text:0000000000003493                 retn
.text:0000000000003493 ; } // starts at 3420
.text:0000000000003493 quotearg_buffer endp
.text:0000000000003493
.text:0000000000003493 ; ---------------------------------------------------------------------------
.text:0000000000003494                 align 20h
.text:00000000000034A0
.text:00000000000034A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034A0
.text:00000000000034A0 ; Attributes: info_from_lumina
.text:00000000000034A0
.text:00000000000034A0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000034A0                 public quotearg_alloc_mem
.text:00000000000034A0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000034A0
.text:00000000000034A0 var_5C          = dword ptr -5Ch
.text:00000000000034A0 var_58          = qword ptr -58h
.text:00000000000034A0 var_50          = qword ptr -50h
.text:00000000000034A0 var_48          = qword ptr -48h
.text:00000000000034A0 var_40          = qword ptr -40h
.text:00000000000034A0
.text:00000000000034A0 ; __unwind {
.text:00000000000034A0                 push    r15
.text:00000000000034A2                 push    r14
.text:00000000000034A4                 lea     rax, default_quoting_options
.text:00000000000034AB                 push    r13
.text:00000000000034AD                 push    r12
.text:00000000000034AF                 mov     r12, rdx
.text:00000000000034B2                 push    rbp
.text:00000000000034B3                 push    rbx
.text:00000000000034B4                 mov     rbx, rcx
.text:00000000000034B7                 mov     r14, rdi
.text:00000000000034BA                 mov     r15, rsi
.text:00000000000034BD                 sub     rsp, 38h
.text:00000000000034C1                 test    rcx, rcx
.text:00000000000034C4                 cmovz   rbx, rax
.text:00000000000034C8                 xor     ebp, ebp
.text:00000000000034CA                 call    ___errno_location
.text:00000000000034CF                 test    r12, r12
.text:00000000000034D2                 mov     r13, rax
.text:00000000000034D5                 mov     eax, [rax]
.text:00000000000034D7                 setz    bpl
.text:00000000000034DB                 or      ebp, [rbx+4]
.text:00000000000034DE                 lea     r10, [rbx+8]
.text:00000000000034E2                 sub     rsp, 8
.text:00000000000034E6                 mov     r8d, [rbx]
.text:00000000000034E9                 mov     rcx, r15
.text:00000000000034EC                 mov     [rsp+70h+var_5C], eax
.text:00000000000034F0                 push    qword ptr [rbx+30h]
.text:00000000000034F3                 mov     rdx, r14
.text:00000000000034F6                 push    qword ptr [rbx+28h]
.text:00000000000034F9                 push    r10
.text:00000000000034FB                 xor     esi, esi
.text:00000000000034FD                 mov     r9d, ebp
.text:0000000000003500                 xor     edi, edi
.text:0000000000003502                 mov     [rsp+88h+var_48], r10
.text:0000000000003507                 call    quotearg_buffer_restyled
.text:000000000000350C                 lea     rsi, [rax+1]
.text:0000000000003510                 mov     [rsp+88h+var_40], rax
.text:0000000000003515                 add     rsp, 20h
.text:0000000000003519                 mov     rdi, rsi
.text:000000000000351C                 mov     [rsp+68h+var_50], rsi
.text:0000000000003521                 call    xmalloc
.text:0000000000003526                 mov     [rsp+68h+var_58], rax
.text:000000000000352B                 sub     rsp, 8
.text:000000000000352F                 push    qword ptr [rbx+30h]
.text:0000000000003532                 push    qword ptr [rbx+28h]
.text:0000000000003535                 mov     r10, [rsp+80h+var_48]
.text:000000000000353A                 mov     r9d, ebp
.text:000000000000353D                 mov     r8d, [rbx]
.text:0000000000003540                 mov     rcx, r15
.text:0000000000003543                 mov     rdx, r14
.text:0000000000003546                 mov     rdi, rax
.text:0000000000003549                 push    r10
.text:000000000000354B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000003550                 call    quotearg_buffer_restyled
.text:0000000000003555                 mov     eax, [rsp+88h+var_5C]
.text:0000000000003559                 add     rsp, 20h
.text:000000000000355D                 test    r12, r12
.text:0000000000003560                 mov     [r13+0], eax
.text:0000000000003564                 jz      short loc_356F
.text:0000000000003566                 mov     r11, [rsp+68h+var_40]
.text:000000000000356B                 mov     [r12], r11
.text:000000000000356F
.text:000000000000356F loc_356F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000356F                 mov     rax, [rsp+68h+var_58]
.text:0000000000003574                 add     rsp, 38h
.text:0000000000003578                 pop     rbx
.text:0000000000003579                 pop     rbp
.text:000000000000357A                 pop     r12
.text:000000000000357C                 pop     r13
.text:000000000000357E                 pop     r14
.text:0000000000003580                 pop     r15
.text:0000000000003582                 retn
.text:0000000000003582 ; } // starts at 34A0
.text:0000000000003582 quotearg_alloc_mem endp
.text:0000000000003582
.text:0000000000003582 ; ---------------------------------------------------------------------------
.text:0000000000003583                 align 10h
.text:0000000000003590
.text:0000000000003590 ; =============== S U B R O U T I N E =======================================
.text:0000000000003590
.text:0000000000003590
.text:0000000000003590                 public quotearg_alloc
.text:0000000000003590 quotearg_alloc  proc near
.text:0000000000003590 ; __unwind {
.text:0000000000003590                 mov     rcx, rdx
.text:0000000000003593                 xor     edx, edx
.text:0000000000003595                 jmp     quotearg_alloc_mem
.text:0000000000003595 ; } // starts at 3590
.text:0000000000003595 quotearg_alloc  endp
.text:0000000000003595
.text:0000000000003595 ; ---------------------------------------------------------------------------
.text:000000000000359A                 align 20h
.text:00000000000035A0
.text:00000000000035A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035A0
.text:00000000000035A0 ; Attributes: info_from_lumina
.text:00000000000035A0
.text:00000000000035A0 ; void __cdecl quotearg_free()
.text:00000000000035A0                 public quotearg_free
.text:00000000000035A0 quotearg_free   proc near
.text:00000000000035A0 ; __unwind {
.text:00000000000035A0                 mov     eax, cs:nslots
.text:00000000000035A6                 push    r12
.text:00000000000035A8                 mov     r12, cs:slotvec
.text:00000000000035AF                 push    rbp
.text:00000000000035B0                 push    rbx
.text:00000000000035B1                 cmp     eax, 1
.text:00000000000035B4                 jle     short loc_35E1
.text:00000000000035B6                 sub     eax, 2
.text:00000000000035B9                 lea     rbx, [r12+18h]
.text:00000000000035BE                 shl     rax, 4
.text:00000000000035C2                 lea     rbp, [r12+rax+28h]
.text:00000000000035C7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000035D0
.text:00000000000035D0 loc_35D0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000035D0                 mov     rdi, [rbx]      ; ptr
.text:00000000000035D3                 add     rbx, 10h
.text:00000000000035D7                 call    _free
.text:00000000000035DC                 cmp     rbx, rbp
.text:00000000000035DF                 jnz     short loc_35D0
.text:00000000000035E1
.text:00000000000035E1 loc_35E1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000035E1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000035E6                 lea     rbx, slot0
.text:00000000000035ED                 cmp     rdi, rbx
.text:00000000000035F0                 jz      short loc_3609
.text:00000000000035F2                 call    _free
.text:00000000000035F7                 mov     cs:slotvec0, 100h
.text:0000000000003602                 mov     cs:off_207078, rbx
.text:0000000000003609
.text:0000000000003609 loc_3609:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003609                 lea     rbx, slotvec0
.text:0000000000003610                 cmp     r12, rbx
.text:0000000000003613                 jz      short loc_3624
.text:0000000000003615                 mov     rdi, r12        ; ptr
.text:0000000000003618                 call    _free
.text:000000000000361D                 mov     cs:slotvec, rbx
.text:0000000000003624
.text:0000000000003624 loc_3624:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003624                 pop     rbx
.text:0000000000003625                 mov     cs:nslots, 1
.text:000000000000362F                 pop     rbp
.text:0000000000003630                 pop     r12
.text:0000000000003632                 retn
.text:0000000000003632 ; } // starts at 35A0
.text:0000000000003632 quotearg_free   endp
.text:0000000000003632
.text:0000000000003632 ; ---------------------------------------------------------------------------
.text:0000000000003633                 align 20h
.text:0000000000003640
.text:0000000000003640 ; =============== S U B R O U T I N E =======================================
.text:0000000000003640
.text:0000000000003640
.text:0000000000003640                 public quotearg_n
.text:0000000000003640 quotearg_n      proc near
.text:0000000000003640 ; __unwind {
.text:0000000000003640                 lea     rcx, default_quoting_options
.text:0000000000003647                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000364E                 jmp     quotearg_n_options
.text:000000000000364E ; } // starts at 3640
.text:000000000000364E quotearg_n      endp
.text:000000000000364E
.text:000000000000364E ; ---------------------------------------------------------------------------
.text:0000000000003653                 align 20h
.text:0000000000003660
.text:0000000000003660 ; =============== S U B R O U T I N E =======================================
.text:0000000000003660
.text:0000000000003660
.text:0000000000003660                 public quotearg_n_mem
.text:0000000000003660 quotearg_n_mem  proc near
.text:0000000000003660 ; __unwind {
.text:0000000000003660                 lea     rcx, default_quoting_options
.text:0000000000003667                 jmp     quotearg_n_options
.text:0000000000003667 ; } // starts at 3660
.text:0000000000003667 quotearg_n_mem  endp
.text:0000000000003667
.text:0000000000003667 ; ---------------------------------------------------------------------------
.text:000000000000366C                 align 10h
.text:0000000000003670
.text:0000000000003670 ; =============== S U B R O U T I N E =======================================
.text:0000000000003670
.text:0000000000003670
.text:0000000000003670                 public quotearg
.text:0000000000003670 quotearg        proc near
.text:0000000000003670 ; __unwind {
.text:0000000000003670                 lea     rcx, default_quoting_options
.text:0000000000003677                 mov     rsi, rdi
.text:000000000000367A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003681                 xor     edi, edi
.text:0000000000003683                 jmp     quotearg_n_options
.text:0000000000003683 ; } // starts at 3670
.text:0000000000003683 quotearg        endp
.text:0000000000003683
.text:0000000000003683 ; ---------------------------------------------------------------------------
.text:0000000000003688                 align 10h
.text:0000000000003690
.text:0000000000003690 ; =============== S U B R O U T I N E =======================================
.text:0000000000003690
.text:0000000000003690
.text:0000000000003690                 public quotearg_mem
.text:0000000000003690 quotearg_mem    proc near
.text:0000000000003690 ; __unwind {
.text:0000000000003690                 lea     rcx, default_quoting_options
.text:0000000000003697                 mov     rdx, rsi
.text:000000000000369A                 mov     rsi, rdi
.text:000000000000369D                 xor     edi, edi
.text:000000000000369F                 jmp     quotearg_n_options
.text:000000000000369F ; } // starts at 3690
.text:000000000000369F quotearg_mem    endp
.text:000000000000369F
.text:000000000000369F ; ---------------------------------------------------------------------------
.text:00000000000036A4                 align 10h
.text:00000000000036B0
.text:00000000000036B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036B0
.text:00000000000036B0 ; Attributes: info_from_lumina
.text:00000000000036B0
.text:00000000000036B0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000036B0                 public quotearg_n_style
.text:00000000000036B0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:00000000000036B0
.text:00000000000036B0 var_48          = dword ptr -48h
.text:00000000000036B0 var_44          = qword ptr -44h
.text:00000000000036B0 var_3C          = qword ptr -3Ch
.text:00000000000036B0 var_34          = qword ptr -34h
.text:00000000000036B0 var_2C          = qword ptr -2Ch
.text:00000000000036B0 var_24          = qword ptr -24h
.text:00000000000036B0 var_1C          = qword ptr -1Ch
.text:00000000000036B0 var_14          = dword ptr -14h
.text:00000000000036B0 var_10          = qword ptr -10h
.text:00000000000036B0
.text:00000000000036B0 ; __unwind {
.text:00000000000036B0                 sub     rsp, 48h
.text:00000000000036B4                 mov     rax, rdx
.text:00000000000036B7                 mov     rdx, fs:28h
.text:00000000000036C0                 mov     [rsp+48h+var_10], rdx
.text:00000000000036C5                 xor     edx, edx
.text:00000000000036C7                 cmp     esi, 0Ah
.text:00000000000036CA                 jz      short loc_3734
.text:00000000000036CC                 mov     [rsp+48h+var_48], esi
.text:00000000000036CF                 mov     rcx, rsp
.text:00000000000036D2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000036D9                 mov     rsi, rax
.text:00000000000036DC                 mov     [rsp+48h+var_44], 0
.text:00000000000036E5                 mov     [rsp+48h+var_3C], 0
.text:00000000000036EE                 mov     [rsp+48h+var_34], 0
.text:00000000000036F7                 mov     [rsp+48h+var_2C], 0
.text:0000000000003700                 mov     [rsp+48h+var_24], 0
.text:0000000000003709                 mov     [rsp+48h+var_1C], 0
.text:0000000000003712                 mov     [rsp+48h+var_14], 0
.text:000000000000371A                 call    quotearg_n_options
.text:000000000000371F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003724                 xor     rcx, fs:28h
.text:000000000000372D                 jnz     short loc_3739
.text:000000000000372F                 add     rsp, 48h
.text:0000000000003733                 retn
.text:0000000000003734 ; ---------------------------------------------------------------------------
.text:0000000000003734
.text:0000000000003734 loc_3734:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000003734                 call    _abort
.text:0000000000003739 ; ---------------------------------------------------------------------------
.text:0000000000003739
.text:0000000000003739 loc_3739:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000003739                 call    ___stack_chk_fail
.text:0000000000003739 ; } // starts at 36B0
.text:0000000000003739 quotearg_n_style endp
.text:0000000000003739
.text:0000000000003739 ; ---------------------------------------------------------------------------
.text:000000000000373E                 align 20h
.text:0000000000003740
.text:0000000000003740 ; =============== S U B R O U T I N E =======================================
.text:0000000000003740
.text:0000000000003740 ; Attributes: info_from_lumina
.text:0000000000003740
.text:0000000000003740 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000003740                 public quotearg_n_style_mem
.text:0000000000003740 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000003740
.text:0000000000003740 var_48          = dword ptr -48h
.text:0000000000003740 var_44          = qword ptr -44h
.text:0000000000003740 var_3C          = qword ptr -3Ch
.text:0000000000003740 var_34          = qword ptr -34h
.text:0000000000003740 var_2C          = qword ptr -2Ch
.text:0000000000003740 var_24          = qword ptr -24h
.text:0000000000003740 var_1C          = qword ptr -1Ch
.text:0000000000003740 var_14          = dword ptr -14h
.text:0000000000003740 var_10          = qword ptr -10h
.text:0000000000003740
.text:0000000000003740 ; __unwind {
.text:0000000000003740                 sub     rsp, 48h
.text:0000000000003744                 mov     rax, rdx
.text:0000000000003747                 mov     rdx, rcx
.text:000000000000374A                 mov     rcx, fs:28h
.text:0000000000003753                 mov     [rsp+48h+var_10], rcx
.text:0000000000003758                 xor     ecx, ecx
.text:000000000000375A                 cmp     esi, 0Ah
.text:000000000000375D                 jz      short loc_37C0
.text:000000000000375F                 mov     [rsp+48h+var_48], esi
.text:0000000000003762                 mov     rcx, rsp
.text:0000000000003765                 mov     rsi, rax
.text:0000000000003768                 mov     [rsp+48h+var_44], 0
.text:0000000000003771                 mov     [rsp+48h+var_3C], 0
.text:000000000000377A                 mov     [rsp+48h+var_34], 0
.text:0000000000003783                 mov     [rsp+48h+var_2C], 0
.text:000000000000378C                 mov     [rsp+48h+var_24], 0
.text:0000000000003795                 mov     [rsp+48h+var_1C], 0
.text:000000000000379E                 mov     [rsp+48h+var_14], 0
.text:00000000000037A6                 call    quotearg_n_options
.text:00000000000037AB                 mov     rdx, [rsp+48h+var_10]
.text:00000000000037B0                 xor     rdx, fs:28h
.text:00000000000037B9                 jnz     short loc_37C5
.text:00000000000037BB                 add     rsp, 48h
.text:00000000000037BF                 retn
.text:00000000000037C0 ; ---------------------------------------------------------------------------
.text:00000000000037C0
.text:00000000000037C0 loc_37C0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000037C0                 call    _abort
.text:00000000000037C5 ; ---------------------------------------------------------------------------
.text:00000000000037C5
.text:00000000000037C5 loc_37C5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000037C5                 call    ___stack_chk_fail
.text:00000000000037C5 ; } // starts at 3740
.text:00000000000037C5 quotearg_n_style_mem endp
.text:00000000000037C5
.text:00000000000037C5 ; ---------------------------------------------------------------------------
.text:00000000000037CA                 align 10h
.text:00000000000037D0
.text:00000000000037D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037D0
.text:00000000000037D0
.text:00000000000037D0                 public quotearg_style
.text:00000000000037D0 quotearg_style  proc near
.text:00000000000037D0 ; __unwind {
.text:00000000000037D0                 mov     rdx, rsi
.text:00000000000037D3                 mov     esi, edi
.text:00000000000037D5                 xor     edi, edi
.text:00000000000037D7                 jmp     quotearg_n_style
.text:00000000000037D7 ; } // starts at 37D0
.text:00000000000037D7 quotearg_style  endp
.text:00000000000037D7
.text:00000000000037D7 ; ---------------------------------------------------------------------------
.text:00000000000037DC                 align 20h
.text:00000000000037E0
.text:00000000000037E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037E0
.text:00000000000037E0
.text:00000000000037E0                 public quotearg_style_mem
.text:00000000000037E0 quotearg_style_mem proc near
.text:00000000000037E0 ; __unwind {
.text:00000000000037E0                 mov     rcx, rdx
.text:00000000000037E3                 mov     rdx, rsi
.text:00000000000037E6                 mov     esi, edi
.text:00000000000037E8                 xor     edi, edi
.text:00000000000037EA                 jmp     quotearg_n_style_mem
.text:00000000000037EA ; } // starts at 37E0
.text:00000000000037EA quotearg_style_mem endp
.text:00000000000037EA
.text:00000000000037EA ; ---------------------------------------------------------------------------
.text:00000000000037EF                 align 10h
.text:00000000000037F0
.text:00000000000037F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037F0
.text:00000000000037F0 ; Attributes: info_from_lumina
.text:00000000000037F0
.text:00000000000037F0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:00000000000037F0                 public quotearg_char_mem
.text:00000000000037F0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:00000000000037F0                                         ; quotearg_colon+C↓j ...
.text:00000000000037F0
.text:00000000000037F0 var_48          = xmmword ptr -48h
.text:00000000000037F0 var_38          = xmmword ptr -38h
.text:00000000000037F0 var_28          = xmmword ptr -28h
.text:00000000000037F0 var_18          = qword ptr -18h
.text:00000000000037F0 var_10          = qword ptr -10h
.text:00000000000037F0
.text:00000000000037F0 ; __unwind {
.text:00000000000037F0                 sub     rsp, 48h
.text:00000000000037F4                 mov     ecx, edx
.text:00000000000037F6                 mov     rax, fs:28h
.text:00000000000037FF                 mov     [rsp+48h+var_10], rax
.text:0000000000003804                 xor     eax, eax
.text:0000000000003806                 mov     rax, cs:qword_207230
.text:000000000000380D                 mov     r8, rsp
.text:0000000000003810                 and     ecx, 1Fh
.text:0000000000003813                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000381B                 mov     [rsp+48h+var_18], rax
.text:0000000000003820                 mov     eax, edx
.text:0000000000003822                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003826                 shr     al, 5
.text:0000000000003829                 movzx   eax, al
.text:000000000000382C                 lea     r9, [r8+rax*4+8]
.text:0000000000003831                 movdqa  xmm0, cs:xmmword_207210
.text:0000000000003839                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000383E                 movdqa  xmm0, cs:xmmword_207220
.text:0000000000003846                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000384B                 mov     edx, [r9]
.text:000000000000384E                 mov     eax, edx
.text:0000000000003850                 shr     eax, cl
.text:0000000000003852                 not     eax
.text:0000000000003854                 and     eax, 1
.text:0000000000003857                 shl     eax, cl
.text:0000000000003859                 mov     rcx, r8
.text:000000000000385C                 xor     eax, edx
.text:000000000000385E                 mov     rdx, rsi
.text:0000000000003861                 mov     rsi, rdi
.text:0000000000003864                 mov     [r9], eax
.text:0000000000003867                 xor     edi, edi
.text:0000000000003869                 call    quotearg_n_options
.text:000000000000386E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000003873                 xor     rsi, fs:28h
.text:000000000000387C                 jnz     short loc_3883
.text:000000000000387E                 add     rsp, 48h
.text:0000000000003882                 retn
.text:0000000000003883 ; ---------------------------------------------------------------------------
.text:0000000000003883
.text:0000000000003883 loc_3883:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000003883                 call    ___stack_chk_fail
.text:0000000000003883 ; } // starts at 37F0
.text:0000000000003883 quotearg_char_mem endp
.text:0000000000003883
.text:0000000000003883 ; ---------------------------------------------------------------------------
.text:0000000000003888                 align 10h
.text:0000000000003890
.text:0000000000003890 ; =============== S U B R O U T I N E =======================================
.text:0000000000003890
.text:0000000000003890
.text:0000000000003890                 public quotearg_char
.text:0000000000003890 quotearg_char   proc near
.text:0000000000003890 ; __unwind {
.text:0000000000003890                 movsx   edx, sil
.text:0000000000003894                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000389B                 jmp     quotearg_char_mem
.text:000000000000389B ; } // starts at 3890
.text:000000000000389B quotearg_char   endp
.text:000000000000389B
.text:00000000000038A0
.text:00000000000038A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038A0
.text:00000000000038A0
.text:00000000000038A0                 public quotearg_colon
.text:00000000000038A0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000038A0 ; __unwind {
.text:00000000000038A0                 mov     edx, 3Ah ; ':'
.text:00000000000038A5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000038AC                 jmp     quotearg_char_mem
.text:00000000000038AC ; } // starts at 38A0
.text:00000000000038AC quotearg_colon  endp
.text:00000000000038AC
.text:00000000000038AC ; ---------------------------------------------------------------------------
.text:00000000000038B1                 align 20h
.text:00000000000038C0
.text:00000000000038C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038C0
.text:00000000000038C0
.text:00000000000038C0                 public quotearg_colon_mem
.text:00000000000038C0 quotearg_colon_mem proc near
.text:00000000000038C0 ; __unwind {
.text:00000000000038C0                 mov     edx, 3Ah ; ':'
.text:00000000000038C5                 jmp     quotearg_char_mem
.text:00000000000038C5 ; } // starts at 38C0
.text:00000000000038C5 quotearg_colon_mem endp
.text:00000000000038C5
.text:00000000000038C5 ; ---------------------------------------------------------------------------
.text:00000000000038CA                 align 10h
.text:00000000000038D0
.text:00000000000038D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038D0
.text:00000000000038D0 ; Attributes: info_from_lumina
.text:00000000000038D0
.text:00000000000038D0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:00000000000038D0                 public quotearg_n_style_colon
.text:00000000000038D0 quotearg_n_style_colon proc near
.text:00000000000038D0
.text:00000000000038D0 var_48          = dword ptr -48h
.text:00000000000038D0 var_44          = qword ptr -44h
.text:00000000000038D0 var_3C          = qword ptr -3Ch
.text:00000000000038D0 var_34          = qword ptr -34h
.text:00000000000038D0 var_2C          = qword ptr -2Ch
.text:00000000000038D0 var_24          = qword ptr -24h
.text:00000000000038D0 var_1C          = qword ptr -1Ch
.text:00000000000038D0 var_14          = dword ptr -14h
.text:00000000000038D0 var_10          = qword ptr -10h
.text:00000000000038D0
.text:00000000000038D0 ; __unwind {
.text:00000000000038D0                 sub     rsp, 48h
.text:00000000000038D4                 mov     rax, rdx
.text:00000000000038D7                 mov     rdx, fs:28h
.text:00000000000038E0                 mov     [rsp+48h+var_10], rdx
.text:00000000000038E5                 xor     edx, edx
.text:00000000000038E7                 cmp     esi, 0Ah
.text:00000000000038EA                 jz      short loc_3954
.text:00000000000038EC                 mov     [rsp+48h+var_48], esi
.text:00000000000038EF                 mov     rcx, rsp
.text:00000000000038F2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000038F9                 mov     rsi, rax
.text:00000000000038FC                 mov     [rsp+48h+var_44], 0
.text:0000000000003905                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000390E                 mov     [rsp+48h+var_34], 0
.text:0000000000003917                 mov     [rsp+48h+var_2C], 0
.text:0000000000003920                 mov     [rsp+48h+var_24], 0
.text:0000000000003929                 mov     [rsp+48h+var_1C], 0
.text:0000000000003932                 mov     [rsp+48h+var_14], 0
.text:000000000000393A                 call    quotearg_n_options
.text:000000000000393F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003944                 xor     rcx, fs:28h
.text:000000000000394D                 jnz     short loc_3959
.text:000000000000394F                 add     rsp, 48h
.text:0000000000003953                 retn
.text:0000000000003954 ; ---------------------------------------------------------------------------
.text:0000000000003954
.text:0000000000003954 loc_3954:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000003954                 call    _abort
.text:0000000000003959 ; ---------------------------------------------------------------------------
.text:0000000000003959
.text:0000000000003959 loc_3959:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000003959                 call    ___stack_chk_fail
.text:0000000000003959 ; } // starts at 38D0
.text:0000000000003959 quotearg_n_style_colon endp
.text:0000000000003959
.text:0000000000003959 ; ---------------------------------------------------------------------------
.text:000000000000395E                 align 20h
.text:0000000000003960
.text:0000000000003960 ; =============== S U B R O U T I N E =======================================
.text:0000000000003960
.text:0000000000003960 ; Attributes: info_from_lumina
.text:0000000000003960
.text:0000000000003960 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000003960                 public quotearg_n_custom_mem
.text:0000000000003960 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000003960                                         ; quotearg_custom+12↓j ...
.text:0000000000003960
.text:0000000000003960 var_48          = xmmword ptr -48h
.text:0000000000003960 var_38          = xmmword ptr -38h
.text:0000000000003960 var_28          = xmmword ptr -28h
.text:0000000000003960 var_18          = qword ptr -18h
.text:0000000000003960 var_10          = qword ptr -10h
.text:0000000000003960
.text:0000000000003960 ; __unwind {
.text:0000000000003960                 sub     rsp, 48h
.text:0000000000003964                 mov     r9, rcx
.text:0000000000003967                 mov     rcx, cs:qword_207230
.text:000000000000396E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003976                 mov     rax, fs:28h
.text:000000000000397F                 mov     [rsp+48h+var_10], rax
.text:0000000000003984                 xor     eax, eax
.text:0000000000003986                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000398A                 test    rsi, rsi
.text:000000000000398D                 mov     [rsp+48h+var_18], rcx
.text:0000000000003992                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003999                 movdqa  xmm0, cs:xmmword_207210
.text:00000000000039A1                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000039A6                 movdqa  xmm0, cs:xmmword_207220
.text:00000000000039AE                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000039B3                 jz      short loc_39E7
.text:00000000000039B5                 test    rdx, rdx
.text:00000000000039B8                 jz      short loc_39E7
.text:00000000000039BA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:00000000000039BF                 mov     [rsp+48h+var_18], rdx
.text:00000000000039C4                 mov     rcx, rsp
.text:00000000000039C7                 mov     rdx, r8
.text:00000000000039CA                 mov     rsi, r9
.text:00000000000039CD                 call    quotearg_n_options
.text:00000000000039D2                 mov     rdi, [rsp+48h+var_10]
.text:00000000000039D7                 xor     rdi, fs:28h
.text:00000000000039E0                 jnz     short loc_39EC
.text:00000000000039E2                 add     rsp, 48h
.text:00000000000039E6                 retn
.text:00000000000039E7 ; ---------------------------------------------------------------------------
.text:00000000000039E7
.text:00000000000039E7 loc_39E7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:00000000000039E7                                         ; quotearg_n_custom_mem+58↑j
.text:00000000000039E7                 call    _abort
.text:00000000000039EC ; ---------------------------------------------------------------------------
.text:00000000000039EC
.text:00000000000039EC loc_39EC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:00000000000039EC                 call    ___stack_chk_fail
.text:00000000000039EC ; } // starts at 3960
.text:00000000000039EC quotearg_n_custom_mem endp
.text:00000000000039EC
.text:00000000000039EC ; ---------------------------------------------------------------------------
.text:00000000000039F1                 align 20h
.text:0000000000003A00
.text:0000000000003A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A00
.text:0000000000003A00
.text:0000000000003A00                 public quotearg_n_custom
.text:0000000000003A00 quotearg_n_custom proc near
.text:0000000000003A00 ; __unwind {
.text:0000000000003A00                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A07                 jmp     quotearg_n_custom_mem
.text:0000000000003A07 ; } // starts at 3A00
.text:0000000000003A07 quotearg_n_custom endp
.text:0000000000003A07
.text:0000000000003A07 ; ---------------------------------------------------------------------------
.text:0000000000003A0C                 align 10h
.text:0000000000003A10
.text:0000000000003A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A10
.text:0000000000003A10
.text:0000000000003A10                 public quotearg_custom
.text:0000000000003A10 quotearg_custom proc near
.text:0000000000003A10 ; __unwind {
.text:0000000000003A10                 mov     rcx, rdx
.text:0000000000003A13                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A1A                 mov     rdx, rsi
.text:0000000000003A1D                 mov     rsi, rdi
.text:0000000000003A20                 xor     edi, edi
.text:0000000000003A22                 jmp     quotearg_n_custom_mem
.text:0000000000003A22 ; } // starts at 3A10
.text:0000000000003A22 quotearg_custom endp
.text:0000000000003A22
.text:0000000000003A22 ; ---------------------------------------------------------------------------
.text:0000000000003A27                 align 10h
.text:0000000000003A30
.text:0000000000003A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A30
.text:0000000000003A30
.text:0000000000003A30                 public quotearg_custom_mem
.text:0000000000003A30 quotearg_custom_mem proc near
.text:0000000000003A30 ; __unwind {
.text:0000000000003A30                 mov     r8, rcx
.text:0000000000003A33                 mov     rcx, rdx
.text:0000000000003A36                 mov     rdx, rsi
.text:0000000000003A39                 mov     rsi, rdi
.text:0000000000003A3C                 xor     edi, edi
.text:0000000000003A3E                 jmp     quotearg_n_custom_mem
.text:0000000000003A3E ; } // starts at 3A30
.text:0000000000003A3E quotearg_custom_mem endp
.text:0000000000003A3E
.text:0000000000003A3E ; ---------------------------------------------------------------------------
.text:0000000000003A43                 align 10h
.text:0000000000003A50
.text:0000000000003A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A50
.text:0000000000003A50
.text:0000000000003A50                 public quote_n_mem
.text:0000000000003A50 quote_n_mem     proc near
.text:0000000000003A50 ; __unwind {
.text:0000000000003A50                 lea     rcx, quote_quoting_options
.text:0000000000003A57                 jmp     quotearg_n_options
.text:0000000000003A57 ; } // starts at 3A50
.text:0000000000003A57 quote_n_mem     endp
.text:0000000000003A57
.text:0000000000003A57 ; ---------------------------------------------------------------------------
.text:0000000000003A5C                 align 20h
.text:0000000000003A60
.text:0000000000003A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A60
.text:0000000000003A60
.text:0000000000003A60                 public quote_mem
.text:0000000000003A60 quote_mem       proc near
.text:0000000000003A60 ; __unwind {
.text:0000000000003A60                 lea     rcx, quote_quoting_options
.text:0000000000003A67                 mov     rdx, rsi
.text:0000000000003A6A                 mov     rsi, rdi
.text:0000000000003A6D                 xor     edi, edi
.text:0000000000003A6F                 jmp     quotearg_n_options
.text:0000000000003A6F ; } // starts at 3A60
.text:0000000000003A6F quote_mem       endp
.text:0000000000003A6F
.text:0000000000003A6F ; ---------------------------------------------------------------------------
.text:0000000000003A74                 align 20h
.text:0000000000003A80
.text:0000000000003A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A80
.text:0000000000003A80
.text:0000000000003A80                 public quote_n
.text:0000000000003A80 quote_n         proc near
.text:0000000000003A80 ; __unwind {
.text:0000000000003A80                 lea     rcx, quote_quoting_options
.text:0000000000003A87                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A8E                 jmp     quotearg_n_options
.text:0000000000003A8E ; } // starts at 3A80
.text:0000000000003A8E quote_n         endp
.text:0000000000003A8E
.text:0000000000003A8E ; ---------------------------------------------------------------------------
.text:0000000000003A93                 align 20h
.text:0000000000003AA0
.text:0000000000003AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AA0
.text:0000000000003AA0
.text:0000000000003AA0                 public quote
.text:0000000000003AA0 quote           proc near               ; CODE XREF: main+BA↑p
.text:0000000000003AA0 ; __unwind {
.text:0000000000003AA0                 lea     rcx, quote_quoting_options
.text:0000000000003AA7                 mov     rsi, rdi
.text:0000000000003AAA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003AB1                 xor     edi, edi
.text:0000000000003AB3                 jmp     quotearg_n_options
.text:0000000000003AB3 ; } // starts at 3AA0
.text:0000000000003AB3 quote           endp
.text:0000000000003AB3
.text:0000000000003AB3 ; ---------------------------------------------------------------------------
.text:0000000000003AB8                 align 20h
.text:0000000000003AC0
.text:0000000000003AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AC0
.text:0000000000003AC0
.text:0000000000003AC0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000003AC0                 public version_etc_arn
.text:0000000000003AC0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_3EFB↓j
.text:0000000000003AC0                                         ; version_etc_va:loc_3F4B↓p ...
.text:0000000000003AC0
.text:0000000000003AC0 var_58          = qword ptr -58h
.text:0000000000003AC0 var_50          = qword ptr -50h
.text:0000000000003AC0 var_48          = qword ptr -48h
.text:0000000000003AC0 var_40          = qword ptr -40h
.text:0000000000003AC0
.text:0000000000003AC0 ; __unwind {
.text:0000000000003AC0                 push    r15
.text:0000000000003AC2                 push    r14
.text:0000000000003AC4                 push    r13
.text:0000000000003AC6                 push    r12
.text:0000000000003AC8                 mov     r12, r9
.text:0000000000003ACB                 push    rbp
.text:0000000000003ACC                 push    rbx
.text:0000000000003ACD                 mov     rbp, rdi
.text:0000000000003AD0                 mov     rbx, r8
.text:0000000000003AD3                 sub     rsp, 28h
.text:0000000000003AD7                 test    rsi, rsi
.text:0000000000003ADA                 jz      loc_3BF8
.text:0000000000003AE0                 mov     r8, rdx
.text:0000000000003AE3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000003AEA                 mov     r9, rcx
.text:0000000000003AED                 xor     eax, eax
.text:0000000000003AEF                 mov     rcx, rsi
.text:0000000000003AF2                 mov     esi, 1
.text:0000000000003AF7                 call    ___fprintf_chk
.text:0000000000003AFC
.text:0000000000003AFC loc_3AFC:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000003AFC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000003B03                 xor     edi, edi        ; domainname
.text:0000000000003B05                 mov     edx, 5          ; category
.text:0000000000003B0A                 call    _dcgettext
.text:0000000000003B0F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000003B16                 mov     rcx, rax
.text:0000000000003B19                 mov     r8d, 7E3h
.text:0000000000003B1F                 mov     esi, 1
.text:0000000000003B24                 mov     rdi, rbp
.text:0000000000003B27                 xor     eax, eax
.text:0000000000003B29                 call    ___fprintf_chk
.text:0000000000003B2E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000003B35                 xor     edi, edi        ; domainname
.text:0000000000003B37                 mov     edx, 5          ; category
.text:0000000000003B3C                 call    _dcgettext
.text:0000000000003B41                 mov     rsi, rbp        ; stream
.text:0000000000003B44                 mov     rdi, rax        ; s
.text:0000000000003B47                 call    _fputs_unlocked
.text:0000000000003B4C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000003B50                 ja      def_3B64        ; jumptable 0000000000003B64 default case
.text:0000000000003B56                 lea     rdx, jpt_3B64
.text:0000000000003B5D                 movsxd  rax, ds:(jpt_3B64 - 5188h)[rdx+r12*4]
.text:0000000000003B61                 add     rax, rdx
.text:0000000000003B64                 jmp     rax             ; switch jump
.text:0000000000003B64 ; ---------------------------------------------------------------------------
.text:0000000000003B66                 align 10h
.text:0000000000003B70
.text:0000000000003B70 loc_3B70:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003B70                                         ; DATA XREF: .rodata:jpt_3B64↓o
.text:0000000000003B70                 mov     r9, [rbx+38h]   ; jumptable 0000000000003B64 case 8
.text:0000000000003B74                 mov     rax, [rbx+10h]
.text:0000000000003B78                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003B7F                 mov     r8, [rbx+8]
.text:0000000000003B83                 mov     edx, 5          ; category
.text:0000000000003B88                 xor     edi, edi        ; domainname
.text:0000000000003B8A                 mov     r13, [rbx+30h]
.text:0000000000003B8E                 mov     r12, [rbx+28h]
.text:0000000000003B92                 mov     [rsp+58h+var_48], r9
.text:0000000000003B97                 mov     r15, [rbx+20h]
.text:0000000000003B9B                 mov     r14, [rbx+18h]
.text:0000000000003B9F                 mov     [rsp+58h+var_58], rax
.text:0000000000003BA3                 mov     [rsp+58h+var_50], r8
.text:0000000000003BA8                 mov     rbx, [rbx]
.text:0000000000003BAB                 call    _dcgettext
.text:0000000000003BB0                 sub     rsp, 8
.text:0000000000003BB4
.text:0000000000003BB4 loc_3BB4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000003BB4                 mov     r9, [rsp+60h+var_48]
.text:0000000000003BB9                 mov     rdx, rax
.text:0000000000003BBC                 mov     rcx, rbx
.text:0000000000003BBF                 mov     esi, 1
.text:0000000000003BC4                 mov     rdi, rbp
.text:0000000000003BC7                 xor     eax, eax
.text:0000000000003BC9                 push    r9
.text:0000000000003BCB                 push    r13
.text:0000000000003BCD                 push    r12
.text:0000000000003BCF                 push    r15
.text:0000000000003BD1                 push    r14
.text:0000000000003BD3                 mov     r9, [rsp+88h+var_58]
.text:0000000000003BD8                 mov     r8, [rsp+88h+var_50]
.text:0000000000003BDD                 call    ___fprintf_chk
.text:0000000000003BE2                 add     rsp, 30h
.text:0000000000003BE6
.text:0000000000003BE6 loc_3BE6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003BE6                                         ; DATA XREF: .rodata:jpt_3B64↓o
.text:0000000000003BE6                 add     rsp, 28h        ; jumptable 0000000000003B64 case 0
.text:0000000000003BEA                 pop     rbx
.text:0000000000003BEB                 pop     rbp
.text:0000000000003BEC                 pop     r12
.text:0000000000003BEE                 pop     r13
.text:0000000000003BF0                 pop     r14
.text:0000000000003BF2                 pop     r15
.text:0000000000003BF4                 retn
.text:0000000000003BF4 ; ---------------------------------------------------------------------------
.text:0000000000003BF5                 align 8
.text:0000000000003BF8
.text:0000000000003BF8 loc_3BF8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000003BF8                 mov     r8, rcx
.text:0000000000003BFB                 mov     rcx, rdx
.text:0000000000003BFE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000003C05                 mov     esi, 1
.text:0000000000003C0A                 xor     eax, eax
.text:0000000000003C0C                 call    ___fprintf_chk
.text:0000000000003C11                 jmp     loc_3AFC
.text:0000000000003C11 ; ---------------------------------------------------------------------------
.text:0000000000003C16                 align 20h
.text:0000000000003C20
.text:0000000000003C20 loc_3C20:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003C20                                         ; DATA XREF: .rodata:jpt_3B64↓o
.text:0000000000003C20                 mov     r10, [rbx+40h]  ; jumptable 0000000000003B64 case 9
.text:0000000000003C24                 mov     r9, [rbx+38h]
.text:0000000000003C28                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003C2F                 mov     rax, [rbx+10h]
.text:0000000000003C33                 mov     r8, [rbx+8]
.text:0000000000003C37                 mov     edx, 5          ; category
.text:0000000000003C3C                 mov     r13, [rbx+30h]
.text:0000000000003C40                 mov     r12, [rbx+28h]
.text:0000000000003C44                 mov     r15, [rbx+20h]
.text:0000000000003C48                 mov     r14, [rbx+18h]
.text:0000000000003C4C                 mov     rbx, [rbx]
.text:0000000000003C4F                 mov     [rsp+58h+var_40], r10
.text:0000000000003C54                 mov     [rsp+58h+var_48], r9
.text:0000000000003C59                 mov     [rsp+58h+var_58], rax
.text:0000000000003C5D                 mov     [rsp+58h+var_50], r8
.text:0000000000003C62
.text:0000000000003C62 loc_3C62:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000003C62                 xor     edi, edi        ; domainname
.text:0000000000003C64                 call    _dcgettext
.text:0000000000003C69                 mov     r10, [rsp+58h+var_40]
.text:0000000000003C6E                 push    r10
.text:0000000000003C70                 jmp     loc_3BB4
.text:0000000000003C70 ; ---------------------------------------------------------------------------
.text:0000000000003C75                 align 8
.text:0000000000003C78
.text:0000000000003C78 loc_3C78:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003C78                                         ; DATA XREF: .rodata:jpt_3B64↓o
.text:0000000000003C78                 mov     rbx, [rbx]      ; jumptable 0000000000003B64 case 1
.text:0000000000003C7B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000003C82                 mov     edx, 5          ; category
.text:0000000000003C87                 xor     edi, edi        ; domainname
.text:0000000000003C89                 call    _dcgettext
.text:0000000000003C8E                 add     rsp, 28h
.text:0000000000003C92                 mov     rcx, rbx
.text:0000000000003C95                 mov     rdi, rbp
.text:0000000000003C98                 pop     rbx
.text:0000000000003C99                 pop     rbp
.text:0000000000003C9A                 pop     r12
.text:0000000000003C9C                 pop     r13
.text:0000000000003C9E                 pop     r14
.text:0000000000003CA0                 pop     r15
.text:0000000000003CA2                 mov     rdx, rax
.text:0000000000003CA5                 mov     esi, 1
.text:0000000000003CAA                 xor     eax, eax
.text:0000000000003CAC                 jmp     ___fprintf_chk
.text:0000000000003CAC ; ---------------------------------------------------------------------------
.text:0000000000003CB1                 align 8
.text:0000000000003CB8
.text:0000000000003CB8 loc_3CB8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003CB8                                         ; DATA XREF: .rodata:jpt_3B64↓o
.text:0000000000003CB8                 mov     r12, [rbx+8]    ; jumptable 0000000000003B64 case 2
.text:0000000000003CBC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000003CC3                 mov     rbx, [rbx]
.text:0000000000003CC6                 mov     edx, 5          ; category
.text:0000000000003CCB                 xor     edi, edi        ; domainname
.text:0000000000003CCD                 call    _dcgettext
.text:0000000000003CD2                 add     rsp, 28h
.text:0000000000003CD6                 mov     r8, r12
.text:0000000000003CD9                 mov     rcx, rbx
.text:0000000000003CDC                 mov     rdi, rbp
.text:0000000000003CDF                 mov     rdx, rax
.text:0000000000003CE2                 mov     esi, 1
.text:0000000000003CE7                 pop     rbx
.text:0000000000003CE8                 pop     rbp
.text:0000000000003CE9                 pop     r12
.text:0000000000003CEB                 pop     r13
.text:0000000000003CED                 pop     r14
.text:0000000000003CEF                 pop     r15
.text:0000000000003CF1                 xor     eax, eax
.text:0000000000003CF3                 jmp     ___fprintf_chk
.text:0000000000003CF3 ; ---------------------------------------------------------------------------
.text:0000000000003CF8                 align 20h
.text:0000000000003D00
.text:0000000000003D00 loc_3D00:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003D00                                         ; DATA XREF: .rodata:jpt_3B64↓o
.text:0000000000003D00                 mov     r13, [rbx+10h]  ; jumptable 0000000000003B64 case 3
.text:0000000000003D04                 mov     r12, [rbx+8]
.text:0000000000003D08                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000003D0F                 mov     rbx, [rbx]
.text:0000000000003D12                 mov     edx, 5          ; category
.text:0000000000003D17                 xor     edi, edi        ; domainname
.text:0000000000003D19                 call    _dcgettext
.text:0000000000003D1E                 add     rsp, 28h
.text:0000000000003D22                 mov     r9, r13
.text:0000000000003D25                 mov     r8, r12
.text:0000000000003D28                 mov     rcx, rbx
.text:0000000000003D2B                 mov     rdi, rbp
.text:0000000000003D2E                 mov     rdx, rax
.text:0000000000003D31                 pop     rbx
.text:0000000000003D32                 pop     rbp
.text:0000000000003D33                 pop     r12
.text:0000000000003D35                 pop     r13
.text:0000000000003D37                 pop     r14
.text:0000000000003D39                 pop     r15
.text:0000000000003D3B                 mov     esi, 1
.text:0000000000003D40                 xor     eax, eax
.text:0000000000003D42                 jmp     ___fprintf_chk
.text:0000000000003D42 ; ---------------------------------------------------------------------------
.text:0000000000003D47                 align 10h
.text:0000000000003D50
.text:0000000000003D50 loc_3D50:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003D50                                         ; DATA XREF: .rodata:jpt_3B64↓o
.text:0000000000003D50                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003B64 case 4
.text:0000000000003D57                 mov     edx, 5          ; category
.text:0000000000003D5C                 xor     edi, edi        ; domainname
.text:0000000000003D5E                 mov     r14, [rbx+18h]
.text:0000000000003D62                 mov     r13, [rbx+10h]
.text:0000000000003D66                 mov     r12, [rbx+8]
.text:0000000000003D6A                 mov     rbx, [rbx]
.text:0000000000003D6D                 call    _dcgettext
.text:0000000000003D72                 sub     rsp, 8
.text:0000000000003D76
.text:0000000000003D76 loc_3D76:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000003D76                 push    r14
.text:0000000000003D78                 mov     rdx, rax
.text:0000000000003D7B                 mov     r9, r13
.text:0000000000003D7E                 mov     r8, r12
.text:0000000000003D81                 mov     rcx, rbx
.text:0000000000003D84                 mov     rdi, rbp
.text:0000000000003D87                 mov     esi, 1
.text:0000000000003D8C                 xor     eax, eax
.text:0000000000003D8E                 call    ___fprintf_chk
.text:0000000000003D93                 pop     rax
.text:0000000000003D94                 pop     rdx
.text:0000000000003D95                 add     rsp, 28h
.text:0000000000003D99                 pop     rbx
.text:0000000000003D9A                 pop     rbp
.text:0000000000003D9B                 pop     r12
.text:0000000000003D9D                 pop     r13
.text:0000000000003D9F                 pop     r14
.text:0000000000003DA1                 pop     r15
.text:0000000000003DA3                 retn
.text:0000000000003DA3 ; ---------------------------------------------------------------------------
.text:0000000000003DA4                 align 8
.text:0000000000003DA8
.text:0000000000003DA8 loc_3DA8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003DA8                                         ; DATA XREF: .rodata:jpt_3B64↓o
.text:0000000000003DA8                 mov     r15, [rbx+20h]  ; jumptable 0000000000003B64 case 5
.text:0000000000003DAC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000003DB3                 mov     edx, 5          ; category
.text:0000000000003DB8                 xor     edi, edi        ; domainname
.text:0000000000003DBA                 mov     r14, [rbx+18h]
.text:0000000000003DBE                 mov     r13, [rbx+10h]
.text:0000000000003DC2                 mov     r12, [rbx+8]
.text:0000000000003DC6                 mov     rbx, [rbx]
.text:0000000000003DC9                 call    _dcgettext
.text:0000000000003DCE                 push    r15
.text:0000000000003DD0                 jmp     short loc_3D76
.text:0000000000003DD0 ; ---------------------------------------------------------------------------
.text:0000000000003DD2                 align 8
.text:0000000000003DD8
.text:0000000000003DD8 loc_3DD8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003DD8                                         ; DATA XREF: .rodata:jpt_3B64↓o
.text:0000000000003DD8                 mov     r8, [rbx+8]     ; jumptable 0000000000003B64 case 6
.text:0000000000003DDC                 mov     r12, [rbx+28h]
.text:0000000000003DE0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000003DE7                 mov     r15, [rbx+20h]
.text:0000000000003DEB                 mov     r14, [rbx+18h]
.text:0000000000003DEF                 mov     edx, 5          ; category
.text:0000000000003DF4                 mov     r13, [rbx+10h]
.text:0000000000003DF8                 xor     edi, edi        ; domainname
.text:0000000000003DFA                 mov     rbx, [rbx]
.text:0000000000003DFD                 mov     [rsp+58h+var_58], r8
.text:0000000000003E01                 call    _dcgettext
.text:0000000000003E06                 sub     rsp, 8
.text:0000000000003E0A                 mov     r9, r13
.text:0000000000003E0D                 push    r12
.text:0000000000003E0F                 push    r15
.text:0000000000003E11                 push    r14
.text:0000000000003E13
.text:0000000000003E13 loc_3E13:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000003E13                 mov     r8, [rsp+78h+var_58]
.text:0000000000003E18                 mov     rcx, rbx
.text:0000000000003E1B                 mov     rdx, rax
.text:0000000000003E1E                 mov     rdi, rbp
.text:0000000000003E21                 mov     esi, 1
.text:0000000000003E26                 xor     eax, eax
.text:0000000000003E28                 call    ___fprintf_chk
.text:0000000000003E2D                 add     rsp, 20h
.text:0000000000003E31                 add     rsp, 28h
.text:0000000000003E35                 pop     rbx
.text:0000000000003E36                 pop     rbp
.text:0000000000003E37                 pop     r12
.text:0000000000003E39                 pop     r13
.text:0000000000003E3B                 pop     r14
.text:0000000000003E3D                 pop     r15
.text:0000000000003E3F                 retn
.text:0000000000003E40 ; ---------------------------------------------------------------------------
.text:0000000000003E40
.text:0000000000003E40 loc_3E40:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E40                                         ; DATA XREF: .rodata:jpt_3B64↓o
.text:0000000000003E40                 mov     r9, [rbx+10h]   ; jumptable 0000000000003B64 case 7
.text:0000000000003E44                 mov     r13, [rbx+30h]
.text:0000000000003E48                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000003E4F                 mov     r12, [rbx+28h]
.text:0000000000003E53                 mov     r15, [rbx+20h]
.text:0000000000003E57                 mov     edx, 5          ; category
.text:0000000000003E5C                 mov     r14, [rbx+18h]
.text:0000000000003E60                 mov     r8, [rbx+8]
.text:0000000000003E64                 xor     edi, edi        ; domainname
.text:0000000000003E66                 mov     [rsp+58h+var_50], r9
.text:0000000000003E6B                 mov     rbx, [rbx]
.text:0000000000003E6E                 mov     [rsp+58h+var_58], r8
.text:0000000000003E72                 call    _dcgettext
.text:0000000000003E77                 push    r13
.text:0000000000003E79                 push    r12
.text:0000000000003E7B                 push    r15
.text:0000000000003E7D                 push    r14
.text:0000000000003E7F                 mov     r9, [rsp+78h+var_50]
.text:0000000000003E84                 jmp     short loc_3E13
.text:0000000000003E84 ; ---------------------------------------------------------------------------
.text:0000000000003E86                 align 10h
.text:0000000000003E90
.text:0000000000003E90 def_3B64:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000003E90                 mov     r10, [rbx+40h]  ; jumptable 0000000000003B64 default case
.text:0000000000003E94                 mov     r9, [rbx+38h]
.text:0000000000003E98                 mov     edx, 5
.text:0000000000003E9D                 mov     rax, [rbx+10h]
.text:0000000000003EA1                 mov     r8, [rbx+8]
.text:0000000000003EA5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003EAC                 mov     r13, [rbx+30h]
.text:0000000000003EB0                 mov     r12, [rbx+28h]
.text:0000000000003EB4                 mov     r15, [rbx+20h]
.text:0000000000003EB8                 mov     r14, [rbx+18h]
.text:0000000000003EBC                 mov     [rsp+58h+var_40], r10
.text:0000000000003EC1                 mov     [rsp+58h+var_48], r9
.text:0000000000003EC6                 mov     [rsp+58h+var_58], rax
.text:0000000000003ECA                 mov     [rsp+58h+var_50], r8
.text:0000000000003ECF                 mov     rbx, [rbx]
.text:0000000000003ED2                 jmp     loc_3C62
.text:0000000000003ED2 ; } // starts at 3AC0
.text:0000000000003ED2 version_etc_arn endp
.text:0000000000003ED2
.text:0000000000003ED2 ; ---------------------------------------------------------------------------
.text:0000000000003ED7                 align 20h
.text:0000000000003EE0
.text:0000000000003EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EE0
.text:0000000000003EE0 ; Attributes: info_from_lumina
.text:0000000000003EE0
.text:0000000000003EE0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000003EE0                 public version_etc_ar
.text:0000000000003EE0 version_etc_ar  proc near
.text:0000000000003EE0 ; __unwind {
.text:0000000000003EE0                 xor     r9d, r9d
.text:0000000000003EE3                 cmp     qword ptr [r8], 0
.text:0000000000003EE7                 jz      short loc_3EFB
.text:0000000000003EE9                 nop     dword ptr [rax+00000000h]
.text:0000000000003EF0
.text:0000000000003EF0 loc_3EF0:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000003EF0                 add     r9, 1
.text:0000000000003EF4                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000003EF9                 jnz     short loc_3EF0
.text:0000000000003EFB
.text:0000000000003EFB loc_3EFB:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000003EFB                 jmp     version_etc_arn
.text:0000000000003EFB ; } // starts at 3EE0
.text:0000000000003EFB version_etc_ar  endp
.text:0000000000003EFB
.text:0000000000003F00
.text:0000000000003F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F00
.text:0000000000003F00 ; Attributes: info_from_lumina
.text:0000000000003F00
.text:0000000000003F00 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000003F00                 public version_etc_va
.text:0000000000003F00 version_etc_va  proc near               ; CODE XREF: parse_long_options+11B↑p
.text:0000000000003F00                                         ; parse_gnu_standard_options_only+EB↑p
.text:0000000000003F00
.text:0000000000003F00 authtab         = qword ptr -68h
.text:0000000000003F00 var_10          = qword ptr -10h
.text:0000000000003F00
.text:0000000000003F00 ; __unwind {
.text:0000000000003F00                 sub     rsp, 68h
.text:0000000000003F04                 mov     r10, r8
.text:0000000000003F07                 xor     r9d, r9d
.text:0000000000003F0A                 mov     rax, fs:28h
.text:0000000000003F13                 mov     [rsp+68h+var_10], rax
.text:0000000000003F18                 xor     eax, eax
.text:0000000000003F1A                 mov     r8, rsp
.text:0000000000003F1D                 nop     dword ptr [rax]
.text:0000000000003F20
.text:0000000000003F20 loc_3F20:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000003F20                 mov     eax, [r10]
.text:0000000000003F23                 cmp     eax, 2Fh ; '/'
.text:0000000000003F26                 ja      short loc_3F6A
.text:0000000000003F28                 mov     r11d, eax
.text:0000000000003F2B                 add     r11, [r10+10h]
.text:0000000000003F2F                 add     eax, 8
.text:0000000000003F32                 mov     [r10], eax
.text:0000000000003F35
.text:0000000000003F35 loc_3F35:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000003F35                 mov     rax, [r11]
.text:0000000000003F38                 test    rax, rax
.text:0000000000003F3B                 mov     [r8+r9*8], rax
.text:0000000000003F3F                 jz      short loc_3F4B
.text:0000000000003F41                 add     r9, 1
.text:0000000000003F45                 cmp     r9, 0Ah
.text:0000000000003F49                 jnz     short loc_3F20
.text:0000000000003F4B
.text:0000000000003F4B loc_3F4B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000003F4B                 call    version_etc_arn
.text:0000000000003F50                 mov     rax, [rsp+68h+var_10]
.text:0000000000003F55                 xor     rax, fs:28h
.text:0000000000003F5E                 jnz     short loc_3F65
.text:0000000000003F60                 add     rsp, 68h
.text:0000000000003F64                 retn
.text:0000000000003F65 ; ---------------------------------------------------------------------------
.text:0000000000003F65
.text:0000000000003F65 loc_3F65:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000003F65                 call    ___stack_chk_fail
.text:0000000000003F6A ; ---------------------------------------------------------------------------
.text:0000000000003F6A
.text:0000000000003F6A loc_3F6A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000003F6A                 mov     r11, [r10+8]
.text:0000000000003F6E                 lea     rax, [r11+8]
.text:0000000000003F72                 mov     [r10+8], rax
.text:0000000000003F76                 jmp     short loc_3F35
.text:0000000000003F76 ; } // starts at 3F00
.text:0000000000003F76 version_etc_va  endp
.text:0000000000003F76
.text:0000000000003F76 ; ---------------------------------------------------------------------------
.text:0000000000003F78                 align 20h
.text:0000000000003F80
.text:0000000000003F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F80
.text:0000000000003F80 ; Attributes: info_from_lumina
.text:0000000000003F80
.text:0000000000003F80 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000003F80                 public version_etc
.text:0000000000003F80 version_etc     proc near
.text:0000000000003F80
.text:0000000000003F80 var_C0          = dword ptr -0C0h
.text:0000000000003F80 var_B8          = qword ptr -0B8h
.text:0000000000003F80 var_B0          = qword ptr -0B0h
.text:0000000000003F80 var_A8          = byte ptr -0A8h
.text:0000000000003F80 var_50          = qword ptr -50h
.text:0000000000003F80 var_48          = byte ptr -48h
.text:0000000000003F80 var_28          = qword ptr -28h
.text:0000000000003F80 var_20          = qword ptr -20h
.text:0000000000003F80 arg_0           = byte ptr  8
.text:0000000000003F80
.text:0000000000003F80 ; __unwind {
.text:0000000000003F80                 push    rbp
.text:0000000000003F81                 push    rbx
.text:0000000000003F82                 mov     r10d, 20h ; ' '
.text:0000000000003F88                 xor     r11d, r11d
.text:0000000000003F8B                 sub     rsp, 0B8h
.text:0000000000003F92                 mov     rax, fs:28h
.text:0000000000003F9B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000003FA0                 xor     eax, eax
.text:0000000000003FA2                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000003FAA                 mov     [rsp+0C8h+var_28], r8
.text:0000000000003FB2                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000003FBA                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000003FBF                 mov     [rsp+0C8h+var_20], r9
.text:0000000000003FC7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000003FCF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000003FD4                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000003FDC                 xor     r9d, r9d
.text:0000000000003FDF                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000003FE4                 mov     rbp, rax
.text:0000000000003FE7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003FF0
.text:0000000000003FF0 loc_3FF0:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000003FF0                 cmp     r10d, 2Fh ; '/'
.text:0000000000003FF4                 ja      short loc_404C
.text:0000000000003FF6                 mov     eax, r10d
.text:0000000000003FF9                 mov     r11d, 1
.text:0000000000003FFF                 add     r10d, 8
.text:0000000000004003                 add     rax, rbp
.text:0000000000004006
.text:0000000000004006 loc_4006:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004006                 mov     rax, [rax]
.text:0000000000004009                 test    rax, rax
.text:000000000000400C                 mov     [r8+r9*8], rax
.text:0000000000004010                 jz      short loc_401C
.text:0000000000004012                 add     r9, 1
.text:0000000000004016                 cmp     r9, 0Ah
.text:000000000000401A                 jnz     short loc_3FF0
.text:000000000000401C
.text:000000000000401C loc_401C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000401C                 test    r11b, r11b
.text:000000000000401F                 jnz     short loc_4045
.text:0000000000004021
.text:0000000000004021 loc_4021:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004021                 call    version_etc_arn
.text:0000000000004026                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000402B                 xor     rax, fs:28h
.text:0000000000004034                 jnz     short loc_4040
.text:0000000000004036                 add     rsp, 0B8h
.text:000000000000403D                 pop     rbx
.text:000000000000403E                 pop     rbp
.text:000000000000403F                 retn
.text:0000000000004040 ; ---------------------------------------------------------------------------
.text:0000000000004040
.text:0000000000004040 loc_4040:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004040                 call    ___stack_chk_fail
.text:0000000000004045 ; ---------------------------------------------------------------------------
.text:0000000000004045
.text:0000000000004045 loc_4045:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004045                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000404A                 jmp     short loc_4021
.text:000000000000404C ; ---------------------------------------------------------------------------
.text:000000000000404C
.text:000000000000404C loc_404C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000404C                 mov     rax, rbx
.text:000000000000404F                 add     rbx, 8
.text:0000000000004053                 jmp     short loc_4006
.text:0000000000004053 ; } // starts at 3F80
.text:0000000000004053 version_etc     endp
.text:0000000000004053
.text:0000000000004053 ; ---------------------------------------------------------------------------
.text:0000000000004055                 align 20h
.text:0000000000004060
.text:0000000000004060 ; =============== S U B R O U T I N E =======================================
.text:0000000000004060
.text:0000000000004060 ; Attributes: info_from_lumina
.text:0000000000004060
.text:0000000000004060 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004060                 public emit_bug_reporting_address
.text:0000000000004060 emit_bug_reporting_address proc near
.text:0000000000004060 ; __unwind {
.text:0000000000004060                 push    rbx
.text:0000000000004061                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004068                 mov     edx, 5          ; category
.text:000000000000406D                 xor     edi, edi        ; domainname
.text:000000000000406F                 call    _dcgettext
.text:0000000000004074                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000407B                 mov     rsi, rax
.text:000000000000407E                 mov     edi, 1
.text:0000000000004083                 xor     eax, eax
.text:0000000000004085                 call    ___printf_chk
.text:000000000000408A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004091                 mov     edx, 5          ; category
.text:0000000000004096                 xor     edi, edi        ; domainname
.text:0000000000004098                 call    _dcgettext
.text:000000000000409D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000040A4                 lea     rdx, unk_4776
.text:00000000000040AB                 mov     rsi, rax
.text:00000000000040AE                 mov     edi, 1
.text:00000000000040B3                 xor     eax, eax
.text:00000000000040B5                 call    ___printf_chk
.text:00000000000040BA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000040C1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000040C8                 xor     edi, edi        ; domainname
.text:00000000000040CA                 mov     edx, 5          ; category
.text:00000000000040CF                 call    _dcgettext
.text:00000000000040D4                 mov     rsi, rbx        ; stream
.text:00000000000040D7                 mov     rdi, rax        ; s
.text:00000000000040DA                 pop     rbx
.text:00000000000040DB                 jmp     _fputs_unlocked
.text:00000000000040DB ; } // starts at 4060
.text:00000000000040DB emit_bug_reporting_address endp
.text:00000000000040DB
.text:00000000000040E0
.text:00000000000040E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040E0
.text:00000000000040E0
.text:00000000000040E0                 public xmalloc
.text:00000000000040E0 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:00000000000040E0                                         ; quotearg_alloc_mem+81↑p ...
.text:00000000000040E0 ; __unwind {
.text:00000000000040E0                 push    rbx
.text:00000000000040E1                 mov     rbx, rdi
.text:00000000000040E4                 call    _malloc
.text:00000000000040E9                 test    rax, rax
.text:00000000000040EC                 jnz     short loc_40F3
.text:00000000000040EE                 test    rbx, rbx
.text:00000000000040F1                 jnz     short loc_40F5
.text:00000000000040F3
.text:00000000000040F3 loc_40F3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000040F3                 pop     rbx
.text:00000000000040F4                 retn
.text:00000000000040F5 ; ---------------------------------------------------------------------------
.text:00000000000040F5
.text:00000000000040F5 loc_40F5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000040F5                 call    xalloc_die
.text:00000000000040F5 ; } // starts at 40E0
.text:00000000000040F5 xmalloc         endp
.text:00000000000040F5
.text:00000000000040F5 ; ---------------------------------------------------------------------------
.text:00000000000040FA                 align 20h
.text:0000000000004100
.text:0000000000004100 ; =============== S U B R O U T I N E =======================================
.text:0000000000004100
.text:0000000000004100 ; Attributes: info_from_lumina
.text:0000000000004100
.text:0000000000004100 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004100                 public xnmalloc
.text:0000000000004100 xnmalloc        proc near
.text:0000000000004100 ; __unwind {
.text:0000000000004100                 mov     rax, rdi
.text:0000000000004103                 mul     rsi
.text:0000000000004106                 mov     rdi, rax
.text:0000000000004109                 seto    al
.text:000000000000410C                 test    rdi, rdi
.text:000000000000410F                 js      short loc_411B
.text:0000000000004111                 movzx   eax, al
.text:0000000000004114                 test    rax, rax
.text:0000000000004117                 jnz     short loc_411B
.text:0000000000004119                 jmp     short xmalloc
.text:000000000000411B ; ---------------------------------------------------------------------------
.text:000000000000411B
.text:000000000000411B loc_411B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000411B                                         ; xnmalloc+17↑j
.text:000000000000411B                 sub     rsp, 8
.text:000000000000411F                 call    xalloc_die
.text:000000000000411F ; } // starts at 4100
.text:000000000000411F xnmalloc        endp
.text:000000000000411F
.text:000000000000411F ; ---------------------------------------------------------------------------
.text:0000000000004124                 align 10h
.text:0000000000004130
.text:0000000000004130 ; =============== S U B R O U T I N E =======================================
.text:0000000000004130
.text:0000000000004130
.text:0000000000004130                 public xcharalloc
.text:0000000000004130 xcharalloc      proc near
.text:0000000000004130 ; __unwind {
.text:0000000000004130                 jmp     short xmalloc
.text:0000000000004130 ; } // starts at 4130
.text:0000000000004130 xcharalloc      endp
.text:0000000000004130
.text:0000000000004130 ; ---------------------------------------------------------------------------
.text:0000000000004132                 align 20h
.text:0000000000004140
.text:0000000000004140 ; =============== S U B R O U T I N E =======================================
.text:0000000000004140
.text:0000000000004140 ; Attributes: info_from_lumina
.text:0000000000004140
.text:0000000000004140 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004140                 public xrealloc
.text:0000000000004140 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004140                                         ; quotearg_n_options+182↑p ...
.text:0000000000004140 ; __unwind {
.text:0000000000004140                 test    rsi, rsi
.text:0000000000004143                 push    rbx
.text:0000000000004144                 mov     rbx, rsi
.text:0000000000004147                 jnz     short loc_414E
.text:0000000000004149                 test    rdi, rdi
.text:000000000000414C                 jnz     short loc_4168
.text:000000000000414E
.text:000000000000414E loc_414E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000414E                 mov     rsi, rbx        ; size
.text:0000000000004151                 call    _realloc
.text:0000000000004156                 test    rax, rax
.text:0000000000004159                 jnz     short loc_4160
.text:000000000000415B                 test    rbx, rbx
.text:000000000000415E                 jnz     short loc_4171
.text:0000000000004160
.text:0000000000004160 loc_4160:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004160                 pop     rbx
.text:0000000000004161                 retn
.text:0000000000004161 ; ---------------------------------------------------------------------------
.text:0000000000004162                 align 8
.text:0000000000004168
.text:0000000000004168 loc_4168:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004168                 call    _free
.text:000000000000416D                 xor     eax, eax
.text:000000000000416F                 pop     rbx
.text:0000000000004170                 retn
.text:0000000000004171 ; ---------------------------------------------------------------------------
.text:0000000000004171
.text:0000000000004171 loc_4171:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004171                 call    xalloc_die
.text:0000000000004171 ; } // starts at 4140
.text:0000000000004171 xrealloc        endp
.text:0000000000004171
.text:0000000000004171 ; ---------------------------------------------------------------------------
.text:0000000000004176                 align 20h
.text:0000000000004180
.text:0000000000004180 ; =============== S U B R O U T I N E =======================================
.text:0000000000004180
.text:0000000000004180 ; Attributes: info_from_lumina
.text:0000000000004180
.text:0000000000004180 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004180                 public xnrealloc
.text:0000000000004180 xnrealloc       proc near
.text:0000000000004180 ; __unwind {
.text:0000000000004180                 mov     rax, rsi
.text:0000000000004183                 mul     rdx
.text:0000000000004186                 mov     rsi, rax
.text:0000000000004189                 seto    al
.text:000000000000418C                 test    rsi, rsi
.text:000000000000418F                 js      short loc_419B
.text:0000000000004191                 movzx   eax, al
.text:0000000000004194                 test    rax, rax
.text:0000000000004197                 jnz     short loc_419B
.text:0000000000004199                 jmp     short xrealloc
.text:000000000000419B ; ---------------------------------------------------------------------------
.text:000000000000419B
.text:000000000000419B loc_419B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000419B                                         ; xnrealloc+17↑j
.text:000000000000419B                 sub     rsp, 8
.text:000000000000419F                 call    xalloc_die
.text:000000000000419F ; } // starts at 4180
.text:000000000000419F xnrealloc       endp
.text:000000000000419F
.text:000000000000419F ; ---------------------------------------------------------------------------
.text:00000000000041A4                 align 10h
.text:00000000000041B0
.text:00000000000041B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041B0
.text:00000000000041B0 ; Attributes: info_from_lumina
.text:00000000000041B0
.text:00000000000041B0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000041B0                 public x2nrealloc
.text:00000000000041B0 x2nrealloc      proc near
.text:00000000000041B0 ; __unwind {
.text:00000000000041B0                 test    rdi, rdi
.text:00000000000041B3                 mov     r9, rdx
.text:00000000000041B6                 mov     rcx, [rsi]
.text:00000000000041B9                 jz      short loc_41F0
.text:00000000000041BB                 xor     edx, edx
.text:00000000000041BD                 mov     rax, 5555555555555554h
.text:00000000000041C7                 div     r9
.text:00000000000041CA                 cmp     rax, rcx
.text:00000000000041CD                 jbe     short loc_420B
.text:00000000000041CF                 mov     rax, rcx
.text:00000000000041D2                 shr     rax, 1
.text:00000000000041D5                 lea     rcx, [rax+rcx+1]
.text:00000000000041DA
.text:00000000000041DA loc_41DA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000041DA                 mov     [rsi], rcx
.text:00000000000041DD                 imul    rcx, r9
.text:00000000000041E1                 mov     rsi, rcx
.text:00000000000041E4                 jmp     xrealloc
.text:00000000000041E4 ; ---------------------------------------------------------------------------
.text:00000000000041E9                 align 10h
.text:00000000000041F0
.text:00000000000041F0 loc_41F0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000041F0                 test    rcx, rcx
.text:00000000000041F3                 jz      short loc_4218
.text:00000000000041F5
.text:00000000000041F5 loc_41F5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000041F5                 mov     rax, rcx
.text:00000000000041F8                 mul     r9
.text:00000000000041FB                 seto    dl
.text:00000000000041FE                 test    rax, rax
.text:0000000000004201                 movzx   edx, dl
.text:0000000000004204                 js      short loc_420B
.text:0000000000004206                 test    rdx, rdx
.text:0000000000004209                 jz      short loc_41DA
.text:000000000000420B
.text:000000000000420B loc_420B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000420B                                         ; x2nrealloc+54↑j
.text:000000000000420B                 sub     rsp, 8
.text:000000000000420F                 call    xalloc_die
.text:000000000000420F ; ---------------------------------------------------------------------------
.text:0000000000004214                 align 8
.text:0000000000004218
.text:0000000000004218 loc_4218:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004218                 xor     edx, edx
.text:000000000000421A                 mov     eax, 80h
.text:000000000000421F                 xor     r8d, r8d
.text:0000000000004222                 div     r9
.text:0000000000004225                 test    rax, rax
.text:0000000000004228                 setz    r8b
.text:000000000000422C                 lea     rcx, [r8+rax]
.text:0000000000004230                 jmp     short loc_41F5
.text:0000000000004230 ; } // starts at 41B0
.text:0000000000004230 x2nrealloc      endp
.text:0000000000004230
.text:0000000000004230 ; ---------------------------------------------------------------------------
.text:0000000000004232                 align 20h
.text:0000000000004240
.text:0000000000004240 ; =============== S U B R O U T I N E =======================================
.text:0000000000004240
.text:0000000000004240 ; Attributes: info_from_lumina
.text:0000000000004240
.text:0000000000004240 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004240                 public x2realloc
.text:0000000000004240 x2realloc       proc near
.text:0000000000004240 ; __unwind {
.text:0000000000004240                 test    rdi, rdi
.text:0000000000004243                 mov     rax, [rsi]
.text:0000000000004246                 jz      short loc_4270
.text:0000000000004248                 mov     rdx, 5555555555555553h
.text:0000000000004252                 cmp     rax, rdx
.text:0000000000004255                 ja      short loc_4281
.text:0000000000004257                 mov     rdx, rax
.text:000000000000425A                 shr     rdx, 1
.text:000000000000425D                 lea     rax, [rdx+rax+1]
.text:0000000000004262
.text:0000000000004262 loc_4262:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004262                 mov     [rsi], rax
.text:0000000000004265                 mov     rsi, rax
.text:0000000000004268                 jmp     xrealloc
.text:0000000000004268 ; ---------------------------------------------------------------------------
.text:000000000000426D                 align 10h
.text:0000000000004270
.text:0000000000004270 loc_4270:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000004270                 test    rax, rax
.text:0000000000004273                 mov     edx, 80h
.text:0000000000004278                 cmovz   rax, rdx
.text:000000000000427C                 test    rax, rax
.text:000000000000427F                 jns     short loc_4262
.text:0000000000004281
.text:0000000000004281 loc_4281:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000004281                 sub     rsp, 8
.text:0000000000004285                 call    xalloc_die
.text:0000000000004285 ; } // starts at 4240
.text:0000000000004285 x2realloc       endp
.text:0000000000004285
.text:0000000000004285 ; ---------------------------------------------------------------------------
.text:000000000000428A                 align 10h
.text:0000000000004290
.text:0000000000004290 ; =============== S U B R O U T I N E =======================================
.text:0000000000004290
.text:0000000000004290
.text:0000000000004290 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004290                 public xzalloc
.text:0000000000004290 xzalloc         proc near
.text:0000000000004290 ; __unwind {
.text:0000000000004290                 push    rbx
.text:0000000000004291                 mov     rbx, rdi
.text:0000000000004294                 call    xmalloc
.text:0000000000004299                 mov     rdx, rbx        ; n
.text:000000000000429C                 xor     esi, esi        ; c
.text:000000000000429E                 mov     rdi, rax        ; s
.text:00000000000042A1                 pop     rbx
.text:00000000000042A2                 jmp     _memset
.text:00000000000042A2 ; } // starts at 4290
.text:00000000000042A2 xzalloc         endp
.text:00000000000042A2
.text:00000000000042A2 ; ---------------------------------------------------------------------------
.text:00000000000042A7                 align 10h
.text:00000000000042B0
.text:00000000000042B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042B0
.text:00000000000042B0 ; Attributes: info_from_lumina
.text:00000000000042B0
.text:00000000000042B0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000042B0                 public xcalloc
.text:00000000000042B0 xcalloc         proc near
.text:00000000000042B0 ; __unwind {
.text:00000000000042B0                 mov     rax, rdi
.text:00000000000042B3                 sub     rsp, 8
.text:00000000000042B7                 mul     rsi
.text:00000000000042BA                 seto    dl
.text:00000000000042BD                 test    rax, rax
.text:00000000000042C0                 js      short loc_42D9
.text:00000000000042C2                 movzx   edx, dl
.text:00000000000042C5                 test    rdx, rdx
.text:00000000000042C8                 jnz     short loc_42D9
.text:00000000000042CA                 call    _calloc
.text:00000000000042CF                 test    rax, rax
.text:00000000000042D2                 jz      short loc_42D9
.text:00000000000042D4                 add     rsp, 8
.text:00000000000042D8                 retn
.text:00000000000042D9 ; ---------------------------------------------------------------------------
.text:00000000000042D9
.text:00000000000042D9 loc_42D9:                               ; CODE XREF: xcalloc+10↑j
.text:00000000000042D9                                         ; xcalloc+18↑j ...
.text:00000000000042D9                 call    xalloc_die
.text:00000000000042D9 ; } // starts at 42B0
.text:00000000000042D9 xcalloc         endp
.text:00000000000042D9
.text:00000000000042D9 ; ---------------------------------------------------------------------------
.text:00000000000042DE                 align 20h
.text:00000000000042E0
.text:00000000000042E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042E0
.text:00000000000042E0 ; Attributes: info_from_lumina
.text:00000000000042E0
.text:00000000000042E0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000042E0                 public xmemdup
.text:00000000000042E0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000042E0                                         ; xstrdup+11↓j
.text:00000000000042E0 ; __unwind {
.text:00000000000042E0                 push    rbp
.text:00000000000042E1                 push    rbx
.text:00000000000042E2                 mov     rbp, rdi
.text:00000000000042E5                 mov     rdi, rsi
.text:00000000000042E8                 mov     rbx, rsi
.text:00000000000042EB                 sub     rsp, 8
.text:00000000000042EF                 call    xmalloc
.text:00000000000042F4                 add     rsp, 8
.text:00000000000042F8                 mov     rdx, rbx        ; n
.text:00000000000042FB                 mov     rsi, rbp        ; src
.text:00000000000042FE                 pop     rbx
.text:00000000000042FF                 pop     rbp
.text:0000000000004300                 mov     rdi, rax        ; dest
.text:0000000000004303                 jmp     _memcpy
.text:0000000000004303 ; } // starts at 42E0
.text:0000000000004303 xmemdup         endp
.text:0000000000004303
.text:0000000000004303 ; ---------------------------------------------------------------------------
.text:0000000000004308                 align 10h
.text:0000000000004310
.text:0000000000004310 ; =============== S U B R O U T I N E =======================================
.text:0000000000004310
.text:0000000000004310
.text:0000000000004310 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004310                 public xstrdup
.text:0000000000004310 xstrdup         proc near
.text:0000000000004310 ; __unwind {
.text:0000000000004310                 push    rbx
.text:0000000000004311                 mov     rbx, rdi
.text:0000000000004314                 call    _strlen
.text:0000000000004319                 mov     rdi, rbx        ; src
.text:000000000000431C                 lea     rsi, [rax+1]    ; n
.text:0000000000004320                 pop     rbx
.text:0000000000004321                 jmp     short xmemdup
.text:0000000000004321 ; } // starts at 4310
.text:0000000000004321 xstrdup         endp
.text:0000000000004321
.text:0000000000004321 ; ---------------------------------------------------------------------------
.text:0000000000004323                 align 10h
.text:0000000000004330
.text:0000000000004330 ; =============== S U B R O U T I N E =======================================
.text:0000000000004330
.text:0000000000004330 ; Attributes: noreturn info_from_lumina
.text:0000000000004330
.text:0000000000004330 ; void __cdecl xalloc_die()
.text:0000000000004330                 public xalloc_die
.text:0000000000004330 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_3306↑p
.text:0000000000004330                                         ; xmalloc:loc_40F5↑p ...
.text:0000000000004330 ; __unwind {
.text:0000000000004330                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004337                 sub     rsp, 8
.text:000000000000433B                 mov     edx, 5          ; category
.text:0000000000004340                 xor     edi, edi        ; domainname
.text:0000000000004342                 call    _dcgettext
.text:0000000000004347                 mov     edi, cs:exit_failure ; status
.text:000000000000434D                 lea     rdx, format+4   ; format
.text:0000000000004354                 mov     rcx, rax
.text:0000000000004357                 xor     esi, esi        ; errnum
.text:0000000000004359                 xor     eax, eax
.text:000000000000435B                 call    _error
.text:0000000000004360                 call    _abort
.text:0000000000004360 ; } // starts at 4330
.text:0000000000004360 xalloc_die      endp
.text:0000000000004360
.text:0000000000004360 ; ---------------------------------------------------------------------------
.text:0000000000004365                 align 10h
.text:0000000000004370
.text:0000000000004370 ; =============== S U B R O U T I N E =======================================
.text:0000000000004370
.text:0000000000004370 ; Attributes: info_from_lumina
.text:0000000000004370
.text:0000000000004370 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000004370                 public rpl_mbrtowc
.text:0000000000004370 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000004370
.text:0000000000004370 pwc             = dword ptr -34h
.text:0000000000004370 var_30          = qword ptr -30h
.text:0000000000004370
.text:0000000000004370 ; __unwind {
.text:0000000000004370                 push    r13
.text:0000000000004372                 push    r12
.text:0000000000004374                 mov     r13, rsi
.text:0000000000004377                 push    rbp
.text:0000000000004378                 push    rbx
.text:0000000000004379                 mov     rbx, rdi
.text:000000000000437C                 mov     r12, rdx
.text:000000000000437F                 sub     rsp, 18h
.text:0000000000004383                 mov     rax, fs:28h
.text:000000000000438C                 mov     [rsp+38h+var_30], rax
.text:0000000000004391                 xor     eax, eax
.text:0000000000004393                 lea     rax, [rsp+38h+pwc]
.text:0000000000004398                 test    rdi, rdi
.text:000000000000439B                 cmovz   rbx, rax
.text:000000000000439F                 mov     rdi, rbx        ; pwc
.text:00000000000043A2                 call    _mbrtowc
.text:00000000000043A7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000043AB                 mov     rbp, rax
.text:00000000000043AE                 jbe     short loc_43D0
.text:00000000000043B0                 test    r12, r12
.text:00000000000043B3                 jz      short loc_43D0
.text:00000000000043B5                 xor     edi, edi
.text:00000000000043B7                 call    hard_locale
.text:00000000000043BC                 test    al, al
.text:00000000000043BE                 jnz     short loc_43D0
.text:00000000000043C0                 movzx   eax, byte ptr [r13+0]
.text:00000000000043C5                 mov     ebp, 1
.text:00000000000043CA                 mov     [rbx], eax
.text:00000000000043CC                 nop     dword ptr [rax+00h]
.text:00000000000043D0
.text:00000000000043D0 loc_43D0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000043D0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000043D0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000043D5                 xor     rdx, fs:28h
.text:00000000000043DE                 mov     rax, rbp
.text:00000000000043E1                 jnz     short loc_43EE
.text:00000000000043E3                 add     rsp, 18h
.text:00000000000043E7                 pop     rbx
.text:00000000000043E8                 pop     rbp
.text:00000000000043E9                 pop     r12
.text:00000000000043EB                 pop     r13
.text:00000000000043ED                 retn
.text:00000000000043EE ; ---------------------------------------------------------------------------
.text:00000000000043EE
.text:00000000000043EE loc_43EE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000043EE                 call    ___stack_chk_fail
.text:00000000000043EE ; } // starts at 4370
.text:00000000000043EE rpl_mbrtowc     endp
.text:00000000000043EE
.text:00000000000043EE ; ---------------------------------------------------------------------------
.text:00000000000043F3                 align 20h
.text:0000000000004400
.text:0000000000004400 ; =============== S U B R O U T I N E =======================================
.text:0000000000004400
.text:0000000000004400 ; Attributes: info_from_lumina
.text:0000000000004400
.text:0000000000004400 ; int __fastcall close_stream(FILE *stream)
.text:0000000000004400                 public close_stream
.text:0000000000004400 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000004400                                         ; close_stdout+33↑p
.text:0000000000004400 ; __unwind {
.text:0000000000004400                 push    r12
.text:0000000000004402                 push    rbp
.text:0000000000004403                 mov     rbp, rdi
.text:0000000000004406                 push    rbx
.text:0000000000004407                 call    ___fpending
.text:000000000000440C                 mov     ebx, [rbp+0]
.text:000000000000440F                 mov     rdi, rbp        ; stream
.text:0000000000004412                 mov     r12, rax
.text:0000000000004415                 call    rpl_fclose
.text:000000000000441A                 and     ebx, 20h
.text:000000000000441D                 test    ebx, ebx
.text:000000000000441F                 jnz     short loc_4438
.text:0000000000004421                 test    eax, eax
.text:0000000000004423                 jz      short loc_442F
.text:0000000000004425                 test    r12, r12
.text:0000000000004428                 mov     eax, 0FFFFFFFFh
.text:000000000000442D                 jz      short loc_4468
.text:000000000000442F
.text:000000000000442F loc_442F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000442F                 pop     rbx
.text:0000000000004430                 pop     rbp
.text:0000000000004431                 pop     r12
.text:0000000000004433                 retn
.text:0000000000004433 ; ---------------------------------------------------------------------------
.text:0000000000004434                 align 8
.text:0000000000004438
.text:0000000000004438 loc_4438:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000004438                 test    eax, eax
.text:000000000000443A                 jnz     short loc_4458
.text:000000000000443C                 call    ___errno_location
.text:0000000000004441                 mov     dword ptr [rax], 0
.text:0000000000004447                 mov     eax, 0FFFFFFFFh
.text:000000000000444C                 pop     rbx
.text:000000000000444D                 pop     rbp
.text:000000000000444E                 pop     r12
.text:0000000000004450                 retn
.text:0000000000004450 ; ---------------------------------------------------------------------------
.text:0000000000004451                 align 8
.text:0000000000004458
.text:0000000000004458 loc_4458:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000004458                 pop     rbx
.text:0000000000004459                 mov     eax, 0FFFFFFFFh
.text:000000000000445E                 pop     rbp
.text:000000000000445F                 pop     r12
.text:0000000000004461                 retn
.text:0000000000004461 ; ---------------------------------------------------------------------------
.text:0000000000004462                 align 8
.text:0000000000004468
.text:0000000000004468 loc_4468:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000004468                 call    ___errno_location
.text:000000000000446D                 cmp     dword ptr [rax], 9
.text:0000000000004470                 pop     rbx
.text:0000000000004471                 pop     rbp
.text:0000000000004472                 pop     r12
.text:0000000000004474                 setnz   al
.text:0000000000004477                 movzx   eax, al
.text:000000000000447A                 neg     eax
.text:000000000000447C                 retn
.text:000000000000447C ; } // starts at 4400
.text:000000000000447C close_stream    endp
.text:000000000000447C
.text:000000000000447C ; ---------------------------------------------------------------------------
.text:000000000000447D                 align 20h
.text:0000000000004480
.text:0000000000004480 ; =============== S U B R O U T I N E =======================================
.text:0000000000004480
.text:0000000000004480
.text:0000000000004480                 public hard_locale
.text:0000000000004480 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000004480 ; __unwind {
.text:0000000000004480                 sub     rsp, 8
.text:0000000000004484                 xor     esi, esi        ; locale
.text:0000000000004486                 call    _setlocale
.text:000000000000448B                 mov     rdx, rax
.text:000000000000448E                 mov     eax, 1
.text:0000000000004493                 test    rdx, rdx
.text:0000000000004496                 jz      short loc_44B5
.text:0000000000004498                 lea     rdi, aC         ; "C"
.text:000000000000449F                 mov     ecx, 2
.text:00000000000044A4                 mov     rsi, rdx
.text:00000000000044A7                 repe cmpsb
.text:00000000000044A9                 setnbe  cl
.text:00000000000044AC                 sbb     cl, 0
.text:00000000000044AF                 xor     eax, eax
.text:00000000000044B1                 test    cl, cl
.text:00000000000044B3                 jnz     short loc_44C0
.text:00000000000044B5
.text:00000000000044B5 loc_44B5:                               ; CODE XREF: hard_locale+16↑j
.text:00000000000044B5                 add     rsp, 8
.text:00000000000044B9                 retn
.text:00000000000044B9 ; ---------------------------------------------------------------------------
.text:00000000000044BA                 align 20h
.text:00000000000044C0
.text:00000000000044C0 loc_44C0:                               ; CODE XREF: hard_locale+33↑j
.text:00000000000044C0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000044C7                 mov     ecx, 6
.text:00000000000044CC                 mov     rsi, rdx
.text:00000000000044CF                 repe cmpsb
.text:00000000000044D1                 setnbe  al
.text:00000000000044D4                 sbb     al, 0
.text:00000000000044D6                 test    al, al
.text:00000000000044D8                 setnz   al
.text:00000000000044DB                 add     rsp, 8
.text:00000000000044DF                 retn
.text:00000000000044DF ; } // starts at 4480
.text:00000000000044DF hard_locale     endp
.text:00000000000044DF
.text:00000000000044E0
.text:00000000000044E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044E0
.text:00000000000044E0
.text:00000000000044E0                 public locale_charset
.text:00000000000044E0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:00000000000044E0 ; __unwind {
.text:00000000000044E0                 sub     rsp, 8
.text:00000000000044E4                 mov     edi, 0Eh        ; item
.text:00000000000044E9                 call    _nl_langinfo
.text:00000000000044EE                 test    rax, rax
.text:00000000000044F1                 jz      short loc_4510
.text:00000000000044F3                 cmp     byte ptr [rax], 0
.text:00000000000044F6                 lea     rdx, aAscii     ; "ASCII"
.text:00000000000044FD                 cmovz   rax, rdx
.text:0000000000004501                 add     rsp, 8
.text:0000000000004505                 retn
.text:0000000000004505 ; ---------------------------------------------------------------------------
.text:0000000000004506                 align 10h
.text:0000000000004510
.text:0000000000004510 loc_4510:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000004510                 lea     rax, aAscii     ; "ASCII"
.text:0000000000004517                 add     rsp, 8
.text:000000000000451B                 retn
.text:000000000000451B ; } // starts at 44E0
.text:000000000000451B locale_charset  endp
.text:000000000000451B
.text:000000000000451B ; ---------------------------------------------------------------------------
.text:000000000000451C                 align 20h
.text:0000000000004520
.text:0000000000004520 ; =============== S U B R O U T I N E =======================================
.text:0000000000004520
.text:0000000000004520 ; Attributes: info_from_lumina
.text:0000000000004520
.text:0000000000004520 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004520                 public rpl_fclose
.text:0000000000004520 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000004520 ; __unwind {
.text:0000000000004520                 push    r12
.text:0000000000004522                 push    rbp
.text:0000000000004523                 push    rbx
.text:0000000000004524                 mov     rbx, rdi
.text:0000000000004527                 call    _fileno
.text:000000000000452C                 test    eax, eax
.text:000000000000452E                 mov     rdi, rbx        ; fp
.text:0000000000004531                 js      short loc_4587
.text:0000000000004533                 call    ___freading
.text:0000000000004538                 test    eax, eax
.text:000000000000453A                 jnz     short loc_4568
.text:000000000000453C
.text:000000000000453C loc_453C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000453C                 mov     rdi, rbx        ; stream
.text:000000000000453F                 call    rpl_fflush
.text:0000000000004544                 test    eax, eax
.text:0000000000004546                 jz      short loc_4584
.text:0000000000004548                 call    ___errno_location
.text:000000000000454D                 mov     r12d, [rax]
.text:0000000000004550                 mov     rdi, rbx        ; stream
.text:0000000000004553                 mov     rbp, rax
.text:0000000000004556                 call    _fclose
.text:000000000000455B                 test    r12d, r12d
.text:000000000000455E                 jnz     short loc_4590
.text:0000000000004560
.text:0000000000004560 loc_4560:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004560                 pop     rbx
.text:0000000000004561                 pop     rbp
.text:0000000000004562                 pop     r12
.text:0000000000004564                 retn
.text:0000000000004564 ; ---------------------------------------------------------------------------
.text:0000000000004565                 align 8
.text:0000000000004568
.text:0000000000004568 loc_4568:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004568                 mov     rdi, rbx        ; stream
.text:000000000000456B                 call    _fileno
.text:0000000000004570                 xor     esi, esi        ; offset
.text:0000000000004572                 mov     edx, 1          ; whence
.text:0000000000004577                 mov     edi, eax        ; fd
.text:0000000000004579                 call    _lseek
.text:000000000000457E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004582                 jnz     short loc_453C
.text:0000000000004584
.text:0000000000004584 loc_4584:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000004584                 mov     rdi, rbx        ; stream
.text:0000000000004587
.text:0000000000004587 loc_4587:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000004587                 pop     rbx
.text:0000000000004588                 pop     rbp
.text:0000000000004589                 pop     r12
.text:000000000000458B                 jmp     _fclose
.text:0000000000004590 ; ---------------------------------------------------------------------------
.text:0000000000004590
.text:0000000000004590 loc_4590:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004590                 mov     [rbp+0], r12d
.text:0000000000004594                 mov     eax, 0FFFFFFFFh
.text:0000000000004599                 jmp     short loc_4560
.text:0000000000004599 ; } // starts at 4520
.text:0000000000004599 rpl_fclose      endp
.text:0000000000004599
.text:0000000000004599 ; ---------------------------------------------------------------------------
.text:000000000000459B                 align 20h
.text:00000000000045A0
.text:00000000000045A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045A0
.text:00000000000045A0 ; Attributes: info_from_lumina
.text:00000000000045A0
.text:00000000000045A0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000045A0                 public rpl_fflush
.text:00000000000045A0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000045A0 ; __unwind {
.text:00000000000045A0                 test    rdi, rdi
.text:00000000000045A3                 push    rbx
.text:00000000000045A4                 mov     rbx, rdi
.text:00000000000045A7                 jz      short loc_45BA
.text:00000000000045A9                 call    ___freading
.text:00000000000045AE                 test    eax, eax
.text:00000000000045B0                 jz      short loc_45BA
.text:00000000000045B2                 test    dword ptr [rbx], 100h
.text:00000000000045B8                 jnz     short loc_45C8
.text:00000000000045BA
.text:00000000000045BA loc_45BA:                               ; CODE XREF: rpl_fflush+7↑j
.text:00000000000045BA                                         ; rpl_fflush+10↑j
.text:00000000000045BA                 mov     rdi, rbx        ; stream
.text:00000000000045BD                 pop     rbx
.text:00000000000045BE                 jmp     _fflush
.text:00000000000045BE ; ---------------------------------------------------------------------------
.text:00000000000045C3                 align 8
.text:00000000000045C8
.text:00000000000045C8 loc_45C8:                               ; CODE XREF: rpl_fflush+18↑j
.text:00000000000045C8                 mov     rdi, rbx
.text:00000000000045CB                 mov     edx, 1
.text:00000000000045D0                 xor     esi, esi
.text:00000000000045D2                 call    rpl_fseeko
.text:00000000000045D7                 mov     rdi, rbx        ; stream
.text:00000000000045DA                 pop     rbx
.text:00000000000045DB                 jmp     _fflush
.text:00000000000045DB ; } // starts at 45A0
.text:00000000000045DB rpl_fflush      endp
.text:00000000000045DB
.text:00000000000045E0
.text:00000000000045E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045E0
.text:00000000000045E0 ; Attributes: info_from_lumina
.text:00000000000045E0
.text:00000000000045E0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:00000000000045E0                 public rpl_fseeko
.text:00000000000045E0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:00000000000045E0 ; __unwind {
.text:00000000000045E0                 mov     rax, [rdi+8]
.text:00000000000045E4                 cmp     [rdi+10h], rax
.text:00000000000045E8                 jz      short loc_45F0
.text:00000000000045EA
.text:00000000000045EA loc_45EA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:00000000000045EA                                         ; rpl_fseeko+1F↓j
.text:00000000000045EA                 jmp     _fseeko
.text:00000000000045EA ; ---------------------------------------------------------------------------
.text:00000000000045EF                 align 10h
.text:00000000000045F0
.text:00000000000045F0 loc_45F0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:00000000000045F0                 mov     rax, [rdi+20h]
.text:00000000000045F4                 cmp     [rdi+28h], rax
.text:00000000000045F8                 jnz     short loc_45EA
.text:00000000000045FA                 cmp     qword ptr [rdi+48h], 0
.text:00000000000045FF                 jnz     short loc_45EA
.text:0000000000004601                 push    r12
.text:0000000000004603                 push    rbp
.text:0000000000004604                 mov     r12d, edx
.text:0000000000004607                 push    rbx
.text:0000000000004608                 mov     rbp, rsi
.text:000000000000460B                 mov     rbx, rdi
.text:000000000000460E                 call    _fileno
.text:0000000000004613                 mov     edx, r12d       ; whence
.text:0000000000004616                 mov     rsi, rbp        ; offset
.text:0000000000004619                 mov     edi, eax        ; fd
.text:000000000000461B                 call    _lseek
.text:0000000000004620                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004624                 jz      short loc_4632
.text:0000000000004626                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000004629                 mov     [rbx+90h], rax
.text:0000000000004630                 xor     eax, eax
.text:0000000000004632
.text:0000000000004632 loc_4632:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000004632                 pop     rbx
.text:0000000000004633                 pop     rbp
.text:0000000000004634                 pop     r12
.text:0000000000004636                 retn
.text:0000000000004636 ; } // starts at 45E0
.text:0000000000004636 rpl_fseeko      endp
.text:0000000000004636
.text:0000000000004636 ; ---------------------------------------------------------------------------
.text:0000000000004637                 align 20h
.text:0000000000004640
.text:0000000000004640 ; =============== S U B R O U T I N E =======================================
.text:0000000000004640
.text:0000000000004640 ; Attributes: info_from_lumina
.text:0000000000004640
.text:0000000000004640 ; void _libc_csu_init(void)
.text:0000000000004640                 public __libc_csu_init
.text:0000000000004640 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000004640 ; __unwind {
.text:0000000000004640                 push    r15
.text:0000000000004642                 push    r14
.text:0000000000004644                 mov     r15, rdx
.text:0000000000004647                 push    r13
.text:0000000000004649                 push    r12
.text:000000000000464B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000004652                 push    rbp
.text:0000000000004653                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000465A                 push    rbx
.text:000000000000465B                 mov     r13d, edi
.text:000000000000465E                 mov     r14, rsi
.text:0000000000004661                 sub     rbp, r12
.text:0000000000004664                 sub     rsp, 8
.text:0000000000004668                 sar     rbp, 3
.text:000000000000466C                 call    _init_proc
.text:0000000000004671                 test    rbp, rbp
.text:0000000000004674                 jz      short loc_4696
.text:0000000000004676                 xor     ebx, ebx
.text:0000000000004678                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004680
.text:0000000000004680 loc_4680:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000004680                 mov     rdx, r15
.text:0000000000004683                 mov     rsi, r14
.text:0000000000004686                 mov     edi, r13d
.text:0000000000004689                 call    ds:(__frame_dummy_init_array_entry - 206BB0h)[r12+rbx*8]
.text:000000000000468D                 add     rbx, 1
.text:0000000000004691                 cmp     rbp, rbx
.text:0000000000004694                 jnz     short loc_4680
.text:0000000000004696
.text:0000000000004696 loc_4696:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000004696                 add     rsp, 8
.text:000000000000469A                 pop     rbx
.text:000000000000469B                 pop     rbp
.text:000000000000469C                 pop     r12
.text:000000000000469E                 pop     r13
.text:00000000000046A0                 pop     r14
.text:00000000000046A2                 pop     r15
.text:00000000000046A4                 retn
.text:00000000000046A4 ; } // starts at 4640
.text:00000000000046A4 __libc_csu_init endp
.text:00000000000046A4
.text:00000000000046A4 ; ---------------------------------------------------------------------------
.text:00000000000046A5                 align 10h
.text:00000000000046B0
.text:00000000000046B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046B0
.text:00000000000046B0
.text:00000000000046B0 ; void _libc_csu_fini(void)
.text:00000000000046B0                 public __libc_csu_fini
.text:00000000000046B0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000046B0 ; __unwind {
.text:00000000000046B0                 rep retn
.text:00000000000046B0 ; } // starts at 46B0
.text:00000000000046B0 __libc_csu_fini endp
.text:00000000000046B0
.text:00000000000046B0 ; ---------------------------------------------------------------------------
.text:00000000000046B2                 align 20h
.text:00000000000046C0
.text:00000000000046C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046C0
.text:00000000000046C0
.text:00000000000046C0 atexit          proc near               ; CODE XREF: main+4A↑p
.text:00000000000046C0 ; __unwind {
.text:00000000000046C0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:00000000000046C7                 xor     esi, esi        ; obj
.text:00000000000046C9                 jmp     ___cxa_atexit
.text:00000000000046C9 ; } // starts at 46C0
.text:00000000000046C9 atexit          endp
.text:00000000000046C9
.text:00000000000046C9 _text           ends
.text:00000000000046C9
LOAD:00000000000046CE ; ===========================================================================
LOAD:00000000000046CE
LOAD:00000000000046CE ; Segment type: Pure code
LOAD:00000000000046CE ; Segment permissions: Read/Execute
LOAD:00000000000046CE LOAD            segment byte public 'CODE' use64
LOAD:00000000000046CE                 assume cs:LOAD
LOAD:00000000000046CE                 ;org 46CEh
LOAD:00000000000046CE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000046CE                 align 10h
LOAD:00000000000046CE LOAD            ends
LOAD:00000000000046CE
.fini:00000000000046D0 ; ===========================================================================
.fini:00000000000046D0
.fini:00000000000046D0 ; Segment type: Pure code
.fini:00000000000046D0 ; Segment permissions: Read/Execute
.fini:00000000000046D0 _fini           segment dword public 'CODE' use64
.fini:00000000000046D0                 assume cs:_fini
.fini:00000000000046D0                 ;org 46D0h
.fini:00000000000046D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00000000000046D0
.fini:00000000000046D0 ; =============== S U B R O U T I N E =======================================
.fini:00000000000046D0
.fini:00000000000046D0
.fini:00000000000046D0                 public _term_proc
.fini:00000000000046D0 _term_proc      proc near
.fini:00000000000046D0                 sub     rsp, 8          ; _fini
.fini:00000000000046D4                 add     rsp, 8
.fini:00000000000046D8                 retn
.fini:00000000000046D8 _term_proc      endp
.fini:00000000000046D8
.fini:00000000000046D8 _fini           ends
.fini:00000000000046D8
LOAD:00000000000046D9 ; ===========================================================================
LOAD:00000000000046D9
LOAD:00000000000046D9 ; Segment type: Pure code
LOAD:00000000000046D9 ; Segment permissions: Read/Execute
LOAD:00000000000046D9 LOAD            segment byte public 'CODE' use64
LOAD:00000000000046D9                 assume cs:LOAD
LOAD:00000000000046D9                 ;org 46D9h
LOAD:00000000000046D9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000046D9                 align 20h
LOAD:00000000000046D9 LOAD            ends
LOAD:00000000000046D9
.rodata:00000000000046E0 ; ===========================================================================
.rodata:00000000000046E0
.rodata:00000000000046E0 ; Segment type: Pure data
.rodata:00000000000046E0 ; Segment permissions: Read
.rodata:00000000000046E0 _rodata         segment align_32 public 'CONST' use64
.rodata:00000000000046E0                 assume cs:_rodata
.rodata:00000000000046E0                 ;org 46E0h
.rodata:00000000000046E0                 public _IO_stdin_used
.rodata:00000000000046E0 _IO_stdin_used  db    1
.rodata:00000000000046E1                 db    0
.rodata:00000000000046E2                 db    2
.rodata:00000000000046E3                 db    0
.rodata:00000000000046E4 aLogname        db 'logname',0          ; DATA XREF: main+6A↑o
.rodata:00000000000046E4                                         ; usage+E7↑o ...
.rodata:00000000000046EC ; const char aUsageSOption[]
.rodata:00000000000046EC aUsageSOption   db 'Usage: %s [OPTION]',0Ah,0
.rodata:00000000000046EC                                         ; DATA XREF: usage:loc_174D↑o
.rodata:0000000000004700 asc_4700        db '[',0                ; DATA XREF: usage+F3↑o
.rodata:0000000000004702 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+11A↑o
.rodata:0000000000004712 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000004712                                         ; DATA XREF: usage+14A↑o
.rodata:0000000000004712                                         ; usage+244↑o ...
.rodata:0000000000004728 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+15B↑o
.rodata:0000000000004732 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+167↑o
.rodata:0000000000004741 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+FA↑o
.rodata:000000000000474B aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+126↑o
.rodata:0000000000004755 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+13E↑o
.rodata:000000000000475F ; const char aSOnlineHelpS[]
.rodata:000000000000475F aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1B2↑o
.rodata:000000000000475F                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000004776 unk_4776        db  47h ; G             ; DATA XREF: main+63↑o
.rodata:0000000000004776                                         ; usage+1CE↑o ...
.rodata:0000000000004777                 db  4Eh ; N
.rodata:0000000000004778                 db  55h ; U
.rodata:0000000000004779                 db  20h
.rodata:000000000000477A ; const char domainname[]
.rodata:000000000000477A domainname      db 'coreutils',0        ; DATA XREF: main+2B↑o
.rodata:000000000000477A                                         ; main+37↑o ...
.rodata:0000000000004784 ; const char s2[]
.rodata:0000000000004784 s2              db 'en_',0              ; DATA XREF: usage+1F5↑o
.rodata:0000000000004784                                         ; usage+2B6↑o
.rodata:0000000000004788 ; const char aFullDocumentat[]
.rodata:0000000000004788 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000004788                                         ; DATA XREF: usage:loc_1901↑o
.rodata:0000000000004788                                         ; usage:loc_19BE↑o
.rodata:00000000000047A3 ; const char dirname[]
.rodata:00000000000047A3 dirname         db '/usr/local/share/locale',0
.rodata:00000000000047A3                                         ; DATA XREF: main+24↑o
.rodata:00000000000047BB aFixmeUnknown   db 'FIXME: unknown',0   ; DATA XREF: main+4F↑o
.rodata:00000000000047CA ; const char msgid[]
.rodata:00000000000047CA msgid           db 'extra operand %s',0 ; DATA XREF: main+BF↑o
.rodata:00000000000047DB ; const char aNoLoginName[]
.rodata:00000000000047DB aNoLoginName    db 'no login name',0    ; DATA XREF: main:loc_15B0↑o
.rodata:00000000000047E9                 align 10h
.rodata:00000000000047F0 ; const char aTrySHelpForMor[]
.rodata:00000000000047F0 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:00000000000047F0                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000004817                 align 8
.rodata:0000000000004818 ; const char aPrintTheNameOf[]
.rodata:0000000000004818 aPrintTheNameOf db 'Print the name of the current user.',0Ah
.rodata:0000000000004818                                         ; DATA XREF: usage+84↑o
.rodata:0000000000004818                 db 0Ah,0
.rodata:000000000000483E                 align 20h
.rodata:0000000000004840 ; const char aHelpDisplayThi[]
.rodata:0000000000004840 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000004840                                         ; DATA XREF: usage+A9↑o
.rodata:000000000000486D                 align 10h
.rodata:0000000000004870 ; const char aVersionOutputV[]
.rodata:0000000000004870 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000004870                                         ; DATA XREF: usage+CE↑o
.rodata:00000000000048A6                 align 8
.rodata:00000000000048A8 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:00000000000048A8                                         ; DATA XREF: usage+1C7↑o
.rodata:00000000000048A8                                         ; usage+22B↑o ...
.rodata:00000000000048D0 ; const char aReportAnyTrans[]
.rodata:00000000000048D0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:00000000000048D0                                         ; DATA XREF: usage+31F↑o
.rodata:00000000000048D0                 db 'am/>',0Ah,0
.rodata:0000000000004917                 align 8
.rodata:0000000000004918 ; const char aOrAvailableLoc[]
.rodata:0000000000004918 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000004918                                         ; DATA XREF: usage:loc_1946↑o
.rodata:000000000000494B a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000004950 ; const char aWriteError[]
.rodata:0000000000004950 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_1AA3↑o
.rodata:000000000000495C ; const char format[]
.rodata:000000000000495C format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:000000000000495C                                         ; close_stdout+8F↑o ...
.rodata:0000000000004963 ; const char shortopts[]
.rodata:0000000000004963 shortopts       db '+',0                ; DATA XREF: parse_long_options+B7↑o
.rodata:0000000000004963                                         ; parse_gnu_standard_options_only+72↑o
.rodata:0000000000004965 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:000000000000496A aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000206BE0↓o
.rodata:0000000000004972                 align 8
.rodata:0000000000004978 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000004978                                         ; DATA XREF: set_program_name+84↑o
.rodata:00000000000049B0 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:00000000000049B8 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:00000000000049BC unk_49BC        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:00000000000049BD                 db  80h
.rodata:00000000000049BE                 db  98h
.rodata:00000000000049BF                 db    0
.rodata:00000000000049C0 unk_49C0        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:00000000000049C1                 db  80h
.rodata:00000000000049C2                 db  99h
.rodata:00000000000049C3                 db    0
.rodata:00000000000049C4 unk_49C4        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:00000000000049C5                 db    7
.rodata:00000000000049C6                 db  65h ; e
.rodata:00000000000049C7                 db    0
.rodata:00000000000049C8 unk_49C8        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:00000000000049C9                 db 0AFh
.rodata:00000000000049CA                 db    0
.rodata:00000000000049CB unk_49CB        db  22h ; "             ; DATA XREF: gettext_quote:loc_1E50↑o
.rodata:00000000000049CB                                         ; quotearg_buffer_restyled:loc_2C0B↑o ...
.rodata:00000000000049CC                 db    0
.rodata:00000000000049CD ; const char asc_49CD[2]
.rodata:00000000000049CD asc_49CD        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:00000000000049CD                                         ; quotearg_buffer_restyled:loc_1FD3↑o ...
.rodata:00000000000049CF ; const char asc_49CF[2]
.rodata:00000000000049CF asc_49CF        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:00000000000049CF                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:00000000000049D1 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:00000000000049D9 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000206C28↓o
.rodata:00000000000049DF aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000206C30↓o
.rodata:00000000000049EC aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000206C38↓o
.rodata:00000000000049EC                                         ; .data.rel.ro:0000000000206C58↓o
.rodata:00000000000049F9 aShellEscapeAlw db 'shell-escape-always',0
.rodata:00000000000049F9                                         ; DATA XREF: .data.rel.ro:0000000000206C40↓o
.rodata:0000000000004A0D aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000206C48↓o
.rodata:0000000000004A0F aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000206C50↓o
.rodata:0000000000004A17 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000206C68↓o
.rodata:0000000000004A1F                 align 20h
.rodata:0000000000004A20 jpt_1FB1        dd offset loc_2D5A - 4A20h
.rodata:0000000000004A20                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000004A20                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000004A20                 dd offset loc_1FB3 - 4A20h ; jump table for switch statement
.rodata:0000000000004A20                 dd offset loc_2F88 - 4A20h
.rodata:0000000000004A20                 dd offset loc_2D94 - 4A20h
.rodata:0000000000004A20                 dd offset loc_2B84 - 4A20h
.rodata:0000000000004A20                 dd offset loc_2BE0 - 4A20h
.rodata:0000000000004A20                 dd offset loc_2C35 - 4A20h
.rodata:0000000000004A20                 dd offset loc_2C7A - 4A20h
.rodata:0000000000004A20                 dd offset loc_2CB4 - 4A20h
.rodata:0000000000004A20                 dd offset loc_2CB4 - 4A20h
.rodata:0000000000004A20                 dd offset loc_2CB4 - 4A20h
.rodata:0000000000004A4C jpt_210E        dd offset loc_2330 - 4A4Ch, offset def_210E - 4A4Ch, offset def_210E - 4A4Ch
.rodata:0000000000004A4C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000004A4C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000004A4C                 dd offset def_210E - 4A4Ch, offset def_210E - 4A4Ch, offset def_210E - 4A4Ch ; jump table for switch statement
.rodata:0000000000004A4C                 dd offset def_210E - 4A4Ch, offset loc_2370 - 4A4Ch, offset loc_2278 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2238 - 4A4Ch, offset loc_2400 - 4A4Ch, offset loc_23F0 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_23E0 - 4A4Ch, offset loc_23D0 - 4A4Ch, offset def_210E - 4A4Ch
.rodata:0000000000004A4C                 dd offset def_210E - 4A4Ch, offset def_210E - 4A4Ch, offset def_210E - 4A4Ch
.rodata:0000000000004A4C                 dd offset def_210E - 4A4Ch, offset def_210E - 4A4Ch, offset def_210E - 4A4Ch
.rodata:0000000000004A4C                 dd offset def_210E - 4A4Ch, offset def_210E - 4A4Ch, offset def_210E - 4A4Ch
.rodata:0000000000004A4C                 dd offset def_210E - 4A4Ch, offset def_210E - 4A4Ch, offset def_210E - 4A4Ch
.rodata:0000000000004A4C                 dd offset def_210E - 4A4Ch, offset def_210E - 4A4Ch, offset def_210E - 4A4Ch
.rodata:0000000000004A4C                 dd offset def_210E - 4A4Ch, offset def_210E - 4A4Ch, offset loc_23C0 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_23B0 - 4A4Ch, offset loc_23B0 - 4A4Ch, offset loc_2380 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_23B0 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_23B0 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2213 - 4A4Ch, offset loc_23B0 - 4A4Ch, offset loc_23B0 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_23B0 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_23B0 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_23B0 - 4A4Ch, offset loc_23B0 - 4A4Ch, offset loc_23B0 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_21E3 - 4A4Ch, offset def_210E - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_23B0 - 4A4Ch, offset loc_2288 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_23B0 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_23B0 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch, offset loc_2358 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2113 - 4A4Ch, offset loc_23B0 - 4A4Ch, offset loc_2113 - 4A4Ch
.rodata:0000000000004A4C                 dd offset loc_2380 - 4A4Ch
.rodata:0000000000004C48 jpt_249A        dd offset loc_2500 - 4C48h, offset def_249A - 4C48h, offset def_249A - 4C48h
.rodata:0000000000004C48                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000004C48                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000004C48                 dd offset def_249A - 4C48h, offset def_249A - 4C48h, offset def_249A - 4C48h ; jump table for switch statement
.rodata:0000000000004C48                 dd offset def_249A - 4C48h, offset loc_24F0 - 4C48h, offset loc_2640 - 4C48h
.rodata:0000000000004C48                 dd offset loc_2628 - 4C48h, offset loc_24D8 - 4C48h, offset loc_2618 - 4C48h
.rodata:0000000000004C48                 dd offset loc_24C0 - 4C48h, offset loc_2600 - 4C48h, offset def_249A - 4C48h
.rodata:0000000000004C48                 dd offset def_249A - 4C48h, offset def_249A - 4C48h, offset def_249A - 4C48h
.rodata:0000000000004C48                 dd offset def_249A - 4C48h, offset def_249A - 4C48h, offset def_249A - 4C48h
.rodata:0000000000004C48                 dd offset def_249A - 4C48h, offset def_249A - 4C48h, offset def_249A - 4C48h
.rodata:0000000000004C48                 dd offset def_249A - 4C48h, offset def_249A - 4C48h, offset def_249A - 4C48h
.rodata:0000000000004C48                 dd offset def_249A - 4C48h, offset def_249A - 4C48h, offset def_249A - 4C48h
.rodata:0000000000004C48                 dd offset def_249A - 4C48h, offset def_249A - 4C48h, offset loc_25E8 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25D0 - 4C48h, offset loc_25D0 - 4C48h, offset loc_25B8 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25D0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25D0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_2210 - 4C48h, offset loc_25D0 - 4C48h, offset loc_25D0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25D0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25D0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25D0 - 4C48h, offset loc_25D0 - 4C48h, offset loc_25D0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_21E0 - 4C48h, offset def_249A - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25D0 - 4C48h, offset loc_24A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25D0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25D0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h, offset loc_25A0 - 4C48h
.rodata:0000000000004C48                 dd offset loc_2110 - 4C48h, offset loc_25D0 - 4C48h, offset loc_2110 - 4C48h
.rodata:0000000000004C48                 dd offset loc_25B8 - 4C48h
.rodata:0000000000004E44                 align 20h
.rodata:0000000000004E60                 public quoting_style_vals
.rodata:0000000000004E60 quoting_style_vals db    0
.rodata:0000000000004E61                 db    0
.rodata:0000000000004E62                 db    0
.rodata:0000000000004E63                 db    0
.rodata:0000000000004E64                 db    1
.rodata:0000000000004E65                 db    0
.rodata:0000000000004E66                 db    0
.rodata:0000000000004E67                 db    0
.rodata:0000000000004E68                 db    2
.rodata:0000000000004E69                 db    0
.rodata:0000000000004E6A                 db    0
.rodata:0000000000004E6B                 db    0
.rodata:0000000000004E6C                 db    3
.rodata:0000000000004E6D                 db    0
.rodata:0000000000004E6E                 db    0
.rodata:0000000000004E6F                 db    0
.rodata:0000000000004E70                 db    4
.rodata:0000000000004E71                 db    0
.rodata:0000000000004E72                 db    0
.rodata:0000000000004E73                 db    0
.rodata:0000000000004E74                 db    5
.rodata:0000000000004E75                 db    0
.rodata:0000000000004E76                 db    0
.rodata:0000000000004E77                 db    0
.rodata:0000000000004E78                 db    6
.rodata:0000000000004E79                 db    0
.rodata:0000000000004E7A                 db    0
.rodata:0000000000004E7B                 db    0
.rodata:0000000000004E7C                 db    7
.rodata:0000000000004E7D                 db    0
.rodata:0000000000004E7E                 db    0
.rodata:0000000000004E7F                 db    0
.rodata:0000000000004E80                 db    8
.rodata:0000000000004E81                 db    0
.rodata:0000000000004E82                 db    0
.rodata:0000000000004E83                 db    0
.rodata:0000000000004E84                 db    9
.rodata:0000000000004E85                 db    0
.rodata:0000000000004E86                 db    0
.rodata:0000000000004E87                 db    0
.rodata:0000000000004E88 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000004E94 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000004E9B ; const char aC_0[]
.rodata:0000000000004E9B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_3AFC↑o
.rodata:0000000000004E9F ; const char aWrittenByS[]
.rodata:0000000000004E9F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000004E9F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000004EAF ; const char aWrittenBySAndS[]
.rodata:0000000000004EAF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000004EAF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000004EC6 ; const char aWrittenBySSAnd[]
.rodata:0000000000004EC6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000004EC6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000004EE2 ; const char aReportBugsToS[]
.rodata:0000000000004EE2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000004EE2                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000004EF7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000004EF7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000004F0D ; const char aSHomePageS[]
.rodata:0000000000004F0D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000004F0D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000004F21                 align 8
.rodata:0000000000004F28 ; const char aLicenseGplv3Gn[]
.rodata:0000000000004F28 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000004F28                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000004F28                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000004F28                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000004F28                 db '.',0Ah
.rodata:0000000000004F28                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000004F28                 db 0Ah,0
.rodata:0000000000004FF4                 align 8
.rodata:0000000000004FF8 ; const char aWrittenBySSSAn[]
.rodata:0000000000004FF8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000004FF8                                         ; DATA XREF: version_etc_arn:loc_3D50↑o
.rodata:0000000000004FF8                 db 'and %s.',0Ah,0
.rodata:0000000000005018 ; const char aWrittenBySSSSA[]
.rodata:0000000000005018 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005018                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000005018                 db '%s, and %s.',0Ah,0
.rodata:000000000000503C                 align 20h
.rodata:0000000000005040 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000005040 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005040                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000005040                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000005068 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000005068 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005068                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000005068                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000005094                 align 8
.rodata:0000000000005098 ; const char aWrittenBySSSSS[]
.rodata:0000000000005098 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005098                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000005098                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005098                 db 'and %s.',0Ah,0
.rodata:00000000000050C8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000050C8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000050C8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000050C8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000050C8                 db '%s, and %s.',0Ah,0
.rodata:00000000000050FC                 align 20h
.rodata:0000000000005100 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005100                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000005100                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005100                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000513C                 align 20h
.rodata:0000000000005140 ; const char aGeneralHelpUsi[]
.rodata:0000000000005140 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000005140                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000005140                 db 0
.rodata:0000000000005181                 align 8
.rodata:0000000000005188 jpt_3B64        dd offset loc_3BE6 - 5188h
.rodata:0000000000005188                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000005188                                         ; version_etc_arn+9D↑r
.rodata:0000000000005188                 dd offset loc_3C78 - 5188h ; jump table for switch statement
.rodata:0000000000005188                 dd offset loc_3CB8 - 5188h
.rodata:0000000000005188                 dd offset loc_3D00 - 5188h
.rodata:0000000000005188                 dd offset loc_3D50 - 5188h
.rodata:0000000000005188                 dd offset loc_3DA8 - 5188h
.rodata:0000000000005188                 dd offset loc_3DD8 - 5188h
.rodata:0000000000005188                 dd offset loc_3E40 - 5188h
.rodata:0000000000005188                 dd offset loc_3B70 - 5188h
.rodata:0000000000005188                 dd offset loc_3C20 - 5188h
.rodata:00000000000051B0                 align 20h
.rodata:00000000000051C0                 public version_etc_copyright
.rodata:00000000000051C0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000051C0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:00000000000051EF ; const char aMemoryExhauste[]
.rodata:00000000000051EF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000005200 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000005202 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_44C0↑o
.rodata:0000000000005208 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000005208                                         ; locale_charset:loc_4510↑o
.rodata:0000000000005208 _rodata         ends
.rodata:0000000000005208
LOAD:000000000000520E ; ===========================================================================
LOAD:000000000000520E
LOAD:000000000000520E ; Segment type: Pure code
LOAD:000000000000520E ; Segment permissions: Read/Execute
LOAD:000000000000520E LOAD            segment byte public 'CODE' use64
LOAD:000000000000520E                 assume cs:LOAD
LOAD:000000000000520E                 ;org 520Eh
LOAD:000000000000520E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000520E                 align 10h
LOAD:000000000000520E LOAD            ends
LOAD:000000000000520E
.eh_frame_hdr:0000000000005210 ; ===========================================================================
.eh_frame_hdr:0000000000005210
.eh_frame_hdr:0000000000005210 ; Segment type: Pure data
.eh_frame_hdr:0000000000005210 ; Segment permissions: Read
.eh_frame_hdr:0000000000005210 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000005210                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000005210                 ;org 5210h
.eh_frame_hdr:0000000000005210 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000005211                 db  1Bh
.eh_frame_hdr:0000000000005212                 db    3
.eh_frame_hdr:0000000000005213                 db  3Bh ; ;
.eh_frame_hdr:0000000000005214                 db  4Ch ; L
.eh_frame_hdr:0000000000005215                 db    2
.eh_frame_hdr:0000000000005216                 db    0
.eh_frame_hdr:0000000000005217                 db    0
.eh_frame_hdr:0000000000005218                 db  48h ; H
.eh_frame_hdr:0000000000005219                 db    0
.eh_frame_hdr:000000000000521A                 db    0
.eh_frame_hdr:000000000000521B                 db    0
.eh_frame_hdr:000000000000521C                 db    0
.eh_frame_hdr:000000000000521D                 db 0C0h
.eh_frame_hdr:000000000000521E                 db 0FFh
.eh_frame_hdr:000000000000521F                 db 0FFh
.eh_frame_hdr:0000000000005220                 db  98h
.eh_frame_hdr:0000000000005221                 db    2
.eh_frame_hdr:0000000000005222                 db    0
.eh_frame_hdr:0000000000005223                 db    0
.eh_frame_hdr:0000000000005224                 db 0A0h
.eh_frame_hdr:0000000000005225                 db 0C2h
.eh_frame_hdr:0000000000005226                 db 0FFh
.eh_frame_hdr:0000000000005227                 db 0FFh
.eh_frame_hdr:0000000000005228                 db 0C0h
.eh_frame_hdr:0000000000005229                 db    2
.eh_frame_hdr:000000000000522A                 db    0
.eh_frame_hdr:000000000000522B                 db    0
.eh_frame_hdr:000000000000522C                 db 0B0h
.eh_frame_hdr:000000000000522D                 db 0C2h
.eh_frame_hdr:000000000000522E                 db 0FFh
.eh_frame_hdr:000000000000522F                 db 0FFh
.eh_frame_hdr:0000000000005230                 db    4
.eh_frame_hdr:0000000000005231                 db    3
.eh_frame_hdr:0000000000005232                 db    0
.eh_frame_hdr:0000000000005233                 db    0
.eh_frame_hdr:0000000000005234                 db 0D0h
.eh_frame_hdr:0000000000005235                 db 0C3h
.eh_frame_hdr:0000000000005236                 db 0FFh
.eh_frame_hdr:0000000000005237                 db 0FFh
.eh_frame_hdr:0000000000005238                 db  68h ; h
.eh_frame_hdr:0000000000005239                 db    2
.eh_frame_hdr:000000000000523A                 db    0
.eh_frame_hdr:000000000000523B                 db    0
.eh_frame_hdr:000000000000523C                 db 0E0h
.eh_frame_hdr:000000000000523D                 db 0C4h
.eh_frame_hdr:000000000000523E                 db 0FFh
.eh_frame_hdr:000000000000523F                 db 0FFh
.eh_frame_hdr:0000000000005240                 db 0D8h
.eh_frame_hdr:0000000000005241                 db    2
.eh_frame_hdr:0000000000005242                 db    0
.eh_frame_hdr:0000000000005243                 db    0
.eh_frame_hdr:0000000000005244                 db  30h ; 0
.eh_frame_hdr:0000000000005245                 db 0C8h
.eh_frame_hdr:0000000000005246                 db 0FFh
.eh_frame_hdr:0000000000005247                 db 0FFh
.eh_frame_hdr:0000000000005248                 db  40h ; @
.eh_frame_hdr:0000000000005249                 db    3
.eh_frame_hdr:000000000000524A                 db    0
.eh_frame_hdr:000000000000524B                 db    0
.eh_frame_hdr:000000000000524C                 db  40h ; @
.eh_frame_hdr:000000000000524D                 db 0C8h
.eh_frame_hdr:000000000000524E                 db 0FFh
.eh_frame_hdr:000000000000524F                 db 0FFh
.eh_frame_hdr:0000000000005250                 db  54h ; T
.eh_frame_hdr:0000000000005251                 db    3
.eh_frame_hdr:0000000000005252                 db    0
.eh_frame_hdr:0000000000005253                 db    0
.eh_frame_hdr:0000000000005254                 db  50h ; P
.eh_frame_hdr:0000000000005255                 db 0C8h
.eh_frame_hdr:0000000000005256                 db 0FFh
.eh_frame_hdr:0000000000005257                 db 0FFh
.eh_frame_hdr:0000000000005258                 db  68h ; h
.eh_frame_hdr:0000000000005259                 db    3
.eh_frame_hdr:000000000000525A                 db    0
.eh_frame_hdr:000000000000525B                 db    0
.eh_frame_hdr:000000000000525C                 db    0
.eh_frame_hdr:000000000000525D                 db 0C9h
.eh_frame_hdr:000000000000525E                 db 0FFh
.eh_frame_hdr:000000000000525F                 db 0FFh
.eh_frame_hdr:0000000000005260                 db  98h
.eh_frame_hdr:0000000000005261                 db    3
.eh_frame_hdr:0000000000005262                 db    0
.eh_frame_hdr:0000000000005263                 db    0
.eh_frame_hdr:0000000000005264                 db  40h ; @
.eh_frame_hdr:0000000000005265                 db 0CAh
.eh_frame_hdr:0000000000005266                 db 0FFh
.eh_frame_hdr:0000000000005267                 db 0FFh
.eh_frame_hdr:0000000000005268                 db 0D4h
.eh_frame_hdr:0000000000005269                 db    3
.eh_frame_hdr:000000000000526A                 db    0
.eh_frame_hdr:000000000000526B                 db    0
.eh_frame_hdr:000000000000526C                 db  80h
.eh_frame_hdr:000000000000526D                 db 0CBh
.eh_frame_hdr:000000000000526E                 db 0FFh
.eh_frame_hdr:000000000000526F                 db 0FFh
.eh_frame_hdr:0000000000005270                 db  20h
.eh_frame_hdr:0000000000005271                 db    4
.eh_frame_hdr:0000000000005272                 db    0
.eh_frame_hdr:0000000000005273                 db    0
.eh_frame_hdr:0000000000005274                 db  20h
.eh_frame_hdr:0000000000005275                 db 0CCh
.eh_frame_hdr:0000000000005276                 db 0FFh
.eh_frame_hdr:0000000000005277                 db 0FFh
.eh_frame_hdr:0000000000005278                 db  40h ; @
.eh_frame_hdr:0000000000005279                 db    4
.eh_frame_hdr:000000000000527A                 db    0
.eh_frame_hdr:000000000000527B                 db    0
.eh_frame_hdr:000000000000527C                 db  10h
.eh_frame_hdr:000000000000527D                 db 0CDh
.eh_frame_hdr:000000000000527E                 db 0FFh
.eh_frame_hdr:000000000000527F                 db 0FFh
.eh_frame_hdr:0000000000005280                 db  84h
.eh_frame_hdr:0000000000005281                 db    4
.eh_frame_hdr:0000000000005282                 db    0
.eh_frame_hdr:0000000000005283                 db    0
.eh_frame_hdr:0000000000005284                 db  50h ; P
.eh_frame_hdr:0000000000005285                 db 0DFh
.eh_frame_hdr:0000000000005286                 db 0FFh
.eh_frame_hdr:0000000000005287                 db 0FFh
.eh_frame_hdr:0000000000005288                 db 0FCh
.eh_frame_hdr:0000000000005289                 db    4
.eh_frame_hdr:000000000000528A                 db    0
.eh_frame_hdr:000000000000528B                 db    0
.eh_frame_hdr:000000000000528C                 db    0
.eh_frame_hdr:000000000000528D                 db 0E1h
.eh_frame_hdr:000000000000528E                 db 0FFh
.eh_frame_hdr:000000000000528F                 db 0FFh
.eh_frame_hdr:0000000000005290                 db  68h ; h
.eh_frame_hdr:0000000000005291                 db    5
.eh_frame_hdr:0000000000005292                 db    0
.eh_frame_hdr:0000000000005293                 db    0
.eh_frame_hdr:0000000000005294                 db  40h ; @
.eh_frame_hdr:0000000000005295                 db 0E1h
.eh_frame_hdr:0000000000005296                 db 0FFh
.eh_frame_hdr:0000000000005297                 db 0FFh
.eh_frame_hdr:0000000000005298                 db  94h
.eh_frame_hdr:0000000000005299                 db    5
.eh_frame_hdr:000000000000529A                 db    0
.eh_frame_hdr:000000000000529B                 db    0
.eh_frame_hdr:000000000000529C                 db  60h ; `
.eh_frame_hdr:000000000000529D                 db 0E1h
.eh_frame_hdr:000000000000529E                 db 0FFh
.eh_frame_hdr:000000000000529F                 db 0FFh
.eh_frame_hdr:00000000000052A0                 db 0A8h
.eh_frame_hdr:00000000000052A1                 db    5
.eh_frame_hdr:00000000000052A2                 db    0
.eh_frame_hdr:00000000000052A3                 db    0
.eh_frame_hdr:00000000000052A4                 db  80h
.eh_frame_hdr:00000000000052A5                 db 0E1h
.eh_frame_hdr:00000000000052A6                 db 0FFh
.eh_frame_hdr:00000000000052A7                 db 0FFh
.eh_frame_hdr:00000000000052A8                 db 0BCh
.eh_frame_hdr:00000000000052A9                 db    5
.eh_frame_hdr:00000000000052AA                 db    0
.eh_frame_hdr:00000000000052AB                 db    0
.eh_frame_hdr:00000000000052AC                 db 0C0h
.eh_frame_hdr:00000000000052AD                 db 0E1h
.eh_frame_hdr:00000000000052AE                 db 0FFh
.eh_frame_hdr:00000000000052AF                 db 0FFh
.eh_frame_hdr:00000000000052B0                 db 0D0h
.eh_frame_hdr:00000000000052B1                 db    5
.eh_frame_hdr:00000000000052B2                 db    0
.eh_frame_hdr:00000000000052B3                 db    0
.eh_frame_hdr:00000000000052B4                 db 0E0h
.eh_frame_hdr:00000000000052B5                 db 0E1h
.eh_frame_hdr:00000000000052B6                 db 0FFh
.eh_frame_hdr:00000000000052B7                 db 0FFh
.eh_frame_hdr:00000000000052B8                 db 0E4h
.eh_frame_hdr:00000000000052B9                 db    5
.eh_frame_hdr:00000000000052BA                 db    0
.eh_frame_hdr:00000000000052BB                 db    0
.eh_frame_hdr:00000000000052BC                 db  10h
.eh_frame_hdr:00000000000052BD                 db 0E2h
.eh_frame_hdr:00000000000052BE                 db 0FFh
.eh_frame_hdr:00000000000052BF                 db 0FFh
.eh_frame_hdr:00000000000052C0                 db 0F8h
.eh_frame_hdr:00000000000052C1                 db    5
.eh_frame_hdr:00000000000052C2                 db    0
.eh_frame_hdr:00000000000052C3                 db    0
.eh_frame_hdr:00000000000052C4                 db  90h
.eh_frame_hdr:00000000000052C5                 db 0E2h
.eh_frame_hdr:00000000000052C6                 db 0FFh
.eh_frame_hdr:00000000000052C7                 db 0FFh
.eh_frame_hdr:00000000000052C8                 db  4Ch ; L
.eh_frame_hdr:00000000000052C9                 db    6
.eh_frame_hdr:00000000000052CA                 db    0
.eh_frame_hdr:00000000000052CB                 db    0
.eh_frame_hdr:00000000000052CC                 db  80h
.eh_frame_hdr:00000000000052CD                 db 0E3h
.eh_frame_hdr:00000000000052CE                 db 0FFh
.eh_frame_hdr:00000000000052CF                 db 0FFh
.eh_frame_hdr:00000000000052D0                 db 0B8h
.eh_frame_hdr:00000000000052D1                 db    6
.eh_frame_hdr:00000000000052D2                 db    0
.eh_frame_hdr:00000000000052D3                 db    0
.eh_frame_hdr:00000000000052D4                 db  90h
.eh_frame_hdr:00000000000052D5                 db 0E3h
.eh_frame_hdr:00000000000052D6                 db 0FFh
.eh_frame_hdr:00000000000052D7                 db 0FFh
.eh_frame_hdr:00000000000052D8                 db 0CCh
.eh_frame_hdr:00000000000052D9                 db    6
.eh_frame_hdr:00000000000052DA                 db    0
.eh_frame_hdr:00000000000052DB                 db    0
.eh_frame_hdr:00000000000052DC                 db  30h ; 0
.eh_frame_hdr:00000000000052DD                 db 0E4h
.eh_frame_hdr:00000000000052DE                 db 0FFh
.eh_frame_hdr:00000000000052DF                 db 0FFh
.eh_frame_hdr:00000000000052E0                 db 0F8h
.eh_frame_hdr:00000000000052E1                 db    6
.eh_frame_hdr:00000000000052E2                 db    0
.eh_frame_hdr:00000000000052E3                 db    0
.eh_frame_hdr:00000000000052E4                 db  50h ; P
.eh_frame_hdr:00000000000052E5                 db 0E4h
.eh_frame_hdr:00000000000052E6                 db 0FFh
.eh_frame_hdr:00000000000052E7                 db 0FFh
.eh_frame_hdr:00000000000052E8                 db  0Ch
.eh_frame_hdr:00000000000052E9                 db    7
.eh_frame_hdr:00000000000052EA                 db    0
.eh_frame_hdr:00000000000052EB                 db    0
.eh_frame_hdr:00000000000052EC                 db  60h ; `
.eh_frame_hdr:00000000000052ED                 db 0E4h
.eh_frame_hdr:00000000000052EE                 db 0FFh
.eh_frame_hdr:00000000000052EF                 db 0FFh
.eh_frame_hdr:00000000000052F0                 db  20h
.eh_frame_hdr:00000000000052F1                 db    7
.eh_frame_hdr:00000000000052F2                 db    0
.eh_frame_hdr:00000000000052F3                 db    0
.eh_frame_hdr:00000000000052F4                 db  80h
.eh_frame_hdr:00000000000052F5                 db 0E4h
.eh_frame_hdr:00000000000052F6                 db 0FFh
.eh_frame_hdr:00000000000052F7                 db 0FFh
.eh_frame_hdr:00000000000052F8                 db  34h ; 4
.eh_frame_hdr:00000000000052F9                 db    7
.eh_frame_hdr:00000000000052FA                 db    0
.eh_frame_hdr:00000000000052FB                 db    0
.eh_frame_hdr:00000000000052FC                 db 0A0h
.eh_frame_hdr:00000000000052FD                 db 0E4h
.eh_frame_hdr:00000000000052FE                 db 0FFh
.eh_frame_hdr:00000000000052FF                 db 0FFh
.eh_frame_hdr:0000000000005300                 db  48h ; H
.eh_frame_hdr:0000000000005301                 db    7
.eh_frame_hdr:0000000000005302                 db    0
.eh_frame_hdr:0000000000005303                 db    0
.eh_frame_hdr:0000000000005304                 db  30h ; 0
.eh_frame_hdr:0000000000005305                 db 0E5h
.eh_frame_hdr:0000000000005306                 db 0FFh
.eh_frame_hdr:0000000000005307                 db 0FFh
.eh_frame_hdr:0000000000005308                 db  64h ; d
.eh_frame_hdr:0000000000005309                 db    7
.eh_frame_hdr:000000000000530A                 db    0
.eh_frame_hdr:000000000000530B                 db    0
.eh_frame_hdr:000000000000530C                 db 0C0h
.eh_frame_hdr:000000000000530D                 db 0E5h
.eh_frame_hdr:000000000000530E                 db 0FFh
.eh_frame_hdr:000000000000530F                 db 0FFh
.eh_frame_hdr:0000000000005310                 db  80h
.eh_frame_hdr:0000000000005311                 db    7
.eh_frame_hdr:0000000000005312                 db    0
.eh_frame_hdr:0000000000005313                 db    0
.eh_frame_hdr:0000000000005314                 db 0D0h
.eh_frame_hdr:0000000000005315                 db 0E5h
.eh_frame_hdr:0000000000005316                 db 0FFh
.eh_frame_hdr:0000000000005317                 db 0FFh
.eh_frame_hdr:0000000000005318                 db  94h
.eh_frame_hdr:0000000000005319                 db    7
.eh_frame_hdr:000000000000531A                 db    0
.eh_frame_hdr:000000000000531B                 db    0
.eh_frame_hdr:000000000000531C                 db 0E0h
.eh_frame_hdr:000000000000531D                 db 0E5h
.eh_frame_hdr:000000000000531E                 db 0FFh
.eh_frame_hdr:000000000000531F                 db 0FFh
.eh_frame_hdr:0000000000005320                 db 0A8h
.eh_frame_hdr:0000000000005321                 db    7
.eh_frame_hdr:0000000000005322                 db    0
.eh_frame_hdr:0000000000005323                 db    0
.eh_frame_hdr:0000000000005324                 db  80h
.eh_frame_hdr:0000000000005325                 db 0E6h
.eh_frame_hdr:0000000000005326                 db 0FFh
.eh_frame_hdr:0000000000005327                 db 0FFh
.eh_frame_hdr:0000000000005328                 db 0C4h
.eh_frame_hdr:0000000000005329                 db    7
.eh_frame_hdr:000000000000532A                 db    0
.eh_frame_hdr:000000000000532B                 db    0
.eh_frame_hdr:000000000000532C                 db  90h
.eh_frame_hdr:000000000000532D                 db 0E6h
.eh_frame_hdr:000000000000532E                 db 0FFh
.eh_frame_hdr:000000000000532F                 db 0FFh
.eh_frame_hdr:0000000000005330                 db 0D8h
.eh_frame_hdr:0000000000005331                 db    7
.eh_frame_hdr:0000000000005332                 db    0
.eh_frame_hdr:0000000000005333                 db    0
.eh_frame_hdr:0000000000005334                 db 0B0h
.eh_frame_hdr:0000000000005335                 db 0E6h
.eh_frame_hdr:0000000000005336                 db 0FFh
.eh_frame_hdr:0000000000005337                 db 0FFh
.eh_frame_hdr:0000000000005338                 db 0ECh
.eh_frame_hdr:0000000000005339                 db    7
.eh_frame_hdr:000000000000533A                 db    0
.eh_frame_hdr:000000000000533B                 db    0
.eh_frame_hdr:000000000000533C                 db 0C0h
.eh_frame_hdr:000000000000533D                 db 0E6h
.eh_frame_hdr:000000000000533E                 db 0FFh
.eh_frame_hdr:000000000000533F                 db 0FFh
.eh_frame_hdr:0000000000005340                 db    0
.eh_frame_hdr:0000000000005341                 db    8
.eh_frame_hdr:0000000000005342                 db    0
.eh_frame_hdr:0000000000005343                 db    0
.eh_frame_hdr:0000000000005344                 db  50h ; P
.eh_frame_hdr:0000000000005345                 db 0E7h
.eh_frame_hdr:0000000000005346                 db 0FFh
.eh_frame_hdr:0000000000005347                 db 0FFh
.eh_frame_hdr:0000000000005348                 db  1Ch
.eh_frame_hdr:0000000000005349                 db    8
.eh_frame_hdr:000000000000534A                 db    0
.eh_frame_hdr:000000000000534B                 db    0
.eh_frame_hdr:000000000000534C                 db 0F0h
.eh_frame_hdr:000000000000534D                 db 0E7h
.eh_frame_hdr:000000000000534E                 db 0FFh
.eh_frame_hdr:000000000000534F                 db 0FFh
.eh_frame_hdr:0000000000005350                 db  38h ; 8
.eh_frame_hdr:0000000000005351                 db    8
.eh_frame_hdr:0000000000005352                 db    0
.eh_frame_hdr:0000000000005353                 db    0
.eh_frame_hdr:0000000000005354                 db    0
.eh_frame_hdr:0000000000005355                 db 0E8h
.eh_frame_hdr:0000000000005356                 db 0FFh
.eh_frame_hdr:0000000000005357                 db 0FFh
.eh_frame_hdr:0000000000005358                 db  4Ch ; L
.eh_frame_hdr:0000000000005359                 db    8
.eh_frame_hdr:000000000000535A                 db    0
.eh_frame_hdr:000000000000535B                 db    0
.eh_frame_hdr:000000000000535C                 db  20h
.eh_frame_hdr:000000000000535D                 db 0E8h
.eh_frame_hdr:000000000000535E                 db 0FFh
.eh_frame_hdr:000000000000535F                 db 0FFh
.eh_frame_hdr:0000000000005360                 db  60h ; `
.eh_frame_hdr:0000000000005361                 db    8
.eh_frame_hdr:0000000000005362                 db    0
.eh_frame_hdr:0000000000005363                 db    0
.eh_frame_hdr:0000000000005364                 db  40h ; @
.eh_frame_hdr:0000000000005365                 db 0E8h
.eh_frame_hdr:0000000000005366                 db 0FFh
.eh_frame_hdr:0000000000005367                 db 0FFh
.eh_frame_hdr:0000000000005368                 db  74h ; t
.eh_frame_hdr:0000000000005369                 db    8
.eh_frame_hdr:000000000000536A                 db    0
.eh_frame_hdr:000000000000536B                 db    0
.eh_frame_hdr:000000000000536C                 db  50h ; P
.eh_frame_hdr:000000000000536D                 db 0E8h
.eh_frame_hdr:000000000000536E                 db 0FFh
.eh_frame_hdr:000000000000536F                 db 0FFh
.eh_frame_hdr:0000000000005370                 db  88h
.eh_frame_hdr:0000000000005371                 db    8
.eh_frame_hdr:0000000000005372                 db    0
.eh_frame_hdr:0000000000005373                 db    0
.eh_frame_hdr:0000000000005374                 db  70h ; p
.eh_frame_hdr:0000000000005375                 db 0E8h
.eh_frame_hdr:0000000000005376                 db 0FFh
.eh_frame_hdr:0000000000005377                 db 0FFh
.eh_frame_hdr:0000000000005378                 db  9Ch
.eh_frame_hdr:0000000000005379                 db    8
.eh_frame_hdr:000000000000537A                 db    0
.eh_frame_hdr:000000000000537B                 db    0
.eh_frame_hdr:000000000000537C                 db  90h
.eh_frame_hdr:000000000000537D                 db 0E8h
.eh_frame_hdr:000000000000537E                 db 0FFh
.eh_frame_hdr:000000000000537F                 db 0FFh
.eh_frame_hdr:0000000000005380                 db 0B0h
.eh_frame_hdr:0000000000005381                 db    8
.eh_frame_hdr:0000000000005382                 db    0
.eh_frame_hdr:0000000000005383                 db    0
.eh_frame_hdr:0000000000005384                 db 0B0h
.eh_frame_hdr:0000000000005385                 db 0E8h
.eh_frame_hdr:0000000000005386                 db 0FFh
.eh_frame_hdr:0000000000005387                 db 0FFh
.eh_frame_hdr:0000000000005388                 db 0C8h
.eh_frame_hdr:0000000000005389                 db    8
.eh_frame_hdr:000000000000538A                 db    0
.eh_frame_hdr:000000000000538B                 db    0
.eh_frame_hdr:000000000000538C                 db 0D0h
.eh_frame_hdr:000000000000538D                 db 0ECh
.eh_frame_hdr:000000000000538E                 db 0FFh
.eh_frame_hdr:000000000000538F                 db 0FFh
.eh_frame_hdr:0000000000005390                 db 0DCh
.eh_frame_hdr:0000000000005391                 db    9
.eh_frame_hdr:0000000000005392                 db    0
.eh_frame_hdr:0000000000005393                 db    0
.eh_frame_hdr:0000000000005394                 db 0F0h
.eh_frame_hdr:0000000000005395                 db 0ECh
.eh_frame_hdr:0000000000005396                 db 0FFh
.eh_frame_hdr:0000000000005397                 db 0FFh
.eh_frame_hdr:0000000000005398                 db 0F0h
.eh_frame_hdr:0000000000005399                 db    9
.eh_frame_hdr:000000000000539A                 db    0
.eh_frame_hdr:000000000000539B                 db    0
.eh_frame_hdr:000000000000539C                 db  70h ; p
.eh_frame_hdr:000000000000539D                 db 0EDh
.eh_frame_hdr:000000000000539E                 db 0FFh
.eh_frame_hdr:000000000000539F                 db 0FFh
.eh_frame_hdr:00000000000053A0                 db  0Ch
.eh_frame_hdr:00000000000053A1                 db  0Ah
.eh_frame_hdr:00000000000053A2                 db    0
.eh_frame_hdr:00000000000053A3                 db    0
.eh_frame_hdr:00000000000053A4                 db  50h ; P
.eh_frame_hdr:00000000000053A5                 db 0EEh
.eh_frame_hdr:00000000000053A6                 db 0FFh
.eh_frame_hdr:00000000000053A7                 db 0FFh
.eh_frame_hdr:00000000000053A8                 db  38h ; 8
.eh_frame_hdr:00000000000053A9                 db  0Ah
.eh_frame_hdr:00000000000053AA                 db    0
.eh_frame_hdr:00000000000053AB                 db    0
.eh_frame_hdr:00000000000053AC                 db 0D0h
.eh_frame_hdr:00000000000053AD                 db 0EEh
.eh_frame_hdr:00000000000053AE                 db 0FFh
.eh_frame_hdr:00000000000053AF                 db 0FFh
.eh_frame_hdr:00000000000053B0                 db  58h ; X
.eh_frame_hdr:00000000000053B1                 db  0Ah
.eh_frame_hdr:00000000000053B2                 db    0
.eh_frame_hdr:00000000000053B3                 db    0
.eh_frame_hdr:00000000000053B4                 db 0F0h
.eh_frame_hdr:00000000000053B5                 db 0EEh
.eh_frame_hdr:00000000000053B6                 db 0FFh
.eh_frame_hdr:00000000000053B7                 db 0FFh
.eh_frame_hdr:00000000000053B8                 db  74h ; t
.eh_frame_hdr:00000000000053B9                 db  0Ah
.eh_frame_hdr:00000000000053BA                 db    0
.eh_frame_hdr:00000000000053BB                 db    0
.eh_frame_hdr:00000000000053BC                 db  20h
.eh_frame_hdr:00000000000053BD                 db 0EFh
.eh_frame_hdr:00000000000053BE                 db 0FFh
.eh_frame_hdr:00000000000053BF                 db 0FFh
.eh_frame_hdr:00000000000053C0                 db  88h
.eh_frame_hdr:00000000000053C1                 db  0Ah
.eh_frame_hdr:00000000000053C2                 db    0
.eh_frame_hdr:00000000000053C3                 db    0
.eh_frame_hdr:00000000000053C4                 db  30h ; 0
.eh_frame_hdr:00000000000053C5                 db 0EFh
.eh_frame_hdr:00000000000053C6                 db 0FFh
.eh_frame_hdr:00000000000053C7                 db 0FFh
.eh_frame_hdr:00000000000053C8                 db  9Ch
.eh_frame_hdr:00000000000053C9                 db  0Ah
.eh_frame_hdr:00000000000053CA                 db    0
.eh_frame_hdr:00000000000053CB                 db    0
.eh_frame_hdr:00000000000053CC                 db  70h ; p
.eh_frame_hdr:00000000000053CD                 db 0EFh
.eh_frame_hdr:00000000000053CE                 db 0FFh
.eh_frame_hdr:00000000000053CF                 db 0FFh
.eh_frame_hdr:00000000000053D0                 db 0C0h
.eh_frame_hdr:00000000000053D1                 db  0Ah
.eh_frame_hdr:00000000000053D2                 db    0
.eh_frame_hdr:00000000000053D3                 db    0
.eh_frame_hdr:00000000000053D4                 db 0A0h
.eh_frame_hdr:00000000000053D5                 db 0EFh
.eh_frame_hdr:00000000000053D6                 db 0FFh
.eh_frame_hdr:00000000000053D7                 db 0FFh
.eh_frame_hdr:00000000000053D8                 db 0D4h
.eh_frame_hdr:00000000000053D9                 db  0Ah
.eh_frame_hdr:00000000000053DA                 db    0
.eh_frame_hdr:00000000000053DB                 db    0
.eh_frame_hdr:00000000000053DC                 db  30h ; 0
.eh_frame_hdr:00000000000053DD                 db 0F0h
.eh_frame_hdr:00000000000053DE                 db 0FFh
.eh_frame_hdr:00000000000053DF                 db 0FFh
.eh_frame_hdr:00000000000053E0                 db 0ECh
.eh_frame_hdr:00000000000053E1                 db  0Ah
.eh_frame_hdr:00000000000053E2                 db    0
.eh_frame_hdr:00000000000053E3                 db    0
.eh_frame_hdr:00000000000053E4                 db  80h
.eh_frame_hdr:00000000000053E5                 db 0F0h
.eh_frame_hdr:00000000000053E6                 db 0FFh
.eh_frame_hdr:00000000000053E7                 db 0FFh
.eh_frame_hdr:00000000000053E8                 db    4
.eh_frame_hdr:00000000000053E9                 db  0Bh
.eh_frame_hdr:00000000000053EA                 db    0
.eh_frame_hdr:00000000000053EB                 db    0
.eh_frame_hdr:00000000000053EC                 db 0A0h
.eh_frame_hdr:00000000000053ED                 db 0F0h
.eh_frame_hdr:00000000000053EE                 db 0FFh
.eh_frame_hdr:00000000000053EF                 db 0FFh
.eh_frame_hdr:00000000000053F0                 db  20h
.eh_frame_hdr:00000000000053F1                 db  0Bh
.eh_frame_hdr:00000000000053F2                 db    0
.eh_frame_hdr:00000000000053F3                 db    0
.eh_frame_hdr:00000000000053F4                 db 0D0h
.eh_frame_hdr:00000000000053F5                 db 0F0h
.eh_frame_hdr:00000000000053F6                 db 0FFh
.eh_frame_hdr:00000000000053F7                 db 0FFh
.eh_frame_hdr:00000000000053F8                 db  3Ch ; <
.eh_frame_hdr:00000000000053F9                 db  0Bh
.eh_frame_hdr:00000000000053FA                 db    0
.eh_frame_hdr:00000000000053FB                 db    0
.eh_frame_hdr:00000000000053FC                 db    0
.eh_frame_hdr:00000000000053FD                 db 0F1h
.eh_frame_hdr:00000000000053FE                 db 0FFh
.eh_frame_hdr:00000000000053FF                 db 0FFh
.eh_frame_hdr:0000000000005400                 db  64h ; d
.eh_frame_hdr:0000000000005401                 db  0Bh
.eh_frame_hdr:0000000000005402                 db    0
.eh_frame_hdr:0000000000005403                 db    0
.eh_frame_hdr:0000000000005404                 db  20h
.eh_frame_hdr:0000000000005405                 db 0F1h
.eh_frame_hdr:0000000000005406                 db 0FFh
.eh_frame_hdr:0000000000005407                 db 0FFh
.eh_frame_hdr:0000000000005408                 db  80h
.eh_frame_hdr:0000000000005409                 db  0Bh
.eh_frame_hdr:000000000000540A                 db    0
.eh_frame_hdr:000000000000540B                 db    0
.eh_frame_hdr:000000000000540C                 db  60h ; `
.eh_frame_hdr:000000000000540D                 db 0F1h
.eh_frame_hdr:000000000000540E                 db 0FFh
.eh_frame_hdr:000000000000540F                 db 0FFh
.eh_frame_hdr:0000000000005410                 db  98h
.eh_frame_hdr:0000000000005411                 db  0Bh
.eh_frame_hdr:0000000000005412                 db    0
.eh_frame_hdr:0000000000005413                 db    0
.eh_frame_hdr:0000000000005414                 db 0F0h
.eh_frame_hdr:0000000000005415                 db 0F1h
.eh_frame_hdr:0000000000005416                 db 0FFh
.eh_frame_hdr:0000000000005417                 db 0FFh
.eh_frame_hdr:0000000000005418                 db 0D8h
.eh_frame_hdr:0000000000005419                 db  0Bh
.eh_frame_hdr:000000000000541A                 db    0
.eh_frame_hdr:000000000000541B                 db    0
.eh_frame_hdr:000000000000541C                 db  70h ; p
.eh_frame_hdr:000000000000541D                 db 0F2h
.eh_frame_hdr:000000000000541E                 db 0FFh
.eh_frame_hdr:000000000000541F                 db 0FFh
.eh_frame_hdr:0000000000005420                 db  28h ; (
.eh_frame_hdr:0000000000005421                 db  0Ch
.eh_frame_hdr:0000000000005422                 db    0
.eh_frame_hdr:0000000000005423                 db    0
.eh_frame_hdr:0000000000005424                 db 0D0h
.eh_frame_hdr:0000000000005425                 db 0F2h
.eh_frame_hdr:0000000000005426                 db 0FFh
.eh_frame_hdr:0000000000005427                 db 0FFh
.eh_frame_hdr:0000000000005428                 db  48h ; H
.eh_frame_hdr:0000000000005429                 db  0Ch
.eh_frame_hdr:000000000000542A                 db    0
.eh_frame_hdr:000000000000542B                 db    0
.eh_frame_hdr:000000000000542C                 db  10h
.eh_frame_hdr:000000000000542D                 db 0F3h
.eh_frame_hdr:000000000000542E                 db 0FFh
.eh_frame_hdr:000000000000542F                 db 0FFh
.eh_frame_hdr:0000000000005430                 db  68h ; h
.eh_frame_hdr:0000000000005431                 db  0Ch
.eh_frame_hdr:0000000000005432                 db    0
.eh_frame_hdr:0000000000005433                 db    0
.eh_frame_hdr:0000000000005434                 db  90h
.eh_frame_hdr:0000000000005435                 db 0F3h
.eh_frame_hdr:0000000000005436                 db 0FFh
.eh_frame_hdr:0000000000005437                 db 0FFh
.eh_frame_hdr:0000000000005438                 db 0A0h
.eh_frame_hdr:0000000000005439                 db  0Ch
.eh_frame_hdr:000000000000543A                 db    0
.eh_frame_hdr:000000000000543B                 db    0
.eh_frame_hdr:000000000000543C                 db 0D0h
.eh_frame_hdr:000000000000543D                 db 0F3h
.eh_frame_hdr:000000000000543E                 db 0FFh
.eh_frame_hdr:000000000000543F                 db 0FFh
.eh_frame_hdr:0000000000005440                 db 0C0h
.eh_frame_hdr:0000000000005441                 db  0Ch
.eh_frame_hdr:0000000000005442                 db    0
.eh_frame_hdr:0000000000005443                 db    0
.eh_frame_hdr:0000000000005444                 db  30h ; 0
.eh_frame_hdr:0000000000005445                 db 0F4h
.eh_frame_hdr:0000000000005446                 db 0FFh
.eh_frame_hdr:0000000000005447                 db 0FFh
.eh_frame_hdr:0000000000005448                 db 0F0h
.eh_frame_hdr:0000000000005449                 db  0Ch
.eh_frame_hdr:000000000000544A                 db    0
.eh_frame_hdr:000000000000544B                 db    0
.eh_frame_hdr:000000000000544C                 db 0A0h
.eh_frame_hdr:000000000000544D                 db 0F4h
.eh_frame_hdr:000000000000544E                 db 0FFh
.eh_frame_hdr:000000000000544F                 db 0FFh
.eh_frame_hdr:0000000000005450                 db  38h ; 8
.eh_frame_hdr:0000000000005451                 db  0Dh
.eh_frame_hdr:0000000000005452                 db    0
.eh_frame_hdr:0000000000005453                 db    0
.eh_frame_hdr:0000000000005454                 db 0B0h
.eh_frame_hdr:0000000000005455                 db 0F4h
.eh_frame_hdr:0000000000005456                 db 0FFh
.eh_frame_hdr:0000000000005457                 db 0FFh
.eh_frame_hdr:0000000000005458                 db  50h ; P
.eh_frame_hdr:0000000000005459                 db  0Dh
.eh_frame_hdr:000000000000545A                 db    0
.eh_frame_hdr:000000000000545B                 db    0
.eh_frame_hdr:000000000000545B _eh_frame_hdr   ends
.eh_frame_hdr:000000000000545B
LOAD:000000000000545C ; ===========================================================================
LOAD:000000000000545C
LOAD:000000000000545C ; Segment type: Pure code
LOAD:000000000000545C ; Segment permissions: Read/Execute
LOAD:000000000000545C LOAD            segment byte public 'CODE' use64
LOAD:000000000000545C                 assume cs:LOAD
LOAD:000000000000545C                 ;org 545Ch
LOAD:000000000000545C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000545C                 align 20h
LOAD:000000000000545C LOAD            ends
LOAD:000000000000545C
.eh_frame:0000000000005460 ; ===========================================================================
.eh_frame:0000000000005460
.eh_frame:0000000000005460 ; Segment type: Pure data
.eh_frame:0000000000005460 ; Segment permissions: Read
.eh_frame:0000000000005460 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000005460                 assume cs:_eh_frame
.eh_frame:0000000000005460                 ;org 5460h
.eh_frame:0000000000005460                 db  14h
.eh_frame:0000000000005461                 db    0
.eh_frame:0000000000005462                 db    0
.eh_frame:0000000000005463                 db    0
.eh_frame:0000000000005464                 db    0
.eh_frame:0000000000005465                 db    0
.eh_frame:0000000000005466                 db    0
.eh_frame:0000000000005467                 db    0
.eh_frame:0000000000005468                 db    1
.eh_frame:0000000000005469                 db  7Ah ; z
.eh_frame:000000000000546A                 db  52h ; R
.eh_frame:000000000000546B                 db    0
.eh_frame:000000000000546C                 db    1
.eh_frame:000000000000546D                 db  78h ; x
.eh_frame:000000000000546E                 db  10h
.eh_frame:000000000000546F                 db    1
.eh_frame:0000000000005470                 db  1Bh
.eh_frame:0000000000005471                 db  0Ch
.eh_frame:0000000000005472                 db    7
.eh_frame:0000000000005473                 db    8
.eh_frame:0000000000005474                 db  90h
.eh_frame:0000000000005475                 db    1
.eh_frame:0000000000005476                 db    7
.eh_frame:0000000000005477                 db  10h
.eh_frame:0000000000005478                 db  14h
.eh_frame:0000000000005479                 db    0
.eh_frame:000000000000547A                 db    0
.eh_frame:000000000000547B                 db    0
.eh_frame:000000000000547C                 db  1Ch
.eh_frame:000000000000547D                 db    0
.eh_frame:000000000000547E                 db    0
.eh_frame:000000000000547F                 db    0
.eh_frame:0000000000005480                 db  60h ; `
.eh_frame:0000000000005481                 db 0C1h
.eh_frame:0000000000005482                 db 0FFh
.eh_frame:0000000000005483                 db 0FFh
.eh_frame:0000000000005484                 db  2Bh ; +
.eh_frame:0000000000005485                 db    0
.eh_frame:0000000000005486                 db    0
.eh_frame:0000000000005487                 db    0
.eh_frame:0000000000005488                 db    0
.eh_frame:0000000000005489                 db    0
.eh_frame:000000000000548A                 db    0
.eh_frame:000000000000548B                 db    0
.eh_frame:000000000000548C                 db    0
.eh_frame:000000000000548D                 db    0
.eh_frame:000000000000548E                 db    0
.eh_frame:000000000000548F                 db    0
.eh_frame:0000000000005490                 db  14h
.eh_frame:0000000000005491                 db    0
.eh_frame:0000000000005492                 db    0
.eh_frame:0000000000005493                 db    0
.eh_frame:0000000000005494                 db    0
.eh_frame:0000000000005495                 db    0
.eh_frame:0000000000005496                 db    0
.eh_frame:0000000000005497                 db    0
.eh_frame:0000000000005498                 db    1
.eh_frame:0000000000005499                 db  7Ah ; z
.eh_frame:000000000000549A                 db  52h ; R
.eh_frame:000000000000549B                 db    0
.eh_frame:000000000000549C                 db    1
.eh_frame:000000000000549D                 db  78h ; x
.eh_frame:000000000000549E                 db  10h
.eh_frame:000000000000549F                 db    1
.eh_frame:00000000000054A0                 db  1Bh
.eh_frame:00000000000054A1                 db  0Ch
.eh_frame:00000000000054A2                 db    7
.eh_frame:00000000000054A3                 db    8
.eh_frame:00000000000054A4                 db  90h
.eh_frame:00000000000054A5                 db    1
.eh_frame:00000000000054A6                 db    0
.eh_frame:00000000000054A7                 db    0
.eh_frame:00000000000054A8                 db  24h ; $
.eh_frame:00000000000054A9                 db    0
.eh_frame:00000000000054AA                 db    0
.eh_frame:00000000000054AB                 db    0
.eh_frame:00000000000054AC                 db  1Ch
.eh_frame:00000000000054AD                 db    0
.eh_frame:00000000000054AE                 db    0
.eh_frame:00000000000054AF                 db    0
.eh_frame:00000000000054B0                 db  60h ; `
.eh_frame:00000000000054B1                 db 0BDh
.eh_frame:00000000000054B2                 db 0FFh
.eh_frame:00000000000054B3                 db 0FFh
.eh_frame:00000000000054B4                 db 0A0h
.eh_frame:00000000000054B5                 db    2
.eh_frame:00000000000054B6                 db    0
.eh_frame:00000000000054B7                 db    0
.eh_frame:00000000000054B8                 db    0
.eh_frame:00000000000054B9                 db  0Eh
.eh_frame:00000000000054BA                 db  10h
.eh_frame:00000000000054BB                 db  46h ; F
.eh_frame:00000000000054BC                 db  0Eh
.eh_frame:00000000000054BD                 db  18h
.eh_frame:00000000000054BE                 db  4Ah ; J
.eh_frame:00000000000054BF                 db  0Fh
.eh_frame:00000000000054C0                 db  0Bh
.eh_frame:00000000000054C1                 db  77h ; w
.eh_frame:00000000000054C2                 db    8
.eh_frame:00000000000054C3                 db  80h
.eh_frame:00000000000054C4                 db    0
.eh_frame:00000000000054C5                 db  3Fh ; ?
.eh_frame:00000000000054C6                 db  1Ah
.eh_frame:00000000000054C7                 db  3Bh ; ;
.eh_frame:00000000000054C8                 db  2Ah ; *
.eh_frame:00000000000054C9                 db  33h ; 3
.eh_frame:00000000000054CA                 db  24h ; $
.eh_frame:00000000000054CB                 db  22h ; "
.eh_frame:00000000000054CC                 db    0
.eh_frame:00000000000054CD                 db    0
.eh_frame:00000000000054CE                 db    0
.eh_frame:00000000000054CF                 db    0
.eh_frame:00000000000054D0                 db  14h
.eh_frame:00000000000054D1                 db    0
.eh_frame:00000000000054D2                 db    0
.eh_frame:00000000000054D3                 db    0
.eh_frame:00000000000054D4                 db  44h ; D
.eh_frame:00000000000054D5                 db    0
.eh_frame:00000000000054D6                 db    0
.eh_frame:00000000000054D7                 db    0
.eh_frame:00000000000054D8                 db 0D8h
.eh_frame:00000000000054D9                 db 0BFh
.eh_frame:00000000000054DA                 db 0FFh
.eh_frame:00000000000054DB                 db 0FFh
.eh_frame:00000000000054DC                 db    8
.eh_frame:00000000000054DD                 db    0
.eh_frame:00000000000054DE                 db    0
.eh_frame:00000000000054DF                 db    0
.eh_frame:00000000000054E0                 db    0
.eh_frame:00000000000054E1                 db    0
.eh_frame:00000000000054E2                 db    0
.eh_frame:00000000000054E3                 db    0
.eh_frame:00000000000054E4                 db    0
.eh_frame:00000000000054E5                 db    0
.eh_frame:00000000000054E6                 db    0
.eh_frame:00000000000054E7                 db    0
.eh_frame:00000000000054E8                 db  28h ; (
.eh_frame:00000000000054E9                 db    0
.eh_frame:00000000000054EA                 db    0
.eh_frame:00000000000054EB                 db    0
.eh_frame:00000000000054EC                 db  5Ch ; \
.eh_frame:00000000000054ED                 db    0
.eh_frame:00000000000054EE                 db    0
.eh_frame:00000000000054EF                 db    0
.eh_frame:00000000000054F0                 db    0
.eh_frame:00000000000054F1                 db 0C2h
.eh_frame:00000000000054F2                 db 0FFh
.eh_frame:00000000000054F3                 db 0FFh
.eh_frame:00000000000054F4                 db  42h ; B
.eh_frame:00000000000054F5                 db    3
.eh_frame:00000000000054F6                 db    0
.eh_frame:00000000000054F7                 db    0
.eh_frame:00000000000054F8                 db    0
.eh_frame:00000000000054F9                 db  42h ; B
.eh_frame:00000000000054FA                 db  0Eh
.eh_frame:00000000000054FB                 db  10h
.eh_frame:00000000000054FC                 db  8Dh
.eh_frame:00000000000054FD                 db    2
.eh_frame:00000000000054FE                 db  42h ; B
.eh_frame:00000000000054FF                 db  0Eh
.eh_frame:0000000000005500                 db  18h
.eh_frame:0000000000005501                 db  8Ch
.eh_frame:0000000000005502                 db    3
.eh_frame:0000000000005503                 db  46h ; F
.eh_frame:0000000000005504                 db  0Eh
.eh_frame:0000000000005505                 db  20h
.eh_frame:0000000000005506                 db  86h
.eh_frame:0000000000005507                 db    4
.eh_frame:0000000000005508                 db  41h ; A
.eh_frame:0000000000005509                 db  0Eh
.eh_frame:000000000000550A                 db  28h ; (
.eh_frame:000000000000550B                 db  83h
.eh_frame:000000000000550C                 db    5
.eh_frame:000000000000550D                 db  49h ; I
.eh_frame:000000000000550E                 db  0Eh
.eh_frame:000000000000550F                 db 0B0h
.eh_frame:0000000000005510                 db    1
.eh_frame:0000000000005511                 db    0
.eh_frame:0000000000005512                 db    0
.eh_frame:0000000000005513                 db    0
.eh_frame:0000000000005514                 db  38h ; 8
.eh_frame:0000000000005515                 db    0
.eh_frame:0000000000005516                 db    0
.eh_frame:0000000000005517                 db    0
.eh_frame:0000000000005518                 db  88h
.eh_frame:0000000000005519                 db    0
.eh_frame:000000000000551A                 db    0
.eh_frame:000000000000551B                 db    0
.eh_frame:000000000000551C                 db 0A4h
.eh_frame:000000000000551D                 db 0BFh
.eh_frame:000000000000551E                 db 0FFh
.eh_frame:000000000000551F                 db 0FFh
.eh_frame:0000000000005520                 db  14h
.eh_frame:0000000000005521                 db    1
.eh_frame:0000000000005522                 db    0
.eh_frame:0000000000005523                 db    0
.eh_frame:0000000000005524                 db    0
.eh_frame:0000000000005525                 db  41h ; A
.eh_frame:0000000000005526                 db  0Eh
.eh_frame:0000000000005527                 db  10h
.eh_frame:0000000000005528                 db  86h
.eh_frame:0000000000005529                 db    2
.eh_frame:000000000000552A                 db  41h ; A
.eh_frame:000000000000552B                 db  0Eh
.eh_frame:000000000000552C                 db  18h
.eh_frame:000000000000552D                 db  83h
.eh_frame:000000000000552E                 db    3
.eh_frame:000000000000552F                 db  49h ; I
.eh_frame:0000000000005530                 db  0Eh
.eh_frame:0000000000005531                 db  20h
.eh_frame:0000000000005532                 db    2
.eh_frame:0000000000005533                 db  4Fh ; O
.eh_frame:0000000000005534                 db  0Eh
.eh_frame:0000000000005535                 db  28h ; (
.eh_frame:0000000000005536                 db  49h ; I
.eh_frame:0000000000005537                 db  0Eh
.eh_frame:0000000000005538                 db  30h ; 0
.eh_frame:0000000000005539                 db  4Fh ; O
.eh_frame:000000000000553A                 db  0Eh
.eh_frame:000000000000553B                 db  38h ; 8
.eh_frame:000000000000553C                 db  53h ; S
.eh_frame:000000000000553D                 db  0Eh
.eh_frame:000000000000553E                 db  40h ; @
.eh_frame:000000000000553F                 db  52h ; R
.eh_frame:0000000000005540                 db  0Eh
.eh_frame:0000000000005541                 db  20h
.eh_frame:0000000000005542                 db  5Ah ; Z
.eh_frame:0000000000005543                 db  0Ah
.eh_frame:0000000000005544                 db  0Eh
.eh_frame:0000000000005545                 db  18h
.eh_frame:0000000000005546                 db  43h ; C
.eh_frame:0000000000005547                 db  0Eh
.eh_frame:0000000000005548                 db  10h
.eh_frame:0000000000005549                 db  41h ; A
.eh_frame:000000000000554A                 db  0Eh
.eh_frame:000000000000554B                 db    8
.eh_frame:000000000000554C                 db  41h ; A
.eh_frame:000000000000554D                 db  0Bh
.eh_frame:000000000000554E                 db    0
.eh_frame:000000000000554F                 db    0
.eh_frame:0000000000005550                 db  10h
.eh_frame:0000000000005551                 db    0
.eh_frame:0000000000005552                 db    0
.eh_frame:0000000000005553                 db    0
.eh_frame:0000000000005554                 db 0C4h
.eh_frame:0000000000005555                 db    0
.eh_frame:0000000000005556                 db    0
.eh_frame:0000000000005557                 db    0
.eh_frame:0000000000005558                 db 0E8h
.eh_frame:0000000000005559                 db 0C4h
.eh_frame:000000000000555A                 db 0FFh
.eh_frame:000000000000555B                 db 0FFh
.eh_frame:000000000000555C                 db    8
.eh_frame:000000000000555D                 db    0
.eh_frame:000000000000555E                 db    0
.eh_frame:000000000000555F                 db    0
.eh_frame:0000000000005560                 db    0
.eh_frame:0000000000005561                 db    0
.eh_frame:0000000000005562                 db    0
.eh_frame:0000000000005563                 db    0
.eh_frame:0000000000005564                 db  10h
.eh_frame:0000000000005565                 db    0
.eh_frame:0000000000005566                 db    0
.eh_frame:0000000000005567                 db    0
.eh_frame:0000000000005568                 db 0D8h
.eh_frame:0000000000005569                 db    0
.eh_frame:000000000000556A                 db    0
.eh_frame:000000000000556B                 db    0
.eh_frame:000000000000556C                 db 0E4h
.eh_frame:000000000000556D                 db 0C4h
.eh_frame:000000000000556E                 db 0FFh
.eh_frame:000000000000556F                 db 0FFh
.eh_frame:0000000000005570                 db    8
.eh_frame:0000000000005571                 db    0
.eh_frame:0000000000005572                 db    0
.eh_frame:0000000000005573                 db    0
.eh_frame:0000000000005574                 db    0
.eh_frame:0000000000005575                 db    0
.eh_frame:0000000000005576                 db    0
.eh_frame:0000000000005577                 db    0
.eh_frame:0000000000005578                 db  2Ch ; ,
.eh_frame:0000000000005579                 db    0
.eh_frame:000000000000557A                 db    0
.eh_frame:000000000000557B                 db    0
.eh_frame:000000000000557C                 db 0ECh
.eh_frame:000000000000557D                 db    0
.eh_frame:000000000000557E                 db    0
.eh_frame:000000000000557F                 db    0
.eh_frame:0000000000005580                 db 0E0h
.eh_frame:0000000000005581                 db 0C4h
.eh_frame:0000000000005582                 db 0FFh
.eh_frame:0000000000005583                 db 0FFh
.eh_frame:0000000000005584                 db 0A4h
.eh_frame:0000000000005585                 db    0
.eh_frame:0000000000005586                 db    0
.eh_frame:0000000000005587                 db    0
.eh_frame:0000000000005588                 db    0
.eh_frame:0000000000005589                 db  41h ; A
.eh_frame:000000000000558A                 db  0Eh
.eh_frame:000000000000558B                 db  10h
.eh_frame:000000000000558C                 db  86h
.eh_frame:000000000000558D                 db    2
.eh_frame:000000000000558E                 db  41h ; A
.eh_frame:000000000000558F                 db  0Eh
.eh_frame:0000000000005590                 db  18h
.eh_frame:0000000000005591                 db  83h
.eh_frame:0000000000005592                 db    3
.eh_frame:0000000000005593                 db  44h ; D
.eh_frame:0000000000005594                 db  0Eh
.eh_frame:0000000000005595                 db  20h
.eh_frame:0000000000005596                 db  7Ah ; z
.eh_frame:0000000000005597                 db  0Ah
.eh_frame:0000000000005598                 db  0Eh
.eh_frame:0000000000005599                 db  18h
.eh_frame:000000000000559A                 db  41h ; A
.eh_frame:000000000000559B                 db  0Eh
.eh_frame:000000000000559C                 db  10h
.eh_frame:000000000000559D                 db  41h ; A
.eh_frame:000000000000559E                 db  0Eh
.eh_frame:000000000000559F                 db    8
.eh_frame:00000000000055A0                 db  41h ; A
.eh_frame:00000000000055A1                 db  0Bh
.eh_frame:00000000000055A2                 db    0
.eh_frame:00000000000055A3                 db    0
.eh_frame:00000000000055A4                 db    0
.eh_frame:00000000000055A5                 db    0
.eh_frame:00000000000055A6                 db    0
.eh_frame:00000000000055A7                 db    0
.eh_frame:00000000000055A8                 db  38h ; 8
.eh_frame:00000000000055A9                 db    0
.eh_frame:00000000000055AA                 db    0
.eh_frame:00000000000055AB                 db    0
.eh_frame:00000000000055AC                 db  1Ch
.eh_frame:00000000000055AD                 db    1
.eh_frame:00000000000055AE                 db    0
.eh_frame:00000000000055AF                 db    0
.eh_frame:00000000000055B0                 db  60h ; `
.eh_frame:00000000000055B1                 db 0C5h
.eh_frame:00000000000055B2                 db 0FFh
.eh_frame:00000000000055B3                 db 0FFh
.eh_frame:00000000000055B4                 db  3Fh ; ?
.eh_frame:00000000000055B5                 db    1
.eh_frame:00000000000055B6                 db    0
.eh_frame:00000000000055B7                 db    0
.eh_frame:00000000000055B8                 db    0
.eh_frame:00000000000055B9                 db  42h ; B
.eh_frame:00000000000055BA                 db  0Eh
.eh_frame:00000000000055BB                 db  10h
.eh_frame:00000000000055BC                 db  8Dh
.eh_frame:00000000000055BD                 db    2
.eh_frame:00000000000055BE                 db  42h ; B
.eh_frame:00000000000055BF                 db  0Eh
.eh_frame:00000000000055C0                 db  18h
.eh_frame:00000000000055C1                 db  8Ch
.eh_frame:00000000000055C2                 db    3
.eh_frame:00000000000055C3                 db  44h ; D
.eh_frame:00000000000055C4                 db  0Eh
.eh_frame:00000000000055C5                 db  20h
.eh_frame:00000000000055C6                 db  86h
.eh_frame:00000000000055C7                 db    4
.eh_frame:00000000000055C8                 db  41h ; A
.eh_frame:00000000000055C9                 db  0Eh
.eh_frame:00000000000055CA                 db  28h ; (
.eh_frame:00000000000055CB                 db  83h
.eh_frame:00000000000055CC                 db    5
.eh_frame:00000000000055CD                 db  4Dh ; M
.eh_frame:00000000000055CE                 db  0Eh
.eh_frame:00000000000055CF                 db  90h
.eh_frame:00000000000055D0                 db    2
.eh_frame:00000000000055D1                 db    2
.eh_frame:00000000000055D2                 db  8Eh
.eh_frame:00000000000055D3                 db  0Ah
.eh_frame:00000000000055D4                 db  0Eh
.eh_frame:00000000000055D5                 db  28h ; (
.eh_frame:00000000000055D6                 db  41h ; A
.eh_frame:00000000000055D7                 db  0Eh
.eh_frame:00000000000055D8                 db  20h
.eh_frame:00000000000055D9                 db  41h ; A
.eh_frame:00000000000055DA                 db  0Eh
.eh_frame:00000000000055DB                 db  18h
.eh_frame:00000000000055DC                 db  42h ; B
.eh_frame:00000000000055DD                 db  0Eh
.eh_frame:00000000000055DE                 db  10h
.eh_frame:00000000000055DF                 db  42h ; B
.eh_frame:00000000000055E0                 db  0Eh
.eh_frame:00000000000055E1                 db    8
.eh_frame:00000000000055E2                 db  46h ; F
.eh_frame:00000000000055E3                 db  0Bh
.eh_frame:00000000000055E4                 db  48h ; H
.eh_frame:00000000000055E5                 db    0
.eh_frame:00000000000055E6                 db    0
.eh_frame:00000000000055E7                 db    0
.eh_frame:00000000000055E8                 db  58h ; X
.eh_frame:00000000000055E9                 db    1
.eh_frame:00000000000055EA                 db    0
.eh_frame:00000000000055EB                 db    0
.eh_frame:00000000000055EC                 db  64h ; d
.eh_frame:00000000000055ED                 db 0C6h
.eh_frame:00000000000055EE                 db 0FFh
.eh_frame:00000000000055EF                 db 0FFh
.eh_frame:00000000000055F0                 db  3Bh ; ;
.eh_frame:00000000000055F1                 db    1
.eh_frame:00000000000055F2                 db    0
.eh_frame:00000000000055F3                 db    0
.eh_frame:00000000000055F4                 db    0
.eh_frame:00000000000055F5                 db  42h ; B
.eh_frame:00000000000055F6                 db  0Eh
.eh_frame:00000000000055F7                 db  10h
.eh_frame:00000000000055F8                 db  8Eh
.eh_frame:00000000000055F9                 db    2
.eh_frame:00000000000055FA                 db  42h ; B
.eh_frame:00000000000055FB                 db  0Eh
.eh_frame:00000000000055FC                 db  18h
.eh_frame:00000000000055FD                 db  8Dh
.eh_frame:00000000000055FE                 db    3
.eh_frame:00000000000055FF                 db  45h ; E
.eh_frame:0000000000005600                 db  0Eh
.eh_frame:0000000000005601                 db  20h
.eh_frame:0000000000005602                 db  8Ch
.eh_frame:0000000000005603                 db    4
.eh_frame:0000000000005604                 db  41h ; A
.eh_frame:0000000000005605                 db  0Eh
.eh_frame:0000000000005606                 db  28h ; (
.eh_frame:0000000000005607                 db  86h
.eh_frame:0000000000005608                 db    5
.eh_frame:0000000000005609                 db  44h ; D
.eh_frame:000000000000560A                 db  0Eh
.eh_frame:000000000000560B                 db  30h ; 0
.eh_frame:000000000000560C                 db  83h
.eh_frame:000000000000560D                 db    6
.eh_frame:000000000000560E                 db  4Ah ; J
.eh_frame:000000000000560F                 db  0Eh
.eh_frame:0000000000005610                 db  80h
.eh_frame:0000000000005611                 db    2
.eh_frame:0000000000005612                 db    3
.eh_frame:0000000000005613                 db  0Dh
.eh_frame:0000000000005614                 db    1
.eh_frame:0000000000005615                 db  0Ah
.eh_frame:0000000000005616                 db  0Eh
.eh_frame:0000000000005617                 db  30h ; 0
.eh_frame:0000000000005618                 db  41h ; A
.eh_frame:0000000000005619                 db  0Eh
.eh_frame:000000000000561A                 db  28h ; (
.eh_frame:000000000000561B                 db  41h ; A
.eh_frame:000000000000561C                 db  0Eh
.eh_frame:000000000000561D                 db  20h
.eh_frame:000000000000561E                 db  42h ; B
.eh_frame:000000000000561F                 db  0Eh
.eh_frame:0000000000005620                 db  18h
.eh_frame:0000000000005621                 db  42h ; B
.eh_frame:0000000000005622                 db  0Eh
.eh_frame:0000000000005623                 db  10h
.eh_frame:0000000000005624                 db  42h ; B
.eh_frame:0000000000005625                 db  0Eh
.eh_frame:0000000000005626                 db    8
.eh_frame:0000000000005627                 db  43h ; C
.eh_frame:0000000000005628                 db  0Bh
.eh_frame:0000000000005629                 db    0
.eh_frame:000000000000562A                 db    0
.eh_frame:000000000000562B                 db    0
.eh_frame:000000000000562C                 db    0
.eh_frame:000000000000562D                 db    0
.eh_frame:000000000000562E                 db    0
.eh_frame:000000000000562F                 db    0
.eh_frame:0000000000005630                 db  1Ch
.eh_frame:0000000000005631                 db    0
.eh_frame:0000000000005632                 db    0
.eh_frame:0000000000005633                 db    0
.eh_frame:0000000000005634                 db 0A4h
.eh_frame:0000000000005635                 db    1
.eh_frame:0000000000005636                 db    0
.eh_frame:0000000000005637                 db    0
.eh_frame:0000000000005638                 db  58h ; X
.eh_frame:0000000000005639                 db 0C7h
.eh_frame:000000000000563A                 db 0FFh
.eh_frame:000000000000563B                 db 0FFh
.eh_frame:000000000000563C                 db  9Fh
.eh_frame:000000000000563D                 db    0
.eh_frame:000000000000563E                 db    0
.eh_frame:000000000000563F                 db    0
.eh_frame:0000000000005640                 db    0
.eh_frame:0000000000005641                 db  44h ; D
.eh_frame:0000000000005642                 db  0Eh
.eh_frame:0000000000005643                 db  10h
.eh_frame:0000000000005644                 db  83h
.eh_frame:0000000000005645                 db    2
.eh_frame:0000000000005646                 db    2
.eh_frame:0000000000005647                 db  78h ; x
.eh_frame:0000000000005648                 db  0Ah
.eh_frame:0000000000005649                 db  0Eh
.eh_frame:000000000000564A                 db    8
.eh_frame:000000000000564B                 db  41h ; A
.eh_frame:000000000000564C                 db  0Bh
.eh_frame:000000000000564D                 db    0
.eh_frame:000000000000564E                 db    0
.eh_frame:000000000000564F                 db    0
.eh_frame:0000000000005650                 db  40h ; @
.eh_frame:0000000000005651                 db    0
.eh_frame:0000000000005652                 db    0
.eh_frame:0000000000005653                 db    0
.eh_frame:0000000000005654                 db 0C4h
.eh_frame:0000000000005655                 db    1
.eh_frame:0000000000005656                 db    0
.eh_frame:0000000000005657                 db    0
.eh_frame:0000000000005658                 db 0D8h
.eh_frame:0000000000005659                 db 0C7h
.eh_frame:000000000000565A                 db 0FFh
.eh_frame:000000000000565B                 db 0FFh
.eh_frame:000000000000565C                 db 0E7h
.eh_frame:000000000000565D                 db    0
.eh_frame:000000000000565E                 db    0
.eh_frame:000000000000565F                 db    0
.eh_frame:0000000000005660                 db    0
.eh_frame:0000000000005661                 db  41h ; A
.eh_frame:0000000000005662                 db  0Eh
.eh_frame:0000000000005663                 db  10h
.eh_frame:0000000000005664                 db  86h
.eh_frame:0000000000005665                 db    2
.eh_frame:0000000000005666                 db  41h ; A
.eh_frame:0000000000005667                 db  0Eh
.eh_frame:0000000000005668                 db  18h
.eh_frame:0000000000005669                 db  83h
.eh_frame:000000000000566A                 db    3
.eh_frame:000000000000566B                 db  49h ; I
.eh_frame:000000000000566C                 db  0Eh
.eh_frame:000000000000566D                 db  20h
.eh_frame:000000000000566E                 db  6Eh ; n
.eh_frame:000000000000566F                 db  0Ah
.eh_frame:0000000000005670                 db  0Eh
.eh_frame:0000000000005671                 db  18h
.eh_frame:0000000000005672                 db  41h ; A
.eh_frame:0000000000005673                 db  0Eh
.eh_frame:0000000000005674                 db  10h
.eh_frame:0000000000005675                 db  41h ; A
.eh_frame:0000000000005676                 db  0Eh
.eh_frame:0000000000005677                 db    8
.eh_frame:0000000000005678                 db  45h ; E
.eh_frame:0000000000005679                 db  0Bh
.eh_frame:000000000000567A                 db    2
.eh_frame:000000000000567B                 db  4Ah ; J
.eh_frame:000000000000567C                 db  0Ah
.eh_frame:000000000000567D                 db  0Eh
.eh_frame:000000000000567E                 db  18h
.eh_frame:000000000000567F                 db  41h ; A
.eh_frame:0000000000005680                 db  0Eh
.eh_frame:0000000000005681                 db  10h
.eh_frame:0000000000005682                 db  41h ; A
.eh_frame:0000000000005683                 db  0Eh
.eh_frame:0000000000005684                 db    8
.eh_frame:0000000000005685                 db  44h ; D
.eh_frame:0000000000005686                 db  0Bh
.eh_frame:0000000000005687                 db    2
.eh_frame:0000000000005688                 db  54h ; T
.eh_frame:0000000000005689                 db  0Eh
.eh_frame:000000000000568A                 db  18h
.eh_frame:000000000000568B                 db  41h ; A
.eh_frame:000000000000568C                 db  0Eh
.eh_frame:000000000000568D                 db  10h
.eh_frame:000000000000568E                 db  41h ; A
.eh_frame:000000000000568F                 db  0Eh
.eh_frame:0000000000005690                 db    8
.eh_frame:0000000000005691                 db    0
.eh_frame:0000000000005692                 db    0
.eh_frame:0000000000005693                 db    0
.eh_frame:0000000000005694                 db  74h ; t
.eh_frame:0000000000005695                 db    0
.eh_frame:0000000000005696                 db    0
.eh_frame:0000000000005697                 db    0
.eh_frame:0000000000005698                 db    8
.eh_frame:0000000000005699                 db    2
.eh_frame:000000000000569A                 db    0
.eh_frame:000000000000569B                 db    0
.eh_frame:000000000000569C                 db  84h
.eh_frame:000000000000569D                 db 0C8h
.eh_frame:000000000000569E                 db 0FFh
.eh_frame:000000000000569F                 db 0FFh
.eh_frame:00000000000056A0                 db  34h ; 4
.eh_frame:00000000000056A1                 db  12h
.eh_frame:00000000000056A2                 db    0
.eh_frame:00000000000056A3                 db    0
.eh_frame:00000000000056A4                 db    0
.eh_frame:00000000000056A5                 db  42h ; B
.eh_frame:00000000000056A6                 db  0Eh
.eh_frame:00000000000056A7                 db  10h
.eh_frame:00000000000056A8                 db  8Fh
.eh_frame:00000000000056A9                 db    2
.eh_frame:00000000000056AA                 db  42h ; B
.eh_frame:00000000000056AB                 db  0Eh
.eh_frame:00000000000056AC                 db  18h
.eh_frame:00000000000056AD                 db  8Eh
.eh_frame:00000000000056AE                 db    3
.eh_frame:00000000000056AF                 db  45h ; E
.eh_frame:00000000000056B0                 db  0Eh
.eh_frame:00000000000056B1                 db  20h
.eh_frame:00000000000056B2                 db  8Dh
.eh_frame:00000000000056B3                 db    4
.eh_frame:00000000000056B4                 db  42h ; B
.eh_frame:00000000000056B5                 db  0Eh
.eh_frame:00000000000056B6                 db  28h ; (
.eh_frame:00000000000056B7                 db  8Ch
.eh_frame:00000000000056B8                 db    5
.eh_frame:00000000000056B9                 db  44h ; D
.eh_frame:00000000000056BA                 db  0Eh
.eh_frame:00000000000056BB                 db  30h ; 0
.eh_frame:00000000000056BC                 db  86h
.eh_frame:00000000000056BD                 db    6
.eh_frame:00000000000056BE                 db  41h ; A
.eh_frame:00000000000056BF                 db  0Eh
.eh_frame:00000000000056C0                 db  38h ; 8
.eh_frame:00000000000056C1                 db  83h
.eh_frame:00000000000056C2                 db    7
.eh_frame:00000000000056C3                 db  53h ; S
.eh_frame:00000000000056C4                 db  0Eh
.eh_frame:00000000000056C5                 db 0F0h
.eh_frame:00000000000056C6                 db    1
.eh_frame:00000000000056C7                 db    3
.eh_frame:00000000000056C8                 db  81h
.eh_frame:00000000000056C9                 db  0Bh
.eh_frame:00000000000056CA                 db  0Eh
.eh_frame:00000000000056CB                 db 0F8h
.eh_frame:00000000000056CC                 db    1
.eh_frame:00000000000056CD                 db  4Ah ; J
.eh_frame:00000000000056CE                 db  0Eh
.eh_frame:00000000000056CF                 db  80h
.eh_frame:00000000000056D0                 db    2
.eh_frame:00000000000056D1                 db  44h ; D
.eh_frame:00000000000056D2                 db  0Eh
.eh_frame:00000000000056D3                 db  88h
.eh_frame:00000000000056D4                 db    2
.eh_frame:00000000000056D5                 db  45h ; E
.eh_frame:00000000000056D6                 db  0Eh
.eh_frame:00000000000056D7                 db  90h
.eh_frame:00000000000056D8                 db    2
.eh_frame:00000000000056D9                 db  5Fh ; _
.eh_frame:00000000000056DA                 db  0Eh
.eh_frame:00000000000056DB                 db 0F0h
.eh_frame:00000000000056DC                 db    1
.eh_frame:00000000000056DD                 db  64h ; d
.eh_frame:00000000000056DE                 db  0Ah
.eh_frame:00000000000056DF                 db  0Eh
.eh_frame:00000000000056E0                 db  38h ; 8
.eh_frame:00000000000056E1                 db  41h ; A
.eh_frame:00000000000056E2                 db  0Eh
.eh_frame:00000000000056E3                 db  30h ; 0
.eh_frame:00000000000056E4                 db  41h ; A
.eh_frame:00000000000056E5                 db  0Eh
.eh_frame:00000000000056E6                 db  28h ; (
.eh_frame:00000000000056E7                 db  42h ; B
.eh_frame:00000000000056E8                 db  0Eh
.eh_frame:00000000000056E9                 db  20h
.eh_frame:00000000000056EA                 db  42h ; B
.eh_frame:00000000000056EB                 db  0Eh
.eh_frame:00000000000056EC                 db  18h
.eh_frame:00000000000056ED                 db  42h ; B
.eh_frame:00000000000056EE                 db  0Eh
.eh_frame:00000000000056EF                 db  10h
.eh_frame:00000000000056F0                 db  42h ; B
.eh_frame:00000000000056F1                 db  0Eh
.eh_frame:00000000000056F2                 db    8
.eh_frame:00000000000056F3                 db  44h ; D
.eh_frame:00000000000056F4                 db  0Bh
.eh_frame:00000000000056F5                 db    3
.eh_frame:00000000000056F6                 db  99h
.eh_frame:00000000000056F7                 db    5
.eh_frame:00000000000056F8                 db  0Eh
.eh_frame:00000000000056F9                 db 0F8h
.eh_frame:00000000000056FA                 db    1
.eh_frame:00000000000056FB                 db  4Dh ; M
.eh_frame:00000000000056FC                 db  0Eh
.eh_frame:00000000000056FD                 db  80h
.eh_frame:00000000000056FE                 db    2
.eh_frame:00000000000056FF                 db  44h ; D
.eh_frame:0000000000005700                 db  0Eh
.eh_frame:0000000000005701                 db  88h
.eh_frame:0000000000005702                 db    2
.eh_frame:0000000000005703                 db  47h ; G
.eh_frame:0000000000005704                 db  0Eh
.eh_frame:0000000000005705                 db  90h
.eh_frame:0000000000005706                 db    2
.eh_frame:0000000000005707                 db  5Bh ; [
.eh_frame:0000000000005708                 db  0Eh
.eh_frame:0000000000005709                 db 0F0h
.eh_frame:000000000000570A                 db    1
.eh_frame:000000000000570B                 db    0
.eh_frame:000000000000570C                 db  68h ; h
.eh_frame:000000000000570D                 db    0
.eh_frame:000000000000570E                 db    0
.eh_frame:000000000000570F                 db    0
.eh_frame:0000000000005710                 db  80h
.eh_frame:0000000000005711                 db    2
.eh_frame:0000000000005712                 db    0
.eh_frame:0000000000005713                 db    0
.eh_frame:0000000000005714                 db  4Ch ; L
.eh_frame:0000000000005715                 db 0DAh
.eh_frame:0000000000005716                 db 0FFh
.eh_frame:0000000000005717                 db 0FFh
.eh_frame:0000000000005718                 db 0ABh
.eh_frame:0000000000005719                 db    1
.eh_frame:000000000000571A                 db    0
.eh_frame:000000000000571B                 db    0
.eh_frame:000000000000571C                 db    0
.eh_frame:000000000000571D                 db  42h ; B
.eh_frame:000000000000571E                 db  0Eh
.eh_frame:000000000000571F                 db  10h
.eh_frame:0000000000005720                 db  8Fh
.eh_frame:0000000000005721                 db    2
.eh_frame:0000000000005722                 db  42h ; B
.eh_frame:0000000000005723                 db  0Eh
.eh_frame:0000000000005724                 db  18h
.eh_frame:0000000000005725                 db  8Eh
.eh_frame:0000000000005726                 db    3
.eh_frame:0000000000005727                 db  45h ; E
.eh_frame:0000000000005728                 db  0Eh
.eh_frame:0000000000005729                 db  20h
.eh_frame:000000000000572A                 db  8Dh
.eh_frame:000000000000572B                 db    4
.eh_frame:000000000000572C                 db  42h ; B
.eh_frame:000000000000572D                 db  0Eh
.eh_frame:000000000000572E                 db  28h ; (
.eh_frame:000000000000572F                 db  8Ch
.eh_frame:0000000000005730                 db    5
.eh_frame:0000000000005731                 db  44h ; D
.eh_frame:0000000000005732                 db  0Eh
.eh_frame:0000000000005733                 db  30h ; 0
.eh_frame:0000000000005734                 db  86h
.eh_frame:0000000000005735                 db    6
.eh_frame:0000000000005736                 db  41h ; A
.eh_frame:0000000000005737                 db  0Eh
.eh_frame:0000000000005738                 db  38h ; 8
.eh_frame:0000000000005739                 db  83h
.eh_frame:000000000000573A                 db    7
.eh_frame:000000000000573B                 db  47h ; G
.eh_frame:000000000000573C                 db  0Eh
.eh_frame:000000000000573D                 db  60h ; `
.eh_frame:000000000000573E                 db    2
.eh_frame:000000000000573F                 db  99h
.eh_frame:0000000000005740                 db  0Eh
.eh_frame:0000000000005741                 db  68h ; h
.eh_frame:0000000000005742                 db  5Fh ; _
.eh_frame:0000000000005743                 db  0Eh
.eh_frame:0000000000005744                 db  70h ; p
.eh_frame:0000000000005745                 db  46h ; F
.eh_frame:0000000000005746                 db  0Eh
.eh_frame:0000000000005747                 db  78h ; x
.eh_frame:0000000000005748                 db  42h ; B
.eh_frame:0000000000005749                 db  0Eh
.eh_frame:000000000000574A                 db  80h
.eh_frame:000000000000574B                 db    1
.eh_frame:000000000000574C                 db  59h ; Y
.eh_frame:000000000000574D                 db  0Eh
.eh_frame:000000000000574E                 db  60h ; `
.eh_frame:000000000000574F                 db    2
.eh_frame:0000000000005750                 db  40h ; @
.eh_frame:0000000000005751                 db  0Eh
.eh_frame:0000000000005752                 db  68h ; h
.eh_frame:0000000000005753                 db  4Bh ; K
.eh_frame:0000000000005754                 db  0Eh
.eh_frame:0000000000005755                 db  70h ; p
.eh_frame:0000000000005756                 db  43h ; C
.eh_frame:0000000000005757                 db  0Eh
.eh_frame:0000000000005758                 db  78h ; x
.eh_frame:0000000000005759                 db  45h ; E
.eh_frame:000000000000575A                 db  0Eh
.eh_frame:000000000000575B                 db  80h
.eh_frame:000000000000575C                 db    1
.eh_frame:000000000000575D                 db  5Eh ; ^
.eh_frame:000000000000575E                 db  0Eh
.eh_frame:000000000000575F                 db  60h ; `
.eh_frame:0000000000005760                 db  4Ch ; L
.eh_frame:0000000000005761                 db  0Ah
.eh_frame:0000000000005762                 db  0Eh
.eh_frame:0000000000005763                 db  38h ; 8
.eh_frame:0000000000005764                 db  44h ; D
.eh_frame:0000000000005765                 db  0Eh
.eh_frame:0000000000005766                 db  30h ; 0
.eh_frame:0000000000005767                 db  41h ; A
.eh_frame:0000000000005768                 db  0Eh
.eh_frame:0000000000005769                 db  28h ; (
.eh_frame:000000000000576A                 db  42h ; B
.eh_frame:000000000000576B                 db  0Eh
.eh_frame:000000000000576C                 db  20h
.eh_frame:000000000000576D                 db  42h ; B
.eh_frame:000000000000576E                 db  0Eh
.eh_frame:000000000000576F                 db  18h
.eh_frame:0000000000005770                 db  42h ; B
.eh_frame:0000000000005771                 db  0Eh
.eh_frame:0000000000005772                 db  10h
.eh_frame:0000000000005773                 db  42h ; B
.eh_frame:0000000000005774                 db  0Eh
.eh_frame:0000000000005775                 db    8
.eh_frame:0000000000005776                 db  46h ; F
.eh_frame:0000000000005777                 db  0Bh
.eh_frame:0000000000005778                 db  28h ; (
.eh_frame:0000000000005779                 db    0
.eh_frame:000000000000577A                 db    0
.eh_frame:000000000000577B                 db    0
.eh_frame:000000000000577C                 db 0ECh
.eh_frame:000000000000577D                 db    2
.eh_frame:000000000000577E                 db    0
.eh_frame:000000000000577F                 db    0
.eh_frame:0000000000005780                 db  90h
.eh_frame:0000000000005781                 db 0DBh
.eh_frame:0000000000005782                 db 0FFh
.eh_frame:0000000000005783                 db 0FFh
.eh_frame:0000000000005784                 db  36h ; 6
.eh_frame:0000000000005785                 db    0
.eh_frame:0000000000005786                 db    0
.eh_frame:0000000000005787                 db    0
.eh_frame:0000000000005788                 db    0
.eh_frame:0000000000005789                 db  42h ; B
.eh_frame:000000000000578A                 db  0Eh
.eh_frame:000000000000578B                 db  10h
.eh_frame:000000000000578C                 db  8Ch
.eh_frame:000000000000578D                 db    2
.eh_frame:000000000000578E                 db  41h ; A
.eh_frame:000000000000578F                 db  0Eh
.eh_frame:0000000000005790                 db  18h
.eh_frame:0000000000005791                 db  86h
.eh_frame:0000000000005792                 db    3
.eh_frame:0000000000005793                 db  41h ; A
.eh_frame:0000000000005794                 db  0Eh
.eh_frame:0000000000005795                 db  20h
.eh_frame:0000000000005796                 db  83h
.eh_frame:0000000000005797                 db    4
.eh_frame:0000000000005798                 db  6Eh ; n
.eh_frame:0000000000005799                 db  0Eh
.eh_frame:000000000000579A                 db  18h
.eh_frame:000000000000579B                 db  41h ; A
.eh_frame:000000000000579C                 db  0Eh
.eh_frame:000000000000579D                 db  10h
.eh_frame:000000000000579E                 db  42h ; B
.eh_frame:000000000000579F                 db  0Eh
.eh_frame:00000000000057A0                 db    8
.eh_frame:00000000000057A1                 db    0
.eh_frame:00000000000057A2                 db    0
.eh_frame:00000000000057A3                 db    0
.eh_frame:00000000000057A4                 db  10h
.eh_frame:00000000000057A5                 db    0
.eh_frame:00000000000057A6                 db    0
.eh_frame:00000000000057A7                 db    0
.eh_frame:00000000000057A8                 db  18h
.eh_frame:00000000000057A9                 db    3
.eh_frame:00000000000057AA                 db    0
.eh_frame:00000000000057AB                 db    0
.eh_frame:00000000000057AC                 db 0A4h
.eh_frame:00000000000057AD                 db 0DBh
.eh_frame:00000000000057AE                 db 0FFh
.eh_frame:00000000000057AF                 db 0FFh
.eh_frame:00000000000057B0                 db  11h
.eh_frame:00000000000057B1                 db    0
.eh_frame:00000000000057B2                 db    0
.eh_frame:00000000000057B3                 db    0
.eh_frame:00000000000057B4                 db    0
.eh_frame:00000000000057B5                 db    0
.eh_frame:00000000000057B6                 db    0
.eh_frame:00000000000057B7                 db    0
.eh_frame:00000000000057B8                 db  10h
.eh_frame:00000000000057B9                 db    0
.eh_frame:00000000000057BA                 db    0
.eh_frame:00000000000057BB                 db    0
.eh_frame:00000000000057BC                 db  2Ch ; ,
.eh_frame:00000000000057BD                 db    3
.eh_frame:00000000000057BE                 db    0
.eh_frame:00000000000057BF                 db    0
.eh_frame:00000000000057C0                 db 0B0h
.eh_frame:00000000000057C1                 db 0DBh
.eh_frame:00000000000057C2                 db 0FFh
.eh_frame:00000000000057C3                 db 0FFh
.eh_frame:00000000000057C4                 db  11h
.eh_frame:00000000000057C5                 db    0
.eh_frame:00000000000057C6                 db    0
.eh_frame:00000000000057C7                 db    0
.eh_frame:00000000000057C8                 db    0
.eh_frame:00000000000057C9                 db    0
.eh_frame:00000000000057CA                 db    0
.eh_frame:00000000000057CB                 db    0
.eh_frame:00000000000057CC                 db  10h
.eh_frame:00000000000057CD                 db    0
.eh_frame:00000000000057CE                 db    0
.eh_frame:00000000000057CF                 db    0
.eh_frame:00000000000057D0                 db  40h ; @
.eh_frame:00000000000057D1                 db    3
.eh_frame:00000000000057D2                 db    0
.eh_frame:00000000000057D3                 db    0
.eh_frame:00000000000057D4                 db 0BCh
.eh_frame:00000000000057D5                 db 0DBh
.eh_frame:00000000000057D6                 db 0FFh
.eh_frame:00000000000057D7                 db 0FFh
.eh_frame:00000000000057D8                 db  35h ; 5
.eh_frame:00000000000057D9                 db    0
.eh_frame:00000000000057DA                 db    0
.eh_frame:00000000000057DB                 db    0
.eh_frame:00000000000057DC                 db    0
.eh_frame:00000000000057DD                 db    0
.eh_frame:00000000000057DE                 db    0
.eh_frame:00000000000057DF                 db    0
.eh_frame:00000000000057E0                 db  10h
.eh_frame:00000000000057E1                 db    0
.eh_frame:00000000000057E2                 db    0
.eh_frame:00000000000057E3                 db    0
.eh_frame:00000000000057E4                 db  54h ; T
.eh_frame:00000000000057E5                 db    3
.eh_frame:00000000000057E6                 db    0
.eh_frame:00000000000057E7                 db    0
.eh_frame:00000000000057E8                 db 0E8h
.eh_frame:00000000000057E9                 db 0DBh
.eh_frame:00000000000057EA                 db 0FFh
.eh_frame:00000000000057EB                 db 0FFh
.eh_frame:00000000000057EC                 db  15h
.eh_frame:00000000000057ED                 db    0
.eh_frame:00000000000057EE                 db    0
.eh_frame:00000000000057EF                 db    0
.eh_frame:00000000000057F0                 db    0
.eh_frame:00000000000057F1                 db    0
.eh_frame:00000000000057F2                 db    0
.eh_frame:00000000000057F3                 db    0
.eh_frame:00000000000057F4                 db  10h
.eh_frame:00000000000057F5                 db    0
.eh_frame:00000000000057F6                 db    0
.eh_frame:00000000000057F7                 db    0
.eh_frame:00000000000057F8                 db  68h ; h
.eh_frame:00000000000057F9                 db    3
.eh_frame:00000000000057FA                 db    0
.eh_frame:00000000000057FB                 db    0
.eh_frame:00000000000057FC                 db 0F4h
.eh_frame:00000000000057FD                 db 0DBh
.eh_frame:00000000000057FE                 db 0FFh
.eh_frame:00000000000057FF                 db 0FFh
.eh_frame:0000000000005800                 db  30h ; 0
.eh_frame:0000000000005801                 db    0
.eh_frame:0000000000005802                 db    0
.eh_frame:0000000000005803                 db    0
.eh_frame:0000000000005804                 db    0
.eh_frame:0000000000005805                 db  6Bh ; k
.eh_frame:0000000000005806                 db  0Eh
.eh_frame:0000000000005807                 db  10h
.eh_frame:0000000000005808                 db  50h ; P
.eh_frame:0000000000005809                 db    0
.eh_frame:000000000000580A                 db    0
.eh_frame:000000000000580B                 db    0
.eh_frame:000000000000580C                 db  7Ch ; |
.eh_frame:000000000000580D                 db    3
.eh_frame:000000000000580E                 db    0
.eh_frame:000000000000580F                 db    0
.eh_frame:0000000000005810                 db  10h
.eh_frame:0000000000005811                 db 0DCh
.eh_frame:0000000000005812                 db 0FFh
.eh_frame:0000000000005813                 db 0FFh
.eh_frame:0000000000005814                 db  74h ; t
.eh_frame:0000000000005815                 db    0
.eh_frame:0000000000005816                 db    0
.eh_frame:0000000000005817                 db    0
.eh_frame:0000000000005818                 db    0
.eh_frame:0000000000005819                 db  42h ; B
.eh_frame:000000000000581A                 db  0Eh
.eh_frame:000000000000581B                 db  10h
.eh_frame:000000000000581C                 db  8Fh
.eh_frame:000000000000581D                 db    2
.eh_frame:000000000000581E                 db  42h ; B
.eh_frame:000000000000581F                 db  0Eh
.eh_frame:0000000000005820                 db  18h
.eh_frame:0000000000005821                 db  8Eh
.eh_frame:0000000000005822                 db    3
.eh_frame:0000000000005823                 db  49h ; I
.eh_frame:0000000000005824                 db  0Eh
.eh_frame:0000000000005825                 db  20h
.eh_frame:0000000000005826                 db  8Dh
.eh_frame:0000000000005827                 db    4
.eh_frame:0000000000005828                 db  42h ; B
.eh_frame:0000000000005829                 db  0Eh
.eh_frame:000000000000582A                 db  28h ; (
.eh_frame:000000000000582B                 db  8Ch
.eh_frame:000000000000582C                 db    5
.eh_frame:000000000000582D                 db  44h ; D
.eh_frame:000000000000582E                 db  0Eh
.eh_frame:000000000000582F                 db  30h ; 0
.eh_frame:0000000000005830                 db  86h
.eh_frame:0000000000005831                 db    6
.eh_frame:0000000000005832                 db  41h ; A
.eh_frame:0000000000005833                 db  0Eh
.eh_frame:0000000000005834                 db  38h ; 8
.eh_frame:0000000000005835                 db  83h
.eh_frame:0000000000005836                 db    7
.eh_frame:0000000000005837                 db  4Dh ; M
.eh_frame:0000000000005838                 db  0Eh
.eh_frame:0000000000005839                 db  50h ; P
.eh_frame:000000000000583A                 db  5Fh ; _
.eh_frame:000000000000583B                 db  0Eh
.eh_frame:000000000000583C                 db  58h ; X
.eh_frame:000000000000583D                 db  47h ; G
.eh_frame:000000000000583E                 db  0Eh
.eh_frame:000000000000583F                 db  60h ; `
.eh_frame:0000000000005840                 db  46h ; F
.eh_frame:0000000000005841                 db  0Eh
.eh_frame:0000000000005842                 db  68h ; h
.eh_frame:0000000000005843                 db  44h ; D
.eh_frame:0000000000005844                 db  0Eh
.eh_frame:0000000000005845                 db  70h ; p
.eh_frame:0000000000005846                 db  58h ; X
.eh_frame:0000000000005847                 db  0Eh
.eh_frame:0000000000005848                 db  38h ; 8
.eh_frame:0000000000005849                 db  41h ; A
.eh_frame:000000000000584A                 db  0Eh
.eh_frame:000000000000584B                 db  30h ; 0
.eh_frame:000000000000584C                 db  41h ; A
.eh_frame:000000000000584D                 db  0Eh
.eh_frame:000000000000584E                 db  28h ; (
.eh_frame:000000000000584F                 db  42h ; B
.eh_frame:0000000000005850                 db  0Eh
.eh_frame:0000000000005851                 db  20h
.eh_frame:0000000000005852                 db  42h ; B
.eh_frame:0000000000005853                 db  0Eh
.eh_frame:0000000000005854                 db  18h
.eh_frame:0000000000005855                 db  42h ; B
.eh_frame:0000000000005856                 db  0Eh
.eh_frame:0000000000005857                 db  10h
.eh_frame:0000000000005858                 db  42h ; B
.eh_frame:0000000000005859                 db  0Eh
.eh_frame:000000000000585A                 db    8
.eh_frame:000000000000585B                 db    0
.eh_frame:000000000000585C                 db  68h ; h
.eh_frame:000000000000585D                 db    0
.eh_frame:000000000000585E                 db    0
.eh_frame:000000000000585F                 db    0
.eh_frame:0000000000005860                 db 0D0h
.eh_frame:0000000000005861                 db    3
.eh_frame:0000000000005862                 db    0
.eh_frame:0000000000005863                 db    0
.eh_frame:0000000000005864                 db  3Ch ; <
.eh_frame:0000000000005865                 db 0DCh
.eh_frame:0000000000005866                 db 0FFh
.eh_frame:0000000000005867                 db 0FFh
.eh_frame:0000000000005868                 db 0E3h
.eh_frame:0000000000005869                 db    0
.eh_frame:000000000000586A                 db    0
.eh_frame:000000000000586B                 db    0
.eh_frame:000000000000586C                 db    0
.eh_frame:000000000000586D                 db  42h ; B
.eh_frame:000000000000586E                 db  0Eh
.eh_frame:000000000000586F                 db  10h
.eh_frame:0000000000005870                 db  8Fh
.eh_frame:0000000000005871                 db    2
.eh_frame:0000000000005872                 db  42h ; B
.eh_frame:0000000000005873                 db  0Eh
.eh_frame:0000000000005874                 db  18h
.eh_frame:0000000000005875                 db  8Eh
.eh_frame:0000000000005876                 db    3
.eh_frame:0000000000005877                 db  49h ; I
.eh_frame:0000000000005878                 db  0Eh
.eh_frame:0000000000005879                 db  20h
.eh_frame:000000000000587A                 db  8Dh
.eh_frame:000000000000587B                 db    4
.eh_frame:000000000000587C                 db  42h ; B
.eh_frame:000000000000587D                 db  0Eh
.eh_frame:000000000000587E                 db  28h ; (
.eh_frame:000000000000587F                 db  8Ch
.eh_frame:0000000000005880                 db    5
.eh_frame:0000000000005881                 db  44h ; D
.eh_frame:0000000000005882                 db  0Eh
.eh_frame:0000000000005883                 db  30h ; 0
.eh_frame:0000000000005884                 db  86h
.eh_frame:0000000000005885                 db    6
.eh_frame:0000000000005886                 db  41h ; A
.eh_frame:0000000000005887                 db  0Eh
.eh_frame:0000000000005888                 db  38h ; 8
.eh_frame:0000000000005889                 db  83h
.eh_frame:000000000000588A                 db    7
.eh_frame:000000000000588B                 db  4Dh ; M
.eh_frame:000000000000588C                 db  0Eh
.eh_frame:000000000000588D                 db  70h ; p
.eh_frame:000000000000588E                 db  65h ; e
.eh_frame:000000000000588F                 db  0Eh
.eh_frame:0000000000005890                 db  78h ; x
.eh_frame:0000000000005891                 db  4Dh ; M
.eh_frame:0000000000005892                 db  0Eh
.eh_frame:0000000000005893                 db  80h
.eh_frame:0000000000005894                 db    1
.eh_frame:0000000000005895                 db  46h ; F
.eh_frame:0000000000005896                 db  0Eh
.eh_frame:0000000000005897                 db  88h
.eh_frame:0000000000005898                 db    1
.eh_frame:0000000000005899                 db  42h ; B
.eh_frame:000000000000589A                 db  0Eh
.eh_frame:000000000000589B                 db  90h
.eh_frame:000000000000589C                 db    1
.eh_frame:000000000000589D                 db  5Eh ; ^
.eh_frame:000000000000589E                 db  0Eh
.eh_frame:000000000000589F                 db  70h ; p
.eh_frame:00000000000058A0                 db  56h ; V
.eh_frame:00000000000058A1                 db  0Eh
.eh_frame:00000000000058A2                 db  78h ; x
.eh_frame:00000000000058A3                 db  43h ; C
.eh_frame:00000000000058A4                 db  0Eh
.eh_frame:00000000000058A5                 db  80h
.eh_frame:00000000000058A6                 db    1
.eh_frame:00000000000058A7                 db  43h ; C
.eh_frame:00000000000058A8                 db  0Eh
.eh_frame:00000000000058A9                 db  88h
.eh_frame:00000000000058AA                 db    1
.eh_frame:00000000000058AB                 db  56h ; V
.eh_frame:00000000000058AC                 db  0Eh
.eh_frame:00000000000058AD                 db  90h
.eh_frame:00000000000058AE                 db    1
.eh_frame:00000000000058AF                 db  52h ; R
.eh_frame:00000000000058B0                 db  0Eh
.eh_frame:00000000000058B1                 db  70h ; p
.eh_frame:00000000000058B2                 db  5Bh ; [
.eh_frame:00000000000058B3                 db  0Eh
.eh_frame:00000000000058B4                 db  38h ; 8
.eh_frame:00000000000058B5                 db  41h ; A
.eh_frame:00000000000058B6                 db  0Eh
.eh_frame:00000000000058B7                 db  30h ; 0
.eh_frame:00000000000058B8                 db  41h ; A
.eh_frame:00000000000058B9                 db  0Eh
.eh_frame:00000000000058BA                 db  28h ; (
.eh_frame:00000000000058BB                 db  42h ; B
.eh_frame:00000000000058BC                 db  0Eh
.eh_frame:00000000000058BD                 db  20h
.eh_frame:00000000000058BE                 db  42h ; B
.eh_frame:00000000000058BF                 db  0Eh
.eh_frame:00000000000058C0                 db  18h
.eh_frame:00000000000058C1                 db  42h ; B
.eh_frame:00000000000058C2                 db  0Eh
.eh_frame:00000000000058C3                 db  10h
.eh_frame:00000000000058C4                 db  42h ; B
.eh_frame:00000000000058C5                 db  0Eh
.eh_frame:00000000000058C6                 db    8
.eh_frame:00000000000058C7                 db    0
.eh_frame:00000000000058C8                 db  10h
.eh_frame:00000000000058C9                 db    0
.eh_frame:00000000000058CA                 db    0
.eh_frame:00000000000058CB                 db    0
.eh_frame:00000000000058CC                 db  3Ch ; <
.eh_frame:00000000000058CD                 db    4
.eh_frame:00000000000058CE                 db    0
.eh_frame:00000000000058CF                 db    0
.eh_frame:00000000000058D0                 db 0C0h
.eh_frame:00000000000058D1                 db 0DCh
.eh_frame:00000000000058D2                 db 0FFh
.eh_frame:00000000000058D3                 db 0FFh
.eh_frame:00000000000058D4                 db  0Ah
.eh_frame:00000000000058D5                 db    0
.eh_frame:00000000000058D6                 db    0
.eh_frame:00000000000058D7                 db    0
.eh_frame:00000000000058D8                 db    0
.eh_frame:00000000000058D9                 db    0
.eh_frame:00000000000058DA                 db    0
.eh_frame:00000000000058DB                 db    0
.eh_frame:00000000000058DC                 db  28h ; (
.eh_frame:00000000000058DD                 db    0
.eh_frame:00000000000058DE                 db    0
.eh_frame:00000000000058DF                 db    0
.eh_frame:00000000000058E0                 db  50h ; P
.eh_frame:00000000000058E1                 db    4
.eh_frame:00000000000058E2                 db    0
.eh_frame:00000000000058E3                 db    0
.eh_frame:00000000000058E4                 db 0BCh
.eh_frame:00000000000058E5                 db 0DCh
.eh_frame:00000000000058E6                 db 0FFh
.eh_frame:00000000000058E7                 db 0FFh
.eh_frame:00000000000058E8                 db  93h
.eh_frame:00000000000058E9                 db    0
.eh_frame:00000000000058EA                 db    0
.eh_frame:00000000000058EB                 db    0
.eh_frame:00000000000058EC                 db    0
.eh_frame:00000000000058ED                 db  48h ; H
.eh_frame:00000000000058EE                 db  0Eh
.eh_frame:00000000000058EF                 db  10h
.eh_frame:00000000000058F0                 db  8Ch
.eh_frame:00000000000058F1                 db    2
.eh_frame:00000000000058F2                 db  48h ; H
.eh_frame:00000000000058F3                 db  0Eh
.eh_frame:00000000000058F4                 db  18h
.eh_frame:00000000000058F5                 db  86h
.eh_frame:00000000000058F6                 db    3
.eh_frame:00000000000058F7                 db  41h ; A
.eh_frame:00000000000058F8                 db  0Eh
.eh_frame:00000000000058F9                 db  20h
.eh_frame:00000000000058FA                 db  83h
.eh_frame:00000000000058FB                 db    4
.eh_frame:00000000000058FC                 db    2
.eh_frame:00000000000058FD                 db  74h ; t
.eh_frame:00000000000058FE                 db  0Eh
.eh_frame:00000000000058FF                 db  18h
.eh_frame:0000000000005900                 db  4Bh ; K
.eh_frame:0000000000005901                 db  0Eh
.eh_frame:0000000000005902                 db  10h
.eh_frame:0000000000005903                 db  42h ; B
.eh_frame:0000000000005904                 db  0Eh
.eh_frame:0000000000005905                 db    8
.eh_frame:0000000000005906                 db    0
.eh_frame:0000000000005907                 db    0
.eh_frame:0000000000005908                 db  10h
.eh_frame:0000000000005909                 db    0
.eh_frame:000000000000590A                 db    0
.eh_frame:000000000000590B                 db    0
.eh_frame:000000000000590C                 db  7Ch ; |
.eh_frame:000000000000590D                 db    4
.eh_frame:000000000000590E                 db    0
.eh_frame:000000000000590F                 db    0
.eh_frame:0000000000005910                 db  30h ; 0
.eh_frame:0000000000005911                 db 0DDh
.eh_frame:0000000000005912                 db 0FFh
.eh_frame:0000000000005913                 db 0FFh
.eh_frame:0000000000005914                 db  13h
.eh_frame:0000000000005915                 db    0
.eh_frame:0000000000005916                 db    0
.eh_frame:0000000000005917                 db    0
.eh_frame:0000000000005918                 db    0
.eh_frame:0000000000005919                 db    0
.eh_frame:000000000000591A                 db    0
.eh_frame:000000000000591B                 db    0
.eh_frame:000000000000591C                 db  10h
.eh_frame:000000000000591D                 db    0
.eh_frame:000000000000591E                 db    0
.eh_frame:000000000000591F                 db    0
.eh_frame:0000000000005920                 db  90h
.eh_frame:0000000000005921                 db    4
.eh_frame:0000000000005922                 db    0
.eh_frame:0000000000005923                 db    0
.eh_frame:0000000000005924                 db  3Ch ; <
.eh_frame:0000000000005925                 db 0DDh
.eh_frame:0000000000005926                 db 0FFh
.eh_frame:0000000000005927                 db 0FFh
.eh_frame:0000000000005928                 db  0Ch
.eh_frame:0000000000005929                 db    0
.eh_frame:000000000000592A                 db    0
.eh_frame:000000000000592B                 db    0
.eh_frame:000000000000592C                 db    0
.eh_frame:000000000000592D                 db    0
.eh_frame:000000000000592E                 db    0
.eh_frame:000000000000592F                 db    0
.eh_frame:0000000000005930                 db  10h
.eh_frame:0000000000005931                 db    0
.eh_frame:0000000000005932                 db    0
.eh_frame:0000000000005933                 db    0
.eh_frame:0000000000005934                 db 0A4h
.eh_frame:0000000000005935                 db    4
.eh_frame:0000000000005936                 db    0
.eh_frame:0000000000005937                 db    0
.eh_frame:0000000000005938                 db  38h ; 8
.eh_frame:0000000000005939                 db 0DDh
.eh_frame:000000000000593A                 db 0FFh
.eh_frame:000000000000593B                 db 0FFh
.eh_frame:000000000000593C                 db  18h
.eh_frame:000000000000593D                 db    0
.eh_frame:000000000000593E                 db    0
.eh_frame:000000000000593F                 db    0
.eh_frame:0000000000005940                 db    0
.eh_frame:0000000000005941                 db    0
.eh_frame:0000000000005942                 db    0
.eh_frame:0000000000005943                 db    0
.eh_frame:0000000000005944                 db  10h
.eh_frame:0000000000005945                 db    0
.eh_frame:0000000000005946                 db    0
.eh_frame:0000000000005947                 db    0
.eh_frame:0000000000005948                 db 0B8h
.eh_frame:0000000000005949                 db    4
.eh_frame:000000000000594A                 db    0
.eh_frame:000000000000594B                 db    0
.eh_frame:000000000000594C                 db  44h ; D
.eh_frame:000000000000594D                 db 0DDh
.eh_frame:000000000000594E                 db 0FFh
.eh_frame:000000000000594F                 db 0FFh
.eh_frame:0000000000005950                 db  14h
.eh_frame:0000000000005951                 db    0
.eh_frame:0000000000005952                 db    0
.eh_frame:0000000000005953                 db    0
.eh_frame:0000000000005954                 db    0
.eh_frame:0000000000005955                 db    0
.eh_frame:0000000000005956                 db    0
.eh_frame:0000000000005957                 db    0
.eh_frame:0000000000005958                 db  18h
.eh_frame:0000000000005959                 db    0
.eh_frame:000000000000595A                 db    0
.eh_frame:000000000000595B                 db    0
.eh_frame:000000000000595C                 db 0CCh
.eh_frame:000000000000595D                 db    4
.eh_frame:000000000000595E                 db    0
.eh_frame:000000000000595F                 db    0
.eh_frame:0000000000005960                 db  50h ; P
.eh_frame:0000000000005961                 db 0DDh
.eh_frame:0000000000005962                 db 0FFh
.eh_frame:0000000000005963                 db 0FFh
.eh_frame:0000000000005964                 db  8Eh
.eh_frame:0000000000005965                 db    0
.eh_frame:0000000000005966                 db    0
.eh_frame:0000000000005967                 db    0
.eh_frame:0000000000005968                 db    0
.eh_frame:0000000000005969                 db  44h ; D
.eh_frame:000000000000596A                 db  0Eh
.eh_frame:000000000000596B                 db  50h ; P
.eh_frame:000000000000596C                 db    2
.eh_frame:000000000000596D                 db  7Fh ; 
.eh_frame:000000000000596E                 db  0Ah
.eh_frame:000000000000596F                 db  0Eh
.eh_frame:0000000000005970                 db    8
.eh_frame:0000000000005971                 db  41h ; A
.eh_frame:0000000000005972                 db  0Bh
.eh_frame:0000000000005973                 db    0
.eh_frame:0000000000005974                 db  18h
.eh_frame:0000000000005975                 db    0
.eh_frame:0000000000005976                 db    0
.eh_frame:0000000000005977                 db    0
.eh_frame:0000000000005978                 db 0E8h
.eh_frame:0000000000005979                 db    4
.eh_frame:000000000000597A                 db    0
.eh_frame:000000000000597B                 db    0
.eh_frame:000000000000597C                 db 0C4h
.eh_frame:000000000000597D                 db 0DDh
.eh_frame:000000000000597E                 db 0FFh
.eh_frame:000000000000597F                 db 0FFh
.eh_frame:0000000000005980                 db  8Ah
.eh_frame:0000000000005981                 db    0
.eh_frame:0000000000005982                 db    0
.eh_frame:0000000000005983                 db    0
.eh_frame:0000000000005984                 db    0
.eh_frame:0000000000005985                 db  44h ; D
.eh_frame:0000000000005986                 db  0Eh
.eh_frame:0000000000005987                 db  50h ; P
.eh_frame:0000000000005988                 db    2
.eh_frame:0000000000005989                 db  7Bh ; {
.eh_frame:000000000000598A                 db  0Ah
.eh_frame:000000000000598B                 db  0Eh
.eh_frame:000000000000598C                 db    8
.eh_frame:000000000000598D                 db  41h ; A
.eh_frame:000000000000598E                 db  0Bh
.eh_frame:000000000000598F                 db    0
.eh_frame:0000000000005990                 db  10h
.eh_frame:0000000000005991                 db    0
.eh_frame:0000000000005992                 db    0
.eh_frame:0000000000005993                 db    0
.eh_frame:0000000000005994                 db    4
.eh_frame:0000000000005995                 db    5
.eh_frame:0000000000005996                 db    0
.eh_frame:0000000000005997                 db    0
.eh_frame:0000000000005998                 db  38h ; 8
.eh_frame:0000000000005999                 db 0DEh
.eh_frame:000000000000599A                 db 0FFh
.eh_frame:000000000000599B                 db 0FFh
.eh_frame:000000000000599C                 db  0Ch
.eh_frame:000000000000599D                 db    0
.eh_frame:000000000000599E                 db    0
.eh_frame:000000000000599F                 db    0
.eh_frame:00000000000059A0                 db    0
.eh_frame:00000000000059A1                 db    0
.eh_frame:00000000000059A2                 db    0
.eh_frame:00000000000059A3                 db    0
.eh_frame:00000000000059A4                 db  10h
.eh_frame:00000000000059A5                 db    0
.eh_frame:00000000000059A6                 db    0
.eh_frame:00000000000059A7                 db    0
.eh_frame:00000000000059A8                 db  18h
.eh_frame:00000000000059A9                 db    5
.eh_frame:00000000000059AA                 db    0
.eh_frame:00000000000059AB                 db    0
.eh_frame:00000000000059AC                 db  34h ; 4
.eh_frame:00000000000059AD                 db 0DEh
.eh_frame:00000000000059AE                 db 0FFh
.eh_frame:00000000000059AF                 db 0FFh
.eh_frame:00000000000059B0                 db  0Fh
.eh_frame:00000000000059B1                 db    0
.eh_frame:00000000000059B2                 db    0
.eh_frame:00000000000059B3                 db    0
.eh_frame:00000000000059B4                 db    0
.eh_frame:00000000000059B5                 db    0
.eh_frame:00000000000059B6                 db    0
.eh_frame:00000000000059B7                 db    0
.eh_frame:00000000000059B8                 db  18h
.eh_frame:00000000000059B9                 db    0
.eh_frame:00000000000059BA                 db    0
.eh_frame:00000000000059BB                 db    0
.eh_frame:00000000000059BC                 db  2Ch ; ,
.eh_frame:00000000000059BD                 db    5
.eh_frame:00000000000059BE                 db    0
.eh_frame:00000000000059BF                 db    0
.eh_frame:00000000000059C0                 db  30h ; 0
.eh_frame:00000000000059C1                 db 0DEh
.eh_frame:00000000000059C2                 db 0FFh
.eh_frame:00000000000059C3                 db 0FFh
.eh_frame:00000000000059C4                 db  98h
.eh_frame:00000000000059C5                 db    0
.eh_frame:00000000000059C6                 db    0
.eh_frame:00000000000059C7                 db    0
.eh_frame:00000000000059C8                 db    0
.eh_frame:00000000000059C9                 db  44h ; D
.eh_frame:00000000000059CA                 db  0Eh
.eh_frame:00000000000059CB                 db  50h ; P
.eh_frame:00000000000059CC                 db    2
.eh_frame:00000000000059CD                 db  8Eh
.eh_frame:00000000000059CE                 db  0Ah
.eh_frame:00000000000059CF                 db  0Eh
.eh_frame:00000000000059D0                 db    8
.eh_frame:00000000000059D1                 db  41h ; A
.eh_frame:00000000000059D2                 db  0Bh
.eh_frame:00000000000059D3                 db    0
.eh_frame:00000000000059D4                 db  10h
.eh_frame:00000000000059D5                 db    0
.eh_frame:00000000000059D6                 db    0
.eh_frame:00000000000059D7                 db    0
.eh_frame:00000000000059D8                 db  48h ; H
.eh_frame:00000000000059D9                 db    5
.eh_frame:00000000000059DA                 db    0
.eh_frame:00000000000059DB                 db    0
.eh_frame:00000000000059DC                 db 0B4h
.eh_frame:00000000000059DD                 db 0DEh
.eh_frame:00000000000059DE                 db 0FFh
.eh_frame:00000000000059DF                 db 0FFh
.eh_frame:00000000000059E0                 db  10h
.eh_frame:00000000000059E1                 db    0
.eh_frame:00000000000059E2                 db    0
.eh_frame:00000000000059E3                 db    0
.eh_frame:00000000000059E4                 db    0
.eh_frame:00000000000059E5                 db    0
.eh_frame:00000000000059E6                 db    0
.eh_frame:00000000000059E7                 db    0
.eh_frame:00000000000059E8                 db  10h
.eh_frame:00000000000059E9                 db    0
.eh_frame:00000000000059EA                 db    0
.eh_frame:00000000000059EB                 db    0
.eh_frame:00000000000059EC                 db  5Ch ; \
.eh_frame:00000000000059ED                 db    5
.eh_frame:00000000000059EE                 db    0
.eh_frame:00000000000059EF                 db    0
.eh_frame:00000000000059F0                 db 0B0h
.eh_frame:00000000000059F1                 db 0DEh
.eh_frame:00000000000059F2                 db 0FFh
.eh_frame:00000000000059F3                 db 0FFh
.eh_frame:00000000000059F4                 db  11h
.eh_frame:00000000000059F5                 db    0
.eh_frame:00000000000059F6                 db    0
.eh_frame:00000000000059F7                 db    0
.eh_frame:00000000000059F8                 db    0
.eh_frame:00000000000059F9                 db    0
.eh_frame:00000000000059FA                 db    0
.eh_frame:00000000000059FB                 db    0
.eh_frame:00000000000059FC                 db  10h
.eh_frame:00000000000059FD                 db    0
.eh_frame:00000000000059FE                 db    0
.eh_frame:00000000000059FF                 db    0
.eh_frame:0000000000005A00                 db  70h ; p
.eh_frame:0000000000005A01                 db    5
.eh_frame:0000000000005A02                 db    0
.eh_frame:0000000000005A03                 db    0
.eh_frame:0000000000005A04                 db 0BCh
.eh_frame:0000000000005A05                 db 0DEh
.eh_frame:0000000000005A06                 db 0FFh
.eh_frame:0000000000005A07                 db 0FFh
.eh_frame:0000000000005A08                 db  0Ah
.eh_frame:0000000000005A09                 db    0
.eh_frame:0000000000005A0A                 db    0
.eh_frame:0000000000005A0B                 db    0
.eh_frame:0000000000005A0C                 db    0
.eh_frame:0000000000005A0D                 db    0
.eh_frame:0000000000005A0E                 db    0
.eh_frame:0000000000005A0F                 db    0
.eh_frame:0000000000005A10                 db  18h
.eh_frame:0000000000005A11                 db    0
.eh_frame:0000000000005A12                 db    0
.eh_frame:0000000000005A13                 db    0
.eh_frame:0000000000005A14                 db  84h
.eh_frame:0000000000005A15                 db    5
.eh_frame:0000000000005A16                 db    0
.eh_frame:0000000000005A17                 db    0
.eh_frame:0000000000005A18                 db 0B8h
.eh_frame:0000000000005A19                 db 0DEh
.eh_frame:0000000000005A1A                 db 0FFh
.eh_frame:0000000000005A1B                 db 0FFh
.eh_frame:0000000000005A1C                 db  8Eh
.eh_frame:0000000000005A1D                 db    0
.eh_frame:0000000000005A1E                 db    0
.eh_frame:0000000000005A1F                 db    0
.eh_frame:0000000000005A20                 db    0
.eh_frame:0000000000005A21                 db  44h ; D
.eh_frame:0000000000005A22                 db  0Eh
.eh_frame:0000000000005A23                 db  50h ; P
.eh_frame:0000000000005A24                 db    2
.eh_frame:0000000000005A25                 db  7Fh ; 
.eh_frame:0000000000005A26                 db  0Ah
.eh_frame:0000000000005A27                 db  0Eh
.eh_frame:0000000000005A28                 db    8
.eh_frame:0000000000005A29                 db  41h ; A
.eh_frame:0000000000005A2A                 db  0Bh
.eh_frame:0000000000005A2B                 db    0
.eh_frame:0000000000005A2C                 db  18h
.eh_frame:0000000000005A2D                 db    0
.eh_frame:0000000000005A2E                 db    0
.eh_frame:0000000000005A2F                 db    0
.eh_frame:0000000000005A30                 db 0A0h
.eh_frame:0000000000005A31                 db    5
.eh_frame:0000000000005A32                 db    0
.eh_frame:0000000000005A33                 db    0
.eh_frame:0000000000005A34                 db  2Ch ; ,
.eh_frame:0000000000005A35                 db 0DFh
.eh_frame:0000000000005A36                 db 0FFh
.eh_frame:0000000000005A37                 db 0FFh
.eh_frame:0000000000005A38                 db  91h
.eh_frame:0000000000005A39                 db    0
.eh_frame:0000000000005A3A                 db    0
.eh_frame:0000000000005A3B                 db    0
.eh_frame:0000000000005A3C                 db    0
.eh_frame:0000000000005A3D                 db  44h ; D
.eh_frame:0000000000005A3E                 db  0Eh
.eh_frame:0000000000005A3F                 db  50h ; P
.eh_frame:0000000000005A40                 db    2
.eh_frame:0000000000005A41                 db  82h
.eh_frame:0000000000005A42                 db  0Ah
.eh_frame:0000000000005A43                 db  0Eh
.eh_frame:0000000000005A44                 db    8
.eh_frame:0000000000005A45                 db  41h ; A
.eh_frame:0000000000005A46                 db  0Bh
.eh_frame:0000000000005A47                 db    0
.eh_frame:0000000000005A48                 db  10h
.eh_frame:0000000000005A49                 db    0
.eh_frame:0000000000005A4A                 db    0
.eh_frame:0000000000005A4B                 db    0
.eh_frame:0000000000005A4C                 db 0BCh
.eh_frame:0000000000005A4D                 db    5
.eh_frame:0000000000005A4E                 db    0
.eh_frame:0000000000005A4F                 db    0
.eh_frame:0000000000005A50                 db 0B0h
.eh_frame:0000000000005A51                 db 0DFh
.eh_frame:0000000000005A52                 db 0FFh
.eh_frame:0000000000005A53                 db 0FFh
.eh_frame:0000000000005A54                 db  0Ch
.eh_frame:0000000000005A55                 db    0
.eh_frame:0000000000005A56                 db    0
.eh_frame:0000000000005A57                 db    0
.eh_frame:0000000000005A58                 db    0
.eh_frame:0000000000005A59                 db    0
.eh_frame:0000000000005A5A                 db    0
.eh_frame:0000000000005A5B                 db    0
.eh_frame:0000000000005A5C                 db  10h
.eh_frame:0000000000005A5D                 db    0
.eh_frame:0000000000005A5E                 db    0
.eh_frame:0000000000005A5F                 db    0
.eh_frame:0000000000005A60                 db 0D0h
.eh_frame:0000000000005A61                 db    5
.eh_frame:0000000000005A62                 db    0
.eh_frame:0000000000005A63                 db    0
.eh_frame:0000000000005A64                 db 0ACh
.eh_frame:0000000000005A65                 db 0DFh
.eh_frame:0000000000005A66                 db 0FFh
.eh_frame:0000000000005A67                 db 0FFh
.eh_frame:0000000000005A68                 db  17h
.eh_frame:0000000000005A69                 db    0
.eh_frame:0000000000005A6A                 db    0
.eh_frame:0000000000005A6B                 db    0
.eh_frame:0000000000005A6C                 db    0
.eh_frame:0000000000005A6D                 db    0
.eh_frame:0000000000005A6E                 db    0
.eh_frame:0000000000005A6F                 db    0
.eh_frame:0000000000005A70                 db  10h
.eh_frame:0000000000005A71                 db    0
.eh_frame:0000000000005A72                 db    0
.eh_frame:0000000000005A73                 db    0
.eh_frame:0000000000005A74                 db 0E4h
.eh_frame:0000000000005A75                 db    5
.eh_frame:0000000000005A76                 db    0
.eh_frame:0000000000005A77                 db    0
.eh_frame:0000000000005A78                 db 0B8h
.eh_frame:0000000000005A79                 db 0DFh
.eh_frame:0000000000005A7A                 db 0FFh
.eh_frame:0000000000005A7B                 db 0FFh
.eh_frame:0000000000005A7C                 db  13h
.eh_frame:0000000000005A7D                 db    0
.eh_frame:0000000000005A7E                 db    0
.eh_frame:0000000000005A7F                 db    0
.eh_frame:0000000000005A80                 db    0
.eh_frame:0000000000005A81                 db    0
.eh_frame:0000000000005A82                 db    0
.eh_frame:0000000000005A83                 db    0
.eh_frame:0000000000005A84                 db  10h
.eh_frame:0000000000005A85                 db    0
.eh_frame:0000000000005A86                 db    0
.eh_frame:0000000000005A87                 db    0
.eh_frame:0000000000005A88                 db 0F8h
.eh_frame:0000000000005A89                 db    5
.eh_frame:0000000000005A8A                 db    0
.eh_frame:0000000000005A8B                 db    0
.eh_frame:0000000000005A8C                 db 0C4h
.eh_frame:0000000000005A8D                 db 0DFh
.eh_frame:0000000000005A8E                 db 0FFh
.eh_frame:0000000000005A8F                 db 0FFh
.eh_frame:0000000000005A90                 db  0Ch
.eh_frame:0000000000005A91                 db    0
.eh_frame:0000000000005A92                 db    0
.eh_frame:0000000000005A93                 db    0
.eh_frame:0000000000005A94                 db    0
.eh_frame:0000000000005A95                 db    0
.eh_frame:0000000000005A96                 db    0
.eh_frame:0000000000005A97                 db    0
.eh_frame:0000000000005A98                 db  10h
.eh_frame:0000000000005A99                 db    0
.eh_frame:0000000000005A9A                 db    0
.eh_frame:0000000000005A9B                 db    0
.eh_frame:0000000000005A9C                 db  0Ch
.eh_frame:0000000000005A9D                 db    6
.eh_frame:0000000000005A9E                 db    0
.eh_frame:0000000000005A9F                 db    0
.eh_frame:0000000000005AA0                 db 0C0h
.eh_frame:0000000000005AA1                 db 0DFh
.eh_frame:0000000000005AA2                 db 0FFh
.eh_frame:0000000000005AA3                 db 0FFh
.eh_frame:0000000000005AA4                 db  14h
.eh_frame:0000000000005AA5                 db    0
.eh_frame:0000000000005AA6                 db    0
.eh_frame:0000000000005AA7                 db    0
.eh_frame:0000000000005AA8                 db    0
.eh_frame:0000000000005AA9                 db    0
.eh_frame:0000000000005AAA                 db    0
.eh_frame:0000000000005AAB                 db    0
.eh_frame:0000000000005AAC                 db  10h
.eh_frame:0000000000005AAD                 db    0
.eh_frame:0000000000005AAE                 db    0
.eh_frame:0000000000005AAF                 db    0
.eh_frame:0000000000005AB0                 db  20h
.eh_frame:0000000000005AB1                 db    6
.eh_frame:0000000000005AB2                 db    0
.eh_frame:0000000000005AB3                 db    0
.eh_frame:0000000000005AB4                 db 0CCh
.eh_frame:0000000000005AB5                 db 0DFh
.eh_frame:0000000000005AB6                 db 0FFh
.eh_frame:0000000000005AB7                 db 0FFh
.eh_frame:0000000000005AB8                 db  13h
.eh_frame:0000000000005AB9                 db    0
.eh_frame:0000000000005ABA                 db    0
.eh_frame:0000000000005ABB                 db    0
.eh_frame:0000000000005ABC                 db    0
.eh_frame:0000000000005ABD                 db    0
.eh_frame:0000000000005ABE                 db    0
.eh_frame:0000000000005ABF                 db    0
.eh_frame:0000000000005AC0                 db  14h
.eh_frame:0000000000005AC1                 db    0
.eh_frame:0000000000005AC2                 db    0
.eh_frame:0000000000005AC3                 db    0
.eh_frame:0000000000005AC4                 db  34h ; 4
.eh_frame:0000000000005AC5                 db    6
.eh_frame:0000000000005AC6                 db    0
.eh_frame:0000000000005AC7                 db    0
.eh_frame:0000000000005AC8                 db 0D8h
.eh_frame:0000000000005AC9                 db 0DFh
.eh_frame:0000000000005ACA                 db 0FFh
.eh_frame:0000000000005ACB                 db 0FFh
.eh_frame:0000000000005ACC                 db  18h
.eh_frame:0000000000005ACD                 db    0
.eh_frame:0000000000005ACE                 db    0
.eh_frame:0000000000005ACF                 db    0
.eh_frame:0000000000005AD0                 db    0
.eh_frame:0000000000005AD1                 db    0
.eh_frame:0000000000005AD2                 db    0
.eh_frame:0000000000005AD3                 db    0
.eh_frame:0000000000005AD4                 db    0
.eh_frame:0000000000005AD5                 db    0
.eh_frame:0000000000005AD6                 db    0
.eh_frame:0000000000005AD7                 db    0
.eh_frame:0000000000005AD8                 db  10h
.eh_frame:0000000000005AD9                 db    1
.eh_frame:0000000000005ADA                 db    0
.eh_frame:0000000000005ADB                 db    0
.eh_frame:0000000000005ADC                 db  4Ch ; L
.eh_frame:0000000000005ADD                 db    6
.eh_frame:0000000000005ADE                 db    0
.eh_frame:0000000000005ADF                 db    0
.eh_frame:0000000000005AE0                 db 0E0h
.eh_frame:0000000000005AE1                 db 0DFh
.eh_frame:0000000000005AE2                 db 0FFh
.eh_frame:0000000000005AE3                 db 0FFh
.eh_frame:0000000000005AE4                 db  17h
.eh_frame:0000000000005AE5                 db    4
.eh_frame:0000000000005AE6                 db    0
.eh_frame:0000000000005AE7                 db    0
.eh_frame:0000000000005AE8                 db    0
.eh_frame:0000000000005AE9                 db  42h ; B
.eh_frame:0000000000005AEA                 db  0Eh
.eh_frame:0000000000005AEB                 db  10h
.eh_frame:0000000000005AEC                 db  8Fh
.eh_frame:0000000000005AED                 db    2
.eh_frame:0000000000005AEE                 db  42h ; B
.eh_frame:0000000000005AEF                 db  0Eh
.eh_frame:0000000000005AF0                 db  18h
.eh_frame:0000000000005AF1                 db  8Eh
.eh_frame:0000000000005AF2                 db    3
.eh_frame:0000000000005AF3                 db  42h ; B
.eh_frame:0000000000005AF4                 db  0Eh
.eh_frame:0000000000005AF5                 db  20h
.eh_frame:0000000000005AF6                 db  8Dh
.eh_frame:0000000000005AF7                 db    4
.eh_frame:0000000000005AF8                 db  42h ; B
.eh_frame:0000000000005AF9                 db  0Eh
.eh_frame:0000000000005AFA                 db  28h ; (
.eh_frame:0000000000005AFB                 db  8Ch
.eh_frame:0000000000005AFC                 db    5
.eh_frame:0000000000005AFD                 db  44h ; D
.eh_frame:0000000000005AFE                 db  0Eh
.eh_frame:0000000000005AFF                 db  30h ; 0
.eh_frame:0000000000005B00                 db  86h
.eh_frame:0000000000005B01                 db    6
.eh_frame:0000000000005B02                 db  41h ; A
.eh_frame:0000000000005B03                 db  0Eh
.eh_frame:0000000000005B04                 db  38h ; 8
.eh_frame:0000000000005B05                 db  83h
.eh_frame:0000000000005B06                 db    7
.eh_frame:0000000000005B07                 db  4Ah ; J
.eh_frame:0000000000005B08                 db  0Eh
.eh_frame:0000000000005B09                 db  60h ; `
.eh_frame:0000000000005B0A                 db    2
.eh_frame:0000000000005B0B                 db 0DDh
.eh_frame:0000000000005B0C                 db  0Eh
.eh_frame:0000000000005B0D                 db  68h ; h
.eh_frame:0000000000005B0E                 db  57h ; W
.eh_frame:0000000000005B0F                 db  0Eh
.eh_frame:0000000000005B10                 db  70h ; p
.eh_frame:0000000000005B11                 db  42h ; B
.eh_frame:0000000000005B12                 db  0Eh
.eh_frame:0000000000005B13                 db  78h ; x
.eh_frame:0000000000005B14                 db  42h ; B
.eh_frame:0000000000005B15                 db  0Eh
.eh_frame:0000000000005B16                 db  80h
.eh_frame:0000000000005B17                 db    1
.eh_frame:0000000000005B18                 db  42h ; B
.eh_frame:0000000000005B19                 db  0Eh
.eh_frame:0000000000005B1A                 db  88h
.eh_frame:0000000000005B1B                 db    1
.eh_frame:0000000000005B1C                 db  42h ; B
.eh_frame:0000000000005B1D                 db  0Eh
.eh_frame:0000000000005B1E                 db  90h
.eh_frame:0000000000005B1F                 db    1
.eh_frame:0000000000005B20                 db  53h ; S
.eh_frame:0000000000005B21                 db  0Eh
.eh_frame:0000000000005B22                 db  60h ; `
.eh_frame:0000000000005B23                 db  44h ; D
.eh_frame:0000000000005B24                 db  0Ah
.eh_frame:0000000000005B25                 db  0Eh
.eh_frame:0000000000005B26                 db  38h ; 8
.eh_frame:0000000000005B27                 db  41h ; A
.eh_frame:0000000000005B28                 db  0Eh
.eh_frame:0000000000005B29                 db  30h ; 0
.eh_frame:0000000000005B2A                 db  41h ; A
.eh_frame:0000000000005B2B                 db  0Eh
.eh_frame:0000000000005B2C                 db  28h ; (
.eh_frame:0000000000005B2D                 db  42h ; B
.eh_frame:0000000000005B2E                 db  0Eh
.eh_frame:0000000000005B2F                 db  20h
.eh_frame:0000000000005B30                 db  42h ; B
.eh_frame:0000000000005B31                 db  0Eh
.eh_frame:0000000000005B32                 db  18h
.eh_frame:0000000000005B33                 db  42h ; B
.eh_frame:0000000000005B34                 db  0Eh
.eh_frame:0000000000005B35                 db  10h
.eh_frame:0000000000005B36                 db  42h ; B
.eh_frame:0000000000005B37                 db  0Eh
.eh_frame:0000000000005B38                 db    8
.eh_frame:0000000000005B39                 db  44h ; D
.eh_frame:0000000000005B3A                 db  0Bh
.eh_frame:0000000000005B3B                 db    2
.eh_frame:0000000000005B3C                 db  78h ; x
.eh_frame:0000000000005B3D                 db  0Ah
.eh_frame:0000000000005B3E                 db  0Eh
.eh_frame:0000000000005B3F                 db  68h ; h
.eh_frame:0000000000005B40                 db  48h ; H
.eh_frame:0000000000005B41                 db  0Bh
.eh_frame:0000000000005B42                 db  5Ah ; Z
.eh_frame:0000000000005B43                 db  0Ah
.eh_frame:0000000000005B44                 db  0Eh
.eh_frame:0000000000005B45                 db  38h ; 8
.eh_frame:0000000000005B46                 db  47h ; G
.eh_frame:0000000000005B47                 db  0Eh
.eh_frame:0000000000005B48                 db  30h ; 0
.eh_frame:0000000000005B49                 db  41h ; A
.eh_frame:0000000000005B4A                 db  0Eh
.eh_frame:0000000000005B4B                 db  28h ; (
.eh_frame:0000000000005B4C                 db  42h ; B
.eh_frame:0000000000005B4D                 db  0Eh
.eh_frame:0000000000005B4E                 db  20h
.eh_frame:0000000000005B4F                 db  42h ; B
.eh_frame:0000000000005B50                 db  0Eh
.eh_frame:0000000000005B51                 db  18h
.eh_frame:0000000000005B52                 db  42h ; B
.eh_frame:0000000000005B53                 db  0Eh
.eh_frame:0000000000005B54                 db  10h
.eh_frame:0000000000005B55                 db  42h ; B
.eh_frame:0000000000005B56                 db  0Eh
.eh_frame:0000000000005B57                 db    8
.eh_frame:0000000000005B58                 db  56h ; V
.eh_frame:0000000000005B59                 db  0Bh
.eh_frame:0000000000005B5A                 db  5Eh ; ^
.eh_frame:0000000000005B5B                 db  0Ah
.eh_frame:0000000000005B5C                 db  0Eh
.eh_frame:0000000000005B5D                 db  38h ; 8
.eh_frame:0000000000005B5E                 db  52h ; R
.eh_frame:0000000000005B5F                 db  0Eh
.eh_frame:0000000000005B60                 db  30h ; 0
.eh_frame:0000000000005B61                 db  41h ; A
.eh_frame:0000000000005B62                 db  0Eh
.eh_frame:0000000000005B63                 db  28h ; (
.eh_frame:0000000000005B64                 db  42h ; B
.eh_frame:0000000000005B65                 db  0Eh
.eh_frame:0000000000005B66                 db  20h
.eh_frame:0000000000005B67                 db  42h ; B
.eh_frame:0000000000005B68                 db  0Eh
.eh_frame:0000000000005B69                 db  18h
.eh_frame:0000000000005B6A                 db  42h ; B
.eh_frame:0000000000005B6B                 db  0Eh
.eh_frame:0000000000005B6C                 db  10h
.eh_frame:0000000000005B6D                 db  42h ; B
.eh_frame:0000000000005B6E                 db  0Eh
.eh_frame:0000000000005B6F                 db    8
.eh_frame:0000000000005B70                 db  4Fh ; O
.eh_frame:0000000000005B71                 db  0Bh
.eh_frame:0000000000005B72                 db  62h ; b
.eh_frame:0000000000005B73                 db  0Ah
.eh_frame:0000000000005B74                 db  0Eh
.eh_frame:0000000000005B75                 db  38h ; 8
.eh_frame:0000000000005B76                 db  50h ; P
.eh_frame:0000000000005B77                 db  0Eh
.eh_frame:0000000000005B78                 db  30h ; 0
.eh_frame:0000000000005B79                 db  41h ; A
.eh_frame:0000000000005B7A                 db  0Eh
.eh_frame:0000000000005B7B                 db  28h ; (
.eh_frame:0000000000005B7C                 db  42h ; B
.eh_frame:0000000000005B7D                 db  0Eh
.eh_frame:0000000000005B7E                 db  20h
.eh_frame:0000000000005B7F                 db  42h ; B
.eh_frame:0000000000005B80                 db  0Eh
.eh_frame:0000000000005B81                 db  18h
.eh_frame:0000000000005B82                 db  42h ; B
.eh_frame:0000000000005B83                 db  0Eh
.eh_frame:0000000000005B84                 db  10h
.eh_frame:0000000000005B85                 db  42h ; B
.eh_frame:0000000000005B86                 db  0Eh
.eh_frame:0000000000005B87                 db    8
.eh_frame:0000000000005B88                 db  55h ; U
.eh_frame:0000000000005B89                 db  0Bh
.eh_frame:0000000000005B8A                 db  66h ; f
.eh_frame:0000000000005B8B                 db  0Eh
.eh_frame:0000000000005B8C                 db  68h ; h
.eh_frame:0000000000005B8D                 db  42h ; B
.eh_frame:0000000000005B8E                 db  0Eh
.eh_frame:0000000000005B8F                 db  70h ; p
.eh_frame:0000000000005B90                 db  5Ch ; \
.eh_frame:0000000000005B91                 db  0Eh
.eh_frame:0000000000005B92                 db  68h ; h
.eh_frame:0000000000005B93                 db  41h ; A
.eh_frame:0000000000005B94                 db  0Eh
.eh_frame:0000000000005B95                 db  60h ; `
.eh_frame:0000000000005B96                 db  44h ; D
.eh_frame:0000000000005B97                 db  0Ah
.eh_frame:0000000000005B98                 db  0Eh
.eh_frame:0000000000005B99                 db  38h ; 8
.eh_frame:0000000000005B9A                 db  41h ; A
.eh_frame:0000000000005B9B                 db  0Eh
.eh_frame:0000000000005B9C                 db  30h ; 0
.eh_frame:0000000000005B9D                 db  41h ; A
.eh_frame:0000000000005B9E                 db  0Eh
.eh_frame:0000000000005B9F                 db  28h ; (
.eh_frame:0000000000005BA0                 db  42h ; B
.eh_frame:0000000000005BA1                 db  0Eh
.eh_frame:0000000000005BA2                 db  20h
.eh_frame:0000000000005BA3                 db  42h ; B
.eh_frame:0000000000005BA4                 db  0Eh
.eh_frame:0000000000005BA5                 db  18h
.eh_frame:0000000000005BA6                 db  42h ; B
.eh_frame:0000000000005BA7                 db  0Eh
.eh_frame:0000000000005BA8                 db  10h
.eh_frame:0000000000005BA9                 db  42h ; B
.eh_frame:0000000000005BAA                 db  0Eh
.eh_frame:0000000000005BAB                 db    8
.eh_frame:0000000000005BAC                 db  45h ; E
.eh_frame:0000000000005BAD                 db  0Bh
.eh_frame:0000000000005BAE                 db  68h ; h
.eh_frame:0000000000005BAF                 db  0Ah
.eh_frame:0000000000005BB0                 db  0Eh
.eh_frame:0000000000005BB1                 db  68h ; h
.eh_frame:0000000000005BB2                 db  48h ; H
.eh_frame:0000000000005BB3                 db  0Bh
.eh_frame:0000000000005BB4                 db  72h ; r
.eh_frame:0000000000005BB5                 db  0Eh
.eh_frame:0000000000005BB6                 db  68h ; h
.eh_frame:0000000000005BB7                 db  45h ; E
.eh_frame:0000000000005BB8                 db  0Eh
.eh_frame:0000000000005BB9                 db  70h ; p
.eh_frame:0000000000005BBA                 db  42h ; B
.eh_frame:0000000000005BBB                 db  0Eh
.eh_frame:0000000000005BBC                 db  78h ; x
.eh_frame:0000000000005BBD                 db  42h ; B
.eh_frame:0000000000005BBE                 db  0Eh
.eh_frame:0000000000005BBF                 db  80h
.eh_frame:0000000000005BC0                 db    1
.eh_frame:0000000000005BC1                 db  5Eh ; ^
.eh_frame:0000000000005BC2                 db  0Eh
.eh_frame:0000000000005BC3                 db  60h ; `
.eh_frame:0000000000005BC4                 db  44h ; D
.eh_frame:0000000000005BC5                 db  0Ah
.eh_frame:0000000000005BC6                 db  0Eh
.eh_frame:0000000000005BC7                 db  38h ; 8
.eh_frame:0000000000005BC8                 db  41h ; A
.eh_frame:0000000000005BC9                 db  0Eh
.eh_frame:0000000000005BCA                 db  30h ; 0
.eh_frame:0000000000005BCB                 db  41h ; A
.eh_frame:0000000000005BCC                 db  0Eh
.eh_frame:0000000000005BCD                 db  28h ; (
.eh_frame:0000000000005BCE                 db  42h ; B
.eh_frame:0000000000005BCF                 db  0Eh
.eh_frame:0000000000005BD0                 db  20h
.eh_frame:0000000000005BD1                 db  42h ; B
.eh_frame:0000000000005BD2                 db  0Eh
.eh_frame:0000000000005BD3                 db  18h
.eh_frame:0000000000005BD4                 db  42h ; B
.eh_frame:0000000000005BD5                 db  0Eh
.eh_frame:0000000000005BD6                 db  10h
.eh_frame:0000000000005BD7                 db  42h ; B
.eh_frame:0000000000005BD8                 db  0Eh
.eh_frame:0000000000005BD9                 db    8
.eh_frame:0000000000005BDA                 db  41h ; A
.eh_frame:0000000000005BDB                 db  0Bh
.eh_frame:0000000000005BDC                 db  79h ; y
.eh_frame:0000000000005BDD                 db  0Ah
.eh_frame:0000000000005BDE                 db  0Eh
.eh_frame:0000000000005BDF                 db  68h ; h
.eh_frame:0000000000005BE0                 db  42h ; B
.eh_frame:0000000000005BE1                 db  0Eh
.eh_frame:0000000000005BE2                 db  70h ; p
.eh_frame:0000000000005BE3                 db  42h ; B
.eh_frame:0000000000005BE4                 db  0Eh
.eh_frame:0000000000005BE5                 db  78h ; x
.eh_frame:0000000000005BE6                 db  42h ; B
.eh_frame:0000000000005BE7                 db  0Eh
.eh_frame:0000000000005BE8                 db  80h
.eh_frame:0000000000005BE9                 db    1
.eh_frame:0000000000005BEA                 db  51h ; Q
.eh_frame:0000000000005BEB                 db  0Bh
.eh_frame:0000000000005BEC                 db  10h
.eh_frame:0000000000005BED                 db    0
.eh_frame:0000000000005BEE                 db    0
.eh_frame:0000000000005BEF                 db    0
.eh_frame:0000000000005BF0                 db  60h ; `
.eh_frame:0000000000005BF1                 db    7
.eh_frame:0000000000005BF2                 db    0
.eh_frame:0000000000005BF3                 db    0
.eh_frame:0000000000005BF4                 db 0ECh
.eh_frame:0000000000005BF5                 db 0E2h
.eh_frame:0000000000005BF6                 db 0FFh
.eh_frame:0000000000005BF7                 db 0FFh
.eh_frame:0000000000005BF8                 db  20h
.eh_frame:0000000000005BF9                 db    0
.eh_frame:0000000000005BFA                 db    0
.eh_frame:0000000000005BFB                 db    0
.eh_frame:0000000000005BFC                 db    0
.eh_frame:0000000000005BFD                 db    0
.eh_frame:0000000000005BFE                 db    0
.eh_frame:0000000000005BFF                 db    0
.eh_frame:0000000000005C00                 db  18h
.eh_frame:0000000000005C01                 db    0
.eh_frame:0000000000005C02                 db    0
.eh_frame:0000000000005C03                 db    0
.eh_frame:0000000000005C04                 db  74h ; t
.eh_frame:0000000000005C05                 db    7
.eh_frame:0000000000005C06                 db    0
.eh_frame:0000000000005C07                 db    0
.eh_frame:0000000000005C08                 db 0F8h
.eh_frame:0000000000005C09                 db 0E2h
.eh_frame:0000000000005C0A                 db 0FFh
.eh_frame:0000000000005C0B                 db 0FFh
.eh_frame:0000000000005C0C                 db  78h ; x
.eh_frame:0000000000005C0D                 db    0
.eh_frame:0000000000005C0E                 db    0
.eh_frame:0000000000005C0F                 db    0
.eh_frame:0000000000005C10                 db    0
.eh_frame:0000000000005C11                 db  44h ; D
.eh_frame:0000000000005C12                 db  0Eh
.eh_frame:0000000000005C13                 db  70h ; p
.eh_frame:0000000000005C14                 db    2
.eh_frame:0000000000005C15                 db  60h ; `
.eh_frame:0000000000005C16                 db  0Ah
.eh_frame:0000000000005C17                 db  0Eh
.eh_frame:0000000000005C18                 db    8
.eh_frame:0000000000005C19                 db  41h ; A
.eh_frame:0000000000005C1A                 db  0Bh
.eh_frame:0000000000005C1B                 db    0
.eh_frame:0000000000005C1C                 db  28h ; (
.eh_frame:0000000000005C1D                 db    0
.eh_frame:0000000000005C1E                 db    0
.eh_frame:0000000000005C1F                 db    0
.eh_frame:0000000000005C20                 db  90h
.eh_frame:0000000000005C21                 db    7
.eh_frame:0000000000005C22                 db    0
.eh_frame:0000000000005C23                 db    0
.eh_frame:0000000000005C24                 db  5Ch ; \
.eh_frame:0000000000005C25                 db 0E3h
.eh_frame:0000000000005C26                 db 0FFh
.eh_frame:0000000000005C27                 db 0FFh
.eh_frame:0000000000005C28                 db 0D5h
.eh_frame:0000000000005C29                 db    0
.eh_frame:0000000000005C2A                 db    0
.eh_frame:0000000000005C2B                 db    0
.eh_frame:0000000000005C2C                 db    0
.eh_frame:0000000000005C2D                 db  41h ; A
.eh_frame:0000000000005C2E                 db  0Eh
.eh_frame:0000000000005C2F                 db  10h
.eh_frame:0000000000005C30                 db  86h
.eh_frame:0000000000005C31                 db    2
.eh_frame:0000000000005C32                 db  41h ; A
.eh_frame:0000000000005C33                 db  0Eh
.eh_frame:0000000000005C34                 db  18h
.eh_frame:0000000000005C35                 db  83h
.eh_frame:0000000000005C36                 db    3
.eh_frame:0000000000005C37                 db  50h ; P
.eh_frame:0000000000005C38                 db  0Eh
.eh_frame:0000000000005C39                 db 0D0h
.eh_frame:0000000000005C3A                 db    1
.eh_frame:0000000000005C3B                 db    2
.eh_frame:0000000000005C3C                 db 0ABh
.eh_frame:0000000000005C3D                 db  0Ah
.eh_frame:0000000000005C3E                 db  0Eh
.eh_frame:0000000000005C3F                 db  18h
.eh_frame:0000000000005C40                 db  41h ; A
.eh_frame:0000000000005C41                 db  0Eh
.eh_frame:0000000000005C42                 db  10h
.eh_frame:0000000000005C43                 db  41h ; A
.eh_frame:0000000000005C44                 db  0Eh
.eh_frame:0000000000005C45                 db    8
.eh_frame:0000000000005C46                 db  41h ; A
.eh_frame:0000000000005C47                 db  0Bh
.eh_frame:0000000000005C48                 db  1Ch
.eh_frame:0000000000005C49                 db    0
.eh_frame:0000000000005C4A                 db    0
.eh_frame:0000000000005C4B                 db    0
.eh_frame:0000000000005C4C                 db 0BCh
.eh_frame:0000000000005C4D                 db    7
.eh_frame:0000000000005C4E                 db    0
.eh_frame:0000000000005C4F                 db    0
.eh_frame:0000000000005C50                 db  10h
.eh_frame:0000000000005C51                 db 0E4h
.eh_frame:0000000000005C52                 db 0FFh
.eh_frame:0000000000005C53                 db 0FFh
.eh_frame:0000000000005C54                 db  80h
.eh_frame:0000000000005C55                 db    0
.eh_frame:0000000000005C56                 db    0
.eh_frame:0000000000005C57                 db    0
.eh_frame:0000000000005C58                 db    0
.eh_frame:0000000000005C59                 db  41h ; A
.eh_frame:0000000000005C5A                 db  0Eh
.eh_frame:0000000000005C5B                 db  10h
.eh_frame:0000000000005C5C                 db  83h
.eh_frame:0000000000005C5D                 db    2
.eh_frame:0000000000005C5E                 db    2
.eh_frame:0000000000005C5F                 db  7Ah ; z
.eh_frame:0000000000005C60                 db  0Eh
.eh_frame:0000000000005C61                 db    8
.eh_frame:0000000000005C62                 db    0
.eh_frame:0000000000005C63                 db    0
.eh_frame:0000000000005C64                 db    0
.eh_frame:0000000000005C65                 db    0
.eh_frame:0000000000005C66                 db    0
.eh_frame:0000000000005C67                 db    0
.eh_frame:0000000000005C68                 db  18h
.eh_frame:0000000000005C69                 db    0
.eh_frame:0000000000005C6A                 db    0
.eh_frame:0000000000005C6B                 db    0
.eh_frame:0000000000005C6C                 db 0DCh
.eh_frame:0000000000005C6D                 db    7
.eh_frame:0000000000005C6E                 db    0
.eh_frame:0000000000005C6F                 db    0
.eh_frame:0000000000005C70                 db  70h ; p
.eh_frame:0000000000005C71                 db 0E4h
.eh_frame:0000000000005C72                 db 0FFh
.eh_frame:0000000000005C73                 db 0FFh
.eh_frame:0000000000005C74                 db  1Ah
.eh_frame:0000000000005C75                 db    0
.eh_frame:0000000000005C76                 db    0
.eh_frame:0000000000005C77                 db    0
.eh_frame:0000000000005C78                 db    0
.eh_frame:0000000000005C79                 db  41h ; A
.eh_frame:0000000000005C7A                 db  0Eh
.eh_frame:0000000000005C7B                 db  10h
.eh_frame:0000000000005C7C                 db  83h
.eh_frame:0000000000005C7D                 db    2
.eh_frame:0000000000005C7E                 db  53h ; S
.eh_frame:0000000000005C7F                 db  0Ah
.eh_frame:0000000000005C80                 db  0Eh
.eh_frame:0000000000005C81                 db    8
.eh_frame:0000000000005C82                 db  41h ; A
.eh_frame:0000000000005C83                 db  0Bh
.eh_frame:0000000000005C84                 db  10h
.eh_frame:0000000000005C85                 db    0
.eh_frame:0000000000005C86                 db    0
.eh_frame:0000000000005C87                 db    0
.eh_frame:0000000000005C88                 db 0F8h
.eh_frame:0000000000005C89                 db    7
.eh_frame:0000000000005C8A                 db    0
.eh_frame:0000000000005C8B                 db    0
.eh_frame:0000000000005C8C                 db  74h ; t
.eh_frame:0000000000005C8D                 db 0E4h
.eh_frame:0000000000005C8E                 db 0FFh
.eh_frame:0000000000005C8F                 db 0FFh
.eh_frame:0000000000005C90                 db  24h ; $
.eh_frame:0000000000005C91                 db    0
.eh_frame:0000000000005C92                 db    0
.eh_frame:0000000000005C93                 db    0
.eh_frame:0000000000005C94                 db    0
.eh_frame:0000000000005C95                 db  5Fh ; _
.eh_frame:0000000000005C96                 db  0Eh
.eh_frame:0000000000005C97                 db  10h
.eh_frame:0000000000005C98                 db  10h
.eh_frame:0000000000005C99                 db    0
.eh_frame:0000000000005C9A                 db    0
.eh_frame:0000000000005C9B                 db    0
.eh_frame:0000000000005C9C                 db  0Ch
.eh_frame:0000000000005C9D                 db    8
.eh_frame:0000000000005C9E                 db    0
.eh_frame:0000000000005C9F                 db    0
.eh_frame:0000000000005CA0                 db  90h
.eh_frame:0000000000005CA1                 db 0E4h
.eh_frame:0000000000005CA2                 db 0FFh
.eh_frame:0000000000005CA3                 db 0FFh
.eh_frame:0000000000005CA4                 db    2
.eh_frame:0000000000005CA5                 db    0
.eh_frame:0000000000005CA6                 db    0
.eh_frame:0000000000005CA7                 db    0
.eh_frame:0000000000005CA8                 db    0
.eh_frame:0000000000005CA9                 db    0
.eh_frame:0000000000005CAA                 db    0
.eh_frame:0000000000005CAB                 db    0
.eh_frame:0000000000005CAC                 db  20h
.eh_frame:0000000000005CAD                 db    0
.eh_frame:0000000000005CAE                 db    0
.eh_frame:0000000000005CAF                 db    0
.eh_frame:0000000000005CB0                 db  20h
.eh_frame:0000000000005CB1                 db    8
.eh_frame:0000000000005CB2                 db    0
.eh_frame:0000000000005CB3                 db    0
.eh_frame:0000000000005CB4                 db  8Ch
.eh_frame:0000000000005CB5                 db 0E4h
.eh_frame:0000000000005CB6                 db 0FFh
.eh_frame:0000000000005CB7                 db 0FFh
.eh_frame:0000000000005CB8                 db  36h ; 6
.eh_frame:0000000000005CB9                 db    0
.eh_frame:0000000000005CBA                 db    0
.eh_frame:0000000000005CBB                 db    0
.eh_frame:0000000000005CBC                 db    0
.eh_frame:0000000000005CBD                 db  44h ; D
.eh_frame:0000000000005CBE                 db  0Eh
.eh_frame:0000000000005CBF                 db  10h
.eh_frame:0000000000005CC0                 db  83h
.eh_frame:0000000000005CC1                 db    2
.eh_frame:0000000000005CC2                 db  5Dh ; ]
.eh_frame:0000000000005CC3                 db  0Ah
.eh_frame:0000000000005CC4                 db  0Eh
.eh_frame:0000000000005CC5                 db    8
.eh_frame:0000000000005CC6                 db  47h ; G
.eh_frame:0000000000005CC7                 db  0Bh
.eh_frame:0000000000005CC8                 db  48h ; H
.eh_frame:0000000000005CC9                 db  0Ah
.eh_frame:0000000000005CCA                 db  0Eh
.eh_frame:0000000000005CCB                 db    8
.eh_frame:0000000000005CCC                 db  41h ; A
.eh_frame:0000000000005CCD                 db  0Bh
.eh_frame:0000000000005CCE                 db    0
.eh_frame:0000000000005CCF                 db    0
.eh_frame:0000000000005CD0                 db  10h
.eh_frame:0000000000005CD1                 db    0
.eh_frame:0000000000005CD2                 db    0
.eh_frame:0000000000005CD3                 db    0
.eh_frame:0000000000005CD4                 db  44h ; D
.eh_frame:0000000000005CD5                 db    8
.eh_frame:0000000000005CD6                 db    0
.eh_frame:0000000000005CD7                 db    0
.eh_frame:0000000000005CD8                 db 0A8h
.eh_frame:0000000000005CD9                 db 0E4h
.eh_frame:0000000000005CDA                 db 0FFh
.eh_frame:0000000000005CDB                 db 0FFh
.eh_frame:0000000000005CDC                 db  24h ; $
.eh_frame:0000000000005CDD                 db    0
.eh_frame:0000000000005CDE                 db    0
.eh_frame:0000000000005CDF                 db    0
.eh_frame:0000000000005CE0                 db    0
.eh_frame:0000000000005CE1                 db  5Fh ; _
.eh_frame:0000000000005CE2                 db  0Eh
.eh_frame:0000000000005CE3                 db  10h
.eh_frame:0000000000005CE4                 db  14h
.eh_frame:0000000000005CE5                 db    0
.eh_frame:0000000000005CE6                 db    0
.eh_frame:0000000000005CE7                 db    0
.eh_frame:0000000000005CE8                 db  58h ; X
.eh_frame:0000000000005CE9                 db    8
.eh_frame:0000000000005CEA                 db    0
.eh_frame:0000000000005CEB                 db    0
.eh_frame:0000000000005CEC                 db 0C4h
.eh_frame:0000000000005CED                 db 0E4h
.eh_frame:0000000000005CEE                 db 0FFh
.eh_frame:0000000000005CEF                 db 0FFh
.eh_frame:0000000000005CF0                 db  82h
.eh_frame:0000000000005CF1                 db    0
.eh_frame:0000000000005CF2                 db    0
.eh_frame:0000000000005CF3                 db    0
.eh_frame:0000000000005CF4                 db    0
.eh_frame:0000000000005CF5                 db    2
.eh_frame:0000000000005CF6                 db  5Fh ; _
.eh_frame:0000000000005CF7                 db  0Eh
.eh_frame:0000000000005CF8                 db  10h
.eh_frame:0000000000005CF9                 db  49h ; I
.eh_frame:0000000000005CFA                 db  0Eh
.eh_frame:0000000000005CFB                 db    8
.eh_frame:0000000000005CFC                 db  14h
.eh_frame:0000000000005CFD                 db    0
.eh_frame:0000000000005CFE                 db    0
.eh_frame:0000000000005CFF                 db    0
.eh_frame:0000000000005D00                 db  70h ; p
.eh_frame:0000000000005D01                 db    8
.eh_frame:0000000000005D02                 db    0
.eh_frame:0000000000005D03                 db    0
.eh_frame:0000000000005D04                 db  3Ch ; <
.eh_frame:0000000000005D05                 db 0E5h
.eh_frame:0000000000005D06                 db 0FFh
.eh_frame:0000000000005D07                 db 0FFh
.eh_frame:0000000000005D08                 db  4Ah ; J
.eh_frame:0000000000005D09                 db    0
.eh_frame:0000000000005D0A                 db    0
.eh_frame:0000000000005D0B                 db    0
.eh_frame:0000000000005D0C                 db    0
.eh_frame:0000000000005D0D                 db    2
.eh_frame:0000000000005D0E                 db  45h ; E
.eh_frame:0000000000005D0F                 db  0Eh
.eh_frame:0000000000005D10                 db  10h
.eh_frame:0000000000005D11                 db    0
.eh_frame:0000000000005D12                 db    0
.eh_frame:0000000000005D13                 db    0
.eh_frame:0000000000005D14                 db  18h
.eh_frame:0000000000005D15                 db    0
.eh_frame:0000000000005D16                 db    0
.eh_frame:0000000000005D17                 db    0
.eh_frame:0000000000005D18                 db  88h
.eh_frame:0000000000005D19                 db    8
.eh_frame:0000000000005D1A                 db    0
.eh_frame:0000000000005D1B                 db    0
.eh_frame:0000000000005D1C                 db  74h ; t
.eh_frame:0000000000005D1D                 db 0E5h
.eh_frame:0000000000005D1E                 db 0FFh
.eh_frame:0000000000005D1F                 db 0FFh
.eh_frame:0000000000005D20                 db  17h
.eh_frame:0000000000005D21                 db    0
.eh_frame:0000000000005D22                 db    0
.eh_frame:0000000000005D23                 db    0
.eh_frame:0000000000005D24                 db    0
.eh_frame:0000000000005D25                 db  41h ; A
.eh_frame:0000000000005D26                 db  0Eh
.eh_frame:0000000000005D27                 db  10h
.eh_frame:0000000000005D28                 db  83h
.eh_frame:0000000000005D29                 db    2
.eh_frame:0000000000005D2A                 db  51h ; Q
.eh_frame:0000000000005D2B                 db  0Eh
.eh_frame:0000000000005D2C                 db    8
.eh_frame:0000000000005D2D                 db    0
.eh_frame:0000000000005D2E                 db    0
.eh_frame:0000000000005D2F                 db    0
.eh_frame:0000000000005D30                 db  18h
.eh_frame:0000000000005D31                 db    0
.eh_frame:0000000000005D32                 db    0
.eh_frame:0000000000005D33                 db    0
.eh_frame:0000000000005D34                 db 0A4h
.eh_frame:0000000000005D35                 db    8
.eh_frame:0000000000005D36                 db    0
.eh_frame:0000000000005D37                 db    0
.eh_frame:0000000000005D38                 db  78h ; x
.eh_frame:0000000000005D39                 db 0E5h
.eh_frame:0000000000005D3A                 db 0FFh
.eh_frame:0000000000005D3B                 db 0FFh
.eh_frame:0000000000005D3C                 db  2Eh ; .
.eh_frame:0000000000005D3D                 db    0
.eh_frame:0000000000005D3E                 db    0
.eh_frame:0000000000005D3F                 db    0
.eh_frame:0000000000005D40                 db    0
.eh_frame:0000000000005D41                 db  47h ; G
.eh_frame:0000000000005D42                 db  0Eh
.eh_frame:0000000000005D43                 db  10h
.eh_frame:0000000000005D44                 db  61h ; a
.eh_frame:0000000000005D45                 db  0Ah
.eh_frame:0000000000005D46                 db  0Eh
.eh_frame:0000000000005D47                 db    8
.eh_frame:0000000000005D48                 db  41h ; A
.eh_frame:0000000000005D49                 db  0Bh
.eh_frame:0000000000005D4A                 db    0
.eh_frame:0000000000005D4B                 db    0
.eh_frame:0000000000005D4C                 db  24h ; $
.eh_frame:0000000000005D4D                 db    0
.eh_frame:0000000000005D4E                 db    0
.eh_frame:0000000000005D4F                 db    0
.eh_frame:0000000000005D50                 db 0C0h
.eh_frame:0000000000005D51                 db    8
.eh_frame:0000000000005D52                 db    0
.eh_frame:0000000000005D53                 db    0
.eh_frame:0000000000005D54                 db  8Ch
.eh_frame:0000000000005D55                 db 0E5h
.eh_frame:0000000000005D56                 db 0FFh
.eh_frame:0000000000005D57                 db 0FFh
.eh_frame:0000000000005D58                 db  28h ; (
.eh_frame:0000000000005D59                 db    0
.eh_frame:0000000000005D5A                 db    0
.eh_frame:0000000000005D5B                 db    0
.eh_frame:0000000000005D5C                 db    0
.eh_frame:0000000000005D5D                 db  41h ; A
.eh_frame:0000000000005D5E                 db  0Eh
.eh_frame:0000000000005D5F                 db  10h
.eh_frame:0000000000005D60                 db  86h
.eh_frame:0000000000005D61                 db    2
.eh_frame:0000000000005D62                 db  41h ; A
.eh_frame:0000000000005D63                 db  0Eh
.eh_frame:0000000000005D64                 db  18h
.eh_frame:0000000000005D65                 db  83h
.eh_frame:0000000000005D66                 db    3
.eh_frame:0000000000005D67                 db  4Dh ; M
.eh_frame:0000000000005D68                 db  0Eh
.eh_frame:0000000000005D69                 db  20h
.eh_frame:0000000000005D6A                 db  49h ; I
.eh_frame:0000000000005D6B                 db  0Eh
.eh_frame:0000000000005D6C                 db  18h
.eh_frame:0000000000005D6D                 db  47h ; G
.eh_frame:0000000000005D6E                 db  0Eh
.eh_frame:0000000000005D6F                 db  10h
.eh_frame:0000000000005D70                 db  41h ; A
.eh_frame:0000000000005D71                 db  0Eh
.eh_frame:0000000000005D72                 db    8
.eh_frame:0000000000005D73                 db    0
.eh_frame:0000000000005D74                 db  18h
.eh_frame:0000000000005D75                 db    0
.eh_frame:0000000000005D76                 db    0
.eh_frame:0000000000005D77                 db    0
.eh_frame:0000000000005D78                 db 0E8h
.eh_frame:0000000000005D79                 db    8
.eh_frame:0000000000005D7A                 db    0
.eh_frame:0000000000005D7B                 db    0
.eh_frame:0000000000005D7C                 db  94h
.eh_frame:0000000000005D7D                 db 0E5h
.eh_frame:0000000000005D7E                 db 0FFh
.eh_frame:0000000000005D7F                 db 0FFh
.eh_frame:0000000000005D80                 db  13h
.eh_frame:0000000000005D81                 db    0
.eh_frame:0000000000005D82                 db    0
.eh_frame:0000000000005D83                 db    0
.eh_frame:0000000000005D84                 db    0
.eh_frame:0000000000005D85                 db  41h ; A
.eh_frame:0000000000005D86                 db  0Eh
.eh_frame:0000000000005D87                 db  10h
.eh_frame:0000000000005D88                 db  83h
.eh_frame:0000000000005D89                 db    2
.eh_frame:0000000000005D8A                 db  50h ; P
.eh_frame:0000000000005D8B                 db  0Eh
.eh_frame:0000000000005D8C                 db    8
.eh_frame:0000000000005D8D                 db    0
.eh_frame:0000000000005D8E                 db    0
.eh_frame:0000000000005D8F                 db    0
.eh_frame:0000000000005D90                 db  14h
.eh_frame:0000000000005D91                 db    0
.eh_frame:0000000000005D92                 db    0
.eh_frame:0000000000005D93                 db    0
.eh_frame:0000000000005D94                 db    4
.eh_frame:0000000000005D95                 db    9
.eh_frame:0000000000005D96                 db    0
.eh_frame:0000000000005D97                 db    0
.eh_frame:0000000000005D98                 db  98h
.eh_frame:0000000000005D99                 db 0E5h
.eh_frame:0000000000005D9A                 db 0FFh
.eh_frame:0000000000005D9B                 db 0FFh
.eh_frame:0000000000005D9C                 db  35h ; 5
.eh_frame:0000000000005D9D                 db    0
.eh_frame:0000000000005D9E                 db    0
.eh_frame:0000000000005D9F                 db    0
.eh_frame:0000000000005DA0                 db    0
.eh_frame:0000000000005DA1                 db  4Bh ; K
.eh_frame:0000000000005DA2                 db  0Eh
.eh_frame:0000000000005DA3                 db  10h
.eh_frame:0000000000005DA4                 db    0
.eh_frame:0000000000005DA5                 db    0
.eh_frame:0000000000005DA6                 db    0
.eh_frame:0000000000005DA7                 db    0
.eh_frame:0000000000005DA8                 db  3Ch ; <
.eh_frame:0000000000005DA9                 db    0
.eh_frame:0000000000005DAA                 db    0
.eh_frame:0000000000005DAB                 db    0
.eh_frame:0000000000005DAC                 db  1Ch
.eh_frame:0000000000005DAD                 db    9
.eh_frame:0000000000005DAE                 db    0
.eh_frame:0000000000005DAF                 db    0
.eh_frame:0000000000005DB0                 db 0C0h
.eh_frame:0000000000005DB1                 db 0E5h
.eh_frame:0000000000005DB2                 db 0FFh
.eh_frame:0000000000005DB3                 db 0FFh
.eh_frame:0000000000005DB4                 db  83h
.eh_frame:0000000000005DB5                 db    0
.eh_frame:0000000000005DB6                 db    0
.eh_frame:0000000000005DB7                 db    0
.eh_frame:0000000000005DB8                 db    0
.eh_frame:0000000000005DB9                 db  42h ; B
.eh_frame:0000000000005DBA                 db  0Eh
.eh_frame:0000000000005DBB                 db  10h
.eh_frame:0000000000005DBC                 db  8Dh
.eh_frame:0000000000005DBD                 db    2
.eh_frame:0000000000005DBE                 db  42h ; B
.eh_frame:0000000000005DBF                 db  0Eh
.eh_frame:0000000000005DC0                 db  18h
.eh_frame:0000000000005DC1                 db  8Ch
.eh_frame:0000000000005DC2                 db    3
.eh_frame:0000000000005DC3                 db  44h ; D
.eh_frame:0000000000005DC4                 db  0Eh
.eh_frame:0000000000005DC5                 db  20h
.eh_frame:0000000000005DC6                 db  86h
.eh_frame:0000000000005DC7                 db    4
.eh_frame:0000000000005DC8                 db  41h ; A
.eh_frame:0000000000005DC9                 db  0Eh
.eh_frame:0000000000005DCA                 db  28h ; (
.eh_frame:0000000000005DCB                 db  83h
.eh_frame:0000000000005DCC                 db    5
.eh_frame:0000000000005DCD                 db  4Ah ; J
.eh_frame:0000000000005DCE                 db  0Eh
.eh_frame:0000000000005DCF                 db  40h ; @
.eh_frame:0000000000005DD0                 db    2
.eh_frame:0000000000005DD1                 db  64h ; d
.eh_frame:0000000000005DD2                 db  0Ah
.eh_frame:0000000000005DD3                 db  0Eh
.eh_frame:0000000000005DD4                 db  28h ; (
.eh_frame:0000000000005DD5                 db  41h ; A
.eh_frame:0000000000005DD6                 db  0Eh
.eh_frame:0000000000005DD7                 db  20h
.eh_frame:0000000000005DD8                 db  41h ; A
.eh_frame:0000000000005DD9                 db  0Eh
.eh_frame:0000000000005DDA                 db  18h
.eh_frame:0000000000005DDB                 db  42h ; B
.eh_frame:0000000000005DDC                 db  0Eh
.eh_frame:0000000000005DDD                 db  10h
.eh_frame:0000000000005DDE                 db  42h ; B
.eh_frame:0000000000005DDF                 db  0Eh
.eh_frame:0000000000005DE0                 db    8
.eh_frame:0000000000005DE1                 db  41h ; A
.eh_frame:0000000000005DE2                 db  0Bh
.eh_frame:0000000000005DE3                 db    0
.eh_frame:0000000000005DE4                 db    0
.eh_frame:0000000000005DE5                 db    0
.eh_frame:0000000000005DE6                 db    0
.eh_frame:0000000000005DE7                 db    0
.eh_frame:0000000000005DE8                 db  4Ch ; L
.eh_frame:0000000000005DE9                 db    0
.eh_frame:0000000000005DEA                 db    0
.eh_frame:0000000000005DEB                 db    0
.eh_frame:0000000000005DEC                 db  5Ch ; \
.eh_frame:0000000000005DED                 db    9
.eh_frame:0000000000005DEE                 db    0
.eh_frame:0000000000005DEF                 db    0
.eh_frame:0000000000005DF0                 db  10h
.eh_frame:0000000000005DF1                 db 0E6h
.eh_frame:0000000000005DF2                 db 0FFh
.eh_frame:0000000000005DF3                 db 0FFh
.eh_frame:0000000000005DF4                 db  7Dh ; }
.eh_frame:0000000000005DF5                 db    0
.eh_frame:0000000000005DF6                 db    0
.eh_frame:0000000000005DF7                 db    0
.eh_frame:0000000000005DF8                 db    0
.eh_frame:0000000000005DF9                 db  42h ; B
.eh_frame:0000000000005DFA                 db  0Eh
.eh_frame:0000000000005DFB                 db  10h
.eh_frame:0000000000005DFC                 db  8Ch
.eh_frame:0000000000005DFD                 db    2
.eh_frame:0000000000005DFE                 db  41h ; A
.eh_frame:0000000000005DFF                 db  0Eh
.eh_frame:0000000000005E00                 db  18h
.eh_frame:0000000000005E01                 db  86h
.eh_frame:0000000000005E02                 db    3
.eh_frame:0000000000005E03                 db  44h ; D
.eh_frame:0000000000005E04                 db  0Eh
.eh_frame:0000000000005E05                 db  20h
.eh_frame:0000000000005E06                 db  83h
.eh_frame:0000000000005E07                 db    4
.eh_frame:0000000000005E08                 db  69h ; i
.eh_frame:0000000000005E09                 db  0Ah
.eh_frame:0000000000005E0A                 db  0Eh
.eh_frame:0000000000005E0B                 db  18h
.eh_frame:0000000000005E0C                 db  41h ; A
.eh_frame:0000000000005E0D                 db  0Eh
.eh_frame:0000000000005E0E                 db  10h
.eh_frame:0000000000005E0F                 db  42h ; B
.eh_frame:0000000000005E10                 db  0Eh
.eh_frame:0000000000005E11                 db    8
.eh_frame:0000000000005E12                 db  45h ; E
.eh_frame:0000000000005E13                 db  0Bh
.eh_frame:0000000000005E14                 db  55h ; U
.eh_frame:0000000000005E15                 db  0Ah
.eh_frame:0000000000005E16                 db  0Eh
.eh_frame:0000000000005E17                 db  18h
.eh_frame:0000000000005E18                 db  41h ; A
.eh_frame:0000000000005E19                 db  0Eh
.eh_frame:0000000000005E1A                 db  10h
.eh_frame:0000000000005E1B                 db  42h ; B
.eh_frame:0000000000005E1C                 db  0Eh
.eh_frame:0000000000005E1D                 db    8
.eh_frame:0000000000005E1E                 db  48h ; H
.eh_frame:0000000000005E1F                 db  0Bh
.eh_frame:0000000000005E20                 db  41h ; A
.eh_frame:0000000000005E21                 db  0Ah
.eh_frame:0000000000005E22                 db  0Eh
.eh_frame:0000000000005E23                 db  18h
.eh_frame:0000000000005E24                 db  46h ; F
.eh_frame:0000000000005E25                 db  0Eh
.eh_frame:0000000000005E26                 db  10h
.eh_frame:0000000000005E27                 db  42h ; B
.eh_frame:0000000000005E28                 db  0Eh
.eh_frame:0000000000005E29                 db    8
.eh_frame:0000000000005E2A                 db  47h ; G
.eh_frame:0000000000005E2B                 db  0Bh
.eh_frame:0000000000005E2C                 db  49h ; I
.eh_frame:0000000000005E2D                 db  0Eh
.eh_frame:0000000000005E2E                 db  18h
.eh_frame:0000000000005E2F                 db  41h ; A
.eh_frame:0000000000005E30                 db  0Eh
.eh_frame:0000000000005E31                 db  10h
.eh_frame:0000000000005E32                 db  42h ; B
.eh_frame:0000000000005E33                 db  0Eh
.eh_frame:0000000000005E34                 db    8
.eh_frame:0000000000005E35                 db    0
.eh_frame:0000000000005E36                 db    0
.eh_frame:0000000000005E37                 db    0
.eh_frame:0000000000005E38                 db  1Ch
.eh_frame:0000000000005E39                 db    0
.eh_frame:0000000000005E3A                 db    0
.eh_frame:0000000000005E3B                 db    0
.eh_frame:0000000000005E3C                 db 0ACh
.eh_frame:0000000000005E3D                 db    9
.eh_frame:0000000000005E3E                 db    0
.eh_frame:0000000000005E3F                 db    0
.eh_frame:0000000000005E40                 db  40h ; @
.eh_frame:0000000000005E41                 db 0E6h
.eh_frame:0000000000005E42                 db 0FFh
.eh_frame:0000000000005E43                 db 0FFh
.eh_frame:0000000000005E44                 db  60h ; `
.eh_frame:0000000000005E45                 db    0
.eh_frame:0000000000005E46                 db    0
.eh_frame:0000000000005E47                 db    0
.eh_frame:0000000000005E48                 db    0
.eh_frame:0000000000005E49                 db  44h ; D
.eh_frame:0000000000005E4A                 db  0Eh
.eh_frame:0000000000005E4B                 db  10h
.eh_frame:0000000000005E4C                 db  75h ; u
.eh_frame:0000000000005E4D                 db  0Ah
.eh_frame:0000000000005E4E                 db  0Eh
.eh_frame:0000000000005E4F                 db    8
.eh_frame:0000000000005E50                 db  47h ; G
.eh_frame:0000000000005E51                 db  0Bh
.eh_frame:0000000000005E52                 db  5Fh ; _
.eh_frame:0000000000005E53                 db  0Eh
.eh_frame:0000000000005E54                 db    8
.eh_frame:0000000000005E55                 db    0
.eh_frame:0000000000005E56                 db    0
.eh_frame:0000000000005E57                 db    0
.eh_frame:0000000000005E58                 db  1Ch
.eh_frame:0000000000005E59                 db    0
.eh_frame:0000000000005E5A                 db    0
.eh_frame:0000000000005E5B                 db    0
.eh_frame:0000000000005E5C                 db 0CCh
.eh_frame:0000000000005E5D                 db    9
.eh_frame:0000000000005E5E                 db    0
.eh_frame:0000000000005E5F                 db    0
.eh_frame:0000000000005E60                 db  80h
.eh_frame:0000000000005E61                 db 0E6h
.eh_frame:0000000000005E62                 db 0FFh
.eh_frame:0000000000005E63                 db 0FFh
.eh_frame:0000000000005E64                 db  3Ch ; <
.eh_frame:0000000000005E65                 db    0
.eh_frame:0000000000005E66                 db    0
.eh_frame:0000000000005E67                 db    0
.eh_frame:0000000000005E68                 db    0
.eh_frame:0000000000005E69                 db  44h ; D
.eh_frame:0000000000005E6A                 db  0Eh
.eh_frame:0000000000005E6B                 db  10h
.eh_frame:0000000000005E6C                 db  61h ; a
.eh_frame:0000000000005E6D                 db  0Ah
.eh_frame:0000000000005E6E                 db  0Eh
.eh_frame:0000000000005E6F                 db    8
.eh_frame:0000000000005E70                 db  4Bh ; K
.eh_frame:0000000000005E71                 db  0Bh
.eh_frame:0000000000005E72                 db  4Bh ; K
.eh_frame:0000000000005E73                 db  0Eh
.eh_frame:0000000000005E74                 db    8
.eh_frame:0000000000005E75                 db    0
.eh_frame:0000000000005E76                 db    0
.eh_frame:0000000000005E77                 db    0
.eh_frame:0000000000005E78                 db  34h ; 4
.eh_frame:0000000000005E79                 db    0
.eh_frame:0000000000005E7A                 db    0
.eh_frame:0000000000005E7B                 db    0
.eh_frame:0000000000005E7C                 db 0ECh
.eh_frame:0000000000005E7D                 db    9
.eh_frame:0000000000005E7E                 db    0
.eh_frame:0000000000005E7F                 db    0
.eh_frame:0000000000005E80                 db 0A0h
.eh_frame:0000000000005E81                 db 0E6h
.eh_frame:0000000000005E82                 db 0FFh
.eh_frame:0000000000005E83                 db 0FFh
.eh_frame:0000000000005E84                 db  7Bh ; {
.eh_frame:0000000000005E85                 db    0
.eh_frame:0000000000005E86                 db    0
.eh_frame:0000000000005E87                 db    0
.eh_frame:0000000000005E88                 db    0
.eh_frame:0000000000005E89                 db  42h ; B
.eh_frame:0000000000005E8A                 db  0Eh
.eh_frame:0000000000005E8B                 db  10h
.eh_frame:0000000000005E8C                 db  8Ch
.eh_frame:0000000000005E8D                 db    2
.eh_frame:0000000000005E8E                 db  41h ; A
.eh_frame:0000000000005E8F                 db  0Eh
.eh_frame:0000000000005E90                 db  18h
.eh_frame:0000000000005E91                 db  86h
.eh_frame:0000000000005E92                 db    3
.eh_frame:0000000000005E93                 db  41h ; A
.eh_frame:0000000000005E94                 db  0Eh
.eh_frame:0000000000005E95                 db  20h
.eh_frame:0000000000005E96                 db  83h
.eh_frame:0000000000005E97                 db    4
.eh_frame:0000000000005E98                 db  7Dh ; }
.eh_frame:0000000000005E99                 db  0Ah
.eh_frame:0000000000005E9A                 db  0Eh
.eh_frame:0000000000005E9B                 db  18h
.eh_frame:0000000000005E9C                 db  41h ; A
.eh_frame:0000000000005E9D                 db  0Eh
.eh_frame:0000000000005E9E                 db  10h
.eh_frame:0000000000005E9F                 db  42h ; B
.eh_frame:0000000000005EA0                 db  0Eh
.eh_frame:0000000000005EA1                 db    8
.eh_frame:0000000000005EA2                 db  44h ; D
.eh_frame:0000000000005EA3                 db  0Bh
.eh_frame:0000000000005EA4                 db  60h ; `
.eh_frame:0000000000005EA5                 db  0Ah
.eh_frame:0000000000005EA6                 db  0Eh
.eh_frame:0000000000005EA7                 db  18h
.eh_frame:0000000000005EA8                 db  41h ; A
.eh_frame:0000000000005EA9                 db  0Eh
.eh_frame:0000000000005EAA                 db  10h
.eh_frame:0000000000005EAB                 db  42h ; B
.eh_frame:0000000000005EAC                 db  0Eh
.eh_frame:0000000000005EAD                 db    8
.eh_frame:0000000000005EAE                 db  45h ; E
.eh_frame:0000000000005EAF                 db  0Bh
.eh_frame:0000000000005EB0                 db  1Ch
.eh_frame:0000000000005EB1                 db    0
.eh_frame:0000000000005EB2                 db    0
.eh_frame:0000000000005EB3                 db    0
.eh_frame:0000000000005EB4                 db  24h ; $
.eh_frame:0000000000005EB5                 db  0Ah
.eh_frame:0000000000005EB6                 db    0
.eh_frame:0000000000005EB7                 db    0
.eh_frame:0000000000005EB8                 db 0E8h
.eh_frame:0000000000005EB9                 db 0E6h
.eh_frame:0000000000005EBA                 db 0FFh
.eh_frame:0000000000005EBB                 db 0FFh
.eh_frame:0000000000005EBC                 db  40h ; @
.eh_frame:0000000000005EBD                 db    0
.eh_frame:0000000000005EBE                 db    0
.eh_frame:0000000000005EBF                 db    0
.eh_frame:0000000000005EC0                 db    0
.eh_frame:0000000000005EC1                 db  44h ; D
.eh_frame:0000000000005EC2                 db  0Eh
.eh_frame:0000000000005EC3                 db  10h
.eh_frame:0000000000005EC4                 db  83h
.eh_frame:0000000000005EC5                 db    2
.eh_frame:0000000000005EC6                 db  5Ah ; Z
.eh_frame:0000000000005EC7                 db  0Ah
.eh_frame:0000000000005EC8                 db  0Eh
.eh_frame:0000000000005EC9                 db    8
.eh_frame:0000000000005ECA                 db  4Ah ; J
.eh_frame:0000000000005ECB                 db  0Bh
.eh_frame:0000000000005ECC                 db  53h ; S
.eh_frame:0000000000005ECD                 db  0Eh
.eh_frame:0000000000005ECE                 db    8
.eh_frame:0000000000005ECF                 db    0
.eh_frame:0000000000005ED0                 db  2Ch ; ,
.eh_frame:0000000000005ED1                 db    0
.eh_frame:0000000000005ED2                 db    0
.eh_frame:0000000000005ED3                 db    0
.eh_frame:0000000000005ED4                 db  44h ; D
.eh_frame:0000000000005ED5                 db  0Ah
.eh_frame:0000000000005ED6                 db    0
.eh_frame:0000000000005ED7                 db    0
.eh_frame:0000000000005ED8                 db    8
.eh_frame:0000000000005ED9                 db 0E7h
.eh_frame:0000000000005EDA                 db 0FFh
.eh_frame:0000000000005EDB                 db 0FFh
.eh_frame:0000000000005EDC                 db  57h ; W
.eh_frame:0000000000005EDD                 db    0
.eh_frame:0000000000005EDE                 db    0
.eh_frame:0000000000005EDF                 db    0
.eh_frame:0000000000005EE0                 db    0
.eh_frame:0000000000005EE1                 db  63h ; c
.eh_frame:0000000000005EE2                 db  0Eh
.eh_frame:0000000000005EE3                 db  10h
.eh_frame:0000000000005EE4                 db  8Ch
.eh_frame:0000000000005EE5                 db    2
.eh_frame:0000000000005EE6                 db  41h ; A
.eh_frame:0000000000005EE7                 db  0Eh
.eh_frame:0000000000005EE8                 db  18h
.eh_frame:0000000000005EE9                 db  86h
.eh_frame:0000000000005EEA                 db    3
.eh_frame:0000000000005EEB                 db  44h ; D
.eh_frame:0000000000005EEC                 db  0Eh
.eh_frame:0000000000005EED                 db  20h
.eh_frame:0000000000005EEE                 db  83h
.eh_frame:0000000000005EEF                 db    4
.eh_frame:0000000000005EF0                 db  6Bh ; k
.eh_frame:0000000000005EF1                 db  0Eh
.eh_frame:0000000000005EF2                 db  18h
.eh_frame:0000000000005EF3                 db  41h ; A
.eh_frame:0000000000005EF4                 db  0Eh
.eh_frame:0000000000005EF5                 db  10h
.eh_frame:0000000000005EF6                 db  42h ; B
.eh_frame:0000000000005EF7                 db  0Eh
.eh_frame:0000000000005EF8                 db    8
.eh_frame:0000000000005EF9                 db    0
.eh_frame:0000000000005EFA                 db    0
.eh_frame:0000000000005EFB                 db    0
.eh_frame:0000000000005EFC                 db    0
.eh_frame:0000000000005EFD                 db    0
.eh_frame:0000000000005EFE                 db    0
.eh_frame:0000000000005EFF                 db    0
.eh_frame:0000000000005F00                 db  44h ; D
.eh_frame:0000000000005F01                 db    0
.eh_frame:0000000000005F02                 db    0
.eh_frame:0000000000005F03                 db    0
.eh_frame:0000000000005F04                 db  74h ; t
.eh_frame:0000000000005F05                 db  0Ah
.eh_frame:0000000000005F06                 db    0
.eh_frame:0000000000005F07                 db    0
.eh_frame:0000000000005F08                 db  38h ; 8
.eh_frame:0000000000005F09                 db 0E7h
.eh_frame:0000000000005F0A                 db 0FFh
.eh_frame:0000000000005F0B                 db 0FFh
.eh_frame:0000000000005F0C                 db  65h ; e
.eh_frame:0000000000005F0D                 db    0
.eh_frame:0000000000005F0E                 db    0
.eh_frame:0000000000005F0F                 db    0
.eh_frame:0000000000005F10                 db    0
.eh_frame:0000000000005F11                 db  42h ; B
.eh_frame:0000000000005F12                 db  0Eh
.eh_frame:0000000000005F13                 db  10h
.eh_frame:0000000000005F14                 db  8Fh
.eh_frame:0000000000005F15                 db    2
.eh_frame:0000000000005F16                 db  42h ; B
.eh_frame:0000000000005F17                 db  0Eh
.eh_frame:0000000000005F18                 db  18h
.eh_frame:0000000000005F19                 db  8Eh
.eh_frame:0000000000005F1A                 db    3
.eh_frame:0000000000005F1B                 db  45h ; E
.eh_frame:0000000000005F1C                 db  0Eh
.eh_frame:0000000000005F1D                 db  20h
.eh_frame:0000000000005F1E                 db  8Dh
.eh_frame:0000000000005F1F                 db    4
.eh_frame:0000000000005F20                 db  42h ; B
.eh_frame:0000000000005F21                 db  0Eh
.eh_frame:0000000000005F22                 db  28h ; (
.eh_frame:0000000000005F23                 db  8Ch
.eh_frame:0000000000005F24                 db    5
.eh_frame:0000000000005F25                 db  48h ; H
.eh_frame:0000000000005F26                 db  0Eh
.eh_frame:0000000000005F27                 db  30h ; 0
.eh_frame:0000000000005F28                 db  86h
.eh_frame:0000000000005F29                 db    6
.eh_frame:0000000000005F2A                 db  48h ; H
.eh_frame:0000000000005F2B                 db  0Eh
.eh_frame:0000000000005F2C                 db  38h ; 8
.eh_frame:0000000000005F2D                 db  83h
.eh_frame:0000000000005F2E                 db    7
.eh_frame:0000000000005F2F                 db  4Dh ; M
.eh_frame:0000000000005F30                 db  0Eh
.eh_frame:0000000000005F31                 db  40h ; @
.eh_frame:0000000000005F32                 db  72h ; r
.eh_frame:0000000000005F33                 db  0Eh
.eh_frame:0000000000005F34                 db  38h ; 8
.eh_frame:0000000000005F35                 db  41h ; A
.eh_frame:0000000000005F36                 db  0Eh
.eh_frame:0000000000005F37                 db  30h ; 0
.eh_frame:0000000000005F38                 db  41h ; A
.eh_frame:0000000000005F39                 db  0Eh
.eh_frame:0000000000005F3A                 db  28h ; (
.eh_frame:0000000000005F3B                 db  42h ; B
.eh_frame:0000000000005F3C                 db  0Eh
.eh_frame:0000000000005F3D                 db  20h
.eh_frame:0000000000005F3E                 db  42h ; B
.eh_frame:0000000000005F3F                 db  0Eh
.eh_frame:0000000000005F40                 db  18h
.eh_frame:0000000000005F41                 db  42h ; B
.eh_frame:0000000000005F42                 db  0Eh
.eh_frame:0000000000005F43                 db  10h
.eh_frame:0000000000005F44                 db  42h ; B
.eh_frame:0000000000005F45                 db  0Eh
.eh_frame:0000000000005F46                 db    8
.eh_frame:0000000000005F47                 db    0
.eh_frame:0000000000005F48                 db  14h
.eh_frame:0000000000005F49                 db    0
.eh_frame:0000000000005F4A                 db    0
.eh_frame:0000000000005F4B                 db    0
.eh_frame:0000000000005F4C                 db 0BCh
.eh_frame:0000000000005F4D                 db  0Ah
.eh_frame:0000000000005F4E                 db    0
.eh_frame:0000000000005F4F                 db    0
.eh_frame:0000000000005F50                 db  60h ; `
.eh_frame:0000000000005F51                 db 0E7h
.eh_frame:0000000000005F52                 db 0FFh
.eh_frame:0000000000005F53                 db 0FFh
.eh_frame:0000000000005F54                 db    2
.eh_frame:0000000000005F55                 db    0
.eh_frame:0000000000005F56                 db    0
.eh_frame:0000000000005F57                 db    0
.eh_frame:0000000000005F58                 db    0
.eh_frame:0000000000005F59                 db    0
.eh_frame:0000000000005F5A                 db    0
.eh_frame:0000000000005F5B                 db    0
.eh_frame:0000000000005F5C                 db    0
.eh_frame:0000000000005F5D                 db    0
.eh_frame:0000000000005F5E                 db    0
.eh_frame:0000000000005F5F                 db    0
.eh_frame:0000000000005F60                 db  10h
.eh_frame:0000000000005F61                 db    0
.eh_frame:0000000000005F62                 db    0
.eh_frame:0000000000005F63                 db    0
.eh_frame:0000000000005F64                 db 0D4h
.eh_frame:0000000000005F65                 db  0Ah
.eh_frame:0000000000005F66                 db    0
.eh_frame:0000000000005F67                 db    0
.eh_frame:0000000000005F68                 db  58h ; X
.eh_frame:0000000000005F69                 db 0E7h
.eh_frame:0000000000005F6A                 db 0FFh
.eh_frame:0000000000005F6B                 db 0FFh
.eh_frame:0000000000005F6C                 db  0Eh
.eh_frame:0000000000005F6D                 db    0
.eh_frame:0000000000005F6E                 db    0
.eh_frame:0000000000005F6F                 db    0
.eh_frame:0000000000005F70                 db    0
.eh_frame:0000000000005F71                 db    0
.eh_frame:0000000000005F72                 db    0
.eh_frame:0000000000005F73                 db    0
.eh_frame:0000000000005F74 __FRAME_END__   db    0
.eh_frame:0000000000005F75                 db    0
.eh_frame:0000000000005F76                 db    0
.eh_frame:0000000000005F77                 db    0
.eh_frame:0000000000005F77 _eh_frame       ends
.eh_frame:0000000000005F77
.init_array:0000000000206BB0 ; ELF Initialization Function Table
.init_array:0000000000206BB0 ; ===========================================================================
.init_array:0000000000206BB0
.init_array:0000000000206BB0 ; Segment type: Pure data
.init_array:0000000000206BB0 ; Segment permissions: Read/Write
.init_array:0000000000206BB0 _init_array     segment qword public 'DATA' use64
.init_array:0000000000206BB0                 assume cs:_init_array
.init_array:0000000000206BB0                 ;org 206BB0h
.init_array:0000000000206BB0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000206BB0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000206BB0                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000206BB0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000206BB0
.fini_array:0000000000206BB8 ; ELF Termination Function Table
.fini_array:0000000000206BB8 ; ===========================================================================
.fini_array:0000000000206BB8
.fini_array:0000000000206BB8 ; Segment type: Pure data
.fini_array:0000000000206BB8 ; Segment permissions: Read/Write
.fini_array:0000000000206BB8 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000206BB8                 assume cs:_fini_array
.fini_array:0000000000206BB8                 ;org 206BB8h
.fini_array:0000000000206BB8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000206BB8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000206BB8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000206BB8
.data.rel.ro:0000000000206BC0 ; ===========================================================================
.data.rel.ro:0000000000206BC0
.data.rel.ro:0000000000206BC0 ; Segment type: Pure data
.data.rel.ro:0000000000206BC0 ; Segment permissions: Read/Write
.data.rel.ro:0000000000206BC0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000206BC0                 assume cs:_data_rel_ro
.data.rel.ro:0000000000206BC0                 ;org 206BC0h
.data.rel.ro:0000000000206BC0 ; struct option long_options
.data.rel.ro:0000000000206BC0 long_options    dq offset aHelp         ; name
.data.rel.ro:0000000000206BC0                                         ; DATA XREF: parse_long_options:loc_1BC0↑o
.data.rel.ro:0000000000206BC0                                         ; parse_gnu_standard_options_only+7C↑o
.data.rel.ro:0000000000206BC0                 dd 0                    ; has_arg ; "help"
.data.rel.ro:0000000000206BC0                 db 4 dup(0)
.data.rel.ro:0000000000206BC0                 dq 0                    ; flag
.data.rel.ro:0000000000206BC0                 dd 68h                  ; val
.data.rel.ro:0000000000206BC0                 db 4 dup(0)
.data.rel.ro:0000000000206BE0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000206BE8                 db    0
.data.rel.ro:0000000000206BE9                 db    0
.data.rel.ro:0000000000206BEA                 db    0
.data.rel.ro:0000000000206BEB                 db    0
.data.rel.ro:0000000000206BEC                 db    0
.data.rel.ro:0000000000206BED                 db    0
.data.rel.ro:0000000000206BEE                 db    0
.data.rel.ro:0000000000206BEF                 db    0
.data.rel.ro:0000000000206BF0                 db    0
.data.rel.ro:0000000000206BF1                 db    0
.data.rel.ro:0000000000206BF2                 db    0
.data.rel.ro:0000000000206BF3                 db    0
.data.rel.ro:0000000000206BF4                 db    0
.data.rel.ro:0000000000206BF5                 db    0
.data.rel.ro:0000000000206BF6                 db    0
.data.rel.ro:0000000000206BF7                 db    0
.data.rel.ro:0000000000206BF8                 db  76h ; v
.data.rel.ro:0000000000206BF9                 db    0
.data.rel.ro:0000000000206BFA                 db    0
.data.rel.ro:0000000000206BFB                 db    0
.data.rel.ro:0000000000206BFC                 db    0
.data.rel.ro:0000000000206BFD                 db    0
.data.rel.ro:0000000000206BFE                 db    0
.data.rel.ro:0000000000206BFF                 db    0
.data.rel.ro:0000000000206C00                 db    0
.data.rel.ro:0000000000206C01                 db    0
.data.rel.ro:0000000000206C02                 db    0
.data.rel.ro:0000000000206C03                 db    0
.data.rel.ro:0000000000206C04                 db    0
.data.rel.ro:0000000000206C05                 db    0
.data.rel.ro:0000000000206C06                 db    0
.data.rel.ro:0000000000206C07                 db    0
.data.rel.ro:0000000000206C08                 db    0
.data.rel.ro:0000000000206C09                 db    0
.data.rel.ro:0000000000206C0A                 db    0
.data.rel.ro:0000000000206C0B                 db    0
.data.rel.ro:0000000000206C0C                 db    0
.data.rel.ro:0000000000206C0D                 db    0
.data.rel.ro:0000000000206C0E                 db    0
.data.rel.ro:0000000000206C0F                 db    0
.data.rel.ro:0000000000206C10                 db    0
.data.rel.ro:0000000000206C11                 db    0
.data.rel.ro:0000000000206C12                 db    0
.data.rel.ro:0000000000206C13                 db    0
.data.rel.ro:0000000000206C14                 db    0
.data.rel.ro:0000000000206C15                 db    0
.data.rel.ro:0000000000206C16                 db    0
.data.rel.ro:0000000000206C17                 db    0
.data.rel.ro:0000000000206C18                 db    0
.data.rel.ro:0000000000206C19                 db    0
.data.rel.ro:0000000000206C1A                 db    0
.data.rel.ro:0000000000206C1B                 db    0
.data.rel.ro:0000000000206C1C                 db    0
.data.rel.ro:0000000000206C1D                 db    0
.data.rel.ro:0000000000206C1E                 db    0
.data.rel.ro:0000000000206C1F                 db    0
.data.rel.ro:0000000000206C20                 public quoting_style_args
.data.rel.ro:0000000000206C20 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000206C28                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000206C30                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000206C38                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000206C40                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000206C48                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000206C50                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000206C58                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000206C60                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000206C68                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000206C70                 db    0
.data.rel.ro:0000000000206C71                 db    0
.data.rel.ro:0000000000206C72                 db    0
.data.rel.ro:0000000000206C73                 db    0
.data.rel.ro:0000000000206C74                 db    0
.data.rel.ro:0000000000206C75                 db    0
.data.rel.ro:0000000000206C76                 db    0
.data.rel.ro:0000000000206C77                 db    0
.data.rel.ro:0000000000206C77 _data_rel_ro    ends
.data.rel.ro:0000000000206C77
LOAD:0000000000206C78 ; ELF Dynamic Information
LOAD:0000000000206C78 ; ===========================================================================
LOAD:0000000000206C78
LOAD:0000000000206C78 ; Segment type: Pure data
LOAD:0000000000206C78 ; Segment permissions: Read/Write
LOAD:0000000000206C78 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206C78                 assume cs:LOAD
LOAD:0000000000206C78                 ;org 206C78h
LOAD:0000000000206C78 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000206C78                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000206C78                                         ; DT_NEEDED libc.so.6
LOAD:0000000000206C88                 Elf64_Dyn <0Ch, 11F8h>  ; DT_INIT
LOAD:0000000000206C98                 Elf64_Dyn <0Dh, 46D0h>  ; DT_FINI
LOAD:0000000000206CA8                 Elf64_Dyn <19h, 206BB0h> ; DT_INIT_ARRAY
LOAD:0000000000206CB8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000206CC8                 Elf64_Dyn <1Ah, 206BB8h> ; DT_FINI_ARRAY
LOAD:0000000000206CD8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000206CE8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000206CF8                 Elf64_Dyn <5, 808h>     ; DT_STRTAB
LOAD:0000000000206D08                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000206D18                 Elf64_Dyn <0Ah, 28Dh>   ; DT_STRSZ
LOAD:0000000000206D28                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000206D38                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000206D48                 Elf64_Dyn <3, 206E68h>  ; DT_PLTGOT
LOAD:0000000000206D58                 Elf64_Dyn <2, 3D8h>     ; DT_PLTRELSZ
LOAD:0000000000206D68                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000206D78                 Elf64_Dyn <17h, 0E20h>  ; DT_JMPREL
LOAD:0000000000206D88                 Elf64_Dyn <7, 0B68h>    ; DT_RELA
LOAD:0000000000206D98                 Elf64_Dyn <8, 2B8h>     ; DT_RELASZ
LOAD:0000000000206DA8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000206DB8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000206DC8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000206DD8                 Elf64_Dyn <6FFFFFFEh, 0B08h> ; DT_VERNEED
LOAD:0000000000206DE8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000206DF8                 Elf64_Dyn <6FFFFFF0h, 0A96h> ; DT_VERSYM
LOAD:0000000000206E08                 Elf64_Dyn <6FFFFFF9h, 12h> ; DT_RELACOUNT
LOAD:0000000000206E18                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000206E28                 db    0
LOAD:0000000000206E29                 db    0
LOAD:0000000000206E2A                 db    0
LOAD:0000000000206E2B                 db    0
LOAD:0000000000206E2C                 db    0
LOAD:0000000000206E2D                 db    0
LOAD:0000000000206E2E                 db    0
LOAD:0000000000206E2F                 db    0
LOAD:0000000000206E30                 db    0
LOAD:0000000000206E31                 db    0
LOAD:0000000000206E32                 db    0
LOAD:0000000000206E33                 db    0
LOAD:0000000000206E34                 db    0
LOAD:0000000000206E35                 db    0
LOAD:0000000000206E36                 db    0
LOAD:0000000000206E37                 db    0
LOAD:0000000000206E38                 db    0
LOAD:0000000000206E39                 db    0
LOAD:0000000000206E3A                 db    0
LOAD:0000000000206E3B                 db    0
LOAD:0000000000206E3C                 db    0
LOAD:0000000000206E3D                 db    0
LOAD:0000000000206E3E                 db    0
LOAD:0000000000206E3F                 db    0
LOAD:0000000000206E40                 db    0
LOAD:0000000000206E41                 db    0
LOAD:0000000000206E42                 db    0
LOAD:0000000000206E43                 db    0
LOAD:0000000000206E44                 db    0
LOAD:0000000000206E45                 db    0
LOAD:0000000000206E46                 db    0
LOAD:0000000000206E47                 db    0
LOAD:0000000000206E48                 db    0
LOAD:0000000000206E49                 db    0
LOAD:0000000000206E4A                 db    0
LOAD:0000000000206E4B                 db    0
LOAD:0000000000206E4C                 db    0
LOAD:0000000000206E4D                 db    0
LOAD:0000000000206E4E                 db    0
LOAD:0000000000206E4F                 db    0
LOAD:0000000000206E50                 db    0
LOAD:0000000000206E51                 db    0
LOAD:0000000000206E52                 db    0
LOAD:0000000000206E53                 db    0
LOAD:0000000000206E54                 db    0
LOAD:0000000000206E55                 db    0
LOAD:0000000000206E56                 db    0
LOAD:0000000000206E57                 db    0
LOAD:0000000000206E58                 db    0
LOAD:0000000000206E59                 db    0
LOAD:0000000000206E5A                 db    0
LOAD:0000000000206E5B                 db    0
LOAD:0000000000206E5C                 db    0
LOAD:0000000000206E5D                 db    0
LOAD:0000000000206E5E                 db    0
LOAD:0000000000206E5F                 db    0
LOAD:0000000000206E60                 db    0
LOAD:0000000000206E61                 db    0
LOAD:0000000000206E62                 db    0
LOAD:0000000000206E63                 db    0
LOAD:0000000000206E64                 db    0
LOAD:0000000000206E65                 db    0
LOAD:0000000000206E66                 db    0
LOAD:0000000000206E67                 db    0
LOAD:0000000000206E67 LOAD            ends
LOAD:0000000000206E67
.got:0000000000206E68 ; ===========================================================================
.got:0000000000206E68
.got:0000000000206E68 ; Segment type: Pure data
.got:0000000000206E68 ; Segment permissions: Read/Write
.got:0000000000206E68 _got            segment qword public 'DATA' use64
.got:0000000000206E68                 assume cs:_got
.got:0000000000206E68                 ;org 206E68h
.got:0000000000206E68 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000206E70 qword_206E70    dq 0                    ; DATA XREF: sub_1210↑r
.got:0000000000206E78 qword_206E78    dq 0                    ; DATA XREF: sub_1210+6↑r
.got:0000000000206E80 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000206E88 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000206E90 __errno_location_ptr dq offset __errno_location
.got:0000000000206E90                                         ; DATA XREF: ___errno_location↑r
.got:0000000000206E98 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000206EA0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000206EA8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000206EB0 puts_ptr        dq offset puts          ; DATA XREF: _puts↑r
.got:0000000000206EB8 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000206EC0 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000206EC8 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000206EC8                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000206ED0 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000206ED8 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000206ED8                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000206EE0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000206EE8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000206EE8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000206EF0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000206EF8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000206F00 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000206F08 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000206F10 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000206F18 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000206F20 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000206F20                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000206F28 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000206F30 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000206F38 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000206F40 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000206F48 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000206F50 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000206F58 getlogin_ptr    dq offset getlogin      ; DATA XREF: _getlogin↑r
.got:0000000000206F60 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000206F68 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000206F70 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000206F78 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000206F80 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000206F88 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000206F90 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000206F98 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000206FA0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000206FA8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000206FA8                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000206FB0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000206FB8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000206FC0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000206FC0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000206FC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000206FC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000206FD0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000206FD0                                         ; DATA XREF: start+24↑r
.got:0000000000206FD8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000206FD8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000206FE0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000206FE0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000206FE8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000206FE8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000206FE8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000206FE8 _got            ends
.got:0000000000206FE8
LOAD:0000000000206FF0 ; ===========================================================================
LOAD:0000000000206FF0
LOAD:0000000000206FF0 ; Segment type: Pure data
LOAD:0000000000206FF0 ; Segment permissions: Read/Write
LOAD:0000000000206FF0 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206FF0                 assume cs:LOAD
LOAD:0000000000206FF0                 ;org 206FF0h
LOAD:0000000000206FF0                 align 20h
LOAD:0000000000206FF0 LOAD            ends
LOAD:0000000000206FF0
.data:0000000000207000 ; ===========================================================================
.data:0000000000207000
.data:0000000000207000 ; Segment type: Pure data
.data:0000000000207000 ; Segment permissions: Read/Write
.data:0000000000207000 _data           segment align_32 public 'DATA' use64
.data:0000000000207000                 assume cs:_data
.data:0000000000207000                 ;org 207000h
.data:0000000000207000                 public __data_start ; weak
.data:0000000000207000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000207000                                         ; data_start
.data:0000000000207001                 db    0
.data:0000000000207002                 db    0
.data:0000000000207003                 db    0
.data:0000000000207004                 db    0
.data:0000000000207005                 db    0
.data:0000000000207006                 db    0
.data:0000000000207007                 db    0
.data:0000000000207008                 public __dso_handle
.data:0000000000207008 ; void *_dso_handle
.data:0000000000207008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000207008                                         ; atexit↑r ...
.data:0000000000207010                 public Version
.data:0000000000207010 Version         dq offset a831          ; DATA XREF: main+5A↑r
.data:0000000000207010                                         ; "8.31"
.data:0000000000207018                 public exit_failure
.data:0000000000207018 ; int exit_failure
.data:0000000000207018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_1AE2↑r
.data:0000000000207018                                         ; parse_gnu_standard_options_only:loc_1D50↑r ...
.data:000000000020701C                 align 20h
.data:0000000000207020                 public quote_quoting_options
.data:0000000000207020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000207020                                         ; quote_mem↑o ...
.data:0000000000207021                 db    0
.data:0000000000207022                 db    0
.data:0000000000207023                 db    0
.data:0000000000207024                 db    0
.data:0000000000207025                 db    0
.data:0000000000207026                 db    0
.data:0000000000207027                 db    0
.data:0000000000207028                 db    0
.data:0000000000207029                 db    0
.data:000000000020702A                 db    0
.data:000000000020702B                 db    0
.data:000000000020702C                 db    0
.data:000000000020702D                 db    0
.data:000000000020702E                 db    0
.data:000000000020702F                 db    0
.data:0000000000207030                 db    0
.data:0000000000207031                 db    0
.data:0000000000207032                 db    0
.data:0000000000207033                 db    0
.data:0000000000207034                 db    0
.data:0000000000207035                 db    0
.data:0000000000207036                 db    0
.data:0000000000207037                 db    0
.data:0000000000207038                 db    0
.data:0000000000207039                 db    0
.data:000000000020703A                 db    0
.data:000000000020703B                 db    0
.data:000000000020703C                 db    0
.data:000000000020703D                 db    0
.data:000000000020703E                 db    0
.data:000000000020703F                 db    0
.data:0000000000207040                 db    0
.data:0000000000207041                 db    0
.data:0000000000207042                 db    0
.data:0000000000207043                 db    0
.data:0000000000207044                 db    0
.data:0000000000207045                 db    0
.data:0000000000207046                 db    0
.data:0000000000207047                 db    0
.data:0000000000207048                 db    0
.data:0000000000207049                 db    0
.data:000000000020704A                 db    0
.data:000000000020704B                 db    0
.data:000000000020704C                 db    0
.data:000000000020704D                 db    0
.data:000000000020704E                 db    0
.data:000000000020704F                 db    0
.data:0000000000207050                 db    0
.data:0000000000207051                 db    0
.data:0000000000207052                 db    0
.data:0000000000207053                 db    0
.data:0000000000207054                 db    0
.data:0000000000207055                 db    0
.data:0000000000207056                 db    0
.data:0000000000207057                 db    0
.data:0000000000207058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000207058                                         ; quotearg_n_options:loc_31DD↑r ...
.data:000000000020705C                 align 20h
.data:0000000000207060 ; void *slotvec
.data:0000000000207060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000207060                                         ; quotearg_n_options+76↑w ...
.data:0000000000207068                 align 10h
.data:0000000000207070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000207070                                         ; quotearg_n_options+187↑r ...
.data:0000000000207078 off_207078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000207078 _data           ends
.data:0000000000207078
.bss:0000000000207080 ; ===========================================================================
.bss:0000000000207080
.bss:0000000000207080 ; Segment type: Uninitialized
.bss:0000000000207080 ; Segment permissions: Read/Write
.bss:0000000000207080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000207080                 assume cs:_bss
.bss:0000000000207080                 ;org 207080h
.bss:0000000000207080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000207080                 public __bss_start ; weak
.bss:0000000000207080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000760↑o
.bss:0000000000207080                                         ; LOAD:00000000000007A8↑o ...
.bss:0000000000207080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000207080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000207080                                         ; _edata
.bss:0000000000207080                                         ; Copy of shared data
.bss:0000000000207088                 public stdout@@GLIBC_2_2_5
.bss:0000000000207088 ; FILE *stdout
.bss:0000000000207088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000748↑o
.bss:0000000000207088                                         ; usage+7D↑r ...
.bss:0000000000207088                                         ; Alternative name is 'stdout'
.bss:0000000000207088                                         ; Copy of shared data
.bss:0000000000207090                 public optind@@GLIBC_2_2_5
.bss:0000000000207090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000007F0↑o
.bss:0000000000207090                                         ; main+8C↑r ...
.bss:0000000000207090                                         ; Alternative name is 'optind'
.bss:0000000000207090                                         ; Copy of shared data
.bss:0000000000207094                 align 8
.bss:0000000000207098                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000207098 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000207098                                         ; DATA XREF: LOAD:0000000000000778↑o
.bss:0000000000207098                                         ; LOAD:0000000000000790↑o ...
.bss:0000000000207098                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000207098                                         ; Copy of shared data
.bss:00000000002070A0                 public opterr@@GLIBC_2_2_5
.bss:00000000002070A0 opterr@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000007C0↑o
.bss:00000000002070A0                                         ; parse_long_options+67↑r ...
.bss:00000000002070A0                                         ; Alternative name is 'opterr'
.bss:00000000002070A0                                         ; Copy of shared data
.bss:00000000002070A4                 align 20h
.bss:00000000002070C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002070C0 ; FILE *stderr
.bss:00000000002070C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007D8↑o
.bss:00000000002070C0                                         ; usage+3D↑r ...
.bss:00000000002070C0                                         ; Alternative name is 'stderr'
.bss:00000000002070C0                                         ; Copy of shared data
.bss:00000000002070C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002070C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002070C9                 align 10h
.bss:00000000002070D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002070D0                                         ; close_stdout+1B↑r
.bss:00000000002070D1                 align 8
.bss:00000000002070D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002070D8                                         ; close_stdout+56↑r
.bss:00000000002070E0                 public program_name
.bss:00000000002070E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002070E0                                         ; set_program_name:loc_1DFD↑w
.bss:00000000002070E8                 align 20h
.bss:0000000000207100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000207100                                         ; quotearg_free+46↑o ...
.bss:0000000000207101                 db    ? ;
.bss:0000000000207102                 db    ? ;
.bss:0000000000207103                 db    ? ;
.bss:0000000000207104                 db    ? ;
.bss:0000000000207105                 db    ? ;
.bss:0000000000207106                 db    ? ;
.bss:0000000000207107                 db    ? ;
.bss:0000000000207108                 db    ? ;
.bss:0000000000207109                 db    ? ;
.bss:000000000020710A                 db    ? ;
.bss:000000000020710B                 db    ? ;
.bss:000000000020710C                 db    ? ;
.bss:000000000020710D                 db    ? ;
.bss:000000000020710E                 db    ? ;
.bss:000000000020710F                 db    ? ;
.bss:0000000000207110                 db    ? ;
.bss:0000000000207111                 db    ? ;
.bss:0000000000207112                 db    ? ;
.bss:0000000000207113                 db    ? ;
.bss:0000000000207114                 db    ? ;
.bss:0000000000207115                 db    ? ;
.bss:0000000000207116                 db    ? ;
.bss:0000000000207117                 db    ? ;
.bss:0000000000207118                 db    ? ;
.bss:0000000000207119                 db    ? ;
.bss:000000000020711A                 db    ? ;
.bss:000000000020711B                 db    ? ;
.bss:000000000020711C                 db    ? ;
.bss:000000000020711D                 db    ? ;
.bss:000000000020711E                 db    ? ;
.bss:000000000020711F                 db    ? ;
.bss:0000000000207120                 db    ? ;
.bss:0000000000207121                 db    ? ;
.bss:0000000000207122                 db    ? ;
.bss:0000000000207123                 db    ? ;
.bss:0000000000207124                 db    ? ;
.bss:0000000000207125                 db    ? ;
.bss:0000000000207126                 db    ? ;
.bss:0000000000207127                 db    ? ;
.bss:0000000000207128                 db    ? ;
.bss:0000000000207129                 db    ? ;
.bss:000000000020712A                 db    ? ;
.bss:000000000020712B                 db    ? ;
.bss:000000000020712C                 db    ? ;
.bss:000000000020712D                 db    ? ;
.bss:000000000020712E                 db    ? ;
.bss:000000000020712F                 db    ? ;
.bss:0000000000207130                 db    ? ;
.bss:0000000000207131                 db    ? ;
.bss:0000000000207132                 db    ? ;
.bss:0000000000207133                 db    ? ;
.bss:0000000000207134                 db    ? ;
.bss:0000000000207135                 db    ? ;
.bss:0000000000207136                 db    ? ;
.bss:0000000000207137                 db    ? ;
.bss:0000000000207138                 db    ? ;
.bss:0000000000207139                 db    ? ;
.bss:000000000020713A                 db    ? ;
.bss:000000000020713B                 db    ? ;
.bss:000000000020713C                 db    ? ;
.bss:000000000020713D                 db    ? ;
.bss:000000000020713E                 db    ? ;
.bss:000000000020713F                 db    ? ;
.bss:0000000000207140                 db    ? ;
.bss:0000000000207141                 db    ? ;
.bss:0000000000207142                 db    ? ;
.bss:0000000000207143                 db    ? ;
.bss:0000000000207144                 db    ? ;
.bss:0000000000207145                 db    ? ;
.bss:0000000000207146                 db    ? ;
.bss:0000000000207147                 db    ? ;
.bss:0000000000207148                 db    ? ;
.bss:0000000000207149                 db    ? ;
.bss:000000000020714A                 db    ? ;
.bss:000000000020714B                 db    ? ;
.bss:000000000020714C                 db    ? ;
.bss:000000000020714D                 db    ? ;
.bss:000000000020714E                 db    ? ;
.bss:000000000020714F                 db    ? ;
.bss:0000000000207150                 db    ? ;
.bss:0000000000207151                 db    ? ;
.bss:0000000000207152                 db    ? ;
.bss:0000000000207153                 db    ? ;
.bss:0000000000207154                 db    ? ;
.bss:0000000000207155                 db    ? ;
.bss:0000000000207156                 db    ? ;
.bss:0000000000207157                 db    ? ;
.bss:0000000000207158                 db    ? ;
.bss:0000000000207159                 db    ? ;
.bss:000000000020715A                 db    ? ;
.bss:000000000020715B                 db    ? ;
.bss:000000000020715C                 db    ? ;
.bss:000000000020715D                 db    ? ;
.bss:000000000020715E                 db    ? ;
.bss:000000000020715F                 db    ? ;
.bss:0000000000207160                 db    ? ;
.bss:0000000000207161                 db    ? ;
.bss:0000000000207162                 db    ? ;
.bss:0000000000207163                 db    ? ;
.bss:0000000000207164                 db    ? ;
.bss:0000000000207165                 db    ? ;
.bss:0000000000207166                 db    ? ;
.bss:0000000000207167                 db    ? ;
.bss:0000000000207168                 db    ? ;
.bss:0000000000207169                 db    ? ;
.bss:000000000020716A                 db    ? ;
.bss:000000000020716B                 db    ? ;
.bss:000000000020716C                 db    ? ;
.bss:000000000020716D                 db    ? ;
.bss:000000000020716E                 db    ? ;
.bss:000000000020716F                 db    ? ;
.bss:0000000000207170                 db    ? ;
.bss:0000000000207171                 db    ? ;
.bss:0000000000207172                 db    ? ;
.bss:0000000000207173                 db    ? ;
.bss:0000000000207174                 db    ? ;
.bss:0000000000207175                 db    ? ;
.bss:0000000000207176                 db    ? ;
.bss:0000000000207177                 db    ? ;
.bss:0000000000207178                 db    ? ;
.bss:0000000000207179                 db    ? ;
.bss:000000000020717A                 db    ? ;
.bss:000000000020717B                 db    ? ;
.bss:000000000020717C                 db    ? ;
.bss:000000000020717D                 db    ? ;
.bss:000000000020717E                 db    ? ;
.bss:000000000020717F                 db    ? ;
.bss:0000000000207180                 db    ? ;
.bss:0000000000207181                 db    ? ;
.bss:0000000000207182                 db    ? ;
.bss:0000000000207183                 db    ? ;
.bss:0000000000207184                 db    ? ;
.bss:0000000000207185                 db    ? ;
.bss:0000000000207186                 db    ? ;
.bss:0000000000207187                 db    ? ;
.bss:0000000000207188                 db    ? ;
.bss:0000000000207189                 db    ? ;
.bss:000000000020718A                 db    ? ;
.bss:000000000020718B                 db    ? ;
.bss:000000000020718C                 db    ? ;
.bss:000000000020718D                 db    ? ;
.bss:000000000020718E                 db    ? ;
.bss:000000000020718F                 db    ? ;
.bss:0000000000207190                 db    ? ;
.bss:0000000000207191                 db    ? ;
.bss:0000000000207192                 db    ? ;
.bss:0000000000207193                 db    ? ;
.bss:0000000000207194                 db    ? ;
.bss:0000000000207195                 db    ? ;
.bss:0000000000207196                 db    ? ;
.bss:0000000000207197                 db    ? ;
.bss:0000000000207198                 db    ? ;
.bss:0000000000207199                 db    ? ;
.bss:000000000020719A                 db    ? ;
.bss:000000000020719B                 db    ? ;
.bss:000000000020719C                 db    ? ;
.bss:000000000020719D                 db    ? ;
.bss:000000000020719E                 db    ? ;
.bss:000000000020719F                 db    ? ;
.bss:00000000002071A0                 db    ? ;
.bss:00000000002071A1                 db    ? ;
.bss:00000000002071A2                 db    ? ;
.bss:00000000002071A3                 db    ? ;
.bss:00000000002071A4                 db    ? ;
.bss:00000000002071A5                 db    ? ;
.bss:00000000002071A6                 db    ? ;
.bss:00000000002071A7                 db    ? ;
.bss:00000000002071A8                 db    ? ;
.bss:00000000002071A9                 db    ? ;
.bss:00000000002071AA                 db    ? ;
.bss:00000000002071AB                 db    ? ;
.bss:00000000002071AC                 db    ? ;
.bss:00000000002071AD                 db    ? ;
.bss:00000000002071AE                 db    ? ;
.bss:00000000002071AF                 db    ? ;
.bss:00000000002071B0                 db    ? ;
.bss:00000000002071B1                 db    ? ;
.bss:00000000002071B2                 db    ? ;
.bss:00000000002071B3                 db    ? ;
.bss:00000000002071B4                 db    ? ;
.bss:00000000002071B5                 db    ? ;
.bss:00000000002071B6                 db    ? ;
.bss:00000000002071B7                 db    ? ;
.bss:00000000002071B8                 db    ? ;
.bss:00000000002071B9                 db    ? ;
.bss:00000000002071BA                 db    ? ;
.bss:00000000002071BB                 db    ? ;
.bss:00000000002071BC                 db    ? ;
.bss:00000000002071BD                 db    ? ;
.bss:00000000002071BE                 db    ? ;
.bss:00000000002071BF                 db    ? ;
.bss:00000000002071C0                 db    ? ;
.bss:00000000002071C1                 db    ? ;
.bss:00000000002071C2                 db    ? ;
.bss:00000000002071C3                 db    ? ;
.bss:00000000002071C4                 db    ? ;
.bss:00000000002071C5                 db    ? ;
.bss:00000000002071C6                 db    ? ;
.bss:00000000002071C7                 db    ? ;
.bss:00000000002071C8                 db    ? ;
.bss:00000000002071C9                 db    ? ;
.bss:00000000002071CA                 db    ? ;
.bss:00000000002071CB                 db    ? ;
.bss:00000000002071CC                 db    ? ;
.bss:00000000002071CD                 db    ? ;
.bss:00000000002071CE                 db    ? ;
.bss:00000000002071CF                 db    ? ;
.bss:00000000002071D0                 db    ? ;
.bss:00000000002071D1                 db    ? ;
.bss:00000000002071D2                 db    ? ;
.bss:00000000002071D3                 db    ? ;
.bss:00000000002071D4                 db    ? ;
.bss:00000000002071D5                 db    ? ;
.bss:00000000002071D6                 db    ? ;
.bss:00000000002071D7                 db    ? ;
.bss:00000000002071D8                 db    ? ;
.bss:00000000002071D9                 db    ? ;
.bss:00000000002071DA                 db    ? ;
.bss:00000000002071DB                 db    ? ;
.bss:00000000002071DC                 db    ? ;
.bss:00000000002071DD                 db    ? ;
.bss:00000000002071DE                 db    ? ;
.bss:00000000002071DF                 db    ? ;
.bss:00000000002071E0                 db    ? ;
.bss:00000000002071E1                 db    ? ;
.bss:00000000002071E2                 db    ? ;
.bss:00000000002071E3                 db    ? ;
.bss:00000000002071E4                 db    ? ;
.bss:00000000002071E5                 db    ? ;
.bss:00000000002071E6                 db    ? ;
.bss:00000000002071E7                 db    ? ;
.bss:00000000002071E8                 db    ? ;
.bss:00000000002071E9                 db    ? ;
.bss:00000000002071EA                 db    ? ;
.bss:00000000002071EB                 db    ? ;
.bss:00000000002071EC                 db    ? ;
.bss:00000000002071ED                 db    ? ;
.bss:00000000002071EE                 db    ? ;
.bss:00000000002071EF                 db    ? ;
.bss:00000000002071F0                 db    ? ;
.bss:00000000002071F1                 db    ? ;
.bss:00000000002071F2                 db    ? ;
.bss:00000000002071F3                 db    ? ;
.bss:00000000002071F4                 db    ? ;
.bss:00000000002071F5                 db    ? ;
.bss:00000000002071F6                 db    ? ;
.bss:00000000002071F7                 db    ? ;
.bss:00000000002071F8                 db    ? ;
.bss:00000000002071F9                 db    ? ;
.bss:00000000002071FA                 db    ? ;
.bss:00000000002071FB                 db    ? ;
.bss:00000000002071FC                 db    ? ;
.bss:00000000002071FD                 db    ? ;
.bss:00000000002071FE                 db    ? ;
.bss:00000000002071FF                 db    ? ;
.bss:0000000000207200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000207200                                         ; get_quoting_style↑o ...
.bss:0000000000207210 xmmword_207210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000207210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000207220 xmmword_207220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000207220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000207230 qword_207230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000207230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000207230 _bss            ends
.bss:0000000000207230
.prgend:0000000000207238 ; ===========================================================================
.prgend:0000000000207238
.prgend:0000000000207238 ; Segment type: Zero-length
.prgend:0000000000207238 _prgend         segment byte public '' use64
.prgend:0000000000207238 _end            label byte
.prgend:0000000000207238 _prgend         ends
.prgend:0000000000207238
extern:0000000000207240 ; ===========================================================================
extern:0000000000207240
extern:0000000000207240 ; Segment type: Externs
extern:0000000000207240 ; extern
extern:0000000000207240 ; void free(void *ptr)
extern:0000000000207240                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000207240                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000207248 ; void __noreturn abort(void)
extern:0000000000207248                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000207248                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000207250 ; int *_errno_location(void)
extern:0000000000207250                 extrn __errno_location:near
extern:0000000000207250                                         ; CODE XREF: ___errno_location↑j
extern:0000000000207250                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000207258 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000207258                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000207258                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000207260 ; void __noreturn exit(int status)
extern:0000000000207260                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000207260                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000207268 ; size_t _fpending(FILE *fp)
extern:0000000000207268                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000207268                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000207270 ; int puts(const char *s)
extern:0000000000207270                 extrn puts:near         ; CODE XREF: _puts↑j
extern:0000000000207270                                         ; DATA XREF: .got:puts_ptr↑o
extern:0000000000207278 ; char *textdomain(const char *domainname)
extern:0000000000207278                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000207278                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000207280 ; int fclose(FILE *stream)
extern:0000000000207280                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000207280                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000207288 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000207288                 extrn bindtextdomain:near
extern:0000000000207288                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000207288                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000207290 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000207290                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000207290                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000207298 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000207298                 extrn __ctype_get_mb_cur_max:near
extern:0000000000207298                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000207298                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002072A0 ; size_t strlen(const char *s)
extern:00000000002072A0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002072A0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002072A8                 extrn __stack_chk_fail:near
extern:00000000002072A8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002072A8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002072B0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002072B0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002072B0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002072B8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002072B8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002072B8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002072C0 ; char *strrchr(const char *s, int c)
extern:00000000002072C0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002072C0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002072C8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002072C8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002072C8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002072D0 ; void *memset(void *s, int c, size_t n)
extern:00000000002072D0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002072D0                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002072D8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002072D8                 extrn __libc_start_main:near
extern:00000000002072D8                                         ; CODE XREF: start+24↑p
extern:00000000002072D8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002072E0 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002072E0                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002072E0                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002072E8 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002072E8                 extrn fputs_unlocked:near
extern:00000000002072E8                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002072E8                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002072F0 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002072F0                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002072F0                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002072F8 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002072F8                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002072F8                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000207300 ; int fileno(FILE *stream)
extern:0000000000207300                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000207300                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000207308 ; void *malloc(size_t size)
extern:0000000000207308                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000207308                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000207310 ; int fflush(FILE *stream)
extern:0000000000207310                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000207310                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000207318 ; char *nl_langinfo(nl_item item)
extern:0000000000207318                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000207318                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000207320 ; char *getlogin(void)
extern:0000000000207320                 extrn getlogin:near     ; CODE XREF: _getlogin↑j
extern:0000000000207320                                         ; DATA XREF: .got:getlogin_ptr↑o
extern:0000000000207328 ; int _freading(FILE *fp)
extern:0000000000207328                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000207328                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000207330 ; void *realloc(void *ptr, size_t size)
extern:0000000000207330                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000207330                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000207338 ; char *setlocale(int category, const char *locale)
extern:0000000000207338                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000207338                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000207340                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000207340                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000207348 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000207348                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000207348                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000207350 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000207350                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000207350                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000207358 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000207358                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000207358                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000207360 ; void __noreturn exit(int status)
extern:0000000000207360                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000207360                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000207368 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000207368                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000207368                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000207370                 extrn __fprintf_chk:near
extern:0000000000207370                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000207370                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000207378 ; int mbsinit(const mbstate_t *ps)
extern:0000000000207378                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000207378                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000207380 ; int iswprint(wint_t wc)
extern:0000000000207380                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000207380                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000207388 ; int __fastcall __cxa_finalize(void *)
extern:0000000000207388                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000207388                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000207388                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000207390 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000207390                 extrn __ctype_b_loc:near
extern:0000000000207390                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000207390                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000207398                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000207398                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002073A0                 extrn __gmon_start__:near ; weak
extern:00000000002073A0                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002073A0                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002073A8                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002073A8                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002073A8
extern:00000000002073A8
extern:00000000002073A8                 end start
