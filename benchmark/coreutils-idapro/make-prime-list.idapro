LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : C2A43E14BEE0973BAEF1660223301A2ACF792F27C3B29463146E988258F8FF15
LOAD:0000000000000000 ; Input MD5    : 5EE566816F3525B0227275BE1BC95DE9
LOAD:0000000000000000 ; Input CRC32  : 2B60C575
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/make-prime-list
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'make-prime-list.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002D8↓o
LOAD:0000000000000000                                         ; LOAD:00000000000002F0↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 56B8h                ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 24h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 23h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 1540h                ; Size in file image
LOAD:00000000000000D8                 dq 1540h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 1D48h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100                 dq 201D48h              ; Physical address
LOAD:0000000000000108                 dq 2C8h                 ; Size in file image
LOAD:0000000000000110                 dq 308h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 1D58h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 201D58h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 1328h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 1328h                ; Physical address
LOAD:00000000000001B0                 dq 54h                  ; Size in file image
LOAD:00000000000001B8                 dq 54h                  ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 1D48h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 201D48h              ; Physical address
LOAD:0000000000000220                 dq 2B8h                 ; Size in file image
LOAD:0000000000000228                 dq 2B8h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 87h, 0F7h, 73h, 59h, 0A4h, 15h, 40h, 7Dh, 0FBh, 6Bh ; Desc
LOAD:0000000000000284                 db 47h, 0A4h, 0A3h, 23h, 3Eh, 35h, 95h, 0E6h, 0F7h, 9Fh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 2
LOAD:000000000000029C elf_gnu_hash_symbias dd 15h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 210010000000100h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 15h, 16h
LOAD:00000000000002B8 elf_gnu_hash_chain dd 1C8C1D29h, 1C8BF239h
LOAD:00000000000002C0 ; ELF Symbol Table
LOAD:00000000000002C0                 Elf64_Sym <0>
LOAD:00000000000002D8                 Elf64_Sym <offset aFree - offset byte_4E8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002D8                            0>
LOAD:00000000000002F0                 Elf64_Sym <offset aPutchar - offset byte_4E8, 12h, 0, 0, \ ; "putchar"
LOAD:00000000000002F0                            offset dword_0, 0>
LOAD:0000000000000308                 Elf64_Sym <offset aAbort - offset byte_4E8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000308                            0>
LOAD:0000000000000320                 Elf64_Sym <offset aErrnoLocation - offset byte_4E8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000320                            offset dword_0, 0>
LOAD:0000000000000338                 Elf64_Sym <offset aItmDeregistert - offset byte_4E8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000338                            offset dword_0, 0>
LOAD:0000000000000350                 Elf64_Sym <offset aPuts - offset byte_4E8, 12h, 0, 0, offset dword_0, \ ; "puts"
LOAD:0000000000000350                            0>
LOAD:0000000000000368                 Elf64_Sym <offset aFerror - offset byte_4E8, 12h, 0, 0, \ ; "ferror"
LOAD:0000000000000368                            offset dword_0, 0>
LOAD:0000000000000380                 Elf64_Sym <offset aFclose - offset byte_4E8, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000380                            offset dword_0, 0>
LOAD:0000000000000398                 Elf64_Sym <offset aMemset - offset byte_4E8, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000398                            offset dword_0, 0>
LOAD:00000000000003B0                 Elf64_Sym <offset aLibcStartMain - offset byte_4E8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000003B0                            offset dword_0, 0>
LOAD:00000000000003C8                 Elf64_Sym <offset aGmonStart - offset byte_4E8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000003C8                            offset dword_0, 0>
LOAD:00000000000003E0                 Elf64_Sym <offset aStrtol - offset byte_4E8, 12h, 0, 0, \ ; "strtol"
LOAD:00000000000003E0                            offset dword_0, 0>
LOAD:00000000000003F8                 Elf64_Sym <offset aMalloc - offset byte_4E8, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000003F8                            offset dword_0, 0>
LOAD:0000000000000410                 Elf64_Sym <offset aPrintfChk - offset byte_4E8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000410                            offset dword_0, 0>
LOAD:0000000000000428                 Elf64_Sym <offset aExit - offset byte_4E8, 12h, 0, 0, offset dword_0, \ ; "exit"
LOAD:0000000000000428                            0>
LOAD:0000000000000440                 Elf64_Sym <offset aFwrite - offset byte_4E8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000440                            offset dword_0, 0>
LOAD:0000000000000458                 Elf64_Sym <offset aFprintfChk - offset byte_4E8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000458                            offset dword_0, 0>
LOAD:0000000000000470                 Elf64_Sym <offset aItmRegistertmc - offset byte_4E8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000470                            offset dword_0, 0>
LOAD:0000000000000488                 Elf64_Sym <offset aStrerror - offset byte_4E8, 12h, 0, 0, \ ; "strerror"
LOAD:0000000000000488                            offset dword_0, 0>
LOAD:00000000000004A0                 Elf64_Sym <offset aCxaFinalize - offset byte_4E8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000004A0                            offset dword_0, 0>
LOAD:00000000000004B8                 Elf64_Sym <offset aStdout - offset byte_4E8, 11h, 0, 18h, \ ; "stdout"
LOAD:00000000000004B8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000004D0                 Elf64_Sym <offset aStderr - offset byte_4E8, 11h, 0, 18h, \ ; "stderr"
LOAD:00000000000004D0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000004E8 ; ELF String Table
LOAD:00000000000004E8 byte_4E8        db 0                    ; DATA XREF: LOAD:00000000000002D8↑o
LOAD:00000000000004E8                                         ; LOAD:00000000000002F0↑o ...
LOAD:00000000000004E9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000630↓o
LOAD:00000000000004F3 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000410↑o
LOAD:0000000000000500 aExit           db 'exit',0             ; DATA XREF: LOAD:0000000000000428↑o
LOAD:0000000000000505 aPuts           db 'puts',0             ; DATA XREF: LOAD:0000000000000350↑o
LOAD:000000000000050A aPutchar        db 'putchar',0          ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000512 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000308↑o
LOAD:0000000000000518 aStrtol         db 'strtol',0           ; DATA XREF: LOAD:00000000000003E0↑o
LOAD:000000000000051F aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000398↑o
LOAD:0000000000000526 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000320↑o
LOAD:0000000000000537 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000458↑o
LOAD:0000000000000545 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000004B8↑o
LOAD:000000000000054C aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000380↑o
LOAD:0000000000000553 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000003F8↑o
LOAD:000000000000055A aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000004D0↑o
LOAD:0000000000000561 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000440↑o
LOAD:0000000000000568 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000004A0↑o
LOAD:0000000000000577 aStrerror       db 'strerror',0         ; DATA XREF: LOAD:0000000000000488↑o
LOAD:0000000000000580 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000580                                         ; DATA XREF: LOAD:00000000000003B0↑o
LOAD:0000000000000592 aFerror         db 'ferror',0           ; DATA XREF: LOAD:0000000000000368↑o
LOAD:0000000000000599 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002D8↑o
LOAD:000000000000059E aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000640↓o
LOAD:00000000000005AA aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000650↓o
LOAD:00000000000005B6 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:00000000000005B6                                         ; DATA XREF: LOAD:0000000000000338↑o
LOAD:00000000000005D2 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000003C8↑o
LOAD:00000000000005E1 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:00000000000005E1                                         ; DATA XREF: LOAD:0000000000000470↑o
LOAD:00000000000005FB                 align 4
LOAD:00000000000005FC ; ELF GNU Symbol Version Table
LOAD:00000000000005FC                 dw 0
LOAD:00000000000005FE                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000600                 dw 2                    ; putchar@@GLIBC_2.2.5
LOAD:0000000000000602                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000604                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000606                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000608                 dw 2                    ; puts@@GLIBC_2.2.5
LOAD:000000000000060A                 dw 2                    ; ferror@@GLIBC_2.2.5
LOAD:000000000000060C                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:000000000000060E                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000610                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000612                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000614                 dw 2                    ; strtol@@GLIBC_2.2.5
LOAD:0000000000000616                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000618                 dw 3                    ; __printf_chk@@GLIBC_2.3.4
LOAD:000000000000061A                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:000000000000061C                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:000000000000061E                 dw 3                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000620                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000622                 dw 2                    ; strerror@@GLIBC_2.2.5
LOAD:0000000000000624                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000626                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000628                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:000000000000062A                 dw 0
LOAD:000000000000062C                 dw 0
LOAD:000000000000062E                 dw 0
LOAD:0000000000000630 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000630                 Elf64_Verneed <1, 2, offset aLibcSo6 - offset byte_4E8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000640                 Elf64_Vernaux <9691974h, 0, 3, offset aGlibc234 - offset byte_4E8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000640                                10h>
LOAD:0000000000000650                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_4E8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000660 ; ELF RELA Relocation Table
LOAD:0000000000000660                 Elf64_Rela <201D48h, 8, 0EF0h> ; R_X86_64_RELATIVE +0EF0h
LOAD:0000000000000678                 Elf64_Rela <201D50h, 8, 0EB0h> ; R_X86_64_RELATIVE +0EB0h
LOAD:0000000000000690                 Elf64_Rela <202008h, 8, 202008h> ; R_X86_64_RELATIVE +202008h
LOAD:00000000000006A8                 Elf64_Rela <201FD8h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:00000000000006C0                 Elf64_Rela <201FE0h, 0A00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:00000000000006D8                 Elf64_Rela <201FE8h, 0B00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:00000000000006F0                 Elf64_Rela <201FF0h, 1200000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000708                 Elf64_Rela <201FF8h, 1400000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000720                 Elf64_Rela <202020h, 1500000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000738                 Elf64_Rela <202040h, 1600000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000750 ; ELF JMPREL Relocation Table
LOAD:0000000000000750                 Elf64_Rela <201F60h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000768                 Elf64_Rela <201F68h, 200000007h, 0> ; R_X86_64_JUMP_SLOT putchar
LOAD:0000000000000780                 Elf64_Rela <201F70h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000798                 Elf64_Rela <201F78h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:00000000000007B0                 Elf64_Rela <201F80h, 600000007h, 0> ; R_X86_64_JUMP_SLOT puts
LOAD:00000000000007C8                 Elf64_Rela <201F88h, 700000007h, 0> ; R_X86_64_JUMP_SLOT ferror
LOAD:00000000000007E0                 Elf64_Rela <201F90h, 800000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:00000000000007F8                 Elf64_Rela <201F98h, 900000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000000810                 Elf64_Rela <201FA0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT strtol
LOAD:0000000000000828                 Elf64_Rela <201FA8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000000840                 Elf64_Rela <201FB0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000000858                 Elf64_Rela <201FB8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000000870                 Elf64_Rela <201FC0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000000888                 Elf64_Rela <201FC8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000008A0                 Elf64_Rela <201FD0h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT strerror
LOAD:00000000000008A0 LOAD            ends
LOAD:00000000000008A0
.init:00000000000008B8 ; ===========================================================================
.init:00000000000008B8
.init:00000000000008B8 ; Segment type: Pure code
.init:00000000000008B8 ; Segment permissions: Read/Execute
.init:00000000000008B8 _init           segment dword public 'CODE' use64
.init:00000000000008B8                 assume cs:_init
.init:00000000000008B8                 ;org 8B8h
.init:00000000000008B8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000008B8
.init:00000000000008B8 ; =============== S U B R O U T I N E =======================================
.init:00000000000008B8
.init:00000000000008B8
.init:00000000000008B8                 public _init_proc
.init:00000000000008B8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000008B8                 sub     rsp, 8          ; _init
.init:00000000000008BC                 mov     rax, cs:__gmon_start___ptr
.init:00000000000008C3                 test    rax, rax
.init:00000000000008C6                 jz      short loc_8CA
.init:00000000000008C8                 call    rax ; __gmon_start__
.init:00000000000008CA
.init:00000000000008CA loc_8CA:                                ; CODE XREF: _init_proc+E↑j
.init:00000000000008CA                 add     rsp, 8
.init:00000000000008CE                 retn
.init:00000000000008CE _init_proc      endp
.init:00000000000008CE
.init:00000000000008CE _init           ends
.init:00000000000008CE
LOAD:00000000000008CF ; ===========================================================================
LOAD:00000000000008CF
LOAD:00000000000008CF ; Segment type: Pure code
LOAD:00000000000008CF ; Segment permissions: Read/Execute
LOAD:00000000000008CF LOAD            segment byte public 'CODE' use64
LOAD:00000000000008CF                 assume cs:LOAD
LOAD:00000000000008CF                 ;org 8CFh
LOAD:00000000000008CF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000008CF                 align 10h
LOAD:00000000000008CF LOAD            ends
LOAD:00000000000008CF
.plt:00000000000008D0 ; ===========================================================================
.plt:00000000000008D0
.plt:00000000000008D0 ; Segment type: Pure code
.plt:00000000000008D0 ; Segment permissions: Read/Execute
.plt:00000000000008D0 _plt            segment para public 'CODE' use64
.plt:00000000000008D0                 assume cs:_plt
.plt:00000000000008D0                 ;org 8D0h
.plt:00000000000008D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000008D0
.plt:00000000000008D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000008D0
.plt:00000000000008D0
.plt:00000000000008D0 sub_8D0         proc near               ; CODE XREF: .plt:00000000000008EB↓j
.plt:00000000000008D0                                         ; .plt:00000000000008FB↓j ...
.plt:00000000000008D0 ; __unwind {
.plt:00000000000008D0                 push    cs:qword_201F50
.plt:00000000000008D6                 jmp     cs:qword_201F58
.plt:00000000000008D6 sub_8D0         endp
.plt:00000000000008D6
.plt:00000000000008D6 ; ---------------------------------------------------------------------------
.plt:00000000000008DC                 align 20h
.plt:00000000000008E0
.plt:00000000000008E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000008E0
.plt:00000000000008E0 ; Attributes: thunk
.plt:00000000000008E0
.plt:00000000000008E0 ; void free(void *ptr)
.plt:00000000000008E0 _free           proc near               ; CODE XREF: main+389↓p
.plt:00000000000008E0                                         ; main+391↓p
.plt:00000000000008E0                 jmp     cs:free_ptr
.plt:00000000000008E0 _free           endp
.plt:00000000000008E0
.plt:00000000000008E6 ; ---------------------------------------------------------------------------
.plt:00000000000008E6                 push    0
.plt:00000000000008EB                 jmp     sub_8D0
.plt:00000000000008F0
.plt:00000000000008F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000008F0
.plt:00000000000008F0 ; Attributes: thunk
.plt:00000000000008F0
.plt:00000000000008F0 ; int putchar(int c)
.plt:00000000000008F0 _putchar        proc near               ; CODE XREF: print_wide_uint+ED↓p
.plt:00000000000008F0                 jmp     cs:putchar_ptr
.plt:00000000000008F0 _putchar        endp
.plt:00000000000008F0
.plt:00000000000008F6 ; ---------------------------------------------------------------------------
.plt:00000000000008F6                 push    1
.plt:00000000000008FB                 jmp     sub_8D0
.plt:0000000000000900
.plt:0000000000000900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000000900
.plt:0000000000000900 ; Attributes: noreturn thunk
.plt:0000000000000900
.plt:0000000000000900 ; void __noreturn abort(void)
.plt:0000000000000900 _abort          proc near               ; CODE XREF: main:loc_DDE↓p
.plt:0000000000000900                 jmp     cs:abort_ptr
.plt:0000000000000900 _abort          endp
.plt:0000000000000900
.plt:0000000000000906 ; ---------------------------------------------------------------------------
.plt:0000000000000906                 push    2
.plt:000000000000090B                 jmp     sub_8D0
.plt:0000000000000910
.plt:0000000000000910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000000910
.plt:0000000000000910 ; Attributes: thunk
.plt:0000000000000910
.plt:0000000000000910 ; int *__errno_location(void)
.plt:0000000000000910 ___errno_location proc near             ; CODE XREF: main+3B8↓p
.plt:0000000000000910                 jmp     cs:__errno_location_ptr
.plt:0000000000000910 ___errno_location endp
.plt:0000000000000910
.plt:0000000000000916 ; ---------------------------------------------------------------------------
.plt:0000000000000916                 push    3
.plt:000000000000091B                 jmp     sub_8D0
.plt:0000000000000920
.plt:0000000000000920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000000920
.plt:0000000000000920 ; Attributes: thunk
.plt:0000000000000920
.plt:0000000000000920 ; int puts(const char *s)
.plt:0000000000000920 _puts           proc near               ; CODE XREF: main+208↓p
.plt:0000000000000920                                         ; main+2ED↓p
.plt:0000000000000920                 jmp     cs:puts_ptr
.plt:0000000000000920 _puts           endp
.plt:0000000000000920
.plt:0000000000000926 ; ---------------------------------------------------------------------------
.plt:0000000000000926                 push    4
.plt:000000000000092B                 jmp     sub_8D0
.plt:0000000000000930
.plt:0000000000000930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000000930
.plt:0000000000000930 ; Attributes: thunk
.plt:0000000000000930
.plt:0000000000000930 ; int ferror(FILE *stream)
.plt:0000000000000930 _ferror         proc near               ; CODE XREF: main+39D↓p
.plt:0000000000000930                 jmp     cs:ferror_ptr
.plt:0000000000000930 _ferror         endp
.plt:0000000000000930
.plt:0000000000000936 ; ---------------------------------------------------------------------------
.plt:0000000000000936                 push    5
.plt:000000000000093B                 jmp     sub_8D0
.plt:0000000000000940
.plt:0000000000000940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000000940
.plt:0000000000000940 ; Attributes: thunk
.plt:0000000000000940
.plt:0000000000000940 ; int fclose(FILE *stream)
.plt:0000000000000940 _fclose         proc near               ; CODE XREF: main+3AB↓p
.plt:0000000000000940                 jmp     cs:fclose_ptr
.plt:0000000000000940 _fclose         endp
.plt:0000000000000940
.plt:0000000000000946 ; ---------------------------------------------------------------------------
.plt:0000000000000946                 push    6
.plt:000000000000094B                 jmp     sub_8D0
.plt:0000000000000950
.plt:0000000000000950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000000950
.plt:0000000000000950 ; Attributes: thunk
.plt:0000000000000950
.plt:0000000000000950 ; void *memset(void *s, int c, size_t n)
.plt:0000000000000950 _memset         proc near               ; CODE XREF: main+9F↓p
.plt:0000000000000950                 jmp     cs:memset_ptr
.plt:0000000000000950 _memset         endp
.plt:0000000000000950
.plt:0000000000000956 ; ---------------------------------------------------------------------------
.plt:0000000000000956                 push    7
.plt:000000000000095B                 jmp     sub_8D0
.plt:0000000000000960
.plt:0000000000000960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000000960
.plt:0000000000000960 ; Attributes: thunk
.plt:0000000000000960
.plt:0000000000000960 ; __int64 strtol(const char *nptr, char **endptr, int base)
.plt:0000000000000960 _strtol         proc near               ; CODE XREF: main+58↓p
.plt:0000000000000960                 jmp     cs:strtol_ptr
.plt:0000000000000960 _strtol         endp
.plt:0000000000000960
.plt:0000000000000966 ; ---------------------------------------------------------------------------
.plt:0000000000000966                 push    8
.plt:000000000000096B                 jmp     sub_8D0
.plt:0000000000000970
.plt:0000000000000970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000000970
.plt:0000000000000970 ; Attributes: thunk
.plt:0000000000000970
.plt:0000000000000970 ; void *malloc(size_t size)
.plt:0000000000000970 _malloc         proc near               ; CODE XREF: xalloc+4↓p
.plt:0000000000000970                 jmp     cs:malloc_ptr
.plt:0000000000000970 _malloc         endp
.plt:0000000000000970
.plt:0000000000000976 ; ---------------------------------------------------------------------------
.plt:0000000000000976                 push    9
.plt:000000000000097B                 jmp     sub_8D0
.plt:0000000000000980
.plt:0000000000000980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000000980
.plt:0000000000000980 ; Attributes: thunk
.plt:0000000000000980
.plt:0000000000000980 ___printf_chk   proc near               ; CODE XREF: main+220↓p
.plt:0000000000000980                                         ; main+2A7↓p ...
.plt:0000000000000980                 jmp     cs:__printf_chk_ptr
.plt:0000000000000980 ___printf_chk   endp
.plt:0000000000000980
.plt:0000000000000986 ; ---------------------------------------------------------------------------
.plt:0000000000000986                 push    0Ah
.plt:000000000000098B                 jmp     sub_8D0
.plt:0000000000000990
.plt:0000000000000990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000000990
.plt:0000000000000990 ; Attributes: noreturn thunk
.plt:0000000000000990
.plt:0000000000000990 ; void __noreturn exit(int status)
.plt:0000000000000990 _exit           proc near               ; CODE XREF: xalloc+35↓p
.plt:0000000000000990                 jmp     cs:exit_ptr
.plt:0000000000000990 _exit           endp
.plt:0000000000000990
.plt:0000000000000996 ; ---------------------------------------------------------------------------
.plt:0000000000000996                 push    0Bh
.plt:000000000000099B                 jmp     sub_8D0
.plt:00000000000009A0
.plt:00000000000009A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000009A0
.plt:00000000000009A0 ; Attributes: thunk
.plt:00000000000009A0
.plt:00000000000009A0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000009A0 _fwrite         proc near               ; CODE XREF: xalloc+2B↓p
.plt:00000000000009A0                 jmp     cs:fwrite_ptr
.plt:00000000000009A0 _fwrite         endp
.plt:00000000000009A0
.plt:00000000000009A6 ; ---------------------------------------------------------------------------
.plt:00000000000009A6                 push    0Ch
.plt:00000000000009AB                 jmp     sub_8D0
.plt:00000000000009B0
.plt:00000000000009B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000009B0
.plt:00000000000009B0 ; Attributes: thunk
.plt:00000000000009B0
.plt:00000000000009B0 ___fprintf_chk  proc near               ; CODE XREF: main+2B↓p
.plt:00000000000009B0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000009B0 ___fprintf_chk  endp
.plt:00000000000009B0
.plt:00000000000009B6 ; ---------------------------------------------------------------------------
.plt:00000000000009B6                 push    0Dh
.plt:00000000000009BB                 jmp     sub_8D0
.plt:00000000000009C0
.plt:00000000000009C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000009C0
.plt:00000000000009C0 ; Attributes: thunk
.plt:00000000000009C0
.plt:00000000000009C0 ; char *strerror(int errnum)
.plt:00000000000009C0 _strerror       proc near               ; CODE XREF: main+3BF↓p
.plt:00000000000009C0                 jmp     cs:strerror_ptr
.plt:00000000000009C0 _strerror       endp
.plt:00000000000009C0
.plt:00000000000009C6 ; ---------------------------------------------------------------------------
.plt:00000000000009C6                 push    0Eh
.plt:00000000000009CB                 jmp     sub_8D0
.plt:00000000000009CB ; } // starts at 8D0
.plt:00000000000009CB _plt            ends
.plt:00000000000009CB
.plt.got:00000000000009D0 ; ===========================================================================
.plt.got:00000000000009D0
.plt.got:00000000000009D0 ; Segment type: Pure code
.plt.got:00000000000009D0 ; Segment permissions: Read/Execute
.plt.got:00000000000009D0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000009D0                 assume cs:_plt_got
.plt.got:00000000000009D0                 ;org 9D0h
.plt.got:00000000000009D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000009D0
.plt.got:00000000000009D0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000009D0
.plt.got:00000000000009D0 ; Attributes: thunk
.plt.got:00000000000009D0
.plt.got:00000000000009D0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000009D0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000009D0 ; __unwind {
.plt.got:00000000000009D0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000009D0 __cxa_finalize  endp
.plt.got:00000000000009D0
.plt.got:00000000000009D0 ; ---------------------------------------------------------------------------
.plt.got:00000000000009D6                 align 8
.plt.got:00000000000009D6 ; } // starts at 9D0
.plt.got:00000000000009D6 _plt_got        ends
.plt.got:00000000000009D6
LOAD:00000000000009D8 ; ===========================================================================
LOAD:00000000000009D8
LOAD:00000000000009D8 ; Segment type: Pure code
LOAD:00000000000009D8 ; Segment permissions: Read/Execute
LOAD:00000000000009D8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000009D8                 assume cs:LOAD
LOAD:00000000000009D8                 ;org 9D8h
LOAD:00000000000009D8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000009D8                 align 20h
LOAD:00000000000009D8 LOAD            ends
LOAD:00000000000009D8
.text:00000000000009E0 ; ===========================================================================
.text:00000000000009E0
.text:00000000000009E0 ; Segment type: Pure code
.text:00000000000009E0 ; Segment permissions: Read/Execute
.text:00000000000009E0 _text           segment para public 'CODE' use64
.text:00000000000009E0                 assume cs:_text
.text:00000000000009E0                 ;org 9E0h
.text:00000000000009E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000009E0
.text:00000000000009E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000009E0
.text:00000000000009E0
.text:00000000000009E0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000009E0                 public main
.text:00000000000009E0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000009E0
.text:00000000000009E0 ptr             = qword ptr -68h
.text:00000000000009E0 var_60          = qword ptr -60h
.text:00000000000009E0 var_50          = qword ptr -50h
.text:00000000000009E0 var_48          = dword ptr -48h
.text:00000000000009E0 var_44          = dword ptr -44h
.text:00000000000009E0 var_40          = qword ptr -40h
.text:00000000000009E0
.text:00000000000009E0 ; __unwind {
.text:00000000000009E0                 push    r15
.text:00000000000009E2                 push    r14
.text:00000000000009E4                 push    r13
.text:00000000000009E6                 push    r12
.text:00000000000009E8                 push    rbp
.text:00000000000009E9                 push    rbx
.text:00000000000009EA                 sub     rsp, 38h
.text:00000000000009EE                 cmp     edi, 2
.text:00000000000009F1                 jz      short loc_A24
.text:00000000000009F3                 mov     rcx, [rsi]
.text:00000000000009F6                 lea     rdx, aUsageSLimitPro ; "Usage: %s LIMIT\nProduces a list of odd"...
.text:00000000000009FD
.text:00000000000009FD loc_9FD:                                ; CODE XREF: main+3CE↓j
.text:00000000000009FD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000000A04                 mov     esi, 1
.text:0000000000000A09                 xor     eax, eax
.text:0000000000000A0B                 call    ___fprintf_chk
.text:0000000000000A10                 mov     eax, 1
.text:0000000000000A15
.text:0000000000000A15 loc_A15:                                ; CODE XREF: main+32A↓j
.text:0000000000000A15                 add     rsp, 38h
.text:0000000000000A19                 pop     rbx
.text:0000000000000A1A                 pop     rbp
.text:0000000000000A1B                 pop     r12
.text:0000000000000A1D                 pop     r13
.text:0000000000000A1F                 pop     r14
.text:0000000000000A21                 pop     r15
.text:0000000000000A23                 retn
.text:0000000000000A24 ; ---------------------------------------------------------------------------
.text:0000000000000A24
.text:0000000000000A24 loc_A24:                                ; CODE XREF: main+11↑j
.text:0000000000000A24                 mov     rdi, [rsi+8]    ; nptr
.text:0000000000000A28                 mov     edx, 0Ah        ; base
.text:0000000000000A2D                 xor     esi, esi        ; endptr
.text:0000000000000A2F                 mov     [rsp+68h+ptr], r9
.text:0000000000000A33                 mov     [rsp+68h+var_60], r10
.text:0000000000000A38                 call    _strtol
.text:0000000000000A3D                 cmp     eax, 2
.text:0000000000000A40                 mov     edx, eax
.text:0000000000000A42                 mov     r9, [rsp+68h+ptr]
.text:0000000000000A46                 mov     r10, [rsp+68h+var_60]
.text:0000000000000A4B                 jle     loc_D08
.text:0000000000000A51                 test    al, 1
.text:0000000000000A53                 jnz     short loc_A58
.text:0000000000000A55                 lea     edx, [rax-1]
.text:0000000000000A58
.text:0000000000000A58 loc_A58:                                ; CODE XREF: main+73↑j
.text:0000000000000A58                 lea     ebx, [rdx-1]
.text:0000000000000A5B                 mov     [rsp+68h+ptr], r9
.text:0000000000000A5F                 mov     [rsp+68h+var_60], r10
.text:0000000000000A64                 sar     ebx, 1
.text:0000000000000A66                 movsxd  r12, ebx
.text:0000000000000A69                 mov     rdi, r12
.text:0000000000000A6C                 call    xalloc
.text:0000000000000A71                 mov     rdx, r12        ; n
.text:0000000000000A74                 mov     esi, 1          ; c
.text:0000000000000A79                 mov     rdi, rax        ; s
.text:0000000000000A7C                 mov     r15, rax
.text:0000000000000A7F                 call    _memset
.text:0000000000000A84                 imul    rdi, r12, 30h ; '0'
.text:0000000000000A88                 call    xalloc
.text:0000000000000A8D                 test    ebx, ebx
.text:0000000000000A8F                 mov     rbp, rax
.text:0000000000000A92                 jz      loc_DBC
.text:0000000000000A98                 xor     ebx, ebx
.text:0000000000000A9A                 mov     [rsp+68h+var_40], rbp
.text:0000000000000A9F                 xor     eax, eax
.text:0000000000000AA1                 mov     rbp, rbx
.text:0000000000000AA4
.text:0000000000000AA4 loc_AA4:                                ; CODE XREF: main+3D7↓j
.text:0000000000000AA4                 lea     r9d, [rbp+rbp+3]
.text:0000000000000AA9                 lea     r11, [rax+rax*2]
.text:0000000000000AAD                 xor     r10d, r10d
.text:0000000000000AB0                 lea     edi, [rax+1]
.text:0000000000000AB3                 mov     eax, 0F5397DB1h
.text:0000000000000AB8                 xor     r14d, r14d
.text:0000000000000ABB                 mov     rcx, r9
.text:0000000000000ABE                 shl     r11, 4
.text:0000000000000AC2                 add     r11, [rsp+68h+var_40]
.text:0000000000000AC7                 shrd    rcx, r10, 1
.text:0000000000000ACC                 mov     r8, r9
.text:0000000000000ACF                 mov     [rsp+68h+var_44], edi
.text:0000000000000AD3                 and     ecx, 7
.text:0000000000000AD6                 shl     ecx, 2
.text:0000000000000AD9                 mov     [r11], r9d
.text:0000000000000ADC                 shr     eax, cl
.text:0000000000000ADE                 mov     r13d, eax
.text:0000000000000AE1                 jmp     short loc_AEE
.text:0000000000000AE1 ; ---------------------------------------------------------------------------
.text:0000000000000AE3                 align 8
.text:0000000000000AE8
.text:0000000000000AE8 loc_AE8:                                ; CODE XREF: main+16D↓j
.text:0000000000000AE8                 mov     r13, rcx
.text:0000000000000AEB                 mov     r14, rbx
.text:0000000000000AEE
.text:0000000000000AEE loc_AEE:                                ; CODE XREF: main+101↑j
.text:0000000000000AEE                 mov     rsi, r14
.text:0000000000000AF1                 mov     rax, r13
.text:0000000000000AF4                 mov     rcx, r13
.text:0000000000000AF7                 mul     r13
.text:0000000000000AFA                 mov     rbx, r14
.text:0000000000000AFD                 add     rcx, r13
.text:0000000000000B00                 imul    rsi, r13
.text:0000000000000B04                 shld    rbx, r13, 1
.text:0000000000000B09                 mov     [rsp+68h+var_60], rdx
.text:0000000000000B0E                 mov     [rsp+68h+ptr], rax
.text:0000000000000B12                 add     rsi, rsi
.text:0000000000000B15                 add     [rsp+68h+var_60], rsi
.text:0000000000000B1A                 mov     rdx, [rsp+68h+ptr]
.text:0000000000000B1E                 mov     rsi, [rsp+68h+var_60]
.text:0000000000000B23                 mov     rax, [rsp+68h+ptr]
.text:0000000000000B27                 imul    rdx, r10
.text:0000000000000B2B                 imul    rsi, r9
.text:0000000000000B2F                 add     rsi, rdx
.text:0000000000000B32                 mul     r9
.text:0000000000000B35                 add     rdx, rsi
.text:0000000000000B38                 sub     rcx, rax
.text:0000000000000B3B                 mov     rax, r13
.text:0000000000000B3E                 sbb     rbx, rdx
.text:0000000000000B41                 mov     rdx, r14
.text:0000000000000B44                 xor     rax, rcx
.text:0000000000000B47                 xor     rdx, rbx
.text:0000000000000B4A                 or      rdx, rax
.text:0000000000000B4D                 jnz     short loc_AE8
.text:0000000000000B4F                 mov     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000000B56                 mov     [r11+10h], r13
.text:0000000000000B5A                 mov     [r11+18h], r14
.text:0000000000000B5E                 mov     rdx, r9
.text:0000000000000B61                 mov     rcx, r10
.text:0000000000000B64                 mov     rsi, rdi
.text:0000000000000B67                 mov     [rsp+68h+var_48], r8d
.text:0000000000000B6C                 mov     [rsp+68h+var_50], r11
.text:0000000000000B71                 mov     [rsp+68h+ptr], r9
.text:0000000000000B75                 mov     [rsp+68h+var_60], r10
.text:0000000000000B7A                 call    __udivti3
.text:0000000000000B7F                 mov     r11, [rsp+68h+var_50]
.text:0000000000000B84                 mov     r8d, [rsp+68h+var_48]
.text:0000000000000B89                 mov     [r11+20h], rax
.text:0000000000000B8D                 mov     eax, r8d
.text:0000000000000B90                 mov     [r11+28h], rdx
.text:0000000000000B94                 imul    eax, r8d
.text:0000000000000B98                 sub     eax, 3
.text:0000000000000B9B                 shr     eax, 1
.text:0000000000000B9D                 mov     edx, eax
.text:0000000000000B9F                 cmp     r12, rdx
.text:0000000000000BA2                 jbe     short loc_BD3
.text:0000000000000BA4                 nop     dword ptr [rax+00h]
.text:0000000000000BA8
.text:0000000000000BA8 loc_BA8:                                ; CODE XREF: main+1D7↓j
.text:0000000000000BA8                 mov     byte ptr [r15+rdx], 0
.text:0000000000000BAD                 lea     edx, [rax+r8]
.text:0000000000000BB1                 cmp     rdx, r12
.text:0000000000000BB4                 mov     rax, rdx
.text:0000000000000BB7                 jb      short loc_BA8
.text:0000000000000BB9                 add     rbp, 1
.text:0000000000000BBD                 cmp     r12, rbp
.text:0000000000000BC0                 jbe     short loc_BDC
.text:0000000000000BC2                 nop     word ptr [rax+rax+00h]
.text:0000000000000BC8
.text:0000000000000BC8 loc_BC8:                                ; CODE XREF: main+1FA↓j
.text:0000000000000BC8                 cmp     byte ptr [r15+rbp], 0
.text:0000000000000BCD                 jnz     loc_DB3
.text:0000000000000BD3
.text:0000000000000BD3 loc_BD3:                                ; CODE XREF: main+1C2↑j
.text:0000000000000BD3                 add     rbp, 1
.text:0000000000000BD7                 cmp     r12, rbp
.text:0000000000000BDA                 ja      short loc_BC8
.text:0000000000000BDC
.text:0000000000000BDC loc_BDC:                                ; CODE XREF: main+1E0↑j
.text:0000000000000BDC                 mov     rbp, [rsp+68h+var_40]
.text:0000000000000BE1
.text:0000000000000BE1 loc_BE1:                                ; CODE XREF: main+3E4↓j
.text:0000000000000BE1                 lea     rdi, s          ; "/* Generated file -- DO NOT EDIT */\n"
.text:0000000000000BE8                 call    _puts
.text:0000000000000BED                 lea     rsi, aDefineWideUint ; "#define WIDE_UINT_BITS %u\n"
.text:0000000000000BF4                 mov     edi, 1
.text:0000000000000BF9                 xor     eax, eax
.text:0000000000000BFB                 mov     edx, 80h
.text:0000000000000C00                 call    ___printf_chk
.text:0000000000000C05                 mov     edi, [rsp+68h+var_44]
.text:0000000000000C09                 test    edi, edi
.text:0000000000000C0B                 jz      loc_DD3
.text:0000000000000C11                 lea     eax, [rdi-1]
.text:0000000000000C14                 mov     r14d, 8
.text:0000000000000C1A                 mov     [rsp+68h+ptr], r15
.text:0000000000000C1E                 mov     rbx, rbp
.text:0000000000000C21                 mov     r15d, r14d
.text:0000000000000C24                 mov     edx, 2
.text:0000000000000C29                 imul    rax, 30h ; '0'
.text:0000000000000C2D                 lea     r13, [rbp+rax+30h]
.text:0000000000000C32                 mov     r14, r13
.text:0000000000000C35                 mov     r13d, edi
.text:0000000000000C38                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000000C40
.text:0000000000000C40 loc_C40:                                ; CODE XREF: main+2DC↓j
.text:0000000000000C40                 cmp     r13d, r15d
.text:0000000000000C43                 mov     r12d, [rbx]
.text:0000000000000C46                 jbe     loc_DC9
.text:0000000000000C4C                 mov     eax, r15d
.text:0000000000000C4F                 lea     rax, [rax+rax*2]
.text:0000000000000C53                 shl     rax, 4
.text:0000000000000C57                 mov     ecx, [rbp+rax+0]
.text:0000000000000C5B                 sub     ecx, r12d
.text:0000000000000C5E                 cmp     ecx, 0FFh
.text:0000000000000C64                 ja      loc_DDE
.text:0000000000000C6A
.text:0000000000000C6A loc_C6A:                                ; CODE XREF: main+3EE↓j
.text:0000000000000C6A                 mov     eax, r12d
.text:0000000000000C6D                 lea     rsi, aPUU       ; "P (%u, %u,\n   ("
.text:0000000000000C74                 mov     edi, 1
.text:0000000000000C79                 sub     eax, edx
.text:0000000000000C7B                 add     rbx, 30h ; '0'
.text:0000000000000C7F                 add     r15d, 1
.text:0000000000000C83                 mov     edx, eax
.text:0000000000000C85                 xor     eax, eax
.text:0000000000000C87                 call    ___printf_chk
.text:0000000000000C8C                 mov     rdi, [rbx-20h]
.text:0000000000000C90                 mov     rsi, [rbx-18h]
.text:0000000000000C94                 xor     edx, edx
.text:0000000000000C96                 mov     ecx, 80h
.text:0000000000000C9B                 call    print_wide_uint
.text:0000000000000CA0                 lea     rsi, aUintmaxMaxU ; "),\n   UINTMAX_MAX / %u)\n"
.text:0000000000000CA7                 mov     edx, r12d
.text:0000000000000CAA                 xor     eax, eax
.text:0000000000000CAC                 mov     edi, 1
.text:0000000000000CB1                 call    ___printf_chk
.text:0000000000000CB6                 cmp     r14, rbx
.text:0000000000000CB9                 mov     edx, r12d
.text:0000000000000CBC                 jnz     short loc_C40
.text:0000000000000CBE                 mov     r15, [rsp+68h+ptr]
.text:0000000000000CC2
.text:0000000000000CC2 loc_CC2:                                ; CODE XREF: main+3F9↓j
.text:0000000000000CC2                 lea     rdi, aUndefFirstOmit ; "\n#undef FIRST_OMITTED_PRIME"
.text:0000000000000CC9                 add     r12d, 2
.text:0000000000000CCD                 call    _puts
.text:0000000000000CD2                 mov     r9d, [rbp+0]
.text:0000000000000CD6                 imul    r9d, r9d
.text:0000000000000CDA
.text:0000000000000CDA loc_CDA:                                ; CODE XREF: main+326↓j
.text:0000000000000CDA                 cmp     r9d, r12d
.text:0000000000000CDD                 ja      short loc_D50
.text:0000000000000CDF                 mov     edi, r12d
.text:0000000000000CE2                 mov     rcx, [rbp+18h]
.text:0000000000000CE6                 mov     rax, rdi
.text:0000000000000CE9                 mul     qword ptr [rbp+10h]
.text:0000000000000CED                 imul    rcx, rdi
.text:0000000000000CF1                 add     rdx, rcx
.text:0000000000000CF4                 cmp     [rbp+28h], rdx
.text:0000000000000CF8                 ja      short loc_D02
.text:0000000000000CFA                 jb      short loc_D10
.text:0000000000000CFC                 cmp     [rbp+20h], rax
.text:0000000000000D00                 jb      short loc_D10
.text:0000000000000D02
.text:0000000000000D02 loc_D02:                                ; CODE XREF: main+318↑j
.text:0000000000000D02                                         ; main+363↓j ...
.text:0000000000000D02                 add     r12d, 2
.text:0000000000000D06                 jmp     short loc_CDA
.text:0000000000000D08 ; ---------------------------------------------------------------------------
.text:0000000000000D08
.text:0000000000000D08 loc_D08:                                ; CODE XREF: main+6B↑j
.text:0000000000000D08                                         ; main+3B2↓j
.text:0000000000000D08                 xor     eax, eax
.text:0000000000000D0A                 jmp     loc_A15
.text:0000000000000D0A ; ---------------------------------------------------------------------------
.text:0000000000000D0F                 align 10h
.text:0000000000000D10
.text:0000000000000D10 loc_D10:                                ; CODE XREF: main+31A↑j
.text:0000000000000D10                                         ; main+320↑j
.text:0000000000000D10                 xor     esi, esi
.text:0000000000000D12
.text:0000000000000D12 loc_D12:                                ; CODE XREF: main+365↓j
.text:0000000000000D12                                         ; main+36D↓j
.text:0000000000000D12                 lea     eax, [rsi+1]
.text:0000000000000D15                 lea     rcx, [rax+rax*2]
.text:0000000000000D19                 mov     rsi, rax
.text:0000000000000D1C                 shl     rcx, 4
.text:0000000000000D20                 add     rcx, rbp
.text:0000000000000D23                 mov     eax, [rcx]
.text:0000000000000D25                 imul    eax, eax
.text:0000000000000D28                 cmp     eax, r12d
.text:0000000000000D2B                 ja      short loc_D50
.text:0000000000000D2D                 mov     r8, [rcx+18h]
.text:0000000000000D31                 mov     rax, rdi
.text:0000000000000D34                 mul     qword ptr [rcx+10h]
.text:0000000000000D38                 imul    r8, rdi
.text:0000000000000D3C                 add     rdx, r8
.text:0000000000000D3F                 cmp     rdx, [rcx+28h]
.text:0000000000000D43                 jb      short loc_D02
.text:0000000000000D45                 ja      short loc_D12
.text:0000000000000D47                 cmp     rax, [rcx+20h]
.text:0000000000000D4B                 jbe     short loc_D02
.text:0000000000000D4D                 jmp     short loc_D12
.text:0000000000000D4D ; ---------------------------------------------------------------------------
.text:0000000000000D4F                 align 10h
.text:0000000000000D50
.text:0000000000000D50 loc_D50:                                ; CODE XREF: main+2FD↑j
.text:0000000000000D50                                         ; main+34B↑j
.text:0000000000000D50                 lea     rsi, aDefineFirstOmi ; "#define FIRST_OMITTED_PRIME %u\n"
.text:0000000000000D57                 mov     edx, r12d
.text:0000000000000D5A                 mov     edi, 1
.text:0000000000000D5F                 xor     eax, eax
.text:0000000000000D61                 call    ___printf_chk
.text:0000000000000D66                 mov     rdi, r15        ; ptr
.text:0000000000000D69                 call    _free
.text:0000000000000D6E                 mov     rdi, rbp        ; ptr
.text:0000000000000D71                 call    _free
.text:0000000000000D76                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000000D7D                 call    _ferror
.text:0000000000000D82                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000000D89                 mov     ebx, eax
.text:0000000000000D8B                 call    _fclose
.text:0000000000000D90                 add     ebx, eax
.text:0000000000000D92                 jz      loc_D08
.text:0000000000000D98                 call    ___errno_location
.text:0000000000000D9D                 mov     edi, [rax]      ; errnum
.text:0000000000000D9F                 call    _strerror
.text:0000000000000DA4                 lea     rdx, aWriteErrorS ; "write error: %s\n"
.text:0000000000000DAB                 mov     rcx, rax
.text:0000000000000DAE                 jmp     loc_9FD
.text:0000000000000DB3 ; ---------------------------------------------------------------------------
.text:0000000000000DB3
.text:0000000000000DB3 loc_DB3:                                ; CODE XREF: main+1ED↑j
.text:0000000000000DB3                 mov     eax, [rsp+68h+var_44]
.text:0000000000000DB7                 jmp     loc_AA4
.text:0000000000000DBC ; ---------------------------------------------------------------------------
.text:0000000000000DBC
.text:0000000000000DBC loc_DBC:                                ; CODE XREF: main+B2↑j
.text:0000000000000DBC                 mov     [rsp+68h+var_44], 0
.text:0000000000000DC4                 jmp     loc_BE1
.text:0000000000000DC9 ; ---------------------------------------------------------------------------
.text:0000000000000DC9
.text:0000000000000DC9 loc_DC9:                                ; CODE XREF: main+266↑j
.text:0000000000000DC9                 mov     ecx, 0FFh
.text:0000000000000DCE                 jmp     loc_C6A
.text:0000000000000DD3 ; ---------------------------------------------------------------------------
.text:0000000000000DD3
.text:0000000000000DD3 loc_DD3:                                ; CODE XREF: main+22B↑j
.text:0000000000000DD3                 mov     r12d, 2
.text:0000000000000DD9                 jmp     loc_CC2
.text:0000000000000DDE ; ---------------------------------------------------------------------------
.text:0000000000000DDE
.text:0000000000000DDE loc_DDE:                                ; CODE XREF: main+284↑j
.text:0000000000000DDE                 call    _abort
.text:0000000000000DDE ; } // starts at 9E0
.text:0000000000000DDE main            endp
.text:0000000000000DDE
.text:0000000000000DDE ; ---------------------------------------------------------------------------
.text:0000000000000DE3                 align 10h
.text:0000000000000DF0
.text:0000000000000DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000000DF0
.text:0000000000000DF0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000000DF0
.text:0000000000000DF0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000000DF0                 public start
.text:0000000000000DF0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000000DF0 ; __unwind {
.text:0000000000000DF0                 xor     ebp, ebp
.text:0000000000000DF2                 mov     r9, rdx         ; rtld_fini
.text:0000000000000DF5                 pop     rsi             ; argc
.text:0000000000000DF6                 mov     rdx, rsp        ; ubp_av
.text:0000000000000DF9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000000DFD                 push    rax
.text:0000000000000DFE                 push    rsp             ; stack_end
.text:0000000000000DFF                 lea     r8, __libc_csu_fini ; fini
.text:0000000000000E06                 lea     rcx, __libc_csu_init ; init
.text:0000000000000E0D                 lea     rdi, main       ; main
.text:0000000000000E14                 call    cs:__libc_start_main_ptr
.text:0000000000000E1A                 hlt
.text:0000000000000E1A ; } // starts at DF0
.text:0000000000000E1A start           endp
.text:0000000000000E1A
.text:0000000000000E1A ; ---------------------------------------------------------------------------
.text:0000000000000E1B                 align 20h
.text:0000000000000E20
.text:0000000000000E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000000E20
.text:0000000000000E20 ; Attributes: bp-based frame info_from_lumina
.text:0000000000000E20
.text:0000000000000E20 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_ED3↓p
.text:0000000000000E20                 lea     rdi, __bss_start
.text:0000000000000E27                 push    rbp
.text:0000000000000E28                 lea     rax, __bss_start
.text:0000000000000E2F                 cmp     rax, rdi
.text:0000000000000E32                 mov     rbp, rsp
.text:0000000000000E35                 jz      short loc_E50
.text:0000000000000E37                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000000E3E                 test    rax, rax
.text:0000000000000E41                 jz      short loc_E50
.text:0000000000000E43                 pop     rbp
.text:0000000000000E44                 jmp     rax
.text:0000000000000E44 ; ---------------------------------------------------------------------------
.text:0000000000000E46                 align 10h
.text:0000000000000E50
.text:0000000000000E50 loc_E50:                                ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000000E50                                         ; deregister_tm_clones+21↑j
.text:0000000000000E50                 pop     rbp
.text:0000000000000E51                 retn
.text:0000000000000E51 deregister_tm_clones endp
.text:0000000000000E51
.text:0000000000000E51 ; ---------------------------------------------------------------------------
.text:0000000000000E52                 align 20h
.text:0000000000000E60
.text:0000000000000E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000000E60
.text:0000000000000E60 ; Attributes: bp-based frame info_from_lumina
.text:0000000000000E60
.text:0000000000000E60 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000000E60                 lea     rdi, __bss_start
.text:0000000000000E67                 lea     rsi, __bss_start
.text:0000000000000E6E                 push    rbp
.text:0000000000000E6F                 sub     rsi, rdi
.text:0000000000000E72                 mov     rbp, rsp
.text:0000000000000E75                 sar     rsi, 3
.text:0000000000000E79                 mov     rax, rsi
.text:0000000000000E7C                 shr     rax, 3Fh
.text:0000000000000E80                 add     rsi, rax
.text:0000000000000E83                 sar     rsi, 1
.text:0000000000000E86                 jz      short loc_EA0
.text:0000000000000E88                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000000E8F                 test    rax, rax
.text:0000000000000E92                 jz      short loc_EA0
.text:0000000000000E94                 pop     rbp
.text:0000000000000E95                 jmp     rax
.text:0000000000000E95 ; ---------------------------------------------------------------------------
.text:0000000000000E97                 align 20h
.text:0000000000000EA0
.text:0000000000000EA0 loc_EA0:                                ; CODE XREF: register_tm_clones+26↑j
.text:0000000000000EA0                                         ; register_tm_clones+32↑j
.text:0000000000000EA0                 pop     rbp
.text:0000000000000EA1                 retn
.text:0000000000000EA1 register_tm_clones endp
.text:0000000000000EA1
.text:0000000000000EA1 ; ---------------------------------------------------------------------------
.text:0000000000000EA2                 align 10h
.text:0000000000000EB0
.text:0000000000000EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000000EB0
.text:0000000000000EB0 ; Attributes: info_from_lumina
.text:0000000000000EB0
.text:0000000000000EB0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000000EB0                 cmp     cs:completed_7697, 0
.text:0000000000000EB7                 jnz     short locret_EE8
.text:0000000000000EB9                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000000EC1                 push    rbp
.text:0000000000000EC2                 mov     rbp, rsp
.text:0000000000000EC5                 jz      short loc_ED3
.text:0000000000000EC7                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000000ECE                 call    __cxa_finalize
.text:0000000000000ED3
.text:0000000000000ED3 loc_ED3:                                ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000000ED3                 call    deregister_tm_clones
.text:0000000000000ED8                 mov     cs:completed_7697, 1
.text:0000000000000EDF                 pop     rbp
.text:0000000000000EE0                 retn
.text:0000000000000EE0 ; ---------------------------------------------------------------------------
.text:0000000000000EE1                 align 8
.text:0000000000000EE8
.text:0000000000000EE8 locret_EE8:                             ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000000EE8                 rep retn
.text:0000000000000EE8 __do_global_dtors_aux endp
.text:0000000000000EE8
.text:0000000000000EE8 ; ---------------------------------------------------------------------------
.text:0000000000000EEA                 align 10h
.text:0000000000000EF0
.text:0000000000000EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000000EF0
.text:0000000000000EF0 ; Attributes: bp-based frame
.text:0000000000000EF0
.text:0000000000000EF0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000000EF0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000000EF0                 push    rbp
.text:0000000000000EF1                 mov     rbp, rsp
.text:0000000000000EF4                 pop     rbp
.text:0000000000000EF5                 jmp     register_tm_clones
.text:0000000000000EF5 frame_dummy     endp
.text:0000000000000EF5
.text:0000000000000EF5 ; ---------------------------------------------------------------------------
.text:0000000000000EFA                 align 20h
.text:0000000000000F00
.text:0000000000000F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000000F00
.text:0000000000000F00
.text:0000000000000F00 print_wide_uint proc near               ; CODE XREF: main+2BB↑p
.text:0000000000000F00                                         ; print_wide_uint+B2↓p ...
.text:0000000000000F00
.text:0000000000000F00 var_30          = dword ptr -30h
.text:0000000000000F00 var_2C          = dword ptr -2Ch
.text:0000000000000F00
.text:0000000000000F00 ; __unwind {
.text:0000000000000F00                 push    r14
.text:0000000000000F02                 push    r13
.text:0000000000000F04                 push    r12
.text:0000000000000F06                 push    rbp
.text:0000000000000F07                 mov     r12, rsi
.text:0000000000000F0A                 push    rbx
.text:0000000000000F0B                 mov     ebx, edi
.text:0000000000000F0D                 mov     ebp, edx
.text:0000000000000F0F                 and     ebx, 0FFFFFFFh
.text:0000000000000F15                 mov     eax, ebx
.text:0000000000000F17                 sub     rsp, 10h
.text:0000000000000F1B                 xor     rax, rdi
.text:0000000000000F1E                 or      rsi, rax
.text:0000000000000F21                 jnz     short loc_F80
.text:0000000000000F23                 test    ebp, ebp
.text:0000000000000F25                 mov     edx, 7
.text:0000000000000F2A                 jnz     short loc_F50
.text:0000000000000F2C
.text:0000000000000F2C loc_F2C:                                ; CODE XREF: print_wide_uint+74↓j
.text:0000000000000F2C                                         ; print_wide_uint+D4↓j
.text:0000000000000F2C                 add     rsp, 10h
.text:0000000000000F30                 mov     ecx, ebx
.text:0000000000000F32                 lea     rsi, a0x0Xu     ; "0x%0*xU"
.text:0000000000000F39                 pop     rbx
.text:0000000000000F3A                 pop     rbp
.text:0000000000000F3B                 pop     r12
.text:0000000000000F3D                 pop     r13
.text:0000000000000F3F                 pop     r14
.text:0000000000000F41                 mov     edi, 1
.text:0000000000000F46                 xor     eax, eax
.text:0000000000000F48                 jmp     ___printf_chk
.text:0000000000000F48 ; ---------------------------------------------------------------------------
.text:0000000000000F4D                 align 10h
.text:0000000000000F50
.text:0000000000000F50 loc_F50:                                ; CODE XREF: print_wide_uint+2A↑j
.text:0000000000000F50                 lea     rsi, aUintmaxT  ; "(uintmax_t) "
.text:0000000000000F57                 mov     edi, 1
.text:0000000000000F5C                 xor     eax, eax
.text:0000000000000F5E                 mov     [rsp+38h+var_30], ecx
.text:0000000000000F62                 call    ___printf_chk
.text:0000000000000F67                 mov     ecx, [rsp+38h+var_30]
.text:0000000000000F6B                 lea     edx, [rcx-1]
.text:0000000000000F6E                 and     edx, 3
.text:0000000000000F71                 add     edx, 1
.text:0000000000000F74                 jmp     short loc_F2C
.text:0000000000000F74 ; ---------------------------------------------------------------------------
.text:0000000000000F76                 align 20h
.text:0000000000000F80
.text:0000000000000F80 loc_F80:                                ; CODE XREF: print_wide_uint+21↑j
.text:0000000000000F80                 mov     r11, rdi
.text:0000000000000F83                 mov     r10, r12
.text:0000000000000F86                 mov     r14, r12
.text:0000000000000F89                 mov     r9, r11
.text:0000000000000F8C                 shr     r10, 38h
.text:0000000000000F90                 mov     r13, r11
.text:0000000000000F93                 shrd    r9, r12, 38h
.text:0000000000000F98                 mov     rax, r10
.text:0000000000000F9B                 shr     r14, 1Ch
.text:0000000000000F9F                 lea     edx, [rdx+1]
.text:0000000000000FA2                 shrd    r13, r12, 1Ch
.text:0000000000000FA7                 or      rax, r9
.text:0000000000000FAA                 jnz     short loc_FE0
.text:0000000000000FAC                 mov     rsi, r14
.text:0000000000000FAF                 mov     rdi, r13
.text:0000000000000FB2                 call    print_wide_uint
.text:0000000000000FB7
.text:0000000000000FB7 loc_FB7:                                ; CODE XREF: print_wide_uint+122↓j
.text:0000000000000FB7                 lea     rsi, aD         ; " << %d | "
.text:0000000000000FBE                 mov     edx, 1Ch
.text:0000000000000FC3                 mov     edi, 1
.text:0000000000000FC8                 xor     eax, eax
.text:0000000000000FCA                 call    ___printf_chk
.text:0000000000000FCF                 mov     edx, 7
.text:0000000000000FD4                 jmp     loc_F2C
.text:0000000000000FD4 ; ---------------------------------------------------------------------------
.text:0000000000000FD9                 align 20h
.text:0000000000000FE0
.text:0000000000000FE0 loc_FE0:                                ; CODE XREF: print_wide_uint+AA↑j
.text:0000000000000FE0                 mov     edi, 28h ; '('  ; c
.text:0000000000000FE5                 mov     [rsp+38h+var_2C], ecx
.text:0000000000000FE9                 mov     [rsp+38h+var_30], edx
.text:0000000000000FED                 call    _putchar
.text:0000000000000FF2                 mov     ecx, [rsp+38h+var_2C]
.text:0000000000000FF6                 mov     edx, [rsp+38h+var_30]
.text:0000000000000FFA                 mov     rsi, r14
.text:0000000000000FFD                 mov     rdi, r13
.text:0000000000001000                 call    print_wide_uint
.text:0000000000001005                 lea     edx, [rbp+3]
.text:0000000000001008                 lea     rcx, aUintmaxMaxU+18h ; ""
.text:000000000000100F                 lea     rsi, aS         ; ")\n%*s"
.text:0000000000001016                 mov     edi, 1
.text:000000000000101B                 xor     eax, eax
.text:000000000000101D                 call    ___printf_chk
.text:0000000000001022                 jmp     short loc_FB7
.text:0000000000001022 ; } // starts at F00
.text:0000000000001022 print_wide_uint endp
.text:0000000000001022
.text:0000000000001022 ; ---------------------------------------------------------------------------
.text:0000000000001024                 align 10h
.text:0000000000001030
.text:0000000000001030 ; =============== S U B R O U T I N E =======================================
.text:0000000000001030
.text:0000000000001030
.text:0000000000001030 xalloc          proc near               ; CODE XREF: main+8C↑p
.text:0000000000001030                                         ; main+A8↑p
.text:0000000000001030 ; __unwind {
.text:0000000000001030                 sub     rsp, 8
.text:0000000000001034                 call    _malloc
.text:0000000000001039                 test    rax, rax
.text:000000000000103C                 jz      short loc_1043
.text:000000000000103E                 add     rsp, 8
.text:0000000000001042                 retn
.text:0000000000001043 ; ---------------------------------------------------------------------------
.text:0000000000001043
.text:0000000000001043 loc_1043:                               ; CODE XREF: xalloc+C↑j
.text:0000000000001043                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:000000000000104A                 lea     rdi, aVirtualMemoryE ; "Virtual memory exhausted.\n"
.text:0000000000001051                 mov     edx, 1Ah        ; n
.text:0000000000001056                 mov     esi, 1          ; size
.text:000000000000105B                 call    _fwrite
.text:0000000000001060                 mov     edi, 1          ; status
.text:0000000000001065                 call    _exit
.text:0000000000001065 ; } // starts at 1030
.text:0000000000001065 xalloc          endp
.text:0000000000001065
.text:0000000000001065 ; ---------------------------------------------------------------------------
.text:000000000000106A                 align 10h
.text:0000000000001070
.text:0000000000001070 ; =============== S U B R O U T I N E =======================================
.text:0000000000001070
.text:0000000000001070
.text:0000000000001070 __udivti3       proc near               ; CODE XREF: main+19A↑p
.text:0000000000001070 ; __unwind {
.text:0000000000001070                 test    rcx, rcx
.text:0000000000001073                 mov     r11, rdx
.text:0000000000001076                 mov     rdx, rcx
.text:0000000000001079                 jnz     short loc_10B0
.text:000000000000107B                 cmp     r11, rsi
.text:000000000000107E                 ja      loc_1138
.text:0000000000001084                 test    r11, r11
.text:0000000000001087                 mov     rcx, r11
.text:000000000000108A                 jnz     short loc_1099
.text:000000000000108C                 mov     eax, 1
.text:0000000000001091                 xor     edx, edx
.text:0000000000001093                 div     r11
.text:0000000000001096                 mov     rcx, rax
.text:0000000000001099
.text:0000000000001099 loc_1099:                               ; CODE XREF: __udivti3+1A↑j
.text:0000000000001099                 mov     rax, rsi
.text:000000000000109C                 xor     edx, edx
.text:000000000000109E                 div     rcx
.text:00000000000010A1                 mov     rsi, rax
.text:00000000000010A4                 mov     rax, rdi
.text:00000000000010A7                 div     rcx
.text:00000000000010AA                 mov     rdx, rsi
.text:00000000000010AD
.text:00000000000010AD locret_10AD:                            ; CODE XREF: __udivti3+E4↓j
.text:00000000000010AD                 retn
.text:00000000000010AD ; ---------------------------------------------------------------------------
.text:00000000000010AE                 align 10h
.text:00000000000010B0
.text:00000000000010B0 loc_10B0:                               ; CODE XREF: __udivti3+9↑j
.text:00000000000010B0                 cmp     rcx, rsi
.text:00000000000010B3                 ja      short loc_1130
.text:00000000000010B5                 bsr     rax, rcx
.text:00000000000010B9                 xor     rax, 3Fh
.text:00000000000010BD                 test    eax, eax
.text:00000000000010BF                 mov     r9d, eax
.text:00000000000010C2                 jz      loc_1148
.text:00000000000010C8                 mov     ecx, eax
.text:00000000000010CA                 push    rbx
.text:00000000000010CB                 mov     ebx, 40h ; '@'
.text:00000000000010D0                 shl     rdx, cl
.text:00000000000010D3                 movsxd  rcx, eax
.text:00000000000010D6                 mov     r10, r11
.text:00000000000010D9                 sub     rbx, rcx
.text:00000000000010DC                 mov     r8, rsi
.text:00000000000010DF                 mov     ecx, ebx
.text:00000000000010E1                 shr     r10, cl
.text:00000000000010E4                 mov     ecx, eax
.text:00000000000010E6                 shl     r11, cl
.text:00000000000010E9                 mov     ecx, ebx
.text:00000000000010EB                 or      r10, rdx
.text:00000000000010EE                 shr     r8, cl
.text:00000000000010F1                 mov     ecx, eax
.text:00000000000010F3                 mov     rax, rdi
.text:00000000000010F6                 shl     rsi, cl
.text:00000000000010F9                 mov     ecx, ebx
.text:00000000000010FB                 mov     rdx, r8
.text:00000000000010FE                 shr     rax, cl
.text:0000000000001101                 or      rax, rsi
.text:0000000000001104                 div     r10
.text:0000000000001107                 mov     r8, rdx
.text:000000000000110A                 mov     rsi, rax
.text:000000000000110D                 mul     r11
.text:0000000000001110                 cmp     r8, rdx
.text:0000000000001113                 jb      short loc_1125
.text:0000000000001115                 mov     ecx, r9d
.text:0000000000001118                 shl     rdi, cl
.text:000000000000111B                 cmp     rdi, rax
.text:000000000000111E                 jnb     short loc_1168
.text:0000000000001120                 cmp     r8, rdx
.text:0000000000001123                 jnz     short loc_1168
.text:0000000000001125
.text:0000000000001125 loc_1125:                               ; CODE XREF: __udivti3+A3↑j
.text:0000000000001125                 lea     rax, [rsi-1]
.text:0000000000001129                 xor     edx, edx
.text:000000000000112B                 pop     rbx
.text:000000000000112C                 retn
.text:000000000000112C ; ---------------------------------------------------------------------------
.text:000000000000112D                 align 10h
.text:0000000000001130
.text:0000000000001130 loc_1130:                               ; CODE XREF: __udivti3+43↑j
.text:0000000000001130                 xor     edx, edx
.text:0000000000001132                 xor     eax, eax
.text:0000000000001134                 retn
.text:0000000000001134 ; ---------------------------------------------------------------------------
.text:0000000000001135                 align 8
.text:0000000000001138
.text:0000000000001138 loc_1138:                               ; CODE XREF: __udivti3+E↑j
.text:0000000000001138                 mov     rax, rdi
.text:000000000000113B                 mov     rdx, rsi
.text:000000000000113E                 div     r11
.text:0000000000001141                 xor     edx, edx
.text:0000000000001143                 retn
.text:0000000000001143 ; ---------------------------------------------------------------------------
.text:0000000000001144                 align 8
.text:0000000000001148
.text:0000000000001148 loc_1148:                               ; CODE XREF: __udivti3+52↑j
.text:0000000000001148                 cmp     rcx, rsi
.text:000000000000114B                 jb      short loc_115A
.text:000000000000114D                 xor     edx, edx
.text:000000000000114F                 xor     eax, eax
.text:0000000000001151                 cmp     r11, rdi
.text:0000000000001154                 ja      locret_10AD
.text:000000000000115A
.text:000000000000115A loc_115A:                               ; CODE XREF: __udivti3+DB↑j
.text:000000000000115A                 xor     edx, edx
.text:000000000000115C                 mov     eax, 1
.text:0000000000001161                 retn
.text:0000000000001161 ; ---------------------------------------------------------------------------
.text:0000000000001162                 align 8
.text:0000000000001168
.text:0000000000001168 loc_1168:                               ; CODE XREF: __udivti3+AE↑j
.text:0000000000001168                                         ; __udivti3+B3↑j
.text:0000000000001168                 mov     rax, rsi
.text:000000000000116B                 xor     edx, edx
.text:000000000000116D                 pop     rbx
.text:000000000000116E                 retn
.text:000000000000116E ; } // starts at 1070
.text:000000000000116E __udivti3       endp
.text:000000000000116E
.text:000000000000116E ; ---------------------------------------------------------------------------
.text:000000000000116F                 align 10h
.text:0000000000001170
.text:0000000000001170 ; =============== S U B R O U T I N E =======================================
.text:0000000000001170
.text:0000000000001170 ; Attributes: info_from_lumina
.text:0000000000001170
.text:0000000000001170 ; void _libc_csu_init(void)
.text:0000000000001170                 public __libc_csu_init
.text:0000000000001170 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000001170 ; __unwind {
.text:0000000000001170                 push    r15
.text:0000000000001172                 push    r14
.text:0000000000001174                 mov     r15, rdx
.text:0000000000001177                 push    r13
.text:0000000000001179                 push    r12
.text:000000000000117B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000001182                 push    rbp
.text:0000000000001183                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000118A                 push    rbx
.text:000000000000118B                 mov     r13d, edi
.text:000000000000118E                 mov     r14, rsi
.text:0000000000001191                 sub     rbp, r12
.text:0000000000001194                 sub     rsp, 8
.text:0000000000001198                 sar     rbp, 3
.text:000000000000119C                 call    _init_proc
.text:00000000000011A1                 test    rbp, rbp
.text:00000000000011A4                 jz      short loc_11C6
.text:00000000000011A6                 xor     ebx, ebx
.text:00000000000011A8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000011B0
.text:00000000000011B0 loc_11B0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000011B0                 mov     rdx, r15
.text:00000000000011B3                 mov     rsi, r14
.text:00000000000011B6                 mov     edi, r13d
.text:00000000000011B9                 call    ds:(__frame_dummy_init_array_entry - 201D48h)[r12+rbx*8]
.text:00000000000011BD                 add     rbx, 1
.text:00000000000011C1                 cmp     rbp, rbx
.text:00000000000011C4                 jnz     short loc_11B0
.text:00000000000011C6
.text:00000000000011C6 loc_11C6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000011C6                 add     rsp, 8
.text:00000000000011CA                 pop     rbx
.text:00000000000011CB                 pop     rbp
.text:00000000000011CC                 pop     r12
.text:00000000000011CE                 pop     r13
.text:00000000000011D0                 pop     r14
.text:00000000000011D2                 pop     r15
.text:00000000000011D4                 retn
.text:00000000000011D4 ; } // starts at 1170
.text:00000000000011D4 __libc_csu_init endp
.text:00000000000011D4
.text:00000000000011D4 ; ---------------------------------------------------------------------------
.text:00000000000011D5                 align 20h
.text:00000000000011E0
.text:00000000000011E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000011E0
.text:00000000000011E0
.text:00000000000011E0 ; void _libc_csu_fini(void)
.text:00000000000011E0                 public __libc_csu_fini
.text:00000000000011E0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000011E0 ; __unwind {
.text:00000000000011E0                 rep retn
.text:00000000000011E0 ; } // starts at 11E0
.text:00000000000011E0 __libc_csu_fini endp
.text:00000000000011E0
.text:00000000000011E0 _text           ends
.text:00000000000011E0
LOAD:00000000000011E2 ; ===========================================================================
LOAD:00000000000011E2
LOAD:00000000000011E2 ; Segment type: Pure code
LOAD:00000000000011E2 ; Segment permissions: Read/Execute
LOAD:00000000000011E2 LOAD            segment byte public 'CODE' use64
LOAD:00000000000011E2                 assume cs:LOAD
LOAD:00000000000011E2                 ;org 11E2h
LOAD:00000000000011E2                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000011E2                 align 4
LOAD:00000000000011E2 LOAD            ends
LOAD:00000000000011E2
.fini:00000000000011E4 ; ===========================================================================
.fini:00000000000011E4
.fini:00000000000011E4 ; Segment type: Pure code
.fini:00000000000011E4 ; Segment permissions: Read/Execute
.fini:00000000000011E4 _fini           segment dword public 'CODE' use64
.fini:00000000000011E4                 assume cs:_fini
.fini:00000000000011E4                 ;org 11E4h
.fini:00000000000011E4                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00000000000011E4
.fini:00000000000011E4 ; =============== S U B R O U T I N E =======================================
.fini:00000000000011E4
.fini:00000000000011E4
.fini:00000000000011E4                 public _term_proc
.fini:00000000000011E4 _term_proc      proc near
.fini:00000000000011E4                 sub     rsp, 8          ; _fini
.fini:00000000000011E8                 add     rsp, 8
.fini:00000000000011EC                 retn
.fini:00000000000011EC _term_proc      endp
.fini:00000000000011EC
.fini:00000000000011EC _fini           ends
.fini:00000000000011EC
LOAD:00000000000011ED ; ===========================================================================
LOAD:00000000000011ED
LOAD:00000000000011ED ; Segment type: Pure code
LOAD:00000000000011ED ; Segment permissions: Read/Execute
LOAD:00000000000011ED LOAD            segment byte public 'CODE' use64
LOAD:00000000000011ED                 assume cs:LOAD
LOAD:00000000000011ED                 ;org 11EDh
LOAD:00000000000011ED                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000011ED                 align 10h
LOAD:00000000000011ED LOAD            ends
LOAD:00000000000011ED
.rodata:00000000000011F0 ; ===========================================================================
.rodata:00000000000011F0
.rodata:00000000000011F0 ; Segment type: Pure data
.rodata:00000000000011F0 ; Segment permissions: Read
.rodata:00000000000011F0 _rodata         segment qword public 'CONST' use64
.rodata:00000000000011F0                 assume cs:_rodata
.rodata:00000000000011F0                 ;org 11F0h
.rodata:00000000000011F0                 public _IO_stdin_used
.rodata:00000000000011F0 _IO_stdin_used  db    1
.rodata:00000000000011F1                 db    0
.rodata:00000000000011F2                 db    2
.rodata:00000000000011F3                 db    0
.rodata:00000000000011F4 aS              db ')',0Ah              ; DATA XREF: print_wide_uint+10F↑o
.rodata:00000000000011F4                 db '%*s',0
.rodata:00000000000011FA aD              db ' << %d | ',0        ; DATA XREF: print_wide_uint:loc_FB7↑o
.rodata:0000000000001204 aUintmaxT       db '(uintmax_t) ',0     ; DATA XREF: print_wide_uint:loc_F50↑o
.rodata:0000000000001211 a0x0Xu          db '0x%0*xU',0          ; DATA XREF: print_wide_uint+32↑o
.rodata:0000000000001219 aVirtualMemoryE db 'Virtual memory exhausted.',0Ah,0
.rodata:0000000000001219                                         ; DATA XREF: xalloc+1A↑o
.rodata:0000000000001234 aDefineWideUint db '#define WIDE_UINT_BITS %u',0Ah,0
.rodata:0000000000001234                                         ; DATA XREF: main+20D↑o
.rodata:000000000000124F aPUU            db 'P (%u, %u,',0Ah     ; DATA XREF: main+28D↑o
.rodata:000000000000124F                 db '   (',0
.rodata:000000000000125F aUintmaxMaxU    db '),',0Ah             ; DATA XREF: main+2C0↑o
.rodata:000000000000125F                 db '   UINTMAX_MAX / %u)',0Ah,0
.rodata:0000000000001278 ; const char aUndefFirstOmit[]
.rodata:0000000000001278 aUndefFirstOmit db 0Ah                  ; DATA XREF: main:loc_CC2↑o
.rodata:0000000000001278                 db '#undef FIRST_OMITTED_PRIME',0
.rodata:0000000000001294 aWriteErrorS    db 'write error: %s',0Ah,0
.rodata:0000000000001294                                         ; DATA XREF: main+3C4↑o
.rodata:00000000000012A5                 align 8
.rodata:00000000000012A8 aUsageSLimitPro db 'Usage: %s LIMIT',0Ah
.rodata:00000000000012A8                                         ; DATA XREF: main+16↑o
.rodata:00000000000012A8                 db 'Produces a list of odd primes <= LIMIT',0Ah,0
.rodata:00000000000012E0 ; const char s[]
.rodata:00000000000012E0 s               db '/* Generated file -- DO NOT EDIT */',0Ah,0
.rodata:00000000000012E0                                         ; DATA XREF: main:loc_BE1↑o
.rodata:0000000000001305                 align 8
.rodata:0000000000001308 aDefineFirstOmi db '#define FIRST_OMITTED_PRIME %u',0Ah,0
.rodata:0000000000001308                                         ; DATA XREF: main:loc_D50↑o
.rodata:0000000000001308 _rodata         ends
.rodata:0000000000001308
.eh_frame_hdr:0000000000001328 ; ===========================================================================
.eh_frame_hdr:0000000000001328
.eh_frame_hdr:0000000000001328 ; Segment type: Pure data
.eh_frame_hdr:0000000000001328 ; Segment permissions: Read
.eh_frame_hdr:0000000000001328 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000001328                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000001328                 ;org 1328h
.eh_frame_hdr:0000000000001328 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000001329                 db  1Bh
.eh_frame_hdr:000000000000132A                 db    3
.eh_frame_hdr:000000000000132B                 db  3Bh ; ;
.eh_frame_hdr:000000000000132C                 db  54h ; T
.eh_frame_hdr:000000000000132D                 db    0
.eh_frame_hdr:000000000000132E                 db    0
.eh_frame_hdr:000000000000132F                 db    0
.eh_frame_hdr:0000000000001330                 db    9
.eh_frame_hdr:0000000000001331                 db    0
.eh_frame_hdr:0000000000001332                 db    0
.eh_frame_hdr:0000000000001333                 db    0
.eh_frame_hdr:0000000000001334                 db 0A8h
.eh_frame_hdr:0000000000001335                 db 0F5h
.eh_frame_hdr:0000000000001336                 db 0FFh
.eh_frame_hdr:0000000000001337                 db 0FFh
.eh_frame_hdr:0000000000001338                 db 0A0h
.eh_frame_hdr:0000000000001339                 db    0
.eh_frame_hdr:000000000000133A                 db    0
.eh_frame_hdr:000000000000133B                 db    0
.eh_frame_hdr:000000000000133C                 db 0A8h
.eh_frame_hdr:000000000000133D                 db 0F6h
.eh_frame_hdr:000000000000133E                 db 0FFh
.eh_frame_hdr:000000000000133F                 db 0FFh
.eh_frame_hdr:0000000000001340                 db 0C8h
.eh_frame_hdr:0000000000001341                 db    0
.eh_frame_hdr:0000000000001342                 db    0
.eh_frame_hdr:0000000000001343                 db    0
.eh_frame_hdr:0000000000001344                 db 0B8h
.eh_frame_hdr:0000000000001345                 db 0F6h
.eh_frame_hdr:0000000000001346                 db 0FFh
.eh_frame_hdr:0000000000001347                 db 0FFh
.eh_frame_hdr:0000000000001348                 db  40h ; @
.eh_frame_hdr:0000000000001349                 db    1
.eh_frame_hdr:000000000000134A                 db    0
.eh_frame_hdr:000000000000134B                 db    0
.eh_frame_hdr:000000000000134C                 db 0C8h
.eh_frame_hdr:000000000000134D                 db 0FAh
.eh_frame_hdr:000000000000134E                 db 0FFh
.eh_frame_hdr:000000000000134F                 db 0FFh
.eh_frame_hdr:0000000000001350                 db  70h ; p
.eh_frame_hdr:0000000000001351                 db    0
.eh_frame_hdr:0000000000001352                 db    0
.eh_frame_hdr:0000000000001353                 db    0
.eh_frame_hdr:0000000000001354                 db 0D8h
.eh_frame_hdr:0000000000001355                 db 0FBh
.eh_frame_hdr:0000000000001356                 db 0FFh
.eh_frame_hdr:0000000000001357                 db 0FFh
.eh_frame_hdr:0000000000001358                 db 0E0h
.eh_frame_hdr:0000000000001359                 db    0
.eh_frame_hdr:000000000000135A                 db    0
.eh_frame_hdr:000000000000135B                 db    0
.eh_frame_hdr:000000000000135C                 db    8
.eh_frame_hdr:000000000000135D                 db 0FDh
.eh_frame_hdr:000000000000135E                 db 0FFh
.eh_frame_hdr:000000000000135F                 db 0FFh
.eh_frame_hdr:0000000000001360                 db  24h ; $
.eh_frame_hdr:0000000000001361                 db    1
.eh_frame_hdr:0000000000001362                 db    0
.eh_frame_hdr:0000000000001363                 db    0
.eh_frame_hdr:0000000000001364                 db  48h ; H
.eh_frame_hdr:0000000000001365                 db 0FDh
.eh_frame_hdr:0000000000001366                 db 0FFh
.eh_frame_hdr:0000000000001367                 db 0FFh
.eh_frame_hdr:0000000000001368                 db  90h
.eh_frame_hdr:0000000000001369                 db    1
.eh_frame_hdr:000000000000136A                 db    0
.eh_frame_hdr:000000000000136B                 db    0
.eh_frame_hdr:000000000000136C                 db  48h ; H
.eh_frame_hdr:000000000000136D                 db 0FEh
.eh_frame_hdr:000000000000136E                 db 0FFh
.eh_frame_hdr:000000000000136F                 db 0FFh
.eh_frame_hdr:0000000000001370                 db 0B8h
.eh_frame_hdr:0000000000001371                 db    1
.eh_frame_hdr:0000000000001372                 db    0
.eh_frame_hdr:0000000000001373                 db    0
.eh_frame_hdr:0000000000001374                 db 0B8h
.eh_frame_hdr:0000000000001375                 db 0FEh
.eh_frame_hdr:0000000000001376                 db 0FFh
.eh_frame_hdr:0000000000001377                 db 0FFh
.eh_frame_hdr:0000000000001378                 db    0
.eh_frame_hdr:0000000000001379                 db    2
.eh_frame_hdr:000000000000137A                 db    0
.eh_frame_hdr:000000000000137B                 db    0
.eh_frame_hdr:000000000000137B _eh_frame_hdr   ends
.eh_frame_hdr:000000000000137B
LOAD:000000000000137C ; ===========================================================================
LOAD:000000000000137C
LOAD:000000000000137C ; Segment type: Pure code
LOAD:000000000000137C ; Segment permissions: Read/Execute
LOAD:000000000000137C LOAD            segment byte public 'CODE' use64
LOAD:000000000000137C                 assume cs:LOAD
LOAD:000000000000137C                 ;org 137Ch
LOAD:000000000000137C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000137C                 align 20h
LOAD:000000000000137C LOAD            ends
LOAD:000000000000137C
.eh_frame:0000000000001380 ; ===========================================================================
.eh_frame:0000000000001380
.eh_frame:0000000000001380 ; Segment type: Pure data
.eh_frame:0000000000001380 ; Segment permissions: Read
.eh_frame:0000000000001380 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000001380                 assume cs:_eh_frame
.eh_frame:0000000000001380                 ;org 1380h
.eh_frame:0000000000001380                 db  14h
.eh_frame:0000000000001381                 db    0
.eh_frame:0000000000001382                 db    0
.eh_frame:0000000000001383                 db    0
.eh_frame:0000000000001384                 db    0
.eh_frame:0000000000001385                 db    0
.eh_frame:0000000000001386                 db    0
.eh_frame:0000000000001387                 db    0
.eh_frame:0000000000001388                 db    1
.eh_frame:0000000000001389                 db  7Ah ; z
.eh_frame:000000000000138A                 db  52h ; R
.eh_frame:000000000000138B                 db    0
.eh_frame:000000000000138C                 db    1
.eh_frame:000000000000138D                 db  78h ; x
.eh_frame:000000000000138E                 db  10h
.eh_frame:000000000000138F                 db    1
.eh_frame:0000000000001390                 db  1Bh
.eh_frame:0000000000001391                 db  0Ch
.eh_frame:0000000000001392                 db    7
.eh_frame:0000000000001393                 db    8
.eh_frame:0000000000001394                 db  90h
.eh_frame:0000000000001395                 db    1
.eh_frame:0000000000001396                 db    7
.eh_frame:0000000000001397                 db  10h
.eh_frame:0000000000001398                 db  14h
.eh_frame:0000000000001399                 db    0
.eh_frame:000000000000139A                 db    0
.eh_frame:000000000000139B                 db    0
.eh_frame:000000000000139C                 db  1Ch
.eh_frame:000000000000139D                 db    0
.eh_frame:000000000000139E                 db    0
.eh_frame:000000000000139F                 db    0
.eh_frame:00000000000013A0                 db  50h ; P
.eh_frame:00000000000013A1                 db 0FAh
.eh_frame:00000000000013A2                 db 0FFh
.eh_frame:00000000000013A3                 db 0FFh
.eh_frame:00000000000013A4                 db  2Bh ; +
.eh_frame:00000000000013A5                 db    0
.eh_frame:00000000000013A6                 db    0
.eh_frame:00000000000013A7                 db    0
.eh_frame:00000000000013A8                 db    0
.eh_frame:00000000000013A9                 db    0
.eh_frame:00000000000013AA                 db    0
.eh_frame:00000000000013AB                 db    0
.eh_frame:00000000000013AC                 db    0
.eh_frame:00000000000013AD                 db    0
.eh_frame:00000000000013AE                 db    0
.eh_frame:00000000000013AF                 db    0
.eh_frame:00000000000013B0                 db  14h
.eh_frame:00000000000013B1                 db    0
.eh_frame:00000000000013B2                 db    0
.eh_frame:00000000000013B3                 db    0
.eh_frame:00000000000013B4                 db    0
.eh_frame:00000000000013B5                 db    0
.eh_frame:00000000000013B6                 db    0
.eh_frame:00000000000013B7                 db    0
.eh_frame:00000000000013B8                 db    1
.eh_frame:00000000000013B9                 db  7Ah ; z
.eh_frame:00000000000013BA                 db  52h ; R
.eh_frame:00000000000013BB                 db    0
.eh_frame:00000000000013BC                 db    1
.eh_frame:00000000000013BD                 db  78h ; x
.eh_frame:00000000000013BE                 db  10h
.eh_frame:00000000000013BF                 db    1
.eh_frame:00000000000013C0                 db  1Bh
.eh_frame:00000000000013C1                 db  0Ch
.eh_frame:00000000000013C2                 db    7
.eh_frame:00000000000013C3                 db    8
.eh_frame:00000000000013C4                 db  90h
.eh_frame:00000000000013C5                 db    1
.eh_frame:00000000000013C6                 db    0
.eh_frame:00000000000013C7                 db    0
.eh_frame:00000000000013C8                 db  24h ; $
.eh_frame:00000000000013C9                 db    0
.eh_frame:00000000000013CA                 db    0
.eh_frame:00000000000013CB                 db    0
.eh_frame:00000000000013CC                 db  1Ch
.eh_frame:00000000000013CD                 db    0
.eh_frame:00000000000013CE                 db    0
.eh_frame:00000000000013CF                 db    0
.eh_frame:00000000000013D0                 db    0
.eh_frame:00000000000013D1                 db 0F5h
.eh_frame:00000000000013D2                 db 0FFh
.eh_frame:00000000000013D3                 db 0FFh
.eh_frame:00000000000013D4                 db    0
.eh_frame:00000000000013D5                 db    1
.eh_frame:00000000000013D6                 db    0
.eh_frame:00000000000013D7                 db    0
.eh_frame:00000000000013D8                 db    0
.eh_frame:00000000000013D9                 db  0Eh
.eh_frame:00000000000013DA                 db  10h
.eh_frame:00000000000013DB                 db  46h ; F
.eh_frame:00000000000013DC                 db  0Eh
.eh_frame:00000000000013DD                 db  18h
.eh_frame:00000000000013DE                 db  4Ah ; J
.eh_frame:00000000000013DF                 db  0Fh
.eh_frame:00000000000013E0                 db  0Bh
.eh_frame:00000000000013E1                 db  77h ; w
.eh_frame:00000000000013E2                 db    8
.eh_frame:00000000000013E3                 db  80h
.eh_frame:00000000000013E4                 db    0
.eh_frame:00000000000013E5                 db  3Fh ; ?
.eh_frame:00000000000013E6                 db  1Ah
.eh_frame:00000000000013E7                 db  3Bh ; ;
.eh_frame:00000000000013E8                 db  2Ah ; *
.eh_frame:00000000000013E9                 db  33h ; 3
.eh_frame:00000000000013EA                 db  24h ; $
.eh_frame:00000000000013EB                 db  22h ; "
.eh_frame:00000000000013EC                 db    0
.eh_frame:00000000000013ED                 db    0
.eh_frame:00000000000013EE                 db    0
.eh_frame:00000000000013EF                 db    0
.eh_frame:00000000000013F0                 db  14h
.eh_frame:00000000000013F1                 db    0
.eh_frame:00000000000013F2                 db    0
.eh_frame:00000000000013F3                 db    0
.eh_frame:00000000000013F4                 db  44h ; D
.eh_frame:00000000000013F5                 db    0
.eh_frame:00000000000013F6                 db    0
.eh_frame:00000000000013F7                 db    0
.eh_frame:00000000000013F8                 db 0D8h
.eh_frame:00000000000013F9                 db 0F5h
.eh_frame:00000000000013FA                 db 0FFh
.eh_frame:00000000000013FB                 db 0FFh
.eh_frame:00000000000013FC                 db    8
.eh_frame:00000000000013FD                 db    0
.eh_frame:00000000000013FE                 db    0
.eh_frame:00000000000013FF                 db    0
.eh_frame:0000000000001400                 db    0
.eh_frame:0000000000001401                 db    0
.eh_frame:0000000000001402                 db    0
.eh_frame:0000000000001403                 db    0
.eh_frame:0000000000001404                 db    0
.eh_frame:0000000000001405                 db    0
.eh_frame:0000000000001406                 db    0
.eh_frame:0000000000001407                 db    0
.eh_frame:0000000000001408                 db  40h ; @
.eh_frame:0000000000001409                 db    0
.eh_frame:000000000000140A                 db    0
.eh_frame:000000000000140B                 db    0
.eh_frame:000000000000140C                 db  5Ch ; \
.eh_frame:000000000000140D                 db    0
.eh_frame:000000000000140E                 db    0
.eh_frame:000000000000140F                 db    0
.eh_frame:0000000000001410                 db 0F0h
.eh_frame:0000000000001411                 db 0FAh
.eh_frame:0000000000001412                 db 0FFh
.eh_frame:0000000000001413                 db 0FFh
.eh_frame:0000000000001414                 db  24h ; $
.eh_frame:0000000000001415                 db    1
.eh_frame:0000000000001416                 db    0
.eh_frame:0000000000001417                 db    0
.eh_frame:0000000000001418                 db    0
.eh_frame:0000000000001419                 db  42h ; B
.eh_frame:000000000000141A                 db  0Eh
.eh_frame:000000000000141B                 db  10h
.eh_frame:000000000000141C                 db  8Eh
.eh_frame:000000000000141D                 db    2
.eh_frame:000000000000141E                 db  42h ; B
.eh_frame:000000000000141F                 db  0Eh
.eh_frame:0000000000001420                 db  18h
.eh_frame:0000000000001421                 db  8Dh
.eh_frame:0000000000001422                 db    3
.eh_frame:0000000000001423                 db  42h ; B
.eh_frame:0000000000001424                 db  0Eh
.eh_frame:0000000000001425                 db  20h
.eh_frame:0000000000001426                 db  8Ch
.eh_frame:0000000000001427                 db    4
.eh_frame:0000000000001428                 db  41h ; A
.eh_frame:0000000000001429                 db  0Eh
.eh_frame:000000000000142A                 db  28h ; (
.eh_frame:000000000000142B                 db  86h
.eh_frame:000000000000142C                 db    5
.eh_frame:000000000000142D                 db  44h ; D
.eh_frame:000000000000142E                 db  0Eh
.eh_frame:000000000000142F                 db  30h ; 0
.eh_frame:0000000000001430                 db  83h
.eh_frame:0000000000001431                 db    6
.eh_frame:0000000000001432                 db  50h ; P
.eh_frame:0000000000001433                 db  0Eh
.eh_frame:0000000000001434                 db  40h ; @
.eh_frame:0000000000001435                 db  55h ; U
.eh_frame:0000000000001436                 db  0Ah
.eh_frame:0000000000001437                 db  0Eh
.eh_frame:0000000000001438                 db  30h ; 0
.eh_frame:0000000000001439                 db  4Ah ; J
.eh_frame:000000000000143A                 db  0Eh
.eh_frame:000000000000143B                 db  28h ; (
.eh_frame:000000000000143C                 db  41h ; A
.eh_frame:000000000000143D                 db  0Eh
.eh_frame:000000000000143E                 db  20h
.eh_frame:000000000000143F                 db  42h ; B
.eh_frame:0000000000001440                 db  0Eh
.eh_frame:0000000000001441                 db  18h
.eh_frame:0000000000001442                 db  42h ; B
.eh_frame:0000000000001443                 db  0Eh
.eh_frame:0000000000001444                 db  10h
.eh_frame:0000000000001445                 db  42h ; B
.eh_frame:0000000000001446                 db  0Eh
.eh_frame:0000000000001447                 db    8
.eh_frame:0000000000001448                 db  4Fh ; O
.eh_frame:0000000000001449                 db  0Bh
.eh_frame:000000000000144A                 db    0
.eh_frame:000000000000144B                 db    0
.eh_frame:000000000000144C                 db  18h
.eh_frame:000000000000144D                 db    0
.eh_frame:000000000000144E                 db    0
.eh_frame:000000000000144F                 db    0
.eh_frame:0000000000001450                 db 0A0h
.eh_frame:0000000000001451                 db    0
.eh_frame:0000000000001452                 db    0
.eh_frame:0000000000001453                 db    0
.eh_frame:0000000000001454                 db 0DCh
.eh_frame:0000000000001455                 db 0FBh
.eh_frame:0000000000001456                 db 0FFh
.eh_frame:0000000000001457                 db 0FFh
.eh_frame:0000000000001458                 db  3Ah ; :
.eh_frame:0000000000001459                 db    0
.eh_frame:000000000000145A                 db    0
.eh_frame:000000000000145B                 db    0
.eh_frame:000000000000145C                 db    0
.eh_frame:000000000000145D                 db  44h ; D
.eh_frame:000000000000145E                 db  0Eh
.eh_frame:000000000000145F                 db  10h
.eh_frame:0000000000001460                 db  4Eh ; N
.eh_frame:0000000000001461                 db  0Ah
.eh_frame:0000000000001462                 db  0Eh
.eh_frame:0000000000001463                 db    8
.eh_frame:0000000000001464                 db  41h ; A
.eh_frame:0000000000001465                 db  0Bh
.eh_frame:0000000000001466                 db    0
.eh_frame:0000000000001467                 db    0
.eh_frame:0000000000001468                 db  4Ch ; L
.eh_frame:0000000000001469                 db    0
.eh_frame:000000000000146A                 db    0
.eh_frame:000000000000146B                 db    0
.eh_frame:000000000000146C                 db 0BCh
.eh_frame:000000000000146D                 db    0
.eh_frame:000000000000146E                 db    0
.eh_frame:000000000000146F                 db    0
.eh_frame:0000000000001470                 db  70h ; p
.eh_frame:0000000000001471                 db 0F5h
.eh_frame:0000000000001472                 db 0FFh
.eh_frame:0000000000001473                 db 0FFh
.eh_frame:0000000000001474                 db    3
.eh_frame:0000000000001475                 db    4
.eh_frame:0000000000001476                 db    0
.eh_frame:0000000000001477                 db    0
.eh_frame:0000000000001478                 db    0
.eh_frame:0000000000001479                 db  42h ; B
.eh_frame:000000000000147A                 db  0Eh
.eh_frame:000000000000147B                 db  10h
.eh_frame:000000000000147C                 db  8Fh
.eh_frame:000000000000147D                 db    2
.eh_frame:000000000000147E                 db  42h ; B
.eh_frame:000000000000147F                 db  0Eh
.eh_frame:0000000000001480                 db  18h
.eh_frame:0000000000001481                 db  8Eh
.eh_frame:0000000000001482                 db    3
.eh_frame:0000000000001483                 db  42h ; B
.eh_frame:0000000000001484                 db  0Eh
.eh_frame:0000000000001485                 db  20h
.eh_frame:0000000000001486                 db  8Dh
.eh_frame:0000000000001487                 db    4
.eh_frame:0000000000001488                 db  42h ; B
.eh_frame:0000000000001489                 db  0Eh
.eh_frame:000000000000148A                 db  28h ; (
.eh_frame:000000000000148B                 db  8Ch
.eh_frame:000000000000148C                 db    5
.eh_frame:000000000000148D                 db  41h ; A
.eh_frame:000000000000148E                 db  0Eh
.eh_frame:000000000000148F                 db  30h ; 0
.eh_frame:0000000000001490                 db  86h
.eh_frame:0000000000001491                 db    6
.eh_frame:0000000000001492                 db  41h ; A
.eh_frame:0000000000001493                 db  0Eh
.eh_frame:0000000000001494                 db  38h ; 8
.eh_frame:0000000000001495                 db  83h
.eh_frame:0000000000001496                 db    7
.eh_frame:0000000000001497                 db  44h ; D
.eh_frame:0000000000001498                 db  0Eh
.eh_frame:0000000000001499                 db  70h ; p
.eh_frame:000000000000149A                 db  6Bh ; k
.eh_frame:000000000000149B                 db  0Ah
.eh_frame:000000000000149C                 db  0Eh
.eh_frame:000000000000149D                 db  38h ; 8
.eh_frame:000000000000149E                 db  41h ; A
.eh_frame:000000000000149F                 db  0Eh
.eh_frame:00000000000014A0                 db  30h ; 0
.eh_frame:00000000000014A1                 db  41h ; A
.eh_frame:00000000000014A2                 db  0Eh
.eh_frame:00000000000014A3                 db  28h ; (
.eh_frame:00000000000014A4                 db  42h ; B
.eh_frame:00000000000014A5                 db  0Eh
.eh_frame:00000000000014A6                 db  20h
.eh_frame:00000000000014A7                 db  42h ; B
.eh_frame:00000000000014A8                 db  0Eh
.eh_frame:00000000000014A9                 db  18h
.eh_frame:00000000000014AA                 db  42h ; B
.eh_frame:00000000000014AB                 db  0Eh
.eh_frame:00000000000014AC                 db  10h
.eh_frame:00000000000014AD                 db  42h ; B
.eh_frame:00000000000014AE                 db  0Eh
.eh_frame:00000000000014AF                 db    8
.eh_frame:00000000000014B0                 db  41h ; A
.eh_frame:00000000000014B1                 db  0Bh
.eh_frame:00000000000014B2                 db    0
.eh_frame:00000000000014B3                 db    0
.eh_frame:00000000000014B4                 db    0
.eh_frame:00000000000014B5                 db    0
.eh_frame:00000000000014B6                 db    0
.eh_frame:00000000000014B7                 db    0
.eh_frame:00000000000014B8                 db  24h ; $
.eh_frame:00000000000014B9                 db    0
.eh_frame:00000000000014BA                 db    0
.eh_frame:00000000000014BB                 db    0
.eh_frame:00000000000014BC                 db  0Ch
.eh_frame:00000000000014BD                 db    1
.eh_frame:00000000000014BE                 db    0
.eh_frame:00000000000014BF                 db    0
.eh_frame:00000000000014C0                 db 0B0h
.eh_frame:00000000000014C1                 db 0FBh
.eh_frame:00000000000014C2                 db 0FFh
.eh_frame:00000000000014C3                 db 0FFh
.eh_frame:00000000000014C4                 db 0FFh
.eh_frame:00000000000014C5                 db    0
.eh_frame:00000000000014C6                 db    0
.eh_frame:00000000000014C7                 db    0
.eh_frame:00000000000014C8                 db    0
.eh_frame:00000000000014C9                 db    2
.eh_frame:00000000000014CA                 db  5Bh ; [
.eh_frame:00000000000014CB                 db  0Eh
.eh_frame:00000000000014CC                 db  10h
.eh_frame:00000000000014CD                 db  83h
.eh_frame:00000000000014CE                 db    2
.eh_frame:00000000000014CF                 db    2
.eh_frame:00000000000014D0                 db  61h ; a
.eh_frame:00000000000014D1                 db  0Eh
.eh_frame:00000000000014D2                 db    8
.eh_frame:00000000000014D3                 db  44h ; D
.eh_frame:00000000000014D4                 db 0C3h
.eh_frame:00000000000014D5                 db  78h ; x
.eh_frame:00000000000014D6                 db  0Eh
.eh_frame:00000000000014D7                 db  10h
.eh_frame:00000000000014D8                 db  83h
.eh_frame:00000000000014D9                 db    2
.eh_frame:00000000000014DA                 db  46h ; F
.eh_frame:00000000000014DB                 db  0Eh
.eh_frame:00000000000014DC                 db    8
.eh_frame:00000000000014DD                 db    0
.eh_frame:00000000000014DE                 db    0
.eh_frame:00000000000014DF                 db    0
.eh_frame:00000000000014E0                 db  44h ; D
.eh_frame:00000000000014E1                 db    0
.eh_frame:00000000000014E2                 db    0
.eh_frame:00000000000014E3                 db    0
.eh_frame:00000000000014E4                 db  34h ; 4
.eh_frame:00000000000014E5                 db    1
.eh_frame:00000000000014E6                 db    0
.eh_frame:00000000000014E7                 db    0
.eh_frame:00000000000014E8                 db  88h
.eh_frame:00000000000014E9                 db 0FCh
.eh_frame:00000000000014EA                 db 0FFh
.eh_frame:00000000000014EB                 db 0FFh
.eh_frame:00000000000014EC                 db  65h ; e
.eh_frame:00000000000014ED                 db    0
.eh_frame:00000000000014EE                 db    0
.eh_frame:00000000000014EF                 db    0
.eh_frame:00000000000014F0                 db    0
.eh_frame:00000000000014F1                 db  42h ; B
.eh_frame:00000000000014F2                 db  0Eh
.eh_frame:00000000000014F3                 db  10h
.eh_frame:00000000000014F4                 db  8Fh
.eh_frame:00000000000014F5                 db    2
.eh_frame:00000000000014F6                 db  42h ; B
.eh_frame:00000000000014F7                 db  0Eh
.eh_frame:00000000000014F8                 db  18h
.eh_frame:00000000000014F9                 db  8Eh
.eh_frame:00000000000014FA                 db    3
.eh_frame:00000000000014FB                 db  45h ; E
.eh_frame:00000000000014FC                 db  0Eh
.eh_frame:00000000000014FD                 db  20h
.eh_frame:00000000000014FE                 db  8Dh
.eh_frame:00000000000014FF                 db    4
.eh_frame:0000000000001500                 db  42h ; B
.eh_frame:0000000000001501                 db  0Eh
.eh_frame:0000000000001502                 db  28h ; (
.eh_frame:0000000000001503                 db  8Ch
.eh_frame:0000000000001504                 db    5
.eh_frame:0000000000001505                 db  48h ; H
.eh_frame:0000000000001506                 db  0Eh
.eh_frame:0000000000001507                 db  30h ; 0
.eh_frame:0000000000001508                 db  86h
.eh_frame:0000000000001509                 db    6
.eh_frame:000000000000150A                 db  48h ; H
.eh_frame:000000000000150B                 db  0Eh
.eh_frame:000000000000150C                 db  38h ; 8
.eh_frame:000000000000150D                 db  83h
.eh_frame:000000000000150E                 db    7
.eh_frame:000000000000150F                 db  4Dh ; M
.eh_frame:0000000000001510                 db  0Eh
.eh_frame:0000000000001511                 db  40h ; @
.eh_frame:0000000000001512                 db  72h ; r
.eh_frame:0000000000001513                 db  0Eh
.eh_frame:0000000000001514                 db  38h ; 8
.eh_frame:0000000000001515                 db  41h ; A
.eh_frame:0000000000001516                 db  0Eh
.eh_frame:0000000000001517                 db  30h ; 0
.eh_frame:0000000000001518                 db  41h ; A
.eh_frame:0000000000001519                 db  0Eh
.eh_frame:000000000000151A                 db  28h ; (
.eh_frame:000000000000151B                 db  42h ; B
.eh_frame:000000000000151C                 db  0Eh
.eh_frame:000000000000151D                 db  20h
.eh_frame:000000000000151E                 db  42h ; B
.eh_frame:000000000000151F                 db  0Eh
.eh_frame:0000000000001520                 db  18h
.eh_frame:0000000000001521                 db  42h ; B
.eh_frame:0000000000001522                 db  0Eh
.eh_frame:0000000000001523                 db  10h
.eh_frame:0000000000001524                 db  42h ; B
.eh_frame:0000000000001525                 db  0Eh
.eh_frame:0000000000001526                 db    8
.eh_frame:0000000000001527                 db    0
.eh_frame:0000000000001528                 db  10h
.eh_frame:0000000000001529                 db    0
.eh_frame:000000000000152A                 db    0
.eh_frame:000000000000152B                 db    0
.eh_frame:000000000000152C                 db  7Ch ; |
.eh_frame:000000000000152D                 db    1
.eh_frame:000000000000152E                 db    0
.eh_frame:000000000000152F                 db    0
.eh_frame:0000000000001530                 db 0B0h
.eh_frame:0000000000001531                 db 0FCh
.eh_frame:0000000000001532                 db 0FFh
.eh_frame:0000000000001533                 db 0FFh
.eh_frame:0000000000001534                 db    2
.eh_frame:0000000000001535                 db    0
.eh_frame:0000000000001536                 db    0
.eh_frame:0000000000001537                 db    0
.eh_frame:0000000000001538                 db    0
.eh_frame:0000000000001539                 db    0
.eh_frame:000000000000153A                 db    0
.eh_frame:000000000000153B                 db    0
.eh_frame:000000000000153C __FRAME_END__   db    0
.eh_frame:000000000000153D                 db    0
.eh_frame:000000000000153E                 db    0
.eh_frame:000000000000153F                 db    0
.eh_frame:000000000000153F _eh_frame       ends
.eh_frame:000000000000153F
.init_array:0000000000201D48 ; ELF Initialization Function Table
.init_array:0000000000201D48 ; ===========================================================================
.init_array:0000000000201D48
.init_array:0000000000201D48 ; Segment type: Pure data
.init_array:0000000000201D48 ; Segment permissions: Read/Write
.init_array:0000000000201D48 _init_array     segment qword public 'DATA' use64
.init_array:0000000000201D48                 assume cs:_init_array
.init_array:0000000000201D48                 ;org 201D48h
.init_array:0000000000201D48 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000201D48                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000201D48                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000201D48 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000201D48
.fini_array:0000000000201D50 ; ELF Termination Function Table
.fini_array:0000000000201D50 ; ===========================================================================
.fini_array:0000000000201D50
.fini_array:0000000000201D50 ; Segment type: Pure data
.fini_array:0000000000201D50 ; Segment permissions: Read/Write
.fini_array:0000000000201D50 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000201D50                 assume cs:_fini_array
.fini_array:0000000000201D50                 ;org 201D50h
.fini_array:0000000000201D50 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000201D50                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000201D50 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000201D50
LOAD:0000000000201D58 ; ELF Dynamic Information
LOAD:0000000000201D58 ; ===========================================================================
LOAD:0000000000201D58
LOAD:0000000000201D58 ; Segment type: Pure data
LOAD:0000000000201D58 ; Segment permissions: Read/Write
LOAD:0000000000201D58 LOAD            segment byte public 'DATA' use64
LOAD:0000000000201D58                 assume cs:LOAD
LOAD:0000000000201D58                 ;org 201D58h
LOAD:0000000000201D58 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000201D58                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000201D58                                         ; DT_NEEDED libc.so.6
LOAD:0000000000201D68                 Elf64_Dyn <0Ch, 8B8h>   ; DT_INIT
LOAD:0000000000201D78                 Elf64_Dyn <0Dh, 11E4h>  ; DT_FINI
LOAD:0000000000201D88                 Elf64_Dyn <19h, 201D48h> ; DT_INIT_ARRAY
LOAD:0000000000201D98                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000201DA8                 Elf64_Dyn <1Ah, 201D50h> ; DT_FINI_ARRAY
LOAD:0000000000201DB8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000201DC8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000201DD8                 Elf64_Dyn <5, 4E8h>     ; DT_STRTAB
LOAD:0000000000201DE8                 Elf64_Dyn <6, 2C0h>     ; DT_SYMTAB
LOAD:0000000000201DF8                 Elf64_Dyn <0Ah, 113h>   ; DT_STRSZ
LOAD:0000000000201E08                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000201E18                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000201E28                 Elf64_Dyn <3, 201F48h>  ; DT_PLTGOT
LOAD:0000000000201E38                 Elf64_Dyn <2, 168h>     ; DT_PLTRELSZ
LOAD:0000000000201E48                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000201E58                 Elf64_Dyn <17h, 750h>   ; DT_JMPREL
LOAD:0000000000201E68                 Elf64_Dyn <7, 660h>     ; DT_RELA
LOAD:0000000000201E78                 Elf64_Dyn <8, 0F0h>     ; DT_RELASZ
LOAD:0000000000201E88                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000201E98                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000201EA8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000201EB8                 Elf64_Dyn <6FFFFFFEh, 630h> ; DT_VERNEED
LOAD:0000000000201EC8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000201ED8                 Elf64_Dyn <6FFFFFF0h, 5FCh> ; DT_VERSYM
LOAD:0000000000201EE8                 Elf64_Dyn <6FFFFFF9h, 3> ; DT_RELACOUNT
LOAD:0000000000201EF8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000201F08                 db    0
LOAD:0000000000201F09                 db    0
LOAD:0000000000201F0A                 db    0
LOAD:0000000000201F0B                 db    0
LOAD:0000000000201F0C                 db    0
LOAD:0000000000201F0D                 db    0
LOAD:0000000000201F0E                 db    0
LOAD:0000000000201F0F                 db    0
LOAD:0000000000201F10                 db    0
LOAD:0000000000201F11                 db    0
LOAD:0000000000201F12                 db    0
LOAD:0000000000201F13                 db    0
LOAD:0000000000201F14                 db    0
LOAD:0000000000201F15                 db    0
LOAD:0000000000201F16                 db    0
LOAD:0000000000201F17                 db    0
LOAD:0000000000201F18                 db    0
LOAD:0000000000201F19                 db    0
LOAD:0000000000201F1A                 db    0
LOAD:0000000000201F1B                 db    0
LOAD:0000000000201F1C                 db    0
LOAD:0000000000201F1D                 db    0
LOAD:0000000000201F1E                 db    0
LOAD:0000000000201F1F                 db    0
LOAD:0000000000201F20                 db    0
LOAD:0000000000201F21                 db    0
LOAD:0000000000201F22                 db    0
LOAD:0000000000201F23                 db    0
LOAD:0000000000201F24                 db    0
LOAD:0000000000201F25                 db    0
LOAD:0000000000201F26                 db    0
LOAD:0000000000201F27                 db    0
LOAD:0000000000201F28                 db    0
LOAD:0000000000201F29                 db    0
LOAD:0000000000201F2A                 db    0
LOAD:0000000000201F2B                 db    0
LOAD:0000000000201F2C                 db    0
LOAD:0000000000201F2D                 db    0
LOAD:0000000000201F2E                 db    0
LOAD:0000000000201F2F                 db    0
LOAD:0000000000201F30                 db    0
LOAD:0000000000201F31                 db    0
LOAD:0000000000201F32                 db    0
LOAD:0000000000201F33                 db    0
LOAD:0000000000201F34                 db    0
LOAD:0000000000201F35                 db    0
LOAD:0000000000201F36                 db    0
LOAD:0000000000201F37                 db    0
LOAD:0000000000201F38                 db    0
LOAD:0000000000201F39                 db    0
LOAD:0000000000201F3A                 db    0
LOAD:0000000000201F3B                 db    0
LOAD:0000000000201F3C                 db    0
LOAD:0000000000201F3D                 db    0
LOAD:0000000000201F3E                 db    0
LOAD:0000000000201F3F                 db    0
LOAD:0000000000201F40                 db    0
LOAD:0000000000201F41                 db    0
LOAD:0000000000201F42                 db    0
LOAD:0000000000201F43                 db    0
LOAD:0000000000201F44                 db    0
LOAD:0000000000201F45                 db    0
LOAD:0000000000201F46                 db    0
LOAD:0000000000201F47                 db    0
LOAD:0000000000201F47 LOAD            ends
LOAD:0000000000201F47
.got:0000000000201F48 ; ===========================================================================
.got:0000000000201F48
.got:0000000000201F48 ; Segment type: Pure data
.got:0000000000201F48 ; Segment permissions: Read/Write
.got:0000000000201F48 _got            segment qword public 'DATA' use64
.got:0000000000201F48                 assume cs:_got
.got:0000000000201F48                 ;org 201F48h
.got:0000000000201F48 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000201F50 qword_201F50    dq 0                    ; DATA XREF: sub_8D0↑r
.got:0000000000201F58 qword_201F58    dq 0                    ; DATA XREF: sub_8D0+6↑r
.got:0000000000201F60 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000201F68 putchar_ptr     dq offset putchar       ; DATA XREF: _putchar↑r
.got:0000000000201F70 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000201F78 __errno_location_ptr dq offset __errno_location
.got:0000000000201F78                                         ; DATA XREF: ___errno_location↑r
.got:0000000000201F80 puts_ptr        dq offset puts          ; DATA XREF: _puts↑r
.got:0000000000201F88 ferror_ptr      dq offset ferror        ; DATA XREF: _ferror↑r
.got:0000000000201F90 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000201F98 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000201FA0 strtol_ptr      dq offset strtol        ; DATA XREF: _strtol↑r
.got:0000000000201FA8 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000201FB0 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000201FB8 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000201FC0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000201FC8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000201FC8                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000201FD0 strerror_ptr    dq offset strerror      ; DATA XREF: _strerror↑r
.got:0000000000201FD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000201FD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000201FE0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000201FE0                                         ; DATA XREF: start+24↑r
.got:0000000000201FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000201FE8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000201FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000201FF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000201FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000201FF8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000201FF8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000201FF8 _got            ends
.got:0000000000201FF8
.data:0000000000202000 ; ===========================================================================
.data:0000000000202000
.data:0000000000202000 ; Segment type: Pure data
.data:0000000000202000 ; Segment permissions: Read/Write
.data:0000000000202000 _data           segment qword public 'DATA' use64
.data:0000000000202000                 assume cs:_data
.data:0000000000202000                 ;org 202000h
.data:0000000000202000                 public __data_start ; weak
.data:0000000000202000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000202000                                         ; data_start
.data:0000000000202001                 db    0
.data:0000000000202002                 db    0
.data:0000000000202003                 db    0
.data:0000000000202004                 db    0
.data:0000000000202005                 db    0
.data:0000000000202006                 db    0
.data:0000000000202007                 db    0
.data:0000000000202008                 public __dso_handle
.data:0000000000202008 ; void *_dso_handle
.data:0000000000202008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000202008                                         ; .data:__dso_handle↓o
.data:0000000000202008 _data           ends
.data:0000000000202008
LOAD:0000000000202010 ; ===========================================================================
LOAD:0000000000202010
LOAD:0000000000202010 ; Segment type: Pure data
LOAD:0000000000202010 ; Segment permissions: Read/Write
LOAD:0000000000202010 LOAD            segment byte public 'DATA' use64
LOAD:0000000000202010                 assume cs:LOAD
LOAD:0000000000202010                 ;org 202010h
LOAD:0000000000202010                 public __bss_start
LOAD:0000000000202010 __bss_start     db    ? ;               ; DATA XREF: deregister_tm_clones↑o
LOAD:0000000000202010                                         ; deregister_tm_clones+8↑o ...
LOAD:0000000000202010                                         ; Alternative name is '_edata'
LOAD:0000000000202010                                         ; __TMC_END__
LOAD:0000000000202010                                         ; _edata
LOAD:0000000000202011                 db    ? ;
LOAD:0000000000202012                 db    ? ;
LOAD:0000000000202013                 db    ? ;
LOAD:0000000000202014                 db    ? ;
LOAD:0000000000202015                 db    ? ;
LOAD:0000000000202016                 db    ? ;
LOAD:0000000000202017                 db    ? ;
LOAD:0000000000202018                 db    ? ;
LOAD:0000000000202019                 db    ? ;
LOAD:000000000020201A                 db    ? ;
LOAD:000000000020201B                 db    ? ;
LOAD:000000000020201C                 db    ? ;
LOAD:000000000020201D                 db    ? ;
LOAD:000000000020201E                 db    ? ;
LOAD:000000000020201F                 db    ? ;
LOAD:000000000020201F LOAD            ends
LOAD:000000000020201F
.bss:0000000000202020 ; ===========================================================================
.bss:0000000000202020
.bss:0000000000202020 ; Segment type: Uninitialized
.bss:0000000000202020 ; Segment permissions: Read/Write
.bss:0000000000202020 _bss            segment align_32 public 'BSS' use64
.bss:0000000000202020                 assume cs:_bss
.bss:0000000000202020                 ;org 202020h
.bss:0000000000202020                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000202020                 public stdout@@GLIBC_2_2_5
.bss:0000000000202020 ; FILE *stdout
.bss:0000000000202020 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000004B8↑o
.bss:0000000000202020                                         ; main+396↑r ...
.bss:0000000000202020                                         ; Alternative name is 'stdout'
.bss:0000000000202020                                         ; Copy of shared data
.bss:0000000000202028                 align 20h
.bss:0000000000202040                 public stderr@@GLIBC_2_2_5
.bss:0000000000202040 ; FILE *stderr
.bss:0000000000202040 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000004D0↑o
.bss:0000000000202040                                         ; main:loc_9FD↑r ...
.bss:0000000000202040                                         ; Alternative name is 'stderr'
.bss:0000000000202040                                         ; Copy of shared data
.bss:0000000000202048 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:0000000000202048                                         ; __do_global_dtors_aux+28↑w
.bss:0000000000202049                 align 10h
.bss:0000000000202049 _bss            ends
.bss:0000000000202049
.prgend:0000000000202050 ; ===========================================================================
.prgend:0000000000202050
.prgend:0000000000202050 ; Segment type: Zero-length
.prgend:0000000000202050 _prgend         segment byte public '' use64
.prgend:0000000000202050 _end            label byte
.prgend:0000000000202050 _prgend         ends
.prgend:0000000000202050
extern:0000000000202058 ; ===========================================================================
extern:0000000000202058
extern:0000000000202058 ; Segment type: Externs
extern:0000000000202058 ; extern
extern:0000000000202058 ; void free(void *ptr)
extern:0000000000202058                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000202058                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000202060 ; int putchar(int c)
extern:0000000000202060                 extrn putchar:near      ; CODE XREF: _putchar↑j
extern:0000000000202060                                         ; DATA XREF: .got:putchar_ptr↑o
extern:0000000000202068 ; void __noreturn abort(void)
extern:0000000000202068                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000202068                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000202070 ; int *_errno_location(void)
extern:0000000000202070                 extrn __errno_location:near
extern:0000000000202070                                         ; CODE XREF: ___errno_location↑j
extern:0000000000202070                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000202078 ; int puts(const char *s)
extern:0000000000202078                 extrn puts:near         ; CODE XREF: _puts↑j
extern:0000000000202078                                         ; DATA XREF: .got:puts_ptr↑o
extern:0000000000202080 ; int ferror(FILE *stream)
extern:0000000000202080                 extrn ferror:near       ; CODE XREF: _ferror↑j
extern:0000000000202080                                         ; DATA XREF: .got:ferror_ptr↑o
extern:0000000000202088 ; int fclose(FILE *stream)
extern:0000000000202088                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000202088                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000202090 ; void *memset(void *s, int c, size_t n)
extern:0000000000202090                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000000000202090                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000202098 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000202098                 extrn __libc_start_main:near
extern:0000000000202098                                         ; CODE XREF: start+24↑p
extern:0000000000202098                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002020A0 ; __int64 strtol(const char *nptr, char **endptr, int base)
extern:00000000002020A0                 extrn strtol:near       ; CODE XREF: _strtol↑j
extern:00000000002020A0                                         ; DATA XREF: .got:strtol_ptr↑o
extern:00000000002020A8 ; void *malloc(size_t size)
extern:00000000002020A8                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:00000000002020A8                                         ; DATA XREF: .got:malloc_ptr↑o
extern:00000000002020B0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:00000000002020B0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:00000000002020B8 ; void __noreturn exit(int status)
extern:00000000002020B8                 extrn exit:near         ; CODE XREF: _exit↑j
extern:00000000002020B8                                         ; DATA XREF: .got:exit_ptr↑o
extern:00000000002020C0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:00000000002020C0                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:00000000002020C0                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:00000000002020C8                 extrn __fprintf_chk:near
extern:00000000002020C8                                         ; CODE XREF: ___fprintf_chk↑j
extern:00000000002020C8                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:00000000002020D0 ; char *strerror(int errnum)
extern:00000000002020D0                 extrn strerror:near     ; CODE XREF: _strerror↑j
extern:00000000002020D0                                         ; DATA XREF: .got:strerror_ptr↑o
extern:00000000002020D8 ; int __fastcall __cxa_finalize(void *)
extern:00000000002020D8                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002020D8                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002020D8                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002020E0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002020E0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002020E8                 extrn __gmon_start__:near ; weak
extern:00000000002020E8                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002020E8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002020F0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002020F0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002020F0
extern:00000000002020F0
extern:00000000002020F0                 end start
