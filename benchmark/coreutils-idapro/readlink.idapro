LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 3EAB3A1B012D5024DF7333CA61112C79E3ABFBB6595F67036EE30B0BB9551AF9
LOAD:0000000000000000 ; Input MD5    : EB3152E3F71B7F887C4A91655BDEC1DD
LOAD:0000000000000000 ; Input CRC32  : 8C546173
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/readlink
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'readlink.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'areadlink-with-size.c'
LOAD:0000000000000000 ; Source File : 'canonicalize.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'file-set.c'
LOAD:0000000000000000 ; Source File : 'hash.c'
LOAD:0000000000000000 ; Source File : 'hash-triple.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'same.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xgetcwd.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'dirname.c'
LOAD:0000000000000000 ; Source File : 'dirname-lgpl.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'hash-pjw.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000308↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 32688h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 8F18h                ; Size in file image
LOAD:00000000000000D8                 dq 8F18h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 9A70h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 209A70h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 610h                 ; Size in file image
LOAD:0000000000000110                 dq 7A8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 9C38h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 209C38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 7930h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 7930h                ; Physical address
LOAD:00000000000001B0                 dq 3ACh                 ; Size in file image
LOAD:00000000000001B8                 dq 3ACh                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 9A70h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 209A70h              ; Physical address
LOAD:0000000000000220                 dq 590h                 ; Size in file image
LOAD:0000000000000228                 dq 590h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0C1h, 0E7h, 3Eh, 0EEh, 0FEh, 0E4h, 10h, 33h, 9, 9Bh ; Desc
LOAD:0000000000000284                 db 17h, 0C6h, 0B9h, 0D0h, 75h, 0F1h, 31h, 8Bh, 8Ah, 27h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 36h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 1218012000414904h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 36h, 37h, 3Ch
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C433h
LOAD:00000000000002D8 ; ELF Symbol Table
LOAD:00000000000002D8                 Elf64_Sym <0>
LOAD:00000000000002F0                 Elf64_Sym <offset aFree - offset byte_890, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F0                            0>
LOAD:0000000000000308                 Elf64_Sym <offset aAbort - offset byte_890, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000308                            0>
LOAD:0000000000000320                 Elf64_Sym <offset aErrnoLocation - offset byte_890, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000320                            offset dword_0, 0>
LOAD:0000000000000338                 Elf64_Sym <offset aStrncmp - offset byte_890, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000338                            offset dword_0, 0>
LOAD:0000000000000350                 Elf64_Sym <offset aItmDeregistert - offset byte_890, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000350                            offset dword_0, 0>
LOAD:0000000000000368                 Elf64_Sym <offset aExit - offset byte_890, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000368                            0>
LOAD:0000000000000380                 Elf64_Sym <offset aFpending - offset byte_890, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000380                            offset dword_0, 0>
LOAD:0000000000000398                 Elf64_Sym <offset aReadlink - offset byte_890, 12h, 0, 0, \ ; "readlink"
LOAD:0000000000000398                            offset dword_0, 0>
LOAD:00000000000003B0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_890, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003B0                            offset dword_0, 0>
LOAD:00000000000003C8                 Elf64_Sym <offset aFclose - offset byte_890, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003C8                            offset dword_0, 0>
LOAD:00000000000003E0                 Elf64_Sym <offset aBindtextdomain - offset byte_890, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003E0                            offset dword_0, 0>
LOAD:00000000000003F8                 Elf64_Sym <offset aDcgettext - offset byte_890, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000003F8                            offset dword_0, 0>
LOAD:0000000000000410                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_890, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000410                            offset dword_0, 0>
LOAD:0000000000000428                 Elf64_Sym <offset aStrlen - offset byte_890, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000428                            offset dword_0, 0>
LOAD:0000000000000440                 Elf64_Sym <offset aLxstat - offset byte_890, 12h, 0, 0, \ ; "__lxstat"
LOAD:0000000000000440                            offset dword_0, 0>
LOAD:0000000000000458                 Elf64_Sym <offset aStackChkFail - offset byte_890, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000458                            offset dword_0, 0>
LOAD:0000000000000470                 Elf64_Sym <offset aGetoptLong - offset byte_890, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000470                            offset dword_0, 0>
LOAD:0000000000000488                 Elf64_Sym <offset aMbrtowc - offset byte_890, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000488                            offset dword_0, 0>
LOAD:00000000000004A0                 Elf64_Sym <offset aFxstatat - offset byte_890, 12h, 0, 0, \ ; "__fxstatat"
LOAD:00000000000004A0                            offset dword_0, 0>
LOAD:00000000000004B8                 Elf64_Sym <offset aOverflow - offset byte_890, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000004B8                            offset dword_0, 0>
LOAD:00000000000004D0                 Elf64_Sym <offset aStrrchr - offset byte_890, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004D0                            offset dword_0, 0>
LOAD:00000000000004E8                 Elf64_Sym <offset aLseek - offset byte_890, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004E8                            0>
LOAD:0000000000000500                 Elf64_Sym <offset aMemset - offset byte_890, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000500                            offset dword_0, 0>
LOAD:0000000000000518                 Elf64_Sym <offset aGetcwd - offset byte_890, 12h, 0, 0, \ ; "getcwd"
LOAD:0000000000000518                            offset dword_0, 0>
LOAD:0000000000000530                 Elf64_Sym <offset aStrspn - offset byte_890, 12h, 0, 0, \ ; "strspn"
LOAD:0000000000000530                            offset dword_0, 0>
LOAD:0000000000000548                 Elf64_Sym <offset aLibcStartMain - offset byte_890, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000548                            offset dword_0, 0>
LOAD:0000000000000560                 Elf64_Sym <offset aMemcmp - offset byte_890, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000560                            offset dword_0, 0>
LOAD:0000000000000578                 Elf64_Sym <offset aFputsUnlocked - offset byte_890, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000578                            offset dword_0, 0>
LOAD:0000000000000590                 Elf64_Sym <offset aCalloc - offset byte_890, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000590                            offset dword_0, 0>
LOAD:00000000000005A8                 Elf64_Sym <offset aStrcmp - offset byte_890, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000005A8                            offset dword_0, 0>
LOAD:00000000000005C0                 Elf64_Sym <offset aGmonStart - offset byte_890, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005C0                            offset dword_0, 0>
LOAD:00000000000005D8                 Elf64_Sym <offset aMemcpy - offset byte_890, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005D8                            offset dword_0, 0>
LOAD:00000000000005F0                 Elf64_Sym <offset aFileno - offset byte_890, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005F0                            offset dword_0, 0>
LOAD:0000000000000608                 Elf64_Sym <offset aXstat - offset byte_890, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:0000000000000608                            0>
LOAD:0000000000000620                 Elf64_Sym <offset aMalloc - offset byte_890, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000620                            offset dword_0, 0>
LOAD:0000000000000638                 Elf64_Sym <offset aFflush - offset byte_890, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000638                            offset dword_0, 0>
LOAD:0000000000000650                 Elf64_Sym <offset aNlLanginfo - offset byte_890, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000650                            offset dword_0, 0>
LOAD:0000000000000668                 Elf64_Sym <offset aFreading - offset byte_890, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000668                            offset dword_0, 0>
LOAD:0000000000000680                 Elf64_Sym <offset aRealloc - offset byte_890, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000680                            offset dword_0, 0>
LOAD:0000000000000698                 Elf64_Sym <offset aSetlocale - offset byte_890, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000698                            offset dword_0, 0>
LOAD:00000000000006B0                 Elf64_Sym <offset aPrintfChk - offset byte_890, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006B0                            offset dword_0, 0>
LOAD:00000000000006C8                 Elf64_Sym <offset aMemmove - offset byte_890, 12h, 0, 0, \ ; "memmove"
LOAD:00000000000006C8                            offset dword_0, 0>
LOAD:00000000000006E0                 Elf64_Sym <offset aError - offset byte_890, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000006E0                            0>
LOAD:00000000000006F8                 Elf64_Sym <offset aFseeko - offset byte_890, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000006F8                            offset dword_0, 0>
LOAD:0000000000000710                 Elf64_Sym <offset aCxaAtexit - offset byte_890, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000710                            offset dword_0, 0>
LOAD:0000000000000728                 Elf64_Sym <offset aExit+1 - offset byte_890, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000728                            offset dword_0, 0>
LOAD:0000000000000740                 Elf64_Sym <offset aFwrite - offset byte_890, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000740                            offset dword_0, 0>
LOAD:0000000000000758                 Elf64_Sym <offset aFprintfChk - offset byte_890, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000758                            offset dword_0, 0>
LOAD:0000000000000770                 Elf64_Sym <offset aItmRegistertmc - offset byte_890, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000770                            offset dword_0, 0>
LOAD:0000000000000788                 Elf64_Sym <offset aMbsinit - offset byte_890, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000788                            offset dword_0, 0>
LOAD:00000000000007A0                 Elf64_Sym <offset aIswprint - offset byte_890, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007A0                            offset dword_0, 0>
LOAD:00000000000007B8                 Elf64_Sym <offset aCxaFinalize - offset byte_890, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007B8                            offset dword_0, 0>
LOAD:00000000000007D0                 Elf64_Sym <offset aCtypeBLoc - offset byte_890, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000007D0                            offset dword_0, 0>
LOAD:00000000000007E8                 Elf64_Sym <offset aStdout - offset byte_890, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000007E8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000800                 Elf64_Sym <offset aProgname - offset byte_890, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000800                            offset __bss_start, 8>
LOAD:0000000000000818                 Elf64_Sym <offset aProgramInvocat - offset byte_890, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000818                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000830                 Elf64_Sym <offset aPrognameFull - offset byte_890, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000830                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000848                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_890, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000848                            offset __bss_start, 8>
LOAD:0000000000000860                 Elf64_Sym <offset aStderr - offset byte_890, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000860                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000878                 Elf64_Sym <offset aOptind - offset byte_890, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000878                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000890 ; ELF String Table
LOAD:0000000000000890 byte_890        db 0                    ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000890                                         ; LOAD:0000000000000308↑o ...
LOAD:0000000000000891 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000BD0↓o
LOAD:000000000000089B aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000638↑o
LOAD:00000000000008A2 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006B0↑o
LOAD:00000000000008AF aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000698↑o
LOAD:00000000000008B9 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000488↑o
LOAD:00000000000008C1 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000338↑o
LOAD:00000000000008C9 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000878↑o
LOAD:00000000000008D0 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004D0↑o
LOAD:00000000000008D8 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000003F8↑o
LOAD:00000000000008E2 aError          db 'error',0            ; DATA XREF: LOAD:00000000000006E0↑o
LOAD:00000000000008E8 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000458↑o
LOAD:00000000000008F9 aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:0000000000000440↑o
LOAD:0000000000000902 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007A0↑o
LOAD:000000000000090B aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000680↑o
LOAD:0000000000000913 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000308↑o
LOAD:0000000000000919 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000368↑o
LOAD:0000000000000919                                         ; LOAD:0000000000000728↑o
LOAD:000000000000091F aStrspn         db 'strspn',0           ; DATA XREF: LOAD:0000000000000530↑o
LOAD:0000000000000926 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000926                                         ; DATA XREF: LOAD:0000000000000818↑o
LOAD:000000000000093E aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:000000000000093E                                         ; DATA XREF: LOAD:0000000000000410↑o
LOAD:0000000000000955 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000590↑o
LOAD:000000000000095C aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000428↑o
LOAD:0000000000000963 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000500↑o
LOAD:000000000000096A aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000320↑o
LOAD:000000000000097B aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000560↑o
LOAD:0000000000000982 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000758↑o
LOAD:0000000000000990 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000007E8↑o
LOAD:0000000000000997 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004E8↑o
LOAD:000000000000099D aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005D8↑o
LOAD:00000000000009A4 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003C8↑o
LOAD:00000000000009AB aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000620↑o
LOAD:00000000000009B2 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000788↑o
LOAD:00000000000009BA aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000650↑o
LOAD:00000000000009C6 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000007D0↑o
LOAD:00000000000009D4 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000668↑o
LOAD:00000000000009DF aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000860↑o
LOAD:00000000000009E6 aReadlink       db 'readlink',0         ; DATA XREF: LOAD:0000000000000398↑o
LOAD:00000000000009EF aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000470↑o
LOAD:00000000000009FB aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005F0↑o
LOAD:0000000000000A02 aGetcwd         db 'getcwd',0           ; DATA XREF: LOAD:0000000000000518↑o
LOAD:0000000000000A09 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000740↑o
LOAD:0000000000000A10 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000380↑o
LOAD:0000000000000A1B aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A1B                                         ; DATA XREF: LOAD:0000000000000848↑o
LOAD:0000000000000A39 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007B8↑o
LOAD:0000000000000A48 aXstat          db '__xstat',0          ; DATA XREF: LOAD:0000000000000608↑o
LOAD:0000000000000A50 aMemmove        db 'memmove',0          ; DATA XREF: LOAD:00000000000006C8↑o
LOAD:0000000000000A58 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003E0↑o
LOAD:0000000000000A58                                         ; LOAD:00000000000003B0↑o
LOAD:0000000000000A67 aFxstatat       db '__fxstatat',0       ; DATA XREF: LOAD:00000000000004A0↑o
LOAD:0000000000000A72 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000005A8↑o
LOAD:0000000000000A79 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000A79                                         ; DATA XREF: LOAD:0000000000000548↑o
LOAD:0000000000000A8B aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000006F8↑o
LOAD:0000000000000A92 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000004B8↑o
LOAD:0000000000000A9D aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000578↑o
LOAD:0000000000000AAC aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000AB1 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000800↑o
LOAD:0000000000000ABC aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000830↑o
LOAD:0000000000000ACC aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000710↑o
LOAD:0000000000000AD9 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000BE0↓o
LOAD:0000000000000AE3 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000BF0↓o
LOAD:0000000000000AEF aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000C00↓o
LOAD:0000000000000AFA aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000C10↓o
LOAD:0000000000000B04 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000C20↓o
LOAD:0000000000000B10 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B10                                         ; DATA XREF: LOAD:0000000000000350↑o
LOAD:0000000000000B2C aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005C0↑o
LOAD:0000000000000B3B aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B3B                                         ; DATA XREF: LOAD:0000000000000770↑o
LOAD:0000000000000B55                 align 2
LOAD:0000000000000B56 ; ELF GNU Symbol Version Table
LOAD:0000000000000B56                 dw 0
LOAD:0000000000000B58                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000B5A                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000B5C                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000B5E                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000B60                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000B62                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000B64                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000B66                 dw 2                    ; readlink@@GLIBC_2.2.5
LOAD:0000000000000B68                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000B6A                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000B6C                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000B6E                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000B70                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000B72                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000B74                 dw 2                    ; __lxstat@@GLIBC_2.2.5
LOAD:0000000000000B76                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000B78                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000B7A                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000B7C                 dw 3                    ; __fxstatat@@GLIBC_2.4
LOAD:0000000000000B7E                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000B80                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000B82                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000B84                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000B86                 dw 2                    ; getcwd@@GLIBC_2.2.5
LOAD:0000000000000B88                 dw 2                    ; strspn@@GLIBC_2.2.5
LOAD:0000000000000B8A                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000B8C                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000B8E                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000B90                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000B92                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000B94                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000B96                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000B98                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000B9A                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000B9C                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000B9E                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000BA0                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000BA2                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000BA4                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000BA6                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000BA8                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000BAA                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000BAC                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000BAE                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000BB0                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000BB2                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000BB4                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000BB6                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000BB8                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000BBA                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000BBC                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000BBE                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000BC0                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000BC2                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000BC4                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000BC6                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000BC8                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000BCA                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000BCC                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000BCE                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000BD0 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000BD0                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_890, 10h, 0> ; "libc.so.6"
LOAD:0000000000000BE0                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_890, \ ; "GLIBC_2.3"
LOAD:0000000000000BE0                                10h>
LOAD:0000000000000BF0                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_890, \ ; "GLIBC_2.3.4"
LOAD:0000000000000BF0                                10h>
LOAD:0000000000000C00                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_890, \ ; "GLIBC_2.14"
LOAD:0000000000000C00                                10h>
LOAD:0000000000000C10                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_890, \ ; "GLIBC_2.4"
LOAD:0000000000000C10                                10h>
LOAD:0000000000000C20                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_890, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000C30 ; ELF RELA Relocation Table
LOAD:0000000000000C30                 Elf64_Rela <209A70h, 8, 1B60h> ; R_X86_64_RELATIVE +1B60h
LOAD:0000000000000C48                 Elf64_Rela <209A78h, 8, 1B20h> ; R_X86_64_RELATIVE +1B20h
LOAD:0000000000000C60                 Elf64_Rela <209A80h, 8, 69D1h> ; R_X86_64_RELATIVE +69D1h
LOAD:0000000000000C78                 Elf64_Rela <209AA0h, 8, 69DEh> ; R_X86_64_RELATIVE +69DEh
LOAD:0000000000000C90                 Elf64_Rela <209AC0h, 8, 69F4h> ; R_X86_64_RELATIVE +69F4h
LOAD:0000000000000CA8                 Elf64_Rela <209AE0h, 8, 6A09h> ; R_X86_64_RELATIVE +6A09h
LOAD:0000000000000CC0                 Elf64_Rela <209B00h, 8, 6A14h> ; R_X86_64_RELATIVE +6A14h
LOAD:0000000000000CD8                 Elf64_Rela <209B20h, 8, 6A1Ah> ; R_X86_64_RELATIVE +6A1Ah
LOAD:0000000000000CF0                 Elf64_Rela <209B40h, 8, 6A21h> ; R_X86_64_RELATIVE +6A21h
LOAD:0000000000000D08                 Elf64_Rela <209B60h, 8, 6A29h> ; R_X86_64_RELATIVE +6A29h
LOAD:0000000000000D20                 Elf64_Rela <209B80h, 8, 6A2Eh> ; R_X86_64_RELATIVE +6A2Eh
LOAD:0000000000000D38                 Elf64_Rela <209BA0h, 8, 6A33h> ; R_X86_64_RELATIVE +6A33h
LOAD:0000000000000D50                 Elf64_Rela <209BE0h, 8, 70E9h> ; R_X86_64_RELATIVE +70E9h
LOAD:0000000000000D68                 Elf64_Rela <209BE8h, 8, 70F1h> ; R_X86_64_RELATIVE +70F1h
LOAD:0000000000000D80                 Elf64_Rela <209BF0h, 8, 70F7h> ; R_X86_64_RELATIVE +70F7h
LOAD:0000000000000D98                 Elf64_Rela <209BF8h, 8, 7104h> ; R_X86_64_RELATIVE +7104h
LOAD:0000000000000DB0                 Elf64_Rela <209C00h, 8, 7111h> ; R_X86_64_RELATIVE +7111h
LOAD:0000000000000DC8                 Elf64_Rela <209C08h, 8, 7125h> ; R_X86_64_RELATIVE +7125h
LOAD:0000000000000DE0                 Elf64_Rela <209C10h, 8, 7127h> ; R_X86_64_RELATIVE +7127h
LOAD:0000000000000DF8                 Elf64_Rela <209C18h, 8, 710Ah> ; R_X86_64_RELATIVE +710Ah
LOAD:0000000000000E10                 Elf64_Rela <209C20h, 8, 69A1h> ; R_X86_64_RELATIVE +69A1h
LOAD:0000000000000E28                 Elf64_Rela <209C28h, 8, 712Fh> ; R_X86_64_RELATIVE +712Fh
LOAD:0000000000000E40                 Elf64_Rela <20A008h, 8, 20A008h> ; R_X86_64_RELATIVE +20A008h
LOAD:0000000000000E58                 Elf64_Rela <20A010h, 8, 6FC6h> ; R_X86_64_RELATIVE +6FC6h
LOAD:0000000000000E70                 Elf64_Rela <20A060h, 8, 20A070h> ; R_X86_64_RELATIVE +20A070h
LOAD:0000000000000E88                 Elf64_Rela <20A078h, 8, 20A0E0h> ; R_X86_64_RELATIVE +20A0E0h
LOAD:0000000000000EA0                 Elf64_Rela <209FC0h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000EB8                 Elf64_Rela <209FC8h, 1A00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000ED0                 Elf64_Rela <209FD0h, 1F00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000EE8                 Elf64_Rela <209FD8h, 3100000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000F00                 Elf64_Rela <209FE0h, 3400000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000F18                 Elf64_Rela <20A080h, 3700000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000F30                 Elf64_Rela <20A088h, 3600000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000F48                 Elf64_Rela <20A090h, 3C00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000F60                 Elf64_Rela <20A098h, 3900000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000F78                 Elf64_Rela <20A0A0h, 3B00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000F90 ; ELF JMPREL Relocation Table
LOAD:0000000000000F90                 Elf64_Rela <209E40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000FA8                 Elf64_Rela <209E48h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000FC0                 Elf64_Rela <209E50h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000FD8                 Elf64_Rela <209E58h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000FF0                 Elf64_Rela <209E60h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001008                 Elf64_Rela <209E68h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001020                 Elf64_Rela <209E70h, 800000007h, 0> ; R_X86_64_JUMP_SLOT readlink
LOAD:0000000000001038                 Elf64_Rela <209E78h, 900000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001050                 Elf64_Rela <209E80h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001068                 Elf64_Rela <209E88h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001080                 Elf64_Rela <209E90h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001098                 Elf64_Rela <209E98h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000010B0                 Elf64_Rela <209EA0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000010C8                 Elf64_Rela <209EA8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:00000000000010E0                 Elf64_Rela <209EB0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000010F8                 Elf64_Rela <209EB8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001110                 Elf64_Rela <209EC0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001128                 Elf64_Rela <209EC8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __fxstatat
LOAD:0000000000001140                 Elf64_Rela <209ED0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001158                 Elf64_Rela <209ED8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001170                 Elf64_Rela <209EE0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001188                 Elf64_Rela <209EE8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000011A0                 Elf64_Rela <209EF0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT getcwd
LOAD:00000000000011B8                 Elf64_Rela <209EF8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT strspn
LOAD:00000000000011D0                 Elf64_Rela <209F00h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000011E8                 Elf64_Rela <209F08h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001200                 Elf64_Rela <209F10h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001218                 Elf64_Rela <209F18h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001230                 Elf64_Rela <209F20h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001248                 Elf64_Rela <209F28h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001260                 Elf64_Rela <209F30h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000001278                 Elf64_Rela <209F38h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001290                 Elf64_Rela <209F40h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000012A8                 Elf64_Rela <209F48h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000012C0                 Elf64_Rela <209F50h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000012D8                 Elf64_Rela <209F58h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000012F0                 Elf64_Rela <209F60h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001308                 Elf64_Rela <209F68h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001320                 Elf64_Rela <209F70h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000001338                 Elf64_Rela <209F78h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001350                 Elf64_Rela <209F80h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001368                 Elf64_Rela <209F88h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001380                 Elf64_Rela <209F90h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001398                 Elf64_Rela <209F98h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000013B0                 Elf64_Rela <209FA0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000013C8                 Elf64_Rela <209FA8h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000013E0                 Elf64_Rela <209FB0h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000013F8                 Elf64_Rela <209FB8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000013F8 LOAD            ends
LOAD:00000000000013F8
.init:0000000000001410 ; ===========================================================================
.init:0000000000001410
.init:0000000000001410 ; Segment type: Pure code
.init:0000000000001410 ; Segment permissions: Read/Execute
.init:0000000000001410 _init           segment dword public 'CODE' use64
.init:0000000000001410                 assume cs:_init
.init:0000000000001410                 ;org 1410h
.init:0000000000001410                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001410
.init:0000000000001410 ; =============== S U B R O U T I N E =======================================
.init:0000000000001410
.init:0000000000001410
.init:0000000000001410                 public _init_proc
.init:0000000000001410 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001410                 sub     rsp, 8          ; _init
.init:0000000000001414                 mov     rax, cs:__gmon_start___ptr
.init:000000000000141B                 test    rax, rax
.init:000000000000141E                 jz      short loc_1422
.init:0000000000001420                 call    rax ; __gmon_start__
.init:0000000000001422
.init:0000000000001422 loc_1422:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001422                 add     rsp, 8
.init:0000000000001426                 retn
.init:0000000000001426 _init_proc      endp
.init:0000000000001426
.init:0000000000001426 _init           ends
.init:0000000000001426
LOAD:0000000000001427 ; ===========================================================================
LOAD:0000000000001427
LOAD:0000000000001427 ; Segment type: Pure code
LOAD:0000000000001427 ; Segment permissions: Read/Execute
LOAD:0000000000001427 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001427                 assume cs:LOAD
LOAD:0000000000001427                 ;org 1427h
LOAD:0000000000001427                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001427                 align 10h
LOAD:0000000000001427 LOAD            ends
LOAD:0000000000001427
.plt:0000000000001430 ; ===========================================================================
.plt:0000000000001430
.plt:0000000000001430 ; Segment type: Pure code
.plt:0000000000001430 ; Segment permissions: Read/Execute
.plt:0000000000001430 _plt            segment para public 'CODE' use64
.plt:0000000000001430                 assume cs:_plt
.plt:0000000000001430                 ;org 1430h
.plt:0000000000001430                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430
.plt:0000000000001430 sub_1430        proc near               ; CODE XREF: .plt:000000000000144B↓j
.plt:0000000000001430                                         ; .plt:000000000000145B↓j ...
.plt:0000000000001430 ; __unwind {
.plt:0000000000001430                 push    cs:qword_209E30
.plt:0000000000001436                 jmp     cs:qword_209E38
.plt:0000000000001436 sub_1430        endp
.plt:0000000000001436
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:000000000000143C                 align 20h
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; void free(void *ptr)
.plt:0000000000001440 _free           proc near               ; CODE XREF: main+1FF↓p
.plt:0000000000001440                                         ; areadlink_with_size+6E↓p ...
.plt:0000000000001440                 jmp     cs:free_ptr
.plt:0000000000001440 _free           endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    0
.plt:000000000000144B                 jmp     sub_1430
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: noreturn thunk
.plt:0000000000001450
.plt:0000000000001450 ; void __noreturn abort(void)
.plt:0000000000001450 _abort          proc near               ; CODE XREF: safe_hasher:loc_28CD↓p
.plt:0000000000001450                                         ; hash_get_first+3C↓p ...
.plt:0000000000001450                 jmp     cs:abort_ptr
.plt:0000000000001450 _abort          endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    1
.plt:000000000000145B                 jmp     sub_1430
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; int *__errno_location(void)
.plt:0000000000001460 ___errno_location proc near             ; CODE XREF: main+257↓p
.plt:0000000000001460                                         ; areadlink_with_size:loc_1FB8↓p ...
.plt:0000000000001460                 jmp     cs:__errno_location_ptr
.plt:0000000000001460 ___errno_location endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    2
.plt:000000000000146B                 jmp     sub_1430
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001470 _strncmp        proc near               ; CODE XREF: usage+24C↓p
.plt:0000000000001470                                         ; usage+30D↓p
.plt:0000000000001470                 jmp     cs:strncmp_ptr
.plt:0000000000001470 _strncmp        endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    3
.plt:000000000000147B                 jmp     sub_1430
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: noreturn thunk
.plt:0000000000001480
.plt:0000000000001480 ; void __noreturn _exit(int status)
.plt:0000000000001480 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001480                 jmp     cs:_exit_ptr
.plt:0000000000001480 __exit          endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    4
.plt:000000000000148B                 jmp     sub_1430
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; size_t __fpending(FILE *fp)
.plt:0000000000001490 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001490                 jmp     cs:__fpending_ptr
.plt:0000000000001490 ___fpending     endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    5
.plt:000000000000149B                 jmp     sub_1430
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; ssize_t readlink(const char *path, char *buf, size_t len)
.plt:00000000000014A0 _readlink       proc near               ; CODE XREF: areadlink_with_size+59↓p
.plt:00000000000014A0                 jmp     cs:readlink_ptr
.plt:00000000000014A0 _readlink       endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    6
.plt:00000000000014AB                 jmp     sub_1430
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; char *textdomain(const char *domainname)
.plt:00000000000014B0 _textdomain     proc near               ; CODE XREF: main+4F↓p
.plt:00000000000014B0                 jmp     cs:textdomain_ptr
.plt:00000000000014B0 _textdomain     endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    7
.plt:00000000000014BB                 jmp     sub_1430
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; int fclose(FILE *stream)
.plt:00000000000014C0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000014C0                                         ; rpl_fclose+6B↓j
.plt:00000000000014C0                 jmp     cs:fclose_ptr
.plt:00000000000014C0 _fclose         endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    8
.plt:00000000000014CB                 jmp     sub_1430
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000014D0 _bindtextdomain proc near               ; CODE XREF: main+43↓p
.plt:00000000000014D0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000014D0 _bindtextdomain endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    9
.plt:00000000000014DB                 jmp     sub_1430
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000014E0 _dcgettext      proc near               ; CODE XREF: main+2A8↓p
.plt:00000000000014E0                                         ; main+2D4↓p ...
.plt:00000000000014E0                 jmp     cs:dcgettext_ptr
.plt:00000000000014E0 _dcgettext      endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    0Ah
.plt:00000000000014EB                 jmp     sub_1430
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000014F0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000014F0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000014F0 ___ctype_get_mb_cur_max endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    0Bh
.plt:00000000000014FB                 jmp     sub_1430
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; size_t strlen(const char *s)
.plt:0000000000001500 _strlen         proc near               ; CODE XREF: canonicalize_filename_mode+77↓p
.plt:0000000000001500                                         ; canonicalize_filename_mode+440↓p ...
.plt:0000000000001500                 jmp     cs:strlen_ptr
.plt:0000000000001500 _strlen         endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    0Ch
.plt:000000000000150B                 jmp     sub_1430
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001510 ___lxstat       proc near               ; CODE XREF: canonicalize_filename_mode:loc_2310↓p
.plt:0000000000001510                 jmp     cs:__lxstat_ptr
.plt:0000000000001510 ___lxstat       endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    0Dh
.plt:000000000000151B                 jmp     sub_1430
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: noreturn thunk
.plt:0000000000001520
.plt:0000000000001520 ___stack_chk_fail proc near             ; CODE XREF: canonicalize_filename_mode:loc_2621↓p
.plt:0000000000001520                                         ; seen_file:loc_27E1↓p ...
.plt:0000000000001520                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001520 ___stack_chk_fail endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    0Eh
.plt:000000000000152B                 jmp     sub_1430
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001530 _getopt_long    proc near               ; CODE XREF: main+76↓p
.plt:0000000000001530                 jmp     cs:getopt_long_ptr
.plt:0000000000001530 _getopt_long    endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    0Fh
.plt:000000000000153B                 jmp     sub_1430
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001540 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001540                 jmp     cs:mbrtowc_ptr
.plt:0000000000001540 _mbrtowc        endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    10h
.plt:000000000000154B                 jmp     sub_1430
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; int __fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
.plt:0000000000001550 ___fxstatat     proc near               ; CODE XREF: same_nameat_part_0+47↓p
.plt:0000000000001550                                         ; same_nameat_part_0+7F↓p
.plt:0000000000001550                 jmp     cs:__fxstatat_ptr
.plt:0000000000001550 ___fxstatat     endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    11h
.plt:000000000000155B                 jmp     sub_1430
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001560 ___overflow     proc near               ; CODE XREF: main+2F5↓p
.plt:0000000000001560                 jmp     cs:__overflow_ptr
.plt:0000000000001560 ___overflow     endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    12h
.plt:000000000000156B                 jmp     sub_1430
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; char *strrchr(const char *s, int c)
.plt:0000000000001570 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001570                 jmp     cs:strrchr_ptr
.plt:0000000000001570 _strrchr        endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    13h
.plt:000000000000157B                 jmp     sub_1430
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001580 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001580                                         ; rpl_fseeko+3B↓p
.plt:0000000000001580                 jmp     cs:lseek_ptr
.plt:0000000000001580 _lseek          endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    14h
.plt:000000000000158B                 jmp     sub_1430
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001590 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001590                                         ; xzalloc+12↓j
.plt:0000000000001590                 jmp     cs:memset_ptr
.plt:0000000000001590 _memset         endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    15h
.plt:000000000000159B                 jmp     sub_1430
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; char *getcwd(char *buf, size_t size)
.plt:00000000000015A0 _getcwd         proc near               ; CODE XREF: xgetcwd+5↓p
.plt:00000000000015A0                 jmp     cs:getcwd_ptr
.plt:00000000000015A0 _getcwd         endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    16h
.plt:00000000000015AB                 jmp     sub_1430
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; size_t strspn(const char *s, const char *accept)
.plt:00000000000015B0 _strspn         proc near               ; CODE XREF: canonicalize_filename_mode+2A4↓p
.plt:00000000000015B0                 jmp     cs:strspn_ptr
.plt:00000000000015B0 _strspn         endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    17h
.plt:00000000000015BB                 jmp     sub_1430
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000015C0 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:00000000000015C0                                         ; same_nameat+69↓p
.plt:00000000000015C0                 jmp     cs:memcmp_ptr
.plt:00000000000015C0 _memcmp         endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    18h
.plt:00000000000015CB                 jmp     sub_1430
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000015D0 _fputs_unlocked proc near               ; CODE XREF: main+1CA↓p
.plt:00000000000015D0                                         ; usage+9D↓p ...
.plt:00000000000015D0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000015D0 _fputs_unlocked endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    19h
.plt:00000000000015DB                 jmp     sub_1430
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000015E0 _calloc         proc near               ; CODE XREF: hash_initialize+B1↓p
.plt:00000000000015E0                                         ; hash_rehash+C6↓p ...
.plt:00000000000015E0                 jmp     cs:calloc_ptr
.plt:00000000000015E0 _calloc         endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    1Ah
.plt:00000000000015EB                 jmp     sub_1430
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; int strcmp(const char *s1, const char *s2)
.plt:00000000000015F0 _strcmp         proc near               ; CODE XREF: triple_compare_ino_str+24↓p
.plt:00000000000015F0                 jmp     cs:strcmp_ptr
.plt:00000000000015F0 _strcmp         endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    1Bh
.plt:00000000000015FB                 jmp     sub_1430
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001600 _memcpy         proc near               ; CODE XREF: canonicalize_filename_mode+183↓p
.plt:0000000000001600                                         ; canonicalize_filename_mode+4B8↓p ...
.plt:0000000000001600                 jmp     cs:memcpy_ptr
.plt:0000000000001600 _memcpy         endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    1Ch
.plt:000000000000160B                 jmp     sub_1430
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; int fileno(FILE *stream)
.plt:0000000000001610 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001610                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001610                 jmp     cs:fileno_ptr
.plt:0000000000001610 _fileno         endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    1Dh
.plt:000000000000161B                 jmp     sub_1430
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001620 ___xstat        proc near               ; CODE XREF: canonicalize_filename_mode+269↓p
.plt:0000000000001620                 jmp     cs:__xstat_ptr
.plt:0000000000001620 ___xstat        endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    1Eh
.plt:000000000000162B                 jmp     sub_1430
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; void *malloc(size_t size)
.plt:0000000000001630 _malloc         proc near               ; CODE XREF: areadlink_with_size+43↓p
.plt:0000000000001630                                         ; areadlink_with_size+7E↓p ...
.plt:0000000000001630                 jmp     cs:malloc_ptr
.plt:0000000000001630 _malloc         endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    1Fh
.plt:000000000000163B                 jmp     sub_1430
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; int fflush(FILE *stream)
.plt:0000000000001640 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001640                                         ; rpl_fflush+3B↓j
.plt:0000000000001640                 jmp     cs:fflush_ptr
.plt:0000000000001640 _fflush         endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    20h ; ' '
.plt:000000000000164B                 jmp     sub_1430
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; char *nl_langinfo(nl_item item)
.plt:0000000000001650 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001650                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001650 _nl_langinfo    endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    21h ; '!'
.plt:000000000000165B                 jmp     sub_1430
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; int __freading(FILE *fp)
.plt:0000000000001660 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001660                                         ; rpl_fflush+9↓p
.plt:0000000000001660                 jmp     cs:__freading_ptr
.plt:0000000000001660 ___freading     endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    22h ; '"'
.plt:000000000000166B                 jmp     sub_1430
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001670 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001670                 jmp     cs:realloc_ptr
.plt:0000000000001670 _realloc        endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    23h ; '#'
.plt:000000000000167B                 jmp     sub_1430
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; char *setlocale(int category, const char *locale)
.plt:0000000000001680 _setlocale      proc near               ; CODE XREF: main+30↓p
.plt:0000000000001680                                         ; usage+233↓p ...
.plt:0000000000001680                 jmp     cs:setlocale_ptr
.plt:0000000000001680 _setlocale      endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    24h ; '$'
.plt:000000000000168B                 jmp     sub_1430
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001690                                         ; usage+227↓p ...
.plt:0000000000001690                 jmp     cs:__printf_chk_ptr
.plt:0000000000001690 ___printf_chk   endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    25h ; '%'
.plt:000000000000169B                 jmp     sub_1430
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; void *memmove(void *dest, const void *src, size_t n)
.plt:00000000000016A0 _memmove        proc near               ; CODE XREF: canonicalize_filename_mode+4A8↓p
.plt:00000000000016A0                 jmp     cs:memmove_ptr
.plt:00000000000016A0 _memmove        endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    26h ; '&'
.plt:00000000000016AB                 jmp     sub_1430
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000016B0 _error          proc near               ; CODE XREF: main+26C↓p
.plt:00000000000016B0                                         ; main+2B6↓p ...
.plt:00000000000016B0                 jmp     cs:error_ptr
.plt:00000000000016B0 _error          endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    27h ; '''
.plt:00000000000016BB                 jmp     sub_1430
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000016C0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_67EA↓j
.plt:00000000000016C0                 jmp     cs:fseeko_ptr
.plt:00000000000016C0 _fseeko         endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    28h ; '('
.plt:00000000000016CB                 jmp     sub_1430
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:00000000000016D0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:00000000000016D0                 jmp     cs:__cxa_atexit_ptr
.plt:00000000000016D0 ___cxa_atexit   endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    29h ; ')'
.plt:00000000000016DB                 jmp     sub_1430
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: noreturn thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; void __noreturn exit(int status)
.plt:00000000000016E0 _exit           proc near               ; CODE XREF: main+16A↓p
.plt:00000000000016E0                                         ; usage+58↓p
.plt:00000000000016E0                 jmp     cs:exit_ptr
.plt:00000000000016E0 _exit           endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    2Ah ; '*'
.plt:00000000000016EB                 jmp     sub_1430
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000016F0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:00000000000016F0                 jmp     cs:fwrite_ptr
.plt:00000000000016F0 _fwrite         endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    2Bh ; '+'
.plt:00000000000016FB                 jmp     sub_1430
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001700                                         ; hash_print_statistics+76↓p ...
.plt:0000000000001700                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001700 ___fprintf_chk  endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    2Ch ; ','
.plt:000000000000170B                 jmp     sub_1430
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001710 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001710                 jmp     cs:mbsinit_ptr
.plt:0000000000001710 _mbsinit        endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    2Dh ; '-'
.plt:000000000000171B                 jmp     sub_1430
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ; int iswprint(wint_t wc)
.plt:0000000000001720 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001720                 jmp     cs:iswprint_ptr
.plt:0000000000001720 _iswprint       endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    2Eh ; '.'
.plt:000000000000172B                 jmp     sub_1430
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001730 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001730                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001730 ___ctype_b_loc  endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    2Fh ; '/'
.plt:000000000000173B                 jmp     sub_1430
.plt:000000000000173B ; } // starts at 1430
.plt:000000000000173B _plt            ends
.plt:000000000000173B
.plt.got:0000000000001740 ; ===========================================================================
.plt.got:0000000000001740
.plt.got:0000000000001740 ; Segment type: Pure code
.plt.got:0000000000001740 ; Segment permissions: Read/Execute
.plt.got:0000000000001740 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001740                 assume cs:_plt_got
.plt.got:0000000000001740                 ;org 1740h
.plt.got:0000000000001740                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001740
.plt.got:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001740
.plt.got:0000000000001740 ; Attributes: thunk
.plt.got:0000000000001740
.plt.got:0000000000001740 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001740 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001740 ; __unwind {
.plt.got:0000000000001740                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001740 __cxa_finalize  endp
.plt.got:0000000000001740
.plt.got:0000000000001740 ; ---------------------------------------------------------------------------
.plt.got:0000000000001746                 align 8
.plt.got:0000000000001746 ; } // starts at 1740
.plt.got:0000000000001746 _plt_got        ends
.plt.got:0000000000001746
LOAD:0000000000001748 ; ===========================================================================
LOAD:0000000000001748
LOAD:0000000000001748 ; Segment type: Pure code
LOAD:0000000000001748 ; Segment permissions: Read/Execute
LOAD:0000000000001748 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001748                 assume cs:LOAD
LOAD:0000000000001748                 ;org 1748h
LOAD:0000000000001748                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001748                 align 10h
LOAD:0000000000001748 LOAD            ends
LOAD:0000000000001748
.text:0000000000001750 ; ===========================================================================
.text:0000000000001750
.text:0000000000001750 ; Segment type: Pure code
.text:0000000000001750 ; Segment permissions: Read/Execute
.text:0000000000001750 _text           segment para public 'CODE' use64
.text:0000000000001750                 assume cs:_text
.text:0000000000001750                 ;org 1750h
.text:0000000000001750                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001750
.text:0000000000001750 ; =============== S U B R O U T I N E =======================================
.text:0000000000001750
.text:0000000000001750
.text:0000000000001750 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001750                 public main
.text:0000000000001750 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001750
.text:0000000000001750 var_3D          = byte ptr -3Dh
.text:0000000000001750 var_3C          = dword ptr -3Ch
.text:0000000000001750
.text:0000000000001750 ; __unwind {
.text:0000000000001750                 push    r15
.text:0000000000001752                 push    r14
.text:0000000000001754                 push    r13
.text:0000000000001756                 push    r12
.text:0000000000001758                 xor     r13d, r13d
.text:000000000000175B                 push    rbp
.text:000000000000175C                 push    rbx
.text:000000000000175D                 mov     ebp, edi
.text:000000000000175F                 mov     rbx, rsi
.text:0000000000001762                 mov     r12d, 0FFFFFFFFh
.text:0000000000001768                 sub     rsp, 18h
.text:000000000000176C                 mov     rdi, [rsi]
.text:000000000000176F                 call    set_program_name
.text:0000000000001774                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:000000000000177B                 mov     edi, 6          ; category
.text:0000000000001780                 call    _setlocale
.text:0000000000001785                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:000000000000178C                 lea     rdi, domainname ; "coreutils"
.text:0000000000001793                 call    _bindtextdomain
.text:0000000000001798                 lea     rdi, domainname ; "coreutils"
.text:000000000000179F                 call    _textdomain
.text:00000000000017A4                 lea     rdi, close_stdout
.text:00000000000017AB                 call    atexit
.text:00000000000017B0
.text:00000000000017B0 loc_17B0:                               ; CODE XREF: main+A6↓j
.text:00000000000017B0                                         ; main+D1↓j ...
.text:00000000000017B0                 lea     rcx, longopts   ; longopts
.text:00000000000017B7                 lea     rdx, shortopts  ; "efmnqsvz"
.text:00000000000017BE                 xor     r8d, r8d        ; longind
.text:00000000000017C1                 mov     rsi, rbx        ; argv
.text:00000000000017C4                 mov     edi, ebp        ; argc
.text:00000000000017C6                 call    _getopt_long
.text:00000000000017CB                 cmp     eax, 0FFFFFFFFh
.text:00000000000017CE                 jz      loc_18BF
.text:00000000000017D4                 cmp     eax, 6Dh ; 'm'
.text:00000000000017D7                 jz      short loc_1850
.text:00000000000017D9                 jle     short loc_1800
.text:00000000000017DB                 cmp     eax, 73h ; 's'
.text:00000000000017DE                 jz      short loc_1842
.text:00000000000017E0                 jle     short loc_1828
.text:00000000000017E2                 cmp     eax, 76h ; 'v'
.text:00000000000017E5                 jz      short loc_1860
.text:00000000000017E7                 cmp     eax, 7Ah ; 'z'
.text:00000000000017EA                 jnz     loc_1A37
.text:00000000000017F0                 mov     r13d, 1
.text:00000000000017F6                 jmp     short loc_17B0
.text:00000000000017F6 ; ---------------------------------------------------------------------------
.text:00000000000017F8                 align 20h
.text:0000000000001800
.text:0000000000001800 loc_1800:                               ; CODE XREF: main+89↑j
.text:0000000000001800                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001805                 jz      loc_1A4F
.text:000000000000180B                 jle     short loc_1880
.text:000000000000180D                 cmp     eax, 65h ; 'e'
.text:0000000000001810                 jz      short loc_1870
.text:0000000000001812                 cmp     eax, 66h ; 'f'
.text:0000000000001815                 jnz     loc_1A37
.text:000000000000181B                 mov     r12d, 1
.text:0000000000001821                 jmp     short loc_17B0
.text:0000000000001821 ; ---------------------------------------------------------------------------
.text:0000000000001823                 align 8
.text:0000000000001828
.text:0000000000001828 loc_1828:                               ; CODE XREF: main+90↑j
.text:0000000000001828                 cmp     eax, 6Eh ; 'n'
.text:000000000000182B                 jnz     short loc_1839
.text:000000000000182D                 mov     cs:no_newline, 1
.text:0000000000001834                 jmp     loc_17B0
.text:0000000000001839 ; ---------------------------------------------------------------------------
.text:0000000000001839
.text:0000000000001839 loc_1839:                               ; CODE XREF: main+DB↑j
.text:0000000000001839                 cmp     eax, 71h ; 'q'
.text:000000000000183C                 jnz     loc_1A37
.text:0000000000001842
.text:0000000000001842 loc_1842:                               ; CODE XREF: main+8E↑j
.text:0000000000001842                 mov     cs:verbose, 0
.text:0000000000001849                 jmp     loc_17B0
.text:0000000000001849 ; ---------------------------------------------------------------------------
.text:000000000000184E                 align 10h
.text:0000000000001850
.text:0000000000001850 loc_1850:                               ; CODE XREF: main+87↑j
.text:0000000000001850                 mov     r12d, 2
.text:0000000000001856                 jmp     loc_17B0
.text:0000000000001856 ; ---------------------------------------------------------------------------
.text:000000000000185B                 align 20h
.text:0000000000001860
.text:0000000000001860 loc_1860:                               ; CODE XREF: main+95↑j
.text:0000000000001860                 mov     cs:verbose, 1
.text:0000000000001867                 jmp     loc_17B0
.text:0000000000001867 ; ---------------------------------------------------------------------------
.text:000000000000186C                 align 10h
.text:0000000000001870
.text:0000000000001870 loc_1870:                               ; CODE XREF: main+C0↑j
.text:0000000000001870                 xor     r12d, r12d
.text:0000000000001873                 jmp     loc_17B0
.text:0000000000001873 ; ---------------------------------------------------------------------------
.text:0000000000001878                 align 20h
.text:0000000000001880
.text:0000000000001880 loc_1880:                               ; CODE XREF: main+BB↑j
.text:0000000000001880                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001885                 jnz     loc_1A37
.text:000000000000188B                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001892                 mov     rcx, cs:Version
.text:0000000000001899                 lea     r8, aDmitryVLevin ; "Dmitry V. Levin"
.text:00000000000018A0                 lea     rdx, unk_6963
.text:00000000000018A7                 lea     rsi, aReadlink_0 ; "readlink"
.text:00000000000018AE                 xor     r9d, r9d
.text:00000000000018B1                 xor     eax, eax
.text:00000000000018B3                 call    version_etc
.text:00000000000018B8                 xor     edi, edi        ; status
.text:00000000000018BA                 call    _exit
.text:00000000000018BF ; ---------------------------------------------------------------------------
.text:00000000000018BF
.text:00000000000018BF loc_18BF:                               ; CODE XREF: main+7E↑j
.text:00000000000018BF                 mov     edx, cs:optind@@GLIBC_2_2_5
.text:00000000000018C5                 cmp     edx, ebp
.text:00000000000018C7                 mov     eax, edx
.text:00000000000018C9                 jge     loc_1A16
.text:00000000000018CF                 mov     ecx, ebp
.text:00000000000018D1                 sub     ecx, edx
.text:00000000000018D3                 sub     ecx, 1
.text:00000000000018D6                 jz      short loc_18F6
.text:00000000000018D8                 cmp     cs:no_newline, 0
.text:00000000000018DF                 jnz     loc_19EA
.text:00000000000018E5
.text:00000000000018E5 loc_18E5:                               ; CODE XREF: main+2C1↓j
.text:00000000000018E5                 cmp     ebp, edx
.text:00000000000018E7                 mov     cs:no_newline, 0
.text:00000000000018EE                 mov     eax, edx
.text:00000000000018F0                 jle     loc_19D5
.text:00000000000018F6
.text:00000000000018F6 loc_18F6:                               ; CODE XREF: main+186↑j
.text:00000000000018F6                 cmp     r13b, 1
.text:00000000000018FA                 sbb     ecx, ecx
.text:00000000000018FC                 xor     r14d, r14d
.text:00000000000018FF                 and     ecx, 0Ah
.text:0000000000001902                 mov     [rsp+48h+var_3C], ecx
.text:0000000000001906                 mov     [rsp+48h+var_3D], cl
.text:000000000000190A                 jmp     short loc_1967
.text:000000000000190A ; ---------------------------------------------------------------------------
.text:000000000000190C                 align 10h
.text:0000000000001910
.text:0000000000001910 loc_1910:                               ; CODE XREF: main+234↓j
.text:0000000000001910                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001917                 mov     rdi, r15        ; s
.text:000000000000191A                 call    _fputs_unlocked
.text:000000000000191F                 cmp     cs:no_newline, 0
.text:0000000000001926                 jnz     short loc_194C
.text:0000000000001928                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000192F                 mov     rax, [rdi+28h]
.text:0000000000001933                 cmp     [rdi+30h], rax
.text:0000000000001937                 jbe     loc_1A41
.text:000000000000193D                 movzx   edx, [rsp+48h+var_3D]
.text:0000000000001942                 lea     rcx, [rax+1]
.text:0000000000001946                 mov     [rdi+28h], rcx
.text:000000000000194A                 mov     [rax], dl
.text:000000000000194C
.text:000000000000194C loc_194C:                               ; CODE XREF: main+1D6↑j
.text:000000000000194C                                         ; main+2FA↓j
.text:000000000000194C                 mov     rdi, r15        ; ptr
.text:000000000000194F                 call    _free
.text:0000000000001954
.text:0000000000001954 loc_1954:                               ; CODE XREF: main+243↓j
.text:0000000000001954                                         ; main+271↓j
.text:0000000000001954                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:000000000000195A                 add     eax, 1
.text:000000000000195D                 cmp     eax, ebp
.text:000000000000195F                 mov     cs:optind@@GLIBC_2_2_5, eax
.text:0000000000001965                 jge     short loc_19D8
.text:0000000000001967
.text:0000000000001967 loc_1967:                               ; CODE XREF: main+1BA↑j
.text:0000000000001967                 cdqe
.text:0000000000001969                 cmp     r12d, 0FFFFFFFFh
.text:000000000000196D                 mov     r13, [rbx+rax*8]
.text:0000000000001971                 jz      short loc_19C3
.text:0000000000001973                 mov     esi, r12d
.text:0000000000001976                 mov     rdi, r13        ; src
.text:0000000000001979                 call    canonicalize_filename_mode
.text:000000000000197E                 mov     r15, rax
.text:0000000000001981
.text:0000000000001981 loc_1981:                               ; CODE XREF: main+283↓j
.text:0000000000001981                 test    r15, r15
.text:0000000000001984                 jnz     short loc_1910
.text:0000000000001986                 cmp     cs:verbose, 0
.text:000000000000198D                 mov     r14d, 1
.text:0000000000001993                 jz      short loc_1954
.text:0000000000001995                 mov     rdx, r13
.text:0000000000001998                 xor     edi, edi
.text:000000000000199A                 mov     esi, 3
.text:000000000000199F                 call    quotearg_n_style_colon
.text:00000000000019A4                 mov     r13, rax
.text:00000000000019A7                 call    ___errno_location
.text:00000000000019AC                 mov     esi, [rax]      ; errnum
.text:00000000000019AE                 lea     rdx, format+4   ; format
.text:00000000000019B5                 mov     rcx, r13
.text:00000000000019B8                 xor     edi, edi        ; status
.text:00000000000019BA                 xor     eax, eax
.text:00000000000019BC                 call    _error
.text:00000000000019C1                 jmp     short loc_1954
.text:00000000000019C3 ; ---------------------------------------------------------------------------
.text:00000000000019C3
.text:00000000000019C3 loc_19C3:                               ; CODE XREF: main+221↑j
.text:00000000000019C3                 mov     esi, 3Fh ; '?'
.text:00000000000019C8                 mov     rdi, r13        ; path
.text:00000000000019CB                 call    areadlink_with_size
.text:00000000000019D0                 mov     r15, rax
.text:00000000000019D3                 jmp     short loc_1981
.text:00000000000019D5 ; ---------------------------------------------------------------------------
.text:00000000000019D5
.text:00000000000019D5 loc_19D5:                               ; CODE XREF: main+1A0↑j
.text:00000000000019D5                 xor     r14d, r14d
.text:00000000000019D8
.text:00000000000019D8 loc_19D8:                               ; CODE XREF: main+215↑j
.text:00000000000019D8                 add     rsp, 18h
.text:00000000000019DC                 mov     eax, r14d
.text:00000000000019DF                 pop     rbx
.text:00000000000019E0                 pop     rbp
.text:00000000000019E1                 pop     r12
.text:00000000000019E3                 pop     r13
.text:00000000000019E5                 pop     r14
.text:00000000000019E7                 pop     r15
.text:00000000000019E9                 retn
.text:00000000000019EA ; ---------------------------------------------------------------------------
.text:00000000000019EA
.text:00000000000019EA loc_19EA:                               ; CODE XREF: main+18F↑j
.text:00000000000019EA                 lea     rsi, msgid      ; "ignoring --no-newline with multiple arg"...
.text:00000000000019F1                 mov     edx, 5          ; category
.text:00000000000019F6                 xor     edi, edi        ; domainname
.text:00000000000019F8                 call    _dcgettext
.text:00000000000019FD                 xor     esi, esi        ; errnum
.text:00000000000019FF                 mov     rdx, rax        ; format
.text:0000000000001A02                 xor     edi, edi        ; status
.text:0000000000001A04                 xor     eax, eax
.text:0000000000001A06                 call    _error
.text:0000000000001A0B                 mov     edx, cs:optind@@GLIBC_2_2_5
.text:0000000000001A11                 jmp     loc_18E5
.text:0000000000001A16 ; ---------------------------------------------------------------------------
.text:0000000000001A16
.text:0000000000001A16 loc_1A16:                               ; CODE XREF: main+179↑j
.text:0000000000001A16                 lea     rsi, aMissingOperand ; "missing operand"
.text:0000000000001A1D                 mov     edx, 5          ; category
.text:0000000000001A22                 xor     edi, edi        ; domainname
.text:0000000000001A24                 call    _dcgettext
.text:0000000000001A29                 xor     esi, esi        ; errnum
.text:0000000000001A2B                 mov     rdx, rax        ; format
.text:0000000000001A2E                 xor     edi, edi        ; status
.text:0000000000001A30                 xor     eax, eax
.text:0000000000001A32                 call    _error
.text:0000000000001A37
.text:0000000000001A37 loc_1A37:                               ; CODE XREF: main+9A↑j
.text:0000000000001A37                                         ; main+C5↑j ...
.text:0000000000001A37                 mov     edi, 1          ; status
.text:0000000000001A3C                 call    usage
.text:0000000000001A41 ; ---------------------------------------------------------------------------
.text:0000000000001A41
.text:0000000000001A41 loc_1A41:                               ; CODE XREF: main+1E7↑j
.text:0000000000001A41                 mov     esi, [rsp+48h+var_3C] ; int
.text:0000000000001A45                 call    ___overflow
.text:0000000000001A4A                 jmp     loc_194C
.text:0000000000001A4F ; ---------------------------------------------------------------------------
.text:0000000000001A4F
.text:0000000000001A4F loc_1A4F:                               ; CODE XREF: main+B5↑j
.text:0000000000001A4F                 xor     edi, edi        ; status
.text:0000000000001A51                 call    usage
.text:0000000000001A51 ; } // starts at 1750
.text:0000000000001A51 main            endp
.text:0000000000001A51
.text:0000000000001A51 ; ---------------------------------------------------------------------------
.text:0000000000001A56                 align 20h
.text:0000000000001A60
.text:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A60
.text:0000000000001A60 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001A60
.text:0000000000001A60 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001A60                 public start
.text:0000000000001A60 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001A60 ; __unwind {
.text:0000000000001A60                 xor     ebp, ebp
.text:0000000000001A62                 mov     r9, rdx         ; rtld_fini
.text:0000000000001A65                 pop     rsi             ; argc
.text:0000000000001A66                 mov     rdx, rsp        ; ubp_av
.text:0000000000001A69                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001A6D                 push    rax
.text:0000000000001A6E                 push    rsp             ; stack_end
.text:0000000000001A6F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001A76                 lea     rcx, __libc_csu_init ; init
.text:0000000000001A7D                 lea     rdi, main       ; main
.text:0000000000001A84                 call    cs:__libc_start_main_ptr
.text:0000000000001A8A                 hlt
.text:0000000000001A8A ; } // starts at 1A60
.text:0000000000001A8A start           endp
.text:0000000000001A8A
.text:0000000000001A8A ; ---------------------------------------------------------------------------
.text:0000000000001A8B                 align 10h
.text:0000000000001A90
.text:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A90
.text:0000000000001A90 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001A90
.text:0000000000001A90 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1B43↓p
.text:0000000000001A90                 lea     rdi, __bss_start
.text:0000000000001A97                 push    rbp
.text:0000000000001A98                 lea     rax, __bss_start
.text:0000000000001A9F                 cmp     rax, rdi
.text:0000000000001AA2                 mov     rbp, rsp
.text:0000000000001AA5                 jz      short loc_1AC0
.text:0000000000001AA7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001AAE                 test    rax, rax
.text:0000000000001AB1                 jz      short loc_1AC0
.text:0000000000001AB3                 pop     rbp
.text:0000000000001AB4                 jmp     rax
.text:0000000000001AB4 ; ---------------------------------------------------------------------------
.text:0000000000001AB6                 align 20h
.text:0000000000001AC0
.text:0000000000001AC0 loc_1AC0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001AC0                                         ; deregister_tm_clones+21↑j
.text:0000000000001AC0                 pop     rbp
.text:0000000000001AC1                 retn
.text:0000000000001AC1 deregister_tm_clones endp
.text:0000000000001AC1
.text:0000000000001AC1 ; ---------------------------------------------------------------------------
.text:0000000000001AC2                 align 10h
.text:0000000000001AD0
.text:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AD0
.text:0000000000001AD0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001AD0
.text:0000000000001AD0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001AD0                 lea     rdi, __bss_start
.text:0000000000001AD7                 lea     rsi, __bss_start
.text:0000000000001ADE                 push    rbp
.text:0000000000001ADF                 sub     rsi, rdi
.text:0000000000001AE2                 mov     rbp, rsp
.text:0000000000001AE5                 sar     rsi, 3
.text:0000000000001AE9                 mov     rax, rsi
.text:0000000000001AEC                 shr     rax, 3Fh
.text:0000000000001AF0                 add     rsi, rax
.text:0000000000001AF3                 sar     rsi, 1
.text:0000000000001AF6                 jz      short loc_1B10
.text:0000000000001AF8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001AFF                 test    rax, rax
.text:0000000000001B02                 jz      short loc_1B10
.text:0000000000001B04                 pop     rbp
.text:0000000000001B05                 jmp     rax
.text:0000000000001B05 ; ---------------------------------------------------------------------------
.text:0000000000001B07                 align 10h
.text:0000000000001B10
.text:0000000000001B10 loc_1B10:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001B10                                         ; register_tm_clones+32↑j
.text:0000000000001B10                 pop     rbp
.text:0000000000001B11                 retn
.text:0000000000001B11 register_tm_clones endp
.text:0000000000001B11
.text:0000000000001B11 ; ---------------------------------------------------------------------------
.text:0000000000001B12                 align 20h
.text:0000000000001B20
.text:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B20
.text:0000000000001B20 ; Attributes: info_from_lumina
.text:0000000000001B20
.text:0000000000001B20 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001B20                 cmp     cs:completed_7697, 0
.text:0000000000001B27                 jnz     short locret_1B58
.text:0000000000001B29                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001B31                 push    rbp
.text:0000000000001B32                 mov     rbp, rsp
.text:0000000000001B35                 jz      short loc_1B43
.text:0000000000001B37                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001B3E                 call    __cxa_finalize
.text:0000000000001B43
.text:0000000000001B43 loc_1B43:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001B43                 call    deregister_tm_clones
.text:0000000000001B48                 mov     cs:completed_7697, 1
.text:0000000000001B4F                 pop     rbp
.text:0000000000001B50                 retn
.text:0000000000001B50 ; ---------------------------------------------------------------------------
.text:0000000000001B51                 align 8
.text:0000000000001B58
.text:0000000000001B58 locret_1B58:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001B58                 rep retn
.text:0000000000001B58 __do_global_dtors_aux endp
.text:0000000000001B58
.text:0000000000001B58 ; ---------------------------------------------------------------------------
.text:0000000000001B5A                 align 20h
.text:0000000000001B60
.text:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B60
.text:0000000000001B60 ; Attributes: bp-based frame
.text:0000000000001B60
.text:0000000000001B60 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001B60                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001B60                 push    rbp
.text:0000000000001B61                 mov     rbp, rsp
.text:0000000000001B64                 pop     rbp
.text:0000000000001B65                 jmp     register_tm_clones
.text:0000000000001B65 frame_dummy     endp
.text:0000000000001B65
.text:0000000000001B65 ; ---------------------------------------------------------------------------
.text:0000000000001B6A                 align 10h
.text:0000000000001B70
.text:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B70
.text:0000000000001B70 ; Attributes: noreturn
.text:0000000000001B70
.text:0000000000001B70 ; void __fastcall __noreturn usage(int status)
.text:0000000000001B70                 public usage
.text:0000000000001B70 usage           proc near               ; CODE XREF: main+2EC↑p
.text:0000000000001B70                                         ; main+301↑p
.text:0000000000001B70
.text:0000000000001B70 var_A8          = qword ptr -0A8h
.text:0000000000001B70 var_A0          = qword ptr -0A0h
.text:0000000000001B70 var_98          = qword ptr -98h
.text:0000000000001B70 var_90          = qword ptr -90h
.text:0000000000001B70 var_88          = qword ptr -88h
.text:0000000000001B70 var_80          = qword ptr -80h
.text:0000000000001B70 var_78          = qword ptr -78h
.text:0000000000001B70 var_70          = qword ptr -70h
.text:0000000000001B70 var_68          = qword ptr -68h
.text:0000000000001B70 var_60          = qword ptr -60h
.text:0000000000001B70 var_58          = qword ptr -58h
.text:0000000000001B70 var_50          = qword ptr -50h
.text:0000000000001B70 var_48          = qword ptr -48h
.text:0000000000001B70 var_40          = qword ptr -40h
.text:0000000000001B70 var_30          = qword ptr -30h
.text:0000000000001B70
.text:0000000000001B70 ; __unwind {
.text:0000000000001B70                 push    r13
.text:0000000000001B72                 push    r12
.text:0000000000001B74                 mov     edx, 5          ; category
.text:0000000000001B79                 push    rbp
.text:0000000000001B7A                 push    rbx
.text:0000000000001B7B                 mov     ebp, edi
.text:0000000000001B7D                 sub     rsp, 88h
.text:0000000000001B84                 mov     rbx, cs:program_name
.text:0000000000001B8B                 mov     rax, fs:28h
.text:0000000000001B94                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001B99                 xor     eax, eax
.text:0000000000001B9B                 test    edi, edi
.text:0000000000001B9D                 jz      short loc_1BCD
.text:0000000000001B9F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001BA6                 xor     edi, edi        ; domainname
.text:0000000000001BA8                 call    _dcgettext
.text:0000000000001BAD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001BB4                 mov     rdx, rax
.text:0000000000001BB7                 mov     rcx, rbx
.text:0000000000001BBA                 mov     esi, 1
.text:0000000000001BBF                 xor     eax, eax
.text:0000000000001BC1                 call    ___fprintf_chk
.text:0000000000001BC6
.text:0000000000001BC6 loc_1BC6:                               ; CODE XREF: usage+2C6↓j
.text:0000000000001BC6                 mov     edi, ebp        ; status
.text:0000000000001BC8                 call    _exit
.text:0000000000001BCD ; ---------------------------------------------------------------------------
.text:0000000000001BCD
.text:0000000000001BCD loc_1BCD:                               ; CODE XREF: usage+2D↑j
.text:0000000000001BCD                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... FILE...\n"
.text:0000000000001BD4                 xor     edi, edi        ; domainname
.text:0000000000001BD6                 call    _dcgettext
.text:0000000000001BDB                 mov     rdx, rbx
.text:0000000000001BDE                 mov     rsi, rax
.text:0000000000001BE1                 mov     edi, 1
.text:0000000000001BE6                 xor     eax, eax
.text:0000000000001BE8                 call    ___printf_chk
.text:0000000000001BED                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001BF4                 lea     rsi, aPrintValueOfAS ; "Print value of a symbolic link or canon"...
.text:0000000000001BFB                 mov     edx, 5          ; category
.text:0000000000001C00                 xor     edi, edi        ; domainname
.text:0000000000001C02                 call    _dcgettext
.text:0000000000001C07                 mov     rsi, rbx        ; stream
.text:0000000000001C0A                 mov     rdi, rax        ; s
.text:0000000000001C0D                 call    _fputs_unlocked
.text:0000000000001C12                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001C19                 lea     rsi, aFCanonicalizeC ; "  -f, --canonicalize            canonic"...
.text:0000000000001C20                 mov     edx, 5          ; category
.text:0000000000001C25                 xor     edi, edi        ; domainname
.text:0000000000001C27                 call    _dcgettext
.text:0000000000001C2C                 mov     rsi, rbx        ; stream
.text:0000000000001C2F                 mov     rdi, rax        ; s
.text:0000000000001C32                 call    _fputs_unlocked
.text:0000000000001C37                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001C3E                 lea     rsi, aMCanonicalizeM ; "  -m, --canonicalize-missing    canonic"...
.text:0000000000001C45                 mov     edx, 5          ; category
.text:0000000000001C4A                 xor     edi, edi        ; domainname
.text:0000000000001C4C                 call    _dcgettext
.text:0000000000001C51                 mov     rsi, rbx        ; stream
.text:0000000000001C54                 mov     rdi, rax        ; s
.text:0000000000001C57                 call    _fputs_unlocked
.text:0000000000001C5C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001C63                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000001C6A                 mov     edx, 5          ; category
.text:0000000000001C6F                 xor     edi, edi        ; domainname
.text:0000000000001C71                 call    _dcgettext
.text:0000000000001C76                 mov     rsi, rbx        ; stream
.text:0000000000001C79                 mov     rdi, rax        ; s
.text:0000000000001C7C                 call    _fputs_unlocked
.text:0000000000001C81                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001C88                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001C8F                 mov     edx, 5          ; category
.text:0000000000001C94                 xor     edi, edi        ; domainname
.text:0000000000001C96                 call    _dcgettext
.text:0000000000001C9B                 mov     rsi, rbx        ; stream
.text:0000000000001C9E                 mov     rdi, rax        ; s
.text:0000000000001CA1                 lea     rbx, aReadlink_0 ; "readlink"
.text:0000000000001CA8                 call    _fputs_unlocked
.text:0000000000001CAD                 lea     rax, asc_68ED   ; "["
.text:0000000000001CB4                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000001CBB                 mov     [rsp+0A8h+var_48], 0
.text:0000000000001CC4                 mov     [rsp+0A8h+var_40], 0
.text:0000000000001CCD                 mov     rdx, rsp
.text:0000000000001CD0                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000001CD4                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001CDB                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000001CE0                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000001CE7                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000001CEC                 lea     rax, domainname ; "coreutils"
.text:0000000000001CF3                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000001CF8                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000001CFF                 mov     [rsp+0A8h+var_98], rax
.text:0000000000001D04                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001D0B                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000001D10                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001D15                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000001D1C                 mov     [rsp+0A8h+var_88], rax
.text:0000000000001D21                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000001D28                 mov     [rsp+0A8h+var_80], rax
.text:0000000000001D2D                 mov     [rsp+0A8h+var_70], rax
.text:0000000000001D32                 mov     [rsp+0A8h+var_60], rax
.text:0000000000001D37                 mov     [rsp+0A8h+var_50], rax
.text:0000000000001D3C                 nop     dword ptr [rax+00h]
.text:0000000000001D40
.text:0000000000001D40 loc_1D40:                               ; CODE XREF: usage+1ED↓j
.text:0000000000001D40                 add     rdx, 10h
.text:0000000000001D44                 mov     rdi, [rdx]
.text:0000000000001D47                 test    rdi, rdi
.text:0000000000001D4A                 jz      short loc_1D5F
.text:0000000000001D4C                 mov     ecx, 9
.text:0000000000001D51                 mov     rsi, rbx
.text:0000000000001D54                 repe cmpsb
.text:0000000000001D56                 setnbe  al
.text:0000000000001D59                 sbb     al, 0
.text:0000000000001D5B                 test    al, al
.text:0000000000001D5D                 jnz     short loc_1D40
.text:0000000000001D5F
.text:0000000000001D5F loc_1D5F:                               ; CODE XREF: usage+1DA↑j
.text:0000000000001D5F                 mov     r12, [rdx+8]
.text:0000000000001D63                 xor     edi, edi        ; domainname
.text:0000000000001D65                 mov     edx, 5          ; category
.text:0000000000001D6A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000001D71                 test    r12, r12
.text:0000000000001D74                 jz      loc_1E3B
.text:0000000000001D7A                 call    _dcgettext
.text:0000000000001D7F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001D86                 lea     rdx, unk_6963
.text:0000000000001D8D                 mov     rsi, rax
.text:0000000000001D90                 mov     edi, 1
.text:0000000000001D95                 xor     eax, eax
.text:0000000000001D97                 call    ___printf_chk
.text:0000000000001D9C                 xor     esi, esi        ; locale
.text:0000000000001D9E                 mov     edi, 5          ; category
.text:0000000000001DA3                 call    _setlocale
.text:0000000000001DA8                 test    rax, rax
.text:0000000000001DAB                 jz      short loc_1DC9
.text:0000000000001DAD                 lea     rsi, s2         ; "en_"
.text:0000000000001DB4                 mov     edx, 3          ; n
.text:0000000000001DB9                 mov     rdi, rax        ; s1
.text:0000000000001DBC                 call    _strncmp
.text:0000000000001DC1                 test    eax, eax
.text:0000000000001DC3                 jnz     loc_1ED0
.text:0000000000001DC9
.text:0000000000001DC9 loc_1DC9:                               ; CODE XREF: usage+23B↑j
.text:0000000000001DC9                                         ; usage+385↓j
.text:0000000000001DC9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001DD0                 xor     edi, edi        ; domainname
.text:0000000000001DD2                 mov     edx, 5          ; category
.text:0000000000001DD7                 call    _dcgettext
.text:0000000000001DDC                 lea     rcx, aReadlink_0 ; "readlink"
.text:0000000000001DE3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001DEA                 mov     rsi, rax
.text:0000000000001DED                 mov     edi, 1
.text:0000000000001DF2                 xor     eax, eax
.text:0000000000001DF4                 call    ___printf_chk
.text:0000000000001DF9                 cmp     r12, rbx
.text:0000000000001DFC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001E03                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001E0A                 cmovz   rbx, rcx
.text:0000000000001E0E
.text:0000000000001E0E loc_1E0E:                               ; CODE XREF: usage+354↓j
.text:0000000000001E0E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000001E15                 xor     edi, edi        ; domainname
.text:0000000000001E17                 mov     edx, 5          ; category
.text:0000000000001E1C                 call    _dcgettext
.text:0000000000001E21                 mov     rcx, rbx
.text:0000000000001E24                 mov     rsi, rax
.text:0000000000001E27                 mov     rdx, r12
.text:0000000000001E2A                 mov     edi, 1
.text:0000000000001E2F                 xor     eax, eax
.text:0000000000001E31                 call    ___printf_chk
.text:0000000000001E36                 jmp     loc_1BC6
.text:0000000000001E3B ; ---------------------------------------------------------------------------
.text:0000000000001E3B
.text:0000000000001E3B loc_1E3B:                               ; CODE XREF: usage+204↑j
.text:0000000000001E3B                 call    _dcgettext
.text:0000000000001E40                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001E47                 lea     rdx, unk_6963
.text:0000000000001E4E                 mov     rsi, rax
.text:0000000000001E51                 mov     edi, 1
.text:0000000000001E56                 xor     eax, eax
.text:0000000000001E58                 call    ___printf_chk
.text:0000000000001E5D                 xor     esi, esi        ; locale
.text:0000000000001E5F                 mov     edi, 5          ; category
.text:0000000000001E64                 call    _setlocale
.text:0000000000001E69                 test    rax, rax
.text:0000000000001E6C                 jz      short loc_1E86
.text:0000000000001E6E                 lea     rsi, s2         ; "en_"
.text:0000000000001E75                 mov     edx, 3          ; n
.text:0000000000001E7A                 mov     rdi, rax        ; s1
.text:0000000000001E7D                 call    _strncmp
.text:0000000000001E82                 test    eax, eax
.text:0000000000001E84                 jnz     short loc_1EC9
.text:0000000000001E86
.text:0000000000001E86 loc_1E86:                               ; CODE XREF: usage+2FC↑j
.text:0000000000001E86                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001E8D                 mov     edx, 5          ; category
.text:0000000000001E92                 xor     edi, edi        ; domainname
.text:0000000000001E94                 lea     r12, aReadlink_0 ; "readlink"
.text:0000000000001E9B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001EA2                 call    _dcgettext
.text:0000000000001EA7                 lea     rcx, aReadlink_0 ; "readlink"
.text:0000000000001EAE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001EB5                 mov     rsi, rax
.text:0000000000001EB8                 mov     edi, 1
.text:0000000000001EBD                 xor     eax, eax
.text:0000000000001EBF                 call    ___printf_chk
.text:0000000000001EC4                 jmp     loc_1E0E
.text:0000000000001EC9 ; ---------------------------------------------------------------------------
.text:0000000000001EC9
.text:0000000000001EC9 loc_1EC9:                               ; CODE XREF: usage+314↑j
.text:0000000000001EC9                 lea     r12, aReadlink_0 ; "readlink"
.text:0000000000001ED0
.text:0000000000001ED0 loc_1ED0:                               ; CODE XREF: usage+253↑j
.text:0000000000001ED0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001ED7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001EDE                 xor     edi, edi        ; domainname
.text:0000000000001EE0                 mov     edx, 5          ; category
.text:0000000000001EE5                 call    _dcgettext
.text:0000000000001EEA                 mov     rsi, r13        ; stream
.text:0000000000001EED                 mov     rdi, rax        ; s
.text:0000000000001EF0                 call    _fputs_unlocked
.text:0000000000001EF5                 jmp     loc_1DC9
.text:0000000000001EF5 ; } // starts at 1B70
.text:0000000000001EF5 usage           endp
.text:0000000000001EF5
.text:0000000000001EF5 ; ---------------------------------------------------------------------------
.text:0000000000001EFA                 align 20h
.text:0000000000001F00
.text:0000000000001F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F00
.text:0000000000001F00 ; Attributes: info_from_lumina
.text:0000000000001F00
.text:0000000000001F00 ; char *__fastcall areadlink_with_size(const char *file, size_t size)
.text:0000000000001F00                 public areadlink_with_size
.text:0000000000001F00 areadlink_with_size proc near           ; CODE XREF: main+27B↑p
.text:0000000000001F00                                         ; canonicalize_filename_mode+42C↓p
.text:0000000000001F00 ; __unwind {
.text:0000000000001F00                 push    r15
.text:0000000000001F02                 push    r14
.text:0000000000001F04                 mov     eax, 401h
.text:0000000000001F09                 push    r13
.text:0000000000001F0B                 push    r12
.text:0000000000001F0D                 mov     r13, rdi
.text:0000000000001F10                 push    rbp
.text:0000000000001F11                 push    rbx
.text:0000000000001F12                 lea     rbx, [rsi+1]
.text:0000000000001F16                 mov     r14, 3FFFFFFFFFFFFFFFh
.text:0000000000001F20                 mov     r15, 7FFFFFFFFFFFFFFEh
.text:0000000000001F2A                 sub     rsp, 8
.text:0000000000001F2E                 cmp     rsi, 401h
.text:0000000000001F35                 cmovnb  rbx, rax
.text:0000000000001F39                 nop     dword ptr [rax+00000000h]
.text:0000000000001F40
.text:0000000000001F40 loc_1F40:                               ; CODE XREF: areadlink_with_size+AF↓j
.text:0000000000001F40                 mov     rdi, rbx        ; size
.text:0000000000001F43                 call    _malloc
.text:0000000000001F48                 test    rax, rax
.text:0000000000001F4B                 mov     rbp, rax
.text:0000000000001F4E                 jz      short loc_1F8B
.text:0000000000001F50
.text:0000000000001F50 loc_1F50:                               ; CODE XREF: areadlink_with_size+89↓j
.text:0000000000001F50                 mov     rdx, rbx        ; len
.text:0000000000001F53                 mov     rsi, rax        ; buf
.text:0000000000001F56                 mov     rdi, r13        ; path
.text:0000000000001F59                 call    _readlink
.text:0000000000001F5E                 test    rax, rax
.text:0000000000001F61                 mov     r12, rax
.text:0000000000001F64                 js      short loc_1FB8
.text:0000000000001F66
.text:0000000000001F66 loc_1F66:                               ; CODE XREF: areadlink_with_size+C0↓j
.text:0000000000001F66                 cmp     rbx, r12
.text:0000000000001F69                 ja      short loc_1FD0
.text:0000000000001F6B                 mov     rdi, rbp        ; ptr
.text:0000000000001F6E                 call    _free
.text:0000000000001F73                 cmp     rbx, r14
.text:0000000000001F76                 ja      short loc_1FA0
.text:0000000000001F78                 add     rbx, rbx
.text:0000000000001F7B                 mov     rdi, rbx        ; size
.text:0000000000001F7E                 call    _malloc
.text:0000000000001F83                 test    rax, rax
.text:0000000000001F86                 mov     rbp, rax
.text:0000000000001F89                 jnz     short loc_1F50
.text:0000000000001F8B
.text:0000000000001F8B loc_1F8B:                               ; CODE XREF: areadlink_with_size+4E↑j
.text:0000000000001F8B                                         ; areadlink_with_size+CC↓j ...
.text:0000000000001F8B                 add     rsp, 8
.text:0000000000001F8F                 mov     rax, rbp
.text:0000000000001F92                 pop     rbx
.text:0000000000001F93                 pop     rbp
.text:0000000000001F94                 pop     r12
.text:0000000000001F96                 pop     r13
.text:0000000000001F98                 pop     r14
.text:0000000000001F9A                 pop     r15
.text:0000000000001F9C                 retn
.text:0000000000001F9C ; ---------------------------------------------------------------------------
.text:0000000000001F9D                 align 20h
.text:0000000000001FA0
.text:0000000000001FA0 loc_1FA0:                               ; CODE XREF: areadlink_with_size+76↑j
.text:0000000000001FA0                 cmp     rbx, r15
.text:0000000000001FA3                 ja      short loc_1FE0
.text:0000000000001FA5                 mov     rbx, 7FFFFFFFFFFFFFFFh
.text:0000000000001FAF                 jmp     short loc_1F40
.text:0000000000001FAF ; ---------------------------------------------------------------------------
.text:0000000000001FB1                 align 8
.text:0000000000001FB8
.text:0000000000001FB8 loc_1FB8:                               ; CODE XREF: areadlink_with_size+64↑j
.text:0000000000001FB8                 call    ___errno_location
.text:0000000000001FBD                 cmp     dword ptr [rax], 22h ; '"'
.text:0000000000001FC0                 jz      short loc_1F66
.text:0000000000001FC2                 mov     rdi, rbp        ; ptr
.text:0000000000001FC5                 xor     ebp, ebp
.text:0000000000001FC7                 call    _free
.text:0000000000001FCC                 jmp     short loc_1F8B
.text:0000000000001FCC ; ---------------------------------------------------------------------------
.text:0000000000001FCE                 align 10h
.text:0000000000001FD0
.text:0000000000001FD0 loc_1FD0:                               ; CODE XREF: areadlink_with_size+69↑j
.text:0000000000001FD0                 mov     byte ptr [rbp+r12+0], 0
.text:0000000000001FD6                 jmp     short loc_1F8B
.text:0000000000001FD6 ; ---------------------------------------------------------------------------
.text:0000000000001FD8                 align 20h
.text:0000000000001FE0
.text:0000000000001FE0 loc_1FE0:                               ; CODE XREF: areadlink_with_size+A3↑j
.text:0000000000001FE0                 call    ___errno_location
.text:0000000000001FE5                 xor     ebp, ebp
.text:0000000000001FE7                 mov     dword ptr [rax], 0Ch
.text:0000000000001FED                 jmp     short loc_1F8B
.text:0000000000001FED ; } // starts at 1F00
.text:0000000000001FED areadlink_with_size endp
.text:0000000000001FED
.text:0000000000001FED ; ---------------------------------------------------------------------------
.text:0000000000001FEF                 align 10h
.text:0000000000001FF0
.text:0000000000001FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001FF0
.text:0000000000001FF0 ; Attributes: info_from_lumina
.text:0000000000001FF0
.text:0000000000001FF0 ; char *__fastcall canonicalize_filename_mode(const char *name, canonicalize_mode_t_0 can_mode)
.text:0000000000001FF0                 public canonicalize_filename_mode
.text:0000000000001FF0 canonicalize_filename_mode proc near    ; CODE XREF: main+229↑p
.text:0000000000001FF0
.text:0000000000001FF0 var_114         = dword ptr -114h
.text:0000000000001FF0 stat_buf        = qword ptr -110h
.text:0000000000001FF0 var_108         = qword ptr -108h
.text:0000000000001FF0 var_FD          = byte ptr -0FDh
.text:0000000000001FF0 var_FC          = dword ptr -0FCh
.text:0000000000001FF0 n               = qword ptr -0F8h
.text:0000000000001FF0 ptr             = qword ptr -0F0h
.text:0000000000001FF0 var_E8          = qword ptr -0E8h
.text:0000000000001FF0 var_E0          = qword ptr -0E0h
.text:0000000000001FF0 var_D8          = byte ptr -0D8h
.text:0000000000001FF0 var_C0          = dword ptr -0C0h
.text:0000000000001FF0 var_A8          = qword ptr -0A8h
.text:0000000000001FF0 var_40          = qword ptr -40h
.text:0000000000001FF0
.text:0000000000001FF0 ; __unwind {
.text:0000000000001FF0                 push    r15
.text:0000000000001FF2                 push    r14
.text:0000000000001FF4                 push    r13
.text:0000000000001FF6                 push    r12
.text:0000000000001FF8                 push    rbp
.text:0000000000001FF9                 push    rbx
.text:0000000000001FFA                 sub     rsp, 0E8h
.text:0000000000002001                 mov     rax, fs:28h
.text:000000000000200A                 mov     [rsp+118h+var_40], rax
.text:0000000000002012                 xor     eax, eax
.text:0000000000002014                 mov     eax, esi
.text:0000000000002016                 and     eax, 4
.text:0000000000002019                 setnz   [rsp+118h+var_FD]
.text:000000000000201E                 and     esi, 3
.text:0000000000002021                 mov     [rsp+118h+var_FC], eax
.text:0000000000002025                 lea     eax, [rsi-1]
.text:0000000000002028                 mov     [rsp+118h+var_114], esi
.text:000000000000202C                 test    esi, eax
.text:000000000000202E                 jnz     loc_2580
.text:0000000000002034                 test    rdi, rdi
.text:0000000000002037                 mov     r14, rdi
.text:000000000000203A                 jz      loc_2580
.text:0000000000002040                 movzx   eax, byte ptr [rdi]
.text:0000000000002043                 test    al, al
.text:0000000000002045                 jz      loc_25C0
.text:000000000000204B                 cmp     al, 2Fh ; '/'
.text:000000000000204D                 jz      loc_2510
.text:0000000000002053                 call    xgetcwd
.text:0000000000002058                 test    rax, rax
.text:000000000000205B                 mov     rbp, rax
.text:000000000000205E                 jz      loc_2210
.text:0000000000002064                 mov     rdi, rax        ; s
.text:0000000000002067                 call    _strlen
.text:000000000000206C                 cmp     rax, 0FFFh
.text:0000000000002072                 mov     r15, rax
.text:0000000000002075                 jbe     loc_2530
.text:000000000000207B                 add     r15, rbp
.text:000000000000207E                 mov     rbx, r15
.text:0000000000002081
.text:0000000000002081 loc_2081:                               ; CODE XREF: canonicalize_filename_mode+53B↓j
.text:0000000000002081                                         ; canonicalize_filename_mode+55A↓j
.text:0000000000002081                 lea     rax, [rsp+118h+var_D8]
.text:0000000000002086                 mov     [rsp+118h+n], r14
.text:000000000000208B                 mov     [rsp+118h+var_108], 0
.text:0000000000002094                 mov     [rsp+118h+var_E8], 0
.text:000000000000209D                 mov     [rsp+118h+ptr], 0
.text:00000000000020A6                 mov     [rsp+118h+stat_buf], rax
.text:00000000000020AB
.text:00000000000020AB loc_20AB:                               ; CODE XREF: canonicalize_filename_mode+3D5↓j
.text:00000000000020AB                                         ; canonicalize_filename_mode+3F0↓j ...
.text:00000000000020AB                 movzx   eax, byte ptr [r14]
.text:00000000000020AF                 test    al, al
.text:00000000000020B1                 jz      loc_21BF
.text:00000000000020B7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000020C0
.text:00000000000020C0 loc_20C0:                               ; CODE XREF: canonicalize_filename_mode+1C9↓j
.text:00000000000020C0                 cmp     al, 2Fh ; '/'
.text:00000000000020C2                 jnz     short loc_20DC
.text:00000000000020C4                 nop     dword ptr [rax+00h]
.text:00000000000020C8
.text:00000000000020C8 loc_20C8:                               ; CODE XREF: canonicalize_filename_mode+E2↓j
.text:00000000000020C8                 add     r14, 1
.text:00000000000020CC                 movzx   eax, byte ptr [r14]
.text:00000000000020D0                 cmp     al, 2Fh ; '/'
.text:00000000000020D2                 jz      short loc_20C8
.text:00000000000020D4                 test    al, al
.text:00000000000020D6                 jz      loc_23A0
.text:00000000000020DC
.text:00000000000020DC loc_20DC:                               ; CODE XREF: canonicalize_filename_mode+D2↑j
.text:00000000000020DC                 mov     r13, r14
.text:00000000000020DF                 jmp     short loc_20ED
.text:00000000000020DF ; ---------------------------------------------------------------------------
.text:00000000000020E1                 align 8
.text:00000000000020E8
.text:00000000000020E8 loc_20E8:                               ; CODE XREF: canonicalize_filename_mode+108↓j
.text:00000000000020E8                 cmp     dl, 2Fh ; '/'
.text:00000000000020EB                 jz      short loc_20FA
.text:00000000000020ED
.text:00000000000020ED loc_20ED:                               ; CODE XREF: canonicalize_filename_mode+EF↑j
.text:00000000000020ED                 add     r13, 1
.text:00000000000020F1                 movzx   edx, byte ptr [r13+0]
.text:00000000000020F6                 test    dl, dl
.text:00000000000020F8                 jnz     short loc_20E8
.text:00000000000020FA
.text:00000000000020FA loc_20FA:                               ; CODE XREF: canonicalize_filename_mode+FB↑j
.text:00000000000020FA                                         ; canonicalize_filename_mode+3B3↓j
.text:00000000000020FA                 cmp     r13, r14
.text:00000000000020FD                 jz      loc_21BF
.text:0000000000002103                 mov     r12, r13
.text:0000000000002106                 sub     r12, r14
.text:0000000000002109                 cmp     r12, 1
.text:000000000000210D                 jz      loc_22E0
.text:0000000000002113                 cmp     r12, 2
.text:0000000000002117                 jnz     short loc_2121
.text:0000000000002119                 cmp     al, 2Eh ; '.'
.text:000000000000211B                 jz      loc_23B0
.text:0000000000002121
.text:0000000000002121 loc_2121:                               ; CODE XREF: canonicalize_filename_mode+127↑j
.text:0000000000002121                                         ; canonicalize_filename_mode+2F2↓j ...
.text:0000000000002121                 cmp     byte ptr [r15-1], 2Fh ; '/'
.text:0000000000002126                 jz      short loc_2130
.text:0000000000002128                 mov     byte ptr [r15], 2Fh ; '/'
.text:000000000000212C                 add     r15, 1
.text:0000000000002130
.text:0000000000002130 loc_2130:                               ; CODE XREF: canonicalize_filename_mode+136↑j
.text:0000000000002130                 lea     rax, [r15+r12]
.text:0000000000002134                 cmp     rbx, rax
.text:0000000000002137                 ja      short loc_216A
.text:0000000000002139                 sub     rbx, rbp
.text:000000000000213C                 sub     r15, rbp
.text:000000000000213F                 mov     rdi, rbp
.text:0000000000002142                 lea     rax, [r12+rbx+1]
.text:0000000000002147                 add     rbx, 1000h
.text:000000000000214E                 cmp     r12, 1000h
.text:0000000000002155                 cmovge  rbx, rax
.text:0000000000002159                 mov     rsi, rbx
.text:000000000000215C                 call    xrealloc
.text:0000000000002161                 mov     rbp, rax
.text:0000000000002164                 add     rbx, rax
.text:0000000000002167                 add     r15, rax
.text:000000000000216A
.text:000000000000216A loc_216A:                               ; CODE XREF: canonicalize_filename_mode+147↑j
.text:000000000000216A                 mov     rdi, r15        ; dest
.text:000000000000216D                 mov     rdx, r12        ; n
.text:0000000000002170                 mov     rsi, r14        ; src
.text:0000000000002173                 call    _memcpy
.text:0000000000002178                 cmp     [rsp+118h+var_114], 2
.text:000000000000217D                 lea     r15, [r15+r12]
.text:0000000000002181                 mov     byte ptr [r15], 0
.text:0000000000002185                 jnz     loc_2240
.text:000000000000218B                 cmp     [rsp+118h+var_FD], 0
.text:0000000000002190                 jz      loc_2240
.text:0000000000002196
.text:0000000000002196 loc_2196:                               ; CODE XREF: canonicalize_filename_mode+290↓j
.text:0000000000002196                 mov     [rsp+118h+var_C0], 0
.text:000000000000219E
.text:000000000000219E loc_219E:                               ; CODE XREF: canonicalize_filename_mode+31B↓j
.text:000000000000219E                 cmp     byte ptr [r13+0], 0
.text:00000000000021A3                 jz      short loc_21B0
.text:00000000000021A5                 cmp     [rsp+118h+var_114], 2
.text:00000000000021AA                 jnz     loc_2607
.text:00000000000021B0
.text:00000000000021B0 loc_21B0:                               ; CODE XREF: canonicalize_filename_mode+1B3↑j
.text:00000000000021B0                                         ; canonicalize_filename_mode+2B8↓j ...
.text:00000000000021B0                 mov     r14, r13
.text:00000000000021B3                 movzx   eax, byte ptr [r14]
.text:00000000000021B7                 test    al, al
.text:00000000000021B9                 jnz     loc_20C0
.text:00000000000021BF
.text:00000000000021BF loc_21BF:                               ; CODE XREF: canonicalize_filename_mode+C1↑j
.text:00000000000021BF                                         ; canonicalize_filename_mode+10D↑j
.text:00000000000021BF                 lea     rax, [rbp+1]
.text:00000000000021C3                 cmp     r15, rax
.text:00000000000021C6                 jbe     short loc_21D3
.text:00000000000021C8                 cmp     byte ptr [r15-1], 2Fh ; '/'
.text:00000000000021CD                 jnz     short loc_21D3
.text:00000000000021CF                 sub     r15, 1
.text:00000000000021D3
.text:00000000000021D3 loc_21D3:                               ; CODE XREF: canonicalize_filename_mode+1D6↑j
.text:00000000000021D3                                         ; canonicalize_filename_mode+1DD↑j
.text:00000000000021D3                 lea     rax, [r15+1]
.text:00000000000021D7                 mov     byte ptr [r15], 0
.text:00000000000021DB                 cmp     rbx, rax
.text:00000000000021DE                 jz      short loc_21F2
.text:00000000000021E0                 sub     r15, rbp
.text:00000000000021E3                 mov     rdi, rbp
.text:00000000000021E6                 lea     rsi, [r15+1]
.text:00000000000021EA                 call    xrealloc
.text:00000000000021EF                 mov     rbp, rax
.text:00000000000021F2
.text:00000000000021F2 loc_21F2:                               ; CODE XREF: canonicalize_filename_mode+1EE↑j
.text:00000000000021F2                 mov     rdi, [rsp+118h+ptr] ; ptr
.text:00000000000021F7                 call    _free
.text:00000000000021FC                 mov     rax, [rsp+118h+var_108]
.text:0000000000002201                 test    rax, rax
.text:0000000000002204                 jz      short loc_2210
.text:0000000000002206                 mov     rdi, rax        ; ptr
.text:0000000000002209                 call    hash_free
.text:000000000000220E                 xchg    ax, ax
.text:0000000000002210
.text:0000000000002210 loc_2210:                               ; CODE XREF: canonicalize_filename_mode+6E↑j
.text:0000000000002210                                         ; canonicalize_filename_mode+214↑j ...
.text:0000000000002210                 mov     rcx, [rsp+118h+var_40]
.text:0000000000002218                 xor     rcx, fs:28h
.text:0000000000002221                 mov     rax, rbp
.text:0000000000002224                 jnz     loc_2621
.text:000000000000222A                 add     rsp, 0E8h
.text:0000000000002231                 pop     rbx
.text:0000000000002232                 pop     rbp
.text:0000000000002233                 pop     r12
.text:0000000000002235                 pop     r13
.text:0000000000002237                 pop     r14
.text:0000000000002239                 pop     r15
.text:000000000000223B                 retn
.text:000000000000223B ; ---------------------------------------------------------------------------
.text:000000000000223C                 align 20h
.text:0000000000002240
.text:0000000000002240 loc_2240:                               ; CODE XREF: canonicalize_filename_mode+195↑j
.text:0000000000002240                                         ; canonicalize_filename_mode+1A0↑j
.text:0000000000002240                 mov     eax, [rsp+118h+var_FC]
.text:0000000000002244                 mov     rdx, [rsp+118h+stat_buf] ; stat_buf
.text:0000000000002249                 mov     rsi, rbp        ; filename
.text:000000000000224C                 mov     edi, 1          ; ver
.text:0000000000002251                 test    eax, eax
.text:0000000000002253                 jz      loc_2310
.text:0000000000002259                 call    ___xstat
.text:000000000000225E                 test    eax, eax
.text:0000000000002260                 setnz   al
.text:0000000000002263
.text:0000000000002263 loc_2263:                               ; CODE XREF: canonicalize_filename_mode+32A↓j
.text:0000000000002263                 test    al, al
.text:0000000000002265                 jz      loc_22F0
.text:000000000000226B                 call    ___errno_location
.text:0000000000002270                 mov     r14, rax
.text:0000000000002273                 mov     edx, [rax]
.text:0000000000002275                 mov     eax, [rsp+118h+var_114]
.text:0000000000002279                 test    eax, eax
.text:000000000000227B                 jz      short loc_22AE
.text:000000000000227D                 cmp     eax, 1
.text:0000000000002280                 jnz     loc_2196
.text:0000000000002286                 lea     rsi, aLibs+6    ; accept
.text:000000000000228D                 mov     rdi, r13        ; s
.text:0000000000002290                 mov     dword ptr [rsp+118h+var_E0], edx
.text:0000000000002294                 call    _strspn
.text:0000000000002299                 cmp     byte ptr [r13+rax+0], 0
.text:000000000000229F                 mov     edx, dword ptr [rsp+118h+var_E0]
.text:00000000000022A3                 jnz     short loc_22AE
.text:00000000000022A5                 cmp     edx, 2
.text:00000000000022A8                 jz      loc_21B0
.text:00000000000022AE
.text:00000000000022AE loc_22AE:                               ; CODE XREF: canonicalize_filename_mode+28B↑j
.text:00000000000022AE                                         ; canonicalize_filename_mode+2B3↑j
.text:00000000000022AE                 mov     r12, r14
.text:00000000000022B1
.text:00000000000022B1 loc_22B1:                               ; CODE XREF: canonicalize_filename_mode+624↓j
.text:00000000000022B1                 mov     rdi, [rsp+118h+ptr] ; ptr
.text:00000000000022B6                 mov     [rsp+118h+var_114], edx
.text:00000000000022BA                 call    _free
.text:00000000000022BF                 mov     rdi, rbp        ; ptr
.text:00000000000022C2                 call    _free
.text:00000000000022C7                 cmp     [rsp+118h+var_108], 0
.text:00000000000022CD                 mov     edx, [rsp+118h+var_114]
.text:00000000000022D1                 jz      loc_238C
.text:00000000000022D7                 jmp     loc_237A
.text:00000000000022D7 ; ---------------------------------------------------------------------------
.text:00000000000022DC                 align 20h
.text:00000000000022E0
.text:00000000000022E0 loc_22E0:                               ; CODE XREF: canonicalize_filename_mode+11D↑j
.text:00000000000022E0                 cmp     al, 2Eh ; '.'
.text:00000000000022E2                 jnz     loc_2121
.text:00000000000022E8                 jmp     loc_21B0
.text:00000000000022E8 ; ---------------------------------------------------------------------------
.text:00000000000022ED                 align 10h
.text:00000000000022F0
.text:00000000000022F0 loc_22F0:                               ; CODE XREF: canonicalize_filename_mode+275↑j
.text:00000000000022F0                 mov     eax, [rsp+118h+var_C0]
.text:00000000000022F4                 and     eax, 0F000h
.text:00000000000022F9                 cmp     eax, 0A000h
.text:00000000000022FE                 jz      short loc_2320
.text:0000000000002300                 cmp     eax, 4000h
.text:0000000000002305                 jz      loc_21B0
.text:000000000000230B                 jmp     loc_219E
.text:0000000000002310 ; ---------------------------------------------------------------------------
.text:0000000000002310
.text:0000000000002310 loc_2310:                               ; CODE XREF: canonicalize_filename_mode+263↑j
.text:0000000000002310                 call    ___lxstat
.text:0000000000002315                 test    eax, eax
.text:0000000000002317                 setnz   al
.text:000000000000231A                 jmp     loc_2263
.text:000000000000231A ; ---------------------------------------------------------------------------
.text:000000000000231F                 align 20h
.text:0000000000002320
.text:0000000000002320 loc_2320:                               ; CODE XREF: canonicalize_filename_mode+30E↑j
.text:0000000000002320                 cmp     [rsp+118h+var_108], 0
.text:0000000000002326                 jz      loc_24D6
.text:000000000000232C
.text:000000000000232C loc_232C:                               ; CODE XREF: canonicalize_filename_mode+50F↓j
.text:000000000000232C                 mov     rdx, [rsp+118h+stat_buf]
.text:0000000000002331                 mov     rsi, [rsp+118h+n]
.text:0000000000002336                 mov     rdi, [rsp+118h+var_108]
.text:000000000000233B                 call    seen_file
.text:0000000000002340                 test    al, al
.text:0000000000002342                 jz      loc_2400
.text:0000000000002348                 cmp     [rsp+118h+var_114], 2
.text:000000000000234D                 jz      loc_21B0
.text:0000000000002353                 call    ___errno_location
.text:0000000000002358                 mov     edx, 28h ; '('
.text:000000000000235D                 mov     r12, rax
.text:0000000000002360
.text:0000000000002360 loc_2360:                               ; CODE XREF: canonicalize_filename_mode+5BF↓j
.text:0000000000002360                 mov     rdi, [rsp+118h+ptr] ; ptr
.text:0000000000002365                 mov     [rsp+118h+var_114], edx
.text:0000000000002369                 call    _free
.text:000000000000236E                 mov     rdi, rbp        ; ptr
.text:0000000000002371                 call    _free
.text:0000000000002376                 mov     edx, [rsp+118h+var_114]
.text:000000000000237A
.text:000000000000237A loc_237A:                               ; CODE XREF: canonicalize_filename_mode+2E7↑j
.text:000000000000237A                 mov     rdi, [rsp+118h+var_108] ; ptr
.text:000000000000237F                 mov     [rsp+118h+var_114], edx
.text:0000000000002383                 call    hash_free
.text:0000000000002388                 mov     edx, [rsp+118h+var_114]
.text:000000000000238C
.text:000000000000238C loc_238C:                               ; CODE XREF: canonicalize_filename_mode+2E1↑j
.text:000000000000238C                 mov     [r12], edx
.text:0000000000002390                 xor     ebp, ebp
.text:0000000000002392                 jmp     loc_2210
.text:0000000000002392 ; ---------------------------------------------------------------------------
.text:0000000000002397                 align 20h
.text:00000000000023A0
.text:00000000000023A0 loc_23A0:                               ; CODE XREF: canonicalize_filename_mode+E6↑j
.text:00000000000023A0                 mov     r13, r14
.text:00000000000023A3                 jmp     loc_20FA
.text:00000000000023A3 ; ---------------------------------------------------------------------------
.text:00000000000023A8                 align 10h
.text:00000000000023B0
.text:00000000000023B0 loc_23B0:                               ; CODE XREF: canonicalize_filename_mode+12B↑j
.text:00000000000023B0                 cmp     byte ptr [r14+1], 2Eh ; '.'
.text:00000000000023B5                 jnz     loc_2121
.text:00000000000023BB                 lea     rax, [rbp+1]
.text:00000000000023BF                 mov     r14, r13
.text:00000000000023C2                 cmp     r15, rax
.text:00000000000023C5                 jbe     loc_20AB
.text:00000000000023CB                 lea     rax, [r15-1]
.text:00000000000023CF                 cmp     rbp, rax
.text:00000000000023D2                 jnb     loc_2619
.text:00000000000023D8                 cmp     byte ptr [r15-2], 2Fh ; '/'
.text:00000000000023DD                 mov     r15, rax
.text:00000000000023E0                 jz      loc_20AB
.text:00000000000023E6
.text:00000000000023E6 loc_23E6:                               ; CODE XREF: canonicalize_filename_mode+40E↓j
.text:00000000000023E6                 sub     r15, 1
.text:00000000000023EA                 cmp     rbp, r15
.text:00000000000023ED                 jz      loc_21B0
.text:00000000000023F3                 cmp     byte ptr [r15-1], 2Fh ; '/'
.text:00000000000023F8                 jz      loc_21B0
.text:00000000000023FE                 jmp     short loc_23E6
.text:0000000000002400 ; ---------------------------------------------------------------------------
.text:0000000000002400
.text:0000000000002400 loc_2400:                               ; CODE XREF: canonicalize_filename_mode+352↑j
.text:0000000000002400                 mov     rdx, [rsp+118h+stat_buf]
.text:0000000000002405                 mov     rsi, [rsp+118h+n]
.text:000000000000240A                 mov     rdi, [rsp+118h+var_108]
.text:000000000000240F                 call    record_file
.text:0000000000002414                 mov     rsi, [rsp+118h+var_A8]
.text:0000000000002419                 mov     rdi, rbp        ; path
.text:000000000000241C                 call    areadlink_with_size
.text:0000000000002421                 test    rax, rax
.text:0000000000002424                 mov     r14, rax
.text:0000000000002427                 jz      loc_2592
.text:000000000000242D                 mov     rdi, rax        ; s
.text:0000000000002430                 call    _strlen
.text:0000000000002435                 mov     rdi, r13        ; s
.text:0000000000002438                 mov     r12, rax
.text:000000000000243B                 mov     [rsp+118h+n], rax
.text:0000000000002440                 call    _strlen
.text:0000000000002445                 cmp     [rsp+118h+var_E8], 0
.text:000000000000244B                 mov     rdx, rax
.text:000000000000244E                 lea     rcx, [r12+rdx+1]
.text:0000000000002453                 jz      loc_254F
.text:0000000000002459                 cmp     [rsp+118h+var_E8], rcx
.text:000000000000245E                 jnb     short loc_2481
.text:0000000000002460                 mov     rdi, [rsp+118h+ptr]
.text:0000000000002465                 mov     rsi, rcx
.text:0000000000002468                 mov     [rsp+118h+var_E0], rdx
.text:000000000000246D                 mov     [rsp+118h+var_E8], rcx
.text:0000000000002472                 call    xrealloc
.text:0000000000002477                 mov     rdx, [rsp+118h+var_E0]
.text:000000000000247C                 mov     [rsp+118h+ptr], rax
.text:0000000000002481
.text:0000000000002481 loc_2481:                               ; CODE XREF: canonicalize_filename_mode+46E↑j
.text:0000000000002481                                         ; canonicalize_filename_mode+58B↓j
.text:0000000000002481                 mov     r12, [rsp+118h+ptr]
.text:0000000000002486                 mov     rdi, [rsp+118h+n]
.text:000000000000248B                 add     rdx, 1          ; n
.text:000000000000248F                 mov     rsi, r13        ; src
.text:0000000000002492                 add     rdi, r12        ; dest
.text:0000000000002495                 mov     r13, r12
.text:0000000000002498                 call    _memmove
.text:000000000000249D                 mov     rdx, [rsp+118h+n] ; n
.text:00000000000024A2                 mov     rsi, r14        ; src
.text:00000000000024A5                 mov     rdi, r12        ; dest
.text:00000000000024A8                 call    _memcpy
.text:00000000000024AD                 cmp     byte ptr [r14], 2Fh ; '/'
.text:00000000000024B1                 mov     [rsp+118h+n], r12
.text:00000000000024B6                 lea     rax, [rbp+1]
.text:00000000000024BA                 jz      loc_25B4
.text:00000000000024C0                 cmp     r15, rax
.text:00000000000024C3                 ja      loc_25D2
.text:00000000000024C9
.text:00000000000024C9 loc_24C9:                               ; CODE XREF: canonicalize_filename_mode+5CB↓j
.text:00000000000024C9                                         ; canonicalize_filename_mode+5F5↓j ...
.text:00000000000024C9                 mov     rdi, r14        ; ptr
.text:00000000000024CC                 call    _free
.text:00000000000024D1                 jmp     loc_21B0
.text:00000000000024D6 ; ---------------------------------------------------------------------------
.text:00000000000024D6
.text:00000000000024D6 loc_24D6:                               ; CODE XREF: canonicalize_filename_mode+336↑j
.text:00000000000024D6                 lea     r8, triple_free
.text:00000000000024DD                 lea     rcx, triple_compare_ino_str
.text:00000000000024E4                 xor     esi, esi
.text:00000000000024E6                 lea     rdx, triple_hash
.text:00000000000024ED                 mov     edi, 7
.text:00000000000024F2                 call    hash_initialize
.text:00000000000024F7                 test    rax, rax
.text:00000000000024FA                 mov     [rsp+118h+var_108], rax
.text:00000000000024FF                 jnz     loc_232C
.text:0000000000002505                 call    xalloc_die
.text:0000000000002505 ; ---------------------------------------------------------------------------
.text:000000000000250A                 align 10h
.text:0000000000002510
.text:0000000000002510 loc_2510:                               ; CODE XREF: canonicalize_filename_mode+5D↑j
.text:0000000000002510                 mov     edi, 1000h
.text:0000000000002515                 call    xmalloc
.text:000000000000251A                 mov     rbp, rax
.text:000000000000251D                 lea     rbx, [rax+1000h]
.text:0000000000002524                 lea     r15, [rax+1]
.text:0000000000002528                 mov     byte ptr [rax], 2Fh ; '/'
.text:000000000000252B                 jmp     loc_2081
.text:0000000000002530 ; ---------------------------------------------------------------------------
.text:0000000000002530
.text:0000000000002530 loc_2530:                               ; CODE XREF: canonicalize_filename_mode+85↑j
.text:0000000000002530                 mov     rdi, rbp
.text:0000000000002533                 mov     esi, 1000h
.text:0000000000002538                 call    xrealloc
.text:000000000000253D                 mov     rbp, rax
.text:0000000000002540                 add     r15, rax
.text:0000000000002543                 lea     rbx, [rax+1000h]
.text:000000000000254A                 jmp     loc_2081
.text:000000000000254F ; ---------------------------------------------------------------------------
.text:000000000000254F
.text:000000000000254F loc_254F:                               ; CODE XREF: canonicalize_filename_mode+463↑j
.text:000000000000254F                 cmp     rcx, 1000h
.text:0000000000002556                 mov     eax, 1000h
.text:000000000000255B                 mov     [rsp+118h+var_E0], rdx
.text:0000000000002560                 cmovnb  rax, rcx
.text:0000000000002564                 mov     rdi, rax
.text:0000000000002567                 mov     [rsp+118h+var_E8], rax
.text:000000000000256C                 call    xmalloc
.text:0000000000002571                 mov     rdx, [rsp+118h+var_E0]
.text:0000000000002576                 mov     [rsp+118h+ptr], rax
.text:000000000000257B                 jmp     loc_2481
.text:0000000000002580 ; ---------------------------------------------------------------------------
.text:0000000000002580
.text:0000000000002580 loc_2580:                               ; CODE XREF: canonicalize_filename_mode+3E↑j
.text:0000000000002580                                         ; canonicalize_filename_mode+4A↑j
.text:0000000000002580                 call    ___errno_location
.text:0000000000002585                 xor     ebp, ebp
.text:0000000000002587                 mov     dword ptr [rax], 16h
.text:000000000000258D                 jmp     loc_2210
.text:0000000000002592 ; ---------------------------------------------------------------------------
.text:0000000000002592
.text:0000000000002592 loc_2592:                               ; CODE XREF: canonicalize_filename_mode+437↑j
.text:0000000000002592                 call    ___errno_location
.text:0000000000002597                 cmp     [rsp+118h+var_114], 2
.text:000000000000259C                 mov     r14, rax
.text:000000000000259F                 mov     edx, [rax]
.text:00000000000025A1                 jnz     short loc_25AC
.text:00000000000025A3                 cmp     edx, 0Ch
.text:00000000000025A6                 jnz     loc_21B0
.text:00000000000025AC
.text:00000000000025AC loc_25AC:                               ; CODE XREF: canonicalize_filename_mode+5B1↑j
.text:00000000000025AC                 mov     r12, r14
.text:00000000000025AF                 jmp     loc_2360
.text:00000000000025B4 ; ---------------------------------------------------------------------------
.text:00000000000025B4
.text:00000000000025B4 loc_25B4:                               ; CODE XREF: canonicalize_filename_mode+4CA↑j
.text:00000000000025B4                 mov     byte ptr [rbp+0], 2Fh ; '/'
.text:00000000000025B8                 mov     r15, rax
.text:00000000000025BB                 jmp     loc_24C9
.text:00000000000025C0 ; ---------------------------------------------------------------------------
.text:00000000000025C0
.text:00000000000025C0 loc_25C0:                               ; CODE XREF: canonicalize_filename_mode+55↑j
.text:00000000000025C0                 call    ___errno_location
.text:00000000000025C5                 xor     ebp, ebp
.text:00000000000025C7                 mov     dword ptr [rax], 2
.text:00000000000025CD                 jmp     loc_2210
.text:00000000000025D2 ; ---------------------------------------------------------------------------
.text:00000000000025D2
.text:00000000000025D2 loc_25D2:                               ; CODE XREF: canonicalize_filename_mode+4D3↑j
.text:00000000000025D2                 lea     rax, [r15-1]
.text:00000000000025D6                 cmp     rbp, rax
.text:00000000000025D9                 jnb     short loc_25E2
.text:00000000000025DB                 cmp     byte ptr [r15-2], 2Fh ; '/'
.text:00000000000025E0                 jnz     short loc_25ED
.text:00000000000025E2
.text:00000000000025E2 loc_25E2:                               ; CODE XREF: canonicalize_filename_mode+5E9↑j
.text:00000000000025E2                 mov     r15, rax
.text:00000000000025E5                 jmp     loc_24C9
.text:00000000000025EA ; ---------------------------------------------------------------------------
.text:00000000000025EA
.text:00000000000025EA loc_25EA:                               ; CODE XREF: canonicalize_filename_mode+615↓j
.text:00000000000025EA                 mov     rax, r15
.text:00000000000025ED
.text:00000000000025ED loc_25ED:                               ; CODE XREF: canonicalize_filename_mode+5F0↑j
.text:00000000000025ED                 lea     r15, [rax-1]
.text:00000000000025F1                 cmp     rbp, r15
.text:00000000000025F4                 jz      loc_24C9
.text:00000000000025FA                 cmp     byte ptr [r15-1], 2Fh ; '/'
.text:00000000000025FF                 jz      loc_24C9
.text:0000000000002605                 jmp     short loc_25EA
.text:0000000000002607 ; ---------------------------------------------------------------------------
.text:0000000000002607
.text:0000000000002607 loc_2607:                               ; CODE XREF: canonicalize_filename_mode+1BA↑j
.text:0000000000002607                 call    ___errno_location
.text:000000000000260C                 mov     edx, 14h
.text:0000000000002611                 mov     r12, rax
.text:0000000000002614                 jmp     loc_22B1
.text:0000000000002619 ; ---------------------------------------------------------------------------
.text:0000000000002619
.text:0000000000002619 loc_2619:                               ; CODE XREF: canonicalize_filename_mode+3E2↑j
.text:0000000000002619                 mov     r15, rax
.text:000000000000261C                 jmp     loc_20AB
.text:0000000000002621 ; ---------------------------------------------------------------------------
.text:0000000000002621
.text:0000000000002621 loc_2621:                               ; CODE XREF: canonicalize_filename_mode+234↑j
.text:0000000000002621                 call    ___stack_chk_fail
.text:0000000000002621 ; } // starts at 1FF0
.text:0000000000002621 canonicalize_filename_mode endp
.text:0000000000002621
.text:0000000000002621 ; ---------------------------------------------------------------------------
.text:0000000000002626                 align 10h
.text:0000000000002630
.text:0000000000002630 ; =============== S U B R O U T I N E =======================================
.text:0000000000002630
.text:0000000000002630
.text:0000000000002630                 public close_stdout_set_file_name
.text:0000000000002630 close_stdout_set_file_name proc near
.text:0000000000002630 ; __unwind {
.text:0000000000002630                 mov     cs:file_name, rdi
.text:0000000000002637                 retn
.text:0000000000002637 ; } // starts at 2630
.text:0000000000002637 close_stdout_set_file_name endp
.text:0000000000002637
.text:0000000000002637 ; ---------------------------------------------------------------------------
.text:0000000000002638                 align 20h
.text:0000000000002640
.text:0000000000002640 ; =============== S U B R O U T I N E =======================================
.text:0000000000002640
.text:0000000000002640
.text:0000000000002640                 public close_stdout_set_ignore_EPIPE
.text:0000000000002640 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002640 ; __unwind {
.text:0000000000002640                 mov     cs:ignore_EPIPE, dil
.text:0000000000002647                 retn
.text:0000000000002647 ; } // starts at 2640
.text:0000000000002647 close_stdout_set_ignore_EPIPE endp
.text:0000000000002647
.text:0000000000002647 ; ---------------------------------------------------------------------------
.text:0000000000002648                 align 10h
.text:0000000000002650
.text:0000000000002650 ; =============== S U B R O U T I N E =======================================
.text:0000000000002650
.text:0000000000002650 ; Attributes: info_from_lumina
.text:0000000000002650
.text:0000000000002650 ; void __cdecl close_stdout()
.text:0000000000002650                 public close_stdout
.text:0000000000002650 close_stdout    proc near               ; DATA XREF: main+54↑o
.text:0000000000002650 ; __unwind {
.text:0000000000002650                 push    rbp
.text:0000000000002651                 push    rbx
.text:0000000000002652                 sub     rsp, 8
.text:0000000000002656                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000265D                 call    close_stream
.text:0000000000002662                 test    eax, eax
.text:0000000000002664                 jz      short loc_267C
.text:0000000000002666                 call    ___errno_location
.text:000000000000266B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002672                 mov     rbx, rax
.text:0000000000002675                 jz      short loc_2693
.text:0000000000002677                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000267A                 jnz     short loc_2693
.text:000000000000267C
.text:000000000000267C loc_267C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000267C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002683                 call    close_stream
.text:0000000000002688                 test    eax, eax
.text:000000000000268A                 jnz     short loc_26D2
.text:000000000000268C                 add     rsp, 8
.text:0000000000002690                 pop     rbx
.text:0000000000002691                 pop     rbp
.text:0000000000002692                 retn
.text:0000000000002693 ; ---------------------------------------------------------------------------
.text:0000000000002693
.text:0000000000002693 loc_2693:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000002693                                         ; close_stdout+2A↑j
.text:0000000000002693                 lea     rsi, aWriteError ; "write error"
.text:000000000000269A                 xor     edi, edi        ; domainname
.text:000000000000269C                 mov     edx, 5          ; category
.text:00000000000026A1                 call    _dcgettext
.text:00000000000026A6                 mov     rdi, cs:file_name
.text:00000000000026AD                 mov     rbp, rax
.text:00000000000026B0                 test    rdi, rdi
.text:00000000000026B3                 jz      short loc_26DD
.text:00000000000026B5                 call    quotearg_colon
.text:00000000000026BA                 mov     esi, [rbx]      ; errnum
.text:00000000000026BC                 lea     rdx, format     ; "%s: %s"
.text:00000000000026C3                 mov     rcx, rax
.text:00000000000026C6                 mov     r8, rbp
.text:00000000000026C9                 xor     edi, edi        ; status
.text:00000000000026CB                 xor     eax, eax
.text:00000000000026CD                 call    _error
.text:00000000000026D2
.text:00000000000026D2 loc_26D2:                               ; CODE XREF: close_stdout+3A↑j
.text:00000000000026D2                                         ; close_stdout+A2↓j
.text:00000000000026D2                 mov     edi, cs:exit_failure ; status
.text:00000000000026D8                 call    __exit
.text:00000000000026DD ; ---------------------------------------------------------------------------
.text:00000000000026DD
.text:00000000000026DD loc_26DD:                               ; CODE XREF: close_stdout+63↑j
.text:00000000000026DD                 mov     esi, [rbx]      ; errnum
.text:00000000000026DF                 lea     rdx, format+4   ; format
.text:00000000000026E6                 mov     rcx, rax
.text:00000000000026E9                 xor     edi, edi        ; status
.text:00000000000026EB                 xor     eax, eax
.text:00000000000026ED                 call    _error
.text:00000000000026F2                 jmp     short loc_26D2
.text:00000000000026F2 ; } // starts at 2650
.text:00000000000026F2 close_stdout    endp
.text:00000000000026F2
.text:00000000000026F2 ; ---------------------------------------------------------------------------
.text:00000000000026F4                 align 20h
.text:0000000000002700
.text:0000000000002700 ; =============== S U B R O U T I N E =======================================
.text:0000000000002700
.text:0000000000002700 ; Attributes: info_from_lumina
.text:0000000000002700
.text:0000000000002700 ; void __fastcall record_file(Hash_table *ht, const char *file, const stat *stats)
.text:0000000000002700                 public record_file
.text:0000000000002700 record_file     proc near               ; CODE XREF: canonicalize_filename_mode+41F↑p
.text:0000000000002700 ; __unwind {
.text:0000000000002700                 test    rdi, rdi
.text:0000000000002703                 jz      short locret_2780
.text:0000000000002705                 push    r13
.text:0000000000002707                 push    r12
.text:0000000000002709                 mov     r13, rdi
.text:000000000000270C                 push    rbp
.text:000000000000270D                 push    rbx
.text:000000000000270E                 mov     r12, rsi
.text:0000000000002711                 mov     edi, 18h
.text:0000000000002716                 mov     rbp, rdx
.text:0000000000002719                 sub     rsp, 8
.text:000000000000271D                 call    xmalloc
.text:0000000000002722                 mov     rdi, r12        ; src
.text:0000000000002725                 mov     rbx, rax
.text:0000000000002728                 call    xstrdup
.text:000000000000272D                 mov     [rbx], rax
.text:0000000000002730                 mov     rax, [rbp+8]
.text:0000000000002734                 mov     rsi, rbx
.text:0000000000002737                 mov     rdi, r13
.text:000000000000273A                 mov     [rbx+8], rax
.text:000000000000273E                 mov     rax, [rbp+0]
.text:0000000000002742                 mov     [rbx+10h], rax
.text:0000000000002746                 call    hash_insert
.text:000000000000274B                 test    rax, rax
.text:000000000000274E                 jz      short loc_2782
.text:0000000000002750                 cmp     rbx, rax
.text:0000000000002753                 jz      short loc_2770
.text:0000000000002755                 add     rsp, 8
.text:0000000000002759                 mov     rdi, rbx        ; ptr
.text:000000000000275C                 pop     rbx
.text:000000000000275D                 pop     rbp
.text:000000000000275E                 pop     r12
.text:0000000000002760                 pop     r13
.text:0000000000002762                 jmp     triple_free
.text:0000000000002762 ; ---------------------------------------------------------------------------
.text:0000000000002767                 align 10h
.text:0000000000002770
.text:0000000000002770 loc_2770:                               ; CODE XREF: record_file+53↑j
.text:0000000000002770                 add     rsp, 8
.text:0000000000002774                 pop     rbx
.text:0000000000002775                 pop     rbp
.text:0000000000002776                 pop     r12
.text:0000000000002778                 pop     r13
.text:000000000000277A                 retn
.text:000000000000277A ; ---------------------------------------------------------------------------
.text:000000000000277B                 align 20h
.text:0000000000002780
.text:0000000000002780 locret_2780:                            ; CODE XREF: record_file+3↑j
.text:0000000000002780                 rep retn
.text:0000000000002782 ; ---------------------------------------------------------------------------
.text:0000000000002782
.text:0000000000002782 loc_2782:                               ; CODE XREF: record_file+4E↑j
.text:0000000000002782                 call    xalloc_die
.text:0000000000002782 ; } // starts at 2700
.text:0000000000002782 record_file     endp
.text:0000000000002782
.text:0000000000002782 ; ---------------------------------------------------------------------------
.text:0000000000002787                 align 10h
.text:0000000000002790
.text:0000000000002790 ; =============== S U B R O U T I N E =======================================
.text:0000000000002790
.text:0000000000002790 ; Attributes: info_from_lumina
.text:0000000000002790
.text:0000000000002790 ; _Bool __fastcall seen_file(const Hash_table *ht, const char *file, const stat *stats)
.text:0000000000002790                 public seen_file
.text:0000000000002790 seen_file       proc near               ; CODE XREF: canonicalize_filename_mode+34B↑p
.text:0000000000002790
.text:0000000000002790 var_28          = qword ptr -28h
.text:0000000000002790 var_20          = qword ptr -20h
.text:0000000000002790 var_18          = qword ptr -18h
.text:0000000000002790 var_10          = qword ptr -10h
.text:0000000000002790
.text:0000000000002790 ; __unwind {
.text:0000000000002790                 sub     rsp, 28h
.text:0000000000002794                 mov     rax, fs:28h
.text:000000000000279D                 mov     [rsp+28h+var_10], rax
.text:00000000000027A2                 xor     eax, eax
.text:00000000000027A4                 test    rdi, rdi
.text:00000000000027A7                 jz      short loc_27CC
.text:00000000000027A9                 mov     rax, [rdx+8]
.text:00000000000027AD                 mov     [rsp+28h+var_28], rsi
.text:00000000000027B1                 mov     rsi, rsp
.text:00000000000027B4                 mov     [rsp+28h+var_20], rax
.text:00000000000027B9                 mov     rax, [rdx]
.text:00000000000027BC                 mov     [rsp+28h+var_18], rax
.text:00000000000027C1                 call    hash_lookup
.text:00000000000027C6                 test    rax, rax
.text:00000000000027C9                 setnz   al
.text:00000000000027CC
.text:00000000000027CC loc_27CC:                               ; CODE XREF: seen_file+17↑j
.text:00000000000027CC                 mov     rcx, [rsp+28h+var_10]
.text:00000000000027D1                 xor     rcx, fs:28h
.text:00000000000027DA                 jnz     short loc_27E1
.text:00000000000027DC                 add     rsp, 28h
.text:00000000000027E0                 retn
.text:00000000000027E1 ; ---------------------------------------------------------------------------
.text:00000000000027E1
.text:00000000000027E1 loc_27E1:                               ; CODE XREF: seen_file+4A↑j
.text:00000000000027E1                 call    ___stack_chk_fail
.text:00000000000027E1 ; } // starts at 2790
.text:00000000000027E1 seen_file       endp
.text:00000000000027E1
.text:00000000000027E1 ; ---------------------------------------------------------------------------
.text:00000000000027E6                 align 10h
.text:00000000000027F0
.text:00000000000027F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000027F0
.text:00000000000027F0 ; Attributes: info_from_lumina
.text:00000000000027F0
.text:00000000000027F0 ; size_t __fastcall next_prime(size_t candidate)
.text:00000000000027F0 next_prime      proc near               ; CODE XREF: hash_initialize+7B↓p
.text:00000000000027F0                                         ; hash_rehash+7B↓p
.text:00000000000027F0 ; __unwind {
.text:00000000000027F0                 cmp     rdi, 0Ah
.text:00000000000027F4                 mov     eax, 0Ah
.text:00000000000027F9                 mov     r9, 0AAAAAAAAAAAAAAABh
.text:0000000000002803                 cmovb   rdi, rax
.text:0000000000002807                 or      rdi, 1
.text:000000000000280B                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000280F                 jz      short loc_287F
.text:0000000000002811                 nop     dword ptr [rax+00000000h]
.text:0000000000002818
.text:0000000000002818 loc_2818:                               ; CODE XREF: next_prime+8D↓j
.text:0000000000002818                 mov     rax, rdi
.text:000000000000281B                 mov     rcx, rdi
.text:000000000000281E                 mul     r9
.text:0000000000002821                 mov     rax, rdx
.text:0000000000002824                 shr     rax, 1
.text:0000000000002827                 lea     rax, [rax+rax*2]
.text:000000000000282B                 sub     rcx, rax
.text:000000000000282E                 cmp     rdi, 9
.text:0000000000002832                 mov     rax, rcx
.text:0000000000002835                 jbe     short loc_2870
.text:0000000000002837                 test    rcx, rcx
.text:000000000000283A                 jz      short loc_2875
.text:000000000000283C                 mov     r8d, 10h
.text:0000000000002842                 mov     esi, 9
.text:0000000000002847                 mov     ecx, 3
.text:000000000000284C                 jmp     short loc_2859
.text:000000000000284C ; ---------------------------------------------------------------------------
.text:000000000000284E                 align 10h
.text:0000000000002850
.text:0000000000002850 loc_2850:                               ; CODE XREF: next_prime+7E↓j
.text:0000000000002850                 add     r8, 8
.text:0000000000002854                 test    rdx, rdx
.text:0000000000002857                 jz      short loc_2875
.text:0000000000002859
.text:0000000000002859 loc_2859:                               ; CODE XREF: next_prime+5C↑j
.text:0000000000002859                 add     rcx, 2
.text:000000000000285D                 xor     edx, edx
.text:000000000000285F                 mov     rax, rdi
.text:0000000000002862                 div     rcx
.text:0000000000002865                 add     rsi, r8
.text:0000000000002868                 cmp     rsi, rdi
.text:000000000000286B                 mov     rax, rdx
.text:000000000000286E                 jb      short loc_2850
.text:0000000000002870
.text:0000000000002870 loc_2870:                               ; CODE XREF: next_prime+45↑j
.text:0000000000002870                 test    rax, rax
.text:0000000000002873                 jnz     short loc_287F
.text:0000000000002875
.text:0000000000002875 loc_2875:                               ; CODE XREF: next_prime+4A↑j
.text:0000000000002875                                         ; next_prime+67↑j
.text:0000000000002875                 add     rdi, 2
.text:0000000000002879                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000287D                 jnz     short loc_2818
.text:000000000000287F
.text:000000000000287F loc_287F:                               ; CODE XREF: next_prime+1F↑j
.text:000000000000287F                                         ; next_prime+83↑j
.text:000000000000287F                 mov     rax, rdi
.text:0000000000002882                 retn
.text:0000000000002882 ; } // starts at 27F0
.text:0000000000002882 next_prime      endp
.text:0000000000002882
.text:0000000000002882 ; ---------------------------------------------------------------------------
.text:0000000000002883                 align 10h
.text:0000000000002890
.text:0000000000002890 ; =============== S U B R O U T I N E =======================================
.text:0000000000002890
.text:0000000000002890
.text:0000000000002890 raw_hasher      proc near               ; DATA XREF: hash_initialize+4↓o
.text:0000000000002890 ; __unwind {
.text:0000000000002890                 mov     rax, rdi
.text:0000000000002893                 xor     edx, edx
.text:0000000000002895                 ror     rax, 3
.text:0000000000002899                 div     rsi
.text:000000000000289C                 mov     rax, rdx
.text:000000000000289F                 retn
.text:000000000000289F ; } // starts at 2890
.text:000000000000289F raw_hasher      endp
.text:000000000000289F
.text:00000000000028A0
.text:00000000000028A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028A0
.text:00000000000028A0
.text:00000000000028A0 raw_comparator  proc near               ; DATA XREF: hash_initialize+30↓o
.text:00000000000028A0 ; __unwind {
.text:00000000000028A0                 cmp     rdi, rsi
.text:00000000000028A3                 setz    al
.text:00000000000028A6                 retn
.text:00000000000028A6 ; } // starts at 28A0
.text:00000000000028A6 raw_comparator  endp
.text:00000000000028A6
.text:00000000000028A6 ; ---------------------------------------------------------------------------
.text:00000000000028A7                 align 10h
.text:00000000000028B0
.text:00000000000028B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028B0
.text:00000000000028B0 ; Attributes: info_from_lumina
.text:00000000000028B0
.text:00000000000028B0 ; hash_entry *__fastcall safe_hasher(const Hash_table *table, const void *key)
.text:00000000000028B0 safe_hasher     proc near               ; CODE XREF: hash_find_entry+14↓p
.text:00000000000028B0                                         ; transfer_entries+65↓p ...
.text:00000000000028B0 ; __unwind {
.text:00000000000028B0                 push    rbx
.text:00000000000028B1                 mov     rbx, rdi
.text:00000000000028B4                 mov     rdi, rsi
.text:00000000000028B7                 mov     rsi, [rbx+10h]
.text:00000000000028BB                 call    qword ptr [rbx+30h]
.text:00000000000028BE                 cmp     [rbx+10h], rax
.text:00000000000028C2                 jbe     short loc_28CD
.text:00000000000028C4                 shl     rax, 4
.text:00000000000028C8                 add     rax, [rbx]
.text:00000000000028CB                 pop     rbx
.text:00000000000028CC                 retn
.text:00000000000028CD ; ---------------------------------------------------------------------------
.text:00000000000028CD
.text:00000000000028CD loc_28CD:                               ; CODE XREF: safe_hasher+12↑j
.text:00000000000028CD                 call    _abort
.text:00000000000028CD ; } // starts at 28B0
.text:00000000000028CD safe_hasher     endp
.text:00000000000028CD
.text:00000000000028CD ; ---------------------------------------------------------------------------
.text:00000000000028D2                 align 20h
.text:00000000000028E0
.text:00000000000028E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028E0
.text:00000000000028E0 ; Attributes: info_from_lumina
.text:00000000000028E0
.text:00000000000028E0 ; void *__fastcall hash_find_entry(Hash_table *table, const void *entry, hash_entry **bucket_head, _Bool delete)
.text:00000000000028E0 hash_find_entry proc near               ; CODE XREF: hash_insert_if_absent+34↓p
.text:00000000000028E0                                         ; hash_insert_if_absent+1CF↓p ...
.text:00000000000028E0 ; __unwind {
.text:00000000000028E0                 push    r14
.text:00000000000028E2                 push    r13
.text:00000000000028E4                 mov     r14, rdx
.text:00000000000028E7                 push    r12
.text:00000000000028E9                 push    rbp
.text:00000000000028EA                 mov     r12, rdi
.text:00000000000028ED                 push    rbx
.text:00000000000028EE                 mov     rbp, rsi
.text:00000000000028F1                 mov     r13d, ecx
.text:00000000000028F4                 call    safe_hasher
.text:00000000000028F9                 mov     [r14], rax
.text:00000000000028FC                 mov     rsi, [rax]
.text:00000000000028FF                 test    rsi, rsi
.text:0000000000002902                 jz      loc_29F0
.text:0000000000002908                 cmp     rsi, rbp
.text:000000000000290B                 mov     rbx, rax
.text:000000000000290E                 jz      loc_29A3
.text:0000000000002914                 mov     rdi, rbp
.text:0000000000002917                 call    qword ptr [r12+38h]
.text:000000000000291C                 test    al, al
.text:000000000000291E                 jnz     loc_29A0
.text:0000000000002924                 mov     rax, [rbx+8]
.text:0000000000002928                 test    rax, rax
.text:000000000000292B                 jz      loc_29F0
.text:0000000000002931                 mov     rsi, [rax]
.text:0000000000002934                 cmp     rbp, rsi
.text:0000000000002937                 jnz     short loc_2959
.text:0000000000002939                 jmp     short loc_296C
.text:0000000000002939 ; ---------------------------------------------------------------------------
.text:000000000000293B                 align 20h
.text:0000000000002940
.text:0000000000002940 loc_2940:                               ; CODE XREF: hash_find_entry+83↓j
.text:0000000000002940                 mov     rbx, [rbx+8]
.text:0000000000002944                 mov     rax, [rbx+8]
.text:0000000000002948                 test    rax, rax
.text:000000000000294B                 jz      loc_29F0
.text:0000000000002951                 mov     rsi, [rax]
.text:0000000000002954                 cmp     rsi, rbp
.text:0000000000002957                 jz      short loc_296C
.text:0000000000002959
.text:0000000000002959 loc_2959:                               ; CODE XREF: hash_find_entry+57↑j
.text:0000000000002959                 mov     rdi, rbp
.text:000000000000295C                 call    qword ptr [r12+38h]
.text:0000000000002961                 test    al, al
.text:0000000000002963                 jz      short loc_2940
.text:0000000000002965                 mov     rax, [rbx+8]
.text:0000000000002969                 mov     rsi, [rax]
.text:000000000000296C
.text:000000000000296C loc_296C:                               ; CODE XREF: hash_find_entry+59↑j
.text:000000000000296C                                         ; hash_find_entry+77↑j
.text:000000000000296C                 test    r13b, r13b
.text:000000000000296F                 jz      short loc_298E
.text:0000000000002971                 mov     rdx, [rax+8]
.text:0000000000002975                 mov     [rbx+8], rdx
.text:0000000000002979                 mov     qword ptr [rax], 0
.text:0000000000002980                 mov     rdx, [r12+48h]
.text:0000000000002985                 mov     [rax+8], rdx
.text:0000000000002989                 mov     [r12+48h], rax
.text:000000000000298E
.text:000000000000298E loc_298E:                               ; CODE XREF: hash_find_entry+8F↑j
.text:000000000000298E                                         ; hash_find_entry+C6↓j ...
.text:000000000000298E                 pop     rbx
.text:000000000000298F                 mov     rax, rsi
.text:0000000000002992                 pop     rbp
.text:0000000000002993                 pop     r12
.text:0000000000002995                 pop     r13
.text:0000000000002997                 pop     r14
.text:0000000000002999                 retn
.text:0000000000002999 ; ---------------------------------------------------------------------------
.text:000000000000299A                 align 20h
.text:00000000000029A0
.text:00000000000029A0 loc_29A0:                               ; CODE XREF: hash_find_entry+3E↑j
.text:00000000000029A0                 mov     rsi, [rbx]
.text:00000000000029A3
.text:00000000000029A3 loc_29A3:                               ; CODE XREF: hash_find_entry+2E↑j
.text:00000000000029A3                 test    r13b, r13b
.text:00000000000029A6                 jz      short loc_298E
.text:00000000000029A8                 mov     rax, [rbx+8]
.text:00000000000029AC                 test    rax, rax
.text:00000000000029AF                 jz      short loc_29E0
.text:00000000000029B1                 movdqu  xmm0, xmmword ptr [rax]
.text:00000000000029B5                 movups  xmmword ptr [rbx], xmm0
.text:00000000000029B8                 mov     qword ptr [rax], 0
.text:00000000000029BF                 mov     rdx, [r12+48h]
.text:00000000000029C4                 mov     [rax+8], rdx
.text:00000000000029C8                 mov     [r12+48h], rax
.text:00000000000029CD                 mov     rax, rsi
.text:00000000000029D0                 pop     rbx
.text:00000000000029D1                 pop     rbp
.text:00000000000029D2                 pop     r12
.text:00000000000029D4                 pop     r13
.text:00000000000029D6                 pop     r14
.text:00000000000029D8                 retn
.text:00000000000029D8 ; ---------------------------------------------------------------------------
.text:00000000000029D9                 align 20h
.text:00000000000029E0
.text:00000000000029E0 loc_29E0:                               ; CODE XREF: hash_find_entry+CF↑j
.text:00000000000029E0                 mov     qword ptr [rbx], 0
.text:00000000000029E7                 jmp     short loc_298E
.text:00000000000029E7 ; ---------------------------------------------------------------------------
.text:00000000000029E9                 align 10h
.text:00000000000029F0
.text:00000000000029F0 loc_29F0:                               ; CODE XREF: hash_find_entry+22↑j
.text:00000000000029F0                                         ; hash_find_entry+4B↑j ...
.text:00000000000029F0                 xor     esi, esi
.text:00000000000029F2                 pop     rbx
.text:00000000000029F3                 mov     rax, rsi
.text:00000000000029F6                 pop     rbp
.text:00000000000029F7                 pop     r12
.text:00000000000029F9                 pop     r13
.text:00000000000029FB                 pop     r14
.text:00000000000029FD                 retn
.text:00000000000029FD ; } // starts at 28E0
.text:00000000000029FD hash_find_entry endp
.text:00000000000029FD
.text:00000000000029FD ; ---------------------------------------------------------------------------
.text:00000000000029FE                 align 20h
.text:0000000000002A00
.text:0000000000002A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A00
.text:0000000000002A00 ; Attributes: info_from_lumina
.text:0000000000002A00
.text:0000000000002A00 ; _Bool check_tuning(Hash_table *table)
.text:0000000000002A00 check_tuning    proc near               ; CODE XREF: hash_initialize+60↓p
.text:0000000000002A00                                         ; hash_initialize+11B↓p ...
.text:0000000000002A00 ; __unwind {
.text:0000000000002A00                 mov     rdx, [rdi]
.text:0000000000002A03                 lea     rcx, default_tuning
.text:0000000000002A0A                 mov     eax, 1
.text:0000000000002A0F                 cmp     rdx, rcx
.text:0000000000002A12                 jz      short locret_2A75
.text:0000000000002A14                 movss   xmm0, dword ptr [rdx+8]
.text:0000000000002A19                 ucomiss xmm0, cs:dword_7064
.text:0000000000002A20                 jbe     short loc_2A70
.text:0000000000002A22                 movss   xmm1, cs:dword_7068
.text:0000000000002A2A                 ucomiss xmm1, xmm0
.text:0000000000002A2D                 jbe     short loc_2A70
.text:0000000000002A2F                 movss   xmm1, dword ptr [rdx+0Ch]
.text:0000000000002A34                 ucomiss xmm1, cs:dword_706C
.text:0000000000002A3B                 jbe     short loc_2A70
.text:0000000000002A3D                 movss   xmm1, dword ptr [rdx]
.text:0000000000002A41                 ucomiss xmm1, cs:dword_7070
.text:0000000000002A48                 jb      short loc_2A70
.text:0000000000002A4A                 addss   xmm1, cs:dword_7064
.text:0000000000002A52                 movss   xmm2, dword ptr [rdx+4]
.text:0000000000002A57                 ucomiss xmm2, xmm1
.text:0000000000002A5A                 jbe     short loc_2A70
.text:0000000000002A5C                 movss   xmm3, cs:dword_7074
.text:0000000000002A64                 ucomiss xmm3, xmm2
.text:0000000000002A67                 jb      short loc_2A70
.text:0000000000002A69                 ucomiss xmm0, xmm1
.text:0000000000002A6C                 ja      short locret_2A75
.text:0000000000002A6E                 xchg    ax, ax
.text:0000000000002A70
.text:0000000000002A70 loc_2A70:                               ; CODE XREF: check_tuning+20↑j
.text:0000000000002A70                                         ; check_tuning+2D↑j ...
.text:0000000000002A70                 mov     [rdi], rcx
.text:0000000000002A73                 xor     eax, eax
.text:0000000000002A75
.text:0000000000002A75 locret_2A75:                            ; CODE XREF: check_tuning+12↑j
.text:0000000000002A75                                         ; check_tuning+6C↑j
.text:0000000000002A75                 rep retn
.text:0000000000002A75 ; } // starts at 2A00
.text:0000000000002A75 check_tuning    endp
.text:0000000000002A75
.text:0000000000002A75 ; ---------------------------------------------------------------------------
.text:0000000000002A77                 align 20h
.text:0000000000002A80
.text:0000000000002A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A80
.text:0000000000002A80 ; Attributes: info_from_lumina
.text:0000000000002A80
.text:0000000000002A80 ; _Bool __fastcall transfer_entries(Hash_table *dst, Hash_table *src, _Bool safe)
.text:0000000000002A80 transfer_entries proc near              ; CODE XREF: hash_rehash+12F↓p
.text:0000000000002A80                                         ; hash_rehash+152↓p ...
.text:0000000000002A80 ; __unwind {
.text:0000000000002A80                 push    r15
.text:0000000000002A82                 push    r14
.text:0000000000002A84                 push    r13
.text:0000000000002A86                 push    r12
.text:0000000000002A88                 push    rbp
.text:0000000000002A89                 push    rbx
.text:0000000000002A8A                 sub     rsp, 8
.text:0000000000002A8E                 mov     r12, [rsi]
.text:0000000000002A91                 cmp     r12, [rsi+8]
.text:0000000000002A95                 jnb     loc_2B78
.text:0000000000002A9B                 mov     rbp, rdi
.text:0000000000002A9E                 mov     r13, rsi
.text:0000000000002AA1                 mov     r14d, edx
.text:0000000000002AA4                 nop     dword ptr [rax+00h]
.text:0000000000002AA8
.text:0000000000002AA8 loc_2AA8:                               ; CODE XREF: transfer_entries+F2↓j
.text:0000000000002AA8                 mov     r15, [r12]
.text:0000000000002AAC                 test    r15, r15
.text:0000000000002AAF                 jz      loc_2B6A
.text:0000000000002AB5                 mov     rbx, [r12+8]
.text:0000000000002ABA                 test    rbx, rbx
.text:0000000000002ABD                 jnz     short loc_2ADC
.text:0000000000002ABF                 jmp     short loc_2B1B
.text:0000000000002ABF ; ---------------------------------------------------------------------------
.text:0000000000002AC1                 align 8
.text:0000000000002AC8
.text:0000000000002AC8 loc_2AC8:                               ; CODE XREF: transfer_entries+72↓j
.text:0000000000002AC8                 mov     rcx, [rax+8]
.text:0000000000002ACC                 test    rdx, rdx
.text:0000000000002ACF                 mov     [rbx+8], rcx
.text:0000000000002AD3                 mov     [rax+8], rbx
.text:0000000000002AD7                 mov     rbx, rdx
.text:0000000000002ADA                 jz      short loc_2B17
.text:0000000000002ADC
.text:0000000000002ADC loc_2ADC:                               ; CODE XREF: transfer_entries+3D↑j
.text:0000000000002ADC                                         ; transfer_entries+95↓j
.text:0000000000002ADC                 mov     r15, [rbx]
.text:0000000000002ADF                 mov     rdi, rbp
.text:0000000000002AE2                 mov     rsi, r15
.text:0000000000002AE5                 call    safe_hasher
.text:0000000000002AEA                 cmp     qword ptr [rax], 0
.text:0000000000002AEE                 mov     rdx, [rbx+8]
.text:0000000000002AF2                 jnz     short loc_2AC8
.text:0000000000002AF4                 mov     [rax], r15
.text:0000000000002AF7                 add     qword ptr [rbp+18h], 1
.text:0000000000002AFC                 test    rdx, rdx
.text:0000000000002AFF                 mov     qword ptr [rbx], 0
.text:0000000000002B06                 mov     rax, [rbp+48h]
.text:0000000000002B0A                 mov     [rbx+8], rax
.text:0000000000002B0E                 mov     [rbp+48h], rbx
.text:0000000000002B12                 mov     rbx, rdx
.text:0000000000002B15                 jnz     short loc_2ADC
.text:0000000000002B17
.text:0000000000002B17 loc_2B17:                               ; CODE XREF: transfer_entries+5A↑j
.text:0000000000002B17                 mov     r15, [r12]
.text:0000000000002B1B
.text:0000000000002B1B loc_2B1B:                               ; CODE XREF: transfer_entries+3F↑j
.text:0000000000002B1B                 test    r14b, r14b
.text:0000000000002B1E                 mov     qword ptr [r12+8], 0
.text:0000000000002B27                 jnz     short loc_2B6A
.text:0000000000002B29                 mov     rsi, r15
.text:0000000000002B2C                 mov     rdi, rbp
.text:0000000000002B2F                 call    safe_hasher
.text:0000000000002B34                 cmp     qword ptr [rax], 0
.text:0000000000002B38                 mov     rbx, rax
.text:0000000000002B3B                 jz      short loc_2B90
.text:0000000000002B3D                 mov     rax, [rbp+48h]
.text:0000000000002B41                 test    rax, rax
.text:0000000000002B44                 jz      short loc_2BA0
.text:0000000000002B46                 mov     rdx, [rax+8]
.text:0000000000002B4A                 mov     [rbp+48h], rdx
.text:0000000000002B4E
.text:0000000000002B4E loc_2B4E:                               ; CODE XREF: transfer_entries+12D↓j
.text:0000000000002B4E                 mov     rdx, [rbx+8]
.text:0000000000002B52                 mov     [rax], r15
.text:0000000000002B55                 mov     [rax+8], rdx
.text:0000000000002B59                 mov     [rbx+8], rax
.text:0000000000002B5D
.text:0000000000002B5D loc_2B5D:                               ; CODE XREF: transfer_entries+118↓j
.text:0000000000002B5D                 mov     qword ptr [r12], 0
.text:0000000000002B65                 sub     qword ptr [r13+18h], 1
.text:0000000000002B6A
.text:0000000000002B6A loc_2B6A:                               ; CODE XREF: transfer_entries+2F↑j
.text:0000000000002B6A                                         ; transfer_entries+A7↑j
.text:0000000000002B6A                 add     r12, 10h
.text:0000000000002B6E                 cmp     [r13+8], r12
.text:0000000000002B72                 ja      loc_2AA8
.text:0000000000002B78
.text:0000000000002B78 loc_2B78:                               ; CODE XREF: transfer_entries+15↑j
.text:0000000000002B78                 add     rsp, 8
.text:0000000000002B7C                 mov     eax, 1
.text:0000000000002B81                 pop     rbx
.text:0000000000002B82                 pop     rbp
.text:0000000000002B83                 pop     r12
.text:0000000000002B85                 pop     r13
.text:0000000000002B87                 pop     r14
.text:0000000000002B89                 pop     r15
.text:0000000000002B8B                 retn
.text:0000000000002B8B ; ---------------------------------------------------------------------------
.text:0000000000002B8C                 align 10h
.text:0000000000002B90
.text:0000000000002B90 loc_2B90:                               ; CODE XREF: transfer_entries+BB↑j
.text:0000000000002B90                 mov     [rax], r15
.text:0000000000002B93                 add     qword ptr [rbp+18h], 1
.text:0000000000002B98                 jmp     short loc_2B5D
.text:0000000000002B98 ; ---------------------------------------------------------------------------
.text:0000000000002B9A                 align 20h
.text:0000000000002BA0
.text:0000000000002BA0 loc_2BA0:                               ; CODE XREF: transfer_entries+C4↑j
.text:0000000000002BA0                 mov     edi, 10h        ; size
.text:0000000000002BA5                 call    _malloc
.text:0000000000002BAA                 test    rax, rax
.text:0000000000002BAD                 jnz     short loc_2B4E
.text:0000000000002BAF                 add     rsp, 8
.text:0000000000002BB3                 xor     eax, eax
.text:0000000000002BB5                 pop     rbx
.text:0000000000002BB6                 pop     rbp
.text:0000000000002BB7                 pop     r12
.text:0000000000002BB9                 pop     r13
.text:0000000000002BBB                 pop     r14
.text:0000000000002BBD                 pop     r15
.text:0000000000002BBF                 retn
.text:0000000000002BBF ; } // starts at 2A80
.text:0000000000002BBF transfer_entries endp
.text:0000000000002BBF
.text:0000000000002BC0
.text:0000000000002BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BC0
.text:0000000000002BC0
.text:0000000000002BC0                 public hash_get_n_buckets
.text:0000000000002BC0 hash_get_n_buckets proc near
.text:0000000000002BC0 ; __unwind {
.text:0000000000002BC0                 mov     rax, [rdi+10h]
.text:0000000000002BC4                 retn
.text:0000000000002BC4 ; } // starts at 2BC0
.text:0000000000002BC4 hash_get_n_buckets endp
.text:0000000000002BC4
.text:0000000000002BC4 ; ---------------------------------------------------------------------------
.text:0000000000002BC5                 align 10h
.text:0000000000002BD0
.text:0000000000002BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BD0
.text:0000000000002BD0
.text:0000000000002BD0                 public hash_get_n_buckets_used
.text:0000000000002BD0 hash_get_n_buckets_used proc near
.text:0000000000002BD0 ; __unwind {
.text:0000000000002BD0                 mov     rax, [rdi+18h]
.text:0000000000002BD4                 retn
.text:0000000000002BD4 ; } // starts at 2BD0
.text:0000000000002BD4 hash_get_n_buckets_used endp
.text:0000000000002BD4
.text:0000000000002BD4 ; ---------------------------------------------------------------------------
.text:0000000000002BD5                 align 20h
.text:0000000000002BE0
.text:0000000000002BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BE0
.text:0000000000002BE0
.text:0000000000002BE0                 public hash_get_n_entries
.text:0000000000002BE0 hash_get_n_entries proc near
.text:0000000000002BE0 ; __unwind {
.text:0000000000002BE0                 mov     rax, [rdi+20h]
.text:0000000000002BE4                 retn
.text:0000000000002BE4 ; } // starts at 2BE0
.text:0000000000002BE4 hash_get_n_entries endp
.text:0000000000002BE4
.text:0000000000002BE4 ; ---------------------------------------------------------------------------
.text:0000000000002BE5                 align 10h
.text:0000000000002BF0
.text:0000000000002BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BF0
.text:0000000000002BF0 ; Attributes: info_from_lumina
.text:0000000000002BF0
.text:0000000000002BF0 ; size_t __fastcall hash_get_max_bucket_length(const Hash_table *table)
.text:0000000000002BF0                 public hash_get_max_bucket_length
.text:0000000000002BF0 hash_get_max_bucket_length proc near
.text:0000000000002BF0 ; __unwind {
.text:0000000000002BF0                 mov     rsi, [rdi]
.text:0000000000002BF3                 mov     rdi, [rdi+8]
.text:0000000000002BF7                 xor     eax, eax
.text:0000000000002BF9                 cmp     rsi, rdi
.text:0000000000002BFC                 jnb     short locret_2C37
.text:0000000000002BFE                 xchg    ax, ax
.text:0000000000002C00
.text:0000000000002C00 loc_2C00:                               ; CODE XREF: hash_get_max_bucket_length+43↓j
.text:0000000000002C00                 cmp     qword ptr [rsi], 0
.text:0000000000002C04                 jz      short loc_2C2C
.text:0000000000002C06                 mov     rdx, [rsi+8]
.text:0000000000002C0A                 mov     ecx, 1
.text:0000000000002C0F                 test    rdx, rdx
.text:0000000000002C12                 jz      short loc_2C25
.text:0000000000002C14                 nop     dword ptr [rax+00h]
.text:0000000000002C18
.text:0000000000002C18 loc_2C18:                               ; CODE XREF: hash_get_max_bucket_length+33↓j
.text:0000000000002C18                 mov     rdx, [rdx+8]
.text:0000000000002C1C                 add     rcx, 1
.text:0000000000002C20                 test    rdx, rdx
.text:0000000000002C23                 jnz     short loc_2C18
.text:0000000000002C25
.text:0000000000002C25 loc_2C25:                               ; CODE XREF: hash_get_max_bucket_length+22↑j
.text:0000000000002C25                 cmp     rax, rcx
.text:0000000000002C28                 cmovb   rax, rcx
.text:0000000000002C2C
.text:0000000000002C2C loc_2C2C:                               ; CODE XREF: hash_get_max_bucket_length+14↑j
.text:0000000000002C2C                 add     rsi, 10h
.text:0000000000002C30                 cmp     rsi, rdi
.text:0000000000002C33                 jb      short loc_2C00
.text:0000000000002C35                 rep retn
.text:0000000000002C37 ; ---------------------------------------------------------------------------
.text:0000000000002C37
.text:0000000000002C37 locret_2C37:                            ; CODE XREF: hash_get_max_bucket_length+C↑j
.text:0000000000002C37                 rep retn
.text:0000000000002C37 ; } // starts at 2BF0
.text:0000000000002C37 hash_get_max_bucket_length endp
.text:0000000000002C37
.text:0000000000002C37 ; ---------------------------------------------------------------------------
.text:0000000000002C39                 align 20h
.text:0000000000002C40
.text:0000000000002C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C40
.text:0000000000002C40 ; Attributes: info_from_lumina
.text:0000000000002C40
.text:0000000000002C40 ; _Bool __fastcall hash_table_ok(const Hash_table *table)
.text:0000000000002C40                 public hash_table_ok
.text:0000000000002C40 hash_table_ok   proc near
.text:0000000000002C40 ; __unwind {
.text:0000000000002C40                 mov     rcx, [rdi]
.text:0000000000002C43                 mov     r8, [rdi+8]
.text:0000000000002C47                 xor     edx, edx
.text:0000000000002C49                 xor     esi, esi
.text:0000000000002C4B                 cmp     rcx, r8
.text:0000000000002C4E                 jnb     short loc_2C86
.text:0000000000002C50
.text:0000000000002C50 loc_2C50:                               ; CODE XREF: hash_table_ok+44↓j
.text:0000000000002C50                 cmp     qword ptr [rcx], 0
.text:0000000000002C54                 jz      short loc_2C7D
.text:0000000000002C56                 mov     rax, [rcx+8]
.text:0000000000002C5A                 add     rsi, 1
.text:0000000000002C5E                 add     rdx, 1
.text:0000000000002C62                 test    rax, rax
.text:0000000000002C65                 jz      short loc_2C7D
.text:0000000000002C67                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002C70
.text:0000000000002C70 loc_2C70:                               ; CODE XREF: hash_table_ok+3B↓j
.text:0000000000002C70                 mov     rax, [rax+8]
.text:0000000000002C74                 add     rdx, 1
.text:0000000000002C78                 test    rax, rax
.text:0000000000002C7B                 jnz     short loc_2C70
.text:0000000000002C7D
.text:0000000000002C7D loc_2C7D:                               ; CODE XREF: hash_table_ok+14↑j
.text:0000000000002C7D                                         ; hash_table_ok+25↑j
.text:0000000000002C7D                 add     rcx, 10h
.text:0000000000002C81                 cmp     rcx, r8
.text:0000000000002C84                 jb      short loc_2C50
.text:0000000000002C86
.text:0000000000002C86 loc_2C86:                               ; CODE XREF: hash_table_ok+E↑j
.text:0000000000002C86                 xor     eax, eax
.text:0000000000002C88                 cmp     [rdi+18h], rsi
.text:0000000000002C8C                 jz      short loc_2C90
.text:0000000000002C8E                 rep retn
.text:0000000000002C90 ; ---------------------------------------------------------------------------
.text:0000000000002C90
.text:0000000000002C90 loc_2C90:                               ; CODE XREF: hash_table_ok+4C↑j
.text:0000000000002C90                 cmp     [rdi+20h], rdx
.text:0000000000002C94                 setz    al
.text:0000000000002C97                 retn
.text:0000000000002C97 ; } // starts at 2C40
.text:0000000000002C97 hash_table_ok   endp
.text:0000000000002C97
.text:0000000000002C97 ; ---------------------------------------------------------------------------
.text:0000000000002C98                 align 20h
.text:0000000000002CA0
.text:0000000000002CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002CA0
.text:0000000000002CA0 ; Attributes: info_from_lumina
.text:0000000000002CA0
.text:0000000000002CA0 ; void __fastcall hash_print_statistics(const Hash_table *table, FILE *stream)
.text:0000000000002CA0                 public hash_print_statistics
.text:0000000000002CA0 hash_print_statistics proc near
.text:0000000000002CA0 ; __unwind {
.text:0000000000002CA0                 push    r13
.text:0000000000002CA2                 push    r12
.text:0000000000002CA4                 mov     r12, rsi
.text:0000000000002CA7                 push    rbp
.text:0000000000002CA8                 push    rbx
.text:0000000000002CA9                 xor     ebx, ebx
.text:0000000000002CAB                 sub     rsp, 8
.text:0000000000002CAF                 mov     rsi, [rdi]
.text:0000000000002CB2                 mov     rcx, [rdi+20h]
.text:0000000000002CB6                 mov     rbp, [rdi+10h]
.text:0000000000002CBA                 mov     r13, [rdi+18h]
.text:0000000000002CBE                 mov     rdi, [rdi+8]
.text:0000000000002CC2                 cmp     rsi, rdi
.text:0000000000002CC5                 jnb     short loc_2D05
.text:0000000000002CC7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002CD0
.text:0000000000002CD0 loc_2CD0:                               ; CODE XREF: hash_print_statistics+63↓j
.text:0000000000002CD0                 cmp     qword ptr [rsi], 0
.text:0000000000002CD4                 jz      short loc_2CFC
.text:0000000000002CD6                 mov     rax, [rsi+8]
.text:0000000000002CDA                 mov     edx, 1
.text:0000000000002CDF                 test    rax, rax
.text:0000000000002CE2                 jz      short loc_2CF5
.text:0000000000002CE4                 nop     dword ptr [rax+00h]
.text:0000000000002CE8
.text:0000000000002CE8 loc_2CE8:                               ; CODE XREF: hash_print_statistics+53↓j
.text:0000000000002CE8                 mov     rax, [rax+8]
.text:0000000000002CEC                 add     rdx, 1
.text:0000000000002CF0                 test    rax, rax
.text:0000000000002CF3                 jnz     short loc_2CE8
.text:0000000000002CF5
.text:0000000000002CF5 loc_2CF5:                               ; CODE XREF: hash_print_statistics+42↑j
.text:0000000000002CF5                 cmp     rbx, rdx
.text:0000000000002CF8                 cmovb   rbx, rdx
.text:0000000000002CFC
.text:0000000000002CFC loc_2CFC:                               ; CODE XREF: hash_print_statistics+34↑j
.text:0000000000002CFC                 add     rsi, 10h
.text:0000000000002D00                 cmp     rsi, rdi
.text:0000000000002D03                 jb      short loc_2CD0
.text:0000000000002D05
.text:0000000000002D05 loc_2D05:                               ; CODE XREF: hash_print_statistics+25↑j
.text:0000000000002D05                 lea     rdx, aEntriesLu ; "# entries:         %lu\n"
.text:0000000000002D0C                 mov     esi, 1
.text:0000000000002D11                 mov     rdi, r12
.text:0000000000002D14                 xor     eax, eax
.text:0000000000002D16                 call    ___fprintf_chk
.text:0000000000002D1B                 lea     rdx, aBucketsLu ; "# buckets:         %lu\n"
.text:0000000000002D22                 xor     eax, eax
.text:0000000000002D24                 mov     rcx, rbp
.text:0000000000002D27                 mov     esi, 1
.text:0000000000002D2C                 mov     rdi, r12
.text:0000000000002D2F                 call    ___fprintf_chk
.text:0000000000002D34                 test    r13, r13
.text:0000000000002D37                 js      short loc_2DA0
.text:0000000000002D39                 pxor    xmm0, xmm0
.text:0000000000002D3D                 test    rbp, rbp
.text:0000000000002D40                 cvtsi2sd xmm0, r13
.text:0000000000002D45                 mulsd   xmm0, cs:qword_7088
.text:0000000000002D4D                 js      short loc_2DC9
.text:0000000000002D4F
.text:0000000000002D4F loc_2D4F:                               ; CODE XREF: hash_print_statistics+127↓j
.text:0000000000002D4F                 pxor    xmm1, xmm1
.text:0000000000002D53                 cvtsi2sd xmm1, rbp
.text:0000000000002D58
.text:0000000000002D58 loc_2D58:                               ; CODE XREF: hash_print_statistics+142↓j
.text:0000000000002D58                 divsd   xmm0, xmm1
.text:0000000000002D5C                 lea     rdx, aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:0000000000002D63                 mov     rcx, r13
.text:0000000000002D66                 mov     rdi, r12
.text:0000000000002D69                 mov     esi, 1
.text:0000000000002D6E                 mov     eax, 1
.text:0000000000002D73                 call    ___fprintf_chk
.text:0000000000002D78                 add     rsp, 8
.text:0000000000002D7C                 mov     rcx, rbx
.text:0000000000002D7F                 mov     rdi, r12
.text:0000000000002D82                 pop     rbx
.text:0000000000002D83                 pop     rbp
.text:0000000000002D84                 pop     r12
.text:0000000000002D86                 pop     r13
.text:0000000000002D88                 lea     rdx, aMaxBucketLengt ; "max bucket length: %lu\n"
.text:0000000000002D8F                 mov     esi, 1
.text:0000000000002D94                 xor     eax, eax
.text:0000000000002D96                 jmp     ___fprintf_chk
.text:0000000000002D96 ; ---------------------------------------------------------------------------
.text:0000000000002D9B                 align 20h
.text:0000000000002DA0
.text:0000000000002DA0 loc_2DA0:                               ; CODE XREF: hash_print_statistics+97↑j
.text:0000000000002DA0                 mov     rax, r13
.text:0000000000002DA3                 mov     rdx, r13
.text:0000000000002DA6                 pxor    xmm0, xmm0
.text:0000000000002DAA                 shr     rax, 1
.text:0000000000002DAD                 and     edx, 1
.text:0000000000002DB0                 or      rax, rdx
.text:0000000000002DB3                 test    rbp, rbp
.text:0000000000002DB6                 cvtsi2sd xmm0, rax
.text:0000000000002DBB                 addsd   xmm0, xmm0
.text:0000000000002DBF                 mulsd   xmm0, cs:qword_7088
.text:0000000000002DC7                 jns     short loc_2D4F
.text:0000000000002DC9
.text:0000000000002DC9 loc_2DC9:                               ; CODE XREF: hash_print_statistics+AD↑j
.text:0000000000002DC9                 mov     rax, rbp
.text:0000000000002DCC                 pxor    xmm1, xmm1
.text:0000000000002DD0                 shr     rax, 1
.text:0000000000002DD3                 and     ebp, 1
.text:0000000000002DD6                 or      rax, rbp
.text:0000000000002DD9                 cvtsi2sd xmm1, rax
.text:0000000000002DDE                 addsd   xmm1, xmm1
.text:0000000000002DE2                 jmp     loc_2D58
.text:0000000000002DE2 ; } // starts at 2CA0
.text:0000000000002DE2 hash_print_statistics endp
.text:0000000000002DE2
.text:0000000000002DE2 ; ---------------------------------------------------------------------------
.text:0000000000002DE7                 align 10h
.text:0000000000002DF0
.text:0000000000002DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002DF0
.text:0000000000002DF0 ; Attributes: info_from_lumina
.text:0000000000002DF0
.text:0000000000002DF0 ; void *__fastcall hash_lookup(const Hash_table *table, const void *entry)
.text:0000000000002DF0                 public hash_lookup
.text:0000000000002DF0 hash_lookup     proc near               ; CODE XREF: seen_file+31↑p
.text:0000000000002DF0 ; __unwind {
.text:0000000000002DF0                 push    r12
.text:0000000000002DF2                 push    rbp
.text:0000000000002DF3                 mov     r12, rdi
.text:0000000000002DF6                 push    rbx
.text:0000000000002DF7                 mov     rbp, rsi
.text:0000000000002DFA                 call    safe_hasher
.text:0000000000002DFF                 mov     rsi, [rax]
.text:0000000000002E02                 test    rsi, rsi
.text:0000000000002E05                 jz      short loc_2E2D
.text:0000000000002E07                 mov     rbx, rax
.text:0000000000002E0A                 jmp     short loc_2E13
.text:0000000000002E0A ; ---------------------------------------------------------------------------
.text:0000000000002E0C                 align 10h
.text:0000000000002E10
.text:0000000000002E10 loc_2E10:                               ; CODE XREF: hash_lookup+3B↓j
.text:0000000000002E10                 mov     rsi, [rbx]
.text:0000000000002E13
.text:0000000000002E13 loc_2E13:                               ; CODE XREF: hash_lookup+1A↑j
.text:0000000000002E13                 cmp     rsi, rbp
.text:0000000000002E16                 jz      short loc_2E2F
.text:0000000000002E18                 mov     rdi, rbp
.text:0000000000002E1B                 call    qword ptr [r12+38h]
.text:0000000000002E20                 test    al, al
.text:0000000000002E22                 jnz     short loc_2E40
.text:0000000000002E24                 mov     rbx, [rbx+8]
.text:0000000000002E28                 test    rbx, rbx
.text:0000000000002E2B                 jnz     short loc_2E10
.text:0000000000002E2D
.text:0000000000002E2D loc_2E2D:                               ; CODE XREF: hash_lookup+15↑j
.text:0000000000002E2D                 xor     esi, esi
.text:0000000000002E2F
.text:0000000000002E2F loc_2E2F:                               ; CODE XREF: hash_lookup+26↑j
.text:0000000000002E2F                 pop     rbx
.text:0000000000002E30                 mov     rax, rsi
.text:0000000000002E33                 pop     rbp
.text:0000000000002E34                 pop     r12
.text:0000000000002E36                 retn
.text:0000000000002E36 ; ---------------------------------------------------------------------------
.text:0000000000002E37                 align 20h
.text:0000000000002E40
.text:0000000000002E40 loc_2E40:                               ; CODE XREF: hash_lookup+32↑j
.text:0000000000002E40                 mov     rsi, [rbx]
.text:0000000000002E43                 pop     rbx
.text:0000000000002E44                 pop     rbp
.text:0000000000002E45                 mov     rax, rsi
.text:0000000000002E48                 pop     r12
.text:0000000000002E4A                 retn
.text:0000000000002E4A ; } // starts at 2DF0
.text:0000000000002E4A hash_lookup     endp
.text:0000000000002E4A
.text:0000000000002E4A ; ---------------------------------------------------------------------------
.text:0000000000002E4B                 align 10h
.text:0000000000002E50
.text:0000000000002E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E50
.text:0000000000002E50 ; Attributes: info_from_lumina
.text:0000000000002E50
.text:0000000000002E50 ; void *__fastcall hash_get_first(const Hash_table *table)
.text:0000000000002E50                 public hash_get_first
.text:0000000000002E50 hash_get_first  proc near
.text:0000000000002E50 ; __unwind {
.text:0000000000002E50                 cmp     qword ptr [rdi+20h], 0
.text:0000000000002E55                 jz      short loc_2E83
.text:0000000000002E57                 mov     rdx, [rdi]
.text:0000000000002E5A                 mov     rcx, [rdi+8]
.text:0000000000002E5E                 cmp     rdx, rcx
.text:0000000000002E61                 jnb     short loc_2E88
.text:0000000000002E63                 mov     rax, [rdx]
.text:0000000000002E66                 test    rax, rax
.text:0000000000002E69                 jnz     short locret_2E86
.text:0000000000002E6B                 nop     dword ptr [rax+rax+00h]
.text:0000000000002E70
.text:0000000000002E70 loc_2E70:                               ; CODE XREF: hash_get_first+2F↓j
.text:0000000000002E70                 add     rdx, 10h
.text:0000000000002E74                 cmp     rdx, rcx
.text:0000000000002E77                 jnb     short loc_2E88
.text:0000000000002E79                 mov     rax, [rdx]
.text:0000000000002E7C                 test    rax, rax
.text:0000000000002E7F                 jz      short loc_2E70
.text:0000000000002E81                 rep retn
.text:0000000000002E83 ; ---------------------------------------------------------------------------
.text:0000000000002E83
.text:0000000000002E83 loc_2E83:                               ; CODE XREF: hash_get_first+5↑j
.text:0000000000002E83                 xor     eax, eax
.text:0000000000002E85                 retn
.text:0000000000002E86 ; ---------------------------------------------------------------------------
.text:0000000000002E86
.text:0000000000002E86 locret_2E86:                            ; CODE XREF: hash_get_first+19↑j
.text:0000000000002E86                 rep retn
.text:0000000000002E88 ; ---------------------------------------------------------------------------
.text:0000000000002E88
.text:0000000000002E88 loc_2E88:                               ; CODE XREF: hash_get_first+11↑j
.text:0000000000002E88                                         ; hash_get_first+27↑j
.text:0000000000002E88                 sub     rsp, 8
.text:0000000000002E8C                 call    _abort
.text:0000000000002E8C ; } // starts at 2E50
.text:0000000000002E8C hash_get_first  endp
.text:0000000000002E8C
.text:0000000000002E8C ; ---------------------------------------------------------------------------
.text:0000000000002E91                 align 20h
.text:0000000000002EA0
.text:0000000000002EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002EA0
.text:0000000000002EA0 ; Attributes: info_from_lumina
.text:0000000000002EA0
.text:0000000000002EA0 ; void *__fastcall hash_get_next(const Hash_table *table, const void *entry)
.text:0000000000002EA0                 public hash_get_next
.text:0000000000002EA0 hash_get_next   proc near
.text:0000000000002EA0 ; __unwind {
.text:0000000000002EA0                 push    rbp
.text:0000000000002EA1                 push    rbx
.text:0000000000002EA2                 mov     rbp, rdi
.text:0000000000002EA5                 mov     rbx, rsi
.text:0000000000002EA8                 sub     rsp, 8
.text:0000000000002EAC                 call    safe_hasher
.text:0000000000002EB1                 mov     rdx, rax
.text:0000000000002EB4                 mov     rcx, rax
.text:0000000000002EB7                 mov     rax, [rdx]
.text:0000000000002EBA                 mov     rdx, [rdx+8]
.text:0000000000002EBE                 cmp     rax, rbx
.text:0000000000002EC1                 jz      short loc_2ED9
.text:0000000000002EC3                 nop     dword ptr [rax+rax+00h]
.text:0000000000002EC8
.text:0000000000002EC8 loc_2EC8:                               ; CODE XREF: hash_get_next+37↓j
.text:0000000000002EC8                 test    rdx, rdx
.text:0000000000002ECB                 jz      short loc_2EDE
.text:0000000000002ECD                 mov     rax, [rdx]
.text:0000000000002ED0                 mov     rdx, [rdx+8]
.text:0000000000002ED4                 cmp     rax, rbx
.text:0000000000002ED7                 jnz     short loc_2EC8
.text:0000000000002ED9
.text:0000000000002ED9 loc_2ED9:                               ; CODE XREF: hash_get_next+21↑j
.text:0000000000002ED9                 test    rdx, rdx
.text:0000000000002EDC                 jnz     short loc_2F08
.text:0000000000002EDE
.text:0000000000002EDE loc_2EDE:                               ; CODE XREF: hash_get_next+2B↑j
.text:0000000000002EDE                 mov     rdx, [rbp+8]
.text:0000000000002EE2                 jmp     short loc_2EF0
.text:0000000000002EE2 ; ---------------------------------------------------------------------------
.text:0000000000002EE4                 align 8
.text:0000000000002EE8
.text:0000000000002EE8 loc_2EE8:                               ; CODE XREF: hash_get_next+57↓j
.text:0000000000002EE8                 mov     rax, [rcx]
.text:0000000000002EEB                 test    rax, rax
.text:0000000000002EEE                 jnz     short loc_2EFB
.text:0000000000002EF0
.text:0000000000002EF0 loc_2EF0:                               ; CODE XREF: hash_get_next+42↑j
.text:0000000000002EF0                 add     rcx, 10h
.text:0000000000002EF4                 cmp     rdx, rcx
.text:0000000000002EF7                 ja      short loc_2EE8
.text:0000000000002EF9                 xor     eax, eax
.text:0000000000002EFB
.text:0000000000002EFB loc_2EFB:                               ; CODE XREF: hash_get_next+4E↑j
.text:0000000000002EFB                 add     rsp, 8
.text:0000000000002EFF                 pop     rbx
.text:0000000000002F00                 pop     rbp
.text:0000000000002F01                 retn
.text:0000000000002F01 ; ---------------------------------------------------------------------------
.text:0000000000002F02                 align 8
.text:0000000000002F08
.text:0000000000002F08 loc_2F08:                               ; CODE XREF: hash_get_next+3C↑j
.text:0000000000002F08                 mov     rax, [rdx]
.text:0000000000002F0B                 add     rsp, 8
.text:0000000000002F0F                 pop     rbx
.text:0000000000002F10                 pop     rbp
.text:0000000000002F11                 retn
.text:0000000000002F11 ; } // starts at 2EA0
.text:0000000000002F11 hash_get_next   endp
.text:0000000000002F11
.text:0000000000002F11 ; ---------------------------------------------------------------------------
.text:0000000000002F12                 align 20h
.text:0000000000002F20
.text:0000000000002F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F20
.text:0000000000002F20 ; Attributes: info_from_lumina
.text:0000000000002F20
.text:0000000000002F20 ; size_t __fastcall hash_get_entries(const Hash_table *table, void **buffer, size_t buffer_size)
.text:0000000000002F20                 public hash_get_entries
.text:0000000000002F20 hash_get_entries proc near
.text:0000000000002F20 ; __unwind {
.text:0000000000002F20                 mov     r9, [rdi]
.text:0000000000002F23                 cmp     [rdi+8], r9
.text:0000000000002F27                 jbe     short loc_2F82
.text:0000000000002F29                 xor     r8d, r8d
.text:0000000000002F2C
.text:0000000000002F2C loc_2F2C:                               ; CODE XREF: hash_get_entries+55↓j
.text:0000000000002F2C                 mov     rcx, [r9]
.text:0000000000002F2F                 test    rcx, rcx
.text:0000000000002F32                 jz      short loc_2F6D
.text:0000000000002F34                 cmp     rdx, r8
.text:0000000000002F37                 jbe     short loc_2F77
.text:0000000000002F39                 mov     [rsi+r8*8], rcx
.text:0000000000002F3D                 mov     rcx, [r9+8]
.text:0000000000002F41                 lea     rax, [r8+1]
.text:0000000000002F45                 test    rcx, rcx
.text:0000000000002F48                 jz      short loc_2F6A
.text:0000000000002F4A                 nop     word ptr [rax+rax+00h]
.text:0000000000002F50
.text:0000000000002F50 loc_2F50:                               ; CODE XREF: hash_get_entries+48↓j
.text:0000000000002F50                 cmp     rdx, rax
.text:0000000000002F53                 jz      short locret_2F80
.text:0000000000002F55                 mov     r8, [rcx]
.text:0000000000002F58                 add     rax, 1
.text:0000000000002F5C                 mov     [rsi+rax*8-8], r8
.text:0000000000002F61                 mov     rcx, [rcx+8]
.text:0000000000002F65                 test    rcx, rcx
.text:0000000000002F68                 jnz     short loc_2F50
.text:0000000000002F6A
.text:0000000000002F6A loc_2F6A:                               ; CODE XREF: hash_get_entries+28↑j
.text:0000000000002F6A                 mov     r8, rax
.text:0000000000002F6D
.text:0000000000002F6D loc_2F6D:                               ; CODE XREF: hash_get_entries+12↑j
.text:0000000000002F6D                 add     r9, 10h
.text:0000000000002F71                 cmp     [rdi+8], r9
.text:0000000000002F75                 ja      short loc_2F2C
.text:0000000000002F77
.text:0000000000002F77 loc_2F77:                               ; CODE XREF: hash_get_entries+17↑j
.text:0000000000002F77                 mov     rax, r8
.text:0000000000002F7A                 retn
.text:0000000000002F7A ; ---------------------------------------------------------------------------
.text:0000000000002F7B                 align 20h
.text:0000000000002F80
.text:0000000000002F80 locret_2F80:                            ; CODE XREF: hash_get_entries+33↑j
.text:0000000000002F80                 rep retn
.text:0000000000002F82 ; ---------------------------------------------------------------------------
.text:0000000000002F82
.text:0000000000002F82 loc_2F82:                               ; CODE XREF: hash_get_entries+7↑j
.text:0000000000002F82                 xor     eax, eax
.text:0000000000002F84                 retn
.text:0000000000002F84 ; } // starts at 2F20
.text:0000000000002F84 hash_get_entries endp
.text:0000000000002F84
.text:0000000000002F84 ; ---------------------------------------------------------------------------
.text:0000000000002F85                 align 10h
.text:0000000000002F90
.text:0000000000002F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F90
.text:0000000000002F90 ; Attributes: info_from_lumina
.text:0000000000002F90
.text:0000000000002F90 ; size_t __fastcall hash_do_for_each(const Hash_table *table, Hash_processor processor, void *processor_data)
.text:0000000000002F90                 public hash_do_for_each
.text:0000000000002F90 hash_do_for_each proc near
.text:0000000000002F90 ; __unwind {
.text:0000000000002F90                 push    r15
.text:0000000000002F92                 push    r14
.text:0000000000002F94                 push    r13
.text:0000000000002F96                 push    r12
.text:0000000000002F98                 push    rbp
.text:0000000000002F99                 push    rbx
.text:0000000000002F9A                 sub     rsp, 8
.text:0000000000002F9E                 mov     r14, [rdi]
.text:0000000000002FA1                 cmp     [rdi+8], r14
.text:0000000000002FA5                 jbe     short loc_2FF6
.text:0000000000002FA7                 mov     r13, rdx
.text:0000000000002FAA                 mov     r12, rsi
.text:0000000000002FAD                 mov     r15, rdi
.text:0000000000002FB0                 xor     ebp, ebp
.text:0000000000002FB2
.text:0000000000002FB2 loc_2FB2:                               ; CODE XREF: hash_do_for_each+52↓j
.text:0000000000002FB2                 mov     rdi, [r14]
.text:0000000000002FB5                 test    rdi, rdi
.text:0000000000002FB8                 jz      short loc_2FDA
.text:0000000000002FBA                 mov     rbx, r14
.text:0000000000002FBD                 jmp     short loc_2FC3
.text:0000000000002FBD ; ---------------------------------------------------------------------------
.text:0000000000002FBF                 align 20h
.text:0000000000002FC0
.text:0000000000002FC0 loc_2FC0:                               ; CODE XREF: hash_do_for_each+48↓j
.text:0000000000002FC0                 mov     rdi, [rbx]
.text:0000000000002FC3
.text:0000000000002FC3 loc_2FC3:                               ; CODE XREF: hash_do_for_each+2D↑j
.text:0000000000002FC3                 mov     rsi, r13
.text:0000000000002FC6                 call    r12
.text:0000000000002FC9                 test    al, al
.text:0000000000002FCB                 jz      short loc_2FE4
.text:0000000000002FCD                 mov     rbx, [rbx+8]
.text:0000000000002FD1                 add     rbp, 1
.text:0000000000002FD5                 test    rbx, rbx
.text:0000000000002FD8                 jnz     short loc_2FC0
.text:0000000000002FDA
.text:0000000000002FDA loc_2FDA:                               ; CODE XREF: hash_do_for_each+28↑j
.text:0000000000002FDA                 add     r14, 10h
.text:0000000000002FDE                 cmp     [r15+8], r14
.text:0000000000002FE2                 ja      short loc_2FB2
.text:0000000000002FE4
.text:0000000000002FE4 loc_2FE4:                               ; CODE XREF: hash_do_for_each+3B↑j
.text:0000000000002FE4                                         ; hash_do_for_each+68↓j
.text:0000000000002FE4                 add     rsp, 8
.text:0000000000002FE8                 mov     rax, rbp
.text:0000000000002FEB                 pop     rbx
.text:0000000000002FEC                 pop     rbp
.text:0000000000002FED                 pop     r12
.text:0000000000002FEF                 pop     r13
.text:0000000000002FF1                 pop     r14
.text:0000000000002FF3                 pop     r15
.text:0000000000002FF5                 retn
.text:0000000000002FF6 ; ---------------------------------------------------------------------------
.text:0000000000002FF6
.text:0000000000002FF6 loc_2FF6:                               ; CODE XREF: hash_do_for_each+15↑j
.text:0000000000002FF6                 xor     ebp, ebp
.text:0000000000002FF8                 jmp     short loc_2FE4
.text:0000000000002FF8 ; } // starts at 2F90
.text:0000000000002FF8 hash_do_for_each endp
.text:0000000000002FF8
.text:0000000000002FF8 ; ---------------------------------------------------------------------------
.text:0000000000002FFA                 align 20h
.text:0000000000003000
.text:0000000000003000 ; =============== S U B R O U T I N E =======================================
.text:0000000000003000
.text:0000000000003000 ; Attributes: info_from_lumina
.text:0000000000003000
.text:0000000000003000 ; size_t __fastcall hash_string(const char *string, size_t n_buckets)
.text:0000000000003000                 public hash_string
.text:0000000000003000 hash_string     proc near
.text:0000000000003000 ; __unwind {
.text:0000000000003000                 movzx   ecx, byte ptr [rdi]
.text:0000000000003003                 xor     edx, edx
.text:0000000000003005                 test    cl, cl
.text:0000000000003007                 jz      short loc_302D
.text:0000000000003009                 nop     dword ptr [rax+00000000h]
.text:0000000000003010
.text:0000000000003010 loc_3010:                               ; CODE XREF: hash_string+2B↓j
.text:0000000000003010                 mov     rax, rdx
.text:0000000000003013                 add     rdi, 1
.text:0000000000003017                 shl     rax, 5
.text:000000000000301B                 sub     rax, rdx
.text:000000000000301E                 xor     edx, edx
.text:0000000000003020                 add     rax, rcx
.text:0000000000003023                 movzx   ecx, byte ptr [rdi]
.text:0000000000003026                 div     rsi
.text:0000000000003029                 test    cl, cl
.text:000000000000302B                 jnz     short loc_3010
.text:000000000000302D
.text:000000000000302D loc_302D:                               ; CODE XREF: hash_string+7↑j
.text:000000000000302D                 mov     rax, rdx
.text:0000000000003030                 retn
.text:0000000000003030 ; } // starts at 3000
.text:0000000000003030 hash_string     endp
.text:0000000000003030
.text:0000000000003030 ; ---------------------------------------------------------------------------
.text:0000000000003031                 align 20h
.text:0000000000003040
.text:0000000000003040 ; =============== S U B R O U T I N E =======================================
.text:0000000000003040
.text:0000000000003040 ; Attributes: info_from_lumina
.text:0000000000003040
.text:0000000000003040 ; void __fastcall hash_reset_tuning(Hash_tuning *tuning)
.text:0000000000003040                 public hash_reset_tuning
.text:0000000000003040 hash_reset_tuning proc near
.text:0000000000003040 ; __unwind {
.text:0000000000003040                 mov     rax, 3F80000000000000h
.text:000000000000304A                 mov     byte ptr [rdi+10h], 0
.text:000000000000304E                 mov     [rdi], rax
.text:0000000000003051                 mov     rax, 3FB4FDF43F4CCCCDh
.text:000000000000305B                 mov     [rdi+8], rax
.text:000000000000305F                 retn
.text:000000000000305F ; } // starts at 3040
.text:000000000000305F hash_reset_tuning endp
.text:000000000000305F
.text:0000000000003060
.text:0000000000003060 ; =============== S U B R O U T I N E =======================================
.text:0000000000003060
.text:0000000000003060 ; Attributes: info_from_lumina
.text:0000000000003060
.text:0000000000003060 ; Hash_table *__fastcall hash_initialize(size_t candidate, const Hash_tuning *tuning, Hash_hasher hasher, Hash_comparator comparator, Hash_data_freer data_freer)
.text:0000000000003060                 public hash_initialize
.text:0000000000003060 hash_initialize proc near               ; CODE XREF: canonicalize_filename_mode+502↑p
.text:0000000000003060 ; __unwind {
.text:0000000000003060                 push    r15
.text:0000000000003062                 push    r14
.text:0000000000003064                 lea     rax, raw_hasher
.text:000000000000306B                 push    r13
.text:000000000000306D                 push    r12
.text:000000000000306F                 mov     r12, rdx
.text:0000000000003072                 push    rbp
.text:0000000000003073                 push    rbx
.text:0000000000003074                 mov     r13, rcx
.text:0000000000003077                 mov     rbp, rdi
.text:000000000000307A                 mov     edi, 50h ; 'P'  ; size
.text:000000000000307F                 mov     r15, rsi
.text:0000000000003082                 sub     rsp, 8
.text:0000000000003086                 test    rdx, rdx
.text:0000000000003089                 mov     r14, r8
.text:000000000000308C                 cmovz   r12, rax
.text:0000000000003090                 lea     rax, raw_comparator
.text:0000000000003097                 test    rcx, rcx
.text:000000000000309A                 cmovz   r13, rax
.text:000000000000309E                 call    _malloc
.text:00000000000030A3                 test    rax, rax
.text:00000000000030A6                 mov     rbx, rax
.text:00000000000030A9                 jz      loc_315A
.text:00000000000030AF                 test    r15, r15
.text:00000000000030B2                 lea     rdi, [rax+28h]
.text:00000000000030B6                 jz      loc_3170
.text:00000000000030BC                 mov     [rax+28h], r15
.text:00000000000030C0                 call    check_tuning
.text:00000000000030C5                 test    al, al
.text:00000000000030C7                 jz      loc_3150
.text:00000000000030CD                 cmp     byte ptr [r15+10h], 0
.text:00000000000030D2                 jz      loc_31D0
.text:00000000000030D8
.text:00000000000030D8 loc_30D8:                               ; CODE XREF: hash_initialize+16A↓j
.text:00000000000030D8                                         ; hash_initialize+1A5↓j
.text:00000000000030D8                 mov     rdi, rbp
.text:00000000000030DB                 call    next_prime
.text:00000000000030E0                 mov     edx, 8
.text:00000000000030E5                 mov     rbp, rax
.text:00000000000030E8                 xor     ecx, ecx
.text:00000000000030EA                 mov     rax, rdx
.text:00000000000030ED                 mul     rbp
.text:00000000000030F0                 jo      loc_320A
.text:00000000000030F6
.text:00000000000030F6 loc_30F6:                               ; CODE XREF: hash_initialize+1AF↓j
.text:00000000000030F6                 test    rax, rax
.text:00000000000030F9                 js      short loc_3150
.text:00000000000030FB                 test    rcx, rcx
.text:00000000000030FE                 jnz     short loc_3150
.text:0000000000003100                 test    rbp, rbp
.text:0000000000003103                 mov     [rbx+10h], rbp
.text:0000000000003107                 jz      short loc_3150
.text:0000000000003109                 mov     esi, 10h        ; size
.text:000000000000310E                 mov     rdi, rbp        ; nmemb
.text:0000000000003111                 call    _calloc
.text:0000000000003116                 test    rax, rax
.text:0000000000003119                 mov     [rbx], rax
.text:000000000000311C                 jz      short loc_3150
.text:000000000000311E                 shl     rbp, 4
.text:0000000000003122                 mov     qword ptr [rbx+18h], 0
.text:000000000000312A                 mov     qword ptr [rbx+20h], 0
.text:0000000000003132                 add     rbp, rax
.text:0000000000003135                 mov     [rbx+30h], r12
.text:0000000000003139                 mov     [rbx+38h], r13
.text:000000000000313D                 mov     [rbx+8], rbp
.text:0000000000003141                 mov     [rbx+40h], r14
.text:0000000000003145                 mov     qword ptr [rbx+48h], 0
.text:000000000000314D                 jmp     short loc_315A
.text:000000000000314D ; ---------------------------------------------------------------------------
.text:000000000000314F                 align 10h
.text:0000000000003150
.text:0000000000003150 loc_3150:                               ; CODE XREF: hash_initialize+67↑j
.text:0000000000003150                                         ; hash_initialize+99↑j ...
.text:0000000000003150                 mov     rdi, rbx        ; ptr
.text:0000000000003153                 xor     ebx, ebx
.text:0000000000003155                 call    _free
.text:000000000000315A
.text:000000000000315A loc_315A:                               ; CODE XREF: hash_initialize+49↑j
.text:000000000000315A                                         ; hash_initialize+ED↑j
.text:000000000000315A                 add     rsp, 8
.text:000000000000315E                 mov     rax, rbx
.text:0000000000003161                 pop     rbx
.text:0000000000003162                 pop     rbp
.text:0000000000003163                 pop     r12
.text:0000000000003165                 pop     r13
.text:0000000000003167                 pop     r14
.text:0000000000003169                 pop     r15
.text:000000000000316B                 retn
.text:000000000000316B ; ---------------------------------------------------------------------------
.text:000000000000316C                 align 10h
.text:0000000000003170
.text:0000000000003170 loc_3170:                               ; CODE XREF: hash_initialize+56↑j
.text:0000000000003170                 lea     rax, default_tuning
.text:0000000000003177                 mov     [rbx+28h], rax
.text:000000000000317B                 call    check_tuning
.text:0000000000003180                 test    al, al
.text:0000000000003182                 movss   xmm1, cs:dword_7078
.text:000000000000318A                 jz      short loc_3150
.text:000000000000318C                 test    rbp, rbp
.text:000000000000318F                 js      short loc_31DB
.text:0000000000003191
.text:0000000000003191 loc_3191:                               ; CODE XREF: hash_initialize+179↓j
.text:0000000000003191                 pxor    xmm0, xmm0
.text:0000000000003195                 cvtsi2ss xmm0, rbp
.text:000000000000319A
.text:000000000000319A loc_319A:                               ; CODE XREF: hash_initialize+194↓j
.text:000000000000319A                 divss   xmm0, xmm1
.text:000000000000319E                 ucomiss xmm0, cs:dword_707C
.text:00000000000031A5                 jnb     short loc_3150
.text:00000000000031A7                 ucomiss xmm0, cs:dword_7080
.text:00000000000031AE                 jb      short loc_3200
.text:00000000000031B0                 subss   xmm0, cs:dword_7080
.text:00000000000031B8                 mov     rax, 8000000000000000h
.text:00000000000031C2                 cvttss2si rbp, xmm0
.text:00000000000031C7                 xor     rbp, rax
.text:00000000000031CA                 jmp     loc_30D8
.text:00000000000031CA ; ---------------------------------------------------------------------------
.text:00000000000031CF                 align 10h
.text:00000000000031D0
.text:00000000000031D0 loc_31D0:                               ; CODE XREF: hash_initialize+72↑j
.text:00000000000031D0                 test    rbp, rbp
.text:00000000000031D3                 movss   xmm1, dword ptr [r15+8]
.text:00000000000031D9                 jns     short loc_3191
.text:00000000000031DB
.text:00000000000031DB loc_31DB:                               ; CODE XREF: hash_initialize+12F↑j
.text:00000000000031DB                 mov     rax, rbp
.text:00000000000031DE                 pxor    xmm0, xmm0
.text:00000000000031E2                 shr     rax, 1
.text:00000000000031E5                 and     ebp, 1
.text:00000000000031E8                 or      rax, rbp
.text:00000000000031EB                 cvtsi2ss xmm0, rax
.text:00000000000031F0                 addss   xmm0, xmm0
.text:00000000000031F4                 jmp     short loc_319A
.text:00000000000031F4 ; ---------------------------------------------------------------------------
.text:00000000000031F6                 align 20h
.text:0000000000003200
.text:0000000000003200 loc_3200:                               ; CODE XREF: hash_initialize+14E↑j
.text:0000000000003200                 cvttss2si rbp, xmm0
.text:0000000000003205                 jmp     loc_30D8
.text:000000000000320A ; ---------------------------------------------------------------------------
.text:000000000000320A
.text:000000000000320A loc_320A:                               ; CODE XREF: hash_initialize+90↑j
.text:000000000000320A                 mov     ecx, 1
.text:000000000000320F                 jmp     loc_30F6
.text:000000000000320F ; } // starts at 3060
.text:000000000000320F hash_initialize endp
.text:000000000000320F
.text:000000000000320F ; ---------------------------------------------------------------------------
.text:0000000000003214                 align 20h
.text:0000000000003220
.text:0000000000003220 ; =============== S U B R O U T I N E =======================================
.text:0000000000003220
.text:0000000000003220 ; Attributes: info_from_lumina
.text:0000000000003220
.text:0000000000003220 ; void __fastcall hash_clear(Hash_table *table)
.text:0000000000003220                 public hash_clear
.text:0000000000003220 hash_clear      proc near
.text:0000000000003220 ; __unwind {
.text:0000000000003220                 push    r12
.text:0000000000003222                 push    rbp
.text:0000000000003223                 mov     rbp, rdi
.text:0000000000003226                 push    rbx
.text:0000000000003227                 mov     r12, [rdi]
.text:000000000000322A                 cmp     r12, [rdi+8]
.text:000000000000322E                 jnb     short loc_329B
.text:0000000000003230
.text:0000000000003230 loc_3230:                               ; CODE XREF: hash_clear+79↓j
.text:0000000000003230                 cmp     qword ptr [r12], 0
.text:0000000000003235                 jz      short loc_3291
.text:0000000000003237                 mov     rbx, [r12+8]
.text:000000000000323C                 mov     rax, [rbp+40h]
.text:0000000000003240                 test    rbx, rbx
.text:0000000000003243                 jz      short loc_3275
.text:0000000000003245                 nop     dword ptr [rax]
.text:0000000000003248
.text:0000000000003248 loc_3248:                               ; CODE XREF: hash_clear+53↓j
.text:0000000000003248                 test    rax, rax
.text:000000000000324B                 jz      short loc_3256
.text:000000000000324D                 mov     rdi, [rbx]
.text:0000000000003250                 call    rax
.text:0000000000003252                 mov     rax, [rbp+40h]
.text:0000000000003256
.text:0000000000003256 loc_3256:                               ; CODE XREF: hash_clear+2B↑j
.text:0000000000003256                 mov     rdx, [rbx+8]
.text:000000000000325A                 mov     rcx, [rbp+48h]
.text:000000000000325E                 mov     qword ptr [rbx], 0
.text:0000000000003265                 test    rdx, rdx
.text:0000000000003268                 mov     [rbx+8], rcx
.text:000000000000326C                 mov     [rbp+48h], rbx
.text:0000000000003270                 mov     rbx, rdx
.text:0000000000003273                 jnz     short loc_3248
.text:0000000000003275
.text:0000000000003275 loc_3275:                               ; CODE XREF: hash_clear+23↑j
.text:0000000000003275                 test    rax, rax
.text:0000000000003278                 jz      short loc_3280
.text:000000000000327A                 mov     rdi, [r12]
.text:000000000000327E                 call    rax
.text:0000000000003280
.text:0000000000003280 loc_3280:                               ; CODE XREF: hash_clear+58↑j
.text:0000000000003280                 mov     qword ptr [r12], 0
.text:0000000000003288                 mov     qword ptr [r12+8], 0
.text:0000000000003291
.text:0000000000003291 loc_3291:                               ; CODE XREF: hash_clear+15↑j
.text:0000000000003291                 add     r12, 10h
.text:0000000000003295                 cmp     [rbp+8], r12
.text:0000000000003299                 ja      short loc_3230
.text:000000000000329B
.text:000000000000329B loc_329B:                               ; CODE XREF: hash_clear+E↑j
.text:000000000000329B                 mov     qword ptr [rbp+18h], 0
.text:00000000000032A3                 mov     qword ptr [rbp+20h], 0
.text:00000000000032AB                 pop     rbx
.text:00000000000032AC                 pop     rbp
.text:00000000000032AD                 pop     r12
.text:00000000000032AF                 retn
.text:00000000000032AF ; } // starts at 3220
.text:00000000000032AF hash_clear      endp
.text:00000000000032AF
.text:00000000000032B0
.text:00000000000032B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032B0
.text:00000000000032B0 ; Attributes: info_from_lumina
.text:00000000000032B0
.text:00000000000032B0 ; void __fastcall hash_free(Hash_table *table)
.text:00000000000032B0                 public hash_free
.text:00000000000032B0 hash_free       proc near               ; CODE XREF: canonicalize_filename_mode+219↑p
.text:00000000000032B0                                         ; canonicalize_filename_mode+393↑p
.text:00000000000032B0 ; __unwind {
.text:00000000000032B0                 push    r12
.text:00000000000032B2                 push    rbp
.text:00000000000032B3                 mov     r12, rdi
.text:00000000000032B6                 push    rbx
.text:00000000000032B7                 cmp     qword ptr [rdi+40h], 0
.text:00000000000032BC                 mov     rbp, [rdi]
.text:00000000000032BF                 mov     rax, [rdi+8]
.text:00000000000032C3                 jz      short loc_3313
.text:00000000000032C5                 cmp     qword ptr [rdi+20h], 0
.text:00000000000032CA                 jz      short loc_3313
.text:00000000000032CC                 cmp     rbp, rax
.text:00000000000032CF                 jnb     short loc_334C
.text:00000000000032D1                 nop     dword ptr [rax+00000000h]
.text:00000000000032D8
.text:00000000000032D8 loc_32D8:                               ; CODE XREF: hash_free+5D↓j
.text:00000000000032D8                 mov     rdi, [rbp+0]
.text:00000000000032DC                 test    rdi, rdi
.text:00000000000032DF                 jz      short loc_3306
.text:00000000000032E1                 mov     rbx, rbp
.text:00000000000032E4                 jmp     short loc_32F3
.text:00000000000032E4 ; ---------------------------------------------------------------------------
.text:00000000000032E6                 align 10h
.text:00000000000032F0
.text:00000000000032F0 loc_32F0:                               ; CODE XREF: hash_free+4F↓j
.text:00000000000032F0                 mov     rdi, [rbx]
.text:00000000000032F3
.text:00000000000032F3 loc_32F3:                               ; CODE XREF: hash_free+34↑j
.text:00000000000032F3                 call    qword ptr [r12+40h]
.text:00000000000032F8                 mov     rbx, [rbx+8]
.text:00000000000032FC                 test    rbx, rbx
.text:00000000000032FF                 jnz     short loc_32F0
.text:0000000000003301                 mov     rax, [r12+8]
.text:0000000000003306
.text:0000000000003306 loc_3306:                               ; CODE XREF: hash_free+2F↑j
.text:0000000000003306                 add     rbp, 10h
.text:000000000000330A                 cmp     rax, rbp
.text:000000000000330D                 ja      short loc_32D8
.text:000000000000330F                 mov     rbp, [r12]
.text:0000000000003313
.text:0000000000003313 loc_3313:                               ; CODE XREF: hash_free+13↑j
.text:0000000000003313                                         ; hash_free+1A↑j
.text:0000000000003313                 cmp     rbp, rax
.text:0000000000003316                 jnb     short loc_334C
.text:0000000000003318                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003320
.text:0000000000003320 loc_3320:                               ; CODE XREF: hash_free+9A↓j
.text:0000000000003320                 mov     rdi, [rbp+8]    ; ptr
.text:0000000000003324                 test    rdi, rdi
.text:0000000000003327                 jz      short loc_3341
.text:0000000000003329                 nop     dword ptr [rax+00000000h]
.text:0000000000003330
.text:0000000000003330 loc_3330:                               ; CODE XREF: hash_free+8F↓j
.text:0000000000003330                 mov     rbx, [rdi+8]
.text:0000000000003334                 call    _free
.text:0000000000003339                 test    rbx, rbx
.text:000000000000333C                 mov     rdi, rbx
.text:000000000000333F                 jnz     short loc_3330
.text:0000000000003341
.text:0000000000003341 loc_3341:                               ; CODE XREF: hash_free+77↑j
.text:0000000000003341                 add     rbp, 10h
.text:0000000000003345                 cmp     [r12+8], rbp
.text:000000000000334A                 ja      short loc_3320
.text:000000000000334C
.text:000000000000334C loc_334C:                               ; CODE XREF: hash_free+1F↑j
.text:000000000000334C                                         ; hash_free+66↑j
.text:000000000000334C                 mov     rdi, [r12+48h]  ; ptr
.text:0000000000003351                 test    rdi, rdi
.text:0000000000003354                 jz      short loc_3371
.text:0000000000003356                 db      2Eh
.text:0000000000003356                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003360
.text:0000000000003360 loc_3360:                               ; CODE XREF: hash_free+BF↓j
.text:0000000000003360                 mov     rbx, [rdi+8]
.text:0000000000003364                 call    _free
.text:0000000000003369                 test    rbx, rbx
.text:000000000000336C                 mov     rdi, rbx
.text:000000000000336F                 jnz     short loc_3360
.text:0000000000003371
.text:0000000000003371 loc_3371:                               ; CODE XREF: hash_free+A4↑j
.text:0000000000003371                 mov     rdi, [r12]      ; ptr
.text:0000000000003375                 call    _free
.text:000000000000337A                 pop     rbx
.text:000000000000337B                 mov     rdi, r12        ; ptr
.text:000000000000337E                 pop     rbp
.text:000000000000337F                 pop     r12
.text:0000000000003381                 jmp     _free
.text:0000000000003381 ; } // starts at 32B0
.text:0000000000003381 hash_free       endp
.text:0000000000003381
.text:0000000000003381 ; ---------------------------------------------------------------------------
.text:0000000000003386                 align 10h
.text:0000000000003390
.text:0000000000003390 ; =============== S U B R O U T I N E =======================================
.text:0000000000003390
.text:0000000000003390 ; Attributes: info_from_lumina
.text:0000000000003390
.text:0000000000003390 ; _Bool __fastcall hash_rehash(Hash_table *table, size_t candidate)
.text:0000000000003390                 public hash_rehash
.text:0000000000003390 hash_rehash     proc near               ; CODE XREF: hash_insert_if_absent+1BB↓p
.text:0000000000003390                                         ; hash_delete+10F↓p
.text:0000000000003390
.text:0000000000003390 ptr             = qword ptr -78h
.text:0000000000003390 var_70          = qword ptr -70h
.text:0000000000003390 var_68          = qword ptr -68h
.text:0000000000003390 var_60          = qword ptr -60h
.text:0000000000003390 var_58          = qword ptr -58h
.text:0000000000003390 var_50          = qword ptr -50h
.text:0000000000003390 var_48          = qword ptr -48h
.text:0000000000003390 var_40          = qword ptr -40h
.text:0000000000003390 var_38          = qword ptr -38h
.text:0000000000003390 var_30          = qword ptr -30h
.text:0000000000003390 var_20          = qword ptr -20h
.text:0000000000003390
.text:0000000000003390 ; __unwind {
.text:0000000000003390                 push    r12
.text:0000000000003392                 push    rbp
.text:0000000000003393                 mov     rbp, rdi
.text:0000000000003396                 push    rbx
.text:0000000000003397                 sub     rsp, 60h
.text:000000000000339B                 mov     r12, [rdi+28h]
.text:000000000000339F                 mov     rax, fs:28h
.text:00000000000033A8                 mov     [rsp+78h+var_20], rax
.text:00000000000033AD                 xor     eax, eax
.text:00000000000033AF                 cmp     byte ptr [r12+10h], 0
.text:00000000000033B5                 jnz     short loc_3408
.text:00000000000033B7                 test    rsi, rsi
.text:00000000000033BA                 js      loc_3538
.text:00000000000033C0                 pxor    xmm0, xmm0
.text:00000000000033C4                 cvtsi2ss xmm0, rsi
.text:00000000000033C9
.text:00000000000033C9 loc_33C9:                               ; CODE XREF: hash_rehash+1C1↓j
.text:00000000000033C9                 divss   xmm0, dword ptr [r12+8]
.text:00000000000033D0                 ucomiss xmm0, cs:dword_707C
.text:00000000000033D7                 jnb     loc_3510
.text:00000000000033DD                 ucomiss xmm0, cs:dword_7080
.text:00000000000033E4                 jb      loc_3560
.text:00000000000033EA                 subss   xmm0, cs:dword_7080
.text:00000000000033F2                 mov     rax, 8000000000000000h
.text:00000000000033FC                 cvttss2si rsi, xmm0
.text:0000000000003401                 xor     rsi, rax
.text:0000000000003404                 nop     dword ptr [rax+00h]
.text:0000000000003408
.text:0000000000003408 loc_3408:                               ; CODE XREF: hash_rehash+25↑j
.text:0000000000003408                                         ; hash_rehash+1D5↓j
.text:0000000000003408                 mov     rdi, rsi
.text:000000000000340B                 call    next_prime
.text:0000000000003410                 mov     edx, 8
.text:0000000000003415                 mov     rbx, rax
.text:0000000000003418                 xor     ecx, ecx
.text:000000000000341A                 mov     rax, rdx
.text:000000000000341D                 mul     rbx
.text:0000000000003420                 jo      loc_35BF
.text:0000000000003426
.text:0000000000003426 loc_3426:                               ; CODE XREF: hash_rehash+234↓j
.text:0000000000003426                 test    rax, rax
.text:0000000000003429                 mov     eax, 1
.text:000000000000342E                 cmovs   rcx, rax
.text:0000000000003432                 test    rbx, rbx
.text:0000000000003435                 jz      loc_3510
.text:000000000000343B                 and     ecx, 1
.text:000000000000343E                 jnz     loc_3510
.text:0000000000003444                 cmp     [rbp+10h], rbx
.text:0000000000003448                 jz      loc_3570
.text:000000000000344E                 mov     esi, 10h        ; size
.text:0000000000003453                 mov     rdi, rbx        ; nmemb
.text:0000000000003456                 call    _calloc
.text:000000000000345B                 test    rax, rax
.text:000000000000345E                 mov     [rsp+78h+ptr], rax
.text:0000000000003462                 jz      loc_3510
.text:0000000000003468                 mov     [rsp+78h+var_68], rbx
.text:000000000000346D                 shl     rbx, 4
.text:0000000000003471                 mov     [rsp+78h+var_50], r12
.text:0000000000003476                 add     rbx, rax
.text:0000000000003479                 mov     rax, [rbp+30h]
.text:000000000000347D                 mov     r12, rsp
.text:0000000000003480                 xor     edx, edx
.text:0000000000003482                 mov     rsi, rbp
.text:0000000000003485                 mov     rdi, r12
.text:0000000000003488                 mov     [rsp+78h+var_70], rbx
.text:000000000000348D                 mov     [rsp+78h+var_60], 0
.text:0000000000003496                 mov     [rsp+78h+var_48], rax
.text:000000000000349B                 mov     rax, [rbp+38h]
.text:000000000000349F                 mov     [rsp+78h+var_58], 0
.text:00000000000034A8                 mov     [rsp+78h+var_40], rax
.text:00000000000034AD                 mov     rax, [rbp+40h]
.text:00000000000034B1                 mov     [rsp+78h+var_38], rax
.text:00000000000034B6                 mov     rax, [rbp+48h]
.text:00000000000034BA                 mov     [rsp+78h+var_30], rax
.text:00000000000034BF                 call    transfer_entries
.text:00000000000034C4                 test    al, al
.text:00000000000034C6                 mov     ebx, eax
.text:00000000000034C8                 jnz     loc_3580
.text:00000000000034CE                 mov     rax, [rsp+78h+var_30]
.text:00000000000034D3                 mov     edx, 1
.text:00000000000034D8                 mov     rsi, r12
.text:00000000000034DB                 mov     rdi, rbp
.text:00000000000034DE                 mov     [rbp+48h], rax
.text:00000000000034E2                 call    transfer_entries
.text:00000000000034E7                 test    al, al
.text:00000000000034E9                 jz      loc_35C9
.text:00000000000034EF                 xor     edx, edx
.text:00000000000034F1                 mov     rsi, r12
.text:00000000000034F4                 mov     rdi, rbp
.text:00000000000034F7                 call    transfer_entries
.text:00000000000034FC                 test    al, al
.text:00000000000034FE                 jz      loc_35C9
.text:0000000000003504                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:0000000000003508                 call    _free
.text:000000000000350D                 jmp     short loc_3512
.text:000000000000350D ; ---------------------------------------------------------------------------
.text:000000000000350F                 align 10h
.text:0000000000003510
.text:0000000000003510 loc_3510:                               ; CODE XREF: hash_rehash+47↑j
.text:0000000000003510                                         ; hash_rehash+A5↑j ...
.text:0000000000003510                 xor     ebx, ebx
.text:0000000000003512
.text:0000000000003512 loc_3512:                               ; CODE XREF: hash_rehash+17D↑j
.text:0000000000003512                                         ; hash_rehash+1E5↓j ...
.text:0000000000003512                 mov     rcx, [rsp+78h+var_20]
.text:0000000000003517                 xor     rcx, fs:28h
.text:0000000000003520                 mov     eax, ebx
.text:0000000000003522                 jnz     loc_35BA
.text:0000000000003528                 add     rsp, 60h
.text:000000000000352C                 pop     rbx
.text:000000000000352D                 pop     rbp
.text:000000000000352E                 pop     r12
.text:0000000000003530                 retn
.text:0000000000003530 ; ---------------------------------------------------------------------------
.text:0000000000003531                 align 8
.text:0000000000003538
.text:0000000000003538 loc_3538:                               ; CODE XREF: hash_rehash+2A↑j
.text:0000000000003538                 mov     rax, rsi
.text:000000000000353B                 pxor    xmm0, xmm0
.text:000000000000353F                 shr     rax, 1
.text:0000000000003542                 and     esi, 1
.text:0000000000003545                 or      rax, rsi
.text:0000000000003548                 cvtsi2ss xmm0, rax
.text:000000000000354D                 addss   xmm0, xmm0
.text:0000000000003551                 jmp     loc_33C9
.text:0000000000003551 ; ---------------------------------------------------------------------------
.text:0000000000003556                 align 20h
.text:0000000000003560
.text:0000000000003560 loc_3560:                               ; CODE XREF: hash_rehash+54↑j
.text:0000000000003560                 cvttss2si rsi, xmm0
.text:0000000000003565                 jmp     loc_3408
.text:0000000000003565 ; ---------------------------------------------------------------------------
.text:000000000000356A                 align 10h
.text:0000000000003570
.text:0000000000003570 loc_3570:                               ; CODE XREF: hash_rehash+B8↑j
.text:0000000000003570                 mov     ebx, 1
.text:0000000000003575                 jmp     short loc_3512
.text:0000000000003575 ; ---------------------------------------------------------------------------
.text:0000000000003577                 align 20h
.text:0000000000003580
.text:0000000000003580 loc_3580:                               ; CODE XREF: hash_rehash+138↑j
.text:0000000000003580                 mov     rdi, [rbp+0]    ; ptr
.text:0000000000003584                 call    _free
.text:0000000000003589                 mov     rax, [rsp+78h+ptr]
.text:000000000000358D                 mov     [rbp+0], rax
.text:0000000000003591                 mov     rax, [rsp+78h+var_70]
.text:0000000000003596                 mov     [rbp+8], rax
.text:000000000000359A                 mov     rax, [rsp+78h+var_68]
.text:000000000000359F                 mov     [rbp+10h], rax
.text:00000000000035A3                 mov     rax, [rsp+78h+var_60]
.text:00000000000035A8                 mov     [rbp+18h], rax
.text:00000000000035AC                 mov     rax, [rsp+78h+var_30]
.text:00000000000035B1                 mov     [rbp+48h], rax
.text:00000000000035B5                 jmp     loc_3512
.text:00000000000035BA ; ---------------------------------------------------------------------------
.text:00000000000035BA
.text:00000000000035BA loc_35BA:                               ; CODE XREF: hash_rehash+192↑j
.text:00000000000035BA                 call    ___stack_chk_fail
.text:00000000000035BF ; ---------------------------------------------------------------------------
.text:00000000000035BF
.text:00000000000035BF loc_35BF:                               ; CODE XREF: hash_rehash+90↑j
.text:00000000000035BF                 mov     ecx, 1
.text:00000000000035C4                 jmp     loc_3426
.text:00000000000035C9 ; ---------------------------------------------------------------------------
.text:00000000000035C9
.text:00000000000035C9 loc_35C9:                               ; CODE XREF: hash_rehash+159↑j
.text:00000000000035C9                                         ; hash_rehash+16E↑j
.text:00000000000035C9                 call    _abort
.text:00000000000035C9 ; } // starts at 3390
.text:00000000000035C9 hash_rehash     endp
.text:00000000000035C9
.text:00000000000035C9 ; ---------------------------------------------------------------------------
.text:00000000000035CE                 align 10h
.text:00000000000035D0
.text:00000000000035D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035D0
.text:00000000000035D0 ; Attributes: info_from_lumina
.text:00000000000035D0
.text:00000000000035D0 ; int __fastcall hash_insert_if_absent(Hash_table *table, const void *entry, const void **matched_ent)
.text:00000000000035D0                 public hash_insert_if_absent
.text:00000000000035D0 hash_insert_if_absent proc near         ; CODE XREF: hash_insert+1B↓p
.text:00000000000035D0
.text:00000000000035D0 var_38          = qword ptr -38h
.text:00000000000035D0 var_30          = qword ptr -30h
.text:00000000000035D0
.text:00000000000035D0 ; __unwind {
.text:00000000000035D0                 push    r13
.text:00000000000035D2                 push    r12
.text:00000000000035D4                 push    rbp
.text:00000000000035D5                 push    rbx
.text:00000000000035D6                 sub     rsp, 18h
.text:00000000000035DA                 mov     rax, fs:28h
.text:00000000000035E3                 mov     [rsp+38h+var_30], rax
.text:00000000000035E8                 xor     eax, eax
.text:00000000000035EA                 test    rsi, rsi
.text:00000000000035ED                 jz      loc_37AD
.text:00000000000035F3                 mov     r12, rsp
.text:00000000000035F6                 xor     ecx, ecx
.text:00000000000035F8                 mov     r13, rdx
.text:00000000000035FB                 mov     rdx, r12
.text:00000000000035FE                 mov     rbx, rdi
.text:0000000000003601                 mov     rbp, rsi
.text:0000000000003604                 call    hash_find_entry
.text:0000000000003609                 test    rax, rax
.text:000000000000360C                 mov     rdx, rax
.text:000000000000360F                 jz      short loc_3640
.text:0000000000003611                 xor     eax, eax
.text:0000000000003613                 test    r13, r13
.text:0000000000003616                 jz      short loc_361C
.text:0000000000003618                 mov     [r13+0], rdx
.text:000000000000361C
.text:000000000000361C loc_361C:                               ; CODE XREF: hash_insert_if_absent+46↑j
.text:000000000000361C                                         ; hash_insert_if_absent+E9↓j ...
.text:000000000000361C                 mov     rcx, [rsp+38h+var_30]
.text:0000000000003621                 xor     rcx, fs:28h
.text:000000000000362A                 jnz     loc_384F
.text:0000000000003630                 add     rsp, 18h
.text:0000000000003634                 pop     rbx
.text:0000000000003635                 pop     rbp
.text:0000000000003636                 pop     r12
.text:0000000000003638                 pop     r13
.text:000000000000363A                 retn
.text:000000000000363A ; ---------------------------------------------------------------------------
.text:000000000000363B                 align 20h
.text:0000000000003640
.text:0000000000003640 loc_3640:                               ; CODE XREF: hash_insert_if_absent+3F↑j
.text:0000000000003640                 mov     rax, [rbx+18h]
.text:0000000000003644                 test    rax, rax
.text:0000000000003647                 js      short loc_36C0
.text:0000000000003649                 pxor    xmm1, xmm1
.text:000000000000364D                 mov     rdx, [rbx+28h]
.text:0000000000003651                 cvtsi2ss xmm1, rax
.text:0000000000003656                 mov     rax, [rbx+10h]
.text:000000000000365A                 test    rax, rax
.text:000000000000365D                 js      loc_36EA
.text:0000000000003663
.text:0000000000003663 loc_3663:                               ; CODE XREF: hash_insert_if_absent+114↓j
.text:0000000000003663                 pxor    xmm0, xmm0
.text:0000000000003667                 cvtsi2ss xmm0, rax
.text:000000000000366C
.text:000000000000366C loc_366C:                               ; CODE XREF: hash_insert_if_absent+133↓j
.text:000000000000366C                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000003671                 ucomiss xmm1, xmm0
.text:0000000000003674                 ja      loc_3710
.text:000000000000367A
.text:000000000000367A loc_367A:                               ; CODE XREF: hash_insert_if_absent+188↓j
.text:000000000000367A                                         ; hash_insert_if_absent+1D7↓j
.text:000000000000367A                 mov     r12, [rsp+38h+var_38]
.text:000000000000367E                 cmp     qword ptr [r12], 0
.text:0000000000003683                 jz      loc_37B8
.text:0000000000003689                 mov     rax, [rbx+48h]
.text:000000000000368D                 test    rax, rax
.text:0000000000003690                 jz      loc_37D0
.text:0000000000003696                 mov     rdx, [rax+8]
.text:000000000000369A                 mov     [rbx+48h], rdx
.text:000000000000369E
.text:000000000000369E loc_369E:                               ; CODE XREF: hash_insert_if_absent+20D↓j
.text:000000000000369E                 mov     rdx, [r12+8]
.text:00000000000036A3                 mov     [rax], rbp
.text:00000000000036A6                 mov     [rax+8], rdx
.text:00000000000036AA                 mov     [r12+8], rax
.text:00000000000036AF                 mov     eax, 1
.text:00000000000036B4                 add     qword ptr [rbx+20h], 1
.text:00000000000036B9                 jmp     loc_361C
.text:00000000000036B9 ; ---------------------------------------------------------------------------
.text:00000000000036BE                 align 20h
.text:00000000000036C0
.text:00000000000036C0 loc_36C0:                               ; CODE XREF: hash_insert_if_absent+77↑j
.text:00000000000036C0                 mov     rdx, rax
.text:00000000000036C3                 pxor    xmm1, xmm1
.text:00000000000036C7                 and     eax, 1
.text:00000000000036CA                 shr     rdx, 1
.text:00000000000036CD                 or      rdx, rax
.text:00000000000036D0                 mov     rax, [rbx+10h]
.text:00000000000036D4                 cvtsi2ss xmm1, rdx
.text:00000000000036D9                 mov     rdx, [rbx+28h]
.text:00000000000036DD                 test    rax, rax
.text:00000000000036E0                 addss   xmm1, xmm1
.text:00000000000036E4                 jns     loc_3663
.text:00000000000036EA
.text:00000000000036EA loc_36EA:                               ; CODE XREF: hash_insert_if_absent+8D↑j
.text:00000000000036EA                 mov     rcx, rax
.text:00000000000036ED                 pxor    xmm0, xmm0
.text:00000000000036F1                 shr     rcx, 1
.text:00000000000036F4                 and     eax, 1
.text:00000000000036F7                 or      rcx, rax
.text:00000000000036FA                 cvtsi2ss xmm0, rcx
.text:00000000000036FF                 addss   xmm0, xmm0
.text:0000000000003703                 jmp     loc_366C
.text:0000000000003703 ; ---------------------------------------------------------------------------
.text:0000000000003708                 align 10h
.text:0000000000003710
.text:0000000000003710 loc_3710:                               ; CODE XREF: hash_insert_if_absent+A4↑j
.text:0000000000003710                 lea     rdi, [rbx+28h]
.text:0000000000003714                 call    check_tuning
.text:0000000000003719                 mov     rax, [rbx+10h]
.text:000000000000371D                 mov     rdx, [rbx+28h]
.text:0000000000003721                 test    rax, rax
.text:0000000000003724                 movss   xmm2, dword ptr [rdx+8]
.text:0000000000003729                 js      loc_37F0
.text:000000000000372F                 pxor    xmm0, xmm0
.text:0000000000003733                 cvtsi2ss xmm0, rax
.text:0000000000003738
.text:0000000000003738 loc_3738:                               ; CODE XREF: hash_insert_if_absent+239↓j
.text:0000000000003738                 mov     rax, [rbx+18h]
.text:000000000000373C                 test    rax, rax
.text:000000000000373F                 js      loc_3810
.text:0000000000003745                 pxor    xmm1, xmm1
.text:0000000000003749                 cvtsi2ss xmm1, rax
.text:000000000000374E
.text:000000000000374E loc_374E:                               ; CODE XREF: hash_insert_if_absent+259↓j
.text:000000000000374E                 movaps  xmm3, xmm2
.text:0000000000003751                 mulss   xmm3, xmm0
.text:0000000000003755                 ucomiss xmm1, xmm3
.text:0000000000003758                 jbe     loc_367A
.text:000000000000375E                 cmp     byte ptr [rdx+10h], 0
.text:0000000000003762                 mulss   xmm0, dword ptr [rdx+0Ch]
.text:0000000000003767                 jnz     short loc_376D
.text:0000000000003769                 mulss   xmm0, xmm2
.text:000000000000376D
.text:000000000000376D loc_376D:                               ; CODE XREF: hash_insert_if_absent+197↑j
.text:000000000000376D                 ucomiss xmm0, cs:dword_707C
.text:0000000000003774                 jnb     short loc_37E3
.text:0000000000003776                 ucomiss xmm0, cs:dword_7080
.text:000000000000377D                 jnb     loc_3830
.text:0000000000003783                 cvttss2si rsi, xmm0
.text:0000000000003788
.text:0000000000003788 loc_3788:                               ; CODE XREF: hash_insert_if_absent+27A↓j
.text:0000000000003788                 mov     rdi, rbx
.text:000000000000378B                 call    hash_rehash
.text:0000000000003790                 test    al, al
.text:0000000000003792                 jz      short loc_37E3
.text:0000000000003794                 xor     ecx, ecx
.text:0000000000003796                 mov     rdx, r12
.text:0000000000003799                 mov     rsi, rbp
.text:000000000000379C                 mov     rdi, rbx
.text:000000000000379F                 call    hash_find_entry
.text:00000000000037A4                 test    rax, rax
.text:00000000000037A7                 jz      loc_367A
.text:00000000000037AD
.text:00000000000037AD loc_37AD:                               ; CODE XREF: hash_insert_if_absent+1D↑j
.text:00000000000037AD                 call    _abort
.text:00000000000037AD ; ---------------------------------------------------------------------------
.text:00000000000037B2                 align 8
.text:00000000000037B8
.text:00000000000037B8 loc_37B8:                               ; CODE XREF: hash_insert_if_absent+B3↑j
.text:00000000000037B8                 mov     [r12], rbp
.text:00000000000037BC                 mov     eax, 1
.text:00000000000037C1                 add     qword ptr [rbx+20h], 1
.text:00000000000037C6                 add     qword ptr [rbx+18h], 1
.text:00000000000037CB                 jmp     loc_361C
.text:00000000000037D0 ; ---------------------------------------------------------------------------
.text:00000000000037D0
.text:00000000000037D0 loc_37D0:                               ; CODE XREF: hash_insert_if_absent+C0↑j
.text:00000000000037D0                 mov     edi, 10h        ; size
.text:00000000000037D5                 call    _malloc
.text:00000000000037DA                 test    rax, rax
.text:00000000000037DD                 jnz     loc_369E
.text:00000000000037E3
.text:00000000000037E3 loc_37E3:                               ; CODE XREF: hash_insert_if_absent+1A4↑j
.text:00000000000037E3                                         ; hash_insert_if_absent+1C2↑j
.text:00000000000037E3                 mov     eax, 0FFFFFFFFh
.text:00000000000037E8                 jmp     loc_361C
.text:00000000000037E8 ; ---------------------------------------------------------------------------
.text:00000000000037ED                 align 10h
.text:00000000000037F0
.text:00000000000037F0 loc_37F0:                               ; CODE XREF: hash_insert_if_absent+159↑j
.text:00000000000037F0                 mov     rcx, rax
.text:00000000000037F3                 pxor    xmm0, xmm0
.text:00000000000037F7                 shr     rcx, 1
.text:00000000000037FA                 and     eax, 1
.text:00000000000037FD                 or      rcx, rax
.text:0000000000003800                 cvtsi2ss xmm0, rcx
.text:0000000000003805                 addss   xmm0, xmm0
.text:0000000000003809                 jmp     loc_3738
.text:0000000000003809 ; ---------------------------------------------------------------------------
.text:000000000000380E                 align 10h
.text:0000000000003810
.text:0000000000003810 loc_3810:                               ; CODE XREF: hash_insert_if_absent+16F↑j
.text:0000000000003810                 mov     rcx, rax
.text:0000000000003813                 pxor    xmm1, xmm1
.text:0000000000003817                 shr     rcx, 1
.text:000000000000381A                 and     eax, 1
.text:000000000000381D                 or      rcx, rax
.text:0000000000003820                 cvtsi2ss xmm1, rcx
.text:0000000000003825                 addss   xmm1, xmm1
.text:0000000000003829                 jmp     loc_374E
.text:0000000000003829 ; ---------------------------------------------------------------------------
.text:000000000000382E                 align 10h
.text:0000000000003830
.text:0000000000003830 loc_3830:                               ; CODE XREF: hash_insert_if_absent+1AD↑j
.text:0000000000003830                 subss   xmm0, cs:dword_7080
.text:0000000000003838                 mov     rax, 8000000000000000h
.text:0000000000003842                 cvttss2si rsi, xmm0
.text:0000000000003847                 xor     rsi, rax
.text:000000000000384A                 jmp     loc_3788
.text:000000000000384F ; ---------------------------------------------------------------------------
.text:000000000000384F
.text:000000000000384F loc_384F:                               ; CODE XREF: hash_insert_if_absent+5A↑j
.text:000000000000384F                 call    ___stack_chk_fail
.text:000000000000384F ; } // starts at 35D0
.text:000000000000384F hash_insert_if_absent endp
.text:000000000000384F
.text:000000000000384F ; ---------------------------------------------------------------------------
.text:0000000000003854                 align 20h
.text:0000000000003860
.text:0000000000003860 ; =============== S U B R O U T I N E =======================================
.text:0000000000003860
.text:0000000000003860 ; Attributes: info_from_lumina
.text:0000000000003860
.text:0000000000003860 ; void *__fastcall hash_insert(Hash_table *table, const void *entry)
.text:0000000000003860                 public hash_insert
.text:0000000000003860 hash_insert     proc near               ; CODE XREF: record_file+46↑p
.text:0000000000003860
.text:0000000000003860 var_18          = qword ptr -18h
.text:0000000000003860 var_10          = qword ptr -10h
.text:0000000000003860
.text:0000000000003860 ; __unwind {
.text:0000000000003860                 push    rbx
.text:0000000000003861                 mov     rbx, rsi
.text:0000000000003864                 sub     rsp, 10h
.text:0000000000003868                 mov     rdx, rsp
.text:000000000000386B                 mov     rax, fs:28h
.text:0000000000003874                 mov     [rsp+18h+var_10], rax
.text:0000000000003879                 xor     eax, eax
.text:000000000000387B                 call    hash_insert_if_absent
.text:0000000000003880                 cmp     eax, 0FFFFFFFFh
.text:0000000000003883                 jz      short loc_38B0
.text:0000000000003885                 test    eax, eax
.text:0000000000003887                 jnz     short loc_388D
.text:0000000000003889                 mov     rbx, [rsp+18h+var_18]
.text:000000000000388D
.text:000000000000388D loc_388D:                               ; CODE XREF: hash_insert+27↑j
.text:000000000000388D                                         ; hash_insert+52↓j
.text:000000000000388D                 mov     rcx, [rsp+18h+var_10]
.text:0000000000003892                 xor     rcx, fs:28h
.text:000000000000389B                 mov     rax, rbx
.text:000000000000389E                 jnz     short loc_38B4
.text:00000000000038A0                 add     rsp, 10h
.text:00000000000038A4                 pop     rbx
.text:00000000000038A5                 retn
.text:00000000000038A5 ; ---------------------------------------------------------------------------
.text:00000000000038A6                 align 10h
.text:00000000000038B0
.text:00000000000038B0 loc_38B0:                               ; CODE XREF: hash_insert+23↑j
.text:00000000000038B0                 xor     ebx, ebx
.text:00000000000038B2                 jmp     short loc_388D
.text:00000000000038B4 ; ---------------------------------------------------------------------------
.text:00000000000038B4
.text:00000000000038B4 loc_38B4:                               ; CODE XREF: hash_insert+3E↑j
.text:00000000000038B4                 call    ___stack_chk_fail
.text:00000000000038B4 ; } // starts at 3860
.text:00000000000038B4 hash_insert     endp
.text:00000000000038B4
.text:00000000000038B4 ; ---------------------------------------------------------------------------
.text:00000000000038B9                 align 20h
.text:00000000000038C0
.text:00000000000038C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038C0
.text:00000000000038C0 ; Attributes: info_from_lumina
.text:00000000000038C0
.text:00000000000038C0 ; void *__fastcall hash_delete(Hash_table *table, const void *entry)
.text:00000000000038C0                 public hash_delete
.text:00000000000038C0 hash_delete     proc near
.text:00000000000038C0
.text:00000000000038C0 var_28          = qword ptr -28h
.text:00000000000038C0 var_20          = qword ptr -20h
.text:00000000000038C0
.text:00000000000038C0 ; __unwind {
.text:00000000000038C0                 push    r12
.text:00000000000038C2                 push    rbp
.text:00000000000038C3                 mov     ecx, 1
.text:00000000000038C8                 push    rbx
.text:00000000000038C9                 mov     rbx, rdi
.text:00000000000038CC                 sub     rsp, 10h
.text:00000000000038D0                 mov     rdx, rsp
.text:00000000000038D3                 mov     rax, fs:28h
.text:00000000000038DC                 mov     [rsp+28h+var_20], rax
.text:00000000000038E1                 xor     eax, eax
.text:00000000000038E3                 call    hash_find_entry
.text:00000000000038E8                 test    rax, rax
.text:00000000000038EB                 mov     rbp, rax
.text:00000000000038EE                 jz      short loc_38FF
.text:00000000000038F0                 mov     rax, [rsp+28h+var_28]
.text:00000000000038F4                 sub     qword ptr [rbx+20h], 1
.text:00000000000038F9                 cmp     qword ptr [rax], 0
.text:00000000000038FD                 jz      short loc_3920
.text:00000000000038FF
.text:00000000000038FF loc_38FF:                               ; CODE XREF: hash_delete+2E↑j
.text:00000000000038FF                                         ; hash_delete+9F↓j ...
.text:00000000000038FF                 mov     rcx, [rsp+28h+var_20]
.text:0000000000003904                 xor     rcx, fs:28h
.text:000000000000390D                 mov     rax, rbp
.text:0000000000003910                 jnz     loc_3ABE
.text:0000000000003916                 add     rsp, 10h
.text:000000000000391A                 pop     rbx
.text:000000000000391B                 pop     rbp
.text:000000000000391C                 pop     r12
.text:000000000000391E                 retn
.text:000000000000391E ; ---------------------------------------------------------------------------
.text:000000000000391F                 align 20h
.text:0000000000003920
.text:0000000000003920 loc_3920:                               ; CODE XREF: hash_delete+3D↑j
.text:0000000000003920                 mov     rax, [rbx+18h]
.text:0000000000003924                 sub     rax, 1
.text:0000000000003928                 test    rax, rax
.text:000000000000392B                 mov     [rbx+18h], rax
.text:000000000000392F                 js      loc_3A30
.text:0000000000003935                 pxor    xmm0, xmm0
.text:0000000000003939                 cvtsi2ss xmm0, rax
.text:000000000000393E
.text:000000000000393E loc_393E:                               ; CODE XREF: hash_delete+189↓j
.text:000000000000393E                 mov     rax, [rbx+10h]
.text:0000000000003942                 mov     rdx, [rbx+28h]
.text:0000000000003946                 test    rax, rax
.text:0000000000003949                 js      loc_3A10
.text:000000000000394F                 pxor    xmm1, xmm1
.text:0000000000003953                 cvtsi2ss xmm1, rax
.text:0000000000003958
.text:0000000000003958 loc_3958:                               ; CODE XREF: hash_delete+169↓j
.text:0000000000003958                 mulss   xmm1, dword ptr [rdx]
.text:000000000000395C                 ucomiss xmm1, xmm0
.text:000000000000395F                 jbe     short loc_38FF
.text:0000000000003961                 lea     rdi, [rbx+28h]
.text:0000000000003965                 call    check_tuning
.text:000000000000396A                 mov     rax, [rbx+10h]
.text:000000000000396E                 mov     rdx, [rbx+28h]
.text:0000000000003972                 test    rax, rax
.text:0000000000003975                 js      loc_3AA0
.text:000000000000397B                 pxor    xmm0, xmm0
.text:000000000000397F                 cvtsi2ss xmm0, rax
.text:0000000000003984
.text:0000000000003984 loc_3984:                               ; CODE XREF: hash_delete+1F9↓j
.text:0000000000003984                 mov     rax, [rbx+18h]
.text:0000000000003988                 test    rax, rax
.text:000000000000398B                 js      loc_3A80
.text:0000000000003991                 pxor    xmm1, xmm1
.text:0000000000003995                 cvtsi2ss xmm1, rax
.text:000000000000399A
.text:000000000000399A loc_399A:                               ; CODE XREF: hash_delete+1D9↓j
.text:000000000000399A                 movss   xmm2, dword ptr [rdx]
.text:000000000000399E                 mulss   xmm2, xmm0
.text:00000000000039A2                 ucomiss xmm2, xmm1
.text:00000000000039A5                 jbe     loc_38FF
.text:00000000000039AB                 cmp     byte ptr [rdx+10h], 0
.text:00000000000039AF                 mulss   xmm0, dword ptr [rdx+4]
.text:00000000000039B4                 jz      loc_3A70
.text:00000000000039BA
.text:00000000000039BA loc_39BA:                               ; CODE XREF: hash_delete+1B5↓j
.text:00000000000039BA                 ucomiss xmm0, cs:dword_7080
.text:00000000000039C1                 jnb     loc_3A50
.text:00000000000039C7                 cvttss2si rsi, xmm0
.text:00000000000039CC
.text:00000000000039CC loc_39CC:                               ; CODE XREF: hash_delete+1AA↓j
.text:00000000000039CC                 mov     rdi, rbx
.text:00000000000039CF                 call    hash_rehash
.text:00000000000039D4                 test    al, al
.text:00000000000039D6                 jnz     loc_38FF
.text:00000000000039DC                 mov     rdi, [rbx+48h]  ; ptr
.text:00000000000039E0                 test    rdi, rdi
.text:00000000000039E3                 jz      short loc_39F9
.text:00000000000039E5                 nop     dword ptr [rax]
.text:00000000000039E8
.text:00000000000039E8 loc_39E8:                               ; CODE XREF: hash_delete+137↓j
.text:00000000000039E8                 mov     r12, [rdi+8]
.text:00000000000039EC                 call    _free
.text:00000000000039F1                 test    r12, r12
.text:00000000000039F4                 mov     rdi, r12
.text:00000000000039F7                 jnz     short loc_39E8
.text:00000000000039F9
.text:00000000000039F9 loc_39F9:                               ; CODE XREF: hash_delete+123↑j
.text:00000000000039F9                 mov     qword ptr [rbx+48h], 0
.text:0000000000003A01                 jmp     loc_38FF
.text:0000000000003A01 ; ---------------------------------------------------------------------------
.text:0000000000003A06                 align 10h
.text:0000000000003A10
.text:0000000000003A10 loc_3A10:                               ; CODE XREF: hash_delete+89↑j
.text:0000000000003A10                 mov     rcx, rax
.text:0000000000003A13                 pxor    xmm1, xmm1
.text:0000000000003A17                 shr     rcx, 1
.text:0000000000003A1A                 and     eax, 1
.text:0000000000003A1D                 or      rcx, rax
.text:0000000000003A20                 cvtsi2ss xmm1, rcx
.text:0000000000003A25                 addss   xmm1, xmm1
.text:0000000000003A29                 jmp     loc_3958
.text:0000000000003A29 ; ---------------------------------------------------------------------------
.text:0000000000003A2E                 align 10h
.text:0000000000003A30
.text:0000000000003A30 loc_3A30:                               ; CODE XREF: hash_delete+6F↑j
.text:0000000000003A30                 mov     rdx, rax
.text:0000000000003A33                 pxor    xmm0, xmm0
.text:0000000000003A37                 shr     rdx, 1
.text:0000000000003A3A                 and     eax, 1
.text:0000000000003A3D                 or      rdx, rax
.text:0000000000003A40                 cvtsi2ss xmm0, rdx
.text:0000000000003A45                 addss   xmm0, xmm0
.text:0000000000003A49                 jmp     loc_393E
.text:0000000000003A49 ; ---------------------------------------------------------------------------
.text:0000000000003A4E                 align 10h
.text:0000000000003A50
.text:0000000000003A50 loc_3A50:                               ; CODE XREF: hash_delete+101↑j
.text:0000000000003A50                 subss   xmm0, cs:dword_7080
.text:0000000000003A58                 mov     rax, 8000000000000000h
.text:0000000000003A62                 cvttss2si rsi, xmm0
.text:0000000000003A67                 xor     rsi, rax
.text:0000000000003A6A                 jmp     loc_39CC
.text:0000000000003A6A ; ---------------------------------------------------------------------------
.text:0000000000003A6F                 align 10h
.text:0000000000003A70
.text:0000000000003A70 loc_3A70:                               ; CODE XREF: hash_delete+F4↑j
.text:0000000000003A70                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000003A75                 jmp     loc_39BA
.text:0000000000003A75 ; ---------------------------------------------------------------------------
.text:0000000000003A7A                 align 20h
.text:0000000000003A80
.text:0000000000003A80 loc_3A80:                               ; CODE XREF: hash_delete+CB↑j
.text:0000000000003A80                 mov     rcx, rax
.text:0000000000003A83                 pxor    xmm1, xmm1
.text:0000000000003A87                 shr     rcx, 1
.text:0000000000003A8A                 and     eax, 1
.text:0000000000003A8D                 or      rcx, rax
.text:0000000000003A90                 cvtsi2ss xmm1, rcx
.text:0000000000003A95                 addss   xmm1, xmm1
.text:0000000000003A99                 jmp     loc_399A
.text:0000000000003A99 ; ---------------------------------------------------------------------------
.text:0000000000003A9E                 align 20h
.text:0000000000003AA0
.text:0000000000003AA0 loc_3AA0:                               ; CODE XREF: hash_delete+B5↑j
.text:0000000000003AA0                 mov     rcx, rax
.text:0000000000003AA3                 pxor    xmm0, xmm0
.text:0000000000003AA7                 shr     rcx, 1
.text:0000000000003AAA                 and     eax, 1
.text:0000000000003AAD                 or      rcx, rax
.text:0000000000003AB0                 cvtsi2ss xmm0, rcx
.text:0000000000003AB5                 addss   xmm0, xmm0
.text:0000000000003AB9                 jmp     loc_3984
.text:0000000000003ABE ; ---------------------------------------------------------------------------
.text:0000000000003ABE
.text:0000000000003ABE loc_3ABE:                               ; CODE XREF: hash_delete+50↑j
.text:0000000000003ABE                 call    ___stack_chk_fail
.text:0000000000003ABE ; } // starts at 38C0
.text:0000000000003ABE hash_delete     endp
.text:0000000000003ABE
.text:0000000000003ABE ; ---------------------------------------------------------------------------
.text:0000000000003AC3                 align 10h
.text:0000000000003AD0
.text:0000000000003AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AD0
.text:0000000000003AD0 ; Attributes: info_from_lumina
.text:0000000000003AD0
.text:0000000000003AD0 ; size_t __fastcall triple_hash(const void *x, size_t table_size)
.text:0000000000003AD0                 public triple_hash
.text:0000000000003AD0 triple_hash     proc near               ; DATA XREF: canonicalize_filename_mode+4F6↑o
.text:0000000000003AD0 ; __unwind {
.text:0000000000003AD0                 push    rbp
.text:0000000000003AD1                 push    rbx
.text:0000000000003AD2                 mov     rbp, rdi
.text:0000000000003AD5                 mov     rbx, rsi
.text:0000000000003AD8                 sub     rsp, 8
.text:0000000000003ADC                 mov     rdi, [rdi]
.text:0000000000003ADF                 call    hash_pjw
.text:0000000000003AE4                 xor     rax, [rbp+8]
.text:0000000000003AE8                 xor     edx, edx
.text:0000000000003AEA                 add     rsp, 8
.text:0000000000003AEE                 div     rbx
.text:0000000000003AF1                 pop     rbx
.text:0000000000003AF2                 pop     rbp
.text:0000000000003AF3                 mov     rax, rdx
.text:0000000000003AF6                 retn
.text:0000000000003AF6 ; } // starts at 3AD0
.text:0000000000003AF6 triple_hash     endp
.text:0000000000003AF6
.text:0000000000003AF6 ; ---------------------------------------------------------------------------
.text:0000000000003AF7                 align 20h
.text:0000000000003B00
.text:0000000000003B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B00
.text:0000000000003B00
.text:0000000000003B00                 public triple_hash_no_name
.text:0000000000003B00 triple_hash_no_name proc near
.text:0000000000003B00 ; __unwind {
.text:0000000000003B00                 mov     rax, [rdi+8]
.text:0000000000003B04                 xor     edx, edx
.text:0000000000003B06                 div     rsi
.text:0000000000003B09                 mov     rax, rdx
.text:0000000000003B0C                 retn
.text:0000000000003B0C ; } // starts at 3B00
.text:0000000000003B0C triple_hash_no_name endp
.text:0000000000003B0C
.text:0000000000003B0C ; ---------------------------------------------------------------------------
.text:0000000000003B0D                 align 10h
.text:0000000000003B10
.text:0000000000003B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B10
.text:0000000000003B10 ; Attributes: info_from_lumina
.text:0000000000003B10
.text:0000000000003B10 ; _Bool __fastcall triple_compare(const void *x, const void *y)
.text:0000000000003B10                 public triple_compare
.text:0000000000003B10 triple_compare  proc near
.text:0000000000003B10 ; __unwind {
.text:0000000000003B10                 xor     eax, eax
.text:0000000000003B12                 mov     rdx, [rsi+8]
.text:0000000000003B16                 cmp     [rdi+8], rdx
.text:0000000000003B1A                 jz      short loc_3B20
.text:0000000000003B1C
.text:0000000000003B1C locret_3B1C:                            ; CODE XREF: triple_compare+18↓j
.text:0000000000003B1C                 rep retn
.text:0000000000003B1C ; ---------------------------------------------------------------------------
.text:0000000000003B1E                 align 20h
.text:0000000000003B20
.text:0000000000003B20 loc_3B20:                               ; CODE XREF: triple_compare+A↑j
.text:0000000000003B20                 mov     rcx, [rsi+10h]
.text:0000000000003B24                 cmp     [rdi+10h], rcx
.text:0000000000003B28                 jnz     short locret_3B1C
.text:0000000000003B2A                 sub     rsp, 8
.text:0000000000003B2E                 mov     rsi, [rsi]
.text:0000000000003B31                 mov     rdi, [rdi]
.text:0000000000003B34                 call    same_name
.text:0000000000003B39                 add     rsp, 8
.text:0000000000003B3D                 retn
.text:0000000000003B3D ; } // starts at 3B10
.text:0000000000003B3D triple_compare  endp
.text:0000000000003B3D
.text:0000000000003B3D ; ---------------------------------------------------------------------------
.text:0000000000003B3E                 align 20h
.text:0000000000003B40
.text:0000000000003B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B40
.text:0000000000003B40 ; Attributes: info_from_lumina
.text:0000000000003B40
.text:0000000000003B40 ; _Bool __fastcall triple_compare_ino_str(const void *x, const void *y)
.text:0000000000003B40                 public triple_compare_ino_str
.text:0000000000003B40 triple_compare_ino_str proc near        ; DATA XREF: canonicalize_filename_mode+4ED↑o
.text:0000000000003B40 ; __unwind {
.text:0000000000003B40                 xor     eax, eax
.text:0000000000003B42                 mov     rdx, [rsi+8]
.text:0000000000003B46                 cmp     [rdi+8], rdx
.text:0000000000003B4A                 jz      short loc_3B50
.text:0000000000003B4C
.text:0000000000003B4C locret_3B4C:                            ; CODE XREF: triple_compare_ino_str+18↓j
.text:0000000000003B4C                 rep retn
.text:0000000000003B4C ; ---------------------------------------------------------------------------
.text:0000000000003B4E                 align 10h
.text:0000000000003B50
.text:0000000000003B50 loc_3B50:                               ; CODE XREF: triple_compare_ino_str+A↑j
.text:0000000000003B50                 mov     rcx, [rsi+10h]
.text:0000000000003B54                 cmp     [rdi+10h], rcx
.text:0000000000003B58                 jnz     short locret_3B4C
.text:0000000000003B5A                 sub     rsp, 8
.text:0000000000003B5E                 mov     rsi, [rsi]      ; s2
.text:0000000000003B61                 mov     rdi, [rdi]      ; s1
.text:0000000000003B64                 call    _strcmp
.text:0000000000003B69                 test    eax, eax
.text:0000000000003B6B                 setz    al
.text:0000000000003B6E                 add     rsp, 8
.text:0000000000003B72                 retn
.text:0000000000003B72 ; } // starts at 3B40
.text:0000000000003B72 triple_compare_ino_str endp
.text:0000000000003B72
.text:0000000000003B72 ; ---------------------------------------------------------------------------
.text:0000000000003B73                 align 20h
.text:0000000000003B80
.text:0000000000003B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B80
.text:0000000000003B80
.text:0000000000003B80 ; __int64 __fastcall triple_free(void *ptr)
.text:0000000000003B80                 public triple_free
.text:0000000000003B80 triple_free     proc near               ; CODE XREF: record_file+62↑j
.text:0000000000003B80                                         ; DATA XREF: canonicalize_filename_mode:loc_24D6↑o
.text:0000000000003B80 ; __unwind {
.text:0000000000003B80                 push    rbx
.text:0000000000003B81                 mov     rbx, rdi
.text:0000000000003B84                 mov     rdi, [rdi]      ; ptr
.text:0000000000003B87                 call    _free
.text:0000000000003B8C                 mov     rdi, rbx        ; ptr
.text:0000000000003B8F                 pop     rbx
.text:0000000000003B90                 jmp     _free
.text:0000000000003B90 ; } // starts at 3B80
.text:0000000000003B90 triple_free     endp
.text:0000000000003B90
.text:0000000000003B90 ; ---------------------------------------------------------------------------
.text:0000000000003B95                 align 20h
.text:0000000000003BA0
.text:0000000000003BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BA0
.text:0000000000003BA0
.text:0000000000003BA0                 public set_program_name
.text:0000000000003BA0 set_program_name proc near              ; CODE XREF: main+1F↑p
.text:0000000000003BA0 ; __unwind {
.text:0000000000003BA0                 test    rdi, rdi
.text:0000000000003BA3                 push    rbx
.text:0000000000003BA4                 jz      short loc_3C1D
.text:0000000000003BA6                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000003BAB                 mov     rbx, rdi
.text:0000000000003BAE                 call    _strrchr
.text:0000000000003BB3                 test    rax, rax
.text:0000000000003BB6                 jz      short loc_3C0D
.text:0000000000003BB8                 lea     r8, [rax+1]
.text:0000000000003BBC                 mov     rdx, r8
.text:0000000000003BBF                 sub     rdx, rbx
.text:0000000000003BC2                 cmp     rdx, 6
.text:0000000000003BC6                 jle     short loc_3C0D
.text:0000000000003BC8                 lea     rsi, [rax-6]
.text:0000000000003BCC                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000003BD3                 mov     ecx, 7
.text:0000000000003BD8                 repe cmpsb
.text:0000000000003BDA                 setnbe  dl
.text:0000000000003BDD                 sbb     dl, 0
.text:0000000000003BE0                 test    dl, dl
.text:0000000000003BE2                 jnz     short loc_3C0D
.text:0000000000003BE4                 lea     rdi, aLt        ; "lt-"
.text:0000000000003BEB                 mov     ecx, 3
.text:0000000000003BF0                 mov     rsi, r8
.text:0000000000003BF3                 mov     rbx, r8
.text:0000000000003BF6                 repe cmpsb
.text:0000000000003BF8                 setnbe  dl
.text:0000000000003BFB                 sbb     dl, 0
.text:0000000000003BFE                 test    dl, dl
.text:0000000000003C00                 jnz     short loc_3C0D
.text:0000000000003C02                 lea     rbx, [rax+4]
.text:0000000000003C06                 mov     cs:__bss_start, rbx
.text:0000000000003C0D
.text:0000000000003C0D loc_3C0D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000003C0D                                         ; set_program_name+26↑j ...
.text:0000000000003C0D                 mov     cs:program_name, rbx
.text:0000000000003C14                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000003C1B                 pop     rbx
.text:0000000000003C1C                 retn
.text:0000000000003C1D ; ---------------------------------------------------------------------------
.text:0000000000003C1D
.text:0000000000003C1D loc_3C1D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000003C1D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000003C24                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000003C2B                 mov     edx, 37h ; '7'  ; n
.text:0000000000003C30                 mov     esi, 1          ; size
.text:0000000000003C35                 call    _fwrite
.text:0000000000003C3A                 call    _abort
.text:0000000000003C3A ; } // starts at 3BA0
.text:0000000000003C3A set_program_name endp
.text:0000000000003C3A
.text:0000000000003C3A ; ---------------------------------------------------------------------------
.text:0000000000003C3F                 align 20h
.text:0000000000003C40
.text:0000000000003C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C40
.text:0000000000003C40 ; Attributes: info_from_lumina
.text:0000000000003C40
.text:0000000000003C40 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000003C40 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000003C40                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000003C40 ; __unwind {
.text:0000000000003C40                 push    rbp
.text:0000000000003C41                 push    rbx
.text:0000000000003C42                 mov     rbp, rdi
.text:0000000000003C45                 mov     ebx, esi
.text:0000000000003C47                 sub     rsp, 8
.text:0000000000003C4B                 call    locale_charset
.text:0000000000003C50                 movzx   edx, byte ptr [rax]
.text:0000000000003C53                 and     edx, 0FFFFFFDFh
.text:0000000000003C56                 cmp     dl, 55h ; 'U'
.text:0000000000003C59                 jz      short loc_3CD0
.text:0000000000003C5B                 cmp     dl, 47h ; 'G'
.text:0000000000003C5E                 jz      short loc_3C80
.text:0000000000003C60
.text:0000000000003C60 loc_3C60:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000003C60                                         ; gettext_quote+50↓j ...
.text:0000000000003C60                 lea     rax, unk_70E3
.text:0000000000003C67                 lea     rdx, asc_70E5   ; "'"
.text:0000000000003C6E                 cmp     ebx, 9
.text:0000000000003C71                 cmovnz  rax, rdx
.text:0000000000003C75                 add     rsp, 8
.text:0000000000003C79                 pop     rbx
.text:0000000000003C7A                 pop     rbp
.text:0000000000003C7B                 retn
.text:0000000000003C7B ; ---------------------------------------------------------------------------
.text:0000000000003C7C                 align 20h
.text:0000000000003C80
.text:0000000000003C80 loc_3C80:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000003C80                 movzx   edx, byte ptr [rax+1]
.text:0000000000003C84                 and     edx, 0FFFFFFDFh
.text:0000000000003C87                 cmp     dl, 42h ; 'B'
.text:0000000000003C8A                 jnz     short loc_3C60
.text:0000000000003C8C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000003C90                 jnz     short loc_3C60
.text:0000000000003C92                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000003C96                 jnz     short loc_3C60
.text:0000000000003C98                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000003C9C                 jnz     short loc_3C60
.text:0000000000003C9E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000003CA2                 jnz     short loc_3C60
.text:0000000000003CA4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000003CA8                 jnz     short loc_3C60
.text:0000000000003CAA                 cmp     byte ptr [rax+7], 0
.text:0000000000003CAE                 jnz     short loc_3C60
.text:0000000000003CB0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003CB4                 lea     rax, unk_70DC
.text:0000000000003CBB                 lea     rdx, unk_70E0
.text:0000000000003CC2                 cmovnz  rax, rdx
.text:0000000000003CC6                 add     rsp, 8
.text:0000000000003CCA                 pop     rbx
.text:0000000000003CCB                 pop     rbp
.text:0000000000003CCC                 retn
.text:0000000000003CCC ; ---------------------------------------------------------------------------
.text:0000000000003CCD                 align 10h
.text:0000000000003CD0
.text:0000000000003CD0 loc_3CD0:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000003CD0                 movzx   edx, byte ptr [rax+1]
.text:0000000000003CD4                 and     edx, 0FFFFFFDFh
.text:0000000000003CD7                 cmp     dl, 54h ; 'T'
.text:0000000000003CDA                 jnz     short loc_3C60
.text:0000000000003CDC                 movzx   edx, byte ptr [rax+2]
.text:0000000000003CE0                 and     edx, 0FFFFFFDFh
.text:0000000000003CE3                 cmp     dl, 46h ; 'F'
.text:0000000000003CE6                 jnz     loc_3C60
.text:0000000000003CEC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000003CF0                 jnz     loc_3C60
.text:0000000000003CF6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000003CFA                 jnz     loc_3C60
.text:0000000000003D00                 cmp     byte ptr [rax+5], 0
.text:0000000000003D04                 jnz     loc_3C60
.text:0000000000003D0A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003D0E                 lea     rax, unk_70D4
.text:0000000000003D15                 lea     rdx, unk_70D8
.text:0000000000003D1C                 cmovnz  rax, rdx
.text:0000000000003D20                 add     rsp, 8
.text:0000000000003D24                 pop     rbx
.text:0000000000003D25                 pop     rbp
.text:0000000000003D26                 retn
.text:0000000000003D26 ; } // starts at 3C40
.text:0000000000003D26 gettext_quote   endp
.text:0000000000003D26
.text:0000000000003D26 ; ---------------------------------------------------------------------------
.text:0000000000003D27                 align 10h
.text:0000000000003D30
.text:0000000000003D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D30
.text:0000000000003D30 ; Attributes: info_from_lumina
.text:0000000000003D30
.text:0000000000003D30 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000003D30 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000003D30                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000003D30
.text:0000000000003D30 var_E0          = dword ptr -0E0h
.text:0000000000003D30 var_DB          = byte ptr -0DBh
.text:0000000000003D30 var_DA          = byte ptr -0DAh
.text:0000000000003D30 var_D9          = byte ptr -0D9h
.text:0000000000003D30 s               = qword ptr -0D8h
.text:0000000000003D30 n               = qword ptr -0D0h
.text:0000000000003D30 var_C8          = qword ptr -0C8h
.text:0000000000003D30 ps              = qword ptr -0C0h
.text:0000000000003D30 var_B8          = qword ptr -0B8h
.text:0000000000003D30 var_B0          = qword ptr -0B0h
.text:0000000000003D30 var_A8          = qword ptr -0A8h
.text:0000000000003D30 s2              = qword ptr -0A0h
.text:0000000000003D30 var_98          = qword ptr -98h
.text:0000000000003D30 var_90          = qword ptr -90h
.text:0000000000003D30 var_88          = qword ptr -88h
.text:0000000000003D30 var_80          = qword ptr -80h
.text:0000000000003D30 var_78          = qword ptr -78h
.text:0000000000003D30 var_70          = dword ptr -70h
.text:0000000000003D30 var_6C          = byte ptr -6Ch
.text:0000000000003D30 var_6B          = byte ptr -6Bh
.text:0000000000003D30 var_6A          = byte ptr -6Ah
.text:0000000000003D30 var_69          = byte ptr -69h
.text:0000000000003D30 var_68          = qword ptr -68h
.text:0000000000003D30 var_60          = qword ptr -60h
.text:0000000000003D30 wc              = dword ptr -4Ch
.text:0000000000003D30 var_48          = qword ptr -48h
.text:0000000000003D30 var_40          = qword ptr -40h
.text:0000000000003D30 arg_0           = qword ptr  8
.text:0000000000003D30 arg_8           = qword ptr  10h
.text:0000000000003D30 arg_10          = qword ptr  18h
.text:0000000000003D30
.text:0000000000003D30 ; __unwind {
.text:0000000000003D30                 push    r15
.text:0000000000003D32                 push    r14
.text:0000000000003D34                 mov     r15d, r8d
.text:0000000000003D37                 push    r13
.text:0000000000003D39                 push    r12
.text:0000000000003D3B                 mov     r14, rdi
.text:0000000000003D3E                 push    rbp
.text:0000000000003D3F                 push    rbx
.text:0000000000003D40                 mov     ebx, r9d
.text:0000000000003D43                 mov     r13, rsi
.text:0000000000003D46                 mov     rbp, rcx
.text:0000000000003D49                 and     ebx, 2
.text:0000000000003D4C                 sub     rsp, 0B8h
.text:0000000000003D53                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000003D5B                 mov     [rsp+0E8h+s], rdx
.text:0000000000003D60                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000003D65                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000003D6A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000003D6F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000003D77                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003D7C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000003D84                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003D89                 mov     rax, fs:28h
.text:0000000000003D92                 mov     [rsp+0E8h+var_40], rax
.text:0000000000003D9A                 xor     eax, eax
.text:0000000000003D9C                 call    ___ctype_get_mb_cur_max
.text:0000000000003DA1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000003DA5                 mov     [rsp+0E8h+var_90], rax
.text:0000000000003DAA                 ja      def_3DC1        ; jumptable 00000000000121F1 default case
.text:0000000000003DB0                 lea     rcx, jpt_3DC1
.text:0000000000003DB7                 mov     edx, r15d
.text:0000000000003DBA                 movsxd  rax, ds:(jpt_3DC1 - 7140h)[rcx+rdx*4]
.text:0000000000003DBE                 add     rax, rcx
.text:0000000000003DC1                 jmp     rax             ; switch jump
.text:0000000000003DC3 ; ---------------------------------------------------------------------------
.text:0000000000003DC3
.text:0000000000003DC3 loc_3DC3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003DC3                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000003DC3                                         ; DATA XREF: ...
.text:0000000000003DC3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000003DC8                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003DCD                 xor     r12d, r12d
.text:0000000000003DD0                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003DD9                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003DDE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003DE3
.text:0000000000003DE3 loc_3DE3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000003DE3                 lea     rax, asc_70E5   ; "'"
.text:0000000000003DEA                 mov     [rsp+0E8h+n], 1
.text:0000000000003DF3                 xor     r15d, r15d
.text:0000000000003DF6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003DFE                 mov     [rsp+0E8h+s2], rax
.text:0000000000003E03
.text:0000000000003E03 loc_3E03:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000003E03                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000003E03                 xor     r11d, r11d
.text:0000000000003E06                 mov     rax, rbp
.text:0000000000003E09                 mov     r8d, r12d
.text:0000000000003E0C                 mov     rbp, r11
.text:0000000000003E0F                 mov     r11, rax
.text:0000000000003E12                 nop     word ptr [rax+rax+00h]
.text:0000000000003E18
.text:0000000000003E18 loc_3E18:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000003E18                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000003E18                 cmp     r11, rbp
.text:0000000000003E1B                 setnz   r12b
.text:0000000000003E1F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003E23                 jnz     short loc_3E32
.text:0000000000003E25                 mov     rax, [rsp+0E8h+s]
.text:0000000000003E2A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000003E2E                 setnz   r12b
.text:0000000000003E32
.text:0000000000003E32 loc_3E32:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000003E32                 test    r12b, r12b
.text:0000000000003E35                 jz      loc_4490
.text:0000000000003E3B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003E40                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003E45                 lea     r9, [rdi+rbp]
.text:0000000000003E49                 setnz   al
.text:0000000000003E4C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003E50                 mov     r10d, eax
.text:0000000000003E53                 jz      loc_3F00
.text:0000000000003E59                 mov     rax, [rsp+0E8h+n]
.text:0000000000003E5E                 test    rax, rax
.text:0000000000003E61                 jz      loc_4290
.text:0000000000003E67                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003E6B                 lea     rbx, [rbp+rax+0]
.text:0000000000003E70                 jnz     short loc_3EA0
.text:0000000000003E72                 cmp     rax, 1
.text:0000000000003E76                 jbe     short loc_3EA0
.text:0000000000003E78                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003E7D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000003E82                 mov     [rsp+0E8h+ps], r9
.text:0000000000003E87                 call    _strlen
.text:0000000000003E8C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003E92                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003E98                 mov     r11, rax
.text:0000000000003E9B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003EA0
.text:0000000000003EA0 loc_3EA0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003EA0                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003EA0                 cmp     rbx, r11
.text:0000000000003EA3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003EA8                 ja      loc_4460
.text:0000000000003EAE                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003EB3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003EB8                 mov     rdi, r9         ; s1
.text:0000000000003EBB                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003EC0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003EC5                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000003ECA                 call    _memcmp
.text:0000000000003ECF                 test    eax, eax
.text:0000000000003ED1                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003ED6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003EDC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000003EE1                 jnz     loc_4460
.text:0000000000003EE7                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003EEC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003EF2                 jnz     loc_4E75
.text:0000000000003EF8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003F00
.text:0000000000003F00 loc_3F00:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000003F00                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000003F00                 movzx   ebx, byte ptr [r9]
.text:0000000000003F04                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003F07                 ja      def_3F1E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000003F0D                 lea     rcx, jpt_3F1E
.text:0000000000003F14                 movzx   edx, bl
.text:0000000000003F17                 movsxd  rax, ds:(jpt_3F1E - 716Ch)[rcx+rdx*4]
.text:0000000000003F1B                 add     rax, rcx
.text:0000000000003F1E                 jmp     rax             ; switch jump
.text:0000000000003F20 ; ---------------------------------------------------------------------------
.text:0000000000003F20
.text:0000000000003F20 loc_3F20:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003F20                                         ; DATA XREF: .rodata:jpt_42AA↓o
.text:0000000000003F20                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000003F23
.text:0000000000003F23 loc_3F23:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F23                                         ; DATA XREF: .rodata:jpt_3F1E↓o
.text:0000000000003F23                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000003F27                 setnz   al
.text:0000000000003F2A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003F2E                 jnz     short loc_3F3C
.text:0000000000003F30                 mov     rax, [rsp+0E8h+s]
.text:0000000000003F35                 cmp     byte ptr [rax+1], 0
.text:0000000000003F39                 setnz   al
.text:0000000000003F3C
.text:0000000000003F3C loc_3F3C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000003F3C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003F41                 setz    dl
.text:0000000000003F44                 test    al, al
.text:0000000000003F46                 jz      loc_4198
.text:0000000000003F4C
.text:0000000000003F4C loc_3F4C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000003F4C                 xor     r12d, r12d
.text:0000000000003F4F                 xor     eax, eax
.text:0000000000003F51                 nop     dword ptr [rax+00000000h]
.text:0000000000003F58
.text:0000000000003F58 loc_3F58:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000003F58                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000003F58                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000003F5D                 jnz     loc_4072
.text:0000000000003F63                 test    dl, dl
.text:0000000000003F65                 jnz     loc_4072
.text:0000000000003F6B
.text:0000000000003F6B loc_3F6B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000003F6B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000003F70                 test    rsi, rsi
.text:0000000000003F73                 jz      short loc_3F89
.text:0000000000003F75                 mov     edx, ebx
.text:0000000000003F77                 shr     dl, 5
.text:0000000000003F7A                 movzx   edx, dl
.text:0000000000003F7D                 mov     edx, [rsi+rdx*4]
.text:0000000000003F80                 bt      edx, ebx
.text:0000000000003F83                 jb      loc_40D3
.text:0000000000003F89
.text:0000000000003F89 loc_3F89:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000003F89                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000003F89                 test    r10b, r10b
.text:0000000000003F8C                 jnz     loc_40D3
.text:0000000000003F92                 xor     eax, 1
.text:0000000000003F95                 add     rbp, 1
.text:0000000000003F99                 and     eax, r8d
.text:0000000000003F9C
.text:0000000000003F9C loc_3F9C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000003F9C                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000003F9C                 test    al, al
.text:0000000000003F9E                 jz      short loc_3FC0
.text:0000000000003FA0                 cmp     r13, r15
.text:0000000000003FA3                 jbe     short loc_3FAA
.text:0000000000003FA5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003FAA
.text:0000000000003FAA loc_3FAA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000003FAA                 lea     rax, [r15+1]
.text:0000000000003FAE                 cmp     r13, rax
.text:0000000000003FB1                 jbe     short loc_3FB9
.text:0000000000003FB3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003FB9
.text:0000000000003FB9 loc_3FB9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003FB9                 add     r15, 2
.text:0000000000003FBD                 xor     r8d, r8d
.text:0000000000003FC0
.text:0000000000003FC0 loc_3FC0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003FC0                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003FC0                 cmp     r15, r13
.text:0000000000003FC3                 jnb     short loc_3FC9
.text:0000000000003FC5                 mov     [r14+r15], bl
.text:0000000000003FC9
.text:0000000000003FC9 loc_3FC9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003FC9                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000003FCE                 add     r15, 1
.text:0000000000003FD2                 mov     eax, 0
.text:0000000000003FD7                 test    r12b, r12b
.text:0000000000003FDA                 cmovz   edi, eax
.text:0000000000003FDD                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000003FE2                 jmp     loc_3E18
.text:0000000000003FE2 ; ---------------------------------------------------------------------------
.text:0000000000003FE7                 align 10h
.text:0000000000003FF0
.text:0000000000003FF0 loc_3FF0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003FF0                                         ; DATA XREF: .rodata:jpt_42AA↓o
.text:0000000000003FF0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000003FF3
.text:0000000000003FF3 loc_3FF3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003FF3                                         ; DATA XREF: .rodata:jpt_3F1E↓o
.text:0000000000003FF3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000003FF7                 cmp     eax, 2
.text:0000000000003FFA                 jz      loc_45B8
.text:0000000000004000                 cmp     eax, 5
.text:0000000000004003                 jz      loc_4578
.text:0000000000004009                 cmp     eax, 2
.text:000000000000400C                 mov     ebx, 3Fh ; '?'
.text:0000000000004011                 setz    dl
.text:0000000000004014                 xor     r12d, r12d
.text:0000000000004017                 xor     eax, eax
.text:0000000000004019                 jmp     loc_3F58
.text:0000000000004019 ; ---------------------------------------------------------------------------
.text:000000000000401E                 align 20h
.text:0000000000004020
.text:0000000000004020 loc_4020:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000004020                                         ; DATA XREF: .rodata:jpt_42AA↓o
.text:0000000000004020                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000004023
.text:0000000000004023 loc_4023:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004023                                         ; DATA XREF: .rodata:jpt_3F1E↓o
.text:0000000000004023                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000004028                 jz      loc_4530
.text:000000000000402E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000004033                 xor     edx, edx
.text:0000000000004035                 xor     eax, eax
.text:0000000000004037                 mov     ebx, 27h ; '''
.text:000000000000403C                 jmp     loc_3F58
.text:000000000000403C ; ---------------------------------------------------------------------------
.text:0000000000004041                 align 8
.text:0000000000004048
.text:0000000000004048 loc_4048:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004048                                         ; DATA XREF: .rodata:jpt_3F1E↓o
.text:0000000000004048                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000404D                 mov     ebx, 74h ; 't'
.text:0000000000004052
.text:0000000000004052 loc_4052:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000004052                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000004052                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004057                 setz    al
.text:000000000000405A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000405E                 jnz     loc_41AE
.text:0000000000004064
.text:0000000000004064 loc_4064:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000004064                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000004064                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004069                 jnz     short loc_40D0
.text:000000000000406B
.text:000000000000406B loc_406B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000406B                 mov     ebx, edx
.text:000000000000406D                 xor     r12d, r12d
.text:0000000000004070                 xor     eax, eax
.text:0000000000004072
.text:0000000000004072 loc_4072:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000004072                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000004072                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004077                 jnz     loc_3F6B
.text:000000000000407D                 jmp     loc_3F89
.text:000000000000407D ; ---------------------------------------------------------------------------
.text:0000000000004082                 align 8
.text:0000000000004088
.text:0000000000004088 loc_4088:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004088                                         ; DATA XREF: .rodata:jpt_3F1E↓o
.text:0000000000004088                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000408D                 mov     ebx, 62h ; 'b'
.text:0000000000004092                 jmp     short loc_4064
.text:0000000000004092 ; ---------------------------------------------------------------------------
.text:0000000000004094                 align 8
.text:0000000000004098
.text:0000000000004098 loc_4098:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004098                                         ; DATA XREF: .rodata:jpt_3F1E↓o
.text:0000000000004098                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000409D                 jz      loc_4470
.text:00000000000040A3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000040A8                 jz      loc_42C0
.text:00000000000040AE
.text:00000000000040AE loc_40AE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:00000000000040AE                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000040B3                 jz      loc_42C0
.text:00000000000040B9                 cmp     [rsp+0E8h+n], 0
.text:00000000000040BF                 jnz     loc_447B
.text:00000000000040C5                 mov     ebx, 5Ch ; '\'
.text:00000000000040CA                 nop     word ptr [rax+rax+00h]
.text:00000000000040D0
.text:00000000000040D0 loc_40D0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000040D0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000040D0                 xor     r12d, r12d
.text:00000000000040D3
.text:00000000000040D3 loc_40D3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000040D3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000040D3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000040D8                 setz    dl
.text:00000000000040DB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000040E0                 mov     eax, edx
.text:00000000000040E2                 jnz     loc_4938
.text:00000000000040E8                 mov     eax, r8d
.text:00000000000040EB                 xor     eax, 1
.text:00000000000040EE                 and     al, dl
.text:00000000000040F0                 jz      short loc_4121
.text:00000000000040F2                 cmp     r13, r15
.text:00000000000040F5                 jbe     short loc_40FC
.text:00000000000040F7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000040FC
.text:00000000000040FC loc_40FC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000040FC                 lea     rdx, [r15+1]
.text:0000000000004100                 cmp     r13, rdx
.text:0000000000004103                 jbe     short loc_410B
.text:0000000000004105                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000410B
.text:000000000000410B loc_410B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000410B                 lea     rdx, [r15+2]
.text:000000000000410F                 cmp     r13, rdx
.text:0000000000004112                 jbe     short loc_411A
.text:0000000000004114                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000411A
.text:000000000000411A loc_411A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000411A                 add     r15, 3
.text:000000000000411E                 mov     r8d, eax
.text:0000000000004121
.text:0000000000004121 loc_4121:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000004121                 cmp     r13, r15
.text:0000000000004124                 jbe     short loc_412B
.text:0000000000004126                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000412B
.text:000000000000412B loc_412B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000412B                 add     r15, 1
.text:000000000000412F                 add     rbp, 1
.text:0000000000004133                 jmp     loc_3FC0
.text:0000000000004133 ; ---------------------------------------------------------------------------
.text:0000000000004138                 align 20h
.text:0000000000004140
.text:0000000000004140 loc_4140:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004140                                         ; DATA XREF: .rodata:jpt_3F1E↓o
.text:0000000000004140                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000004145                 jnz     loc_4313
.text:000000000000414B                 xor     edx, edx
.text:000000000000414D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000004152                 jz      loc_406B
.text:0000000000004158                 add     rbp, 1
.text:000000000000415C                 jmp     loc_3E18
.text:000000000000415C ; ---------------------------------------------------------------------------
.text:0000000000004161                 align 8
.text:0000000000004168
.text:0000000000004168 loc_4168:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004168                                         ; DATA XREF: .rodata:jpt_3F1E↓o
.text:0000000000004168                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000416D                 setz    dl
.text:0000000000004170                 xor     eax, eax
.text:0000000000004172                 jmp     loc_3F58
.text:0000000000004172 ; ---------------------------------------------------------------------------
.text:0000000000004177                 align 20h
.text:0000000000004180
.text:0000000000004180 loc_4180:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004180                                         ; DATA XREF: .rodata:jpt_3F1E↓o
.text:0000000000004180                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000004185                 mov     ebx, 61h ; 'a'
.text:000000000000418A                 jmp     loc_4064
.text:000000000000418A ; ---------------------------------------------------------------------------
.text:000000000000418F                 align 10h
.text:0000000000004190
.text:0000000000004190 loc_4190:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004190                                         ; DATA XREF: .rodata:jpt_3F1E↓o
.text:0000000000004190                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000004195                 setz    dl
.text:0000000000004198
.text:0000000000004198 loc_4198:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000004198                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000004198                 test    rbp, rbp
.text:000000000000419B                 jnz     loc_3F4C
.text:00000000000041A1
.text:00000000000041A1 loc_41A1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000041A1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000041A1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000041A6                 and     al, dl
.text:00000000000041A8                 jz      loc_3F58
.text:00000000000041AE
.text:00000000000041AE loc_41AE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000041AE                 mov     rbp, r11
.text:00000000000041B1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000041B9                 jmp     loc_48B9
.text:00000000000041B9 ; ---------------------------------------------------------------------------
.text:00000000000041BE                 align 20h
.text:00000000000041C0
.text:00000000000041C0 loc_41C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000041C0                                         ; DATA XREF: .rodata:jpt_3F1E↓o
.text:00000000000041C0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000041C5                 setz    dl
.text:00000000000041C8                 xor     r12d, r12d
.text:00000000000041CB                 jmp     short loc_41A1
.text:00000000000041CB ; ---------------------------------------------------------------------------
.text:00000000000041CD                 align 10h
.text:00000000000041D0
.text:00000000000041D0 loc_41D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000041D0                                         ; DATA XREF: .rodata:jpt_3F1E↓o
.text:00000000000041D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000041D5                 mov     ebx, 20h ; ' '
.text:00000000000041DA                 setz    dl
.text:00000000000041DD                 jmp     short loc_41A1
.text:00000000000041DD ; ---------------------------------------------------------------------------
.text:00000000000041DF                 align 20h
.text:00000000000041E0
.text:00000000000041E0 loc_41E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000041E0                                         ; DATA XREF: .rodata:jpt_3F1E↓o
.text:00000000000041E0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000041E5                 mov     ebx, 72h ; 'r'
.text:00000000000041EA                 jmp     loc_4052
.text:00000000000041EA ; ---------------------------------------------------------------------------
.text:00000000000041EF                 align 10h
.text:00000000000041F0
.text:00000000000041F0 loc_41F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000041F0                                         ; DATA XREF: .rodata:jpt_3F1E↓o
.text:00000000000041F0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000041F5                 mov     ebx, 66h ; 'f'
.text:00000000000041FA                 jmp     loc_4064
.text:00000000000041FA ; ---------------------------------------------------------------------------
.text:00000000000041FF                 align 20h
.text:0000000000004200
.text:0000000000004200 loc_4200:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004200                                         ; DATA XREF: .rodata:jpt_3F1E↓o
.text:0000000000004200                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000004205                 mov     ebx, 76h ; 'v'
.text:000000000000420A                 jmp     loc_4064
.text:000000000000420A ; ---------------------------------------------------------------------------
.text:000000000000420F                 align 10h
.text:0000000000004210
.text:0000000000004210 loc_4210:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004210                                         ; DATA XREF: .rodata:jpt_3F1E↓o
.text:0000000000004210                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000004215                 mov     ebx, 6Eh ; 'n'
.text:000000000000421A                 jmp     loc_4052
.text:000000000000421A ; ---------------------------------------------------------------------------
.text:000000000000421F                 align 20h
.text:0000000000004220
.text:0000000000004220 def_42AA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000004220                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000004220                                         ; DATA XREF: ...
.text:0000000000004220                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004223                 nop     dword ptr [rax+rax+00h]
.text:0000000000004228
.text:0000000000004228 def_3F1E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000004228                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000004228                                         ; DATA XREF: ...
.text:0000000000004228                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000422E                 jnz     loc_45D8
.text:0000000000004234                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000004239                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000423E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000004243                 call    ___ctype_b_loc
.text:0000000000004248                 mov     rcx, [rax]
.text:000000000000424B                 movzx   edx, bl
.text:000000000000424E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000004254                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000425A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000425F                 mov     edi, 1
.text:0000000000004264                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000004268                 and     ax, 4000h
.text:000000000000426C                 setnz   r12b
.text:0000000000004270                 setz    al
.text:0000000000004273                 and     al, [rsp+0E8h+var_DB]
.text:0000000000004277
.text:0000000000004277 loc_4277:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000004277                 test    al, al
.text:0000000000004279                 jnz     loc_4C11
.text:000000000000427F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004284                 setz    dl
.text:0000000000004287                 jmp     loc_3F58
.text:0000000000004287 ; ---------------------------------------------------------------------------
.text:000000000000428C                 align 10h
.text:0000000000004290
.text:0000000000004290 loc_4290:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000004290                 movzx   ebx, byte ptr [r9]
.text:0000000000004294                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000004297                 ja      short def_42AA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004299                 lea     rcx, jpt_42AA
.text:00000000000042A0                 movzx   edx, bl
.text:00000000000042A3                 movsxd  rax, ds:(jpt_42AA - 7368h)[rcx+rdx*4]
.text:00000000000042A7                 add     rax, rcx
.text:00000000000042AA                 jmp     rax             ; switch jump
.text:00000000000042AA ; ---------------------------------------------------------------------------
.text:00000000000042AC                 align 10h
.text:00000000000042B0
.text:00000000000042B0 loc_42B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000042B0                                         ; DATA XREF: .rodata:jpt_42AA↓o
.text:00000000000042B0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000042B3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000042B8                 jnz     loc_40AE
.text:00000000000042BE                 xchg    ax, ax
.text:00000000000042C0
.text:00000000000042C0 loc_42C0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000042C0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000042C0                 mov     edx, 5Ch ; '\'
.text:00000000000042C5                 mov     ebx, 5Ch ; '\'
.text:00000000000042CA                 jmp     loc_4064
.text:00000000000042CA ; ---------------------------------------------------------------------------
.text:00000000000042CF                 align 10h
.text:00000000000042D0
.text:00000000000042D0 loc_42D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000042D0                                         ; DATA XREF: .rodata:jpt_42AA↓o
.text:00000000000042D0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000042D5                 xor     r10d, r10d
.text:00000000000042D8                 mov     ebx, 66h ; 'f'
.text:00000000000042DD                 jmp     loc_4064
.text:00000000000042DD ; ---------------------------------------------------------------------------
.text:00000000000042E2                 align 8
.text:00000000000042E8
.text:00000000000042E8 loc_42E8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000042E8                                         ; DATA XREF: .rodata:jpt_42AA↓o
.text:00000000000042E8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000042ED                 xor     r10d, r10d
.text:00000000000042F0                 mov     ebx, 6Eh ; 'n'
.text:00000000000042F5                 jmp     loc_4052
.text:00000000000042F5 ; ---------------------------------------------------------------------------
.text:00000000000042FA                 align 20h
.text:0000000000004300
.text:0000000000004300 loc_4300:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004300                                         ; DATA XREF: .rodata:jpt_42AA↓o
.text:0000000000004300                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000004305                 jmp     loc_40D0
.text:0000000000004305 ; ---------------------------------------------------------------------------
.text:000000000000430A                 align 10h
.text:0000000000004310
.text:0000000000004310 loc_4310:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004310                                         ; DATA XREF: .rodata:jpt_42AA↓o
.text:0000000000004310                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000004313
.text:0000000000004313 loc_4313:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000004313                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004318                 setz    dl
.text:000000000000431B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004320                 jnz     loc_4EBA
.text:0000000000004326                 mov     eax, r8d
.text:0000000000004329                 mov     rcx, r15
.text:000000000000432C                 xor     eax, 1
.text:000000000000432F                 and     al, dl
.text:0000000000004331                 jz      short loc_4360
.text:0000000000004333                 cmp     r13, r15
.text:0000000000004336                 jbe     short loc_433D
.text:0000000000004338                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000433D
.text:000000000000433D loc_433D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000433D                 lea     rcx, [r15+1]
.text:0000000000004341                 cmp     r13, rcx
.text:0000000000004344                 jbe     short loc_434C
.text:0000000000004346                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000434C
.text:000000000000434C loc_434C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000434C                 lea     rcx, [r15+2]
.text:0000000000004350                 cmp     r13, rcx
.text:0000000000004353                 ja      loc_4989
.text:0000000000004359
.text:0000000000004359 loc_4359:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000004359                 lea     rcx, [r15+3]
.text:000000000000435D                 mov     r8d, eax
.text:0000000000004360
.text:0000000000004360 loc_4360:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000004360                 cmp     r13, rcx
.text:0000000000004363                 jbe     short loc_436A
.text:0000000000004365                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000436A
.text:000000000000436A loc_436A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000436A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000436F                 lea     r15, [rcx+1]
.text:0000000000004373                 jz      loc_4979
.text:0000000000004379                 lea     rax, [rbp+1]
.text:000000000000437D                 cmp     rax, r11
.text:0000000000004380                 jnb     short loc_439B
.text:0000000000004382                 mov     rax, [rsp+0E8h+s]
.text:0000000000004387                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000438C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000004390                 sub     eax, 30h ; '0'
.text:0000000000004393                 cmp     al, 9
.text:0000000000004395                 jbe     loc_4BC9
.text:000000000000439B
.text:000000000000439B loc_439B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000439B                 mov     eax, r12d
.text:000000000000439E                 mov     ebx, 30h ; '0'
.text:00000000000043A3                 xor     r12d, r12d
.text:00000000000043A6                 jmp     loc_3F58
.text:00000000000043A6 ; ---------------------------------------------------------------------------
.text:00000000000043AB                 align 10h
.text:00000000000043B0
.text:00000000000043B0 loc_43B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000043B0                                         ; DATA XREF: .rodata:jpt_42AA↓o
.text:00000000000043B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000043B5                 mov     r12d, r10d
.text:00000000000043B8                 setz    dl
.text:00000000000043BB                 xor     r10d, r10d
.text:00000000000043BE                 xor     eax, eax
.text:00000000000043C0                 jmp     loc_3F58
.text:00000000000043C0 ; ---------------------------------------------------------------------------
.text:00000000000043C5                 align 8
.text:00000000000043C8
.text:00000000000043C8 loc_43C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000043C8                                         ; DATA XREF: .rodata:jpt_42AA↓o
.text:00000000000043C8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000043CD                 setz    dl
.text:00000000000043D0                 xor     r10d, r10d
.text:00000000000043D3                 jmp     loc_4198
.text:00000000000043D3 ; ---------------------------------------------------------------------------
.text:00000000000043D8                 align 20h
.text:00000000000043E0
.text:00000000000043E0 loc_43E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000043E0                                         ; DATA XREF: .rodata:jpt_42AA↓o
.text:00000000000043E0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000043E5                 setz    dl
.text:00000000000043E8                 xor     r10d, r10d
.text:00000000000043EB                 xor     r12d, r12d
.text:00000000000043EE                 jmp     loc_41A1
.text:00000000000043EE ; ---------------------------------------------------------------------------
.text:00000000000043F3                 align 8
.text:00000000000043F8
.text:00000000000043F8 loc_43F8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000043F8                                         ; DATA XREF: .rodata:jpt_42AA↓o
.text:00000000000043F8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000043FD                 mov     r12d, r10d
.text:0000000000004400                 mov     ebx, 20h ; ' '
.text:0000000000004405                 setz    dl
.text:0000000000004408                 xor     r10d, r10d
.text:000000000000440B                 jmp     loc_41A1
.text:0000000000004410 ; ---------------------------------------------------------------------------
.text:0000000000004410
.text:0000000000004410 loc_4410:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004410                                         ; DATA XREF: .rodata:jpt_42AA↓o
.text:0000000000004410                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000004415                 xor     r10d, r10d
.text:0000000000004418                 mov     ebx, 72h ; 'r'
.text:000000000000441D                 jmp     loc_4052
.text:000000000000441D ; ---------------------------------------------------------------------------
.text:0000000000004422                 align 8
.text:0000000000004428
.text:0000000000004428 loc_4428:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004428                                         ; DATA XREF: .rodata:jpt_42AA↓o
.text:0000000000004428                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000442D                 jmp     loc_40D0
.text:000000000000442D ; ---------------------------------------------------------------------------
.text:0000000000004432                 align 8
.text:0000000000004438
.text:0000000000004438 loc_4438:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004438                                         ; DATA XREF: .rodata:jpt_42AA↓o
.text:0000000000004438                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000443D                 xor     r10d, r10d
.text:0000000000004440                 mov     ebx, 74h ; 't'
.text:0000000000004445                 jmp     loc_4052
.text:0000000000004445 ; ---------------------------------------------------------------------------
.text:000000000000444A                 align 10h
.text:0000000000004450
.text:0000000000004450 loc_4450:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004450                                         ; DATA XREF: .rodata:jpt_42AA↓o
.text:0000000000004450                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000004455                 jmp     loc_40D0
.text:0000000000004455 ; ---------------------------------------------------------------------------
.text:000000000000445A                 align 20h
.text:0000000000004460
.text:0000000000004460 loc_4460:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000004460                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000004460                 xor     r10d, r10d
.text:0000000000004463                 jmp     loc_3F00
.text:0000000000004463 ; ---------------------------------------------------------------------------
.text:0000000000004468                 align 10h
.text:0000000000004470
.text:0000000000004470 loc_4470:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000004470                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004475                 jnz     loc_4DE0
.text:000000000000447B
.text:000000000000447B loc_447B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000447B                 add     rbp, 1
.text:000000000000447F                 mov     eax, r8d
.text:0000000000004482                 xor     r12d, r12d
.text:0000000000004485                 mov     ebx, 5Ch ; '\'
.text:000000000000448A                 jmp     loc_3F9C
.text:000000000000448A ; ---------------------------------------------------------------------------
.text:000000000000448F                 align 10h
.text:0000000000004490
.text:0000000000004490 loc_4490:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000004490                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004495                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000449A                 mov     r12d, r8d
.text:000000000000449D                 mov     rbp, r11
.text:00000000000044A0                 setz    dl
.text:00000000000044A3                 mov     eax, ebx
.text:00000000000044A5                 test    r15, r15
.text:00000000000044A8                 setz    cl
.text:00000000000044AB                 and     eax, edx
.text:00000000000044AD                 and     al, cl
.text:00000000000044AF                 jnz     loc_4F16
.text:00000000000044B5                 mov     eax, ebx
.text:00000000000044B7                 xor     eax, 1
.text:00000000000044BA                 and     dl, al
.text:00000000000044BC                 jz      loc_4E2C
.text:00000000000044C2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000044C7                 jz      loc_4E2A
.text:00000000000044CD                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000044D2                 jnz     loc_4ECD
.text:00000000000044D8                 test    r13, r13
.text:00000000000044DB                 setz    al
.text:00000000000044DE                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000044E4                 setnz   dl
.text:00000000000044E7                 and     al, dl
.text:00000000000044E9                 jz      loc_4F0C
.text:00000000000044EF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000044F4
.text:00000000000044F4 loc_44F4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000044F4                 lea     rbx, asc_70E5   ; "'"
.text:00000000000044FB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000044FF                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004507                 mov     r15d, 1
.text:000000000000450D                 mov     [rsp+0E8h+n], 1
.text:0000000000004516                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000451B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004520                 mov     [rsp+0E8h+var_6C], al
.text:0000000000004524                 jmp     loc_3E03
.text:0000000000004524 ; ---------------------------------------------------------------------------
.text:0000000000004529                 align 10h
.text:0000000000004530
.text:0000000000004530 loc_4530:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000004530                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004535                 jnz     loc_4DE0
.text:000000000000453B                 test    r13, r13
.text:000000000000453E                 jz      loc_4940
.text:0000000000004544                 xor     edx, edx
.text:0000000000004546                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000454C                 jnz     loc_4940
.text:0000000000004552
.text:0000000000004552 loc_4552:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000004552                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000004552                 mov     [rsp+0E8h+var_98], r13
.text:0000000000004557                 add     r15, 3
.text:000000000000455B                 xor     eax, eax
.text:000000000000455D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000004562                 xor     r8d, r8d
.text:0000000000004565                 mov     r13, rdx
.text:0000000000004568                 mov     ebx, 27h ; '''
.text:000000000000456D                 jmp     loc_3F89
.text:000000000000456D ; ---------------------------------------------------------------------------
.text:0000000000004572                 align 8
.text:0000000000004578
.text:0000000000004578 loc_4578:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000004578                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000457D                 jz      short loc_45A0
.text:000000000000457F                 lea     rcx, [rbp+2]
.text:0000000000004583                 cmp     rcx, r11
.text:0000000000004586                 jnb     short loc_45A0
.text:0000000000004588                 mov     rax, [rsp+0E8h+s]
.text:000000000000458D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000004592                 jz      loc_4D22
.text:0000000000004598                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000045A0
.text:00000000000045A0 loc_45A0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000045A0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000045A0                 xor     edx, edx
.text:00000000000045A2                 xor     r12d, r12d
.text:00000000000045A5                 xor     eax, eax
.text:00000000000045A7                 mov     ebx, 3Fh ; '?'
.text:00000000000045AC                 jmp     loc_3F58
.text:00000000000045AC ; ---------------------------------------------------------------------------
.text:00000000000045B1                 align 8
.text:00000000000045B8
.text:00000000000045B8 loc_45B8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000045B8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000045BD                 jnz     loc_4DE0
.text:00000000000045C3                 xor     r12d, r12d
.text:00000000000045C6                 xor     eax, eax
.text:00000000000045C8                 mov     ebx, 3Fh ; '?'
.text:00000000000045CD                 jmp     loc_3F89
.text:00000000000045CD ; ---------------------------------------------------------------------------
.text:00000000000045D2                 align 8
.text:00000000000045D8
.text:00000000000045D8 loc_45D8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000045D8                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000045E0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000045E4                 mov     [rsp+0E8h+var_48], 0
.text:00000000000045F0                 mov     [rsp+0E8h+ps], rax
.text:00000000000045F5                 jnz     short loc_4624
.text:00000000000045F7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000045FC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000004601                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000004606                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000460B                 call    _strlen
.text:0000000000004610                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000004616                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000461C                 mov     r11, rax
.text:000000000000461F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000004624
.text:0000000000004624 loc_4624:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000004624                 lea     rax, [rsp+0E8h+wc]
.text:000000000000462C                 xor     ecx, ecx
.text:000000000000462E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000004632                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000004637                 mov     rbx, rcx
.text:000000000000463A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000004642                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000004647                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000464C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000004654                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000004659                 mov     [rsp+0E8h+var_78], r13
.text:000000000000465E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000004663
.text:0000000000004663 loc_4663:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000004663                 mov     rax, [rsp+0E8h+s]
.text:0000000000004668                 lea     r14, [rbp+rbx+0]
.text:000000000000466D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000004672                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000004677                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000467C                 lea     r13, [rax+r14]
.text:0000000000004680                 sub     rdx, r14
.text:0000000000004683                 mov     rsi, r13
.text:0000000000004686                 call    rpl_mbrtowc
.text:000000000000468B                 test    rax, rax
.text:000000000000468E                 mov     r15, rax
.text:0000000000004691                 jz      short loc_46E1
.text:0000000000004693                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004697                 jz      loc_4CB5
.text:000000000000469D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000046A1                 jz      loc_4C41
.text:00000000000046A7                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000046AC                 setz    al
.text:00000000000046AF                 and     al, [rsp+0E8h+var_D9]
.text:00000000000046B3                 jnz     loc_4850
.text:00000000000046B9
.text:00000000000046B9 loc_46B9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000046B9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000046B9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000046C0                 call    _iswprint
.text:00000000000046C5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000046CA                 test    eax, eax
.text:00000000000046CC                 mov     eax, 0
.text:00000000000046D1                 cmovz   r12d, eax
.text:00000000000046D5                 add     rbx, r15
.text:00000000000046D8                 call    _mbsinit
.text:00000000000046DD                 test    eax, eax
.text:00000000000046DF                 jz      short loc_4663
.text:00000000000046E1
.text:00000000000046E1 loc_46E1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:00000000000046E1                 mov     edx, r12d
.text:00000000000046E4                 mov     rdi, rbx
.text:00000000000046E7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000046ED                 xor     edx, 1
.text:00000000000046F0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000046F5                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000046FB                 and     dl, [rsp+0E8h+var_DB]
.text:00000000000046FF                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004707                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000470C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004711                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004716
.text:0000000000004716 loc_4716:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000004716                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000004716                 cmp     rdi, 1
.text:000000000000471A                 jbe     loc_4D1B
.text:0000000000004720
.text:0000000000004720 loc_4720:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000004720                 mov     rcx, rdi
.text:0000000000004723                 xor     esi, esi
.text:0000000000004725                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000472B                 add     rcx, rbp
.text:000000000000472E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000004733                 jmp     loc_47EE
.text:0000000000004733 ; ---------------------------------------------------------------------------
.text:0000000000004738                 align 20h
.text:0000000000004740
.text:0000000000004740 loc_4740:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000004740                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004745                 setz    al
.text:0000000000004748                 test    r9b, r9b
.text:000000000000474B                 jnz     loc_4C00
.text:0000000000004751                 mov     esi, r8d
.text:0000000000004754                 xor     esi, 1
.text:0000000000004757                 and     al, sil
.text:000000000000475A                 jz      short loc_478B
.text:000000000000475C                 cmp     r13, r15
.text:000000000000475F                 jbe     short loc_4766
.text:0000000000004761                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004766
.text:0000000000004766 loc_4766:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000004766                 lea     rsi, [r15+1]
.text:000000000000476A                 cmp     r13, rsi
.text:000000000000476D                 jbe     short loc_4775
.text:000000000000476F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000004775
.text:0000000000004775 loc_4775:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000004775                 lea     rsi, [r15+2]
.text:0000000000004779                 cmp     r13, rsi
.text:000000000000477C                 jbe     short loc_4784
.text:000000000000477E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004784
.text:0000000000004784 loc_4784:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000004784                 add     r15, 3
.text:0000000000004788                 mov     r8d, eax
.text:000000000000478B
.text:000000000000478B loc_478B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000478B                 cmp     r13, r15
.text:000000000000478E                 jbe     short loc_4795
.text:0000000000004790                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004795
.text:0000000000004795 loc_4795:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000004795                 lea     rax, [r15+1]
.text:0000000000004799                 cmp     r13, rax
.text:000000000000479C                 jbe     short loc_47AB
.text:000000000000479E                 mov     eax, ebx
.text:00000000000047A0                 shr     al, 6
.text:00000000000047A3                 add     eax, 30h ; '0'
.text:00000000000047A6                 mov     [r14+r15+1], al
.text:00000000000047AB
.text:00000000000047AB loc_47AB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:00000000000047AB                 lea     rax, [r15+2]
.text:00000000000047AF                 cmp     r13, rax
.text:00000000000047B2                 jbe     short loc_47C4
.text:00000000000047B4                 mov     eax, ebx
.text:00000000000047B6                 shr     al, 3
.text:00000000000047B9                 and     eax, 7
.text:00000000000047BC                 add     eax, 30h ; '0'
.text:00000000000047BF                 mov     [r14+r15+2], al
.text:00000000000047C4
.text:00000000000047C4 loc_47C4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:00000000000047C4                 and     ebx, 7
.text:00000000000047C7                 add     rbp, 1
.text:00000000000047CB                 add     r15, 3
.text:00000000000047CF                 add     ebx, 30h ; '0'
.text:00000000000047D2                 cmp     rbp, rcx
.text:00000000000047D5                 jnb     loc_3FC0
.text:00000000000047DB                 mov     esi, edx
.text:00000000000047DD
.text:00000000000047DD loc_47DD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000047DD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000047DD                 cmp     r13, r15
.text:00000000000047E0                 jbe     short loc_47E6
.text:00000000000047E2                 mov     [r14+r15], bl
.text:00000000000047E6
.text:00000000000047E6 loc_47E6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:00000000000047E6                 movzx   ebx, byte ptr [rdi+rbp]
.text:00000000000047EA                 add     r15, 1
.text:00000000000047EE
.text:00000000000047EE loc_47EE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:00000000000047EE                 test    dl, dl
.text:00000000000047F0                 jnz     loc_4740
.text:00000000000047F6                 mov     eax, esi
.text:00000000000047F8                 xor     eax, 1
.text:00000000000047FB                 and     eax, r8d
.text:00000000000047FE                 test    r10b, r10b
.text:0000000000004801                 jz      short loc_4811
.text:0000000000004803                 cmp     r13, r15
.text:0000000000004806                 jbe     short loc_480D
.text:0000000000004808                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000480D
.text:000000000000480D loc_480D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000480D                 add     r15, 1
.text:0000000000004811
.text:0000000000004811 loc_4811:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000004811                 add     rbp, 1
.text:0000000000004815                 cmp     rbp, rcx
.text:0000000000004818                 jnb     loc_3F9C
.text:000000000000481E                 test    al, al
.text:0000000000004820                 jz      loc_4C1E
.text:0000000000004826                 cmp     r13, r15
.text:0000000000004829                 jbe     short loc_4830
.text:000000000000482B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004830
.text:0000000000004830 loc_4830:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000004830                 lea     rax, [r15+1]
.text:0000000000004834                 cmp     r13, rax
.text:0000000000004837                 jbe     short loc_483F
.text:0000000000004839                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000483F
.text:000000000000483F loc_483F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000483F                 add     r15, 2
.text:0000000000004843                 xor     r10d, r10d
.text:0000000000004846                 xor     r8d, r8d
.text:0000000000004849                 jmp     short loc_47DD
.text:0000000000004849 ; ---------------------------------------------------------------------------
.text:000000000000484B                 align 10h
.text:0000000000004850
.text:0000000000004850 loc_4850:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000004850                 cmp     r15, 1
.text:0000000000004854                 jz      loc_46B9
.text:000000000000485A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000485F                 lea     rcx, [rdi+r15]
.text:0000000000004863                 lea     rdx, [rdi+r14+1]
.text:0000000000004868                 lea     r8, [rcx+r14]
.text:000000000000486C                 jmp     short loc_487D
.text:000000000000486C ; ---------------------------------------------------------------------------
.text:000000000000486E                 align 10h
.text:0000000000004870
.text:0000000000004870 loc_4870:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000004870                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000004870                 add     rdx, 1
.text:0000000000004874                 cmp     r8, rdx
.text:0000000000004877                 jz      loc_46B9
.text:000000000000487D
.text:000000000000487D loc_487D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000487D                 movzx   ecx, byte ptr [rdx]
.text:0000000000004880                 sub     ecx, 5Bh ; '['
.text:0000000000004883                 cmp     cl, 21h ; '!'
.text:0000000000004886                 ja      short loc_4870
.text:0000000000004888                 mov     esi, 1
.text:000000000000488D                 shl     rsi, cl
.text:0000000000004890                 mov     rcx, rsi
.text:0000000000004893                 mov     rsi, 20000002Bh
.text:000000000000489D                 test    rcx, rsi
.text:00000000000048A0                 jz      short loc_4870
.text:00000000000048A2                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000048A7                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000048AC                 mov     rbp, [rsp+0E8h+var_B8]
.text:00000000000048B1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000048B9
.text:00000000000048B9 loc_48B9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:00000000000048B9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:00000000000048B9                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000048BE                 jz      short loc_48D0
.text:00000000000048C0                 test    al, al
.text:00000000000048C2                 mov     eax, 4
.text:00000000000048C7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000048CC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000048D0
.text:00000000000048D0 loc_48D0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000048D0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000048D0                 sub     rsp, 8
.text:00000000000048D4                 mov     rcx, rbp
.text:00000000000048D7                 mov     rsi, r13
.text:00000000000048DA                 push    [rsp+0F0h+var_88]
.text:00000000000048DE                 push    [rsp+0F8h+var_80]
.text:00000000000048E2                 mov     rdi, r14
.text:00000000000048E5                 push    0
.text:00000000000048E7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000048EF                 mov     r8d, [rsp+108h+var_E0]
.text:00000000000048F4                 mov     rdx, [rsp+108h+s]
.text:00000000000048F9                 and     r9d, 0FFFFFFFDh
.text:00000000000048FD                 call    quotearg_buffer_restyled
.text:0000000000004902                 add     rsp, 20h
.text:0000000000004906                 mov     r15, rax
.text:0000000000004909
.text:0000000000004909 loc_4909:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000004909                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000004909                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000004911                 xor     rbx, fs:28h
.text:000000000000491A                 mov     rax, r15
.text:000000000000491D                 jnz     loc_4F23
.text:0000000000004923                 add     rsp, 0B8h
.text:000000000000492A                 pop     rbx
.text:000000000000492B                 pop     rbp
.text:000000000000492C                 pop     r12
.text:000000000000492E                 pop     r13
.text:0000000000004930                 pop     r14
.text:0000000000004932                 pop     r15
.text:0000000000004934                 retn
.text:0000000000004934 ; ---------------------------------------------------------------------------
.text:0000000000004935                 align 8
.text:0000000000004938
.text:0000000000004938 loc_4938:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000004938                 mov     rbp, r11
.text:000000000000493B                 jmp     loc_48B9
.text:0000000000004940 ; ---------------------------------------------------------------------------
.text:0000000000004940
.text:0000000000004940 loc_4940:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000004940                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000004940                 cmp     r13, r15
.text:0000000000004943                 jbe     short loc_494A
.text:0000000000004945                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000494A
.text:000000000000494A loc_494A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000494A                 lea     rax, [r15+1]
.text:000000000000494E                 cmp     r13, rax
.text:0000000000004951                 jbe     short loc_4959
.text:0000000000004953                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000004959
.text:0000000000004959 loc_4959:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000004959                 lea     rax, [r15+2]
.text:000000000000495D                 cmp     r13, rax
.text:0000000000004960                 jbe     loc_4F52
.text:0000000000004966                 mov     rdx, r13
.text:0000000000004969                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000496F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004974                 jmp     loc_4552
.text:0000000000004979 ; ---------------------------------------------------------------------------
.text:0000000000004979
.text:0000000000004979 loc_4979:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000004979                 mov     eax, r12d
.text:000000000000497C                 mov     ebx, 30h ; '0'
.text:0000000000004981                 xor     r12d, r12d
.text:0000000000004984                 jmp     loc_3F89
.text:0000000000004989 ; ---------------------------------------------------------------------------
.text:0000000000004989
.text:0000000000004989 loc_4989:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000004989                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000498F                 jmp     loc_4359
.text:0000000000004994 ; ---------------------------------------------------------------------------
.text:0000000000004994
.text:0000000000004994 loc_4994:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004994                                         ; DATA XREF: .rodata:jpt_3DC1↓o
.text:0000000000004994                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000004996                 jnz     loc_3DC3        ; jumptable 00000000000121F1 case 1
.text:000000000000499C                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000049A1
.text:00000000000049A1 loc_49A1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:00000000000049A1                 test    r13, r13
.text:00000000000049A4                 jnz     loc_4F3A
.text:00000000000049AA                 lea     rax, asc_70E5   ; "'"
.text:00000000000049B1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000049BA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000049BF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000049C4                 xor     r12d, r12d
.text:00000000000049C7                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000049CC                 mov     [rsp+0E8h+n], 1
.text:00000000000049D5                 mov     [rsp+0E8h+s2], rax
.text:00000000000049DA                 mov     r15d, 1
.text:00000000000049E0                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000049E8                 jmp     loc_3E03
.text:00000000000049E8 ; ---------------------------------------------------------------------------
.text:00000000000049ED                 align 10h
.text:00000000000049F0
.text:00000000000049F0 loc_49F0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000049F0                                         ; DATA XREF: .rodata:jpt_3DC1↓o
.text:00000000000049F0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:00000000000049F2                 jnz     loc_4DED
.text:00000000000049F8                 test    r13, r13
.text:00000000000049FB                 jz      loc_4C26
.text:0000000000004A01                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000004A05                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004A0A                 xor     r12d, r12d
.text:0000000000004A0D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004A12                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004A1B
.text:0000000000004A1B loc_4A1B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000004A1B                 lea     rax, unk_70E3
.text:0000000000004A22                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004A27                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004A2C                 mov     [rsp+0E8h+n], 1
.text:0000000000004A35                 mov     r15d, 1
.text:0000000000004A3B                 mov     [rsp+0E8h+s2], rax
.text:0000000000004A40                 jmp     loc_3E03
.text:0000000000004A45 ; ---------------------------------------------------------------------------
.text:0000000000004A45
.text:0000000000004A45 loc_4A45:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004A45                                         ; DATA XREF: .rodata:jpt_3DC1↓o
.text:0000000000004A45                 lea     rax, unk_70E3   ; jumptable 00000000000121F1 case 6
.text:0000000000004A4C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004A51                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004A56                 xor     r12d, r12d
.text:0000000000004A59                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004A62                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004A67                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004A6C                 mov     [rsp+0E8h+n], 1
.text:0000000000004A75                 xor     r15d, r15d
.text:0000000000004A78                 mov     [rsp+0E8h+s2], rax
.text:0000000000004A7D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000004A85                 jmp     loc_3E03
.text:0000000000004A8A ; ---------------------------------------------------------------------------
.text:0000000000004A8A
.text:0000000000004A8A loc_4A8A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004A8A                                         ; DATA XREF: .rodata:jpt_3DC1↓o
.text:0000000000004A8A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000004A8F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004A94                 xor     r12d, r12d
.text:0000000000004A97                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004AA0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004AA5                 xor     r15d, r15d
.text:0000000000004AA8                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004AAD                 mov     [rsp+0E8h+n], 0
.text:0000000000004AB6                 mov     [rsp+0E8h+s2], 0
.text:0000000000004ABF                 jmp     loc_3E03
.text:0000000000004AC4 ; ---------------------------------------------------------------------------
.text:0000000000004AC4
.text:0000000000004AC4 loc_4AC4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004AC4                                         ; DATA XREF: .rodata:jpt_3DC1↓o
.text:0000000000004AC4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000004AC9                 jz      short loc_4B21
.text:0000000000004ACB                 lea     rsi, asc_70E7   ; "`"
.text:0000000000004AD2                 xor     edi, edi        ; domainname
.text:0000000000004AD4                 mov     edx, 5          ; category
.text:0000000000004AD9                 call    _dcgettext
.text:0000000000004ADE                 mov     rcx, rax
.text:0000000000004AE1                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004AE6                 lea     rax, asc_70E7   ; "`"
.text:0000000000004AED                 cmp     rcx, rax
.text:0000000000004AF0                 jz      loc_4E8E
.text:0000000000004AF6
.text:0000000000004AF6 loc_4AF6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000004AF6                 lea     rsi, asc_70E5   ; "'"
.text:0000000000004AFD                 xor     edi, edi        ; domainname
.text:0000000000004AFF                 mov     edx, 5          ; category
.text:0000000000004B04                 call    _dcgettext
.text:0000000000004B09                 mov     rcx, rax
.text:0000000000004B0C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004B11                 lea     rax, asc_70E5   ; "'"
.text:0000000000004B18                 cmp     rcx, rax
.text:0000000000004B1B                 jz      loc_4EA4
.text:0000000000004B21
.text:0000000000004B21 loc_4B21:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000004B21                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000004B21                 xor     r15d, r15d
.text:0000000000004B24                 test    ebx, ebx
.text:0000000000004B26                 jz      loc_4CED
.text:0000000000004B2C
.text:0000000000004B2C loc_4B2C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000004B2C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000004B2C                 test    ebx, ebx
.text:0000000000004B2E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000004B33                 setnz   [rsp+0E8h+var_D9]
.text:0000000000004B38                 xor     r12d, r12d
.text:0000000000004B3B                 mov     rdi, rbx        ; s
.text:0000000000004B3E                 call    _strlen
.text:0000000000004B43                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004B48                 mov     [rsp+0E8h+n], rax
.text:0000000000004B4D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004B52                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004B57                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004B60                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004B65                 jmp     loc_3E03
.text:0000000000004B6A ; ---------------------------------------------------------------------------
.text:0000000000004B6A
.text:0000000000004B6A loc_4B6A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004B6A                                         ; DATA XREF: .rodata:jpt_3DC1↓o
.text:0000000000004B6A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000004B6F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004B74                 xor     r12d, r12d
.text:0000000000004B77                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004B80                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004B85                 xor     r15d, r15d
.text:0000000000004B88                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004B8D                 mov     [rsp+0E8h+n], 0
.text:0000000000004B96                 mov     [rsp+0E8h+s2], 0
.text:0000000000004B9F                 jmp     loc_3E03
.text:0000000000004BA4 ; ---------------------------------------------------------------------------
.text:0000000000004BA4
.text:0000000000004BA4 loc_4BA4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004BA4                                         ; DATA XREF: .rodata:jpt_3DC1↓o
.text:0000000000004BA4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000004BA9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004BAE                 xor     r12d, r12d
.text:0000000000004BB1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004BBA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004BBF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004BC4                 jmp     loc_3DE3
.text:0000000000004BC9 ; ---------------------------------------------------------------------------
.text:0000000000004BC9
.text:0000000000004BC9 loc_4BC9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000004BC9                 cmp     r13, r15
.text:0000000000004BCC                 jbe     short loc_4BD3
.text:0000000000004BCE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000004BD3
.text:0000000000004BD3 loc_4BD3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000004BD3                 lea     rax, [rcx+2]
.text:0000000000004BD7                 cmp     r13, rax
.text:0000000000004BDA                 jbe     short loc_4BE2
.text:0000000000004BDC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000004BE2
.text:0000000000004BE2 loc_4BE2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000004BE2                 mov     eax, r12d
.text:0000000000004BE5                 lea     r15, [rcx+3]
.text:0000000000004BE9                 xor     r12d, r12d
.text:0000000000004BEC                 mov     ebx, 30h ; '0'
.text:0000000000004BF1                 jmp     loc_3F58
.text:0000000000004BF1 ; ---------------------------------------------------------------------------
.text:0000000000004BF6                 align 20h
.text:0000000000004C00
.text:0000000000004C00 loc_4C00:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000004C00                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004C05                 mov     rbp, r11
.text:0000000000004C08                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004C0C                 jmp     loc_48B9
.text:0000000000004C11 ; ---------------------------------------------------------------------------
.text:0000000000004C11
.text:0000000000004C11 loc_4C11:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000004C11                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004C16                 xor     r12d, r12d
.text:0000000000004C19                 jmp     loc_4720
.text:0000000000004C1E ; ---------------------------------------------------------------------------
.text:0000000000004C1E
.text:0000000000004C1E loc_4C1E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000004C1E                 xor     r10d, r10d
.text:0000000000004C21                 jmp     loc_47DD
.text:0000000000004C26 ; ---------------------------------------------------------------------------
.text:0000000000004C26
.text:0000000000004C26 loc_4C26:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000004C26                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004C2F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004C34                 xor     r12d, r12d
.text:0000000000004C37                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004C3C                 jmp     loc_4A1B
.text:0000000000004C41 ; ---------------------------------------------------------------------------
.text:0000000000004C41
.text:0000000000004C41 loc_4C41:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000004C41                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004C46                 mov     rsi, r14
.text:0000000000004C49                 mov     rcx, r13
.text:0000000000004C4C                 mov     rax, rbx
.text:0000000000004C4F                 mov     rdi, rbx
.text:0000000000004C52                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004C58                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004C5D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000004C65                 cmp     rsi, r11
.text:0000000000004C68                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004C6E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004C76                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004C7B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004C80                 jnb     short loc_4CA8
.text:0000000000004C82                 cmp     byte ptr [rcx], 0
.text:0000000000004C85                 jnz     short loc_4C97
.text:0000000000004C87                 jmp     short loc_4CA8
.text:0000000000004C87 ; ---------------------------------------------------------------------------
.text:0000000000004C89                 align 10h
.text:0000000000004C90
.text:0000000000004C90 loc_4C90:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000004C90                 cmp     byte ptr [r9+rax], 0
.text:0000000000004C95                 jz      short loc_4CA5
.text:0000000000004C97
.text:0000000000004C97 loc_4C97:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000004C97                 add     rax, 1
.text:0000000000004C9B                 lea     rdx, [rbp+rax+0]
.text:0000000000004CA0                 cmp     r11, rdx
.text:0000000000004CA3                 ja      short loc_4C90
.text:0000000000004CA5
.text:0000000000004CA5 loc_4CA5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000004CA5                 mov     rdi, rax
.text:0000000000004CA8
.text:0000000000004CA8 loc_4CA8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000004CA8                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000004CA8                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004CAD                 xor     r12d, r12d
.text:0000000000004CB0                 jmp     loc_4716
.text:0000000000004CB5 ; ---------------------------------------------------------------------------
.text:0000000000004CB5
.text:0000000000004CB5 loc_4CB5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000004CB5                 mov     rdi, rbx
.text:0000000000004CB8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004CBE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004CC3                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004CC9                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004CD1                 xor     r12d, r12d
.text:0000000000004CD4                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004CD9                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004CDE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004CE3                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004CE8                 jmp     loc_4716
.text:0000000000004CED ; ---------------------------------------------------------------------------
.text:0000000000004CED
.text:0000000000004CED loc_4CED:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000004CED                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000004CF2                 movzx   eax, byte ptr [rdx]
.text:0000000000004CF5                 test    al, al
.text:0000000000004CF7                 jz      loc_4B2C
.text:0000000000004CFD                 nop     dword ptr [rax]
.text:0000000000004D00
.text:0000000000004D00 loc_4D00:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000004D00                 cmp     r13, r15
.text:0000000000004D03                 jbe     short loc_4D09
.text:0000000000004D05                 mov     [r14+r15], al
.text:0000000000004D09
.text:0000000000004D09 loc_4D09:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000004D09                 add     r15, 1
.text:0000000000004D0D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000004D12                 test    al, al
.text:0000000000004D14                 jnz     short loc_4D00
.text:0000000000004D16                 jmp     loc_4B2C
.text:0000000000004D1B ; ---------------------------------------------------------------------------
.text:0000000000004D1B
.text:0000000000004D1B loc_4D1B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000004D1B                 mov     eax, edx
.text:0000000000004D1D                 jmp     loc_4277
.text:0000000000004D22 ; ---------------------------------------------------------------------------
.text:0000000000004D22
.text:0000000000004D22 loc_4D22:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000004D22                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000004D26                 cmp     bl, 3Eh ; '>'
.text:0000000000004D29                 ja      loc_45A0
.text:0000000000004D2F                 mov     rax, 7000A38200000000h
.text:0000000000004D39                 bt      rax, rbx
.text:0000000000004D3D                 jnb     loc_45A0
.text:0000000000004D43                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004D48                 jnz     loc_4F32
.text:0000000000004D4E                 cmp     r13, r15
.text:0000000000004D51                 jbe     short loc_4D58
.text:0000000000004D53                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000004D58
.text:0000000000004D58 loc_4D58:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000004D58                 lea     rax, [r15+1]
.text:0000000000004D5C                 cmp     r13, rax
.text:0000000000004D5F                 jbe     short loc_4D67
.text:0000000000004D61                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000004D67
.text:0000000000004D67 loc_4D67:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000004D67                 lea     rax, [r15+2]
.text:0000000000004D6B                 cmp     r13, rax
.text:0000000000004D6E                 jbe     short loc_4D76
.text:0000000000004D70                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000004D76
.text:0000000000004D76 loc_4D76:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000004D76                 lea     rax, [r15+3]
.text:0000000000004D7A                 cmp     r13, rax
.text:0000000000004D7D                 jbe     short loc_4D85
.text:0000000000004D7F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000004D85
.text:0000000000004D85 loc_4D85:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000004D85                 add     r15, 4
.text:0000000000004D89                 xor     edx, edx
.text:0000000000004D8B                 xor     r12d, r12d
.text:0000000000004D8E                 xor     eax, eax
.text:0000000000004D90                 mov     rbp, rcx
.text:0000000000004D93                 jmp     loc_3F58
.text:0000000000004D98 ; ---------------------------------------------------------------------------
.text:0000000000004D98
.text:0000000000004D98 loc_4D98:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004D98                                         ; DATA XREF: .rodata:jpt_3DC1↓o
.text:0000000000004D98                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000004D9A                 jz      loc_4F28
.text:0000000000004DA0                 lea     rax, asc_70E5   ; "'"
.text:0000000000004DA7                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004DAC                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004DB1                 xor     r12d, r12d
.text:0000000000004DB4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004DBD                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004DC2                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004DC7                 mov     [rsp+0E8h+n], 1
.text:0000000000004DD0                 xor     r15d, r15d
.text:0000000000004DD3                 mov     [rsp+0E8h+s2], rax
.text:0000000000004DD8                 jmp     loc_3E03
.text:0000000000004DD8 ; ---------------------------------------------------------------------------
.text:0000000000004DDD                 align 20h
.text:0000000000004DE0
.text:0000000000004DE0 loc_4DE0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000004DE0                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000004DE0                 mov     rbp, r11
.text:0000000000004DE3                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004DE8                 jmp     loc_48B9
.text:0000000000004DED ; ---------------------------------------------------------------------------
.text:0000000000004DED
.text:0000000000004DED loc_4DED:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000004DED                 lea     rax, unk_70E3
.text:0000000000004DF4                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004DF9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004DFE                 xor     r12d, r12d
.text:0000000000004E01                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004E0A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004E0F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004E14                 mov     [rsp+0E8h+n], 1
.text:0000000000004E1D                 xor     r15d, r15d
.text:0000000000004E20                 mov     [rsp+0E8h+s2], rax
.text:0000000000004E25                 jmp     loc_3E03
.text:0000000000004E2A ; ---------------------------------------------------------------------------
.text:0000000000004E2A
.text:0000000000004E2A loc_4E2A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000004E2A                 mov     eax, edx
.text:0000000000004E2C
.text:0000000000004E2C loc_4E2C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000004E2C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000004E2C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000004E31                 test    rbx, rbx
.text:0000000000004E34                 jz      short loc_4E62
.text:0000000000004E36                 test    al, al
.text:0000000000004E38                 jz      short loc_4E62
.text:0000000000004E3A                 movzx   ecx, byte ptr [rbx]
.text:0000000000004E3D                 mov     rax, rbx
.text:0000000000004E40                 test    cl, cl
.text:0000000000004E42                 jz      short loc_4E62
.text:0000000000004E44                 mov     rdx, r15
.text:0000000000004E47                 sub     rax, r15
.text:0000000000004E4A
.text:0000000000004E4A loc_4E4A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000004E4A                 cmp     r13, rdx
.text:0000000000004E4D                 jbe     short loc_4E53
.text:0000000000004E4F                 mov     [r14+rdx], cl
.text:0000000000004E53
.text:0000000000004E53 loc_4E53:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000004E53                 add     rdx, 1
.text:0000000000004E57                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000004E5B                 test    cl, cl
.text:0000000000004E5D                 jnz     short loc_4E4A
.text:0000000000004E5F                 mov     r15, rdx
.text:0000000000004E62
.text:0000000000004E62 loc_4E62:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000004E62                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000004E62                 cmp     r13, r15
.text:0000000000004E65                 jbe     loc_4909
.text:0000000000004E6B                 mov     byte ptr [r14+r15], 0
.text:0000000000004E70                 jmp     loc_4909
.text:0000000000004E75 ; ---------------------------------------------------------------------------
.text:0000000000004E75
.text:0000000000004E75 loc_4E75:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000004E75                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004E7A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004E7F                 mov     rbp, r11
.text:0000000000004E82                 setz    al
.text:0000000000004E85                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004E89                 jmp     loc_48B9
.text:0000000000004E8E ; ---------------------------------------------------------------------------
.text:0000000000004E8E
.text:0000000000004E8E loc_4E8E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000004E8E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004E92                 mov     rdi, rcx
.text:0000000000004E95                 call    gettext_quote
.text:0000000000004E9A                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004E9F                 jmp     loc_4AF6
.text:0000000000004EA4 ; ---------------------------------------------------------------------------
.text:0000000000004EA4
.text:0000000000004EA4 loc_4EA4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004EA4                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004EA8                 mov     rdi, rcx
.text:0000000000004EAB                 call    gettext_quote
.text:0000000000004EB0                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004EB5                 jmp     loc_4B21
.text:0000000000004EBA ; ---------------------------------------------------------------------------
.text:0000000000004EBA
.text:0000000000004EBA loc_4EBA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000004EBA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004EBF                 mov     rbp, r11
.text:0000000000004EC2                 mov     eax, edx
.text:0000000000004EC4                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004EC8                 jmp     loc_48B9
.text:0000000000004ECD ; ---------------------------------------------------------------------------
.text:0000000000004ECD
.text:0000000000004ECD loc_4ECD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000004ECD                 sub     rsp, 8
.text:0000000000004ED1                 mov     r8d, 5
.text:0000000000004ED7                 mov     rcx, r11
.text:0000000000004EDA                 push    [rsp+0F0h+var_88]
.text:0000000000004EDE                 push    [rsp+0F8h+var_80]
.text:0000000000004EE2                 mov     rdi, r14
.text:0000000000004EE5                 push    [rsp+100h+var_C8]
.text:0000000000004EE9                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004EF1                 mov     rdx, [rsp+108h+s]
.text:0000000000004EF6                 mov     rsi, [rsp+108h+var_98]
.text:0000000000004EFB                 call    quotearg_buffer_restyled
.text:0000000000004F00                 add     rsp, 20h
.text:0000000000004F04                 mov     r15, rax
.text:0000000000004F07                 jmp     loc_4909
.text:0000000000004F0C ; ---------------------------------------------------------------------------
.text:0000000000004F0C
.text:0000000000004F0C loc_4F0C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000004F0C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000004F11                 jmp     loc_4E2C
.text:0000000000004F16 ; ---------------------------------------------------------------------------
.text:0000000000004F16
.text:0000000000004F16 loc_4F16:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000004F16                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004F1E                 jmp     loc_48B9
.text:0000000000004F23 ; ---------------------------------------------------------------------------
.text:0000000000004F23
.text:0000000000004F23 loc_4F23:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000004F23                 call    ___stack_chk_fail
.text:0000000000004F28 ; ---------------------------------------------------------------------------
.text:0000000000004F28
.text:0000000000004F28 loc_4F28:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000004F28                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004F2D                 jmp     loc_49A1
.text:0000000000004F32 ; ---------------------------------------------------------------------------
.text:0000000000004F32
.text:0000000000004F32 loc_4F32:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000004F32                 mov     rbp, r11
.text:0000000000004F35                 jmp     loc_48D0
.text:0000000000004F3A ; ---------------------------------------------------------------------------
.text:0000000000004F3A
.text:0000000000004F3A loc_4F3A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000004F3A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004F3F                 xor     eax, eax
.text:0000000000004F41                 xor     r12d, r12d
.text:0000000000004F44                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004F4D                 jmp     loc_44F4
.text:0000000000004F52 ; ---------------------------------------------------------------------------
.text:0000000000004F52
.text:0000000000004F52 loc_4F52:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000004F52                 mov     rdx, r13
.text:0000000000004F55                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004F5A                 jmp     loc_4552
.text:0000000000004F5F ; ---------------------------------------------------------------------------
.text:0000000000004F5F
.text:0000000000004F5F def_3DC1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000004F5F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000004F5F ; } // starts at 3D30
.text:0000000000004F5F quotearg_buffer_restyled endp
.text:0000000000004F5F
.text:0000000000004F5F ; ---------------------------------------------------------------------------
.text:0000000000004F64                 align 10h
.text:0000000000004F70
.text:0000000000004F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F70
.text:0000000000004F70
.text:0000000000004F70 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000004F70                                         ; quotearg_n_mem+7↓j ...
.text:0000000000004F70
.text:0000000000004F70 var_50          = qword ptr -50h
.text:0000000000004F70 var_48          = qword ptr -48h
.text:0000000000004F70 var_40          = dword ptr -40h
.text:0000000000004F70 var_3C          = dword ptr -3Ch
.text:0000000000004F70
.text:0000000000004F70 ; __unwind {
.text:0000000000004F70                 push    r15
.text:0000000000004F72                 push    r14
.text:0000000000004F74                 movsxd  r15, edi
.text:0000000000004F77                 push    r13
.text:0000000000004F79                 push    r12
.text:0000000000004F7B                 mov     r14, rdx
.text:0000000000004F7E                 push    rbp
.text:0000000000004F7F                 push    rbx
.text:0000000000004F80                 mov     rbp, rcx
.text:0000000000004F83                 sub     rsp, 28h
.text:0000000000004F87                 mov     [rsp+58h+var_50], rsi
.text:0000000000004F8C                 call    ___errno_location
.text:0000000000004F91                 mov     r13, rax
.text:0000000000004F94                 mov     eax, [rax]
.text:0000000000004F96                 test    r15d, r15d
.text:0000000000004F99                 mov     rbx, cs:slotvec
.text:0000000000004FA0                 mov     [rsp+58h+var_40], eax
.text:0000000000004FA4                 js      loc_5111
.text:0000000000004FAA                 cmp     cs:nslots, r15d
.text:0000000000004FB1                 jg      short loc_5015
.text:0000000000004FB3                 cmp     r15d, 7FFFFFFFh
.text:0000000000004FBA                 jz      loc_5116
.text:0000000000004FC0                 lea     r12d, [r15+1]
.text:0000000000004FC4                 lea     rax, slotvec0
.text:0000000000004FCB                 movsxd  rsi, r12d
.text:0000000000004FCE                 shl     rsi, 4
.text:0000000000004FD2                 cmp     rbx, rax
.text:0000000000004FD5                 jz      loc_50F0
.text:0000000000004FDB                 mov     rdi, rbx
.text:0000000000004FDE                 call    xrealloc
.text:0000000000004FE3                 mov     rbx, rax
.text:0000000000004FE6                 mov     cs:slotvec, rax
.text:0000000000004FED
.text:0000000000004FED loc_4FED:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000004FED                 movsxd  rdi, cs:nslots
.text:0000000000004FF4                 mov     edx, r12d
.text:0000000000004FF7                 xor     esi, esi        ; c
.text:0000000000004FF9                 sub     edx, edi
.text:0000000000004FFB                 shl     rdi, 4
.text:0000000000004FFF                 movsxd  rdx, edx
.text:0000000000005002                 add     rdi, rbx        ; s
.text:0000000000005005                 shl     rdx, 4          ; n
.text:0000000000005009                 call    _memset
.text:000000000000500E                 mov     cs:nslots, r12d
.text:0000000000005015
.text:0000000000005015 loc_5015:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000005015                 mov     eax, [rbp+4]
.text:0000000000005018                 shl     r15, 4
.text:000000000000501C                 sub     rsp, 8
.text:0000000000005020                 add     rbx, r15
.text:0000000000005023                 lea     r15, [rbp+8]
.text:0000000000005027                 mov     r8d, [rbp+0]
.text:000000000000502B                 mov     r11, [rbx]
.text:000000000000502E                 mov     r12, [rbx+8]
.text:0000000000005032                 mov     rcx, r14
.text:0000000000005035                 or      eax, 1
.text:0000000000005038                 mov     [rsp+60h+var_3C], eax
.text:000000000000503C                 push    qword ptr [rbp+30h]
.text:000000000000503F                 mov     r9d, eax
.text:0000000000005042                 push    qword ptr [rbp+28h]
.text:0000000000005045                 push    r15
.text:0000000000005047                 mov     rsi, r11
.text:000000000000504A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000504F                 mov     rdi, r12
.text:0000000000005052                 mov     [rsp+78h+var_48], r11
.text:0000000000005057                 call    quotearg_buffer_restyled
.text:000000000000505C                 add     rsp, 20h
.text:0000000000005060                 mov     r11, [rsp+58h+var_48]
.text:0000000000005065                 cmp     r11, rax
.text:0000000000005068                 ja      short loc_50D1
.text:000000000000506A                 lea     rsi, [rax+1]
.text:000000000000506E                 lea     rax, slot0
.text:0000000000005075                 cmp     r12, rax
.text:0000000000005078                 mov     [rbx], rsi
.text:000000000000507B                 jz      short loc_508F
.text:000000000000507D                 mov     rdi, r12        ; ptr
.text:0000000000005080                 mov     [rsp+58h+var_48], rsi
.text:0000000000005085                 call    _free
.text:000000000000508A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000508F
.text:000000000000508F loc_508F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000508F                 mov     rdi, rsi
.text:0000000000005092                 mov     [rsp+58h+var_48], rsi
.text:0000000000005097                 call    xmalloc
.text:000000000000509C                 sub     rsp, 8
.text:00000000000050A0                 mov     [rbx+8], rax
.text:00000000000050A4                 mov     r8d, [rbp+0]
.text:00000000000050A8                 push    qword ptr [rbp+30h]
.text:00000000000050AB                 push    qword ptr [rbp+28h]
.text:00000000000050AE                 mov     rcx, r14
.text:00000000000050B1                 push    r15
.text:00000000000050B3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000050B8                 mov     rdi, rax
.text:00000000000050BB                 mov     rdx, [rsp+78h+var_50]
.text:00000000000050C0                 mov     rsi, [rsp+78h+var_48]
.text:00000000000050C5                 mov     r12, rax
.text:00000000000050C8                 call    quotearg_buffer_restyled
.text:00000000000050CD                 add     rsp, 20h
.text:00000000000050D1
.text:00000000000050D1 loc_50D1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000050D1                 mov     eax, [rsp+58h+var_40]
.text:00000000000050D5                 mov     [r13+0], eax
.text:00000000000050D9                 add     rsp, 28h
.text:00000000000050DD                 mov     rax, r12
.text:00000000000050E0                 pop     rbx
.text:00000000000050E1                 pop     rbp
.text:00000000000050E2                 pop     r12
.text:00000000000050E4                 pop     r13
.text:00000000000050E6                 pop     r14
.text:00000000000050E8                 pop     r15
.text:00000000000050EA                 retn
.text:00000000000050EA ; ---------------------------------------------------------------------------
.text:00000000000050EB                 align 10h
.text:00000000000050F0
.text:00000000000050F0 loc_50F0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000050F0                 xor     edi, edi
.text:00000000000050F2                 call    xrealloc
.text:00000000000050F7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000050FF                 mov     rbx, rax
.text:0000000000005102                 mov     cs:slotvec, rax
.text:0000000000005109                 movups  xmmword ptr [rax], xmm0
.text:000000000000510C                 jmp     loc_4FED
.text:0000000000005111 ; ---------------------------------------------------------------------------
.text:0000000000005111
.text:0000000000005111 loc_5111:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000005111                 call    _abort
.text:0000000000005116 ; ---------------------------------------------------------------------------
.text:0000000000005116
.text:0000000000005116 loc_5116:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000005116                 call    xalloc_die
.text:0000000000005116 ; } // starts at 4F70
.text:0000000000005116 quotearg_n_options endp
.text:0000000000005116
.text:0000000000005116 ; ---------------------------------------------------------------------------
.text:000000000000511B                 align 20h
.text:0000000000005120
.text:0000000000005120 ; =============== S U B R O U T I N E =======================================
.text:0000000000005120
.text:0000000000005120 ; Attributes: info_from_lumina
.text:0000000000005120
.text:0000000000005120 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000005120                 public clone_quoting_options
.text:0000000000005120 clone_quoting_options proc near
.text:0000000000005120 ; __unwind {
.text:0000000000005120                 push    r12
.text:0000000000005122                 push    rbp
.text:0000000000005123                 push    rbx
.text:0000000000005124                 mov     rbx, rdi
.text:0000000000005127                 call    ___errno_location
.text:000000000000512C                 mov     r12d, [rax]
.text:000000000000512F                 mov     rbp, rax
.text:0000000000005132                 lea     rax, default_quoting_options
.text:0000000000005139                 test    rbx, rbx
.text:000000000000513C                 mov     esi, 38h ; '8'  ; n
.text:0000000000005141                 cmovz   rbx, rax
.text:0000000000005145                 mov     rdi, rbx        ; src
.text:0000000000005148                 call    xmemdup
.text:000000000000514D                 mov     [rbp+0], r12d
.text:0000000000005151                 pop     rbx
.text:0000000000005152                 pop     rbp
.text:0000000000005153                 pop     r12
.text:0000000000005155                 retn
.text:0000000000005155 ; } // starts at 5120
.text:0000000000005155 clone_quoting_options endp
.text:0000000000005155
.text:0000000000005155 ; ---------------------------------------------------------------------------
.text:0000000000005156                 align 20h
.text:0000000000005160
.text:0000000000005160 ; =============== S U B R O U T I N E =======================================
.text:0000000000005160
.text:0000000000005160
.text:0000000000005160                 public get_quoting_style
.text:0000000000005160 get_quoting_style proc near
.text:0000000000005160 ; __unwind {
.text:0000000000005160                 lea     rax, default_quoting_options
.text:0000000000005167                 test    rdi, rdi
.text:000000000000516A                 cmovz   rdi, rax
.text:000000000000516E                 mov     eax, [rdi]
.text:0000000000005170                 retn
.text:0000000000005170 ; } // starts at 5160
.text:0000000000005170 get_quoting_style endp
.text:0000000000005170
.text:0000000000005170 ; ---------------------------------------------------------------------------
.text:0000000000005171                 align 20h
.text:0000000000005180
.text:0000000000005180 ; =============== S U B R O U T I N E =======================================
.text:0000000000005180
.text:0000000000005180
.text:0000000000005180                 public set_quoting_style
.text:0000000000005180 set_quoting_style proc near
.text:0000000000005180 ; __unwind {
.text:0000000000005180                 lea     rax, default_quoting_options
.text:0000000000005187                 test    rdi, rdi
.text:000000000000518A                 cmovz   rdi, rax
.text:000000000000518E                 mov     [rdi], esi
.text:0000000000005190                 retn
.text:0000000000005190 ; } // starts at 5180
.text:0000000000005190 set_quoting_style endp
.text:0000000000005190
.text:0000000000005190 ; ---------------------------------------------------------------------------
.text:0000000000005191                 align 20h
.text:00000000000051A0
.text:00000000000051A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051A0
.text:00000000000051A0 ; Attributes: info_from_lumina
.text:00000000000051A0
.text:00000000000051A0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000051A0                 public set_char_quoting
.text:00000000000051A0 set_char_quoting proc near
.text:00000000000051A0 ; __unwind {
.text:00000000000051A0                 lea     rax, default_quoting_options
.text:00000000000051A7                 test    rdi, rdi
.text:00000000000051AA                 mov     ecx, esi
.text:00000000000051AC                 cmovz   rdi, rax
.text:00000000000051B0                 mov     eax, esi
.text:00000000000051B2                 and     ecx, 1Fh
.text:00000000000051B5                 shr     al, 5
.text:00000000000051B8                 movzx   eax, al
.text:00000000000051BB                 lea     rdi, [rdi+rax*4+8]
.text:00000000000051C0                 mov     esi, [rdi]
.text:00000000000051C2                 mov     eax, esi
.text:00000000000051C4                 shr     eax, cl
.text:00000000000051C6                 xor     edx, eax
.text:00000000000051C8                 and     eax, 1
.text:00000000000051CB                 and     edx, 1
.text:00000000000051CE                 shl     edx, cl
.text:00000000000051D0                 xor     edx, esi
.text:00000000000051D2                 mov     [rdi], edx
.text:00000000000051D4                 retn
.text:00000000000051D4 ; } // starts at 51A0
.text:00000000000051D4 set_char_quoting endp
.text:00000000000051D4
.text:00000000000051D4 ; ---------------------------------------------------------------------------
.text:00000000000051D5                 align 20h
.text:00000000000051E0
.text:00000000000051E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051E0
.text:00000000000051E0
.text:00000000000051E0                 public set_quoting_flags
.text:00000000000051E0 set_quoting_flags proc near
.text:00000000000051E0 ; __unwind {
.text:00000000000051E0                 lea     rax, default_quoting_options
.text:00000000000051E7                 test    rdi, rdi
.text:00000000000051EA                 cmovz   rdi, rax
.text:00000000000051EE                 mov     eax, [rdi+4]
.text:00000000000051F1                 mov     [rdi+4], esi
.text:00000000000051F4                 retn
.text:00000000000051F4 ; } // starts at 51E0
.text:00000000000051F4 set_quoting_flags endp
.text:00000000000051F4
.text:00000000000051F4 ; ---------------------------------------------------------------------------
.text:00000000000051F5                 align 20h
.text:0000000000005200
.text:0000000000005200 ; =============== S U B R O U T I N E =======================================
.text:0000000000005200
.text:0000000000005200 ; Attributes: info_from_lumina
.text:0000000000005200
.text:0000000000005200 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000005200                 public set_custom_quoting
.text:0000000000005200 set_custom_quoting proc near
.text:0000000000005200 ; __unwind {
.text:0000000000005200                 lea     rax, default_quoting_options
.text:0000000000005207                 test    rdi, rdi
.text:000000000000520A                 cmovz   rdi, rax
.text:000000000000520E                 test    rsi, rsi
.text:0000000000005211                 mov     dword ptr [rdi], 0Ah
.text:0000000000005217                 jz      short loc_5227
.text:0000000000005219                 test    rdx, rdx
.text:000000000000521C                 jz      short loc_5227
.text:000000000000521E                 mov     [rdi+28h], rsi
.text:0000000000005222                 mov     [rdi+30h], rdx
.text:0000000000005226                 retn
.text:0000000000005227 ; ---------------------------------------------------------------------------
.text:0000000000005227
.text:0000000000005227 loc_5227:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000005227                                         ; set_custom_quoting+1C↑j
.text:0000000000005227                 sub     rsp, 8
.text:000000000000522B                 call    _abort
.text:000000000000522B ; } // starts at 5200
.text:000000000000522B set_custom_quoting endp
.text:000000000000522B
.text:0000000000005230
.text:0000000000005230 ; =============== S U B R O U T I N E =======================================
.text:0000000000005230
.text:0000000000005230 ; Attributes: info_from_lumina
.text:0000000000005230
.text:0000000000005230 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000005230                 public quotearg_buffer
.text:0000000000005230 quotearg_buffer proc near
.text:0000000000005230
.text:0000000000005230 var_40          = qword ptr -40h
.text:0000000000005230
.text:0000000000005230 ; __unwind {
.text:0000000000005230                 push    r15
.text:0000000000005232                 push    r14
.text:0000000000005234                 lea     rax, default_quoting_options
.text:000000000000523B                 push    r13
.text:000000000000523D                 push    r12
.text:000000000000523F                 mov     r13, rdi
.text:0000000000005242                 push    rbp
.text:0000000000005243                 push    rbx
.text:0000000000005244                 mov     rbx, r8
.text:0000000000005247                 mov     r14, rsi
.text:000000000000524A                 mov     r15, rdx
.text:000000000000524D                 sub     rsp, 18h
.text:0000000000005251                 test    r8, r8
.text:0000000000005254                 cmovz   rbx, rax
.text:0000000000005258                 mov     [rsp+48h+var_40], rcx
.text:000000000000525D                 call    ___errno_location
.text:0000000000005262                 mov     r12d, [rax]
.text:0000000000005265                 mov     rbp, rax
.text:0000000000005268                 lea     rax, [rbx+8]
.text:000000000000526C                 sub     rsp, 8
.text:0000000000005270                 mov     r9d, [rbx+4]
.text:0000000000005274                 push    qword ptr [rbx+30h]
.text:0000000000005277                 mov     r8d, [rbx]
.text:000000000000527A                 push    qword ptr [rbx+28h]
.text:000000000000527D                 mov     rdx, r15
.text:0000000000005280                 push    rax
.text:0000000000005281                 mov     rcx, [rsp+68h+var_40]
.text:0000000000005286                 mov     rsi, r14
.text:0000000000005289                 mov     rdi, r13
.text:000000000000528C                 call    quotearg_buffer_restyled
.text:0000000000005291                 mov     [rbp+0], r12d
.text:0000000000005295                 add     rsp, 38h
.text:0000000000005299                 pop     rbx
.text:000000000000529A                 pop     rbp
.text:000000000000529B                 pop     r12
.text:000000000000529D                 pop     r13
.text:000000000000529F                 pop     r14
.text:00000000000052A1                 pop     r15
.text:00000000000052A3                 retn
.text:00000000000052A3 ; } // starts at 5230
.text:00000000000052A3 quotearg_buffer endp
.text:00000000000052A3
.text:00000000000052A3 ; ---------------------------------------------------------------------------
.text:00000000000052A4                 align 10h
.text:00000000000052B0
.text:00000000000052B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052B0
.text:00000000000052B0 ; Attributes: info_from_lumina
.text:00000000000052B0
.text:00000000000052B0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000052B0                 public quotearg_alloc_mem
.text:00000000000052B0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000052B0
.text:00000000000052B0 var_5C          = dword ptr -5Ch
.text:00000000000052B0 var_58          = qword ptr -58h
.text:00000000000052B0 var_50          = qword ptr -50h
.text:00000000000052B0 var_48          = qword ptr -48h
.text:00000000000052B0 var_40          = qword ptr -40h
.text:00000000000052B0
.text:00000000000052B0 ; __unwind {
.text:00000000000052B0                 push    r15
.text:00000000000052B2                 push    r14
.text:00000000000052B4                 lea     rax, default_quoting_options
.text:00000000000052BB                 push    r13
.text:00000000000052BD                 push    r12
.text:00000000000052BF                 mov     r12, rdx
.text:00000000000052C2                 push    rbp
.text:00000000000052C3                 push    rbx
.text:00000000000052C4                 mov     rbx, rcx
.text:00000000000052C7                 mov     r14, rdi
.text:00000000000052CA                 mov     r15, rsi
.text:00000000000052CD                 sub     rsp, 38h
.text:00000000000052D1                 test    rcx, rcx
.text:00000000000052D4                 cmovz   rbx, rax
.text:00000000000052D8                 xor     ebp, ebp
.text:00000000000052DA                 call    ___errno_location
.text:00000000000052DF                 test    r12, r12
.text:00000000000052E2                 mov     r13, rax
.text:00000000000052E5                 mov     eax, [rax]
.text:00000000000052E7                 setz    bpl
.text:00000000000052EB                 or      ebp, [rbx+4]
.text:00000000000052EE                 lea     r10, [rbx+8]
.text:00000000000052F2                 sub     rsp, 8
.text:00000000000052F6                 mov     r8d, [rbx]
.text:00000000000052F9                 mov     rcx, r15
.text:00000000000052FC                 mov     [rsp+70h+var_5C], eax
.text:0000000000005300                 push    qword ptr [rbx+30h]
.text:0000000000005303                 mov     rdx, r14
.text:0000000000005306                 push    qword ptr [rbx+28h]
.text:0000000000005309                 push    r10
.text:000000000000530B                 xor     esi, esi
.text:000000000000530D                 mov     r9d, ebp
.text:0000000000005310                 xor     edi, edi
.text:0000000000005312                 mov     [rsp+88h+var_48], r10
.text:0000000000005317                 call    quotearg_buffer_restyled
.text:000000000000531C                 lea     rsi, [rax+1]
.text:0000000000005320                 mov     [rsp+88h+var_40], rax
.text:0000000000005325                 add     rsp, 20h
.text:0000000000005329                 mov     rdi, rsi
.text:000000000000532C                 mov     [rsp+68h+var_50], rsi
.text:0000000000005331                 call    xmalloc
.text:0000000000005336                 mov     [rsp+68h+var_58], rax
.text:000000000000533B                 sub     rsp, 8
.text:000000000000533F                 push    qword ptr [rbx+30h]
.text:0000000000005342                 push    qword ptr [rbx+28h]
.text:0000000000005345                 mov     r10, [rsp+80h+var_48]
.text:000000000000534A                 mov     r9d, ebp
.text:000000000000534D                 mov     r8d, [rbx]
.text:0000000000005350                 mov     rcx, r15
.text:0000000000005353                 mov     rdx, r14
.text:0000000000005356                 mov     rdi, rax
.text:0000000000005359                 push    r10
.text:000000000000535B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000005360                 call    quotearg_buffer_restyled
.text:0000000000005365                 mov     eax, [rsp+88h+var_5C]
.text:0000000000005369                 add     rsp, 20h
.text:000000000000536D                 test    r12, r12
.text:0000000000005370                 mov     [r13+0], eax
.text:0000000000005374                 jz      short loc_537F
.text:0000000000005376                 mov     r11, [rsp+68h+var_40]
.text:000000000000537B                 mov     [r12], r11
.text:000000000000537F
.text:000000000000537F loc_537F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000537F                 mov     rax, [rsp+68h+var_58]
.text:0000000000005384                 add     rsp, 38h
.text:0000000000005388                 pop     rbx
.text:0000000000005389                 pop     rbp
.text:000000000000538A                 pop     r12
.text:000000000000538C                 pop     r13
.text:000000000000538E                 pop     r14
.text:0000000000005390                 pop     r15
.text:0000000000005392                 retn
.text:0000000000005392 ; } // starts at 52B0
.text:0000000000005392 quotearg_alloc_mem endp
.text:0000000000005392
.text:0000000000005392 ; ---------------------------------------------------------------------------
.text:0000000000005393                 align 20h
.text:00000000000053A0
.text:00000000000053A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053A0
.text:00000000000053A0
.text:00000000000053A0                 public quotearg_alloc
.text:00000000000053A0 quotearg_alloc  proc near
.text:00000000000053A0 ; __unwind {
.text:00000000000053A0                 mov     rcx, rdx
.text:00000000000053A3                 xor     edx, edx
.text:00000000000053A5                 jmp     quotearg_alloc_mem
.text:00000000000053A5 ; } // starts at 53A0
.text:00000000000053A5 quotearg_alloc  endp
.text:00000000000053A5
.text:00000000000053A5 ; ---------------------------------------------------------------------------
.text:00000000000053AA                 align 10h
.text:00000000000053B0
.text:00000000000053B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053B0
.text:00000000000053B0 ; Attributes: info_from_lumina
.text:00000000000053B0
.text:00000000000053B0 ; void __cdecl quotearg_free()
.text:00000000000053B0                 public quotearg_free
.text:00000000000053B0 quotearg_free   proc near
.text:00000000000053B0 ; __unwind {
.text:00000000000053B0                 mov     eax, cs:nslots
.text:00000000000053B6                 push    r12
.text:00000000000053B8                 mov     r12, cs:slotvec
.text:00000000000053BF                 push    rbp
.text:00000000000053C0                 push    rbx
.text:00000000000053C1                 cmp     eax, 1
.text:00000000000053C4                 jle     short loc_53F1
.text:00000000000053C6                 sub     eax, 2
.text:00000000000053C9                 lea     rbx, [r12+18h]
.text:00000000000053CE                 shl     rax, 4
.text:00000000000053D2                 lea     rbp, [r12+rax+28h]
.text:00000000000053D7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000053E0
.text:00000000000053E0 loc_53E0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000053E0                 mov     rdi, [rbx]      ; ptr
.text:00000000000053E3                 add     rbx, 10h
.text:00000000000053E7                 call    _free
.text:00000000000053EC                 cmp     rbx, rbp
.text:00000000000053EF                 jnz     short loc_53E0
.text:00000000000053F1
.text:00000000000053F1 loc_53F1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000053F1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000053F6                 lea     rbx, slot0
.text:00000000000053FD                 cmp     rdi, rbx
.text:0000000000005400                 jz      short loc_5419
.text:0000000000005402                 call    _free
.text:0000000000005407                 mov     cs:slotvec0, 100h
.text:0000000000005412                 mov     cs:off_20A078, rbx
.text:0000000000005419
.text:0000000000005419 loc_5419:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000005419                 lea     rbx, slotvec0
.text:0000000000005420                 cmp     r12, rbx
.text:0000000000005423                 jz      short loc_5434
.text:0000000000005425                 mov     rdi, r12        ; ptr
.text:0000000000005428                 call    _free
.text:000000000000542D                 mov     cs:slotvec, rbx
.text:0000000000005434
.text:0000000000005434 loc_5434:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000005434                 pop     rbx
.text:0000000000005435                 mov     cs:nslots, 1
.text:000000000000543F                 pop     rbp
.text:0000000000005440                 pop     r12
.text:0000000000005442                 retn
.text:0000000000005442 ; } // starts at 53B0
.text:0000000000005442 quotearg_free   endp
.text:0000000000005442
.text:0000000000005442 ; ---------------------------------------------------------------------------
.text:0000000000005443                 align 10h
.text:0000000000005450
.text:0000000000005450 ; =============== S U B R O U T I N E =======================================
.text:0000000000005450
.text:0000000000005450
.text:0000000000005450                 public quotearg_n
.text:0000000000005450 quotearg_n      proc near
.text:0000000000005450 ; __unwind {
.text:0000000000005450                 lea     rcx, default_quoting_options
.text:0000000000005457                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000545E                 jmp     quotearg_n_options
.text:000000000000545E ; } // starts at 5450
.text:000000000000545E quotearg_n      endp
.text:000000000000545E
.text:000000000000545E ; ---------------------------------------------------------------------------
.text:0000000000005463                 align 10h
.text:0000000000005470
.text:0000000000005470 ; =============== S U B R O U T I N E =======================================
.text:0000000000005470
.text:0000000000005470
.text:0000000000005470                 public quotearg_n_mem
.text:0000000000005470 quotearg_n_mem  proc near
.text:0000000000005470 ; __unwind {
.text:0000000000005470                 lea     rcx, default_quoting_options
.text:0000000000005477                 jmp     quotearg_n_options
.text:0000000000005477 ; } // starts at 5470
.text:0000000000005477 quotearg_n_mem  endp
.text:0000000000005477
.text:0000000000005477 ; ---------------------------------------------------------------------------
.text:000000000000547C                 align 20h
.text:0000000000005480
.text:0000000000005480 ; =============== S U B R O U T I N E =======================================
.text:0000000000005480
.text:0000000000005480
.text:0000000000005480                 public quotearg
.text:0000000000005480 quotearg        proc near
.text:0000000000005480 ; __unwind {
.text:0000000000005480                 lea     rcx, default_quoting_options
.text:0000000000005487                 mov     rsi, rdi
.text:000000000000548A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005491                 xor     edi, edi
.text:0000000000005493                 jmp     quotearg_n_options
.text:0000000000005493 ; } // starts at 5480
.text:0000000000005493 quotearg        endp
.text:0000000000005493
.text:0000000000005493 ; ---------------------------------------------------------------------------
.text:0000000000005498                 align 20h
.text:00000000000054A0
.text:00000000000054A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054A0
.text:00000000000054A0
.text:00000000000054A0                 public quotearg_mem
.text:00000000000054A0 quotearg_mem    proc near
.text:00000000000054A0 ; __unwind {
.text:00000000000054A0                 lea     rcx, default_quoting_options
.text:00000000000054A7                 mov     rdx, rsi
.text:00000000000054AA                 mov     rsi, rdi
.text:00000000000054AD                 xor     edi, edi
.text:00000000000054AF                 jmp     quotearg_n_options
.text:00000000000054AF ; } // starts at 54A0
.text:00000000000054AF quotearg_mem    endp
.text:00000000000054AF
.text:00000000000054AF ; ---------------------------------------------------------------------------
.text:00000000000054B4                 align 20h
.text:00000000000054C0
.text:00000000000054C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054C0
.text:00000000000054C0 ; Attributes: info_from_lumina
.text:00000000000054C0
.text:00000000000054C0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000054C0                 public quotearg_n_style
.text:00000000000054C0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:00000000000054C0
.text:00000000000054C0 var_48          = dword ptr -48h
.text:00000000000054C0 var_44          = qword ptr -44h
.text:00000000000054C0 var_3C          = qword ptr -3Ch
.text:00000000000054C0 var_34          = qword ptr -34h
.text:00000000000054C0 var_2C          = qword ptr -2Ch
.text:00000000000054C0 var_24          = qword ptr -24h
.text:00000000000054C0 var_1C          = qword ptr -1Ch
.text:00000000000054C0 var_14          = dword ptr -14h
.text:00000000000054C0 var_10          = qword ptr -10h
.text:00000000000054C0
.text:00000000000054C0 ; __unwind {
.text:00000000000054C0                 sub     rsp, 48h
.text:00000000000054C4                 mov     rax, rdx
.text:00000000000054C7                 mov     rdx, fs:28h
.text:00000000000054D0                 mov     [rsp+48h+var_10], rdx
.text:00000000000054D5                 xor     edx, edx
.text:00000000000054D7                 cmp     esi, 0Ah
.text:00000000000054DA                 jz      short loc_5544
.text:00000000000054DC                 mov     [rsp+48h+var_48], esi
.text:00000000000054DF                 mov     rcx, rsp
.text:00000000000054E2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000054E9                 mov     rsi, rax
.text:00000000000054EC                 mov     [rsp+48h+var_44], 0
.text:00000000000054F5                 mov     [rsp+48h+var_3C], 0
.text:00000000000054FE                 mov     [rsp+48h+var_34], 0
.text:0000000000005507                 mov     [rsp+48h+var_2C], 0
.text:0000000000005510                 mov     [rsp+48h+var_24], 0
.text:0000000000005519                 mov     [rsp+48h+var_1C], 0
.text:0000000000005522                 mov     [rsp+48h+var_14], 0
.text:000000000000552A                 call    quotearg_n_options
.text:000000000000552F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000005534                 xor     rcx, fs:28h
.text:000000000000553D                 jnz     short loc_5549
.text:000000000000553F                 add     rsp, 48h
.text:0000000000005543                 retn
.text:0000000000005544 ; ---------------------------------------------------------------------------
.text:0000000000005544
.text:0000000000005544 loc_5544:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000005544                 call    _abort
.text:0000000000005549 ; ---------------------------------------------------------------------------
.text:0000000000005549
.text:0000000000005549 loc_5549:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000005549                 call    ___stack_chk_fail
.text:0000000000005549 ; } // starts at 54C0
.text:0000000000005549 quotearg_n_style endp
.text:0000000000005549
.text:0000000000005549 ; ---------------------------------------------------------------------------
.text:000000000000554E                 align 10h
.text:0000000000005550
.text:0000000000005550 ; =============== S U B R O U T I N E =======================================
.text:0000000000005550
.text:0000000000005550 ; Attributes: info_from_lumina
.text:0000000000005550
.text:0000000000005550 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000005550                 public quotearg_n_style_mem
.text:0000000000005550 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000005550
.text:0000000000005550 var_48          = dword ptr -48h
.text:0000000000005550 var_44          = qword ptr -44h
.text:0000000000005550 var_3C          = qword ptr -3Ch
.text:0000000000005550 var_34          = qword ptr -34h
.text:0000000000005550 var_2C          = qword ptr -2Ch
.text:0000000000005550 var_24          = qword ptr -24h
.text:0000000000005550 var_1C          = qword ptr -1Ch
.text:0000000000005550 var_14          = dword ptr -14h
.text:0000000000005550 var_10          = qword ptr -10h
.text:0000000000005550
.text:0000000000005550 ; __unwind {
.text:0000000000005550                 sub     rsp, 48h
.text:0000000000005554                 mov     rax, rdx
.text:0000000000005557                 mov     rdx, rcx
.text:000000000000555A                 mov     rcx, fs:28h
.text:0000000000005563                 mov     [rsp+48h+var_10], rcx
.text:0000000000005568                 xor     ecx, ecx
.text:000000000000556A                 cmp     esi, 0Ah
.text:000000000000556D                 jz      short loc_55D0
.text:000000000000556F                 mov     [rsp+48h+var_48], esi
.text:0000000000005572                 mov     rcx, rsp
.text:0000000000005575                 mov     rsi, rax
.text:0000000000005578                 mov     [rsp+48h+var_44], 0
.text:0000000000005581                 mov     [rsp+48h+var_3C], 0
.text:000000000000558A                 mov     [rsp+48h+var_34], 0
.text:0000000000005593                 mov     [rsp+48h+var_2C], 0
.text:000000000000559C                 mov     [rsp+48h+var_24], 0
.text:00000000000055A5                 mov     [rsp+48h+var_1C], 0
.text:00000000000055AE                 mov     [rsp+48h+var_14], 0
.text:00000000000055B6                 call    quotearg_n_options
.text:00000000000055BB                 mov     rdx, [rsp+48h+var_10]
.text:00000000000055C0                 xor     rdx, fs:28h
.text:00000000000055C9                 jnz     short loc_55D5
.text:00000000000055CB                 add     rsp, 48h
.text:00000000000055CF                 retn
.text:00000000000055D0 ; ---------------------------------------------------------------------------
.text:00000000000055D0
.text:00000000000055D0 loc_55D0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000055D0                 call    _abort
.text:00000000000055D5 ; ---------------------------------------------------------------------------
.text:00000000000055D5
.text:00000000000055D5 loc_55D5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000055D5                 call    ___stack_chk_fail
.text:00000000000055D5 ; } // starts at 5550
.text:00000000000055D5 quotearg_n_style_mem endp
.text:00000000000055D5
.text:00000000000055D5 ; ---------------------------------------------------------------------------
.text:00000000000055DA                 align 20h
.text:00000000000055E0
.text:00000000000055E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055E0
.text:00000000000055E0
.text:00000000000055E0                 public quotearg_style
.text:00000000000055E0 quotearg_style  proc near
.text:00000000000055E0 ; __unwind {
.text:00000000000055E0                 mov     rdx, rsi
.text:00000000000055E3                 mov     esi, edi
.text:00000000000055E5                 xor     edi, edi
.text:00000000000055E7                 jmp     quotearg_n_style
.text:00000000000055E7 ; } // starts at 55E0
.text:00000000000055E7 quotearg_style  endp
.text:00000000000055E7
.text:00000000000055E7 ; ---------------------------------------------------------------------------
.text:00000000000055EC                 align 10h
.text:00000000000055F0
.text:00000000000055F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055F0
.text:00000000000055F0
.text:00000000000055F0                 public quotearg_style_mem
.text:00000000000055F0 quotearg_style_mem proc near
.text:00000000000055F0 ; __unwind {
.text:00000000000055F0                 mov     rcx, rdx
.text:00000000000055F3                 mov     rdx, rsi
.text:00000000000055F6                 mov     esi, edi
.text:00000000000055F8                 xor     edi, edi
.text:00000000000055FA                 jmp     quotearg_n_style_mem
.text:00000000000055FA ; } // starts at 55F0
.text:00000000000055FA quotearg_style_mem endp
.text:00000000000055FA
.text:00000000000055FA ; ---------------------------------------------------------------------------
.text:00000000000055FF                 align 20h
.text:0000000000005600
.text:0000000000005600 ; =============== S U B R O U T I N E =======================================
.text:0000000000005600
.text:0000000000005600 ; Attributes: info_from_lumina
.text:0000000000005600
.text:0000000000005600 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000005600                 public quotearg_char_mem
.text:0000000000005600 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000005600                                         ; quotearg_colon+C↓j ...
.text:0000000000005600
.text:0000000000005600 var_48          = xmmword ptr -48h
.text:0000000000005600 var_38          = xmmword ptr -38h
.text:0000000000005600 var_28          = xmmword ptr -28h
.text:0000000000005600 var_18          = qword ptr -18h
.text:0000000000005600 var_10          = qword ptr -10h
.text:0000000000005600
.text:0000000000005600 ; __unwind {
.text:0000000000005600                 sub     rsp, 48h
.text:0000000000005604                 mov     ecx, edx
.text:0000000000005606                 mov     rax, fs:28h
.text:000000000000560F                 mov     [rsp+48h+var_10], rax
.text:0000000000005614                 xor     eax, eax
.text:0000000000005616                 mov     rax, cs:qword_20A210
.text:000000000000561D                 mov     r8, rsp
.text:0000000000005620                 and     ecx, 1Fh
.text:0000000000005623                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000562B                 mov     [rsp+48h+var_18], rax
.text:0000000000005630                 mov     eax, edx
.text:0000000000005632                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000005636                 shr     al, 5
.text:0000000000005639                 movzx   eax, al
.text:000000000000563C                 lea     r9, [r8+rax*4+8]
.text:0000000000005641                 movdqa  xmm0, cs:xmmword_20A1F0
.text:0000000000005649                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000564E                 movdqa  xmm0, cs:xmmword_20A200
.text:0000000000005656                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000565B                 mov     edx, [r9]
.text:000000000000565E                 mov     eax, edx
.text:0000000000005660                 shr     eax, cl
.text:0000000000005662                 not     eax
.text:0000000000005664                 and     eax, 1
.text:0000000000005667                 shl     eax, cl
.text:0000000000005669                 mov     rcx, r8
.text:000000000000566C                 xor     eax, edx
.text:000000000000566E                 mov     rdx, rsi
.text:0000000000005671                 mov     rsi, rdi
.text:0000000000005674                 mov     [r9], eax
.text:0000000000005677                 xor     edi, edi
.text:0000000000005679                 call    quotearg_n_options
.text:000000000000567E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000005683                 xor     rsi, fs:28h
.text:000000000000568C                 jnz     short loc_5693
.text:000000000000568E                 add     rsp, 48h
.text:0000000000005692                 retn
.text:0000000000005693 ; ---------------------------------------------------------------------------
.text:0000000000005693
.text:0000000000005693 loc_5693:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000005693                 call    ___stack_chk_fail
.text:0000000000005693 ; } // starts at 5600
.text:0000000000005693 quotearg_char_mem endp
.text:0000000000005693
.text:0000000000005693 ; ---------------------------------------------------------------------------
.text:0000000000005698                 align 20h
.text:00000000000056A0
.text:00000000000056A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056A0
.text:00000000000056A0
.text:00000000000056A0                 public quotearg_char
.text:00000000000056A0 quotearg_char   proc near
.text:00000000000056A0 ; __unwind {
.text:00000000000056A0                 movsx   edx, sil
.text:00000000000056A4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000056AB                 jmp     quotearg_char_mem
.text:00000000000056AB ; } // starts at 56A0
.text:00000000000056AB quotearg_char   endp
.text:00000000000056AB
.text:00000000000056B0
.text:00000000000056B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056B0
.text:00000000000056B0
.text:00000000000056B0                 public quotearg_colon
.text:00000000000056B0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000056B0 ; __unwind {
.text:00000000000056B0                 mov     edx, 3Ah ; ':'
.text:00000000000056B5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000056BC                 jmp     quotearg_char_mem
.text:00000000000056BC ; } // starts at 56B0
.text:00000000000056BC quotearg_colon  endp
.text:00000000000056BC
.text:00000000000056BC ; ---------------------------------------------------------------------------
.text:00000000000056C1                 align 10h
.text:00000000000056D0
.text:00000000000056D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056D0
.text:00000000000056D0
.text:00000000000056D0                 public quotearg_colon_mem
.text:00000000000056D0 quotearg_colon_mem proc near
.text:00000000000056D0 ; __unwind {
.text:00000000000056D0                 mov     edx, 3Ah ; ':'
.text:00000000000056D5                 jmp     quotearg_char_mem
.text:00000000000056D5 ; } // starts at 56D0
.text:00000000000056D5 quotearg_colon_mem endp
.text:00000000000056D5
.text:00000000000056D5 ; ---------------------------------------------------------------------------
.text:00000000000056DA                 align 20h
.text:00000000000056E0
.text:00000000000056E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056E0
.text:00000000000056E0 ; Attributes: info_from_lumina
.text:00000000000056E0
.text:00000000000056E0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:00000000000056E0                 public quotearg_n_style_colon
.text:00000000000056E0 quotearg_n_style_colon proc near        ; CODE XREF: main+24F↑p
.text:00000000000056E0
.text:00000000000056E0 var_48          = dword ptr -48h
.text:00000000000056E0 var_44          = qword ptr -44h
.text:00000000000056E0 var_3C          = qword ptr -3Ch
.text:00000000000056E0 var_34          = qword ptr -34h
.text:00000000000056E0 var_2C          = qword ptr -2Ch
.text:00000000000056E0 var_24          = qword ptr -24h
.text:00000000000056E0 var_1C          = qword ptr -1Ch
.text:00000000000056E0 var_14          = dword ptr -14h
.text:00000000000056E0 var_10          = qword ptr -10h
.text:00000000000056E0
.text:00000000000056E0 ; __unwind {
.text:00000000000056E0                 sub     rsp, 48h
.text:00000000000056E4                 mov     rax, rdx
.text:00000000000056E7                 mov     rdx, fs:28h
.text:00000000000056F0                 mov     [rsp+48h+var_10], rdx
.text:00000000000056F5                 xor     edx, edx
.text:00000000000056F7                 cmp     esi, 0Ah
.text:00000000000056FA                 jz      short loc_5764
.text:00000000000056FC                 mov     [rsp+48h+var_48], esi
.text:00000000000056FF                 mov     rcx, rsp
.text:0000000000005702                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005709                 mov     rsi, rax
.text:000000000000570C                 mov     [rsp+48h+var_44], 0
.text:0000000000005715                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000571E                 mov     [rsp+48h+var_34], 0
.text:0000000000005727                 mov     [rsp+48h+var_2C], 0
.text:0000000000005730                 mov     [rsp+48h+var_24], 0
.text:0000000000005739                 mov     [rsp+48h+var_1C], 0
.text:0000000000005742                 mov     [rsp+48h+var_14], 0
.text:000000000000574A                 call    quotearg_n_options
.text:000000000000574F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000005754                 xor     rcx, fs:28h
.text:000000000000575D                 jnz     short loc_5769
.text:000000000000575F                 add     rsp, 48h
.text:0000000000005763                 retn
.text:0000000000005764 ; ---------------------------------------------------------------------------
.text:0000000000005764
.text:0000000000005764 loc_5764:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000005764                 call    _abort
.text:0000000000005769 ; ---------------------------------------------------------------------------
.text:0000000000005769
.text:0000000000005769 loc_5769:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000005769                 call    ___stack_chk_fail
.text:0000000000005769 ; } // starts at 56E0
.text:0000000000005769 quotearg_n_style_colon endp
.text:0000000000005769
.text:0000000000005769 ; ---------------------------------------------------------------------------
.text:000000000000576E                 align 10h
.text:0000000000005770
.text:0000000000005770 ; =============== S U B R O U T I N E =======================================
.text:0000000000005770
.text:0000000000005770 ; Attributes: info_from_lumina
.text:0000000000005770
.text:0000000000005770 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000005770                 public quotearg_n_custom_mem
.text:0000000000005770 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000005770                                         ; quotearg_custom+12↓j ...
.text:0000000000005770
.text:0000000000005770 var_48          = xmmword ptr -48h
.text:0000000000005770 var_38          = xmmword ptr -38h
.text:0000000000005770 var_28          = xmmword ptr -28h
.text:0000000000005770 var_18          = qword ptr -18h
.text:0000000000005770 var_10          = qword ptr -10h
.text:0000000000005770
.text:0000000000005770 ; __unwind {
.text:0000000000005770                 sub     rsp, 48h
.text:0000000000005774                 mov     r9, rcx
.text:0000000000005777                 mov     rcx, cs:qword_20A210
.text:000000000000577E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000005786                 mov     rax, fs:28h
.text:000000000000578F                 mov     [rsp+48h+var_10], rax
.text:0000000000005794                 xor     eax, eax
.text:0000000000005796                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000579A                 test    rsi, rsi
.text:000000000000579D                 mov     [rsp+48h+var_18], rcx
.text:00000000000057A2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:00000000000057A9                 movdqa  xmm0, cs:xmmword_20A1F0
.text:00000000000057B1                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000057B6                 movdqa  xmm0, cs:xmmword_20A200
.text:00000000000057BE                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000057C3                 jz      short loc_57F7
.text:00000000000057C5                 test    rdx, rdx
.text:00000000000057C8                 jz      short loc_57F7
.text:00000000000057CA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:00000000000057CF                 mov     [rsp+48h+var_18], rdx
.text:00000000000057D4                 mov     rcx, rsp
.text:00000000000057D7                 mov     rdx, r8
.text:00000000000057DA                 mov     rsi, r9
.text:00000000000057DD                 call    quotearg_n_options
.text:00000000000057E2                 mov     rdi, [rsp+48h+var_10]
.text:00000000000057E7                 xor     rdi, fs:28h
.text:00000000000057F0                 jnz     short loc_57FC
.text:00000000000057F2                 add     rsp, 48h
.text:00000000000057F6                 retn
.text:00000000000057F7 ; ---------------------------------------------------------------------------
.text:00000000000057F7
.text:00000000000057F7 loc_57F7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:00000000000057F7                                         ; quotearg_n_custom_mem+58↑j
.text:00000000000057F7                 call    _abort
.text:00000000000057FC ; ---------------------------------------------------------------------------
.text:00000000000057FC
.text:00000000000057FC loc_57FC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:00000000000057FC                 call    ___stack_chk_fail
.text:00000000000057FC ; } // starts at 5770
.text:00000000000057FC quotearg_n_custom_mem endp
.text:00000000000057FC
.text:00000000000057FC ; ---------------------------------------------------------------------------
.text:0000000000005801                 align 10h
.text:0000000000005810
.text:0000000000005810 ; =============== S U B R O U T I N E =======================================
.text:0000000000005810
.text:0000000000005810
.text:0000000000005810                 public quotearg_n_custom
.text:0000000000005810 quotearg_n_custom proc near
.text:0000000000005810 ; __unwind {
.text:0000000000005810                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005817                 jmp     quotearg_n_custom_mem
.text:0000000000005817 ; } // starts at 5810
.text:0000000000005817 quotearg_n_custom endp
.text:0000000000005817
.text:0000000000005817 ; ---------------------------------------------------------------------------
.text:000000000000581C                 align 20h
.text:0000000000005820
.text:0000000000005820 ; =============== S U B R O U T I N E =======================================
.text:0000000000005820
.text:0000000000005820
.text:0000000000005820                 public quotearg_custom
.text:0000000000005820 quotearg_custom proc near
.text:0000000000005820 ; __unwind {
.text:0000000000005820                 mov     rcx, rdx
.text:0000000000005823                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000582A                 mov     rdx, rsi
.text:000000000000582D                 mov     rsi, rdi
.text:0000000000005830                 xor     edi, edi
.text:0000000000005832                 jmp     quotearg_n_custom_mem
.text:0000000000005832 ; } // starts at 5820
.text:0000000000005832 quotearg_custom endp
.text:0000000000005832
.text:0000000000005832 ; ---------------------------------------------------------------------------
.text:0000000000005837                 align 20h
.text:0000000000005840
.text:0000000000005840 ; =============== S U B R O U T I N E =======================================
.text:0000000000005840
.text:0000000000005840
.text:0000000000005840                 public quotearg_custom_mem
.text:0000000000005840 quotearg_custom_mem proc near
.text:0000000000005840 ; __unwind {
.text:0000000000005840                 mov     r8, rcx
.text:0000000000005843                 mov     rcx, rdx
.text:0000000000005846                 mov     rdx, rsi
.text:0000000000005849                 mov     rsi, rdi
.text:000000000000584C                 xor     edi, edi
.text:000000000000584E                 jmp     quotearg_n_custom_mem
.text:000000000000584E ; } // starts at 5840
.text:000000000000584E quotearg_custom_mem endp
.text:000000000000584E
.text:000000000000584E ; ---------------------------------------------------------------------------
.text:0000000000005853                 align 20h
.text:0000000000005860
.text:0000000000005860 ; =============== S U B R O U T I N E =======================================
.text:0000000000005860
.text:0000000000005860
.text:0000000000005860                 public quote_n_mem
.text:0000000000005860 quote_n_mem     proc near
.text:0000000000005860 ; __unwind {
.text:0000000000005860                 lea     rcx, quote_quoting_options
.text:0000000000005867                 jmp     quotearg_n_options
.text:0000000000005867 ; } // starts at 5860
.text:0000000000005867 quote_n_mem     endp
.text:0000000000005867
.text:0000000000005867 ; ---------------------------------------------------------------------------
.text:000000000000586C                 align 10h
.text:0000000000005870
.text:0000000000005870 ; =============== S U B R O U T I N E =======================================
.text:0000000000005870
.text:0000000000005870
.text:0000000000005870                 public quote_mem
.text:0000000000005870 quote_mem       proc near
.text:0000000000005870 ; __unwind {
.text:0000000000005870                 lea     rcx, quote_quoting_options
.text:0000000000005877                 mov     rdx, rsi
.text:000000000000587A                 mov     rsi, rdi
.text:000000000000587D                 xor     edi, edi
.text:000000000000587F                 jmp     quotearg_n_options
.text:000000000000587F ; } // starts at 5870
.text:000000000000587F quote_mem       endp
.text:000000000000587F
.text:000000000000587F ; ---------------------------------------------------------------------------
.text:0000000000005884                 align 10h
.text:0000000000005890
.text:0000000000005890 ; =============== S U B R O U T I N E =======================================
.text:0000000000005890
.text:0000000000005890
.text:0000000000005890                 public quote_n
.text:0000000000005890 quote_n         proc near
.text:0000000000005890 ; __unwind {
.text:0000000000005890                 lea     rcx, quote_quoting_options
.text:0000000000005897                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000589E                 jmp     quotearg_n_options
.text:000000000000589E ; } // starts at 5890
.text:000000000000589E quote_n         endp
.text:000000000000589E
.text:000000000000589E ; ---------------------------------------------------------------------------
.text:00000000000058A3                 align 10h
.text:00000000000058B0
.text:00000000000058B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058B0
.text:00000000000058B0
.text:00000000000058B0                 public quote
.text:00000000000058B0 quote           proc near
.text:00000000000058B0 ; __unwind {
.text:00000000000058B0                 lea     rcx, quote_quoting_options
.text:00000000000058B7                 mov     rsi, rdi
.text:00000000000058BA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000058C1                 xor     edi, edi
.text:00000000000058C3                 jmp     quotearg_n_options
.text:00000000000058C3 ; } // starts at 58B0
.text:00000000000058C3 quote           endp
.text:00000000000058C3
.text:00000000000058C3 ; ---------------------------------------------------------------------------
.text:00000000000058C8                 align 10h
.text:00000000000058D0
.text:00000000000058D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058D0
.text:00000000000058D0
.text:00000000000058D0 ; __int64 __fastcall same_nameat_part_0(int fildes)
.text:00000000000058D0 same_nameat_part_0 proc near            ; CODE XREF: same_nameat+8D↓j
.text:00000000000058D0
.text:00000000000058D0 var_158         = qword ptr -158h
.text:00000000000058D0 var_150         = qword ptr -150h
.text:00000000000058D0 stat_buf        = stat ptr -0C8h
.text:00000000000058D0 var_30          = qword ptr -30h
.text:00000000000058D0
.text:00000000000058D0 ; __unwind {
.text:00000000000058D0                 push    r13
.text:00000000000058D2                 push    r12
.text:00000000000058D4                 mov     r13d, edi
.text:00000000000058D7                 push    rbp
.text:00000000000058D8                 push    rbx
.text:00000000000058D9                 mov     rdi, rsi
.text:00000000000058DC                 mov     ebp, edx
.text:00000000000058DE                 mov     r12, rcx
.text:00000000000058E1                 sub     rsp, 138h
.text:00000000000058E8                 mov     rax, fs:28h
.text:00000000000058F1                 mov     [rsp+158h+var_30], rax
.text:00000000000058F9                 xor     eax, eax
.text:00000000000058FB                 call    dir_name
.text:0000000000005900                 mov     rcx, rsp        ; stat_buf
.text:0000000000005903                 mov     r8d, 100h       ; flag
.text:0000000000005909                 mov     rdx, rax        ; filename
.text:000000000000590C                 mov     esi, r13d       ; fildes
.text:000000000000590F                 mov     edi, 1          ; ver
.text:0000000000005914                 mov     rbx, rax
.text:0000000000005917                 call    ___fxstatat
.text:000000000000591C                 test    eax, eax
.text:000000000000591E                 jnz     loc_59D0
.text:0000000000005924
.text:0000000000005924 loc_5924:                               ; CODE XREF: same_nameat_part_0+11D↓j
.text:0000000000005924                 mov     rdi, rbx        ; ptr
.text:0000000000005927                 call    _free
.text:000000000000592C                 mov     rdi, r12
.text:000000000000592F                 call    dir_name
.text:0000000000005934                 lea     rcx, [rsp+158h+stat_buf] ; stat_buf
.text:000000000000593C                 mov     r8d, 100h       ; flag
.text:0000000000005942                 mov     rdx, rax        ; filename
.text:0000000000005945                 mov     esi, ebp        ; fildes
.text:0000000000005947                 mov     edi, 1          ; ver
.text:000000000000594C                 mov     rbx, rax
.text:000000000000594F                 call    ___fxstatat
.text:0000000000005954                 test    eax, eax
.text:0000000000005956                 jnz     short loc_59A8
.text:0000000000005958
.text:0000000000005958 loc_5958:                               ; CODE XREF: same_nameat_part_0+F5↓j
.text:0000000000005958                 xor     ebp, ebp
.text:000000000000595A                 mov     rax, [rsp+158h+stat_buf.st_ino]
.text:0000000000005962                 cmp     [rsp+158h+var_150], rax
.text:0000000000005967                 jnz     short loc_5979
.text:0000000000005969                 mov     rax, [rsp+158h+stat_buf.st_dev]
.text:0000000000005971                 cmp     [rsp+158h+var_158], rax
.text:0000000000005975                 setz    bpl
.text:0000000000005979
.text:0000000000005979 loc_5979:                               ; CODE XREF: same_nameat_part_0+97↑j
.text:0000000000005979                 mov     rdi, rbx        ; ptr
.text:000000000000597C                 call    _free
.text:0000000000005981                 mov     rdx, [rsp+158h+var_30]
.text:0000000000005989                 xor     rdx, fs:28h
.text:0000000000005992                 mov     eax, ebp
.text:0000000000005994                 jnz     short loc_59F2
.text:0000000000005996                 add     rsp, 138h
.text:000000000000599D                 pop     rbx
.text:000000000000599E                 pop     rbp
.text:000000000000599F                 pop     r12
.text:00000000000059A1                 pop     r13
.text:00000000000059A3                 retn
.text:00000000000059A3 ; ---------------------------------------------------------------------------
.text:00000000000059A4                 align 8
.text:00000000000059A8
.text:00000000000059A8 loc_59A8:                               ; CODE XREF: same_nameat_part_0+86↑j
.text:00000000000059A8                 call    ___errno_location
.text:00000000000059AD                 mov     esi, [rax]      ; errnum
.text:00000000000059AF                 lea     rdx, format+4   ; format
.text:00000000000059B6                 mov     rcx, rbx
.text:00000000000059B9                 mov     edi, 1          ; status
.text:00000000000059BE                 xor     eax, eax
.text:00000000000059C0                 call    _error
.text:00000000000059C5                 jmp     short loc_5958
.text:00000000000059C5 ; ---------------------------------------------------------------------------
.text:00000000000059C7                 align 10h
.text:00000000000059D0
.text:00000000000059D0 loc_59D0:                               ; CODE XREF: same_nameat_part_0+4E↑j
.text:00000000000059D0                 call    ___errno_location
.text:00000000000059D5                 mov     esi, [rax]      ; errnum
.text:00000000000059D7                 lea     rdx, format+4   ; format
.text:00000000000059DE                 mov     rcx, rbx
.text:00000000000059E1                 mov     edi, 1          ; status
.text:00000000000059E6                 xor     eax, eax
.text:00000000000059E8                 call    _error
.text:00000000000059ED                 jmp     loc_5924
.text:00000000000059F2 ; ---------------------------------------------------------------------------
.text:00000000000059F2
.text:00000000000059F2 loc_59F2:                               ; CODE XREF: same_nameat_part_0+C4↑j
.text:00000000000059F2                 call    ___stack_chk_fail
.text:00000000000059F2 ; } // starts at 58D0
.text:00000000000059F2 same_nameat_part_0 endp
.text:00000000000059F2
.text:00000000000059F2 ; ---------------------------------------------------------------------------
.text:00000000000059F7                 align 20h
.text:0000000000005A00
.text:0000000000005A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A00
.text:0000000000005A00
.text:0000000000005A00                 public same_nameat
.text:0000000000005A00 same_nameat     proc near               ; CODE XREF: same_name+D↓j
.text:0000000000005A00
.text:0000000000005A00 fildes          = dword ptr -3Ch
.text:0000000000005A00
.text:0000000000005A00 ; __unwind {
.text:0000000000005A00                 push    r15
.text:0000000000005A02                 push    r14
.text:0000000000005A04                 mov     r15d, edx
.text:0000000000005A07                 push    r13
.text:0000000000005A09                 push    r12
.text:0000000000005A0B                 push    rbp
.text:0000000000005A0C                 push    rbx
.text:0000000000005A0D                 mov     rbp, rcx
.text:0000000000005A10                 mov     rbx, rsi
.text:0000000000005A13                 sub     rsp, 18h
.text:0000000000005A17                 mov     [rsp+48h+fildes], edi
.text:0000000000005A1B                 mov     rdi, rsi
.text:0000000000005A1E                 call    last_component
.text:0000000000005A23                 mov     rdi, rbp
.text:0000000000005A26                 mov     r12, rax
.text:0000000000005A29                 call    last_component
.text:0000000000005A2E                 mov     rdi, r12
.text:0000000000005A31                 mov     r13, rax
.text:0000000000005A34                 call    base_len
.text:0000000000005A39                 mov     rdi, r13
.text:0000000000005A3C                 mov     r14, rax
.text:0000000000005A3F                 call    base_len
.text:0000000000005A44                 cmp     r14, rax
.text:0000000000005A47                 jz      short loc_5A60
.text:0000000000005A49
.text:0000000000005A49 loc_5A49:                               ; CODE XREF: same_nameat+70↓j
.text:0000000000005A49                 add     rsp, 18h
.text:0000000000005A4D                 xor     eax, eax
.text:0000000000005A4F                 pop     rbx
.text:0000000000005A50                 pop     rbp
.text:0000000000005A51                 pop     r12
.text:0000000000005A53                 pop     r13
.text:0000000000005A55                 pop     r14
.text:0000000000005A57                 pop     r15
.text:0000000000005A59                 retn
.text:0000000000005A59 ; ---------------------------------------------------------------------------
.text:0000000000005A5A                 align 20h
.text:0000000000005A60
.text:0000000000005A60 loc_5A60:                               ; CODE XREF: same_nameat+47↑j
.text:0000000000005A60                 mov     rdx, r14        ; n
.text:0000000000005A63                 mov     rsi, r13        ; s2
.text:0000000000005A66                 mov     rdi, r12        ; s1
.text:0000000000005A69                 call    _memcmp
.text:0000000000005A6E                 test    eax, eax
.text:0000000000005A70                 jnz     short loc_5A49
.text:0000000000005A72                 mov     edi, [rsp+48h+fildes] ; fildes
.text:0000000000005A76                 add     rsp, 18h
.text:0000000000005A7A                 mov     rcx, rbp
.text:0000000000005A7D                 mov     edx, r15d
.text:0000000000005A80                 mov     rsi, rbx
.text:0000000000005A83                 pop     rbx
.text:0000000000005A84                 pop     rbp
.text:0000000000005A85                 pop     r12
.text:0000000000005A87                 pop     r13
.text:0000000000005A89                 pop     r14
.text:0000000000005A8B                 pop     r15
.text:0000000000005A8D                 jmp     same_nameat_part_0
.text:0000000000005A8D ; } // starts at 5A00
.text:0000000000005A8D same_nameat     endp
.text:0000000000005A8D
.text:0000000000005A8D ; ---------------------------------------------------------------------------
.text:0000000000005A92                 align 20h
.text:0000000000005AA0
.text:0000000000005AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AA0
.text:0000000000005AA0
.text:0000000000005AA0                 public same_name
.text:0000000000005AA0 same_name       proc near               ; CODE XREF: triple_compare+24↑p
.text:0000000000005AA0 ; __unwind {
.text:0000000000005AA0                 mov     edx, 0FFFFFF9Ch
.text:0000000000005AA5                 mov     rcx, rsi
.text:0000000000005AA8                 mov     rsi, rdi
.text:0000000000005AAB                 mov     edi, edx
.text:0000000000005AAD                 jmp     same_nameat
.text:0000000000005AAD ; } // starts at 5AA0
.text:0000000000005AAD same_name       endp
.text:0000000000005AAD
.text:0000000000005AAD ; ---------------------------------------------------------------------------
.text:0000000000005AB2                 align 20h
.text:0000000000005AC0
.text:0000000000005AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AC0
.text:0000000000005AC0
.text:0000000000005AC0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000005AC0                 public version_etc_arn
.text:0000000000005AC0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_5EFB↓j
.text:0000000000005AC0                                         ; version_etc_va:loc_5F4B↓p ...
.text:0000000000005AC0
.text:0000000000005AC0 var_58          = qword ptr -58h
.text:0000000000005AC0 var_50          = qword ptr -50h
.text:0000000000005AC0 var_48          = qword ptr -48h
.text:0000000000005AC0 var_40          = qword ptr -40h
.text:0000000000005AC0
.text:0000000000005AC0 ; __unwind {
.text:0000000000005AC0                 push    r15
.text:0000000000005AC2                 push    r14
.text:0000000000005AC4                 push    r13
.text:0000000000005AC6                 push    r12
.text:0000000000005AC8                 mov     r12, r9
.text:0000000000005ACB                 push    rbp
.text:0000000000005ACC                 push    rbx
.text:0000000000005ACD                 mov     rbp, rdi
.text:0000000000005AD0                 mov     rbx, r8
.text:0000000000005AD3                 sub     rsp, 28h
.text:0000000000005AD7                 test    rsi, rsi
.text:0000000000005ADA                 jz      loc_5BF8
.text:0000000000005AE0                 mov     r8, rdx
.text:0000000000005AE3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000005AEA                 mov     r9, rcx
.text:0000000000005AED                 xor     eax, eax
.text:0000000000005AEF                 mov     rcx, rsi
.text:0000000000005AF2                 mov     esi, 1
.text:0000000000005AF7                 call    ___fprintf_chk
.text:0000000000005AFC
.text:0000000000005AFC loc_5AFC:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000005AFC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000005B03                 xor     edi, edi        ; domainname
.text:0000000000005B05                 mov     edx, 5          ; category
.text:0000000000005B0A                 call    _dcgettext
.text:0000000000005B0F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000005B16                 mov     rcx, rax
.text:0000000000005B19                 mov     r8d, 7E3h
.text:0000000000005B1F                 mov     esi, 1
.text:0000000000005B24                 mov     rdi, rbp
.text:0000000000005B27                 xor     eax, eax
.text:0000000000005B29                 call    ___fprintf_chk
.text:0000000000005B2E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000005B35                 xor     edi, edi        ; domainname
.text:0000000000005B37                 mov     edx, 5          ; category
.text:0000000000005B3C                 call    _dcgettext
.text:0000000000005B41                 mov     rsi, rbp        ; stream
.text:0000000000005B44                 mov     rdi, rax        ; s
.text:0000000000005B47                 call    _fputs_unlocked
.text:0000000000005B4C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000005B50                 ja      def_5B64        ; jumptable 0000000000005B64 default case
.text:0000000000005B56                 lea     rdx, jpt_5B64
.text:0000000000005B5D                 movsxd  rax, ds:(jpt_5B64 - 78A8h)[rdx+r12*4]
.text:0000000000005B61                 add     rax, rdx
.text:0000000000005B64                 jmp     rax             ; switch jump
.text:0000000000005B64 ; ---------------------------------------------------------------------------
.text:0000000000005B66                 align 10h
.text:0000000000005B70
.text:0000000000005B70 loc_5B70:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005B70                                         ; DATA XREF: .rodata:jpt_5B64↓o
.text:0000000000005B70                 mov     r9, [rbx+38h]   ; jumptable 0000000000005B64 case 8
.text:0000000000005B74                 mov     rax, [rbx+10h]
.text:0000000000005B78                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000005B7F                 mov     r8, [rbx+8]
.text:0000000000005B83                 mov     edx, 5          ; category
.text:0000000000005B88                 xor     edi, edi        ; domainname
.text:0000000000005B8A                 mov     r13, [rbx+30h]
.text:0000000000005B8E                 mov     r12, [rbx+28h]
.text:0000000000005B92                 mov     [rsp+58h+var_48], r9
.text:0000000000005B97                 mov     r15, [rbx+20h]
.text:0000000000005B9B                 mov     r14, [rbx+18h]
.text:0000000000005B9F                 mov     [rsp+58h+var_58], rax
.text:0000000000005BA3                 mov     [rsp+58h+var_50], r8
.text:0000000000005BA8                 mov     rbx, [rbx]
.text:0000000000005BAB                 call    _dcgettext
.text:0000000000005BB0                 sub     rsp, 8
.text:0000000000005BB4
.text:0000000000005BB4 loc_5BB4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000005BB4                 mov     r9, [rsp+60h+var_48]
.text:0000000000005BB9                 mov     rdx, rax
.text:0000000000005BBC                 mov     rcx, rbx
.text:0000000000005BBF                 mov     esi, 1
.text:0000000000005BC4                 mov     rdi, rbp
.text:0000000000005BC7                 xor     eax, eax
.text:0000000000005BC9                 push    r9
.text:0000000000005BCB                 push    r13
.text:0000000000005BCD                 push    r12
.text:0000000000005BCF                 push    r15
.text:0000000000005BD1                 push    r14
.text:0000000000005BD3                 mov     r9, [rsp+88h+var_58]
.text:0000000000005BD8                 mov     r8, [rsp+88h+var_50]
.text:0000000000005BDD                 call    ___fprintf_chk
.text:0000000000005BE2                 add     rsp, 30h
.text:0000000000005BE6
.text:0000000000005BE6 loc_5BE6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005BE6                                         ; DATA XREF: .rodata:jpt_5B64↓o
.text:0000000000005BE6                 add     rsp, 28h        ; jumptable 0000000000005B64 case 0
.text:0000000000005BEA                 pop     rbx
.text:0000000000005BEB                 pop     rbp
.text:0000000000005BEC                 pop     r12
.text:0000000000005BEE                 pop     r13
.text:0000000000005BF0                 pop     r14
.text:0000000000005BF2                 pop     r15
.text:0000000000005BF4                 retn
.text:0000000000005BF4 ; ---------------------------------------------------------------------------
.text:0000000000005BF5                 align 8
.text:0000000000005BF8
.text:0000000000005BF8 loc_5BF8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000005BF8                 mov     r8, rcx
.text:0000000000005BFB                 mov     rcx, rdx
.text:0000000000005BFE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000005C05                 mov     esi, 1
.text:0000000000005C0A                 xor     eax, eax
.text:0000000000005C0C                 call    ___fprintf_chk
.text:0000000000005C11                 jmp     loc_5AFC
.text:0000000000005C11 ; ---------------------------------------------------------------------------
.text:0000000000005C16                 align 20h
.text:0000000000005C20
.text:0000000000005C20 loc_5C20:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005C20                                         ; DATA XREF: .rodata:jpt_5B64↓o
.text:0000000000005C20                 mov     r10, [rbx+40h]  ; jumptable 0000000000005B64 case 9
.text:0000000000005C24                 mov     r9, [rbx+38h]
.text:0000000000005C28                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000005C2F                 mov     rax, [rbx+10h]
.text:0000000000005C33                 mov     r8, [rbx+8]
.text:0000000000005C37                 mov     edx, 5          ; category
.text:0000000000005C3C                 mov     r13, [rbx+30h]
.text:0000000000005C40                 mov     r12, [rbx+28h]
.text:0000000000005C44                 mov     r15, [rbx+20h]
.text:0000000000005C48                 mov     r14, [rbx+18h]
.text:0000000000005C4C                 mov     rbx, [rbx]
.text:0000000000005C4F                 mov     [rsp+58h+var_40], r10
.text:0000000000005C54                 mov     [rsp+58h+var_48], r9
.text:0000000000005C59                 mov     [rsp+58h+var_58], rax
.text:0000000000005C5D                 mov     [rsp+58h+var_50], r8
.text:0000000000005C62
.text:0000000000005C62 loc_5C62:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000005C62                 xor     edi, edi        ; domainname
.text:0000000000005C64                 call    _dcgettext
.text:0000000000005C69                 mov     r10, [rsp+58h+var_40]
.text:0000000000005C6E                 push    r10
.text:0000000000005C70                 jmp     loc_5BB4
.text:0000000000005C70 ; ---------------------------------------------------------------------------
.text:0000000000005C75                 align 8
.text:0000000000005C78
.text:0000000000005C78 loc_5C78:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005C78                                         ; DATA XREF: .rodata:jpt_5B64↓o
.text:0000000000005C78                 mov     rbx, [rbx]      ; jumptable 0000000000005B64 case 1
.text:0000000000005C7B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000005C82                 mov     edx, 5          ; category
.text:0000000000005C87                 xor     edi, edi        ; domainname
.text:0000000000005C89                 call    _dcgettext
.text:0000000000005C8E                 add     rsp, 28h
.text:0000000000005C92                 mov     rcx, rbx
.text:0000000000005C95                 mov     rdi, rbp
.text:0000000000005C98                 pop     rbx
.text:0000000000005C99                 pop     rbp
.text:0000000000005C9A                 pop     r12
.text:0000000000005C9C                 pop     r13
.text:0000000000005C9E                 pop     r14
.text:0000000000005CA0                 pop     r15
.text:0000000000005CA2                 mov     rdx, rax
.text:0000000000005CA5                 mov     esi, 1
.text:0000000000005CAA                 xor     eax, eax
.text:0000000000005CAC                 jmp     ___fprintf_chk
.text:0000000000005CAC ; ---------------------------------------------------------------------------
.text:0000000000005CB1                 align 8
.text:0000000000005CB8
.text:0000000000005CB8 loc_5CB8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005CB8                                         ; DATA XREF: .rodata:jpt_5B64↓o
.text:0000000000005CB8                 mov     r12, [rbx+8]    ; jumptable 0000000000005B64 case 2
.text:0000000000005CBC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000005CC3                 mov     rbx, [rbx]
.text:0000000000005CC6                 mov     edx, 5          ; category
.text:0000000000005CCB                 xor     edi, edi        ; domainname
.text:0000000000005CCD                 call    _dcgettext
.text:0000000000005CD2                 add     rsp, 28h
.text:0000000000005CD6                 mov     r8, r12
.text:0000000000005CD9                 mov     rcx, rbx
.text:0000000000005CDC                 mov     rdi, rbp
.text:0000000000005CDF                 mov     rdx, rax
.text:0000000000005CE2                 mov     esi, 1
.text:0000000000005CE7                 pop     rbx
.text:0000000000005CE8                 pop     rbp
.text:0000000000005CE9                 pop     r12
.text:0000000000005CEB                 pop     r13
.text:0000000000005CED                 pop     r14
.text:0000000000005CEF                 pop     r15
.text:0000000000005CF1                 xor     eax, eax
.text:0000000000005CF3                 jmp     ___fprintf_chk
.text:0000000000005CF3 ; ---------------------------------------------------------------------------
.text:0000000000005CF8                 align 20h
.text:0000000000005D00
.text:0000000000005D00 loc_5D00:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005D00                                         ; DATA XREF: .rodata:jpt_5B64↓o
.text:0000000000005D00                 mov     r13, [rbx+10h]  ; jumptable 0000000000005B64 case 3
.text:0000000000005D04                 mov     r12, [rbx+8]
.text:0000000000005D08                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000005D0F                 mov     rbx, [rbx]
.text:0000000000005D12                 mov     edx, 5          ; category
.text:0000000000005D17                 xor     edi, edi        ; domainname
.text:0000000000005D19                 call    _dcgettext
.text:0000000000005D1E                 add     rsp, 28h
.text:0000000000005D22                 mov     r9, r13
.text:0000000000005D25                 mov     r8, r12
.text:0000000000005D28                 mov     rcx, rbx
.text:0000000000005D2B                 mov     rdi, rbp
.text:0000000000005D2E                 mov     rdx, rax
.text:0000000000005D31                 pop     rbx
.text:0000000000005D32                 pop     rbp
.text:0000000000005D33                 pop     r12
.text:0000000000005D35                 pop     r13
.text:0000000000005D37                 pop     r14
.text:0000000000005D39                 pop     r15
.text:0000000000005D3B                 mov     esi, 1
.text:0000000000005D40                 xor     eax, eax
.text:0000000000005D42                 jmp     ___fprintf_chk
.text:0000000000005D42 ; ---------------------------------------------------------------------------
.text:0000000000005D47                 align 10h
.text:0000000000005D50
.text:0000000000005D50 loc_5D50:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005D50                                         ; DATA XREF: .rodata:jpt_5B64↓o
.text:0000000000005D50                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000005B64 case 4
.text:0000000000005D57                 mov     edx, 5          ; category
.text:0000000000005D5C                 xor     edi, edi        ; domainname
.text:0000000000005D5E                 mov     r14, [rbx+18h]
.text:0000000000005D62                 mov     r13, [rbx+10h]
.text:0000000000005D66                 mov     r12, [rbx+8]
.text:0000000000005D6A                 mov     rbx, [rbx]
.text:0000000000005D6D                 call    _dcgettext
.text:0000000000005D72                 sub     rsp, 8
.text:0000000000005D76
.text:0000000000005D76 loc_5D76:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000005D76                 push    r14
.text:0000000000005D78                 mov     rdx, rax
.text:0000000000005D7B                 mov     r9, r13
.text:0000000000005D7E                 mov     r8, r12
.text:0000000000005D81                 mov     rcx, rbx
.text:0000000000005D84                 mov     rdi, rbp
.text:0000000000005D87                 mov     esi, 1
.text:0000000000005D8C                 xor     eax, eax
.text:0000000000005D8E                 call    ___fprintf_chk
.text:0000000000005D93                 pop     rax
.text:0000000000005D94                 pop     rdx
.text:0000000000005D95                 add     rsp, 28h
.text:0000000000005D99                 pop     rbx
.text:0000000000005D9A                 pop     rbp
.text:0000000000005D9B                 pop     r12
.text:0000000000005D9D                 pop     r13
.text:0000000000005D9F                 pop     r14
.text:0000000000005DA1                 pop     r15
.text:0000000000005DA3                 retn
.text:0000000000005DA3 ; ---------------------------------------------------------------------------
.text:0000000000005DA4                 align 8
.text:0000000000005DA8
.text:0000000000005DA8 loc_5DA8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005DA8                                         ; DATA XREF: .rodata:jpt_5B64↓o
.text:0000000000005DA8                 mov     r15, [rbx+20h]  ; jumptable 0000000000005B64 case 5
.text:0000000000005DAC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000005DB3                 mov     edx, 5          ; category
.text:0000000000005DB8                 xor     edi, edi        ; domainname
.text:0000000000005DBA                 mov     r14, [rbx+18h]
.text:0000000000005DBE                 mov     r13, [rbx+10h]
.text:0000000000005DC2                 mov     r12, [rbx+8]
.text:0000000000005DC6                 mov     rbx, [rbx]
.text:0000000000005DC9                 call    _dcgettext
.text:0000000000005DCE                 push    r15
.text:0000000000005DD0                 jmp     short loc_5D76
.text:0000000000005DD0 ; ---------------------------------------------------------------------------
.text:0000000000005DD2                 align 8
.text:0000000000005DD8
.text:0000000000005DD8 loc_5DD8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005DD8                                         ; DATA XREF: .rodata:jpt_5B64↓o
.text:0000000000005DD8                 mov     r8, [rbx+8]     ; jumptable 0000000000005B64 case 6
.text:0000000000005DDC                 mov     r12, [rbx+28h]
.text:0000000000005DE0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000005DE7                 mov     r15, [rbx+20h]
.text:0000000000005DEB                 mov     r14, [rbx+18h]
.text:0000000000005DEF                 mov     edx, 5          ; category
.text:0000000000005DF4                 mov     r13, [rbx+10h]
.text:0000000000005DF8                 xor     edi, edi        ; domainname
.text:0000000000005DFA                 mov     rbx, [rbx]
.text:0000000000005DFD                 mov     [rsp+58h+var_58], r8
.text:0000000000005E01                 call    _dcgettext
.text:0000000000005E06                 sub     rsp, 8
.text:0000000000005E0A                 mov     r9, r13
.text:0000000000005E0D                 push    r12
.text:0000000000005E0F                 push    r15
.text:0000000000005E11                 push    r14
.text:0000000000005E13
.text:0000000000005E13 loc_5E13:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000005E13                 mov     r8, [rsp+78h+var_58]
.text:0000000000005E18                 mov     rcx, rbx
.text:0000000000005E1B                 mov     rdx, rax
.text:0000000000005E1E                 mov     rdi, rbp
.text:0000000000005E21                 mov     esi, 1
.text:0000000000005E26                 xor     eax, eax
.text:0000000000005E28                 call    ___fprintf_chk
.text:0000000000005E2D                 add     rsp, 20h
.text:0000000000005E31                 add     rsp, 28h
.text:0000000000005E35                 pop     rbx
.text:0000000000005E36                 pop     rbp
.text:0000000000005E37                 pop     r12
.text:0000000000005E39                 pop     r13
.text:0000000000005E3B                 pop     r14
.text:0000000000005E3D                 pop     r15
.text:0000000000005E3F                 retn
.text:0000000000005E40 ; ---------------------------------------------------------------------------
.text:0000000000005E40
.text:0000000000005E40 loc_5E40:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005E40                                         ; DATA XREF: .rodata:jpt_5B64↓o
.text:0000000000005E40                 mov     r9, [rbx+10h]   ; jumptable 0000000000005B64 case 7
.text:0000000000005E44                 mov     r13, [rbx+30h]
.text:0000000000005E48                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000005E4F                 mov     r12, [rbx+28h]
.text:0000000000005E53                 mov     r15, [rbx+20h]
.text:0000000000005E57                 mov     edx, 5          ; category
.text:0000000000005E5C                 mov     r14, [rbx+18h]
.text:0000000000005E60                 mov     r8, [rbx+8]
.text:0000000000005E64                 xor     edi, edi        ; domainname
.text:0000000000005E66                 mov     [rsp+58h+var_50], r9
.text:0000000000005E6B                 mov     rbx, [rbx]
.text:0000000000005E6E                 mov     [rsp+58h+var_58], r8
.text:0000000000005E72                 call    _dcgettext
.text:0000000000005E77                 push    r13
.text:0000000000005E79                 push    r12
.text:0000000000005E7B                 push    r15
.text:0000000000005E7D                 push    r14
.text:0000000000005E7F                 mov     r9, [rsp+78h+var_50]
.text:0000000000005E84                 jmp     short loc_5E13
.text:0000000000005E84 ; ---------------------------------------------------------------------------
.text:0000000000005E86                 align 10h
.text:0000000000005E90
.text:0000000000005E90 def_5B64:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000005E90                 mov     r10, [rbx+40h]  ; jumptable 0000000000005B64 default case
.text:0000000000005E94                 mov     r9, [rbx+38h]
.text:0000000000005E98                 mov     edx, 5
.text:0000000000005E9D                 mov     rax, [rbx+10h]
.text:0000000000005EA1                 mov     r8, [rbx+8]
.text:0000000000005EA5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000005EAC                 mov     r13, [rbx+30h]
.text:0000000000005EB0                 mov     r12, [rbx+28h]
.text:0000000000005EB4                 mov     r15, [rbx+20h]
.text:0000000000005EB8                 mov     r14, [rbx+18h]
.text:0000000000005EBC                 mov     [rsp+58h+var_40], r10
.text:0000000000005EC1                 mov     [rsp+58h+var_48], r9
.text:0000000000005EC6                 mov     [rsp+58h+var_58], rax
.text:0000000000005ECA                 mov     [rsp+58h+var_50], r8
.text:0000000000005ECF                 mov     rbx, [rbx]
.text:0000000000005ED2                 jmp     loc_5C62
.text:0000000000005ED2 ; } // starts at 5AC0
.text:0000000000005ED2 version_etc_arn endp
.text:0000000000005ED2
.text:0000000000005ED2 ; ---------------------------------------------------------------------------
.text:0000000000005ED7                 align 20h
.text:0000000000005EE0
.text:0000000000005EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EE0
.text:0000000000005EE0 ; Attributes: info_from_lumina
.text:0000000000005EE0
.text:0000000000005EE0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000005EE0                 public version_etc_ar
.text:0000000000005EE0 version_etc_ar  proc near
.text:0000000000005EE0 ; __unwind {
.text:0000000000005EE0                 xor     r9d, r9d
.text:0000000000005EE3                 cmp     qword ptr [r8], 0
.text:0000000000005EE7                 jz      short loc_5EFB
.text:0000000000005EE9                 nop     dword ptr [rax+00000000h]
.text:0000000000005EF0
.text:0000000000005EF0 loc_5EF0:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000005EF0                 add     r9, 1
.text:0000000000005EF4                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000005EF9                 jnz     short loc_5EF0
.text:0000000000005EFB
.text:0000000000005EFB loc_5EFB:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000005EFB                 jmp     version_etc_arn
.text:0000000000005EFB ; } // starts at 5EE0
.text:0000000000005EFB version_etc_ar  endp
.text:0000000000005EFB
.text:0000000000005F00
.text:0000000000005F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F00
.text:0000000000005F00 ; Attributes: info_from_lumina
.text:0000000000005F00
.text:0000000000005F00 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000005F00                 public version_etc_va
.text:0000000000005F00 version_etc_va  proc near
.text:0000000000005F00
.text:0000000000005F00 authtab         = qword ptr -68h
.text:0000000000005F00 var_10          = qword ptr -10h
.text:0000000000005F00
.text:0000000000005F00 ; __unwind {
.text:0000000000005F00                 sub     rsp, 68h
.text:0000000000005F04                 mov     r10, r8
.text:0000000000005F07                 xor     r9d, r9d
.text:0000000000005F0A                 mov     rax, fs:28h
.text:0000000000005F13                 mov     [rsp+68h+var_10], rax
.text:0000000000005F18                 xor     eax, eax
.text:0000000000005F1A                 mov     r8, rsp
.text:0000000000005F1D                 nop     dword ptr [rax]
.text:0000000000005F20
.text:0000000000005F20 loc_5F20:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000005F20                 mov     eax, [r10]
.text:0000000000005F23                 cmp     eax, 2Fh ; '/'
.text:0000000000005F26                 ja      short loc_5F6A
.text:0000000000005F28                 mov     r11d, eax
.text:0000000000005F2B                 add     r11, [r10+10h]
.text:0000000000005F2F                 add     eax, 8
.text:0000000000005F32                 mov     [r10], eax
.text:0000000000005F35
.text:0000000000005F35 loc_5F35:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000005F35                 mov     rax, [r11]
.text:0000000000005F38                 test    rax, rax
.text:0000000000005F3B                 mov     [r8+r9*8], rax
.text:0000000000005F3F                 jz      short loc_5F4B
.text:0000000000005F41                 add     r9, 1
.text:0000000000005F45                 cmp     r9, 0Ah
.text:0000000000005F49                 jnz     short loc_5F20
.text:0000000000005F4B
.text:0000000000005F4B loc_5F4B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000005F4B                 call    version_etc_arn
.text:0000000000005F50                 mov     rax, [rsp+68h+var_10]
.text:0000000000005F55                 xor     rax, fs:28h
.text:0000000000005F5E                 jnz     short loc_5F65
.text:0000000000005F60                 add     rsp, 68h
.text:0000000000005F64                 retn
.text:0000000000005F65 ; ---------------------------------------------------------------------------
.text:0000000000005F65
.text:0000000000005F65 loc_5F65:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000005F65                 call    ___stack_chk_fail
.text:0000000000005F6A ; ---------------------------------------------------------------------------
.text:0000000000005F6A
.text:0000000000005F6A loc_5F6A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000005F6A                 mov     r11, [r10+8]
.text:0000000000005F6E                 lea     rax, [r11+8]
.text:0000000000005F72                 mov     [r10+8], rax
.text:0000000000005F76                 jmp     short loc_5F35
.text:0000000000005F76 ; } // starts at 5F00
.text:0000000000005F76 version_etc_va  endp
.text:0000000000005F76
.text:0000000000005F76 ; ---------------------------------------------------------------------------
.text:0000000000005F78                 align 20h
.text:0000000000005F80
.text:0000000000005F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F80
.text:0000000000005F80 ; Attributes: info_from_lumina
.text:0000000000005F80
.text:0000000000005F80 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000005F80                 public version_etc
.text:0000000000005F80 version_etc     proc near               ; CODE XREF: main+163↑p
.text:0000000000005F80
.text:0000000000005F80 var_C0          = dword ptr -0C0h
.text:0000000000005F80 var_B8          = qword ptr -0B8h
.text:0000000000005F80 var_B0          = qword ptr -0B0h
.text:0000000000005F80 var_A8          = byte ptr -0A8h
.text:0000000000005F80 var_50          = qword ptr -50h
.text:0000000000005F80 var_48          = byte ptr -48h
.text:0000000000005F80 var_28          = qword ptr -28h
.text:0000000000005F80 var_20          = qword ptr -20h
.text:0000000000005F80 arg_0           = byte ptr  8
.text:0000000000005F80
.text:0000000000005F80 ; __unwind {
.text:0000000000005F80                 push    rbp
.text:0000000000005F81                 push    rbx
.text:0000000000005F82                 mov     r10d, 20h ; ' '
.text:0000000000005F88                 xor     r11d, r11d
.text:0000000000005F8B                 sub     rsp, 0B8h
.text:0000000000005F92                 mov     rax, fs:28h
.text:0000000000005F9B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005FA0                 xor     eax, eax
.text:0000000000005FA2                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000005FAA                 mov     [rsp+0C8h+var_28], r8
.text:0000000000005FB2                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000005FBA                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000005FBF                 mov     [rsp+0C8h+var_20], r9
.text:0000000000005FC7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000005FCF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000005FD4                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000005FDC                 xor     r9d, r9d
.text:0000000000005FDF                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000005FE4                 mov     rbp, rax
.text:0000000000005FE7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005FF0
.text:0000000000005FF0 loc_5FF0:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000005FF0                 cmp     r10d, 2Fh ; '/'
.text:0000000000005FF4                 ja      short loc_604C
.text:0000000000005FF6                 mov     eax, r10d
.text:0000000000005FF9                 mov     r11d, 1
.text:0000000000005FFF                 add     r10d, 8
.text:0000000000006003                 add     rax, rbp
.text:0000000000006006
.text:0000000000006006 loc_6006:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000006006                 mov     rax, [rax]
.text:0000000000006009                 test    rax, rax
.text:000000000000600C                 mov     [r8+r9*8], rax
.text:0000000000006010                 jz      short loc_601C
.text:0000000000006012                 add     r9, 1
.text:0000000000006016                 cmp     r9, 0Ah
.text:000000000000601A                 jnz     short loc_5FF0
.text:000000000000601C
.text:000000000000601C loc_601C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000601C                 test    r11b, r11b
.text:000000000000601F                 jnz     short loc_6045
.text:0000000000006021
.text:0000000000006021 loc_6021:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000006021                 call    version_etc_arn
.text:0000000000006026                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000602B                 xor     rax, fs:28h
.text:0000000000006034                 jnz     short loc_6040
.text:0000000000006036                 add     rsp, 0B8h
.text:000000000000603D                 pop     rbx
.text:000000000000603E                 pop     rbp
.text:000000000000603F                 retn
.text:0000000000006040 ; ---------------------------------------------------------------------------
.text:0000000000006040
.text:0000000000006040 loc_6040:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000006040                 call    ___stack_chk_fail
.text:0000000000006045 ; ---------------------------------------------------------------------------
.text:0000000000006045
.text:0000000000006045 loc_6045:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000006045                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000604A                 jmp     short loc_6021
.text:000000000000604C ; ---------------------------------------------------------------------------
.text:000000000000604C
.text:000000000000604C loc_604C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000604C                 mov     rax, rbx
.text:000000000000604F                 add     rbx, 8
.text:0000000000006053                 jmp     short loc_6006
.text:0000000000006053 ; } // starts at 5F80
.text:0000000000006053 version_etc     endp
.text:0000000000006053
.text:0000000000006053 ; ---------------------------------------------------------------------------
.text:0000000000006055                 align 20h
.text:0000000000006060
.text:0000000000006060 ; =============== S U B R O U T I N E =======================================
.text:0000000000006060
.text:0000000000006060 ; Attributes: info_from_lumina
.text:0000000000006060
.text:0000000000006060 ; void __cdecl emit_bug_reporting_address()
.text:0000000000006060                 public emit_bug_reporting_address
.text:0000000000006060 emit_bug_reporting_address proc near
.text:0000000000006060 ; __unwind {
.text:0000000000006060                 push    rbx
.text:0000000000006061                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000006068                 mov     edx, 5          ; category
.text:000000000000606D                 xor     edi, edi        ; domainname
.text:000000000000606F                 call    _dcgettext
.text:0000000000006074                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000607B                 mov     rsi, rax
.text:000000000000607E                 mov     edi, 1
.text:0000000000006083                 xor     eax, eax
.text:0000000000006085                 call    ___printf_chk
.text:000000000000608A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000006091                 mov     edx, 5          ; category
.text:0000000000006096                 xor     edi, edi        ; domainname
.text:0000000000006098                 call    _dcgettext
.text:000000000000609D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000060A4                 lea     rdx, unk_6963
.text:00000000000060AB                 mov     rsi, rax
.text:00000000000060AE                 mov     edi, 1
.text:00000000000060B3                 xor     eax, eax
.text:00000000000060B5                 call    ___printf_chk
.text:00000000000060BA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000060C1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000060C8                 xor     edi, edi        ; domainname
.text:00000000000060CA                 mov     edx, 5          ; category
.text:00000000000060CF                 call    _dcgettext
.text:00000000000060D4                 mov     rsi, rbx        ; stream
.text:00000000000060D7                 mov     rdi, rax        ; s
.text:00000000000060DA                 pop     rbx
.text:00000000000060DB                 jmp     _fputs_unlocked
.text:00000000000060DB ; } // starts at 6060
.text:00000000000060DB emit_bug_reporting_address endp
.text:00000000000060DB
.text:00000000000060E0
.text:00000000000060E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000060E0
.text:00000000000060E0
.text:00000000000060E0                 public xmalloc
.text:00000000000060E0 xmalloc         proc near               ; CODE XREF: canonicalize_filename_mode+525↑p
.text:00000000000060E0                                         ; canonicalize_filename_mode+57C↑p ...
.text:00000000000060E0 ; __unwind {
.text:00000000000060E0                 push    rbx
.text:00000000000060E1                 mov     rbx, rdi
.text:00000000000060E4                 call    _malloc
.text:00000000000060E9                 test    rax, rax
.text:00000000000060EC                 jnz     short loc_60F3
.text:00000000000060EE                 test    rbx, rbx
.text:00000000000060F1                 jnz     short loc_60F5
.text:00000000000060F3
.text:00000000000060F3 loc_60F3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000060F3                 pop     rbx
.text:00000000000060F4                 retn
.text:00000000000060F5 ; ---------------------------------------------------------------------------
.text:00000000000060F5
.text:00000000000060F5 loc_60F5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000060F5                 call    xalloc_die
.text:00000000000060F5 ; } // starts at 60E0
.text:00000000000060F5 xmalloc         endp
.text:00000000000060F5
.text:00000000000060F5 ; ---------------------------------------------------------------------------
.text:00000000000060FA                 align 20h
.text:0000000000006100
.text:0000000000006100 ; =============== S U B R O U T I N E =======================================
.text:0000000000006100
.text:0000000000006100 ; Attributes: info_from_lumina
.text:0000000000006100
.text:0000000000006100 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000006100                 public xnmalloc
.text:0000000000006100 xnmalloc        proc near
.text:0000000000006100 ; __unwind {
.text:0000000000006100                 mov     rax, rdi
.text:0000000000006103                 mul     rsi
.text:0000000000006106                 mov     rdi, rax
.text:0000000000006109                 seto    al
.text:000000000000610C                 test    rdi, rdi
.text:000000000000610F                 js      short loc_611B
.text:0000000000006111                 movzx   eax, al
.text:0000000000006114                 test    rax, rax
.text:0000000000006117                 jnz     short loc_611B
.text:0000000000006119                 jmp     short xmalloc
.text:000000000000611B ; ---------------------------------------------------------------------------
.text:000000000000611B
.text:000000000000611B loc_611B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000611B                                         ; xnmalloc+17↑j
.text:000000000000611B                 sub     rsp, 8
.text:000000000000611F                 call    xalloc_die
.text:000000000000611F ; } // starts at 6100
.text:000000000000611F xnmalloc        endp
.text:000000000000611F
.text:000000000000611F ; ---------------------------------------------------------------------------
.text:0000000000006124                 align 10h
.text:0000000000006130
.text:0000000000006130 ; =============== S U B R O U T I N E =======================================
.text:0000000000006130
.text:0000000000006130
.text:0000000000006130                 public xcharalloc
.text:0000000000006130 xcharalloc      proc near
.text:0000000000006130 ; __unwind {
.text:0000000000006130                 jmp     short xmalloc
.text:0000000000006130 ; } // starts at 6130
.text:0000000000006130 xcharalloc      endp
.text:0000000000006130
.text:0000000000006130 ; ---------------------------------------------------------------------------
.text:0000000000006132                 align 20h
.text:0000000000006140
.text:0000000000006140 ; =============== S U B R O U T I N E =======================================
.text:0000000000006140
.text:0000000000006140 ; Attributes: info_from_lumina
.text:0000000000006140
.text:0000000000006140 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000006140                 public xrealloc
.text:0000000000006140 xrealloc        proc near               ; CODE XREF: canonicalize_filename_mode+16C↑p
.text:0000000000006140                                         ; canonicalize_filename_mode+1FA↑p ...
.text:0000000000006140 ; __unwind {
.text:0000000000006140                 test    rsi, rsi
.text:0000000000006143                 push    rbx
.text:0000000000006144                 mov     rbx, rsi
.text:0000000000006147                 jnz     short loc_614E
.text:0000000000006149                 test    rdi, rdi
.text:000000000000614C                 jnz     short loc_6168
.text:000000000000614E
.text:000000000000614E loc_614E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000614E                 mov     rsi, rbx        ; size
.text:0000000000006151                 call    _realloc
.text:0000000000006156                 test    rax, rax
.text:0000000000006159                 jnz     short loc_6160
.text:000000000000615B                 test    rbx, rbx
.text:000000000000615E                 jnz     short loc_6171
.text:0000000000006160
.text:0000000000006160 loc_6160:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000006160                 pop     rbx
.text:0000000000006161                 retn
.text:0000000000006161 ; ---------------------------------------------------------------------------
.text:0000000000006162                 align 8
.text:0000000000006168
.text:0000000000006168 loc_6168:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000006168                 call    _free
.text:000000000000616D                 xor     eax, eax
.text:000000000000616F                 pop     rbx
.text:0000000000006170                 retn
.text:0000000000006171 ; ---------------------------------------------------------------------------
.text:0000000000006171
.text:0000000000006171 loc_6171:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000006171                 call    xalloc_die
.text:0000000000006171 ; } // starts at 6140
.text:0000000000006171 xrealloc        endp
.text:0000000000006171
.text:0000000000006171 ; ---------------------------------------------------------------------------
.text:0000000000006176                 align 20h
.text:0000000000006180
.text:0000000000006180 ; =============== S U B R O U T I N E =======================================
.text:0000000000006180
.text:0000000000006180 ; Attributes: info_from_lumina
.text:0000000000006180
.text:0000000000006180 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000006180                 public xnrealloc
.text:0000000000006180 xnrealloc       proc near
.text:0000000000006180 ; __unwind {
.text:0000000000006180                 mov     rax, rsi
.text:0000000000006183                 mul     rdx
.text:0000000000006186                 mov     rsi, rax
.text:0000000000006189                 seto    al
.text:000000000000618C                 test    rsi, rsi
.text:000000000000618F                 js      short loc_619B
.text:0000000000006191                 movzx   eax, al
.text:0000000000006194                 test    rax, rax
.text:0000000000006197                 jnz     short loc_619B
.text:0000000000006199                 jmp     short xrealloc
.text:000000000000619B ; ---------------------------------------------------------------------------
.text:000000000000619B
.text:000000000000619B loc_619B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000619B                                         ; xnrealloc+17↑j
.text:000000000000619B                 sub     rsp, 8
.text:000000000000619F                 call    xalloc_die
.text:000000000000619F ; } // starts at 6180
.text:000000000000619F xnrealloc       endp
.text:000000000000619F
.text:000000000000619F ; ---------------------------------------------------------------------------
.text:00000000000061A4                 align 10h
.text:00000000000061B0
.text:00000000000061B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061B0
.text:00000000000061B0 ; Attributes: info_from_lumina
.text:00000000000061B0
.text:00000000000061B0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000061B0                 public x2nrealloc
.text:00000000000061B0 x2nrealloc      proc near
.text:00000000000061B0 ; __unwind {
.text:00000000000061B0                 test    rdi, rdi
.text:00000000000061B3                 mov     r9, rdx
.text:00000000000061B6                 mov     rcx, [rsi]
.text:00000000000061B9                 jz      short loc_61F0
.text:00000000000061BB                 xor     edx, edx
.text:00000000000061BD                 mov     rax, 5555555555555554h
.text:00000000000061C7                 div     r9
.text:00000000000061CA                 cmp     rax, rcx
.text:00000000000061CD                 jbe     short loc_620B
.text:00000000000061CF                 mov     rax, rcx
.text:00000000000061D2                 shr     rax, 1
.text:00000000000061D5                 lea     rcx, [rax+rcx+1]
.text:00000000000061DA
.text:00000000000061DA loc_61DA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000061DA                 mov     [rsi], rcx
.text:00000000000061DD                 imul    rcx, r9
.text:00000000000061E1                 mov     rsi, rcx
.text:00000000000061E4                 jmp     xrealloc
.text:00000000000061E4 ; ---------------------------------------------------------------------------
.text:00000000000061E9                 align 10h
.text:00000000000061F0
.text:00000000000061F0 loc_61F0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000061F0                 test    rcx, rcx
.text:00000000000061F3                 jz      short loc_6218
.text:00000000000061F5
.text:00000000000061F5 loc_61F5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000061F5                 mov     rax, rcx
.text:00000000000061F8                 mul     r9
.text:00000000000061FB                 seto    dl
.text:00000000000061FE                 test    rax, rax
.text:0000000000006201                 movzx   edx, dl
.text:0000000000006204                 js      short loc_620B
.text:0000000000006206                 test    rdx, rdx
.text:0000000000006209                 jz      short loc_61DA
.text:000000000000620B
.text:000000000000620B loc_620B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000620B                                         ; x2nrealloc+54↑j
.text:000000000000620B                 sub     rsp, 8
.text:000000000000620F                 call    xalloc_die
.text:000000000000620F ; ---------------------------------------------------------------------------
.text:0000000000006214                 align 8
.text:0000000000006218
.text:0000000000006218 loc_6218:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000006218                 xor     edx, edx
.text:000000000000621A                 mov     eax, 80h
.text:000000000000621F                 xor     r8d, r8d
.text:0000000000006222                 div     r9
.text:0000000000006225                 test    rax, rax
.text:0000000000006228                 setz    r8b
.text:000000000000622C                 lea     rcx, [r8+rax]
.text:0000000000006230                 jmp     short loc_61F5
.text:0000000000006230 ; } // starts at 61B0
.text:0000000000006230 x2nrealloc      endp
.text:0000000000006230
.text:0000000000006230 ; ---------------------------------------------------------------------------
.text:0000000000006232                 align 20h
.text:0000000000006240
.text:0000000000006240 ; =============== S U B R O U T I N E =======================================
.text:0000000000006240
.text:0000000000006240 ; Attributes: info_from_lumina
.text:0000000000006240
.text:0000000000006240 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000006240                 public x2realloc
.text:0000000000006240 x2realloc       proc near
.text:0000000000006240 ; __unwind {
.text:0000000000006240                 test    rdi, rdi
.text:0000000000006243                 mov     rax, [rsi]
.text:0000000000006246                 jz      short loc_6270
.text:0000000000006248                 mov     rdx, 5555555555555553h
.text:0000000000006252                 cmp     rax, rdx
.text:0000000000006255                 ja      short loc_6281
.text:0000000000006257                 mov     rdx, rax
.text:000000000000625A                 shr     rdx, 1
.text:000000000000625D                 lea     rax, [rdx+rax+1]
.text:0000000000006262
.text:0000000000006262 loc_6262:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000006262                 mov     [rsi], rax
.text:0000000000006265                 mov     rsi, rax
.text:0000000000006268                 jmp     xrealloc
.text:0000000000006268 ; ---------------------------------------------------------------------------
.text:000000000000626D                 align 10h
.text:0000000000006270
.text:0000000000006270 loc_6270:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000006270                 test    rax, rax
.text:0000000000006273                 mov     edx, 80h
.text:0000000000006278                 cmovz   rax, rdx
.text:000000000000627C                 test    rax, rax
.text:000000000000627F                 jns     short loc_6262
.text:0000000000006281
.text:0000000000006281 loc_6281:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000006281                 sub     rsp, 8
.text:0000000000006285                 call    xalloc_die
.text:0000000000006285 ; } // starts at 6240
.text:0000000000006285 x2realloc       endp
.text:0000000000006285
.text:0000000000006285 ; ---------------------------------------------------------------------------
.text:000000000000628A                 align 10h
.text:0000000000006290
.text:0000000000006290 ; =============== S U B R O U T I N E =======================================
.text:0000000000006290
.text:0000000000006290
.text:0000000000006290 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000006290                 public xzalloc
.text:0000000000006290 xzalloc         proc near
.text:0000000000006290 ; __unwind {
.text:0000000000006290                 push    rbx
.text:0000000000006291                 mov     rbx, rdi
.text:0000000000006294                 call    xmalloc
.text:0000000000006299                 mov     rdx, rbx        ; n
.text:000000000000629C                 xor     esi, esi        ; c
.text:000000000000629E                 mov     rdi, rax        ; s
.text:00000000000062A1                 pop     rbx
.text:00000000000062A2                 jmp     _memset
.text:00000000000062A2 ; } // starts at 6290
.text:00000000000062A2 xzalloc         endp
.text:00000000000062A2
.text:00000000000062A2 ; ---------------------------------------------------------------------------
.text:00000000000062A7                 align 10h
.text:00000000000062B0
.text:00000000000062B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062B0
.text:00000000000062B0 ; Attributes: info_from_lumina
.text:00000000000062B0
.text:00000000000062B0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000062B0                 public xcalloc
.text:00000000000062B0 xcalloc         proc near
.text:00000000000062B0 ; __unwind {
.text:00000000000062B0                 mov     rax, rdi
.text:00000000000062B3                 sub     rsp, 8
.text:00000000000062B7                 mul     rsi
.text:00000000000062BA                 seto    dl
.text:00000000000062BD                 test    rax, rax
.text:00000000000062C0                 js      short loc_62D9
.text:00000000000062C2                 movzx   edx, dl
.text:00000000000062C5                 test    rdx, rdx
.text:00000000000062C8                 jnz     short loc_62D9
.text:00000000000062CA                 call    _calloc
.text:00000000000062CF                 test    rax, rax
.text:00000000000062D2                 jz      short loc_62D9
.text:00000000000062D4                 add     rsp, 8
.text:00000000000062D8                 retn
.text:00000000000062D9 ; ---------------------------------------------------------------------------
.text:00000000000062D9
.text:00000000000062D9 loc_62D9:                               ; CODE XREF: xcalloc+10↑j
.text:00000000000062D9                                         ; xcalloc+18↑j ...
.text:00000000000062D9                 call    xalloc_die
.text:00000000000062D9 ; } // starts at 62B0
.text:00000000000062D9 xcalloc         endp
.text:00000000000062D9
.text:00000000000062D9 ; ---------------------------------------------------------------------------
.text:00000000000062DE                 align 20h
.text:00000000000062E0
.text:00000000000062E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062E0
.text:00000000000062E0 ; Attributes: info_from_lumina
.text:00000000000062E0
.text:00000000000062E0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000062E0                 public xmemdup
.text:00000000000062E0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000062E0                                         ; xstrdup+11↓j
.text:00000000000062E0 ; __unwind {
.text:00000000000062E0                 push    rbp
.text:00000000000062E1                 push    rbx
.text:00000000000062E2                 mov     rbp, rdi
.text:00000000000062E5                 mov     rdi, rsi
.text:00000000000062E8                 mov     rbx, rsi
.text:00000000000062EB                 sub     rsp, 8
.text:00000000000062EF                 call    xmalloc
.text:00000000000062F4                 add     rsp, 8
.text:00000000000062F8                 mov     rdx, rbx        ; n
.text:00000000000062FB                 mov     rsi, rbp        ; src
.text:00000000000062FE                 pop     rbx
.text:00000000000062FF                 pop     rbp
.text:0000000000006300                 mov     rdi, rax        ; dest
.text:0000000000006303                 jmp     _memcpy
.text:0000000000006303 ; } // starts at 62E0
.text:0000000000006303 xmemdup         endp
.text:0000000000006303
.text:0000000000006303 ; ---------------------------------------------------------------------------
.text:0000000000006308                 align 10h
.text:0000000000006310
.text:0000000000006310 ; =============== S U B R O U T I N E =======================================
.text:0000000000006310
.text:0000000000006310
.text:0000000000006310 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000006310                 public xstrdup
.text:0000000000006310 xstrdup         proc near               ; CODE XREF: record_file+28↑p
.text:0000000000006310 ; __unwind {
.text:0000000000006310                 push    rbx
.text:0000000000006311                 mov     rbx, rdi
.text:0000000000006314                 call    _strlen
.text:0000000000006319                 mov     rdi, rbx        ; src
.text:000000000000631C                 lea     rsi, [rax+1]    ; n
.text:0000000000006320                 pop     rbx
.text:0000000000006321                 jmp     short xmemdup
.text:0000000000006321 ; } // starts at 6310
.text:0000000000006321 xstrdup         endp
.text:0000000000006321
.text:0000000000006321 ; ---------------------------------------------------------------------------
.text:0000000000006323                 align 10h
.text:0000000000006330
.text:0000000000006330 ; =============== S U B R O U T I N E =======================================
.text:0000000000006330
.text:0000000000006330 ; Attributes: noreturn info_from_lumina
.text:0000000000006330
.text:0000000000006330 ; void __cdecl xalloc_die()
.text:0000000000006330                 public xalloc_die
.text:0000000000006330 xalloc_die      proc near               ; CODE XREF: canonicalize_filename_mode+515↑p
.text:0000000000006330                                         ; record_file:loc_2782↑p ...
.text:0000000000006330 ; __unwind {
.text:0000000000006330                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000006337                 sub     rsp, 8
.text:000000000000633B                 mov     edx, 5          ; category
.text:0000000000006340                 xor     edi, edi        ; domainname
.text:0000000000006342                 call    _dcgettext
.text:0000000000006347                 mov     edi, cs:exit_failure ; status
.text:000000000000634D                 lea     rdx, format+4   ; format
.text:0000000000006354                 mov     rcx, rax
.text:0000000000006357                 xor     esi, esi        ; errnum
.text:0000000000006359                 xor     eax, eax
.text:000000000000635B                 call    _error
.text:0000000000006360                 call    _abort
.text:0000000000006360 ; } // starts at 6330
.text:0000000000006360 xalloc_die      endp
.text:0000000000006360
.text:0000000000006360 ; ---------------------------------------------------------------------------
.text:0000000000006365                 align 10h
.text:0000000000006370
.text:0000000000006370 ; =============== S U B R O U T I N E =======================================
.text:0000000000006370
.text:0000000000006370 ; Attributes: info_from_lumina
.text:0000000000006370
.text:0000000000006370 ; char *__cdecl xgetcwd()
.text:0000000000006370                 public xgetcwd
.text:0000000000006370 xgetcwd         proc near               ; CODE XREF: canonicalize_filename_mode+63↑p
.text:0000000000006370 ; __unwind {
.text:0000000000006370                 push    rbx
.text:0000000000006371                 xor     esi, esi        ; size
.text:0000000000006373                 xor     edi, edi        ; buf
.text:0000000000006375                 call    _getcwd
.text:000000000000637A                 test    rax, rax
.text:000000000000637D                 mov     rbx, rax
.text:0000000000006380                 jz      short loc_6390
.text:0000000000006382
.text:0000000000006382 loc_6382:                               ; CODE XREF: xgetcwd+28↓j
.text:0000000000006382                 mov     rax, rbx
.text:0000000000006385                 pop     rbx
.text:0000000000006386                 retn
.text:0000000000006386 ; ---------------------------------------------------------------------------
.text:0000000000006387                 align 10h
.text:0000000000006390
.text:0000000000006390 loc_6390:                               ; CODE XREF: xgetcwd+10↑j
.text:0000000000006390                 call    ___errno_location
.text:0000000000006395                 cmp     dword ptr [rax], 0Ch
.text:0000000000006398                 jnz     short loc_6382
.text:000000000000639A                 call    xalloc_die
.text:000000000000639A ; } // starts at 6370
.text:000000000000639A xgetcwd         endp
.text:000000000000639A
.text:000000000000639A ; ---------------------------------------------------------------------------
.text:000000000000639F                 align 20h
.text:00000000000063A0
.text:00000000000063A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000063A0
.text:00000000000063A0 ; Attributes: info_from_lumina
.text:00000000000063A0
.text:00000000000063A0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:00000000000063A0                 public rpl_mbrtowc
.text:00000000000063A0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:00000000000063A0
.text:00000000000063A0 pwc             = dword ptr -34h
.text:00000000000063A0 var_30          = qword ptr -30h
.text:00000000000063A0
.text:00000000000063A0 ; __unwind {
.text:00000000000063A0                 push    r13
.text:00000000000063A2                 push    r12
.text:00000000000063A4                 mov     r13, rsi
.text:00000000000063A7                 push    rbp
.text:00000000000063A8                 push    rbx
.text:00000000000063A9                 mov     rbx, rdi
.text:00000000000063AC                 mov     r12, rdx
.text:00000000000063AF                 sub     rsp, 18h
.text:00000000000063B3                 mov     rax, fs:28h
.text:00000000000063BC                 mov     [rsp+38h+var_30], rax
.text:00000000000063C1                 xor     eax, eax
.text:00000000000063C3                 lea     rax, [rsp+38h+pwc]
.text:00000000000063C8                 test    rdi, rdi
.text:00000000000063CB                 cmovz   rbx, rax
.text:00000000000063CF                 mov     rdi, rbx        ; pwc
.text:00000000000063D2                 call    _mbrtowc
.text:00000000000063D7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000063DB                 mov     rbp, rax
.text:00000000000063DE                 jbe     short loc_6400
.text:00000000000063E0                 test    r12, r12
.text:00000000000063E3                 jz      short loc_6400
.text:00000000000063E5                 xor     edi, edi
.text:00000000000063E7                 call    hard_locale
.text:00000000000063EC                 test    al, al
.text:00000000000063EE                 jnz     short loc_6400
.text:00000000000063F0                 movzx   eax, byte ptr [r13+0]
.text:00000000000063F5                 mov     ebp, 1
.text:00000000000063FA                 mov     [rbx], eax
.text:00000000000063FC                 nop     dword ptr [rax+00h]
.text:0000000000006400
.text:0000000000006400 loc_6400:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000006400                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000006400                 mov     rdx, [rsp+38h+var_30]
.text:0000000000006405                 xor     rdx, fs:28h
.text:000000000000640E                 mov     rax, rbp
.text:0000000000006411                 jnz     short loc_641E
.text:0000000000006413                 add     rsp, 18h
.text:0000000000006417                 pop     rbx
.text:0000000000006418                 pop     rbp
.text:0000000000006419                 pop     r12
.text:000000000000641B                 pop     r13
.text:000000000000641D                 retn
.text:000000000000641E ; ---------------------------------------------------------------------------
.text:000000000000641E
.text:000000000000641E loc_641E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000641E                 call    ___stack_chk_fail
.text:000000000000641E ; } // starts at 63A0
.text:000000000000641E rpl_mbrtowc     endp
.text:000000000000641E
.text:000000000000641E ; ---------------------------------------------------------------------------
.text:0000000000006423                 align 10h
.text:0000000000006430
.text:0000000000006430 ; =============== S U B R O U T I N E =======================================
.text:0000000000006430
.text:0000000000006430 ; Attributes: info_from_lumina
.text:0000000000006430
.text:0000000000006430 ; int __fastcall close_stream(FILE *stream)
.text:0000000000006430                 public close_stream
.text:0000000000006430 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000006430                                         ; close_stdout+33↑p
.text:0000000000006430 ; __unwind {
.text:0000000000006430                 push    r12
.text:0000000000006432                 push    rbp
.text:0000000000006433                 mov     rbp, rdi
.text:0000000000006436                 push    rbx
.text:0000000000006437                 call    ___fpending
.text:000000000000643C                 mov     ebx, [rbp+0]
.text:000000000000643F                 mov     rdi, rbp        ; stream
.text:0000000000006442                 mov     r12, rax
.text:0000000000006445                 call    rpl_fclose
.text:000000000000644A                 and     ebx, 20h
.text:000000000000644D                 test    ebx, ebx
.text:000000000000644F                 jnz     short loc_6468
.text:0000000000006451                 test    eax, eax
.text:0000000000006453                 jz      short loc_645F
.text:0000000000006455                 test    r12, r12
.text:0000000000006458                 mov     eax, 0FFFFFFFFh
.text:000000000000645D                 jz      short loc_6498
.text:000000000000645F
.text:000000000000645F loc_645F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000645F                 pop     rbx
.text:0000000000006460                 pop     rbp
.text:0000000000006461                 pop     r12
.text:0000000000006463                 retn
.text:0000000000006463 ; ---------------------------------------------------------------------------
.text:0000000000006464                 align 8
.text:0000000000006468
.text:0000000000006468 loc_6468:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000006468                 test    eax, eax
.text:000000000000646A                 jnz     short loc_6488
.text:000000000000646C                 call    ___errno_location
.text:0000000000006471                 mov     dword ptr [rax], 0
.text:0000000000006477                 mov     eax, 0FFFFFFFFh
.text:000000000000647C                 pop     rbx
.text:000000000000647D                 pop     rbp
.text:000000000000647E                 pop     r12
.text:0000000000006480                 retn
.text:0000000000006480 ; ---------------------------------------------------------------------------
.text:0000000000006481                 align 8
.text:0000000000006488
.text:0000000000006488 loc_6488:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000006488                 pop     rbx
.text:0000000000006489                 mov     eax, 0FFFFFFFFh
.text:000000000000648E                 pop     rbp
.text:000000000000648F                 pop     r12
.text:0000000000006491                 retn
.text:0000000000006491 ; ---------------------------------------------------------------------------
.text:0000000000006492                 align 8
.text:0000000000006498
.text:0000000000006498 loc_6498:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000006498                 call    ___errno_location
.text:000000000000649D                 cmp     dword ptr [rax], 9
.text:00000000000064A0                 pop     rbx
.text:00000000000064A1                 pop     rbp
.text:00000000000064A2                 pop     r12
.text:00000000000064A4                 setnz   al
.text:00000000000064A7                 movzx   eax, al
.text:00000000000064AA                 neg     eax
.text:00000000000064AC                 retn
.text:00000000000064AC ; } // starts at 6430
.text:00000000000064AC close_stream    endp
.text:00000000000064AC
.text:00000000000064AC ; ---------------------------------------------------------------------------
.text:00000000000064AD                 align 10h
.text:00000000000064B0
.text:00000000000064B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064B0
.text:00000000000064B0
.text:00000000000064B0                 public dir_name
.text:00000000000064B0 dir_name        proc near               ; CODE XREF: same_nameat_part_0+2B↑p
.text:00000000000064B0                                         ; same_nameat_part_0+5F↑p
.text:00000000000064B0 ; __unwind {
.text:00000000000064B0                 sub     rsp, 8
.text:00000000000064B4                 call    mdir_name
.text:00000000000064B9                 test    rax, rax
.text:00000000000064BC                 jz      short loc_64C3
.text:00000000000064BE                 add     rsp, 8
.text:00000000000064C2                 retn
.text:00000000000064C3 ; ---------------------------------------------------------------------------
.text:00000000000064C3
.text:00000000000064C3 loc_64C3:                               ; CODE XREF: dir_name+C↑j
.text:00000000000064C3                 call    xalloc_die
.text:00000000000064C3 ; } // starts at 64B0
.text:00000000000064C3 dir_name        endp
.text:00000000000064C3
.text:00000000000064C3 ; ---------------------------------------------------------------------------
.text:00000000000064C8                 align 10h
.text:00000000000064D0
.text:00000000000064D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064D0
.text:00000000000064D0 ; Attributes: info_from_lumina
.text:00000000000064D0
.text:00000000000064D0 ; size_t __fastcall dir_len(const char *file)
.text:00000000000064D0                 public dir_len
.text:00000000000064D0 dir_len         proc near               ; CODE XREF: mdir_name+9↓p
.text:00000000000064D0 ; __unwind {
.text:00000000000064D0                 push    rbp
.text:00000000000064D1                 push    rbx
.text:00000000000064D2                 xor     ebp, ebp
.text:00000000000064D4                 mov     rbx, rdi
.text:00000000000064D7                 sub     rsp, 8
.text:00000000000064DB                 cmp     byte ptr [rdi], 2Fh ; '/'
.text:00000000000064DE                 setz    bpl
.text:00000000000064E2                 call    last_component
.text:00000000000064E7                 mov     rcx, rax
.text:00000000000064EA                 sub     rcx, rbx
.text:00000000000064ED                 cmp     rcx, rbp
.text:00000000000064F0                 jbe     short loc_6520
.text:00000000000064F2                 cmp     byte ptr [rax-1], 2Fh ; '/'
.text:00000000000064F6                 lea     rdx, [rcx-1]
.text:00000000000064FA                 jz      short loc_650E
.text:00000000000064FC                 jmp     short loc_6520
.text:00000000000064FC ; ---------------------------------------------------------------------------
.text:00000000000064FE                 align 20h
.text:0000000000006500
.text:0000000000006500 loc_6500:                               ; CODE XREF: dir_len+41↓j
.text:0000000000006500                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000006505                 lea     rax, [rdx-1]
.text:0000000000006509                 jnz     short loc_6513
.text:000000000000650B                 mov     rdx, rax
.text:000000000000650E
.text:000000000000650E loc_650E:                               ; CODE XREF: dir_len+2A↑j
.text:000000000000650E                 cmp     rbp, rdx
.text:0000000000006511                 jnz     short loc_6500
.text:0000000000006513
.text:0000000000006513 loc_6513:                               ; CODE XREF: dir_len+39↑j
.text:0000000000006513                 add     rsp, 8
.text:0000000000006517                 mov     rax, rdx
.text:000000000000651A                 pop     rbx
.text:000000000000651B                 pop     rbp
.text:000000000000651C                 retn
.text:000000000000651C ; ---------------------------------------------------------------------------
.text:000000000000651D                 align 20h
.text:0000000000006520
.text:0000000000006520 loc_6520:                               ; CODE XREF: dir_len+20↑j
.text:0000000000006520                                         ; dir_len+2C↑j
.text:0000000000006520                 add     rsp, 8
.text:0000000000006524                 mov     rdx, rcx
.text:0000000000006527                 mov     rax, rdx
.text:000000000000652A                 pop     rbx
.text:000000000000652B                 pop     rbp
.text:000000000000652C                 retn
.text:000000000000652C ; } // starts at 64D0
.text:000000000000652C dir_len         endp
.text:000000000000652C
.text:000000000000652C ; ---------------------------------------------------------------------------
.text:000000000000652D                 align 10h
.text:0000000000006530
.text:0000000000006530 ; =============== S U B R O U T I N E =======================================
.text:0000000000006530
.text:0000000000006530 ; Attributes: info_from_lumina
.text:0000000000006530
.text:0000000000006530 ; char *__fastcall mdir_name(const char *file)
.text:0000000000006530                 public mdir_name
.text:0000000000006530 mdir_name       proc near               ; CODE XREF: dir_name+4↑p
.text:0000000000006530 ; __unwind {
.text:0000000000006530                 push    rbp
.text:0000000000006531                 push    rbx
.text:0000000000006532                 mov     rbp, rdi
.text:0000000000006535                 sub     rsp, 8
.text:0000000000006539                 call    dir_len
.text:000000000000653E                 test    rax, rax
.text:0000000000006541                 mov     rbx, rax
.text:0000000000006544                 setz    al
.text:0000000000006547                 movzx   eax, al
.text:000000000000654A                 lea     rdi, [rbx+rax+1] ; size
.text:000000000000654F                 call    _malloc
.text:0000000000006554                 test    rax, rax
.text:0000000000006557                 mov     rcx, rax
.text:000000000000655A                 jz      short loc_6576
.text:000000000000655C                 mov     rdx, rbx        ; n
.text:000000000000655F                 mov     rsi, rbp        ; src
.text:0000000000006562                 mov     rdi, rax        ; dest
.text:0000000000006565                 call    _memcpy
.text:000000000000656A                 test    rbx, rbx
.text:000000000000656D                 mov     rcx, rax
.text:0000000000006570                 jz      short loc_6580
.text:0000000000006572
.text:0000000000006572 loc_6572:                               ; CODE XREF: mdir_name+58↓j
.text:0000000000006572                 mov     byte ptr [rcx+rbx], 0
.text:0000000000006576
.text:0000000000006576 loc_6576:                               ; CODE XREF: mdir_name+2A↑j
.text:0000000000006576                 add     rsp, 8
.text:000000000000657A                 mov     rax, rcx
.text:000000000000657D                 pop     rbx
.text:000000000000657E                 pop     rbp
.text:000000000000657F                 retn
.text:0000000000006580 ; ---------------------------------------------------------------------------
.text:0000000000006580
.text:0000000000006580 loc_6580:                               ; CODE XREF: mdir_name+40↑j
.text:0000000000006580                 mov     byte ptr [rax], 2Eh ; '.'
.text:0000000000006583                 mov     ebx, 1
.text:0000000000006588                 jmp     short loc_6572
.text:0000000000006588 ; } // starts at 6530
.text:0000000000006588 mdir_name       endp
.text:0000000000006588
.text:0000000000006588 ; ---------------------------------------------------------------------------
.text:000000000000658A                 align 10h
.text:0000000000006590
.text:0000000000006590 ; =============== S U B R O U T I N E =======================================
.text:0000000000006590
.text:0000000000006590 ; Attributes: info_from_lumina
.text:0000000000006590
.text:0000000000006590 ; char *__fastcall last_component(const char *name)
.text:0000000000006590                 public last_component
.text:0000000000006590 last_component  proc near               ; CODE XREF: same_nameat+1E↑p
.text:0000000000006590                                         ; same_nameat+29↑p ...
.text:0000000000006590 ; __unwind {
.text:0000000000006590                 movzx   edx, byte ptr [rdi]
.text:0000000000006593                 mov     rax, rdi
.text:0000000000006596                 cmp     dl, 2Fh ; '/'
.text:0000000000006599                 jnz     short loc_65AC
.text:000000000000659B                 nop     dword ptr [rax+rax+00h]
.text:00000000000065A0
.text:00000000000065A0 loc_65A0:                               ; CODE XREF: last_component+1A↓j
.text:00000000000065A0                 add     rax, 1
.text:00000000000065A4                 movzx   edx, byte ptr [rax]
.text:00000000000065A7                 cmp     dl, 2Fh ; '/'
.text:00000000000065AA                 jz      short loc_65A0
.text:00000000000065AC
.text:00000000000065AC loc_65AC:                               ; CODE XREF: last_component+9↑j
.text:00000000000065AC                 test    dl, dl
.text:00000000000065AE                 jz      short locret_65EA
.text:00000000000065B0                 mov     rcx, rax
.text:00000000000065B3                 xor     esi, esi
.text:00000000000065B5                 jmp     short loc_65D5
.text:00000000000065B5 ; ---------------------------------------------------------------------------
.text:00000000000065B7                 align 20h
.text:00000000000065C0
.text:00000000000065C0 loc_65C0:                               ; CODE XREF: last_component+48↓j
.text:00000000000065C0                 test    sil, sil
.text:00000000000065C3                 jz      short loc_65CA
.text:00000000000065C5                 mov     rax, rcx
.text:00000000000065C8                 xor     esi, esi
.text:00000000000065CA
.text:00000000000065CA loc_65CA:                               ; CODE XREF: last_component+33↑j
.text:00000000000065CA                 add     rcx, 1
.text:00000000000065CE                 movzx   edx, byte ptr [rcx]
.text:00000000000065D1                 test    dl, dl
.text:00000000000065D3                 jz      short locret_65EA
.text:00000000000065D5
.text:00000000000065D5 loc_65D5:                               ; CODE XREF: last_component+25↑j
.text:00000000000065D5                                         ; last_component+58↓j
.text:00000000000065D5                 cmp     dl, 2Fh ; '/'
.text:00000000000065D8                 jnz     short loc_65C0
.text:00000000000065DA                 add     rcx, 1
.text:00000000000065DE                 movzx   edx, byte ptr [rcx]
.text:00000000000065E1                 mov     esi, 1
.text:00000000000065E6                 test    dl, dl
.text:00000000000065E8                 jnz     short loc_65D5
.text:00000000000065EA
.text:00000000000065EA locret_65EA:                            ; CODE XREF: last_component+1E↑j
.text:00000000000065EA                                         ; last_component+43↑j
.text:00000000000065EA                 rep retn
.text:00000000000065EA ; } // starts at 6590
.text:00000000000065EA last_component  endp
.text:00000000000065EA
.text:00000000000065EA ; ---------------------------------------------------------------------------
.text:00000000000065EC                 align 10h
.text:00000000000065F0
.text:00000000000065F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000065F0
.text:00000000000065F0 ; Attributes: info_from_lumina
.text:00000000000065F0
.text:00000000000065F0 ; size_t __fastcall base_len(const char *name)
.text:00000000000065F0                 public base_len
.text:00000000000065F0 base_len        proc near               ; CODE XREF: same_nameat+34↑p
.text:00000000000065F0                                         ; same_nameat+3F↑p
.text:00000000000065F0 ; __unwind {
.text:00000000000065F0                 push    rbx
.text:00000000000065F1                 mov     rbx, rdi
.text:00000000000065F4                 call    _strlen
.text:00000000000065F9                 cmp     rax, 1
.text:00000000000065FD                 jbe     short loc_660A
.text:00000000000065FF                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:0000000000006604                 lea     rdx, [rax-1]
.text:0000000000006608                 jz      short loc_6618
.text:000000000000660A
.text:000000000000660A loc_660A:                               ; CODE XREF: base_len+D↑j
.text:000000000000660A                 pop     rbx
.text:000000000000660B                 retn
.text:000000000000660B ; ---------------------------------------------------------------------------
.text:000000000000660C                 align 10h
.text:0000000000006610
.text:0000000000006610 loc_6610:                               ; CODE XREF: base_len+37↓j
.text:0000000000006610                 mov     rdx, rax
.text:0000000000006613                 nop     dword ptr [rax+rax+00h]
.text:0000000000006618
.text:0000000000006618 loc_6618:                               ; CODE XREF: base_len+18↑j
.text:0000000000006618                 cmp     rdx, 1
.text:000000000000661C                 jz      short loc_6630
.text:000000000000661E                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000006623                 lea     rax, [rdx-1]
.text:0000000000006627                 jz      short loc_6610
.text:0000000000006629                 mov     rax, rdx
.text:000000000000662C                 pop     rbx
.text:000000000000662D                 retn
.text:000000000000662D ; ---------------------------------------------------------------------------
.text:000000000000662E                 align 10h
.text:0000000000006630
.text:0000000000006630 loc_6630:                               ; CODE XREF: base_len+2C↑j
.text:0000000000006630                 mov     eax, 1
.text:0000000000006635                 pop     rbx
.text:0000000000006636                 retn
.text:0000000000006636 ; } // starts at 65F0
.text:0000000000006636 base_len        endp
.text:0000000000006636
.text:0000000000006636 ; ---------------------------------------------------------------------------
.text:0000000000006637                 align 20h
.text:0000000000006640
.text:0000000000006640 ; =============== S U B R O U T I N E =======================================
.text:0000000000006640
.text:0000000000006640
.text:0000000000006640                 public hard_locale
.text:0000000000006640 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000006640 ; __unwind {
.text:0000000000006640                 sub     rsp, 8
.text:0000000000006644                 xor     esi, esi        ; locale
.text:0000000000006646                 call    _setlocale
.text:000000000000664B                 mov     rdx, rax
.text:000000000000664E                 mov     eax, 1
.text:0000000000006653                 test    rdx, rdx
.text:0000000000006656                 jz      short loc_6675
.text:0000000000006658                 lea     rdi, aC         ; "C"
.text:000000000000665F                 mov     ecx, 2
.text:0000000000006664                 mov     rsi, rdx
.text:0000000000006667                 repe cmpsb
.text:0000000000006669                 setnbe  cl
.text:000000000000666C                 sbb     cl, 0
.text:000000000000666F                 xor     eax, eax
.text:0000000000006671                 test    cl, cl
.text:0000000000006673                 jnz     short loc_6680
.text:0000000000006675
.text:0000000000006675 loc_6675:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000006675                 add     rsp, 8
.text:0000000000006679                 retn
.text:0000000000006679 ; ---------------------------------------------------------------------------
.text:000000000000667A                 align 20h
.text:0000000000006680
.text:0000000000006680 loc_6680:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000006680                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000006687                 mov     ecx, 6
.text:000000000000668C                 mov     rsi, rdx
.text:000000000000668F                 repe cmpsb
.text:0000000000006691                 setnbe  al
.text:0000000000006694                 sbb     al, 0
.text:0000000000006696                 test    al, al
.text:0000000000006698                 setnz   al
.text:000000000000669B                 add     rsp, 8
.text:000000000000669F                 retn
.text:000000000000669F ; } // starts at 6640
.text:000000000000669F hard_locale     endp
.text:000000000000669F
.text:00000000000066A0
.text:00000000000066A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000066A0
.text:00000000000066A0 ; Attributes: info_from_lumina
.text:00000000000066A0
.text:00000000000066A0 ; size_t __fastcall hash_pjw(const void *x, size_t tablesize)
.text:00000000000066A0                 public hash_pjw
.text:00000000000066A0 hash_pjw        proc near               ; CODE XREF: triple_hash+F↑p
.text:00000000000066A0 ; __unwind {
.text:00000000000066A0                 movsx   rcx, byte ptr [rdi]
.text:00000000000066A4                 test    cl, cl
.text:00000000000066A6                 jz      short loc_66D0
.text:00000000000066A8                 xor     eax, eax
.text:00000000000066AA                 nop     word ptr [rax+rax+00h]
.text:00000000000066B0
.text:00000000000066B0 loc_66B0:                               ; CODE XREF: hash_pjw+21↓j
.text:00000000000066B0                 rol     rax, 9
.text:00000000000066B4                 add     rdi, 1
.text:00000000000066B8                 add     rax, rcx
.text:00000000000066BB                 movsx   rcx, byte ptr [rdi]
.text:00000000000066BF                 test    cl, cl
.text:00000000000066C1                 jnz     short loc_66B0
.text:00000000000066C3                 xor     edx, edx
.text:00000000000066C5                 div     rsi
.text:00000000000066C8                 mov     rax, rdx
.text:00000000000066CB                 retn
.text:00000000000066CB ; ---------------------------------------------------------------------------
.text:00000000000066CC                 align 10h
.text:00000000000066D0
.text:00000000000066D0 loc_66D0:                               ; CODE XREF: hash_pjw+6↑j
.text:00000000000066D0                 xor     edx, edx
.text:00000000000066D2                 mov     rax, rdx
.text:00000000000066D5                 retn
.text:00000000000066D5 ; } // starts at 66A0
.text:00000000000066D5 hash_pjw        endp
.text:00000000000066D5
.text:00000000000066D5 ; ---------------------------------------------------------------------------
.text:00000000000066D6                 align 20h
.text:00000000000066E0
.text:00000000000066E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000066E0
.text:00000000000066E0
.text:00000000000066E0                 public locale_charset
.text:00000000000066E0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:00000000000066E0 ; __unwind {
.text:00000000000066E0                 sub     rsp, 8
.text:00000000000066E4                 mov     edi, 0Eh        ; item
.text:00000000000066E9                 call    _nl_langinfo
.text:00000000000066EE                 test    rax, rax
.text:00000000000066F1                 jz      short loc_6710
.text:00000000000066F3                 cmp     byte ptr [rax], 0
.text:00000000000066F6                 lea     rdx, aAscii     ; "ASCII"
.text:00000000000066FD                 cmovz   rax, rdx
.text:0000000000006701                 add     rsp, 8
.text:0000000000006705                 retn
.text:0000000000006705 ; ---------------------------------------------------------------------------
.text:0000000000006706                 align 10h
.text:0000000000006710
.text:0000000000006710 loc_6710:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000006710                 lea     rax, aAscii     ; "ASCII"
.text:0000000000006717                 add     rsp, 8
.text:000000000000671B                 retn
.text:000000000000671B ; } // starts at 66E0
.text:000000000000671B locale_charset  endp
.text:000000000000671B
.text:000000000000671B ; ---------------------------------------------------------------------------
.text:000000000000671C                 align 20h
.text:0000000000006720
.text:0000000000006720 ; =============== S U B R O U T I N E =======================================
.text:0000000000006720
.text:0000000000006720 ; Attributes: info_from_lumina
.text:0000000000006720
.text:0000000000006720 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000006720                 public rpl_fclose
.text:0000000000006720 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000006720 ; __unwind {
.text:0000000000006720                 push    r12
.text:0000000000006722                 push    rbp
.text:0000000000006723                 push    rbx
.text:0000000000006724                 mov     rbx, rdi
.text:0000000000006727                 call    _fileno
.text:000000000000672C                 test    eax, eax
.text:000000000000672E                 mov     rdi, rbx        ; fp
.text:0000000000006731                 js      short loc_6787
.text:0000000000006733                 call    ___freading
.text:0000000000006738                 test    eax, eax
.text:000000000000673A                 jnz     short loc_6768
.text:000000000000673C
.text:000000000000673C loc_673C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000673C                 mov     rdi, rbx        ; stream
.text:000000000000673F                 call    rpl_fflush
.text:0000000000006744                 test    eax, eax
.text:0000000000006746                 jz      short loc_6784
.text:0000000000006748                 call    ___errno_location
.text:000000000000674D                 mov     r12d, [rax]
.text:0000000000006750                 mov     rdi, rbx        ; stream
.text:0000000000006753                 mov     rbp, rax
.text:0000000000006756                 call    _fclose
.text:000000000000675B                 test    r12d, r12d
.text:000000000000675E                 jnz     short loc_6790
.text:0000000000006760
.text:0000000000006760 loc_6760:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000006760                 pop     rbx
.text:0000000000006761                 pop     rbp
.text:0000000000006762                 pop     r12
.text:0000000000006764                 retn
.text:0000000000006764 ; ---------------------------------------------------------------------------
.text:0000000000006765                 align 8
.text:0000000000006768
.text:0000000000006768 loc_6768:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000006768                 mov     rdi, rbx        ; stream
.text:000000000000676B                 call    _fileno
.text:0000000000006770                 xor     esi, esi        ; offset
.text:0000000000006772                 mov     edx, 1          ; whence
.text:0000000000006777                 mov     edi, eax        ; fd
.text:0000000000006779                 call    _lseek
.text:000000000000677E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006782                 jnz     short loc_673C
.text:0000000000006784
.text:0000000000006784 loc_6784:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000006784                 mov     rdi, rbx        ; stream
.text:0000000000006787
.text:0000000000006787 loc_6787:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000006787                 pop     rbx
.text:0000000000006788                 pop     rbp
.text:0000000000006789                 pop     r12
.text:000000000000678B                 jmp     _fclose
.text:0000000000006790 ; ---------------------------------------------------------------------------
.text:0000000000006790
.text:0000000000006790 loc_6790:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000006790                 mov     [rbp+0], r12d
.text:0000000000006794                 mov     eax, 0FFFFFFFFh
.text:0000000000006799                 jmp     short loc_6760
.text:0000000000006799 ; } // starts at 6720
.text:0000000000006799 rpl_fclose      endp
.text:0000000000006799
.text:0000000000006799 ; ---------------------------------------------------------------------------
.text:000000000000679B                 align 20h
.text:00000000000067A0
.text:00000000000067A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000067A0
.text:00000000000067A0 ; Attributes: info_from_lumina
.text:00000000000067A0
.text:00000000000067A0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000067A0                 public rpl_fflush
.text:00000000000067A0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000067A0 ; __unwind {
.text:00000000000067A0                 test    rdi, rdi
.text:00000000000067A3                 push    rbx
.text:00000000000067A4                 mov     rbx, rdi
.text:00000000000067A7                 jz      short loc_67BA
.text:00000000000067A9                 call    ___freading
.text:00000000000067AE                 test    eax, eax
.text:00000000000067B0                 jz      short loc_67BA
.text:00000000000067B2                 test    dword ptr [rbx], 100h
.text:00000000000067B8                 jnz     short loc_67C8
.text:00000000000067BA
.text:00000000000067BA loc_67BA:                               ; CODE XREF: rpl_fflush+7↑j
.text:00000000000067BA                                         ; rpl_fflush+10↑j
.text:00000000000067BA                 mov     rdi, rbx        ; stream
.text:00000000000067BD                 pop     rbx
.text:00000000000067BE                 jmp     _fflush
.text:00000000000067BE ; ---------------------------------------------------------------------------
.text:00000000000067C3                 align 8
.text:00000000000067C8
.text:00000000000067C8 loc_67C8:                               ; CODE XREF: rpl_fflush+18↑j
.text:00000000000067C8                 mov     rdi, rbx
.text:00000000000067CB                 mov     edx, 1
.text:00000000000067D0                 xor     esi, esi
.text:00000000000067D2                 call    rpl_fseeko
.text:00000000000067D7                 mov     rdi, rbx        ; stream
.text:00000000000067DA                 pop     rbx
.text:00000000000067DB                 jmp     _fflush
.text:00000000000067DB ; } // starts at 67A0
.text:00000000000067DB rpl_fflush      endp
.text:00000000000067DB
.text:00000000000067E0
.text:00000000000067E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000067E0
.text:00000000000067E0 ; Attributes: info_from_lumina
.text:00000000000067E0
.text:00000000000067E0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:00000000000067E0                 public rpl_fseeko
.text:00000000000067E0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:00000000000067E0 ; __unwind {
.text:00000000000067E0                 mov     rax, [rdi+8]
.text:00000000000067E4                 cmp     [rdi+10h], rax
.text:00000000000067E8                 jz      short loc_67F0
.text:00000000000067EA
.text:00000000000067EA loc_67EA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:00000000000067EA                                         ; rpl_fseeko+1F↓j
.text:00000000000067EA                 jmp     _fseeko
.text:00000000000067EA ; ---------------------------------------------------------------------------
.text:00000000000067EF                 align 10h
.text:00000000000067F0
.text:00000000000067F0 loc_67F0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:00000000000067F0                 mov     rax, [rdi+20h]
.text:00000000000067F4                 cmp     [rdi+28h], rax
.text:00000000000067F8                 jnz     short loc_67EA
.text:00000000000067FA                 cmp     qword ptr [rdi+48h], 0
.text:00000000000067FF                 jnz     short loc_67EA
.text:0000000000006801                 push    r12
.text:0000000000006803                 push    rbp
.text:0000000000006804                 mov     r12d, edx
.text:0000000000006807                 push    rbx
.text:0000000000006808                 mov     rbp, rsi
.text:000000000000680B                 mov     rbx, rdi
.text:000000000000680E                 call    _fileno
.text:0000000000006813                 mov     edx, r12d       ; whence
.text:0000000000006816                 mov     rsi, rbp        ; offset
.text:0000000000006819                 mov     edi, eax        ; fd
.text:000000000000681B                 call    _lseek
.text:0000000000006820                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006824                 jz      short loc_6832
.text:0000000000006826                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000006829                 mov     [rbx+90h], rax
.text:0000000000006830                 xor     eax, eax
.text:0000000000006832
.text:0000000000006832 loc_6832:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000006832                 pop     rbx
.text:0000000000006833                 pop     rbp
.text:0000000000006834                 pop     r12
.text:0000000000006836                 retn
.text:0000000000006836 ; } // starts at 67E0
.text:0000000000006836 rpl_fseeko      endp
.text:0000000000006836
.text:0000000000006836 ; ---------------------------------------------------------------------------
.text:0000000000006837                 align 20h
.text:0000000000006840
.text:0000000000006840 ; =============== S U B R O U T I N E =======================================
.text:0000000000006840
.text:0000000000006840 ; Attributes: info_from_lumina
.text:0000000000006840
.text:0000000000006840 ; void _libc_csu_init(void)
.text:0000000000006840                 public __libc_csu_init
.text:0000000000006840 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000006840 ; __unwind {
.text:0000000000006840                 push    r15
.text:0000000000006842                 push    r14
.text:0000000000006844                 mov     r15, rdx
.text:0000000000006847                 push    r13
.text:0000000000006849                 push    r12
.text:000000000000684B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000006852                 push    rbp
.text:0000000000006853                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000685A                 push    rbx
.text:000000000000685B                 mov     r13d, edi
.text:000000000000685E                 mov     r14, rsi
.text:0000000000006861                 sub     rbp, r12
.text:0000000000006864                 sub     rsp, 8
.text:0000000000006868                 sar     rbp, 3
.text:000000000000686C                 call    _init_proc
.text:0000000000006871                 test    rbp, rbp
.text:0000000000006874                 jz      short loc_6896
.text:0000000000006876                 xor     ebx, ebx
.text:0000000000006878                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006880
.text:0000000000006880 loc_6880:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000006880                 mov     rdx, r15
.text:0000000000006883                 mov     rsi, r14
.text:0000000000006886                 mov     edi, r13d
.text:0000000000006889                 call    ds:(__frame_dummy_init_array_entry - 209A70h)[r12+rbx*8]
.text:000000000000688D                 add     rbx, 1
.text:0000000000006891                 cmp     rbp, rbx
.text:0000000000006894                 jnz     short loc_6880
.text:0000000000006896
.text:0000000000006896 loc_6896:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000006896                 add     rsp, 8
.text:000000000000689A                 pop     rbx
.text:000000000000689B                 pop     rbp
.text:000000000000689C                 pop     r12
.text:000000000000689E                 pop     r13
.text:00000000000068A0                 pop     r14
.text:00000000000068A2                 pop     r15
.text:00000000000068A4                 retn
.text:00000000000068A4 ; } // starts at 6840
.text:00000000000068A4 __libc_csu_init endp
.text:00000000000068A4
.text:00000000000068A4 ; ---------------------------------------------------------------------------
.text:00000000000068A5                 align 10h
.text:00000000000068B0
.text:00000000000068B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000068B0
.text:00000000000068B0
.text:00000000000068B0 ; void _libc_csu_fini(void)
.text:00000000000068B0                 public __libc_csu_fini
.text:00000000000068B0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000068B0 ; __unwind {
.text:00000000000068B0                 rep retn
.text:00000000000068B0 ; } // starts at 68B0
.text:00000000000068B0 __libc_csu_fini endp
.text:00000000000068B0
.text:00000000000068B0 ; ---------------------------------------------------------------------------
.text:00000000000068B2                 align 20h
.text:00000000000068C0
.text:00000000000068C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000068C0
.text:00000000000068C0
.text:00000000000068C0 atexit          proc near               ; CODE XREF: main+5B↑p
.text:00000000000068C0 ; __unwind {
.text:00000000000068C0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:00000000000068C7                 xor     esi, esi        ; obj
.text:00000000000068C9                 jmp     ___cxa_atexit
.text:00000000000068C9 ; } // starts at 68C0
.text:00000000000068C9 atexit          endp
.text:00000000000068C9
.text:00000000000068C9 _text           ends
.text:00000000000068C9
LOAD:00000000000068CE ; ===========================================================================
LOAD:00000000000068CE
LOAD:00000000000068CE ; Segment type: Pure code
LOAD:00000000000068CE ; Segment permissions: Read/Execute
LOAD:00000000000068CE LOAD            segment byte public 'CODE' use64
LOAD:00000000000068CE                 assume cs:LOAD
LOAD:00000000000068CE                 ;org 68CEh
LOAD:00000000000068CE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000068CE                 align 10h
LOAD:00000000000068CE LOAD            ends
LOAD:00000000000068CE
.fini:00000000000068D0 ; ===========================================================================
.fini:00000000000068D0
.fini:00000000000068D0 ; Segment type: Pure code
.fini:00000000000068D0 ; Segment permissions: Read/Execute
.fini:00000000000068D0 _fini           segment dword public 'CODE' use64
.fini:00000000000068D0                 assume cs:_fini
.fini:00000000000068D0                 ;org 68D0h
.fini:00000000000068D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00000000000068D0
.fini:00000000000068D0 ; =============== S U B R O U T I N E =======================================
.fini:00000000000068D0
.fini:00000000000068D0
.fini:00000000000068D0                 public _term_proc
.fini:00000000000068D0 _term_proc      proc near
.fini:00000000000068D0                 sub     rsp, 8          ; _fini
.fini:00000000000068D4                 add     rsp, 8
.fini:00000000000068D8                 retn
.fini:00000000000068D8 _term_proc      endp
.fini:00000000000068D8
.fini:00000000000068D8 _fini           ends
.fini:00000000000068D8
LOAD:00000000000068D9 ; ===========================================================================
LOAD:00000000000068D9
LOAD:00000000000068D9 ; Segment type: Pure code
LOAD:00000000000068D9 ; Segment permissions: Read/Execute
LOAD:00000000000068D9 LOAD            segment byte public 'CODE' use64
LOAD:00000000000068D9                 assume cs:LOAD
LOAD:00000000000068D9                 ;org 68D9h
LOAD:00000000000068D9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000068D9                 align 20h
LOAD:00000000000068D9 LOAD            ends
LOAD:00000000000068D9
.rodata:00000000000068E0 ; ===========================================================================
.rodata:00000000000068E0
.rodata:00000000000068E0 ; Segment type: Pure data
.rodata:00000000000068E0 ; Segment permissions: Read
.rodata:00000000000068E0 _rodata         segment align_32 public 'CONST' use64
.rodata:00000000000068E0                 assume cs:_rodata
.rodata:00000000000068E0                 ;org 68E0h
.rodata:00000000000068E0                 public _IO_stdin_used
.rodata:00000000000068E0 _IO_stdin_used  db    1
.rodata:00000000000068E1                 db    0
.rodata:00000000000068E2                 db    2
.rodata:00000000000068E3                 db    0
.rodata:00000000000068E4 aReadlink_0     db 'readlink',0         ; DATA XREF: main+157↑o
.rodata:00000000000068E4                                         ; usage+131↑o ...
.rodata:00000000000068ED asc_68ED        db '[',0                ; DATA XREF: usage+13D↑o
.rodata:00000000000068EF aTestInvocation db 'test invocation',0  ; DATA XREF: usage+164↑o
.rodata:00000000000068FF aMultiCallInvoc db 'Multi-call invocation',0
.rodata:00000000000068FF                                         ; DATA XREF: usage+194↑o
.rodata:00000000000068FF                                         ; usage+28C↑o ...
.rodata:0000000000006915 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1A5↑o
.rodata:000000000000691F aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1B1↑o
.rodata:000000000000692E aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+144↑o
.rodata:0000000000006938 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+170↑o
.rodata:0000000000006942 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+188↑o
.rodata:000000000000694C ; const char aSOnlineHelpS[]
.rodata:000000000000694C aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1FA↑o
.rodata:000000000000694C                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000006963 unk_6963        db  47h ; G             ; DATA XREF: main+150↑o
.rodata:0000000000006963                                         ; usage+216↑o ...
.rodata:0000000000006964                 db  4Eh ; N
.rodata:0000000000006965                 db  55h ; U
.rodata:0000000000006966                 db  20h
.rodata:0000000000006967 ; const char domainname[]
.rodata:0000000000006967 domainname      db 'coreutils',0        ; DATA XREF: main+3C↑o
.rodata:0000000000006967                                         ; main+48↑o ...
.rodata:0000000000006971 ; const char s2[]
.rodata:0000000000006971 s2              db 'en_',0              ; DATA XREF: usage+23D↑o
.rodata:0000000000006971                                         ; usage+2FE↑o
.rodata:0000000000006975 ; const char aFullDocumentat[]
.rodata:0000000000006975 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000006975                                         ; DATA XREF: usage:loc_1DC9↑o
.rodata:0000000000006975                                         ; usage:loc_1E86↑o
.rodata:0000000000006990 ; const char dirname[]
.rodata:0000000000006990 dirname         db '/usr/local/share/locale',0
.rodata:0000000000006990                                         ; DATA XREF: main+35↑o
.rodata:00000000000069A8 aDmitryVLevin   db 'Dmitry V. Levin',0  ; DATA XREF: main+149↑o
.rodata:00000000000069B8 ; const char shortopts[]
.rodata:00000000000069B8 shortopts       db 'efmnqsvz',0         ; DATA XREF: main+67↑o
.rodata:00000000000069C1 ; const char aMissingOperand[]
.rodata:00000000000069C1 aMissingOperand db 'missing operand',0  ; DATA XREF: main:loc_1A16↑o
.rodata:00000000000069D1 aCanonicalize   db 'canonicalize',0     ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:00000000000069DE aCanonicalizeEx db 'canonicalize-existing',0
.rodata:00000000000069DE                                         ; DATA XREF: .data.rel.ro:0000000000209AA0↓o
.rodata:00000000000069F4 aCanonicalizeMi db 'canonicalize-missing',0
.rodata:00000000000069F4                                         ; DATA XREF: .data.rel.ro:0000000000209AC0↓o
.rodata:0000000000006A09 aNoNewline      db 'no-newline',0       ; DATA XREF: .data.rel.ro:0000000000209AE0↓o
.rodata:0000000000006A14 aQuiet          db 'quiet',0            ; DATA XREF: .data.rel.ro:0000000000209B00↓o
.rodata:0000000000006A1A aSilent         db 'silent',0           ; DATA XREF: .data.rel.ro:0000000000209B20↓o
.rodata:0000000000006A21 aVerbose        db 'verbose',0          ; DATA XREF: .data.rel.ro:0000000000209B40↓o
.rodata:0000000000006A29 aZero           db 'zero',0             ; DATA XREF: .data.rel.ro:0000000000209B60↓o
.rodata:0000000000006A2E aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000209B80↓o
.rodata:0000000000006A33 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000209BA0↓o
.rodata:0000000000006A3B                 align 20h
.rodata:0000000000006A40 ; const char aTrySHelpForMor[]
.rodata:0000000000006A40 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000006A40                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000006A67                 align 8
.rodata:0000000000006A68 ; const char aUsageSOptionFi[]
.rodata:0000000000006A68 aUsageSOptionFi db 'Usage: %s [OPTION]... FILE...',0Ah,0
.rodata:0000000000006A68                                         ; DATA XREF: usage:loc_1BCD↑o
.rodata:0000000000006A87                 align 8
.rodata:0000000000006A88 ; const char aPrintValueOfAS[]
.rodata:0000000000006A88 aPrintValueOfAS db 'Print value of a symbolic link or canonical file name',0Ah
.rodata:0000000000006A88                                         ; DATA XREF: usage+84↑o
.rodata:0000000000006A88                 db 0Ah,0
.rodata:0000000000006AC0 ; const char aFCanonicalizeC[]
.rodata:0000000000006AC0 aFCanonicalizeC db '  -f, --canonicalize            canonicalize by following every s'
.rodata:0000000000006AC0                                         ; DATA XREF: usage+A9↑o
.rodata:0000000000006AC0                 db 'ymlink in',0Ah
.rodata:0000000000006AC0                 db '                                every component of the given name'
.rodata:0000000000006AC0                 db ' recursively;',0Ah
.rodata:0000000000006AC0                 db '                                all but the last component must e'
.rodata:0000000000006AC0                 db 'xist',0Ah
.rodata:0000000000006AC0                 db '  -e, --canonicalize-existing   canonicalize by following every s'
.rodata:0000000000006AC0                 db 'ymlink in',0Ah
.rodata:0000000000006AC0                 db '                                every component of the given name'
.rodata:0000000000006AC0                 db ' recursively,',0Ah
.rodata:0000000000006AC0                 db '                                all components must exist',0Ah,0
.rodata:0000000000006C75                 align 8
.rodata:0000000000006C78 ; const char aMCanonicalizeM[]
.rodata:0000000000006C78 aMCanonicalizeM db '  -m, --canonicalize-missing    canonicalize by following every s'
.rodata:0000000000006C78                                         ; DATA XREF: usage+CE↑o
.rodata:0000000000006C78                 db 'ymlink in',0Ah
.rodata:0000000000006C78                 db '                                every component of the given name'
.rodata:0000000000006C78                 db ' recursively,',0Ah
.rodata:0000000000006C78                 db '                                without requirements on component'
.rodata:0000000000006C78                 db 's existence',0Ah
.rodata:0000000000006C78                 db '  -n, --no-newline              do not output the trailing delimi'
.rodata:0000000000006C78                 db 'ter',0Ah
.rodata:0000000000006C78                 db '  -q, --quiet',0Ah
.rodata:0000000000006C78                 db '  -s, --silent                  suppress most error messages (on '
.rodata:0000000000006C78                 db 'by default)',0Ah
.rodata:0000000000006C78                 db '  -v, --verbose                 report error messages',0Ah
.rodata:0000000000006C78                 db '  -z, --zero                    end each output line with NUL, no'
.rodata:0000000000006C78                 db 't newline',0Ah,0
.rodata:0000000000006E81                 align 8
.rodata:0000000000006E88 ; const char aHelpDisplayThi[]
.rodata:0000000000006E88 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000006E88                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000006EB5                 align 8
.rodata:0000000000006EB8 ; const char aVersionOutputV[]
.rodata:0000000000006EB8 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000006EB8                                         ; DATA XREF: usage+118↑o
.rodata:0000000000006EEE                 align 10h
.rodata:0000000000006EF0 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000006EF0                                         ; DATA XREF: usage+20F↑o
.rodata:0000000000006EF0                                         ; usage+273↑o ...
.rodata:0000000000006F18 ; const char aReportAnyTrans[]
.rodata:0000000000006F18 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000006F18                                         ; DATA XREF: usage+367↑o
.rodata:0000000000006F18                 db 'am/>',0Ah,0
.rodata:0000000000006F5F                 align 20h
.rodata:0000000000006F60 ; const char aOrAvailableLoc[]
.rodata:0000000000006F60 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000006F60                                         ; DATA XREF: usage:loc_1E0E↑o
.rodata:0000000000006F93                 align 8
.rodata:0000000000006F98 ; const char msgid[]
.rodata:0000000000006F98 msgid           db 'ignoring --no-newline with multiple arguments',0
.rodata:0000000000006F98                                         ; DATA XREF: main:loc_19EA↑o
.rodata:0000000000006FC6 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000006FCB ; const char aWriteError[]
.rodata:0000000000006FCB aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_2693↑o
.rodata:0000000000006FD7 ; const char format[]
.rodata:0000000000006FD7 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000006FD7                                         ; main+25E↑o ...
.rodata:0000000000006FDE aEntriesLu      db '# entries:         %lu',0Ah,0
.rodata:0000000000006FDE                                         ; DATA XREF: hash_print_statistics:loc_2D05↑o
.rodata:0000000000006FF6 aBucketsLu      db '# buckets:         %lu',0Ah,0
.rodata:0000000000006FF6                                         ; DATA XREF: hash_print_statistics+7B↑o
.rodata:000000000000700E aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.rodata:000000000000700E                                         ; DATA XREF: hash_print_statistics+E8↑o
.rodata:0000000000007026                 align 8
.rodata:0000000000007028 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.rodata:0000000000007028                                         ; DATA XREF: hash_print_statistics+BC↑o
.rodata:0000000000007049                 align 10h
.rodata:0000000000007050 default_tuning  db    0                 ; DATA XREF: check_tuning+3↑o
.rodata:0000000000007050                                         ; hash_initialize:loc_3170↑o
.rodata:0000000000007051                 db    0
.rodata:0000000000007052                 db    0
.rodata:0000000000007053                 db    0
.rodata:0000000000007054                 db    0
.rodata:0000000000007055                 db    0
.rodata:0000000000007056                 db  80h
.rodata:0000000000007057                 db  3Fh ; ?
.rodata:0000000000007058                 db 0CDh
.rodata:0000000000007059                 db 0CCh
.rodata:000000000000705A                 db  4Ch ; L
.rodata:000000000000705B                 db  3Fh ; ?
.rodata:000000000000705C                 db 0F4h
.rodata:000000000000705D                 db 0FDh
.rodata:000000000000705E                 db 0B4h
.rodata:000000000000705F                 db  3Fh ; ?
.rodata:0000000000007060                 db    0
.rodata:0000000000007061                 db    0
.rodata:0000000000007062                 db    0
.rodata:0000000000007063                 db    0
.rodata:0000000000007064 dword_7064      dd 3DCCCCCDh            ; DATA XREF: check_tuning+19↑r
.rodata:0000000000007064                                         ; check_tuning+4A↑r
.rodata:0000000000007068 dword_7068      dd 3F666666h            ; DATA XREF: check_tuning+22↑r
.rodata:000000000000706C dword_706C      dd 3F8CCCCDh            ; DATA XREF: check_tuning+34↑r
.rodata:0000000000007070 dword_7070      dd 0                    ; DATA XREF: check_tuning+41↑r
.rodata:0000000000007074 dword_7074      dd 3F800000h            ; DATA XREF: check_tuning+5C↑r
.rodata:0000000000007078 dword_7078      dd 3F4CCCCDh            ; DATA XREF: hash_initialize+122↑r
.rodata:000000000000707C dword_707C      dd 5F800000h            ; DATA XREF: hash_initialize+13E↑r
.rodata:000000000000707C                                         ; hash_rehash+40↑r ...
.rodata:0000000000007080 dword_7080      dd 5F000000h            ; DATA XREF: hash_initialize+147↑r
.rodata:0000000000007080                                         ; hash_initialize+150↑r ...
.rodata:0000000000007084                 align 8
.rodata:0000000000007088 qword_7088      dq 4059000000000000h    ; DATA XREF: hash_print_statistics+A5↑r
.rodata:0000000000007088                                         ; hash_print_statistics+11F↑r
.rodata:0000000000007090 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000007090                                         ; DATA XREF: set_program_name+84↑o
.rodata:00000000000070C8 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:00000000000070C8                                         ; canonicalize_filename_mode+296↑o
.rodata:00000000000070D0 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:00000000000070D4 unk_70D4        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:00000000000070D5                 db  80h
.rodata:00000000000070D6                 db  98h
.rodata:00000000000070D7                 db    0
.rodata:00000000000070D8 unk_70D8        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:00000000000070D9                 db  80h
.rodata:00000000000070DA                 db  99h
.rodata:00000000000070DB                 db    0
.rodata:00000000000070DC unk_70DC        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:00000000000070DD                 db    7
.rodata:00000000000070DE                 db  65h ; e
.rodata:00000000000070DF                 db    0
.rodata:00000000000070E0 unk_70E0        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:00000000000070E1                 db 0AFh
.rodata:00000000000070E2                 db    0
.rodata:00000000000070E3 unk_70E3        db  22h ; "             ; DATA XREF: gettext_quote:loc_3C60↑o
.rodata:00000000000070E3                                         ; quotearg_buffer_restyled:loc_4A1B↑o ...
.rodata:00000000000070E4                 db    0
.rodata:00000000000070E5 ; const char asc_70E5[2]
.rodata:00000000000070E5 asc_70E5        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:00000000000070E5                                         ; quotearg_buffer_restyled:loc_3DE3↑o ...
.rodata:00000000000070E7 ; const char asc_70E7[2]
.rodata:00000000000070E7 asc_70E7        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:00000000000070E7                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:00000000000070E9 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:00000000000070F1 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000209BE8↓o
.rodata:00000000000070F7 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000209BF0↓o
.rodata:0000000000007104 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000209BF8↓o
.rodata:0000000000007104                                         ; .data.rel.ro:0000000000209C18↓o
.rodata:0000000000007111 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000007111                                         ; DATA XREF: .data.rel.ro:0000000000209C00↓o
.rodata:0000000000007125 aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000209C08↓o
.rodata:0000000000007127 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000209C10↓o
.rodata:000000000000712F aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000209C28↓o
.rodata:0000000000007137                 align 20h
.rodata:0000000000007140 jpt_3DC1        dd offset loc_4B6A - 7140h
.rodata:0000000000007140                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000007140                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000007140                 dd offset loc_3DC3 - 7140h ; jump table for switch statement
.rodata:0000000000007140                 dd offset loc_4D98 - 7140h
.rodata:0000000000007140                 dd offset loc_4BA4 - 7140h
.rodata:0000000000007140                 dd offset loc_4994 - 7140h
.rodata:0000000000007140                 dd offset loc_49F0 - 7140h
.rodata:0000000000007140                 dd offset loc_4A45 - 7140h
.rodata:0000000000007140                 dd offset loc_4A8A - 7140h
.rodata:0000000000007140                 dd offset loc_4AC4 - 7140h
.rodata:0000000000007140                 dd offset loc_4AC4 - 7140h
.rodata:0000000000007140                 dd offset loc_4AC4 - 7140h
.rodata:000000000000716C jpt_3F1E        dd offset loc_4140 - 716Ch, offset def_3F1E - 716Ch, offset def_3F1E - 716Ch
.rodata:000000000000716C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000716C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000716C                 dd offset def_3F1E - 716Ch, offset def_3F1E - 716Ch, offset def_3F1E - 716Ch ; jump table for switch statement
.rodata:000000000000716C                 dd offset def_3F1E - 716Ch, offset loc_4180 - 716Ch, offset loc_4088 - 716Ch
.rodata:000000000000716C                 dd offset loc_4048 - 716Ch, offset loc_4210 - 716Ch, offset loc_4200 - 716Ch
.rodata:000000000000716C                 dd offset loc_41F0 - 716Ch, offset loc_41E0 - 716Ch, offset def_3F1E - 716Ch
.rodata:000000000000716C                 dd offset def_3F1E - 716Ch, offset def_3F1E - 716Ch, offset def_3F1E - 716Ch
.rodata:000000000000716C                 dd offset def_3F1E - 716Ch, offset def_3F1E - 716Ch, offset def_3F1E - 716Ch
.rodata:000000000000716C                 dd offset def_3F1E - 716Ch, offset def_3F1E - 716Ch, offset def_3F1E - 716Ch
.rodata:000000000000716C                 dd offset def_3F1E - 716Ch, offset def_3F1E - 716Ch, offset def_3F1E - 716Ch
.rodata:000000000000716C                 dd offset def_3F1E - 716Ch, offset def_3F1E - 716Ch, offset def_3F1E - 716Ch
.rodata:000000000000716C                 dd offset def_3F1E - 716Ch, offset def_3F1E - 716Ch, offset loc_41D0 - 716Ch
.rodata:000000000000716C                 dd offset loc_41C0 - 716Ch, offset loc_41C0 - 716Ch, offset loc_4190 - 716Ch
.rodata:000000000000716C                 dd offset loc_41C0 - 716Ch, offset loc_4168 - 716Ch, offset loc_41C0 - 716Ch
.rodata:000000000000716C                 dd offset loc_4023 - 716Ch, offset loc_41C0 - 716Ch, offset loc_41C0 - 716Ch
.rodata:000000000000716C                 dd offset loc_41C0 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_41C0 - 716Ch
.rodata:000000000000716C                 dd offset loc_41C0 - 716Ch, offset loc_41C0 - 716Ch, offset loc_41C0 - 716Ch
.rodata:000000000000716C                 dd offset loc_3FF3 - 716Ch, offset def_3F1E - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_41C0 - 716Ch, offset loc_4098 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_41C0 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_41C0 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_4168 - 716Ch, offset loc_4168 - 716Ch, offset loc_4168 - 716Ch
.rodata:000000000000716C                 dd offset loc_3F23 - 716Ch, offset loc_41C0 - 716Ch, offset loc_3F23 - 716Ch
.rodata:000000000000716C                 dd offset loc_4190 - 716Ch
.rodata:0000000000007368 jpt_42AA        dd offset loc_4310 - 7368h, offset def_42AA - 7368h, offset def_42AA - 7368h
.rodata:0000000000007368                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000007368                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000007368                 dd offset def_42AA - 7368h, offset def_42AA - 7368h, offset def_42AA - 7368h ; jump table for switch statement
.rodata:0000000000007368                 dd offset def_42AA - 7368h, offset loc_4300 - 7368h, offset loc_4450 - 7368h
.rodata:0000000000007368                 dd offset loc_4438 - 7368h, offset loc_42E8 - 7368h, offset loc_4428 - 7368h
.rodata:0000000000007368                 dd offset loc_42D0 - 7368h, offset loc_4410 - 7368h, offset def_42AA - 7368h
.rodata:0000000000007368                 dd offset def_42AA - 7368h, offset def_42AA - 7368h, offset def_42AA - 7368h
.rodata:0000000000007368                 dd offset def_42AA - 7368h, offset def_42AA - 7368h, offset def_42AA - 7368h
.rodata:0000000000007368                 dd offset def_42AA - 7368h, offset def_42AA - 7368h, offset def_42AA - 7368h
.rodata:0000000000007368                 dd offset def_42AA - 7368h, offset def_42AA - 7368h, offset def_42AA - 7368h
.rodata:0000000000007368                 dd offset def_42AA - 7368h, offset def_42AA - 7368h, offset def_42AA - 7368h
.rodata:0000000000007368                 dd offset def_42AA - 7368h, offset def_42AA - 7368h, offset loc_43F8 - 7368h
.rodata:0000000000007368                 dd offset loc_43E0 - 7368h, offset loc_43E0 - 7368h, offset loc_43C8 - 7368h
.rodata:0000000000007368                 dd offset loc_43E0 - 7368h, offset loc_43B0 - 7368h, offset loc_43E0 - 7368h
.rodata:0000000000007368                 dd offset loc_4020 - 7368h, offset loc_43E0 - 7368h, offset loc_43E0 - 7368h
.rodata:0000000000007368                 dd offset loc_43E0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43E0 - 7368h
.rodata:0000000000007368                 dd offset loc_43E0 - 7368h, offset loc_43E0 - 7368h, offset loc_43E0 - 7368h
.rodata:0000000000007368                 dd offset loc_3FF0 - 7368h, offset def_42AA - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43E0 - 7368h, offset loc_42B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43E0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43E0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_43B0 - 7368h, offset loc_43B0 - 7368h, offset loc_43B0 - 7368h
.rodata:0000000000007368                 dd offset loc_3F20 - 7368h, offset loc_43E0 - 7368h, offset loc_3F20 - 7368h
.rodata:0000000000007368                 dd offset loc_43C8 - 7368h
.rodata:0000000000007564                 align 20h
.rodata:0000000000007580                 public quoting_style_vals
.rodata:0000000000007580 quoting_style_vals db    0
.rodata:0000000000007581                 db    0
.rodata:0000000000007582                 db    0
.rodata:0000000000007583                 db    0
.rodata:0000000000007584                 db    1
.rodata:0000000000007585                 db    0
.rodata:0000000000007586                 db    0
.rodata:0000000000007587                 db    0
.rodata:0000000000007588                 db    2
.rodata:0000000000007589                 db    0
.rodata:000000000000758A                 db    0
.rodata:000000000000758B                 db    0
.rodata:000000000000758C                 db    3
.rodata:000000000000758D                 db    0
.rodata:000000000000758E                 db    0
.rodata:000000000000758F                 db    0
.rodata:0000000000007590                 db    4
.rodata:0000000000007591                 db    0
.rodata:0000000000007592                 db    0
.rodata:0000000000007593                 db    0
.rodata:0000000000007594                 db    5
.rodata:0000000000007595                 db    0
.rodata:0000000000007596                 db    0
.rodata:0000000000007597                 db    0
.rodata:0000000000007598                 db    6
.rodata:0000000000007599                 db    0
.rodata:000000000000759A                 db    0
.rodata:000000000000759B                 db    0
.rodata:000000000000759C                 db    7
.rodata:000000000000759D                 db    0
.rodata:000000000000759E                 db    0
.rodata:000000000000759F                 db    0
.rodata:00000000000075A0                 db    8
.rodata:00000000000075A1                 db    0
.rodata:00000000000075A2                 db    0
.rodata:00000000000075A3                 db    0
.rodata:00000000000075A4                 db    9
.rodata:00000000000075A5                 db    0
.rodata:00000000000075A6                 db    0
.rodata:00000000000075A7                 db    0
.rodata:00000000000075A8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:00000000000075B4 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:00000000000075BB ; const char aC_0[]
.rodata:00000000000075BB aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_5AFC↑o
.rodata:00000000000075BF ; const char aWrittenByS[]
.rodata:00000000000075BF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:00000000000075BF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:00000000000075CF ; const char aWrittenBySAndS[]
.rodata:00000000000075CF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:00000000000075CF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000075E6 ; const char aWrittenBySSAnd[]
.rodata:00000000000075E6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000075E6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000007602 ; const char aReportBugsToS[]
.rodata:0000000000007602 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000007602                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000007617 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000007617                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000762D ; const char aSHomePageS[]
.rodata:000000000000762D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000762D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000007641                 align 8
.rodata:0000000000007648 ; const char aLicenseGplv3Gn[]
.rodata:0000000000007648 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000007648                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000007648                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000007648                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000007648                 db '.',0Ah
.rodata:0000000000007648                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000007648                 db 0Ah,0
.rodata:0000000000007714                 align 8
.rodata:0000000000007718 ; const char aWrittenBySSSAn[]
.rodata:0000000000007718 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007718                                         ; DATA XREF: version_etc_arn:loc_5D50↑o
.rodata:0000000000007718                 db 'and %s.',0Ah,0
.rodata:0000000000007738 ; const char aWrittenBySSSSA[]
.rodata:0000000000007738 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007738                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000007738                 db '%s, and %s.',0Ah,0
.rodata:000000000000775C                 align 20h
.rodata:0000000000007760 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000007760 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007760                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000007760                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000007788 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000007788 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007788                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000007788                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:00000000000077B4                 align 8
.rodata:00000000000077B8 ; const char aWrittenBySSSSS[]
.rodata:00000000000077B8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000077B8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:00000000000077B8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000077B8                 db 'and %s.',0Ah,0
.rodata:00000000000077E8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000077E8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000077E8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000077E8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000077E8                 db '%s, and %s.',0Ah,0
.rodata:000000000000781C                 align 20h
.rodata:0000000000007820 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007820                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000007820                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007820                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000785C                 align 20h
.rodata:0000000000007860 ; const char aGeneralHelpUsi[]
.rodata:0000000000007860 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000007860                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000007860                 db 0
.rodata:00000000000078A1                 align 8
.rodata:00000000000078A8 jpt_5B64        dd offset loc_5BE6 - 78A8h
.rodata:00000000000078A8                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:00000000000078A8                                         ; version_etc_arn+9D↑r
.rodata:00000000000078A8                 dd offset loc_5C78 - 78A8h ; jump table for switch statement
.rodata:00000000000078A8                 dd offset loc_5CB8 - 78A8h
.rodata:00000000000078A8                 dd offset loc_5D00 - 78A8h
.rodata:00000000000078A8                 dd offset loc_5D50 - 78A8h
.rodata:00000000000078A8                 dd offset loc_5DA8 - 78A8h
.rodata:00000000000078A8                 dd offset loc_5DD8 - 78A8h
.rodata:00000000000078A8                 dd offset loc_5E40 - 78A8h
.rodata:00000000000078A8                 dd offset loc_5B70 - 78A8h
.rodata:00000000000078A8                 dd offset loc_5C20 - 78A8h
.rodata:00000000000078D0                 align 20h
.rodata:00000000000078E0                 public version_etc_copyright
.rodata:00000000000078E0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000078E0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000790F ; const char aMemoryExhauste[]
.rodata:000000000000790F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000007920 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000007922 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_6680↑o
.rodata:0000000000007928 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000007928                                         ; locale_charset:loc_6710↑o
.rodata:0000000000007928 _rodata         ends
.rodata:0000000000007928
LOAD:000000000000792E ; ===========================================================================
LOAD:000000000000792E
LOAD:000000000000792E ; Segment type: Pure code
LOAD:000000000000792E ; Segment permissions: Read/Execute
LOAD:000000000000792E LOAD            segment byte public 'CODE' use64
LOAD:000000000000792E                 assume cs:LOAD
LOAD:000000000000792E                 ;org 792Eh
LOAD:000000000000792E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000792E                 align 10h
LOAD:000000000000792E LOAD            ends
LOAD:000000000000792E
.eh_frame_hdr:0000000000007930 ; ===========================================================================
.eh_frame_hdr:0000000000007930
.eh_frame_hdr:0000000000007930 ; Segment type: Pure data
.eh_frame_hdr:0000000000007930 ; Segment permissions: Read
.eh_frame_hdr:0000000000007930 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000007930                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000007930                 ;org 7930h
.eh_frame_hdr:0000000000007930 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000007931                 db  1Bh
.eh_frame_hdr:0000000000007932                 db    3
.eh_frame_hdr:0000000000007933                 db  3Bh ; ;
.eh_frame_hdr:0000000000007934                 db 0ACh
.eh_frame_hdr:0000000000007935                 db    3
.eh_frame_hdr:0000000000007936                 db    0
.eh_frame_hdr:0000000000007937                 db    0
.eh_frame_hdr:0000000000007938                 db  74h ; t
.eh_frame_hdr:0000000000007939                 db    0
.eh_frame_hdr:000000000000793A                 db    0
.eh_frame_hdr:000000000000793B                 db    0
.eh_frame_hdr:000000000000793C                 db    0
.eh_frame_hdr:000000000000793D                 db  9Bh
.eh_frame_hdr:000000000000793E                 db 0FFh
.eh_frame_hdr:000000000000793F                 db 0FFh
.eh_frame_hdr:0000000000007940                 db 0F8h
.eh_frame_hdr:0000000000007941                 db    3
.eh_frame_hdr:0000000000007942                 db    0
.eh_frame_hdr:0000000000007943                 db    0
.eh_frame_hdr:0000000000007944                 db  10h
.eh_frame_hdr:0000000000007945                 db  9Eh
.eh_frame_hdr:0000000000007946                 db 0FFh
.eh_frame_hdr:0000000000007947                 db 0FFh
.eh_frame_hdr:0000000000007948                 db  20h
.eh_frame_hdr:0000000000007949                 db    4
.eh_frame_hdr:000000000000794A                 db    0
.eh_frame_hdr:000000000000794B                 db    0
.eh_frame_hdr:000000000000794C                 db  20h
.eh_frame_hdr:000000000000794D                 db  9Eh
.eh_frame_hdr:000000000000794E                 db 0FFh
.eh_frame_hdr:000000000000794F                 db 0FFh
.eh_frame_hdr:0000000000007950                 db  64h ; d
.eh_frame_hdr:0000000000007951                 db    4
.eh_frame_hdr:0000000000007952                 db    0
.eh_frame_hdr:0000000000007953                 db    0
.eh_frame_hdr:0000000000007954                 db  30h ; 0
.eh_frame_hdr:0000000000007955                 db 0A1h
.eh_frame_hdr:0000000000007956                 db 0FFh
.eh_frame_hdr:0000000000007957                 db 0FFh
.eh_frame_hdr:0000000000007958                 db 0C8h
.eh_frame_hdr:0000000000007959                 db    3
.eh_frame_hdr:000000000000795A                 db    0
.eh_frame_hdr:000000000000795B                 db    0
.eh_frame_hdr:000000000000795C                 db  40h ; @
.eh_frame_hdr:000000000000795D                 db 0A2h
.eh_frame_hdr:000000000000795E                 db 0FFh
.eh_frame_hdr:000000000000795F                 db 0FFh
.eh_frame_hdr:0000000000007960                 db  38h ; 8
.eh_frame_hdr:0000000000007961                 db    4
.eh_frame_hdr:0000000000007962                 db    0
.eh_frame_hdr:0000000000007963                 db    0
.eh_frame_hdr:0000000000007964                 db 0D0h
.eh_frame_hdr:0000000000007965                 db 0A5h
.eh_frame_hdr:0000000000007966                 db 0FFh
.eh_frame_hdr:0000000000007967                 db 0FFh
.eh_frame_hdr:0000000000007968                 db 0B0h
.eh_frame_hdr:0000000000007969                 db    4
.eh_frame_hdr:000000000000796A                 db    0
.eh_frame_hdr:000000000000796B                 db    0
.eh_frame_hdr:000000000000796C                 db 0C0h
.eh_frame_hdr:000000000000796D                 db 0A6h
.eh_frame_hdr:000000000000796E                 db 0FFh
.eh_frame_hdr:000000000000796F                 db 0FFh
.eh_frame_hdr:0000000000007970                 db    0
.eh_frame_hdr:0000000000007971                 db    5
.eh_frame_hdr:0000000000007972                 db    0
.eh_frame_hdr:0000000000007973                 db    0
.eh_frame_hdr:0000000000007974                 db    0
.eh_frame_hdr:0000000000007975                 db 0ADh
.eh_frame_hdr:0000000000007976                 db 0FFh
.eh_frame_hdr:0000000000007977                 db 0FFh
.eh_frame_hdr:0000000000007978                 db  50h ; P
.eh_frame_hdr:0000000000007979                 db    5
.eh_frame_hdr:000000000000797A                 db    0
.eh_frame_hdr:000000000000797B                 db    0
.eh_frame_hdr:000000000000797C                 db  10h
.eh_frame_hdr:000000000000797D                 db 0ADh
.eh_frame_hdr:000000000000797E                 db 0FFh
.eh_frame_hdr:000000000000797F                 db 0FFh
.eh_frame_hdr:0000000000007980                 db  64h ; d
.eh_frame_hdr:0000000000007981                 db    5
.eh_frame_hdr:0000000000007982                 db    0
.eh_frame_hdr:0000000000007983                 db    0
.eh_frame_hdr:0000000000007984                 db  20h
.eh_frame_hdr:0000000000007985                 db 0ADh
.eh_frame_hdr:0000000000007986                 db 0FFh
.eh_frame_hdr:0000000000007987                 db 0FFh
.eh_frame_hdr:0000000000007988                 db  78h ; x
.eh_frame_hdr:0000000000007989                 db    5
.eh_frame_hdr:000000000000798A                 db    0
.eh_frame_hdr:000000000000798B                 db    0
.eh_frame_hdr:000000000000798C                 db 0D0h
.eh_frame_hdr:000000000000798D                 db 0ADh
.eh_frame_hdr:000000000000798E                 db 0FFh
.eh_frame_hdr:000000000000798F                 db 0FFh
.eh_frame_hdr:0000000000007990                 db 0A8h
.eh_frame_hdr:0000000000007991                 db    5
.eh_frame_hdr:0000000000007992                 db    0
.eh_frame_hdr:0000000000007993                 db    0
.eh_frame_hdr:0000000000007994                 db  60h ; `
.eh_frame_hdr:0000000000007995                 db 0AEh
.eh_frame_hdr:0000000000007996                 db 0FFh
.eh_frame_hdr:0000000000007997                 db 0FFh
.eh_frame_hdr:0000000000007998                 db    8
.eh_frame_hdr:0000000000007999                 db    6
.eh_frame_hdr:000000000000799A                 db    0
.eh_frame_hdr:000000000000799B                 db    0
.eh_frame_hdr:000000000000799C                 db 0C0h
.eh_frame_hdr:000000000000799D                 db 0AEh
.eh_frame_hdr:000000000000799E                 db 0FFh
.eh_frame_hdr:000000000000799F                 db 0FFh
.eh_frame_hdr:00000000000079A0                 db  28h ; (
.eh_frame_hdr:00000000000079A1                 db    6
.eh_frame_hdr:00000000000079A2                 db    0
.eh_frame_hdr:00000000000079A3                 db    0
.eh_frame_hdr:00000000000079A4                 db  60h ; `
.eh_frame_hdr:00000000000079A5                 db 0AFh
.eh_frame_hdr:00000000000079A6                 db 0FFh
.eh_frame_hdr:00000000000079A7                 db 0FFh
.eh_frame_hdr:00000000000079A8                 db  3Ch ; <
.eh_frame_hdr:00000000000079A9                 db    6
.eh_frame_hdr:00000000000079AA                 db    0
.eh_frame_hdr:00000000000079AB                 db    0
.eh_frame_hdr:00000000000079AC                 db  70h ; p
.eh_frame_hdr:00000000000079AD                 db 0AFh
.eh_frame_hdr:00000000000079AE                 db 0FFh
.eh_frame_hdr:00000000000079AF                 db 0FFh
.eh_frame_hdr:00000000000079B0                 db  50h ; P
.eh_frame_hdr:00000000000079B1                 db    6
.eh_frame_hdr:00000000000079B2                 db    0
.eh_frame_hdr:00000000000079B3                 db    0
.eh_frame_hdr:00000000000079B4                 db  80h
.eh_frame_hdr:00000000000079B5                 db 0AFh
.eh_frame_hdr:00000000000079B6                 db 0FFh
.eh_frame_hdr:00000000000079B7                 db 0FFh
.eh_frame_hdr:00000000000079B8                 db  64h ; d
.eh_frame_hdr:00000000000079B9                 db    6
.eh_frame_hdr:00000000000079BA                 db    0
.eh_frame_hdr:00000000000079BB                 db    0
.eh_frame_hdr:00000000000079BC                 db 0B0h
.eh_frame_hdr:00000000000079BD                 db 0AFh
.eh_frame_hdr:00000000000079BE                 db 0FFh
.eh_frame_hdr:00000000000079BF                 db 0FFh
.eh_frame_hdr:00000000000079C0                 db  80h
.eh_frame_hdr:00000000000079C1                 db    6
.eh_frame_hdr:00000000000079C2                 db    0
.eh_frame_hdr:00000000000079C3                 db    0
.eh_frame_hdr:00000000000079C4                 db 0D0h
.eh_frame_hdr:00000000000079C5                 db 0B0h
.eh_frame_hdr:00000000000079C6                 db 0FFh
.eh_frame_hdr:00000000000079C7                 db 0FFh
.eh_frame_hdr:00000000000079C8                 db 0E0h
.eh_frame_hdr:00000000000079C9                 db    6
.eh_frame_hdr:00000000000079CA                 db    0
.eh_frame_hdr:00000000000079CB                 db    0
.eh_frame_hdr:00000000000079CC                 db  50h ; P
.eh_frame_hdr:00000000000079CD                 db 0B1h
.eh_frame_hdr:00000000000079CE                 db 0FFh
.eh_frame_hdr:00000000000079CF                 db 0FFh
.eh_frame_hdr:00000000000079D0                 db 0F4h
.eh_frame_hdr:00000000000079D1                 db    6
.eh_frame_hdr:00000000000079D2                 db    0
.eh_frame_hdr:00000000000079D3                 db    0
.eh_frame_hdr:00000000000079D4                 db  90h
.eh_frame_hdr:00000000000079D5                 db 0B2h
.eh_frame_hdr:00000000000079D6                 db 0FFh
.eh_frame_hdr:00000000000079D7                 db 0FFh
.eh_frame_hdr:00000000000079D8                 db  54h ; T
.eh_frame_hdr:00000000000079D9                 db    7
.eh_frame_hdr:00000000000079DA                 db    0
.eh_frame_hdr:00000000000079DB                 db    0
.eh_frame_hdr:00000000000079DC                 db 0A0h
.eh_frame_hdr:00000000000079DD                 db 0B2h
.eh_frame_hdr:00000000000079DE                 db 0FFh
.eh_frame_hdr:00000000000079DF                 db 0FFh
.eh_frame_hdr:00000000000079E0                 db  68h ; h
.eh_frame_hdr:00000000000079E1                 db    7
.eh_frame_hdr:00000000000079E2                 db    0
.eh_frame_hdr:00000000000079E3                 db    0
.eh_frame_hdr:00000000000079E4                 db 0B0h
.eh_frame_hdr:00000000000079E5                 db 0B2h
.eh_frame_hdr:00000000000079E6                 db 0FFh
.eh_frame_hdr:00000000000079E7                 db 0FFh
.eh_frame_hdr:00000000000079E8                 db  7Ch ; |
.eh_frame_hdr:00000000000079E9                 db    7
.eh_frame_hdr:00000000000079EA                 db    0
.eh_frame_hdr:00000000000079EB                 db    0
.eh_frame_hdr:00000000000079EC                 db 0C0h
.eh_frame_hdr:00000000000079ED                 db 0B2h
.eh_frame_hdr:00000000000079EE                 db 0FFh
.eh_frame_hdr:00000000000079EF                 db 0FFh
.eh_frame_hdr:00000000000079F0                 db  90h
.eh_frame_hdr:00000000000079F1                 db    7
.eh_frame_hdr:00000000000079F2                 db    0
.eh_frame_hdr:00000000000079F3                 db    0
.eh_frame_hdr:00000000000079F4                 db  10h
.eh_frame_hdr:00000000000079F5                 db 0B3h
.eh_frame_hdr:00000000000079F6                 db 0FFh
.eh_frame_hdr:00000000000079F7                 db 0FFh
.eh_frame_hdr:00000000000079F8                 db 0A4h
.eh_frame_hdr:00000000000079F9                 db    7
.eh_frame_hdr:00000000000079FA                 db    0
.eh_frame_hdr:00000000000079FB                 db    0
.eh_frame_hdr:00000000000079FC                 db  70h ; p
.eh_frame_hdr:00000000000079FD                 db 0B3h
.eh_frame_hdr:00000000000079FE                 db 0FFh
.eh_frame_hdr:00000000000079FF                 db 0FFh
.eh_frame_hdr:0000000000007A00                 db 0B8h
.eh_frame_hdr:0000000000007A01                 db    7
.eh_frame_hdr:0000000000007A02                 db    0
.eh_frame_hdr:0000000000007A03                 db    0
.eh_frame_hdr:0000000000007A04                 db 0C0h
.eh_frame_hdr:0000000000007A05                 db 0B4h
.eh_frame_hdr:0000000000007A06                 db 0FFh
.eh_frame_hdr:0000000000007A07                 db 0FFh
.eh_frame_hdr:0000000000007A08                 db 0F4h
.eh_frame_hdr:0000000000007A09                 db    7
.eh_frame_hdr:0000000000007A0A                 db    0
.eh_frame_hdr:0000000000007A0B                 db    0
.eh_frame_hdr:0000000000007A0C                 db  20h
.eh_frame_hdr:0000000000007A0D                 db 0B5h
.eh_frame_hdr:0000000000007A0E                 db 0FFh
.eh_frame_hdr:0000000000007A0F                 db 0FFh
.eh_frame_hdr:0000000000007A10                 db  2Ch ; ,
.eh_frame_hdr:0000000000007A11                 db    8
.eh_frame_hdr:0000000000007A12                 db    0
.eh_frame_hdr:0000000000007A13                 db    0
.eh_frame_hdr:0000000000007A14                 db  70h ; p
.eh_frame_hdr:0000000000007A15                 db 0B5h
.eh_frame_hdr:0000000000007A16                 db 0FFh
.eh_frame_hdr:0000000000007A17                 db 0FFh
.eh_frame_hdr:0000000000007A18                 db  40h ; @
.eh_frame_hdr:0000000000007A19                 db    8
.eh_frame_hdr:0000000000007A1A                 db    0
.eh_frame_hdr:0000000000007A1B                 db    0
.eh_frame_hdr:0000000000007A1C                 db 0F0h
.eh_frame_hdr:0000000000007A1D                 db 0B5h
.eh_frame_hdr:0000000000007A1E                 db 0FFh
.eh_frame_hdr:0000000000007A1F                 db 0FFh
.eh_frame_hdr:0000000000007A20                 db  74h ; t
.eh_frame_hdr:0000000000007A21                 db    8
.eh_frame_hdr:0000000000007A22                 db    0
.eh_frame_hdr:0000000000007A23                 db    0
.eh_frame_hdr:0000000000007A24                 db  60h ; `
.eh_frame_hdr:0000000000007A25                 db 0B6h
.eh_frame_hdr:0000000000007A26                 db 0FFh
.eh_frame_hdr:0000000000007A27                 db 0FFh
.eh_frame_hdr:0000000000007A28                 db  88h
.eh_frame_hdr:0000000000007A29                 db    8
.eh_frame_hdr:0000000000007A2A                 db    0
.eh_frame_hdr:0000000000007A2B                 db    0
.eh_frame_hdr:0000000000007A2C                 db 0D0h
.eh_frame_hdr:0000000000007A2D                 db 0B6h
.eh_frame_hdr:0000000000007A2E                 db 0FFh
.eh_frame_hdr:0000000000007A2F                 db 0FFh
.eh_frame_hdr:0000000000007A30                 db 0D4h
.eh_frame_hdr:0000000000007A31                 db    8
.eh_frame_hdr:0000000000007A32                 db    0
.eh_frame_hdr:0000000000007A33                 db    0
.eh_frame_hdr:0000000000007A34                 db  10h
.eh_frame_hdr:0000000000007A35                 db 0B7h
.eh_frame_hdr:0000000000007A36                 db 0FFh
.eh_frame_hdr:0000000000007A37                 db 0FFh
.eh_frame_hdr:0000000000007A38                 db 0E8h
.eh_frame_hdr:0000000000007A39                 db    8
.eh_frame_hdr:0000000000007A3A                 db    0
.eh_frame_hdr:0000000000007A3B                 db    0
.eh_frame_hdr:0000000000007A3C                 db  30h ; 0
.eh_frame_hdr:0000000000007A3D                 db 0B7h
.eh_frame_hdr:0000000000007A3E                 db 0FFh
.eh_frame_hdr:0000000000007A3F                 db 0FFh
.eh_frame_hdr:0000000000007A40                 db 0FCh
.eh_frame_hdr:0000000000007A41                 db    8
.eh_frame_hdr:0000000000007A42                 db    0
.eh_frame_hdr:0000000000007A43                 db    0
.eh_frame_hdr:0000000000007A44                 db 0F0h
.eh_frame_hdr:0000000000007A45                 db 0B8h
.eh_frame_hdr:0000000000007A46                 db 0FFh
.eh_frame_hdr:0000000000007A47                 db 0FFh
.eh_frame_hdr:0000000000007A48                 db  48h ; H
.eh_frame_hdr:0000000000007A49                 db    9
.eh_frame_hdr:0000000000007A4A                 db    0
.eh_frame_hdr:0000000000007A4B                 db    0
.eh_frame_hdr:0000000000007A4C                 db  80h
.eh_frame_hdr:0000000000007A4D                 db 0B9h
.eh_frame_hdr:0000000000007A4E                 db 0FFh
.eh_frame_hdr:0000000000007A4F                 db 0FFh
.eh_frame_hdr:0000000000007A50                 db  74h ; t
.eh_frame_hdr:0000000000007A51                 db    9
.eh_frame_hdr:0000000000007A52                 db    0
.eh_frame_hdr:0000000000007A53                 db    0
.eh_frame_hdr:0000000000007A54                 db  60h ; `
.eh_frame_hdr:0000000000007A55                 db 0BAh
.eh_frame_hdr:0000000000007A56                 db 0FFh
.eh_frame_hdr:0000000000007A57                 db 0FFh
.eh_frame_hdr:0000000000007A58                 db 0A0h
.eh_frame_hdr:0000000000007A59                 db    9
.eh_frame_hdr:0000000000007A5A                 db    0
.eh_frame_hdr:0000000000007A5B                 db    0
.eh_frame_hdr:0000000000007A5C                 db 0A0h
.eh_frame_hdr:0000000000007A5D                 db 0BCh
.eh_frame_hdr:0000000000007A5E                 db 0FFh
.eh_frame_hdr:0000000000007A5F                 db 0FFh
.eh_frame_hdr:0000000000007A60                 db 0D8h
.eh_frame_hdr:0000000000007A61                 db    9
.eh_frame_hdr:0000000000007A62                 db    0
.eh_frame_hdr:0000000000007A63                 db    0
.eh_frame_hdr:0000000000007A64                 db  30h ; 0
.eh_frame_hdr:0000000000007A65                 db 0BFh
.eh_frame_hdr:0000000000007A66                 db 0FFh
.eh_frame_hdr:0000000000007A67                 db 0FFh
.eh_frame_hdr:0000000000007A68                 db  14h
.eh_frame_hdr:0000000000007A69                 db  0Ah
.eh_frame_hdr:0000000000007A6A                 db    0
.eh_frame_hdr:0000000000007A6B                 db    0
.eh_frame_hdr:0000000000007A6C                 db  90h
.eh_frame_hdr:0000000000007A6D                 db 0BFh
.eh_frame_hdr:0000000000007A6E                 db 0FFh
.eh_frame_hdr:0000000000007A6F                 db 0FFh
.eh_frame_hdr:0000000000007A70                 db  38h ; 8
.eh_frame_hdr:0000000000007A71                 db  0Ah
.eh_frame_hdr:0000000000007A72                 db    0
.eh_frame_hdr:0000000000007A73                 db    0
.eh_frame_hdr:0000000000007A74                 db 0A0h
.eh_frame_hdr:0000000000007A75                 db 0C1h
.eh_frame_hdr:0000000000007A76                 db 0FFh
.eh_frame_hdr:0000000000007A77                 db 0FFh
.eh_frame_hdr:0000000000007A78                 db  70h ; p
.eh_frame_hdr:0000000000007A79                 db  0Ah
.eh_frame_hdr:0000000000007A7A                 db    0
.eh_frame_hdr:0000000000007A7B                 db    0
.eh_frame_hdr:0000000000007A7C                 db 0D0h
.eh_frame_hdr:0000000000007A7D                 db 0C1h
.eh_frame_hdr:0000000000007A7E                 db 0FFh
.eh_frame_hdr:0000000000007A7F                 db 0FFh
.eh_frame_hdr:0000000000007A80                 db  98h
.eh_frame_hdr:0000000000007A81                 db  0Ah
.eh_frame_hdr:0000000000007A82                 db    0
.eh_frame_hdr:0000000000007A83                 db    0
.eh_frame_hdr:0000000000007A84                 db 0E0h
.eh_frame_hdr:0000000000007A85                 db 0C1h
.eh_frame_hdr:0000000000007A86                 db 0FFh
.eh_frame_hdr:0000000000007A87                 db 0FFh
.eh_frame_hdr:0000000000007A88                 db 0ACh
.eh_frame_hdr:0000000000007A89                 db  0Ah
.eh_frame_hdr:0000000000007A8A                 db    0
.eh_frame_hdr:0000000000007A8B                 db    0
.eh_frame_hdr:0000000000007A8C                 db  10h
.eh_frame_hdr:0000000000007A8D                 db 0C2h
.eh_frame_hdr:0000000000007A8E                 db 0FFh
.eh_frame_hdr:0000000000007A8F                 db 0FFh
.eh_frame_hdr:0000000000007A90                 db 0C4h
.eh_frame_hdr:0000000000007A91                 db  0Ah
.eh_frame_hdr:0000000000007A92                 db    0
.eh_frame_hdr:0000000000007A93                 db    0
.eh_frame_hdr:0000000000007A94                 db  50h ; P
.eh_frame_hdr:0000000000007A95                 db 0C2h
.eh_frame_hdr:0000000000007A96                 db 0FFh
.eh_frame_hdr:0000000000007A97                 db 0FFh
.eh_frame_hdr:0000000000007A98                 db 0DCh
.eh_frame_hdr:0000000000007A99                 db  0Ah
.eh_frame_hdr:0000000000007A9A                 db    0
.eh_frame_hdr:0000000000007A9B                 db    0
.eh_frame_hdr:0000000000007A9C                 db  70h ; p
.eh_frame_hdr:0000000000007A9D                 db 0C2h
.eh_frame_hdr:0000000000007A9E                 db 0FFh
.eh_frame_hdr:0000000000007A9F                 db 0FFh
.eh_frame_hdr:0000000000007AA0                 db 0F8h
.eh_frame_hdr:0000000000007AA1                 db  0Ah
.eh_frame_hdr:0000000000007AA2                 db    0
.eh_frame_hdr:0000000000007AA3                 db    0
.eh_frame_hdr:0000000000007AA4                 db  10h
.eh_frame_hdr:0000000000007AA5                 db 0C3h
.eh_frame_hdr:0000000000007AA6                 db 0FFh
.eh_frame_hdr:0000000000007AA7                 db 0FFh
.eh_frame_hdr:0000000000007AA8                 db  18h
.eh_frame_hdr:0000000000007AA9                 db  0Bh
.eh_frame_hdr:0000000000007AAA                 db    0
.eh_frame_hdr:0000000000007AAB                 db    0
.eh_frame_hdr:0000000000007AAC                 db    0
.eh_frame_hdr:0000000000007AAD                 db 0C4h
.eh_frame_hdr:0000000000007AAE                 db 0FFh
.eh_frame_hdr:0000000000007AAF                 db 0FFh
.eh_frame_hdr:0000000000007AB0                 db  5Ch ; \
.eh_frame_hdr:0000000000007AB1                 db  0Bh
.eh_frame_hdr:0000000000007AB2                 db    0
.eh_frame_hdr:0000000000007AB3                 db    0
.eh_frame_hdr:0000000000007AB4                 db  40h ; @
.eh_frame_hdr:0000000000007AB5                 db 0D6h
.eh_frame_hdr:0000000000007AB6                 db 0FFh
.eh_frame_hdr:0000000000007AB7                 db 0FFh
.eh_frame_hdr:0000000000007AB8                 db 0D4h
.eh_frame_hdr:0000000000007AB9                 db  0Bh
.eh_frame_hdr:0000000000007ABA                 db    0
.eh_frame_hdr:0000000000007ABB                 db    0
.eh_frame_hdr:0000000000007ABC                 db 0F0h
.eh_frame_hdr:0000000000007ABD                 db 0D7h
.eh_frame_hdr:0000000000007ABE                 db 0FFh
.eh_frame_hdr:0000000000007ABF                 db 0FFh
.eh_frame_hdr:0000000000007AC0                 db  40h ; @
.eh_frame_hdr:0000000000007AC1                 db  0Ch
.eh_frame_hdr:0000000000007AC2                 db    0
.eh_frame_hdr:0000000000007AC3                 db    0
.eh_frame_hdr:0000000000007AC4                 db  30h ; 0
.eh_frame_hdr:0000000000007AC5                 db 0D8h
.eh_frame_hdr:0000000000007AC6                 db 0FFh
.eh_frame_hdr:0000000000007AC7                 db 0FFh
.eh_frame_hdr:0000000000007AC8                 db  6Ch ; l
.eh_frame_hdr:0000000000007AC9                 db  0Ch
.eh_frame_hdr:0000000000007ACA                 db    0
.eh_frame_hdr:0000000000007ACB                 db    0
.eh_frame_hdr:0000000000007ACC                 db  50h ; P
.eh_frame_hdr:0000000000007ACD                 db 0D8h
.eh_frame_hdr:0000000000007ACE                 db 0FFh
.eh_frame_hdr:0000000000007ACF                 db 0FFh
.eh_frame_hdr:0000000000007AD0                 db  80h
.eh_frame_hdr:0000000000007AD1                 db  0Ch
.eh_frame_hdr:0000000000007AD2                 db    0
.eh_frame_hdr:0000000000007AD3                 db    0
.eh_frame_hdr:0000000000007AD4                 db  70h ; p
.eh_frame_hdr:0000000000007AD5                 db 0D8h
.eh_frame_hdr:0000000000007AD6                 db 0FFh
.eh_frame_hdr:0000000000007AD7                 db 0FFh
.eh_frame_hdr:0000000000007AD8                 db  94h
.eh_frame_hdr:0000000000007AD9                 db  0Ch
.eh_frame_hdr:0000000000007ADA                 db    0
.eh_frame_hdr:0000000000007ADB                 db    0
.eh_frame_hdr:0000000000007ADC                 db 0B0h
.eh_frame_hdr:0000000000007ADD                 db 0D8h
.eh_frame_hdr:0000000000007ADE                 db 0FFh
.eh_frame_hdr:0000000000007ADF                 db 0FFh
.eh_frame_hdr:0000000000007AE0                 db 0A8h
.eh_frame_hdr:0000000000007AE1                 db  0Ch
.eh_frame_hdr:0000000000007AE2                 db    0
.eh_frame_hdr:0000000000007AE3                 db    0
.eh_frame_hdr:0000000000007AE4                 db 0D0h
.eh_frame_hdr:0000000000007AE5                 db 0D8h
.eh_frame_hdr:0000000000007AE6                 db 0FFh
.eh_frame_hdr:0000000000007AE7                 db 0FFh
.eh_frame_hdr:0000000000007AE8                 db 0BCh
.eh_frame_hdr:0000000000007AE9                 db  0Ch
.eh_frame_hdr:0000000000007AEA                 db    0
.eh_frame_hdr:0000000000007AEB                 db    0
.eh_frame_hdr:0000000000007AEC                 db    0
.eh_frame_hdr:0000000000007AED                 db 0D9h
.eh_frame_hdr:0000000000007AEE                 db 0FFh
.eh_frame_hdr:0000000000007AEF                 db 0FFh
.eh_frame_hdr:0000000000007AF0                 db 0D0h
.eh_frame_hdr:0000000000007AF1                 db  0Ch
.eh_frame_hdr:0000000000007AF2                 db    0
.eh_frame_hdr:0000000000007AF3                 db    0
.eh_frame_hdr:0000000000007AF4                 db  80h
.eh_frame_hdr:0000000000007AF5                 db 0D9h
.eh_frame_hdr:0000000000007AF6                 db 0FFh
.eh_frame_hdr:0000000000007AF7                 db 0FFh
.eh_frame_hdr:0000000000007AF8                 db  24h ; $
.eh_frame_hdr:0000000000007AF9                 db  0Dh
.eh_frame_hdr:0000000000007AFA                 db    0
.eh_frame_hdr:0000000000007AFB                 db    0
.eh_frame_hdr:0000000000007AFC                 db  70h ; p
.eh_frame_hdr:0000000000007AFD                 db 0DAh
.eh_frame_hdr:0000000000007AFE                 db 0FFh
.eh_frame_hdr:0000000000007AFF                 db 0FFh
.eh_frame_hdr:0000000000007B00                 db  90h
.eh_frame_hdr:0000000000007B01                 db  0Dh
.eh_frame_hdr:0000000000007B02                 db    0
.eh_frame_hdr:0000000000007B03                 db    0
.eh_frame_hdr:0000000000007B04                 db  80h
.eh_frame_hdr:0000000000007B05                 db 0DAh
.eh_frame_hdr:0000000000007B06                 db 0FFh
.eh_frame_hdr:0000000000007B07                 db 0FFh
.eh_frame_hdr:0000000000007B08                 db 0A4h
.eh_frame_hdr:0000000000007B09                 db  0Dh
.eh_frame_hdr:0000000000007B0A                 db    0
.eh_frame_hdr:0000000000007B0B                 db    0
.eh_frame_hdr:0000000000007B0C                 db  20h
.eh_frame_hdr:0000000000007B0D                 db 0DBh
.eh_frame_hdr:0000000000007B0E                 db 0FFh
.eh_frame_hdr:0000000000007B0F                 db 0FFh
.eh_frame_hdr:0000000000007B10                 db 0D0h
.eh_frame_hdr:0000000000007B11                 db  0Dh
.eh_frame_hdr:0000000000007B12                 db    0
.eh_frame_hdr:0000000000007B13                 db    0
.eh_frame_hdr:0000000000007B14                 db  40h ; @
.eh_frame_hdr:0000000000007B15                 db 0DBh
.eh_frame_hdr:0000000000007B16                 db 0FFh
.eh_frame_hdr:0000000000007B17                 db 0FFh
.eh_frame_hdr:0000000000007B18                 db 0E4h
.eh_frame_hdr:0000000000007B19                 db  0Dh
.eh_frame_hdr:0000000000007B1A                 db    0
.eh_frame_hdr:0000000000007B1B                 db    0
.eh_frame_hdr:0000000000007B1C                 db  50h ; P
.eh_frame_hdr:0000000000007B1D                 db 0DBh
.eh_frame_hdr:0000000000007B1E                 db 0FFh
.eh_frame_hdr:0000000000007B1F                 db 0FFh
.eh_frame_hdr:0000000000007B20                 db 0F8h
.eh_frame_hdr:0000000000007B21                 db  0Dh
.eh_frame_hdr:0000000000007B22                 db    0
.eh_frame_hdr:0000000000007B23                 db    0
.eh_frame_hdr:0000000000007B24                 db  70h ; p
.eh_frame_hdr:0000000000007B25                 db 0DBh
.eh_frame_hdr:0000000000007B26                 db 0FFh
.eh_frame_hdr:0000000000007B27                 db 0FFh
.eh_frame_hdr:0000000000007B28                 db  0Ch
.eh_frame_hdr:0000000000007B29                 db  0Eh
.eh_frame_hdr:0000000000007B2A                 db    0
.eh_frame_hdr:0000000000007B2B                 db    0
.eh_frame_hdr:0000000000007B2C                 db  90h
.eh_frame_hdr:0000000000007B2D                 db 0DBh
.eh_frame_hdr:0000000000007B2E                 db 0FFh
.eh_frame_hdr:0000000000007B2F                 db 0FFh
.eh_frame_hdr:0000000000007B30                 db  20h
.eh_frame_hdr:0000000000007B31                 db  0Eh
.eh_frame_hdr:0000000000007B32                 db    0
.eh_frame_hdr:0000000000007B33                 db    0
.eh_frame_hdr:0000000000007B34                 db  20h
.eh_frame_hdr:0000000000007B35                 db 0DCh
.eh_frame_hdr:0000000000007B36                 db 0FFh
.eh_frame_hdr:0000000000007B37                 db 0FFh
.eh_frame_hdr:0000000000007B38                 db  3Ch ; <
.eh_frame_hdr:0000000000007B39                 db  0Eh
.eh_frame_hdr:0000000000007B3A                 db    0
.eh_frame_hdr:0000000000007B3B                 db    0
.eh_frame_hdr:0000000000007B3C                 db 0B0h
.eh_frame_hdr:0000000000007B3D                 db 0DCh
.eh_frame_hdr:0000000000007B3E                 db 0FFh
.eh_frame_hdr:0000000000007B3F                 db 0FFh
.eh_frame_hdr:0000000000007B40                 db  58h ; X
.eh_frame_hdr:0000000000007B41                 db  0Eh
.eh_frame_hdr:0000000000007B42                 db    0
.eh_frame_hdr:0000000000007B43                 db    0
.eh_frame_hdr:0000000000007B44                 db 0C0h
.eh_frame_hdr:0000000000007B45                 db 0DCh
.eh_frame_hdr:0000000000007B46                 db 0FFh
.eh_frame_hdr:0000000000007B47                 db 0FFh
.eh_frame_hdr:0000000000007B48                 db  6Ch ; l
.eh_frame_hdr:0000000000007B49                 db  0Eh
.eh_frame_hdr:0000000000007B4A                 db    0
.eh_frame_hdr:0000000000007B4B                 db    0
.eh_frame_hdr:0000000000007B4C                 db 0D0h
.eh_frame_hdr:0000000000007B4D                 db 0DCh
.eh_frame_hdr:0000000000007B4E                 db 0FFh
.eh_frame_hdr:0000000000007B4F                 db 0FFh
.eh_frame_hdr:0000000000007B50                 db  80h
.eh_frame_hdr:0000000000007B51                 db  0Eh
.eh_frame_hdr:0000000000007B52                 db    0
.eh_frame_hdr:0000000000007B53                 db    0
.eh_frame_hdr:0000000000007B54                 db  70h ; p
.eh_frame_hdr:0000000000007B55                 db 0DDh
.eh_frame_hdr:0000000000007B56                 db 0FFh
.eh_frame_hdr:0000000000007B57                 db 0FFh
.eh_frame_hdr:0000000000007B58                 db  9Ch
.eh_frame_hdr:0000000000007B59                 db  0Eh
.eh_frame_hdr:0000000000007B5A                 db    0
.eh_frame_hdr:0000000000007B5B                 db    0
.eh_frame_hdr:0000000000007B5C                 db  80h
.eh_frame_hdr:0000000000007B5D                 db 0DDh
.eh_frame_hdr:0000000000007B5E                 db 0FFh
.eh_frame_hdr:0000000000007B5F                 db 0FFh
.eh_frame_hdr:0000000000007B60                 db 0B0h
.eh_frame_hdr:0000000000007B61                 db  0Eh
.eh_frame_hdr:0000000000007B62                 db    0
.eh_frame_hdr:0000000000007B63                 db    0
.eh_frame_hdr:0000000000007B64                 db 0A0h
.eh_frame_hdr:0000000000007B65                 db 0DDh
.eh_frame_hdr:0000000000007B66                 db 0FFh
.eh_frame_hdr:0000000000007B67                 db 0FFh
.eh_frame_hdr:0000000000007B68                 db 0C4h
.eh_frame_hdr:0000000000007B69                 db  0Eh
.eh_frame_hdr:0000000000007B6A                 db    0
.eh_frame_hdr:0000000000007B6B                 db    0
.eh_frame_hdr:0000000000007B6C                 db 0B0h
.eh_frame_hdr:0000000000007B6D                 db 0DDh
.eh_frame_hdr:0000000000007B6E                 db 0FFh
.eh_frame_hdr:0000000000007B6F                 db 0FFh
.eh_frame_hdr:0000000000007B70                 db 0D8h
.eh_frame_hdr:0000000000007B71                 db  0Eh
.eh_frame_hdr:0000000000007B72                 db    0
.eh_frame_hdr:0000000000007B73                 db    0
.eh_frame_hdr:0000000000007B74                 db  40h ; @
.eh_frame_hdr:0000000000007B75                 db 0DEh
.eh_frame_hdr:0000000000007B76                 db 0FFh
.eh_frame_hdr:0000000000007B77                 db 0FFh
.eh_frame_hdr:0000000000007B78                 db 0F4h
.eh_frame_hdr:0000000000007B79                 db  0Eh
.eh_frame_hdr:0000000000007B7A                 db    0
.eh_frame_hdr:0000000000007B7B                 db    0
.eh_frame_hdr:0000000000007B7C                 db 0E0h
.eh_frame_hdr:0000000000007B7D                 db 0DEh
.eh_frame_hdr:0000000000007B7E                 db 0FFh
.eh_frame_hdr:0000000000007B7F                 db 0FFh
.eh_frame_hdr:0000000000007B80                 db  10h
.eh_frame_hdr:0000000000007B81                 db  0Fh
.eh_frame_hdr:0000000000007B82                 db    0
.eh_frame_hdr:0000000000007B83                 db    0
.eh_frame_hdr:0000000000007B84                 db 0F0h
.eh_frame_hdr:0000000000007B85                 db 0DEh
.eh_frame_hdr:0000000000007B86                 db 0FFh
.eh_frame_hdr:0000000000007B87                 db 0FFh
.eh_frame_hdr:0000000000007B88                 db  24h ; $
.eh_frame_hdr:0000000000007B89                 db  0Fh
.eh_frame_hdr:0000000000007B8A                 db    0
.eh_frame_hdr:0000000000007B8B                 db    0
.eh_frame_hdr:0000000000007B8C                 db  10h
.eh_frame_hdr:0000000000007B8D                 db 0DFh
.eh_frame_hdr:0000000000007B8E                 db 0FFh
.eh_frame_hdr:0000000000007B8F                 db 0FFh
.eh_frame_hdr:0000000000007B90                 db  38h ; 8
.eh_frame_hdr:0000000000007B91                 db  0Fh
.eh_frame_hdr:0000000000007B92                 db    0
.eh_frame_hdr:0000000000007B93                 db    0
.eh_frame_hdr:0000000000007B94                 db  30h ; 0
.eh_frame_hdr:0000000000007B95                 db 0DFh
.eh_frame_hdr:0000000000007B96                 db 0FFh
.eh_frame_hdr:0000000000007B97                 db 0FFh
.eh_frame_hdr:0000000000007B98                 db  4Ch ; L
.eh_frame_hdr:0000000000007B99                 db  0Fh
.eh_frame_hdr:0000000000007B9A                 db    0
.eh_frame_hdr:0000000000007B9B                 db    0
.eh_frame_hdr:0000000000007B9C                 db  40h ; @
.eh_frame_hdr:0000000000007B9D                 db 0DFh
.eh_frame_hdr:0000000000007B9E                 db 0FFh
.eh_frame_hdr:0000000000007B9F                 db 0FFh
.eh_frame_hdr:0000000000007BA0                 db  60h ; `
.eh_frame_hdr:0000000000007BA1                 db  0Fh
.eh_frame_hdr:0000000000007BA2                 db    0
.eh_frame_hdr:0000000000007BA3                 db    0
.eh_frame_hdr:0000000000007BA4                 db  60h ; `
.eh_frame_hdr:0000000000007BA5                 db 0DFh
.eh_frame_hdr:0000000000007BA6                 db 0FFh
.eh_frame_hdr:0000000000007BA7                 db 0FFh
.eh_frame_hdr:0000000000007BA8                 db  74h ; t
.eh_frame_hdr:0000000000007BA9                 db  0Fh
.eh_frame_hdr:0000000000007BAA                 db    0
.eh_frame_hdr:0000000000007BAB                 db    0
.eh_frame_hdr:0000000000007BAC                 db  80h
.eh_frame_hdr:0000000000007BAD                 db 0DFh
.eh_frame_hdr:0000000000007BAE                 db 0FFh
.eh_frame_hdr:0000000000007BAF                 db 0FFh
.eh_frame_hdr:0000000000007BB0                 db  88h
.eh_frame_hdr:0000000000007BB1                 db  0Fh
.eh_frame_hdr:0000000000007BB2                 db    0
.eh_frame_hdr:0000000000007BB3                 db    0
.eh_frame_hdr:0000000000007BB4                 db 0A0h
.eh_frame_hdr:0000000000007BB5                 db 0DFh
.eh_frame_hdr:0000000000007BB6                 db 0FFh
.eh_frame_hdr:0000000000007BB7                 db 0FFh
.eh_frame_hdr:0000000000007BB8                 db 0A0h
.eh_frame_hdr:0000000000007BB9                 db  0Fh
.eh_frame_hdr:0000000000007BBA                 db    0
.eh_frame_hdr:0000000000007BBB                 db    0
.eh_frame_hdr:0000000000007BBC                 db 0D0h
.eh_frame_hdr:0000000000007BBD                 db 0E0h
.eh_frame_hdr:0000000000007BBE                 db 0FFh
.eh_frame_hdr:0000000000007BBF                 db 0FFh
.eh_frame_hdr:0000000000007BC0                 db 0DCh
.eh_frame_hdr:0000000000007BC1                 db  0Fh
.eh_frame_hdr:0000000000007BC2                 db    0
.eh_frame_hdr:0000000000007BC3                 db    0
.eh_frame_hdr:0000000000007BC4                 db  70h ; p
.eh_frame_hdr:0000000000007BC5                 db 0E1h
.eh_frame_hdr:0000000000007BC6                 db 0FFh
.eh_frame_hdr:0000000000007BC7                 db 0FFh
.eh_frame_hdr:0000000000007BC8                 db  3Ch ; <
.eh_frame_hdr:0000000000007BC9                 db  10h
.eh_frame_hdr:0000000000007BCA                 db    0
.eh_frame_hdr:0000000000007BCB                 db    0
.eh_frame_hdr:0000000000007BCC                 db  90h
.eh_frame_hdr:0000000000007BCD                 db 0E1h
.eh_frame_hdr:0000000000007BCE                 db 0FFh
.eh_frame_hdr:0000000000007BCF                 db 0FFh
.eh_frame_hdr:0000000000007BD0                 db  50h ; P
.eh_frame_hdr:0000000000007BD1                 db  10h
.eh_frame_hdr:0000000000007BD2                 db    0
.eh_frame_hdr:0000000000007BD3                 db    0
.eh_frame_hdr:0000000000007BD4                 db 0B0h
.eh_frame_hdr:0000000000007BD5                 db 0E5h
.eh_frame_hdr:0000000000007BD6                 db 0FFh
.eh_frame_hdr:0000000000007BD7                 db 0FFh
.eh_frame_hdr:0000000000007BD8                 db  64h ; d
.eh_frame_hdr:0000000000007BD9                 db  11h
.eh_frame_hdr:0000000000007BDA                 db    0
.eh_frame_hdr:0000000000007BDB                 db    0
.eh_frame_hdr:0000000000007BDC                 db 0D0h
.eh_frame_hdr:0000000000007BDD                 db 0E5h
.eh_frame_hdr:0000000000007BDE                 db 0FFh
.eh_frame_hdr:0000000000007BDF                 db 0FFh
.eh_frame_hdr:0000000000007BE0                 db  78h ; x
.eh_frame_hdr:0000000000007BE1                 db  11h
.eh_frame_hdr:0000000000007BE2                 db    0
.eh_frame_hdr:0000000000007BE3                 db    0
.eh_frame_hdr:0000000000007BE4                 db  50h ; P
.eh_frame_hdr:0000000000007BE5                 db 0E6h
.eh_frame_hdr:0000000000007BE6                 db 0FFh
.eh_frame_hdr:0000000000007BE7                 db 0FFh
.eh_frame_hdr:0000000000007BE8                 db  94h
.eh_frame_hdr:0000000000007BE9                 db  11h
.eh_frame_hdr:0000000000007BEA                 db    0
.eh_frame_hdr:0000000000007BEB                 db    0
.eh_frame_hdr:0000000000007BEC                 db  30h ; 0
.eh_frame_hdr:0000000000007BED                 db 0E7h
.eh_frame_hdr:0000000000007BEE                 db 0FFh
.eh_frame_hdr:0000000000007BEF                 db 0FFh
.eh_frame_hdr:0000000000007BF0                 db 0C0h
.eh_frame_hdr:0000000000007BF1                 db  11h
.eh_frame_hdr:0000000000007BF2                 db    0
.eh_frame_hdr:0000000000007BF3                 db    0
.eh_frame_hdr:0000000000007BF4                 db 0B0h
.eh_frame_hdr:0000000000007BF5                 db 0E7h
.eh_frame_hdr:0000000000007BF6                 db 0FFh
.eh_frame_hdr:0000000000007BF7                 db 0FFh
.eh_frame_hdr:0000000000007BF8                 db 0E0h
.eh_frame_hdr:0000000000007BF9                 db  11h
.eh_frame_hdr:0000000000007BFA                 db    0
.eh_frame_hdr:0000000000007BFB                 db    0
.eh_frame_hdr:0000000000007BFC                 db 0D0h
.eh_frame_hdr:0000000000007BFD                 db 0E7h
.eh_frame_hdr:0000000000007BFE                 db 0FFh
.eh_frame_hdr:0000000000007BFF                 db 0FFh
.eh_frame_hdr:0000000000007C00                 db 0FCh
.eh_frame_hdr:0000000000007C01                 db  11h
.eh_frame_hdr:0000000000007C02                 db    0
.eh_frame_hdr:0000000000007C03                 db    0
.eh_frame_hdr:0000000000007C04                 db    0
.eh_frame_hdr:0000000000007C05                 db 0E8h
.eh_frame_hdr:0000000000007C06                 db 0FFh
.eh_frame_hdr:0000000000007C07                 db 0FFh
.eh_frame_hdr:0000000000007C08                 db  10h
.eh_frame_hdr:0000000000007C09                 db  12h
.eh_frame_hdr:0000000000007C0A                 db    0
.eh_frame_hdr:0000000000007C0B                 db    0
.eh_frame_hdr:0000000000007C0C                 db  10h
.eh_frame_hdr:0000000000007C0D                 db 0E8h
.eh_frame_hdr:0000000000007C0E                 db 0FFh
.eh_frame_hdr:0000000000007C0F                 db 0FFh
.eh_frame_hdr:0000000000007C10                 db  24h ; $
.eh_frame_hdr:0000000000007C11                 db  12h
.eh_frame_hdr:0000000000007C12                 db    0
.eh_frame_hdr:0000000000007C13                 db    0
.eh_frame_hdr:0000000000007C14                 db  50h ; P
.eh_frame_hdr:0000000000007C15                 db 0E8h
.eh_frame_hdr:0000000000007C16                 db 0FFh
.eh_frame_hdr:0000000000007C17                 db 0FFh
.eh_frame_hdr:0000000000007C18                 db  48h ; H
.eh_frame_hdr:0000000000007C19                 db  12h
.eh_frame_hdr:0000000000007C1A                 db    0
.eh_frame_hdr:0000000000007C1B                 db    0
.eh_frame_hdr:0000000000007C1C                 db  80h
.eh_frame_hdr:0000000000007C1D                 db 0E8h
.eh_frame_hdr:0000000000007C1E                 db 0FFh
.eh_frame_hdr:0000000000007C1F                 db 0FFh
.eh_frame_hdr:0000000000007C20                 db  5Ch ; \
.eh_frame_hdr:0000000000007C21                 db  12h
.eh_frame_hdr:0000000000007C22                 db    0
.eh_frame_hdr:0000000000007C23                 db    0
.eh_frame_hdr:0000000000007C24                 db  10h
.eh_frame_hdr:0000000000007C25                 db 0E9h
.eh_frame_hdr:0000000000007C26                 db 0FFh
.eh_frame_hdr:0000000000007C27                 db 0FFh
.eh_frame_hdr:0000000000007C28                 db  74h ; t
.eh_frame_hdr:0000000000007C29                 db  12h
.eh_frame_hdr:0000000000007C2A                 db    0
.eh_frame_hdr:0000000000007C2B                 db    0
.eh_frame_hdr:0000000000007C2C                 db  60h ; `
.eh_frame_hdr:0000000000007C2D                 db 0E9h
.eh_frame_hdr:0000000000007C2E                 db 0FFh
.eh_frame_hdr:0000000000007C2F                 db 0FFh
.eh_frame_hdr:0000000000007C30                 db  8Ch
.eh_frame_hdr:0000000000007C31                 db  12h
.eh_frame_hdr:0000000000007C32                 db    0
.eh_frame_hdr:0000000000007C33                 db    0
.eh_frame_hdr:0000000000007C34                 db  80h
.eh_frame_hdr:0000000000007C35                 db 0E9h
.eh_frame_hdr:0000000000007C36                 db 0FFh
.eh_frame_hdr:0000000000007C37                 db 0FFh
.eh_frame_hdr:0000000000007C38                 db 0A8h
.eh_frame_hdr:0000000000007C39                 db  12h
.eh_frame_hdr:0000000000007C3A                 db    0
.eh_frame_hdr:0000000000007C3B                 db    0
.eh_frame_hdr:0000000000007C3C                 db 0B0h
.eh_frame_hdr:0000000000007C3D                 db 0E9h
.eh_frame_hdr:0000000000007C3E                 db 0FFh
.eh_frame_hdr:0000000000007C3F                 db 0FFh
.eh_frame_hdr:0000000000007C40                 db 0C4h
.eh_frame_hdr:0000000000007C41                 db  12h
.eh_frame_hdr:0000000000007C42                 db    0
.eh_frame_hdr:0000000000007C43                 db    0
.eh_frame_hdr:0000000000007C44                 db 0E0h
.eh_frame_hdr:0000000000007C45                 db 0E9h
.eh_frame_hdr:0000000000007C46                 db 0FFh
.eh_frame_hdr:0000000000007C47                 db 0FFh
.eh_frame_hdr:0000000000007C48                 db 0ECh
.eh_frame_hdr:0000000000007C49                 db  12h
.eh_frame_hdr:0000000000007C4A                 db    0
.eh_frame_hdr:0000000000007C4B                 db    0
.eh_frame_hdr:0000000000007C4C                 db    0
.eh_frame_hdr:0000000000007C4D                 db 0EAh
.eh_frame_hdr:0000000000007C4E                 db 0FFh
.eh_frame_hdr:0000000000007C4F                 db 0FFh
.eh_frame_hdr:0000000000007C50                 db    8
.eh_frame_hdr:0000000000007C51                 db  13h
.eh_frame_hdr:0000000000007C52                 db    0
.eh_frame_hdr:0000000000007C53                 db    0
.eh_frame_hdr:0000000000007C54                 db  40h ; @
.eh_frame_hdr:0000000000007C55                 db 0EAh
.eh_frame_hdr:0000000000007C56                 db 0FFh
.eh_frame_hdr:0000000000007C57                 db 0FFh
.eh_frame_hdr:0000000000007C58                 db  20h
.eh_frame_hdr:0000000000007C59                 db  13h
.eh_frame_hdr:0000000000007C5A                 db    0
.eh_frame_hdr:0000000000007C5B                 db    0
.eh_frame_hdr:0000000000007C5C                 db  70h ; p
.eh_frame_hdr:0000000000007C5D                 db 0EAh
.eh_frame_hdr:0000000000007C5E                 db 0FFh
.eh_frame_hdr:0000000000007C5F                 db 0FFh
.eh_frame_hdr:0000000000007C60                 db  40h ; @
.eh_frame_hdr:0000000000007C61                 db  13h
.eh_frame_hdr:0000000000007C62                 db    0
.eh_frame_hdr:0000000000007C63                 db    0
.eh_frame_hdr:0000000000007C64                 db    0
.eh_frame_hdr:0000000000007C65                 db 0EBh
.eh_frame_hdr:0000000000007C66                 db 0FFh
.eh_frame_hdr:0000000000007C67                 db 0FFh
.eh_frame_hdr:0000000000007C68                 db  80h
.eh_frame_hdr:0000000000007C69                 db  13h
.eh_frame_hdr:0000000000007C6A                 db    0
.eh_frame_hdr:0000000000007C6B                 db    0
.eh_frame_hdr:0000000000007C6C                 db  80h
.eh_frame_hdr:0000000000007C6D                 db 0EBh
.eh_frame_hdr:0000000000007C6E                 db 0FFh
.eh_frame_hdr:0000000000007C6F                 db 0FFh
.eh_frame_hdr:0000000000007C70                 db 0D0h
.eh_frame_hdr:0000000000007C71                 db  13h
.eh_frame_hdr:0000000000007C72                 db    0
.eh_frame_hdr:0000000000007C73                 db    0
.eh_frame_hdr:0000000000007C74                 db 0A0h
.eh_frame_hdr:0000000000007C75                 db 0EBh
.eh_frame_hdr:0000000000007C76                 db 0FFh
.eh_frame_hdr:0000000000007C77                 db 0FFh
.eh_frame_hdr:0000000000007C78                 db 0F0h
.eh_frame_hdr:0000000000007C79                 db  13h
.eh_frame_hdr:0000000000007C7A                 db    0
.eh_frame_hdr:0000000000007C7B                 db    0
.eh_frame_hdr:0000000000007C7C                 db    0
.eh_frame_hdr:0000000000007C7D                 db 0ECh
.eh_frame_hdr:0000000000007C7E                 db 0FFh
.eh_frame_hdr:0000000000007C7F                 db 0FFh
.eh_frame_hdr:0000000000007C80                 db  24h ; $
.eh_frame_hdr:0000000000007C81                 db  14h
.eh_frame_hdr:0000000000007C82                 db    0
.eh_frame_hdr:0000000000007C83                 db    0
.eh_frame_hdr:0000000000007C84                 db  60h ; `
.eh_frame_hdr:0000000000007C85                 db 0ECh
.eh_frame_hdr:0000000000007C86                 db 0FFh
.eh_frame_hdr:0000000000007C87                 db 0FFh
.eh_frame_hdr:0000000000007C88                 db  50h ; P
.eh_frame_hdr:0000000000007C89                 db  14h
.eh_frame_hdr:0000000000007C8A                 db    0
.eh_frame_hdr:0000000000007C8B                 db    0
.eh_frame_hdr:0000000000007C8C                 db 0C0h
.eh_frame_hdr:0000000000007C8D                 db 0ECh
.eh_frame_hdr:0000000000007C8E                 db 0FFh
.eh_frame_hdr:0000000000007C8F                 db 0FFh
.eh_frame_hdr:0000000000007C90                 db  64h ; d
.eh_frame_hdr:0000000000007C91                 db  14h
.eh_frame_hdr:0000000000007C92                 db    0
.eh_frame_hdr:0000000000007C93                 db    0
.eh_frame_hdr:0000000000007C94                 db  10h
.eh_frame_hdr:0000000000007C95                 db 0EDh
.eh_frame_hdr:0000000000007C96                 db 0FFh
.eh_frame_hdr:0000000000007C97                 db 0FFh
.eh_frame_hdr:0000000000007C98                 db  90h
.eh_frame_hdr:0000000000007C99                 db  14h
.eh_frame_hdr:0000000000007C9A                 db    0
.eh_frame_hdr:0000000000007C9B                 db    0
.eh_frame_hdr:0000000000007C9C                 db  70h ; p
.eh_frame_hdr:0000000000007C9D                 db 0EDh
.eh_frame_hdr:0000000000007C9E                 db 0FFh
.eh_frame_hdr:0000000000007C9F                 db 0FFh
.eh_frame_hdr:0000000000007CA0                 db 0B0h
.eh_frame_hdr:0000000000007CA1                 db  14h
.eh_frame_hdr:0000000000007CA2                 db    0
.eh_frame_hdr:0000000000007CA3                 db    0
.eh_frame_hdr:0000000000007CA4                 db 0B0h
.eh_frame_hdr:0000000000007CA5                 db 0EDh
.eh_frame_hdr:0000000000007CA6                 db 0FFh
.eh_frame_hdr:0000000000007CA7                 db 0FFh
.eh_frame_hdr:0000000000007CA8                 db 0C8h
.eh_frame_hdr:0000000000007CA9                 db  14h
.eh_frame_hdr:0000000000007CAA                 db    0
.eh_frame_hdr:0000000000007CAB                 db    0
.eh_frame_hdr:0000000000007CAC                 db 0F0h
.eh_frame_hdr:0000000000007CAD                 db 0EDh
.eh_frame_hdr:0000000000007CAE                 db 0FFh
.eh_frame_hdr:0000000000007CAF                 db 0FFh
.eh_frame_hdr:0000000000007CB0                 db 0E8h
.eh_frame_hdr:0000000000007CB1                 db  14h
.eh_frame_hdr:0000000000007CB2                 db    0
.eh_frame_hdr:0000000000007CB3                 db    0
.eh_frame_hdr:0000000000007CB4                 db  70h ; p
.eh_frame_hdr:0000000000007CB5                 db 0EEh
.eh_frame_hdr:0000000000007CB6                 db 0FFh
.eh_frame_hdr:0000000000007CB7                 db 0FFh
.eh_frame_hdr:0000000000007CB8                 db  20h
.eh_frame_hdr:0000000000007CB9                 db  15h
.eh_frame_hdr:0000000000007CBA                 db    0
.eh_frame_hdr:0000000000007CBB                 db    0
.eh_frame_hdr:0000000000007CBC                 db 0B0h
.eh_frame_hdr:0000000000007CBD                 db 0EEh
.eh_frame_hdr:0000000000007CBE                 db 0FFh
.eh_frame_hdr:0000000000007CBF                 db 0FFh
.eh_frame_hdr:0000000000007CC0                 db  40h ; @
.eh_frame_hdr:0000000000007CC1                 db  15h
.eh_frame_hdr:0000000000007CC2                 db    0
.eh_frame_hdr:0000000000007CC3                 db    0
.eh_frame_hdr:0000000000007CC4                 db  10h
.eh_frame_hdr:0000000000007CC5                 db 0EFh
.eh_frame_hdr:0000000000007CC6                 db 0FFh
.eh_frame_hdr:0000000000007CC7                 db 0FFh
.eh_frame_hdr:0000000000007CC8                 db  70h ; p
.eh_frame_hdr:0000000000007CC9                 db  15h
.eh_frame_hdr:0000000000007CCA                 db    0
.eh_frame_hdr:0000000000007CCB                 db    0
.eh_frame_hdr:0000000000007CCC                 db  80h
.eh_frame_hdr:0000000000007CCD                 db 0EFh
.eh_frame_hdr:0000000000007CCE                 db 0FFh
.eh_frame_hdr:0000000000007CCF                 db 0FFh
.eh_frame_hdr:0000000000007CD0                 db 0B8h
.eh_frame_hdr:0000000000007CD1                 db  15h
.eh_frame_hdr:0000000000007CD2                 db    0
.eh_frame_hdr:0000000000007CD3                 db    0
.eh_frame_hdr:0000000000007CD4                 db  90h
.eh_frame_hdr:0000000000007CD5                 db 0EFh
.eh_frame_hdr:0000000000007CD6                 db 0FFh
.eh_frame_hdr:0000000000007CD7                 db 0FFh
.eh_frame_hdr:0000000000007CD8                 db 0D0h
.eh_frame_hdr:0000000000007CD9                 db  15h
.eh_frame_hdr:0000000000007CDA                 db    0
.eh_frame_hdr:0000000000007CDB                 db    0
.eh_frame_hdr:0000000000007CDB _eh_frame_hdr   ends
.eh_frame_hdr:0000000000007CDB
LOAD:0000000000007CDC ; ===========================================================================
LOAD:0000000000007CDC
LOAD:0000000000007CDC ; Segment type: Pure code
LOAD:0000000000007CDC ; Segment permissions: Read/Execute
LOAD:0000000000007CDC LOAD            segment byte public 'CODE' use64
LOAD:0000000000007CDC                 assume cs:LOAD
LOAD:0000000000007CDC                 ;org 7CDCh
LOAD:0000000000007CDC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000007CDC                 align 20h
LOAD:0000000000007CDC LOAD            ends
LOAD:0000000000007CDC
.eh_frame:0000000000007CE0 ; ===========================================================================
.eh_frame:0000000000007CE0
.eh_frame:0000000000007CE0 ; Segment type: Pure data
.eh_frame:0000000000007CE0 ; Segment permissions: Read
.eh_frame:0000000000007CE0 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000007CE0                 assume cs:_eh_frame
.eh_frame:0000000000007CE0                 ;org 7CE0h
.eh_frame:0000000000007CE0                 db  14h
.eh_frame:0000000000007CE1                 db    0
.eh_frame:0000000000007CE2                 db    0
.eh_frame:0000000000007CE3                 db    0
.eh_frame:0000000000007CE4                 db    0
.eh_frame:0000000000007CE5                 db    0
.eh_frame:0000000000007CE6                 db    0
.eh_frame:0000000000007CE7                 db    0
.eh_frame:0000000000007CE8                 db    1
.eh_frame:0000000000007CE9                 db  7Ah ; z
.eh_frame:0000000000007CEA                 db  52h ; R
.eh_frame:0000000000007CEB                 db    0
.eh_frame:0000000000007CEC                 db    1
.eh_frame:0000000000007CED                 db  78h ; x
.eh_frame:0000000000007CEE                 db  10h
.eh_frame:0000000000007CEF                 db    1
.eh_frame:0000000000007CF0                 db  1Bh
.eh_frame:0000000000007CF1                 db  0Ch
.eh_frame:0000000000007CF2                 db    7
.eh_frame:0000000000007CF3                 db    8
.eh_frame:0000000000007CF4                 db  90h
.eh_frame:0000000000007CF5                 db    1
.eh_frame:0000000000007CF6                 db    7
.eh_frame:0000000000007CF7                 db  10h
.eh_frame:0000000000007CF8                 db  14h
.eh_frame:0000000000007CF9                 db    0
.eh_frame:0000000000007CFA                 db    0
.eh_frame:0000000000007CFB                 db    0
.eh_frame:0000000000007CFC                 db  1Ch
.eh_frame:0000000000007CFD                 db    0
.eh_frame:0000000000007CFE                 db    0
.eh_frame:0000000000007CFF                 db    0
.eh_frame:0000000000007D00                 db  60h ; `
.eh_frame:0000000000007D01                 db  9Dh
.eh_frame:0000000000007D02                 db 0FFh
.eh_frame:0000000000007D03                 db 0FFh
.eh_frame:0000000000007D04                 db  2Bh ; +
.eh_frame:0000000000007D05                 db    0
.eh_frame:0000000000007D06                 db    0
.eh_frame:0000000000007D07                 db    0
.eh_frame:0000000000007D08                 db    0
.eh_frame:0000000000007D09                 db    0
.eh_frame:0000000000007D0A                 db    0
.eh_frame:0000000000007D0B                 db    0
.eh_frame:0000000000007D0C                 db    0
.eh_frame:0000000000007D0D                 db    0
.eh_frame:0000000000007D0E                 db    0
.eh_frame:0000000000007D0F                 db    0
.eh_frame:0000000000007D10                 db  14h
.eh_frame:0000000000007D11                 db    0
.eh_frame:0000000000007D12                 db    0
.eh_frame:0000000000007D13                 db    0
.eh_frame:0000000000007D14                 db    0
.eh_frame:0000000000007D15                 db    0
.eh_frame:0000000000007D16                 db    0
.eh_frame:0000000000007D17                 db    0
.eh_frame:0000000000007D18                 db    1
.eh_frame:0000000000007D19                 db  7Ah ; z
.eh_frame:0000000000007D1A                 db  52h ; R
.eh_frame:0000000000007D1B                 db    0
.eh_frame:0000000000007D1C                 db    1
.eh_frame:0000000000007D1D                 db  78h ; x
.eh_frame:0000000000007D1E                 db  10h
.eh_frame:0000000000007D1F                 db    1
.eh_frame:0000000000007D20                 db  1Bh
.eh_frame:0000000000007D21                 db  0Ch
.eh_frame:0000000000007D22                 db    7
.eh_frame:0000000000007D23                 db    8
.eh_frame:0000000000007D24                 db  90h
.eh_frame:0000000000007D25                 db    1
.eh_frame:0000000000007D26                 db    0
.eh_frame:0000000000007D27                 db    0
.eh_frame:0000000000007D28                 db  24h ; $
.eh_frame:0000000000007D29                 db    0
.eh_frame:0000000000007D2A                 db    0
.eh_frame:0000000000007D2B                 db    0
.eh_frame:0000000000007D2C                 db  1Ch
.eh_frame:0000000000007D2D                 db    0
.eh_frame:0000000000007D2E                 db    0
.eh_frame:0000000000007D2F                 db    0
.eh_frame:0000000000007D30                 db    0
.eh_frame:0000000000007D31                 db  97h
.eh_frame:0000000000007D32                 db 0FFh
.eh_frame:0000000000007D33                 db 0FFh
.eh_frame:0000000000007D34                 db  10h
.eh_frame:0000000000007D35                 db    3
.eh_frame:0000000000007D36                 db    0
.eh_frame:0000000000007D37                 db    0
.eh_frame:0000000000007D38                 db    0
.eh_frame:0000000000007D39                 db  0Eh
.eh_frame:0000000000007D3A                 db  10h
.eh_frame:0000000000007D3B                 db  46h ; F
.eh_frame:0000000000007D3C                 db  0Eh
.eh_frame:0000000000007D3D                 db  18h
.eh_frame:0000000000007D3E                 db  4Ah ; J
.eh_frame:0000000000007D3F                 db  0Fh
.eh_frame:0000000000007D40                 db  0Bh
.eh_frame:0000000000007D41                 db  77h ; w
.eh_frame:0000000000007D42                 db    8
.eh_frame:0000000000007D43                 db  80h
.eh_frame:0000000000007D44                 db    0
.eh_frame:0000000000007D45                 db  3Fh ; ?
.eh_frame:0000000000007D46                 db  1Ah
.eh_frame:0000000000007D47                 db  3Bh ; ;
.eh_frame:0000000000007D48                 db  2Ah ; *
.eh_frame:0000000000007D49                 db  33h ; 3
.eh_frame:0000000000007D4A                 db  24h ; $
.eh_frame:0000000000007D4B                 db  22h ; "
.eh_frame:0000000000007D4C                 db    0
.eh_frame:0000000000007D4D                 db    0
.eh_frame:0000000000007D4E                 db    0
.eh_frame:0000000000007D4F                 db    0
.eh_frame:0000000000007D50                 db  14h
.eh_frame:0000000000007D51                 db    0
.eh_frame:0000000000007D52                 db    0
.eh_frame:0000000000007D53                 db    0
.eh_frame:0000000000007D54                 db  44h ; D
.eh_frame:0000000000007D55                 db    0
.eh_frame:0000000000007D56                 db    0
.eh_frame:0000000000007D57                 db    0
.eh_frame:0000000000007D58                 db 0E8h
.eh_frame:0000000000007D59                 db  99h
.eh_frame:0000000000007D5A                 db 0FFh
.eh_frame:0000000000007D5B                 db 0FFh
.eh_frame:0000000000007D5C                 db    8
.eh_frame:0000000000007D5D                 db    0
.eh_frame:0000000000007D5E                 db    0
.eh_frame:0000000000007D5F                 db    0
.eh_frame:0000000000007D60                 db    0
.eh_frame:0000000000007D61                 db    0
.eh_frame:0000000000007D62                 db    0
.eh_frame:0000000000007D63                 db    0
.eh_frame:0000000000007D64                 db    0
.eh_frame:0000000000007D65                 db    0
.eh_frame:0000000000007D66                 db    0
.eh_frame:0000000000007D67                 db    0
.eh_frame:0000000000007D68                 db  28h ; (
.eh_frame:0000000000007D69                 db    0
.eh_frame:0000000000007D6A                 db    0
.eh_frame:0000000000007D6B                 db    0
.eh_frame:0000000000007D6C                 db  5Ch ; \
.eh_frame:0000000000007D6D                 db    0
.eh_frame:0000000000007D6E                 db    0
.eh_frame:0000000000007D6F                 db    0
.eh_frame:0000000000007D70                 db    0
.eh_frame:0000000000007D71                 db  9Eh
.eh_frame:0000000000007D72                 db 0FFh
.eh_frame:0000000000007D73                 db 0FFh
.eh_frame:0000000000007D74                 db  8Ah
.eh_frame:0000000000007D75                 db    3
.eh_frame:0000000000007D76                 db    0
.eh_frame:0000000000007D77                 db    0
.eh_frame:0000000000007D78                 db    0
.eh_frame:0000000000007D79                 db  42h ; B
.eh_frame:0000000000007D7A                 db  0Eh
.eh_frame:0000000000007D7B                 db  10h
.eh_frame:0000000000007D7C                 db  8Dh
.eh_frame:0000000000007D7D                 db    2
.eh_frame:0000000000007D7E                 db  42h ; B
.eh_frame:0000000000007D7F                 db  0Eh
.eh_frame:0000000000007D80                 db  18h
.eh_frame:0000000000007D81                 db  8Ch
.eh_frame:0000000000007D82                 db    3
.eh_frame:0000000000007D83                 db  46h ; F
.eh_frame:0000000000007D84                 db  0Eh
.eh_frame:0000000000007D85                 db  20h
.eh_frame:0000000000007D86                 db  86h
.eh_frame:0000000000007D87                 db    4
.eh_frame:0000000000007D88                 db  41h ; A
.eh_frame:0000000000007D89                 db  0Eh
.eh_frame:0000000000007D8A                 db  28h ; (
.eh_frame:0000000000007D8B                 db  83h
.eh_frame:0000000000007D8C                 db    5
.eh_frame:0000000000007D8D                 db  49h ; I
.eh_frame:0000000000007D8E                 db  0Eh
.eh_frame:0000000000007D8F                 db 0B0h
.eh_frame:0000000000007D90                 db    1
.eh_frame:0000000000007D91                 db    0
.eh_frame:0000000000007D92                 db    0
.eh_frame:0000000000007D93                 db    0
.eh_frame:0000000000007D94                 db  48h ; H
.eh_frame:0000000000007D95                 db    0
.eh_frame:0000000000007D96                 db    0
.eh_frame:0000000000007D97                 db    0
.eh_frame:0000000000007D98                 db  88h
.eh_frame:0000000000007D99                 db    0
.eh_frame:0000000000007D9A                 db    0
.eh_frame:0000000000007D9B                 db    0
.eh_frame:0000000000007D9C                 db 0B4h
.eh_frame:0000000000007D9D                 db  99h
.eh_frame:0000000000007D9E                 db 0FFh
.eh_frame:0000000000007D9F                 db 0FFh
.eh_frame:0000000000007DA0                 db    6
.eh_frame:0000000000007DA1                 db    3
.eh_frame:0000000000007DA2                 db    0
.eh_frame:0000000000007DA3                 db    0
.eh_frame:0000000000007DA4                 db    0
.eh_frame:0000000000007DA5                 db  42h ; B
.eh_frame:0000000000007DA6                 db  0Eh
.eh_frame:0000000000007DA7                 db  10h
.eh_frame:0000000000007DA8                 db  8Fh
.eh_frame:0000000000007DA9                 db    2
.eh_frame:0000000000007DAA                 db  42h ; B
.eh_frame:0000000000007DAB                 db  0Eh
.eh_frame:0000000000007DAC                 db  18h
.eh_frame:0000000000007DAD                 db  8Eh
.eh_frame:0000000000007DAE                 db    3
.eh_frame:0000000000007DAF                 db  42h ; B
.eh_frame:0000000000007DB0                 db  0Eh
.eh_frame:0000000000007DB1                 db  20h
.eh_frame:0000000000007DB2                 db  8Dh
.eh_frame:0000000000007DB3                 db    4
.eh_frame:0000000000007DB4                 db  42h ; B
.eh_frame:0000000000007DB5                 db  0Eh
.eh_frame:0000000000007DB6                 db  28h ; (
.eh_frame:0000000000007DB7                 db  8Ch
.eh_frame:0000000000007DB8                 db    5
.eh_frame:0000000000007DB9                 db  44h ; D
.eh_frame:0000000000007DBA                 db  0Eh
.eh_frame:0000000000007DBB                 db  30h ; 0
.eh_frame:0000000000007DBC                 db  86h
.eh_frame:0000000000007DBD                 db    6
.eh_frame:0000000000007DBE                 db  41h ; A
.eh_frame:0000000000007DBF                 db  0Eh
.eh_frame:0000000000007DC0                 db  38h ; 8
.eh_frame:0000000000007DC1                 db  83h
.eh_frame:0000000000007DC2                 db    7
.eh_frame:0000000000007DC3                 db  4Fh ; O
.eh_frame:0000000000007DC4                 db  0Eh
.eh_frame:0000000000007DC5                 db  50h ; P
.eh_frame:0000000000007DC6                 db    3
.eh_frame:0000000000007DC7                 db  70h ; p
.eh_frame:0000000000007DC8                 db    2
.eh_frame:0000000000007DC9                 db  0Ah
.eh_frame:0000000000007DCA                 db  0Eh
.eh_frame:0000000000007DCB                 db  38h ; 8
.eh_frame:0000000000007DCC                 db  44h ; D
.eh_frame:0000000000007DCD                 db  0Eh
.eh_frame:0000000000007DCE                 db  30h ; 0
.eh_frame:0000000000007DCF                 db  41h ; A
.eh_frame:0000000000007DD0                 db  0Eh
.eh_frame:0000000000007DD1                 db  28h ; (
.eh_frame:0000000000007DD2                 db  42h ; B
.eh_frame:0000000000007DD3                 db  0Eh
.eh_frame:0000000000007DD4                 db  20h
.eh_frame:0000000000007DD5                 db  42h ; B
.eh_frame:0000000000007DD6                 db  0Eh
.eh_frame:0000000000007DD7                 db  18h
.eh_frame:0000000000007DD8                 db  42h ; B
.eh_frame:0000000000007DD9                 db  0Eh
.eh_frame:0000000000007DDA                 db  10h
.eh_frame:0000000000007DDB                 db  42h ; B
.eh_frame:0000000000007DDC                 db  0Eh
.eh_frame:0000000000007DDD                 db    8
.eh_frame:0000000000007DDE                 db  41h ; A
.eh_frame:0000000000007DDF                 db  0Bh
.eh_frame:0000000000007DE0                 db  4Ch ; L
.eh_frame:0000000000007DE1                 db    0
.eh_frame:0000000000007DE2                 db    0
.eh_frame:0000000000007DE3                 db    0
.eh_frame:0000000000007DE4                 db 0D4h
.eh_frame:0000000000007DE5                 db    0
.eh_frame:0000000000007DE6                 db    0
.eh_frame:0000000000007DE7                 db    0
.eh_frame:0000000000007DE8                 db  18h
.eh_frame:0000000000007DE9                 db 0A1h
.eh_frame:0000000000007DEA                 db 0FFh
.eh_frame:0000000000007DEB                 db 0FFh
.eh_frame:0000000000007DEC                 db 0EFh
.eh_frame:0000000000007DED                 db    0
.eh_frame:0000000000007DEE                 db    0
.eh_frame:0000000000007DEF                 db    0
.eh_frame:0000000000007DF0                 db    0
.eh_frame:0000000000007DF1                 db  42h ; B
.eh_frame:0000000000007DF2                 db  0Eh
.eh_frame:0000000000007DF3                 db  10h
.eh_frame:0000000000007DF4                 db  8Fh
.eh_frame:0000000000007DF5                 db    2
.eh_frame:0000000000007DF6                 db  42h ; B
.eh_frame:0000000000007DF7                 db  0Eh
.eh_frame:0000000000007DF8                 db  18h
.eh_frame:0000000000007DF9                 db  8Eh
.eh_frame:0000000000007DFA                 db    3
.eh_frame:0000000000007DFB                 db  47h ; G
.eh_frame:0000000000007DFC                 db  0Eh
.eh_frame:0000000000007DFD                 db  20h
.eh_frame:0000000000007DFE                 db  8Dh
.eh_frame:0000000000007DFF                 db    4
.eh_frame:0000000000007E00                 db  42h ; B
.eh_frame:0000000000007E01                 db  0Eh
.eh_frame:0000000000007E02                 db  28h ; (
.eh_frame:0000000000007E03                 db  8Ch
.eh_frame:0000000000007E04                 db    5
.eh_frame:0000000000007E05                 db  44h ; D
.eh_frame:0000000000007E06                 db  0Eh
.eh_frame:0000000000007E07                 db  30h ; 0
.eh_frame:0000000000007E08                 db  86h
.eh_frame:0000000000007E09                 db    6
.eh_frame:0000000000007E0A                 db  41h ; A
.eh_frame:0000000000007E0B                 db  0Eh
.eh_frame:0000000000007E0C                 db  38h ; 8
.eh_frame:0000000000007E0D                 db  83h
.eh_frame:0000000000007E0E                 db    7
.eh_frame:0000000000007E0F                 db  5Ch ; \
.eh_frame:0000000000007E10                 db  0Eh
.eh_frame:0000000000007E11                 db  40h ; @
.eh_frame:0000000000007E12                 db    2
.eh_frame:0000000000007E13                 db  61h ; a
.eh_frame:0000000000007E14                 db  0Ah
.eh_frame:0000000000007E15                 db  0Eh
.eh_frame:0000000000007E16                 db  38h ; 8
.eh_frame:0000000000007E17                 db  44h ; D
.eh_frame:0000000000007E18                 db  0Eh
.eh_frame:0000000000007E19                 db  30h ; 0
.eh_frame:0000000000007E1A                 db  41h ; A
.eh_frame:0000000000007E1B                 db  0Eh
.eh_frame:0000000000007E1C                 db  28h ; (
.eh_frame:0000000000007E1D                 db  42h ; B
.eh_frame:0000000000007E1E                 db  0Eh
.eh_frame:0000000000007E1F                 db  20h
.eh_frame:0000000000007E20                 db  42h ; B
.eh_frame:0000000000007E21                 db  0Eh
.eh_frame:0000000000007E22                 db  18h
.eh_frame:0000000000007E23                 db  42h ; B
.eh_frame:0000000000007E24                 db  0Eh
.eh_frame:0000000000007E25                 db  10h
.eh_frame:0000000000007E26                 db  42h ; B
.eh_frame:0000000000007E27                 db  0Eh
.eh_frame:0000000000007E28                 db    8
.eh_frame:0000000000007E29                 db  44h ; D
.eh_frame:0000000000007E2A                 db  0Bh
.eh_frame:0000000000007E2B                 db    0
.eh_frame:0000000000007E2C                 db    0
.eh_frame:0000000000007E2D                 db    0
.eh_frame:0000000000007E2E                 db    0
.eh_frame:0000000000007E2F                 db    0
.eh_frame:0000000000007E30                 db  4Ch ; L
.eh_frame:0000000000007E31                 db    0
.eh_frame:0000000000007E32                 db    0
.eh_frame:0000000000007E33                 db    0
.eh_frame:0000000000007E34                 db  24h ; $
.eh_frame:0000000000007E35                 db    1
.eh_frame:0000000000007E36                 db    0
.eh_frame:0000000000007E37                 db    0
.eh_frame:0000000000007E38                 db 0B8h
.eh_frame:0000000000007E39                 db 0A1h
.eh_frame:0000000000007E3A                 db 0FFh
.eh_frame:0000000000007E3B                 db 0FFh
.eh_frame:0000000000007E3C                 db  36h ; 6
.eh_frame:0000000000007E3D                 db    6
.eh_frame:0000000000007E3E                 db    0
.eh_frame:0000000000007E3F                 db    0
.eh_frame:0000000000007E40                 db    0
.eh_frame:0000000000007E41                 db  42h ; B
.eh_frame:0000000000007E42                 db  0Eh
.eh_frame:0000000000007E43                 db  10h
.eh_frame:0000000000007E44                 db  8Fh
.eh_frame:0000000000007E45                 db    2
.eh_frame:0000000000007E46                 db  42h ; B
.eh_frame:0000000000007E47                 db  0Eh
.eh_frame:0000000000007E48                 db  18h
.eh_frame:0000000000007E49                 db  8Eh
.eh_frame:0000000000007E4A                 db    3
.eh_frame:0000000000007E4B                 db  42h ; B
.eh_frame:0000000000007E4C                 db  0Eh
.eh_frame:0000000000007E4D                 db  20h
.eh_frame:0000000000007E4E                 db  8Dh
.eh_frame:0000000000007E4F                 db    4
.eh_frame:0000000000007E50                 db  42h ; B
.eh_frame:0000000000007E51                 db  0Eh
.eh_frame:0000000000007E52                 db  28h ; (
.eh_frame:0000000000007E53                 db  8Ch
.eh_frame:0000000000007E54                 db    5
.eh_frame:0000000000007E55                 db  41h ; A
.eh_frame:0000000000007E56                 db  0Eh
.eh_frame:0000000000007E57                 db  30h ; 0
.eh_frame:0000000000007E58                 db  86h
.eh_frame:0000000000007E59                 db    6
.eh_frame:0000000000007E5A                 db  41h ; A
.eh_frame:0000000000007E5B                 db  0Eh
.eh_frame:0000000000007E5C                 db  38h ; 8
.eh_frame:0000000000007E5D                 db  83h
.eh_frame:0000000000007E5E                 db    7
.eh_frame:0000000000007E5F                 db  47h ; G
.eh_frame:0000000000007E60                 db  0Eh
.eh_frame:0000000000007E61                 db 0A0h
.eh_frame:0000000000007E62                 db    2
.eh_frame:0000000000007E63                 db    3
.eh_frame:0000000000007E64                 db  30h ; 0
.eh_frame:0000000000007E65                 db    2
.eh_frame:0000000000007E66                 db  0Ah
.eh_frame:0000000000007E67                 db  0Eh
.eh_frame:0000000000007E68                 db  38h ; 8
.eh_frame:0000000000007E69                 db  41h ; A
.eh_frame:0000000000007E6A                 db  0Eh
.eh_frame:0000000000007E6B                 db  30h ; 0
.eh_frame:0000000000007E6C                 db  41h ; A
.eh_frame:0000000000007E6D                 db  0Eh
.eh_frame:0000000000007E6E                 db  28h ; (
.eh_frame:0000000000007E6F                 db  42h ; B
.eh_frame:0000000000007E70                 db  0Eh
.eh_frame:0000000000007E71                 db  20h
.eh_frame:0000000000007E72                 db  42h ; B
.eh_frame:0000000000007E73                 db  0Eh
.eh_frame:0000000000007E74                 db  18h
.eh_frame:0000000000007E75                 db  42h ; B
.eh_frame:0000000000007E76                 db  0Eh
.eh_frame:0000000000007E77                 db  10h
.eh_frame:0000000000007E78                 db  42h ; B
.eh_frame:0000000000007E79                 db  0Eh
.eh_frame:0000000000007E7A                 db    8
.eh_frame:0000000000007E7B                 db  45h ; E
.eh_frame:0000000000007E7C                 db  0Bh
.eh_frame:0000000000007E7D                 db    0
.eh_frame:0000000000007E7E                 db    0
.eh_frame:0000000000007E7F                 db    0
.eh_frame:0000000000007E80                 db  10h
.eh_frame:0000000000007E81                 db    0
.eh_frame:0000000000007E82                 db    0
.eh_frame:0000000000007E83                 db    0
.eh_frame:0000000000007E84                 db  74h ; t
.eh_frame:0000000000007E85                 db    1
.eh_frame:0000000000007E86                 db    0
.eh_frame:0000000000007E87                 db    0
.eh_frame:0000000000007E88                 db 0A8h
.eh_frame:0000000000007E89                 db 0A7h
.eh_frame:0000000000007E8A                 db 0FFh
.eh_frame:0000000000007E8B                 db 0FFh
.eh_frame:0000000000007E8C                 db    8
.eh_frame:0000000000007E8D                 db    0
.eh_frame:0000000000007E8E                 db    0
.eh_frame:0000000000007E8F                 db    0
.eh_frame:0000000000007E90                 db    0
.eh_frame:0000000000007E91                 db    0
.eh_frame:0000000000007E92                 db    0
.eh_frame:0000000000007E93                 db    0
.eh_frame:0000000000007E94                 db  10h
.eh_frame:0000000000007E95                 db    0
.eh_frame:0000000000007E96                 db    0
.eh_frame:0000000000007E97                 db    0
.eh_frame:0000000000007E98                 db  88h
.eh_frame:0000000000007E99                 db    1
.eh_frame:0000000000007E9A                 db    0
.eh_frame:0000000000007E9B                 db    0
.eh_frame:0000000000007E9C                 db 0A4h
.eh_frame:0000000000007E9D                 db 0A7h
.eh_frame:0000000000007E9E                 db 0FFh
.eh_frame:0000000000007E9F                 db 0FFh
.eh_frame:0000000000007EA0                 db    8
.eh_frame:0000000000007EA1                 db    0
.eh_frame:0000000000007EA2                 db    0
.eh_frame:0000000000007EA3                 db    0
.eh_frame:0000000000007EA4                 db    0
.eh_frame:0000000000007EA5                 db    0
.eh_frame:0000000000007EA6                 db    0
.eh_frame:0000000000007EA7                 db    0
.eh_frame:0000000000007EA8                 db  2Ch ; ,
.eh_frame:0000000000007EA9                 db    0
.eh_frame:0000000000007EAA                 db    0
.eh_frame:0000000000007EAB                 db    0
.eh_frame:0000000000007EAC                 db  9Ch
.eh_frame:0000000000007EAD                 db    1
.eh_frame:0000000000007EAE                 db    0
.eh_frame:0000000000007EAF                 db    0
.eh_frame:0000000000007EB0                 db 0A0h
.eh_frame:0000000000007EB1                 db 0A7h
.eh_frame:0000000000007EB2                 db 0FFh
.eh_frame:0000000000007EB3                 db 0FFh
.eh_frame:0000000000007EB4                 db 0A4h
.eh_frame:0000000000007EB5                 db    0
.eh_frame:0000000000007EB6                 db    0
.eh_frame:0000000000007EB7                 db    0
.eh_frame:0000000000007EB8                 db    0
.eh_frame:0000000000007EB9                 db  41h ; A
.eh_frame:0000000000007EBA                 db  0Eh
.eh_frame:0000000000007EBB                 db  10h
.eh_frame:0000000000007EBC                 db  86h
.eh_frame:0000000000007EBD                 db    2
.eh_frame:0000000000007EBE                 db  41h ; A
.eh_frame:0000000000007EBF                 db  0Eh
.eh_frame:0000000000007EC0                 db  18h
.eh_frame:0000000000007EC1                 db  83h
.eh_frame:0000000000007EC2                 db    3
.eh_frame:0000000000007EC3                 db  44h ; D
.eh_frame:0000000000007EC4                 db  0Eh
.eh_frame:0000000000007EC5                 db  20h
.eh_frame:0000000000007EC6                 db  7Ah ; z
.eh_frame:0000000000007EC7                 db  0Ah
.eh_frame:0000000000007EC8                 db  0Eh
.eh_frame:0000000000007EC9                 db  18h
.eh_frame:0000000000007ECA                 db  41h ; A
.eh_frame:0000000000007ECB                 db  0Eh
.eh_frame:0000000000007ECC                 db  10h
.eh_frame:0000000000007ECD                 db  41h ; A
.eh_frame:0000000000007ECE                 db  0Eh
.eh_frame:0000000000007ECF                 db    8
.eh_frame:0000000000007ED0                 db  41h ; A
.eh_frame:0000000000007ED1                 db  0Bh
.eh_frame:0000000000007ED2                 db    0
.eh_frame:0000000000007ED3                 db    0
.eh_frame:0000000000007ED4                 db    0
.eh_frame:0000000000007ED5                 db    0
.eh_frame:0000000000007ED6                 db    0
.eh_frame:0000000000007ED7                 db    0
.eh_frame:0000000000007ED8                 db  5Ch ; \
.eh_frame:0000000000007ED9                 db    0
.eh_frame:0000000000007EDA                 db    0
.eh_frame:0000000000007EDB                 db    0
.eh_frame:0000000000007EDC                 db 0CCh
.eh_frame:0000000000007EDD                 db    1
.eh_frame:0000000000007EDE                 db    0
.eh_frame:0000000000007EDF                 db    0
.eh_frame:0000000000007EE0                 db  20h
.eh_frame:0000000000007EE1                 db 0A8h
.eh_frame:0000000000007EE2                 db 0FFh
.eh_frame:0000000000007EE3                 db 0FFh
.eh_frame:0000000000007EE4                 db  87h
.eh_frame:0000000000007EE5                 db    0
.eh_frame:0000000000007EE6                 db    0
.eh_frame:0000000000007EE7                 db    0
.eh_frame:0000000000007EE8                 db    0
.eh_frame:0000000000007EE9                 db  47h ; G
.eh_frame:0000000000007EEA                 db  0Eh
.eh_frame:0000000000007EEB                 db  10h
.eh_frame:0000000000007EEC                 db  8Dh
.eh_frame:0000000000007EED                 db    2
.eh_frame:0000000000007EEE                 db  42h ; B
.eh_frame:0000000000007EEF                 db  0Eh
.eh_frame:0000000000007EF0                 db  18h
.eh_frame:0000000000007EF1                 db  8Ch
.eh_frame:0000000000007EF2                 db    3
.eh_frame:0000000000007EF3                 db  44h ; D
.eh_frame:0000000000007EF4                 db  0Eh
.eh_frame:0000000000007EF5                 db  20h
.eh_frame:0000000000007EF6                 db  86h
.eh_frame:0000000000007EF7                 db    4
.eh_frame:0000000000007EF8                 db  41h ; A
.eh_frame:0000000000007EF9                 db  0Eh
.eh_frame:0000000000007EFA                 db  28h ; (
.eh_frame:0000000000007EFB                 db  83h
.eh_frame:0000000000007EFC                 db    5
.eh_frame:0000000000007EFD                 db  4Fh ; O
.eh_frame:0000000000007EFE                 db  0Eh
.eh_frame:0000000000007EFF                 db  30h ; 0
.eh_frame:0000000000007F00                 db  7Ch ; |
.eh_frame:0000000000007F01                 db  0Ah
.eh_frame:0000000000007F02                 db  0Eh
.eh_frame:0000000000007F03                 db  28h ; (
.eh_frame:0000000000007F04                 db  44h ; D
.eh_frame:0000000000007F05                 db 0C3h
.eh_frame:0000000000007F06                 db  0Eh
.eh_frame:0000000000007F07                 db  20h
.eh_frame:0000000000007F08                 db  41h ; A
.eh_frame:0000000000007F09                 db 0C6h
.eh_frame:0000000000007F0A                 db  0Eh
.eh_frame:0000000000007F0B                 db  18h
.eh_frame:0000000000007F0C                 db  42h ; B
.eh_frame:0000000000007F0D                 db 0CCh
.eh_frame:0000000000007F0E                 db  0Eh
.eh_frame:0000000000007F0F                 db  10h
.eh_frame:0000000000007F10                 db  42h ; B
.eh_frame:0000000000007F11                 db 0CDh
.eh_frame:0000000000007F12                 db  0Eh
.eh_frame:0000000000007F13                 db    8
.eh_frame:0000000000007F14                 db  4Eh ; N
.eh_frame:0000000000007F15                 db  0Bh
.eh_frame:0000000000007F16                 db  44h ; D
.eh_frame:0000000000007F17                 db  0Eh
.eh_frame:0000000000007F18                 db  28h ; (
.eh_frame:0000000000007F19                 db  41h ; A
.eh_frame:0000000000007F1A                 db  0Eh
.eh_frame:0000000000007F1B                 db  20h
.eh_frame:0000000000007F1C                 db  41h ; A
.eh_frame:0000000000007F1D                 db  0Eh
.eh_frame:0000000000007F1E                 db  18h
.eh_frame:0000000000007F1F                 db  42h ; B
.eh_frame:0000000000007F20                 db  0Eh
.eh_frame:0000000000007F21                 db  10h
.eh_frame:0000000000007F22                 db  42h ; B
.eh_frame:0000000000007F23                 db  0Eh
.eh_frame:0000000000007F24                 db    8
.eh_frame:0000000000007F25                 db  46h ; F
.eh_frame:0000000000007F26                 db 0C3h
.eh_frame:0000000000007F27                 db 0C6h
.eh_frame:0000000000007F28                 db 0CCh
.eh_frame:0000000000007F29                 db 0CDh
.eh_frame:0000000000007F2A                 db  42h ; B
.eh_frame:0000000000007F2B                 db  0Eh
.eh_frame:0000000000007F2C                 db  30h ; 0
.eh_frame:0000000000007F2D                 db  83h
.eh_frame:0000000000007F2E                 db    5
.eh_frame:0000000000007F2F                 db  86h
.eh_frame:0000000000007F30                 db    4
.eh_frame:0000000000007F31                 db  8Ch
.eh_frame:0000000000007F32                 db    3
.eh_frame:0000000000007F33                 db  8Dh
.eh_frame:0000000000007F34                 db    2
.eh_frame:0000000000007F35                 db    0
.eh_frame:0000000000007F36                 db    0
.eh_frame:0000000000007F37                 db    0
.eh_frame:0000000000007F38                 db  1Ch
.eh_frame:0000000000007F39                 db    0
.eh_frame:0000000000007F3A                 db    0
.eh_frame:0000000000007F3B                 db    0
.eh_frame:0000000000007F3C                 db  2Ch ; ,
.eh_frame:0000000000007F3D                 db    2
.eh_frame:0000000000007F3E                 db    0
.eh_frame:0000000000007F3F                 db    0
.eh_frame:0000000000007F40                 db  50h ; P
.eh_frame:0000000000007F41                 db 0A8h
.eh_frame:0000000000007F42                 db 0FFh
.eh_frame:0000000000007F43                 db 0FFh
.eh_frame:0000000000007F44                 db  56h ; V
.eh_frame:0000000000007F45                 db    0
.eh_frame:0000000000007F46                 db    0
.eh_frame:0000000000007F47                 db    0
.eh_frame:0000000000007F48                 db    0
.eh_frame:0000000000007F49                 db  44h ; D
.eh_frame:0000000000007F4A                 db  0Eh
.eh_frame:0000000000007F4B                 db  30h ; 0
.eh_frame:0000000000007F4C                 db    2
.eh_frame:0000000000007F4D                 db  4Ch ; L
.eh_frame:0000000000007F4E                 db  0Ah
.eh_frame:0000000000007F4F                 db  0Eh
.eh_frame:0000000000007F50                 db    8
.eh_frame:0000000000007F51                 db  41h ; A
.eh_frame:0000000000007F52                 db  0Bh
.eh_frame:0000000000007F53                 db    0
.eh_frame:0000000000007F54                 db    0
.eh_frame:0000000000007F55                 db    0
.eh_frame:0000000000007F56                 db    0
.eh_frame:0000000000007F57                 db    0
.eh_frame:0000000000007F58                 db  10h
.eh_frame:0000000000007F59                 db    0
.eh_frame:0000000000007F5A                 db    0
.eh_frame:0000000000007F5B                 db    0
.eh_frame:0000000000007F5C                 db  4Ch ; L
.eh_frame:0000000000007F5D                 db    2
.eh_frame:0000000000007F5E                 db    0
.eh_frame:0000000000007F5F                 db    0
.eh_frame:0000000000007F60                 db  90h
.eh_frame:0000000000007F61                 db 0A8h
.eh_frame:0000000000007F62                 db 0FFh
.eh_frame:0000000000007F63                 db 0FFh
.eh_frame:0000000000007F64                 db  93h
.eh_frame:0000000000007F65                 db    0
.eh_frame:0000000000007F66                 db    0
.eh_frame:0000000000007F67                 db    0
.eh_frame:0000000000007F68                 db    0
.eh_frame:0000000000007F69                 db    0
.eh_frame:0000000000007F6A                 db    0
.eh_frame:0000000000007F6B                 db    0
.eh_frame:0000000000007F6C                 db  10h
.eh_frame:0000000000007F6D                 db    0
.eh_frame:0000000000007F6E                 db    0
.eh_frame:0000000000007F6F                 db    0
.eh_frame:0000000000007F70                 db  60h ; `
.eh_frame:0000000000007F71                 db    2
.eh_frame:0000000000007F72                 db    0
.eh_frame:0000000000007F73                 db    0
.eh_frame:0000000000007F74                 db  1Ch
.eh_frame:0000000000007F75                 db 0A9h
.eh_frame:0000000000007F76                 db 0FFh
.eh_frame:0000000000007F77                 db 0FFh
.eh_frame:0000000000007F78                 db  10h
.eh_frame:0000000000007F79                 db    0
.eh_frame:0000000000007F7A                 db    0
.eh_frame:0000000000007F7B                 db    0
.eh_frame:0000000000007F7C                 db    0
.eh_frame:0000000000007F7D                 db    0
.eh_frame:0000000000007F7E                 db    0
.eh_frame:0000000000007F7F                 db    0
.eh_frame:0000000000007F80                 db  10h
.eh_frame:0000000000007F81                 db    0
.eh_frame:0000000000007F82                 db    0
.eh_frame:0000000000007F83                 db    0
.eh_frame:0000000000007F84                 db  74h ; t
.eh_frame:0000000000007F85                 db    2
.eh_frame:0000000000007F86                 db    0
.eh_frame:0000000000007F87                 db    0
.eh_frame:0000000000007F88                 db  18h
.eh_frame:0000000000007F89                 db 0A9h
.eh_frame:0000000000007F8A                 db 0FFh
.eh_frame:0000000000007F8B                 db 0FFh
.eh_frame:0000000000007F8C                 db    7
.eh_frame:0000000000007F8D                 db    0
.eh_frame:0000000000007F8E                 db    0
.eh_frame:0000000000007F8F                 db    0
.eh_frame:0000000000007F90                 db    0
.eh_frame:0000000000007F91                 db    0
.eh_frame:0000000000007F92                 db    0
.eh_frame:0000000000007F93                 db    0
.eh_frame:0000000000007F94                 db  18h
.eh_frame:0000000000007F95                 db    0
.eh_frame:0000000000007F96                 db    0
.eh_frame:0000000000007F97                 db    0
.eh_frame:0000000000007F98                 db  88h
.eh_frame:0000000000007F99                 db    2
.eh_frame:0000000000007F9A                 db    0
.eh_frame:0000000000007F9B                 db    0
.eh_frame:0000000000007F9C                 db  14h
.eh_frame:0000000000007F9D                 db 0A9h
.eh_frame:0000000000007F9E                 db 0FFh
.eh_frame:0000000000007F9F                 db 0FFh
.eh_frame:0000000000007FA0                 db  22h ; "
.eh_frame:0000000000007FA1                 db    0
.eh_frame:0000000000007FA2                 db    0
.eh_frame:0000000000007FA3                 db    0
.eh_frame:0000000000007FA4                 db    0
.eh_frame:0000000000007FA5                 db  41h ; A
.eh_frame:0000000000007FA6                 db  0Eh
.eh_frame:0000000000007FA7                 db  10h
.eh_frame:0000000000007FA8                 db  83h
.eh_frame:0000000000007FA9                 db    2
.eh_frame:0000000000007FAA                 db  5Bh ; [
.eh_frame:0000000000007FAB                 db  0Ah
.eh_frame:0000000000007FAC                 db  0Eh
.eh_frame:0000000000007FAD                 db    8
.eh_frame:0000000000007FAE                 db  41h ; A
.eh_frame:0000000000007FAF                 db  0Bh
.eh_frame:0000000000007FB0                 db  5Ch ; \
.eh_frame:0000000000007FB1                 db    0
.eh_frame:0000000000007FB2                 db    0
.eh_frame:0000000000007FB3                 db    0
.eh_frame:0000000000007FB4                 db 0A4h
.eh_frame:0000000000007FB5                 db    2
.eh_frame:0000000000007FB6                 db    0
.eh_frame:0000000000007FB7                 db    0
.eh_frame:0000000000007FB8                 db  28h ; (
.eh_frame:0000000000007FB9                 db 0A9h
.eh_frame:0000000000007FBA                 db 0FFh
.eh_frame:0000000000007FBB                 db 0FFh
.eh_frame:0000000000007FBC                 db  1Eh
.eh_frame:0000000000007FBD                 db    1
.eh_frame:0000000000007FBE                 db    0
.eh_frame:0000000000007FBF                 db    0
.eh_frame:0000000000007FC0                 db    0
.eh_frame:0000000000007FC1                 db  42h ; B
.eh_frame:0000000000007FC2                 db  0Eh
.eh_frame:0000000000007FC3                 db  10h
.eh_frame:0000000000007FC4                 db  8Eh
.eh_frame:0000000000007FC5                 db    2
.eh_frame:0000000000007FC6                 db  42h ; B
.eh_frame:0000000000007FC7                 db  0Eh
.eh_frame:0000000000007FC8                 db  18h
.eh_frame:0000000000007FC9                 db  8Dh
.eh_frame:0000000000007FCA                 db    3
.eh_frame:0000000000007FCB                 db  45h ; E
.eh_frame:0000000000007FCC                 db  0Eh
.eh_frame:0000000000007FCD                 db  20h
.eh_frame:0000000000007FCE                 db  8Ch
.eh_frame:0000000000007FCF                 db    4
.eh_frame:0000000000007FD0                 db  41h ; A
.eh_frame:0000000000007FD1                 db  0Eh
.eh_frame:0000000000007FD2                 db  28h ; (
.eh_frame:0000000000007FD3                 db  86h
.eh_frame:0000000000007FD4                 db    5
.eh_frame:0000000000007FD5                 db  44h ; D
.eh_frame:0000000000007FD6                 db  0Eh
.eh_frame:0000000000007FD7                 db  30h ; 0
.eh_frame:0000000000007FD8                 db  83h
.eh_frame:0000000000007FD9                 db    6
.eh_frame:0000000000007FDA                 db    2
.eh_frame:0000000000007FDB                 db 0A1h
.eh_frame:0000000000007FDC                 db  0Ah
.eh_frame:0000000000007FDD                 db  0Eh
.eh_frame:0000000000007FDE                 db  28h ; (
.eh_frame:0000000000007FDF                 db  44h ; D
.eh_frame:0000000000007FE0                 db  0Eh
.eh_frame:0000000000007FE1                 db  20h
.eh_frame:0000000000007FE2                 db  42h ; B
.eh_frame:0000000000007FE3                 db  0Eh
.eh_frame:0000000000007FE4                 db  18h
.eh_frame:0000000000007FE5                 db  42h ; B
.eh_frame:0000000000007FE6                 db  0Eh
.eh_frame:0000000000007FE7                 db  10h
.eh_frame:0000000000007FE8                 db  42h ; B
.eh_frame:0000000000007FE9                 db  0Eh
.eh_frame:0000000000007FEA                 db    8
.eh_frame:0000000000007FEB                 db  47h ; G
.eh_frame:0000000000007FEC                 db  0Bh
.eh_frame:0000000000007FED                 db  71h ; q
.eh_frame:0000000000007FEE                 db  0Ah
.eh_frame:0000000000007FEF                 db  0Eh
.eh_frame:0000000000007FF0                 db  28h ; (
.eh_frame:0000000000007FF1                 db  41h ; A
.eh_frame:0000000000007FF2                 db  0Eh
.eh_frame:0000000000007FF3                 db  20h
.eh_frame:0000000000007FF4                 db  42h ; B
.eh_frame:0000000000007FF5                 db  0Eh
.eh_frame:0000000000007FF6                 db  18h
.eh_frame:0000000000007FF7                 db  42h ; B
.eh_frame:0000000000007FF8                 db  0Eh
.eh_frame:0000000000007FF9                 db  10h
.eh_frame:0000000000007FFA                 db  42h ; B
.eh_frame:0000000000007FFB                 db  0Eh
.eh_frame:0000000000007FFC                 db    8
.eh_frame:0000000000007FFD                 db  48h ; H
.eh_frame:0000000000007FFE                 db  0Bh
.eh_frame:0000000000007FFF                 db  53h ; S
.eh_frame:0000000000008000                 db  0Eh
.eh_frame:0000000000008001                 db  28h ; (
.eh_frame:0000000000008002                 db  44h ; D
.eh_frame:0000000000008003                 db  0Eh
.eh_frame:0000000000008004                 db  20h
.eh_frame:0000000000008005                 db  42h ; B
.eh_frame:0000000000008006                 db  0Eh
.eh_frame:0000000000008007                 db  18h
.eh_frame:0000000000008008                 db  42h ; B
.eh_frame:0000000000008009                 db  0Eh
.eh_frame:000000000000800A                 db  10h
.eh_frame:000000000000800B                 db  42h ; B
.eh_frame:000000000000800C                 db  0Eh
.eh_frame:000000000000800D                 db    8
.eh_frame:000000000000800E                 db    0
.eh_frame:000000000000800F                 db    0
.eh_frame:0000000000008010                 db  10h
.eh_frame:0000000000008011                 db    0
.eh_frame:0000000000008012                 db    0
.eh_frame:0000000000008013                 db    0
.eh_frame:0000000000008014                 db    4
.eh_frame:0000000000008015                 db    3
.eh_frame:0000000000008016                 db    0
.eh_frame:0000000000008017                 db    0
.eh_frame:0000000000008018                 db 0E8h
.eh_frame:0000000000008019                 db 0A9h
.eh_frame:000000000000801A                 db 0FFh
.eh_frame:000000000000801B                 db 0FFh
.eh_frame:000000000000801C                 db  77h ; w
.eh_frame:000000000000801D                 db    0
.eh_frame:000000000000801E                 db    0
.eh_frame:000000000000801F                 db    0
.eh_frame:0000000000008020                 db    0
.eh_frame:0000000000008021                 db    0
.eh_frame:0000000000008022                 db    0
.eh_frame:0000000000008023                 db    0
.eh_frame:0000000000008024                 db  5Ch ; \
.eh_frame:0000000000008025                 db    0
.eh_frame:0000000000008026                 db    0
.eh_frame:0000000000008027                 db    0
.eh_frame:0000000000008028                 db  18h
.eh_frame:0000000000008029                 db    3
.eh_frame:000000000000802A                 db    0
.eh_frame:000000000000802B                 db    0
.eh_frame:000000000000802C                 db  54h ; T
.eh_frame:000000000000802D                 db 0AAh
.eh_frame:000000000000802E                 db 0FFh
.eh_frame:000000000000802F                 db 0FFh
.eh_frame:0000000000008030                 db  40h ; @
.eh_frame:0000000000008031                 db    1
.eh_frame:0000000000008032                 db    0
.eh_frame:0000000000008033                 db    0
.eh_frame:0000000000008034                 db    0
.eh_frame:0000000000008035                 db  42h ; B
.eh_frame:0000000000008036                 db  0Eh
.eh_frame:0000000000008037                 db  10h
.eh_frame:0000000000008038                 db  8Fh
.eh_frame:0000000000008039                 db    2
.eh_frame:000000000000803A                 db  42h ; B
.eh_frame:000000000000803B                 db  0Eh
.eh_frame:000000000000803C                 db  18h
.eh_frame:000000000000803D                 db  8Eh
.eh_frame:000000000000803E                 db    3
.eh_frame:000000000000803F                 db  42h ; B
.eh_frame:0000000000008040                 db  0Eh
.eh_frame:0000000000008041                 db  20h
.eh_frame:0000000000008042                 db  8Dh
.eh_frame:0000000000008043                 db    4
.eh_frame:0000000000008044                 db  42h ; B
.eh_frame:0000000000008045                 db  0Eh
.eh_frame:0000000000008046                 db  28h ; (
.eh_frame:0000000000008047                 db  8Ch
.eh_frame:0000000000008048                 db    5
.eh_frame:0000000000008049                 db  41h ; A
.eh_frame:000000000000804A                 db  0Eh
.eh_frame:000000000000804B                 db  30h ; 0
.eh_frame:000000000000804C                 db  86h
.eh_frame:000000000000804D                 db    6
.eh_frame:000000000000804E                 db  41h ; A
.eh_frame:000000000000804F                 db  0Eh
.eh_frame:0000000000008050                 db  38h ; 8
.eh_frame:0000000000008051                 db  83h
.eh_frame:0000000000008052                 db    7
.eh_frame:0000000000008053                 db  44h ; D
.eh_frame:0000000000008054                 db  0Eh
.eh_frame:0000000000008055                 db  40h ; @
.eh_frame:0000000000008056                 db    2
.eh_frame:0000000000008057                 db 0EEh
.eh_frame:0000000000008058                 db  0Ah
.eh_frame:0000000000008059                 db  0Eh
.eh_frame:000000000000805A                 db  38h ; 8
.eh_frame:000000000000805B                 db  46h ; F
.eh_frame:000000000000805C                 db  0Eh
.eh_frame:000000000000805D                 db  30h ; 0
.eh_frame:000000000000805E                 db  41h ; A
.eh_frame:000000000000805F                 db  0Eh
.eh_frame:0000000000008060                 db  28h ; (
.eh_frame:0000000000008061                 db  42h ; B
.eh_frame:0000000000008062                 db  0Eh
.eh_frame:0000000000008063                 db  20h
.eh_frame:0000000000008064                 db  42h ; B
.eh_frame:0000000000008065                 db  0Eh
.eh_frame:0000000000008066                 db  18h
.eh_frame:0000000000008067                 db  42h ; B
.eh_frame:0000000000008068                 db  0Eh
.eh_frame:0000000000008069                 db  10h
.eh_frame:000000000000806A                 db  42h ; B
.eh_frame:000000000000806B                 db  0Eh
.eh_frame:000000000000806C                 db    8
.eh_frame:000000000000806D                 db  45h ; E
.eh_frame:000000000000806E                 db  0Bh
.eh_frame:000000000000806F                 db  63h ; c
.eh_frame:0000000000008070                 db  0Eh
.eh_frame:0000000000008071                 db  38h ; 8
.eh_frame:0000000000008072                 db  43h ; C
.eh_frame:0000000000008073                 db  0Eh
.eh_frame:0000000000008074                 db  30h ; 0
.eh_frame:0000000000008075                 db  41h ; A
.eh_frame:0000000000008076                 db  0Eh
.eh_frame:0000000000008077                 db  28h ; (
.eh_frame:0000000000008078                 db  42h ; B
.eh_frame:0000000000008079                 db  0Eh
.eh_frame:000000000000807A                 db  20h
.eh_frame:000000000000807B                 db  42h ; B
.eh_frame:000000000000807C                 db  0Eh
.eh_frame:000000000000807D                 db  18h
.eh_frame:000000000000807E                 db  42h ; B
.eh_frame:000000000000807F                 db  0Eh
.eh_frame:0000000000008080                 db  10h
.eh_frame:0000000000008081                 db  42h ; B
.eh_frame:0000000000008082                 db  0Eh
.eh_frame:0000000000008083                 db    8
.eh_frame:0000000000008084                 db  10h
.eh_frame:0000000000008085                 db    0
.eh_frame:0000000000008086                 db    0
.eh_frame:0000000000008087                 db    0
.eh_frame:0000000000008088                 db  78h ; x
.eh_frame:0000000000008089                 db    3
.eh_frame:000000000000808A                 db    0
.eh_frame:000000000000808B                 db    0
.eh_frame:000000000000808C                 db  34h ; 4
.eh_frame:000000000000808D                 db 0ABh
.eh_frame:000000000000808E                 db 0FFh
.eh_frame:000000000000808F                 db 0FFh
.eh_frame:0000000000008090                 db    5
.eh_frame:0000000000008091                 db    0
.eh_frame:0000000000008092                 db    0
.eh_frame:0000000000008093                 db    0
.eh_frame:0000000000008094                 db    0
.eh_frame:0000000000008095                 db    0
.eh_frame:0000000000008096                 db    0
.eh_frame:0000000000008097                 db    0
.eh_frame:0000000000008098                 db  10h
.eh_frame:0000000000008099                 db    0
.eh_frame:000000000000809A                 db    0
.eh_frame:000000000000809B                 db    0
.eh_frame:000000000000809C                 db  8Ch
.eh_frame:000000000000809D                 db    3
.eh_frame:000000000000809E                 db    0
.eh_frame:000000000000809F                 db    0
.eh_frame:00000000000080A0                 db  30h ; 0
.eh_frame:00000000000080A1                 db 0ABh
.eh_frame:00000000000080A2                 db 0FFh
.eh_frame:00000000000080A3                 db 0FFh
.eh_frame:00000000000080A4                 db    5
.eh_frame:00000000000080A5                 db    0
.eh_frame:00000000000080A6                 db    0
.eh_frame:00000000000080A7                 db    0
.eh_frame:00000000000080A8                 db    0
.eh_frame:00000000000080A9                 db    0
.eh_frame:00000000000080AA                 db    0
.eh_frame:00000000000080AB                 db    0
.eh_frame:00000000000080AC                 db  10h
.eh_frame:00000000000080AD                 db    0
.eh_frame:00000000000080AE                 db    0
.eh_frame:00000000000080AF                 db    0
.eh_frame:00000000000080B0                 db 0A0h
.eh_frame:00000000000080B1                 db    3
.eh_frame:00000000000080B2                 db    0
.eh_frame:00000000000080B3                 db    0
.eh_frame:00000000000080B4                 db  2Ch ; ,
.eh_frame:00000000000080B5                 db 0ABh
.eh_frame:00000000000080B6                 db 0FFh
.eh_frame:00000000000080B7                 db 0FFh
.eh_frame:00000000000080B8                 db    5
.eh_frame:00000000000080B9                 db    0
.eh_frame:00000000000080BA                 db    0
.eh_frame:00000000000080BB                 db    0
.eh_frame:00000000000080BC                 db    0
.eh_frame:00000000000080BD                 db    0
.eh_frame:00000000000080BE                 db    0
.eh_frame:00000000000080BF                 db    0
.eh_frame:00000000000080C0                 db  10h
.eh_frame:00000000000080C1                 db    0
.eh_frame:00000000000080C2                 db    0
.eh_frame:00000000000080C3                 db    0
.eh_frame:00000000000080C4                 db 0B4h
.eh_frame:00000000000080C5                 db    3
.eh_frame:00000000000080C6                 db    0
.eh_frame:00000000000080C7                 db    0
.eh_frame:00000000000080C8                 db  28h ; (
.eh_frame:00000000000080C9                 db 0ABh
.eh_frame:00000000000080CA                 db 0FFh
.eh_frame:00000000000080CB                 db 0FFh
.eh_frame:00000000000080CC                 db  49h ; I
.eh_frame:00000000000080CD                 db    0
.eh_frame:00000000000080CE                 db    0
.eh_frame:00000000000080CF                 db    0
.eh_frame:00000000000080D0                 db    0
.eh_frame:00000000000080D1                 db    0
.eh_frame:00000000000080D2                 db    0
.eh_frame:00000000000080D3                 db    0
.eh_frame:00000000000080D4                 db  10h
.eh_frame:00000000000080D5                 db    0
.eh_frame:00000000000080D6                 db    0
.eh_frame:00000000000080D7                 db    0
.eh_frame:00000000000080D8                 db 0C8h
.eh_frame:00000000000080D9                 db    3
.eh_frame:00000000000080DA                 db    0
.eh_frame:00000000000080DB                 db    0
.eh_frame:00000000000080DC                 db  64h ; d
.eh_frame:00000000000080DD                 db 0ABh
.eh_frame:00000000000080DE                 db 0FFh
.eh_frame:00000000000080DF                 db 0FFh
.eh_frame:00000000000080E0                 db  58h ; X
.eh_frame:00000000000080E1                 db    0
.eh_frame:00000000000080E2                 db    0
.eh_frame:00000000000080E3                 db    0
.eh_frame:00000000000080E4                 db    0
.eh_frame:00000000000080E5                 db    0
.eh_frame:00000000000080E6                 db    0
.eh_frame:00000000000080E7                 db    0
.eh_frame:00000000000080E8                 db  38h ; 8
.eh_frame:00000000000080E9                 db    0
.eh_frame:00000000000080EA                 db    0
.eh_frame:00000000000080EB                 db    0
.eh_frame:00000000000080EC                 db 0DCh
.eh_frame:00000000000080ED                 db    3
.eh_frame:00000000000080EE                 db    0
.eh_frame:00000000000080EF                 db    0
.eh_frame:00000000000080F0                 db 0B0h
.eh_frame:00000000000080F1                 db 0ABh
.eh_frame:00000000000080F2                 db 0FFh
.eh_frame:00000000000080F3                 db 0FFh
.eh_frame:00000000000080F4                 db  47h ; G
.eh_frame:00000000000080F5                 db    1
.eh_frame:00000000000080F6                 db    0
.eh_frame:00000000000080F7                 db    0
.eh_frame:00000000000080F8                 db    0
.eh_frame:00000000000080F9                 db  42h ; B
.eh_frame:00000000000080FA                 db  0Eh
.eh_frame:00000000000080FB                 db  10h
.eh_frame:00000000000080FC                 db  8Dh
.eh_frame:00000000000080FD                 db    2
.eh_frame:00000000000080FE                 db  42h ; B
.eh_frame:00000000000080FF                 db  0Eh
.eh_frame:0000000000008100                 db  18h
.eh_frame:0000000000008101                 db  8Ch
.eh_frame:0000000000008102                 db    3
.eh_frame:0000000000008103                 db  44h ; D
.eh_frame:0000000000008104                 db  0Eh
.eh_frame:0000000000008105                 db  20h
.eh_frame:0000000000008106                 db  86h
.eh_frame:0000000000008107                 db    4
.eh_frame:0000000000008108                 db  41h ; A
.eh_frame:0000000000008109                 db  0Eh
.eh_frame:000000000000810A                 db  28h ; (
.eh_frame:000000000000810B                 db  83h
.eh_frame:000000000000810C                 db    5
.eh_frame:000000000000810D                 db  46h ; F
.eh_frame:000000000000810E                 db  0Eh
.eh_frame:000000000000810F                 db  30h ; 0
.eh_frame:0000000000008110                 db    2
.eh_frame:0000000000008111                 db 0CDh
.eh_frame:0000000000008112                 db  0Ah
.eh_frame:0000000000008113                 db  0Eh
.eh_frame:0000000000008114                 db  28h ; (
.eh_frame:0000000000008115                 db  47h ; G
.eh_frame:0000000000008116                 db  0Eh
.eh_frame:0000000000008117                 db  20h
.eh_frame:0000000000008118                 db  41h ; A
.eh_frame:0000000000008119                 db  0Eh
.eh_frame:000000000000811A                 db  18h
.eh_frame:000000000000811B                 db  42h ; B
.eh_frame:000000000000811C                 db  0Eh
.eh_frame:000000000000811D                 db  10h
.eh_frame:000000000000811E                 db  42h ; B
.eh_frame:000000000000811F                 db  0Eh
.eh_frame:0000000000008120                 db    8
.eh_frame:0000000000008121                 db  58h ; X
.eh_frame:0000000000008122                 db  0Bh
.eh_frame:0000000000008123                 db    0
.eh_frame:0000000000008124                 db  34h ; 4
.eh_frame:0000000000008125                 db    0
.eh_frame:0000000000008126                 db    0
.eh_frame:0000000000008127                 db    0
.eh_frame:0000000000008128                 db  18h
.eh_frame:0000000000008129                 db    4
.eh_frame:000000000000812A                 db    0
.eh_frame:000000000000812B                 db    0
.eh_frame:000000000000812C                 db 0C4h
.eh_frame:000000000000812D                 db 0ACh
.eh_frame:000000000000812E                 db 0FFh
.eh_frame:000000000000812F                 db 0FFh
.eh_frame:0000000000008130                 db  5Bh ; [
.eh_frame:0000000000008131                 db    0
.eh_frame:0000000000008132                 db    0
.eh_frame:0000000000008133                 db    0
.eh_frame:0000000000008134                 db    0
.eh_frame:0000000000008135                 db  42h ; B
.eh_frame:0000000000008136                 db  0Eh
.eh_frame:0000000000008137                 db  10h
.eh_frame:0000000000008138                 db  8Ch
.eh_frame:0000000000008139                 db    2
.eh_frame:000000000000813A                 db  41h ; A
.eh_frame:000000000000813B                 db  0Eh
.eh_frame:000000000000813C                 db  18h
.eh_frame:000000000000813D                 db  86h
.eh_frame:000000000000813E                 db    3
.eh_frame:000000000000813F                 db  44h ; D
.eh_frame:0000000000008140                 db  0Eh
.eh_frame:0000000000008141                 db  20h
.eh_frame:0000000000008142                 db  83h
.eh_frame:0000000000008143                 db    4
.eh_frame:0000000000008144                 db  79h ; y
.eh_frame:0000000000008145                 db  0Ah
.eh_frame:0000000000008146                 db  0Eh
.eh_frame:0000000000008147                 db  18h
.eh_frame:0000000000008148                 db  44h ; D
.eh_frame:0000000000008149                 db  0Eh
.eh_frame:000000000000814A                 db  10h
.eh_frame:000000000000814B                 db  42h ; B
.eh_frame:000000000000814C                 db  0Eh
.eh_frame:000000000000814D                 db    8
.eh_frame:000000000000814E                 db  4Ah ; J
.eh_frame:000000000000814F                 db  0Bh
.eh_frame:0000000000008150                 db  44h ; D
.eh_frame:0000000000008151                 db  0Eh
.eh_frame:0000000000008152                 db  18h
.eh_frame:0000000000008153                 db  41h ; A
.eh_frame:0000000000008154                 db  0Eh
.eh_frame:0000000000008155                 db  10h
.eh_frame:0000000000008156                 db  45h ; E
.eh_frame:0000000000008157                 db  0Eh
.eh_frame:0000000000008158                 db    8
.eh_frame:0000000000008159                 db    0
.eh_frame:000000000000815A                 db    0
.eh_frame:000000000000815B                 db    0
.eh_frame:000000000000815C                 db  10h
.eh_frame:000000000000815D                 db    0
.eh_frame:000000000000815E                 db    0
.eh_frame:000000000000815F                 db    0
.eh_frame:0000000000008160                 db  50h ; P
.eh_frame:0000000000008161                 db    4
.eh_frame:0000000000008162                 db    0
.eh_frame:0000000000008163                 db    0
.eh_frame:0000000000008164                 db 0ECh
.eh_frame:0000000000008165                 db 0ACh
.eh_frame:0000000000008166                 db 0FFh
.eh_frame:0000000000008167                 db 0FFh
.eh_frame:0000000000008168                 db  41h ; A
.eh_frame:0000000000008169                 db    0
.eh_frame:000000000000816A                 db    0
.eh_frame:000000000000816B                 db    0
.eh_frame:000000000000816C                 db    0
.eh_frame:000000000000816D                 db  7Ch ; |
.eh_frame:000000000000816E                 db  0Eh
.eh_frame:000000000000816F                 db  10h
.eh_frame:0000000000008170                 db  30h ; 0
.eh_frame:0000000000008171                 db    0
.eh_frame:0000000000008172                 db    0
.eh_frame:0000000000008173                 db    0
.eh_frame:0000000000008174                 db  64h ; d
.eh_frame:0000000000008175                 db    4
.eh_frame:0000000000008176                 db    0
.eh_frame:0000000000008177                 db    0
.eh_frame:0000000000008178                 db  28h ; (
.eh_frame:0000000000008179                 db 0ADh
.eh_frame:000000000000817A                 db 0FFh
.eh_frame:000000000000817B                 db 0FFh
.eh_frame:000000000000817C                 db  72h ; r
.eh_frame:000000000000817D                 db    0
.eh_frame:000000000000817E                 db    0
.eh_frame:000000000000817F                 db    0
.eh_frame:0000000000008180                 db    0
.eh_frame:0000000000008181                 db  41h ; A
.eh_frame:0000000000008182                 db  0Eh
.eh_frame:0000000000008183                 db  10h
.eh_frame:0000000000008184                 db  86h
.eh_frame:0000000000008185                 db    2
.eh_frame:0000000000008186                 db  41h ; A
.eh_frame:0000000000008187                 db  0Eh
.eh_frame:0000000000008188                 db  18h
.eh_frame:0000000000008189                 db  83h
.eh_frame:000000000000818A                 db    3
.eh_frame:000000000000818B                 db  4Ah ; J
.eh_frame:000000000000818C                 db  0Eh
.eh_frame:000000000000818D                 db  20h
.eh_frame:000000000000818E                 db    2
.eh_frame:000000000000818F                 db  53h ; S
.eh_frame:0000000000008190                 db  0Ah
.eh_frame:0000000000008191                 db  0Eh
.eh_frame:0000000000008192                 db  18h
.eh_frame:0000000000008193                 db  41h ; A
.eh_frame:0000000000008194                 db  0Eh
.eh_frame:0000000000008195                 db  10h
.eh_frame:0000000000008196                 db  41h ; A
.eh_frame:0000000000008197                 db  0Eh
.eh_frame:0000000000008198                 db    8
.eh_frame:0000000000008199                 db  47h ; G
.eh_frame:000000000000819A                 db  0Bh
.eh_frame:000000000000819B                 db  47h ; G
.eh_frame:000000000000819C                 db  0Eh
.eh_frame:000000000000819D                 db  18h
.eh_frame:000000000000819E                 db  41h ; A
.eh_frame:000000000000819F                 db  0Eh
.eh_frame:00000000000081A0                 db  10h
.eh_frame:00000000000081A1                 db  41h ; A
.eh_frame:00000000000081A2                 db  0Eh
.eh_frame:00000000000081A3                 db    8
.eh_frame:00000000000081A4                 db  10h
.eh_frame:00000000000081A5                 db    0
.eh_frame:00000000000081A6                 db    0
.eh_frame:00000000000081A7                 db    0
.eh_frame:00000000000081A8                 db  98h
.eh_frame:00000000000081A9                 db    4
.eh_frame:00000000000081AA                 db    0
.eh_frame:00000000000081AB                 db    0
.eh_frame:00000000000081AC                 db  74h ; t
.eh_frame:00000000000081AD                 db 0ADh
.eh_frame:00000000000081AE                 db 0FFh
.eh_frame:00000000000081AF                 db 0FFh
.eh_frame:00000000000081B0                 db  65h ; e
.eh_frame:00000000000081B1                 db    0
.eh_frame:00000000000081B2                 db    0
.eh_frame:00000000000081B3                 db    0
.eh_frame:00000000000081B4                 db    0
.eh_frame:00000000000081B5                 db    0
.eh_frame:00000000000081B6                 db    0
.eh_frame:00000000000081B7                 db    0
.eh_frame:00000000000081B8                 db  48h ; H
.eh_frame:00000000000081B9                 db    0
.eh_frame:00000000000081BA                 db    0
.eh_frame:00000000000081BB                 db    0
.eh_frame:00000000000081BC                 db 0ACh
.eh_frame:00000000000081BD                 db    4
.eh_frame:00000000000081BE                 db    0
.eh_frame:00000000000081BF                 db    0
.eh_frame:00000000000081C0                 db 0D0h
.eh_frame:00000000000081C1                 db 0ADh
.eh_frame:00000000000081C2                 db 0FFh
.eh_frame:00000000000081C3                 db 0FFh
.eh_frame:00000000000081C4                 db  6Ah ; j
.eh_frame:00000000000081C5                 db    0
.eh_frame:00000000000081C6                 db    0
.eh_frame:00000000000081C7                 db    0
.eh_frame:00000000000081C8                 db    0
.eh_frame:00000000000081C9                 db  42h ; B
.eh_frame:00000000000081CA                 db  0Eh
.eh_frame:00000000000081CB                 db  10h
.eh_frame:00000000000081CC                 db  8Fh
.eh_frame:00000000000081CD                 db    2
.eh_frame:00000000000081CE                 db  42h ; B
.eh_frame:00000000000081CF                 db  0Eh
.eh_frame:00000000000081D0                 db  18h
.eh_frame:00000000000081D1                 db  8Eh
.eh_frame:00000000000081D2                 db    3
.eh_frame:00000000000081D3                 db  42h ; B
.eh_frame:00000000000081D4                 db  0Eh
.eh_frame:00000000000081D5                 db  20h
.eh_frame:00000000000081D6                 db  8Dh
.eh_frame:00000000000081D7                 db    4
.eh_frame:00000000000081D8                 db  42h ; B
.eh_frame:00000000000081D9                 db  0Eh
.eh_frame:00000000000081DA                 db  28h ; (
.eh_frame:00000000000081DB                 db  8Ch
.eh_frame:00000000000081DC                 db    5
.eh_frame:00000000000081DD                 db  41h ; A
.eh_frame:00000000000081DE                 db  0Eh
.eh_frame:00000000000081DF                 db  30h ; 0
.eh_frame:00000000000081E0                 db  86h
.eh_frame:00000000000081E1                 db    6
.eh_frame:00000000000081E2                 db  41h ; A
.eh_frame:00000000000081E3                 db  0Eh
.eh_frame:00000000000081E4                 db  38h ; 8
.eh_frame:00000000000081E5                 db  83h
.eh_frame:00000000000081E6                 db    7
.eh_frame:00000000000081E7                 db  44h ; D
.eh_frame:00000000000081E8                 db  0Eh
.eh_frame:00000000000081E9                 db  40h ; @
.eh_frame:00000000000081EA                 db    2
.eh_frame:00000000000081EB                 db  4Ah ; J
.eh_frame:00000000000081EC                 db  0Ah
.eh_frame:00000000000081ED                 db  0Eh
.eh_frame:00000000000081EE                 db  38h ; 8
.eh_frame:00000000000081EF                 db  44h ; D
.eh_frame:00000000000081F0                 db  0Eh
.eh_frame:00000000000081F1                 db  30h ; 0
.eh_frame:00000000000081F2                 db  41h ; A
.eh_frame:00000000000081F3                 db  0Eh
.eh_frame:00000000000081F4                 db  28h ; (
.eh_frame:00000000000081F5                 db  42h ; B
.eh_frame:00000000000081F6                 db  0Eh
.eh_frame:00000000000081F7                 db  20h
.eh_frame:00000000000081F8                 db  42h ; B
.eh_frame:00000000000081F9                 db  0Eh
.eh_frame:00000000000081FA                 db  18h
.eh_frame:00000000000081FB                 db  42h ; B
.eh_frame:00000000000081FC                 db  0Eh
.eh_frame:00000000000081FD                 db  10h
.eh_frame:00000000000081FE                 db  42h ; B
.eh_frame:00000000000081FF                 db  0Eh
.eh_frame:0000000000008200                 db    8
.eh_frame:0000000000008201                 db  41h ; A
.eh_frame:0000000000008202                 db  0Bh
.eh_frame:0000000000008203                 db    0
.eh_frame:0000000000008204                 db  10h
.eh_frame:0000000000008205                 db    0
.eh_frame:0000000000008206                 db    0
.eh_frame:0000000000008207                 db    0
.eh_frame:0000000000008208                 db 0F8h
.eh_frame:0000000000008209                 db    4
.eh_frame:000000000000820A                 db    0
.eh_frame:000000000000820B                 db    0
.eh_frame:000000000000820C                 db 0F4h
.eh_frame:000000000000820D                 db 0ADh
.eh_frame:000000000000820E                 db 0FFh
.eh_frame:000000000000820F                 db 0FFh
.eh_frame:0000000000008210                 db  31h ; 1
.eh_frame:0000000000008211                 db    0
.eh_frame:0000000000008212                 db    0
.eh_frame:0000000000008213                 db    0
.eh_frame:0000000000008214                 db    0
.eh_frame:0000000000008215                 db    0
.eh_frame:0000000000008216                 db    0
.eh_frame:0000000000008217                 db    0
.eh_frame:0000000000008218                 db  10h
.eh_frame:0000000000008219                 db    0
.eh_frame:000000000000821A                 db    0
.eh_frame:000000000000821B                 db    0
.eh_frame:000000000000821C                 db  0Ch
.eh_frame:000000000000821D                 db    5
.eh_frame:000000000000821E                 db    0
.eh_frame:000000000000821F                 db    0
.eh_frame:0000000000008220                 db  20h
.eh_frame:0000000000008221                 db 0AEh
.eh_frame:0000000000008222                 db 0FFh
.eh_frame:0000000000008223                 db 0FFh
.eh_frame:0000000000008224                 db  20h
.eh_frame:0000000000008225                 db    0
.eh_frame:0000000000008226                 db    0
.eh_frame:0000000000008227                 db    0
.eh_frame:0000000000008228                 db    0
.eh_frame:0000000000008229                 db    0
.eh_frame:000000000000822A                 db    0
.eh_frame:000000000000822B                 db    0
.eh_frame:000000000000822C                 db  48h ; H
.eh_frame:000000000000822D                 db    0
.eh_frame:000000000000822E                 db    0
.eh_frame:000000000000822F                 db    0
.eh_frame:0000000000008230                 db  20h
.eh_frame:0000000000008231                 db    5
.eh_frame:0000000000008232                 db    0
.eh_frame:0000000000008233                 db    0
.eh_frame:0000000000008234                 db  2Ch ; ,
.eh_frame:0000000000008235                 db 0AEh
.eh_frame:0000000000008236                 db 0FFh
.eh_frame:0000000000008237                 db 0FFh
.eh_frame:0000000000008238                 db 0B4h
.eh_frame:0000000000008239                 db    1
.eh_frame:000000000000823A                 db    0
.eh_frame:000000000000823B                 db    0
.eh_frame:000000000000823C                 db    0
.eh_frame:000000000000823D                 db  42h ; B
.eh_frame:000000000000823E                 db  0Eh
.eh_frame:000000000000823F                 db  10h
.eh_frame:0000000000008240                 db  8Fh
.eh_frame:0000000000008241                 db    2
.eh_frame:0000000000008242                 db  42h ; B
.eh_frame:0000000000008243                 db  0Eh
.eh_frame:0000000000008244                 db  18h
.eh_frame:0000000000008245                 db  8Eh
.eh_frame:0000000000008246                 db    3
.eh_frame:0000000000008247                 db  49h ; I
.eh_frame:0000000000008248                 db  0Eh
.eh_frame:0000000000008249                 db  20h
.eh_frame:000000000000824A                 db  8Dh
.eh_frame:000000000000824B                 db    4
.eh_frame:000000000000824C                 db  42h ; B
.eh_frame:000000000000824D                 db  0Eh
.eh_frame:000000000000824E                 db  28h ; (
.eh_frame:000000000000824F                 db  8Ch
.eh_frame:0000000000008250                 db    5
.eh_frame:0000000000008251                 db  44h ; D
.eh_frame:0000000000008252                 db  0Eh
.eh_frame:0000000000008253                 db  30h ; 0
.eh_frame:0000000000008254                 db  86h
.eh_frame:0000000000008255                 db    6
.eh_frame:0000000000008256                 db  41h ; A
.eh_frame:0000000000008257                 db  0Eh
.eh_frame:0000000000008258                 db  38h ; 8
.eh_frame:0000000000008259                 db  83h
.eh_frame:000000000000825A                 db    7
.eh_frame:000000000000825B                 db  52h ; R
.eh_frame:000000000000825C                 db  0Eh
.eh_frame:000000000000825D                 db  40h ; @
.eh_frame:000000000000825E                 db    2
.eh_frame:000000000000825F                 db 0D8h
.eh_frame:0000000000008260                 db  0Ah
.eh_frame:0000000000008261                 db  0Eh
.eh_frame:0000000000008262                 db  38h ; 8
.eh_frame:0000000000008263                 db  44h ; D
.eh_frame:0000000000008264                 db  0Eh
.eh_frame:0000000000008265                 db  30h ; 0
.eh_frame:0000000000008266                 db  41h ; A
.eh_frame:0000000000008267                 db  0Eh
.eh_frame:0000000000008268                 db  28h ; (
.eh_frame:0000000000008269                 db  42h ; B
.eh_frame:000000000000826A                 db  0Eh
.eh_frame:000000000000826B                 db  20h
.eh_frame:000000000000826C                 db  42h ; B
.eh_frame:000000000000826D                 db  0Eh
.eh_frame:000000000000826E                 db  18h
.eh_frame:000000000000826F                 db  42h ; B
.eh_frame:0000000000008270                 db  0Eh
.eh_frame:0000000000008271                 db  10h
.eh_frame:0000000000008272                 db  42h ; B
.eh_frame:0000000000008273                 db  0Eh
.eh_frame:0000000000008274                 db    8
.eh_frame:0000000000008275                 db  45h ; E
.eh_frame:0000000000008276                 db  0Bh
.eh_frame:0000000000008277                 db    0
.eh_frame:0000000000008278                 db  28h ; (
.eh_frame:0000000000008279                 db    0
.eh_frame:000000000000827A                 db    0
.eh_frame:000000000000827B                 db    0
.eh_frame:000000000000827C                 db  6Ch ; l
.eh_frame:000000000000827D                 db    5
.eh_frame:000000000000827E                 db    0
.eh_frame:000000000000827F                 db    0
.eh_frame:0000000000008280                 db 0A0h
.eh_frame:0000000000008281                 db 0AFh
.eh_frame:0000000000008282                 db 0FFh
.eh_frame:0000000000008283                 db 0FFh
.eh_frame:0000000000008284                 db  90h
.eh_frame:0000000000008285                 db    0
.eh_frame:0000000000008286                 db    0
.eh_frame:0000000000008287                 db    0
.eh_frame:0000000000008288                 db    0
.eh_frame:0000000000008289                 db  42h ; B
.eh_frame:000000000000828A                 db  0Eh
.eh_frame:000000000000828B                 db  10h
.eh_frame:000000000000828C                 db  8Ch
.eh_frame:000000000000828D                 db    2
.eh_frame:000000000000828E                 db  41h ; A
.eh_frame:000000000000828F                 db  0Eh
.eh_frame:0000000000008290                 db  18h
.eh_frame:0000000000008291                 db  86h
.eh_frame:0000000000008292                 db    3
.eh_frame:0000000000008293                 db  44h ; D
.eh_frame:0000000000008294                 db  0Eh
.eh_frame:0000000000008295                 db  20h
.eh_frame:0000000000008296                 db  83h
.eh_frame:0000000000008297                 db    4
.eh_frame:0000000000008298                 db    2
.eh_frame:0000000000008299                 db  85h
.eh_frame:000000000000829A                 db  0Eh
.eh_frame:000000000000829B                 db  18h
.eh_frame:000000000000829C                 db  41h ; A
.eh_frame:000000000000829D                 db  0Eh
.eh_frame:000000000000829E                 db  10h
.eh_frame:000000000000829F                 db  42h ; B
.eh_frame:00000000000082A0                 db  0Eh
.eh_frame:00000000000082A1                 db    8
.eh_frame:00000000000082A2                 db    0
.eh_frame:00000000000082A3                 db    0
.eh_frame:00000000000082A4                 db  28h ; (
.eh_frame:00000000000082A5                 db    0
.eh_frame:00000000000082A6                 db    0
.eh_frame:00000000000082A7                 db    0
.eh_frame:00000000000082A8                 db  98h
.eh_frame:00000000000082A9                 db    5
.eh_frame:00000000000082AA                 db    0
.eh_frame:00000000000082AB                 db    0
.eh_frame:00000000000082AC                 db    4
.eh_frame:00000000000082AD                 db 0B0h
.eh_frame:00000000000082AE                 db 0FFh
.eh_frame:00000000000082AF                 db 0FFh
.eh_frame:00000000000082B0                 db 0D6h
.eh_frame:00000000000082B1                 db    0
.eh_frame:00000000000082B2                 db    0
.eh_frame:00000000000082B3                 db    0
.eh_frame:00000000000082B4                 db    0
.eh_frame:00000000000082B5                 db  42h ; B
.eh_frame:00000000000082B6                 db  0Eh
.eh_frame:00000000000082B7                 db  10h
.eh_frame:00000000000082B8                 db  8Ch
.eh_frame:00000000000082B9                 db    2
.eh_frame:00000000000082BA                 db  41h ; A
.eh_frame:00000000000082BB                 db  0Eh
.eh_frame:00000000000082BC                 db  18h
.eh_frame:00000000000082BD                 db  86h
.eh_frame:00000000000082BE                 db    3
.eh_frame:00000000000082BF                 db  44h ; D
.eh_frame:00000000000082C0                 db  0Eh
.eh_frame:00000000000082C1                 db  20h
.eh_frame:00000000000082C2                 db  83h
.eh_frame:00000000000082C3                 db    4
.eh_frame:00000000000082C4                 db    2
.eh_frame:00000000000082C5                 db 0C4h
.eh_frame:00000000000082C6                 db  0Eh
.eh_frame:00000000000082C7                 db  18h
.eh_frame:00000000000082C8                 db  44h ; D
.eh_frame:00000000000082C9                 db  0Eh
.eh_frame:00000000000082CA                 db  10h
.eh_frame:00000000000082CB                 db  42h ; B
.eh_frame:00000000000082CC                 db  0Eh
.eh_frame:00000000000082CD                 db    8
.eh_frame:00000000000082CE                 db    0
.eh_frame:00000000000082CF                 db    0
.eh_frame:00000000000082D0                 db  34h ; 4
.eh_frame:00000000000082D1                 db    0
.eh_frame:00000000000082D2                 db    0
.eh_frame:00000000000082D3                 db    0
.eh_frame:00000000000082D4                 db 0C4h
.eh_frame:00000000000082D5                 db    5
.eh_frame:00000000000082D6                 db    0
.eh_frame:00000000000082D7                 db    0
.eh_frame:00000000000082D8                 db 0B8h
.eh_frame:00000000000082D9                 db 0B0h
.eh_frame:00000000000082DA                 db 0FFh
.eh_frame:00000000000082DB                 db 0FFh
.eh_frame:00000000000082DC                 db  3Eh ; >
.eh_frame:00000000000082DD                 db    2
.eh_frame:00000000000082DE                 db    0
.eh_frame:00000000000082DF                 db    0
.eh_frame:00000000000082E0                 db    0
.eh_frame:00000000000082E1                 db  42h ; B
.eh_frame:00000000000082E2                 db  0Eh
.eh_frame:00000000000082E3                 db  10h
.eh_frame:00000000000082E4                 db  8Ch
.eh_frame:00000000000082E5                 db    2
.eh_frame:00000000000082E6                 db  41h ; A
.eh_frame:00000000000082E7                 db  0Eh
.eh_frame:00000000000082E8                 db  18h
.eh_frame:00000000000082E9                 db  86h
.eh_frame:00000000000082EA                 db    3
.eh_frame:00000000000082EB                 db  44h ; D
.eh_frame:00000000000082EC                 db  0Eh
.eh_frame:00000000000082ED                 db  20h
.eh_frame:00000000000082EE                 db  83h
.eh_frame:00000000000082EF                 db    4
.eh_frame:00000000000082F0                 db  44h ; D
.eh_frame:00000000000082F1                 db  0Eh
.eh_frame:00000000000082F2                 db  80h
.eh_frame:00000000000082F3                 db    1
.eh_frame:00000000000082F4                 db    3
.eh_frame:00000000000082F5                 db  91h
.eh_frame:00000000000082F6                 db    1
.eh_frame:00000000000082F7                 db  0Ah
.eh_frame:00000000000082F8                 db  0Eh
.eh_frame:00000000000082F9                 db  20h
.eh_frame:00000000000082FA                 db  41h ; A
.eh_frame:00000000000082FB                 db  0Eh
.eh_frame:00000000000082FC                 db  18h
.eh_frame:00000000000082FD                 db  41h ; A
.eh_frame:00000000000082FE                 db  0Eh
.eh_frame:00000000000082FF                 db  10h
.eh_frame:0000000000008300                 db  42h ; B
.eh_frame:0000000000008301                 db  0Eh
.eh_frame:0000000000008302                 db    8
.eh_frame:0000000000008303                 db  48h ; H
.eh_frame:0000000000008304                 db  0Bh
.eh_frame:0000000000008305                 db    0
.eh_frame:0000000000008306                 db    0
.eh_frame:0000000000008307                 db    0
.eh_frame:0000000000008308                 db  38h ; 8
.eh_frame:0000000000008309                 db    0
.eh_frame:000000000000830A                 db    0
.eh_frame:000000000000830B                 db    0
.eh_frame:000000000000830C                 db 0FCh
.eh_frame:000000000000830D                 db    5
.eh_frame:000000000000830E                 db    0
.eh_frame:000000000000830F                 db    0
.eh_frame:0000000000008310                 db 0C0h
.eh_frame:0000000000008311                 db 0B2h
.eh_frame:0000000000008312                 db 0FFh
.eh_frame:0000000000008313                 db 0FFh
.eh_frame:0000000000008314                 db  84h
.eh_frame:0000000000008315                 db    2
.eh_frame:0000000000008316                 db    0
.eh_frame:0000000000008317                 db    0
.eh_frame:0000000000008318                 db    0
.eh_frame:0000000000008319                 db  42h ; B
.eh_frame:000000000000831A                 db  0Eh
.eh_frame:000000000000831B                 db  10h
.eh_frame:000000000000831C                 db  8Dh
.eh_frame:000000000000831D                 db    2
.eh_frame:000000000000831E                 db  42h ; B
.eh_frame:000000000000831F                 db  0Eh
.eh_frame:0000000000008320                 db  18h
.eh_frame:0000000000008321                 db  8Ch
.eh_frame:0000000000008322                 db    3
.eh_frame:0000000000008323                 db  41h ; A
.eh_frame:0000000000008324                 db  0Eh
.eh_frame:0000000000008325                 db  20h
.eh_frame:0000000000008326                 db  86h
.eh_frame:0000000000008327                 db    4
.eh_frame:0000000000008328                 db  41h ; A
.eh_frame:0000000000008329                 db  0Eh
.eh_frame:000000000000832A                 db  28h ; (
.eh_frame:000000000000832B                 db  83h
.eh_frame:000000000000832C                 db    5
.eh_frame:000000000000832D                 db  44h ; D
.eh_frame:000000000000832E                 db  0Eh
.eh_frame:000000000000832F                 db  40h ; @
.eh_frame:0000000000008330                 db    2
.eh_frame:0000000000008331                 db  5Ah ; Z
.eh_frame:0000000000008332                 db  0Ah
.eh_frame:0000000000008333                 db  0Eh
.eh_frame:0000000000008334                 db  28h ; (
.eh_frame:0000000000008335                 db  41h ; A
.eh_frame:0000000000008336                 db  0Eh
.eh_frame:0000000000008337                 db  20h
.eh_frame:0000000000008338                 db  41h ; A
.eh_frame:0000000000008339                 db  0Eh
.eh_frame:000000000000833A                 db  18h
.eh_frame:000000000000833B                 db  42h ; B
.eh_frame:000000000000833C                 db  0Eh
.eh_frame:000000000000833D                 db  10h
.eh_frame:000000000000833E                 db  42h ; B
.eh_frame:000000000000833F                 db  0Eh
.eh_frame:0000000000008340                 db    8
.eh_frame:0000000000008341                 db  46h ; F
.eh_frame:0000000000008342                 db  0Bh
.eh_frame:0000000000008343                 db    0
.eh_frame:0000000000008344                 db  20h
.eh_frame:0000000000008345                 db    0
.eh_frame:0000000000008346                 db    0
.eh_frame:0000000000008347                 db    0
.eh_frame:0000000000008348                 db  38h ; 8
.eh_frame:0000000000008349                 db    6
.eh_frame:000000000000834A                 db    0
.eh_frame:000000000000834B                 db    0
.eh_frame:000000000000834C                 db  14h
.eh_frame:000000000000834D                 db 0B5h
.eh_frame:000000000000834E                 db 0FFh
.eh_frame:000000000000834F                 db 0FFh
.eh_frame:0000000000008350                 db  59h ; Y
.eh_frame:0000000000008351                 db    0
.eh_frame:0000000000008352                 db    0
.eh_frame:0000000000008353                 db    0
.eh_frame:0000000000008354                 db    0
.eh_frame:0000000000008355                 db  41h ; A
.eh_frame:0000000000008356                 db  0Eh
.eh_frame:0000000000008357                 db  10h
.eh_frame:0000000000008358                 db  83h
.eh_frame:0000000000008359                 db    2
.eh_frame:000000000000835A                 db  47h ; G
.eh_frame:000000000000835B                 db  0Eh
.eh_frame:000000000000835C                 db  20h
.eh_frame:000000000000835D                 db  7Ch ; |
.eh_frame:000000000000835E                 db  0Ah
.eh_frame:000000000000835F                 db  0Eh
.eh_frame:0000000000008360                 db  10h
.eh_frame:0000000000008361                 db  41h ; A
.eh_frame:0000000000008362                 db  0Eh
.eh_frame:0000000000008363                 db    8
.eh_frame:0000000000008364                 db  4Bh ; K
.eh_frame:0000000000008365                 db  0Bh
.eh_frame:0000000000008366                 db    0
.eh_frame:0000000000008367                 db    0
.eh_frame:0000000000008368                 db  34h ; 4
.eh_frame:0000000000008369                 db    0
.eh_frame:000000000000836A                 db    0
.eh_frame:000000000000836B                 db    0
.eh_frame:000000000000836C                 db  5Ch ; \
.eh_frame:000000000000836D                 db    6
.eh_frame:000000000000836E                 db    0
.eh_frame:000000000000836F                 db    0
.eh_frame:0000000000008370                 db  50h ; P
.eh_frame:0000000000008371                 db 0B5h
.eh_frame:0000000000008372                 db 0FFh
.eh_frame:0000000000008373                 db 0FFh
.eh_frame:0000000000008374                 db    3
.eh_frame:0000000000008375                 db    2
.eh_frame:0000000000008376                 db    0
.eh_frame:0000000000008377                 db    0
.eh_frame:0000000000008378                 db    0
.eh_frame:0000000000008379                 db  42h ; B
.eh_frame:000000000000837A                 db  0Eh
.eh_frame:000000000000837B                 db  10h
.eh_frame:000000000000837C                 db  8Ch
.eh_frame:000000000000837D                 db    2
.eh_frame:000000000000837E                 db  41h ; A
.eh_frame:000000000000837F                 db  0Eh
.eh_frame:0000000000008380                 db  18h
.eh_frame:0000000000008381                 db  86h
.eh_frame:0000000000008382                 db    3
.eh_frame:0000000000008383                 db  46h ; F
.eh_frame:0000000000008384                 db  0Eh
.eh_frame:0000000000008385                 db  20h
.eh_frame:0000000000008386                 db  83h
.eh_frame:0000000000008387                 db    4
.eh_frame:0000000000008388                 db  47h ; G
.eh_frame:0000000000008389                 db  0Eh
.eh_frame:000000000000838A                 db  30h ; 0
.eh_frame:000000000000838B                 db    2
.eh_frame:000000000000838C                 db  4Ah ; J
.eh_frame:000000000000838D                 db  0Ah
.eh_frame:000000000000838E                 db  0Eh
.eh_frame:000000000000838F                 db  20h
.eh_frame:0000000000008390                 db  41h ; A
.eh_frame:0000000000008391                 db  0Eh
.eh_frame:0000000000008392                 db  18h
.eh_frame:0000000000008393                 db  41h ; A
.eh_frame:0000000000008394                 db  0Eh
.eh_frame:0000000000008395                 db  10h
.eh_frame:0000000000008396                 db  42h ; B
.eh_frame:0000000000008397                 db  0Eh
.eh_frame:0000000000008398                 db    8
.eh_frame:0000000000008399                 db  42h ; B
.eh_frame:000000000000839A                 db  0Bh
.eh_frame:000000000000839B                 db    0
.eh_frame:000000000000839C                 db    0
.eh_frame:000000000000839D                 db    0
.eh_frame:000000000000839E                 db    0
.eh_frame:000000000000839F                 db    0
.eh_frame:00000000000083A0                 db  24h ; $
.eh_frame:00000000000083A1                 db    0
.eh_frame:00000000000083A2                 db    0
.eh_frame:00000000000083A3                 db    0
.eh_frame:00000000000083A4                 db  94h
.eh_frame:00000000000083A5                 db    6
.eh_frame:00000000000083A6                 db    0
.eh_frame:00000000000083A7                 db    0
.eh_frame:00000000000083A8                 db  28h ; (
.eh_frame:00000000000083A9                 db 0B7h
.eh_frame:00000000000083AA                 db 0FFh
.eh_frame:00000000000083AB                 db 0FFh
.eh_frame:00000000000083AC                 db  27h ; '
.eh_frame:00000000000083AD                 db    0
.eh_frame:00000000000083AE                 db    0
.eh_frame:00000000000083AF                 db    0
.eh_frame:00000000000083B0                 db    0
.eh_frame:00000000000083B1                 db  41h ; A
.eh_frame:00000000000083B2                 db  0Eh
.eh_frame:00000000000083B3                 db  10h
.eh_frame:00000000000083B4                 db  86h
.eh_frame:00000000000083B5                 db    2
.eh_frame:00000000000083B6                 db  41h ; A
.eh_frame:00000000000083B7                 db  0Eh
.eh_frame:00000000000083B8                 db  18h
.eh_frame:00000000000083B9                 db  83h
.eh_frame:00000000000083BA                 db    3
.eh_frame:00000000000083BB                 db  4Ah ; J
.eh_frame:00000000000083BC                 db  0Eh
.eh_frame:00000000000083BD                 db  20h
.eh_frame:00000000000083BE                 db  52h ; R
.eh_frame:00000000000083BF                 db  0Eh
.eh_frame:00000000000083C0                 db  18h
.eh_frame:00000000000083C1                 db  44h ; D
.eh_frame:00000000000083C2                 db  0Eh
.eh_frame:00000000000083C3                 db  10h
.eh_frame:00000000000083C4                 db  41h ; A
.eh_frame:00000000000083C5                 db  0Eh
.eh_frame:00000000000083C6                 db    8
.eh_frame:00000000000083C7                 db    0
.eh_frame:00000000000083C8                 db  10h
.eh_frame:00000000000083C9                 db    0
.eh_frame:00000000000083CA                 db    0
.eh_frame:00000000000083CB                 db    0
.eh_frame:00000000000083CC                 db 0BCh
.eh_frame:00000000000083CD                 db    6
.eh_frame:00000000000083CE                 db    0
.eh_frame:00000000000083CF                 db    0
.eh_frame:00000000000083D0                 db  30h ; 0
.eh_frame:00000000000083D1                 db 0B7h
.eh_frame:00000000000083D2                 db 0FFh
.eh_frame:00000000000083D3                 db 0FFh
.eh_frame:00000000000083D4                 db  0Dh
.eh_frame:00000000000083D5                 db    0
.eh_frame:00000000000083D6                 db    0
.eh_frame:00000000000083D7                 db    0
.eh_frame:00000000000083D8                 db    0
.eh_frame:00000000000083D9                 db    0
.eh_frame:00000000000083DA                 db    0
.eh_frame:00000000000083DB                 db    0
.eh_frame:00000000000083DC                 db  14h
.eh_frame:00000000000083DD                 db    0
.eh_frame:00000000000083DE                 db    0
.eh_frame:00000000000083DF                 db    0
.eh_frame:00000000000083E0                 db 0D0h
.eh_frame:00000000000083E1                 db    6
.eh_frame:00000000000083E2                 db    0
.eh_frame:00000000000083E3                 db    0
.eh_frame:00000000000083E4                 db  2Ch ; ,
.eh_frame:00000000000083E5                 db 0B7h
.eh_frame:00000000000083E6                 db 0FFh
.eh_frame:00000000000083E7                 db 0FFh
.eh_frame:00000000000083E8                 db  2Eh ; .
.eh_frame:00000000000083E9                 db    0
.eh_frame:00000000000083EA                 db    0
.eh_frame:00000000000083EB                 db    0
.eh_frame:00000000000083EC                 db    0
.eh_frame:00000000000083ED                 db  5Eh ; ^
.eh_frame:00000000000083EE                 db  0Eh
.eh_frame:00000000000083EF                 db  10h
.eh_frame:00000000000083F0                 db  4Fh ; O
.eh_frame:00000000000083F1                 db  0Eh
.eh_frame:00000000000083F2                 db    8
.eh_frame:00000000000083F3                 db    0
.eh_frame:00000000000083F4                 db  14h
.eh_frame:00000000000083F5                 db    0
.eh_frame:00000000000083F6                 db    0
.eh_frame:00000000000083F7                 db    0
.eh_frame:00000000000083F8                 db 0E8h
.eh_frame:00000000000083F9                 db    6
.eh_frame:00000000000083FA                 db    0
.eh_frame:00000000000083FB                 db    0
.eh_frame:00000000000083FC                 db  44h ; D
.eh_frame:00000000000083FD                 db 0B7h
.eh_frame:00000000000083FE                 db 0FFh
.eh_frame:00000000000083FF                 db 0FFh
.eh_frame:0000000000008400                 db  33h ; 3
.eh_frame:0000000000008401                 db    0
.eh_frame:0000000000008402                 db    0
.eh_frame:0000000000008403                 db    0
.eh_frame:0000000000008404                 db    0
.eh_frame:0000000000008405                 db  5Eh ; ^
.eh_frame:0000000000008406                 db  0Eh
.eh_frame:0000000000008407                 db  10h
.eh_frame:0000000000008408                 db  54h ; T
.eh_frame:0000000000008409                 db  0Eh
.eh_frame:000000000000840A                 db    8
.eh_frame:000000000000840B                 db    0
.eh_frame:000000000000840C                 db  18h
.eh_frame:000000000000840D                 db    0
.eh_frame:000000000000840E                 db    0
.eh_frame:000000000000840F                 db    0
.eh_frame:0000000000008410                 db    0
.eh_frame:0000000000008411                 db    7
.eh_frame:0000000000008412                 db    0
.eh_frame:0000000000008413                 db    0
.eh_frame:0000000000008414                 db  6Ch ; l
.eh_frame:0000000000008415                 db 0B7h
.eh_frame:0000000000008416                 db 0FFh
.eh_frame:0000000000008417                 db 0FFh
.eh_frame:0000000000008418                 db  15h
.eh_frame:0000000000008419                 db    0
.eh_frame:000000000000841A                 db    0
.eh_frame:000000000000841B                 db    0
.eh_frame:000000000000841C                 db    0
.eh_frame:000000000000841D                 db  41h ; A
.eh_frame:000000000000841E                 db  0Eh
.eh_frame:000000000000841F                 db  10h
.eh_frame:0000000000008420                 db  83h
.eh_frame:0000000000008421                 db    2
.eh_frame:0000000000008422                 db  4Fh ; O
.eh_frame:0000000000008423                 db  0Eh
.eh_frame:0000000000008424                 db    8
.eh_frame:0000000000008425                 db    0
.eh_frame:0000000000008426                 db    0
.eh_frame:0000000000008427                 db    0
.eh_frame:0000000000008428                 db  1Ch
.eh_frame:0000000000008429                 db    0
.eh_frame:000000000000842A                 db    0
.eh_frame:000000000000842B                 db    0
.eh_frame:000000000000842C                 db  1Ch
.eh_frame:000000000000842D                 db    7
.eh_frame:000000000000842E                 db    0
.eh_frame:000000000000842F                 db    0
.eh_frame:0000000000008430                 db  70h ; p
.eh_frame:0000000000008431                 db 0B7h
.eh_frame:0000000000008432                 db 0FFh
.eh_frame:0000000000008433                 db 0FFh
.eh_frame:0000000000008434                 db  9Fh
.eh_frame:0000000000008435                 db    0
.eh_frame:0000000000008436                 db    0
.eh_frame:0000000000008437                 db    0
.eh_frame:0000000000008438                 db    0
.eh_frame:0000000000008439                 db  44h ; D
.eh_frame:000000000000843A                 db  0Eh
.eh_frame:000000000000843B                 db  10h
.eh_frame:000000000000843C                 db  83h
.eh_frame:000000000000843D                 db    2
.eh_frame:000000000000843E                 db    2
.eh_frame:000000000000843F                 db  78h ; x
.eh_frame:0000000000008440                 db  0Ah
.eh_frame:0000000000008441                 db  0Eh
.eh_frame:0000000000008442                 db    8
.eh_frame:0000000000008443                 db  41h ; A
.eh_frame:0000000000008444                 db  0Bh
.eh_frame:0000000000008445                 db    0
.eh_frame:0000000000008446                 db    0
.eh_frame:0000000000008447                 db    0
.eh_frame:0000000000008448                 db  40h ; @
.eh_frame:0000000000008449                 db    0
.eh_frame:000000000000844A                 db    0
.eh_frame:000000000000844B                 db    0
.eh_frame:000000000000844C                 db  3Ch ; <
.eh_frame:000000000000844D                 db    7
.eh_frame:000000000000844E                 db    0
.eh_frame:000000000000844F                 db    0
.eh_frame:0000000000008450                 db 0F0h
.eh_frame:0000000000008451                 db 0B7h
.eh_frame:0000000000008452                 db 0FFh
.eh_frame:0000000000008453                 db 0FFh
.eh_frame:0000000000008454                 db 0E7h
.eh_frame:0000000000008455                 db    0
.eh_frame:0000000000008456                 db    0
.eh_frame:0000000000008457                 db    0
.eh_frame:0000000000008458                 db    0
.eh_frame:0000000000008459                 db  41h ; A
.eh_frame:000000000000845A                 db  0Eh
.eh_frame:000000000000845B                 db  10h
.eh_frame:000000000000845C                 db  86h
.eh_frame:000000000000845D                 db    2
.eh_frame:000000000000845E                 db  41h ; A
.eh_frame:000000000000845F                 db  0Eh
.eh_frame:0000000000008460                 db  18h
.eh_frame:0000000000008461                 db  83h
.eh_frame:0000000000008462                 db    3
.eh_frame:0000000000008463                 db  49h ; I
.eh_frame:0000000000008464                 db  0Eh
.eh_frame:0000000000008465                 db  20h
.eh_frame:0000000000008466                 db  6Eh ; n
.eh_frame:0000000000008467                 db  0Ah
.eh_frame:0000000000008468                 db  0Eh
.eh_frame:0000000000008469                 db  18h
.eh_frame:000000000000846A                 db  41h ; A
.eh_frame:000000000000846B                 db  0Eh
.eh_frame:000000000000846C                 db  10h
.eh_frame:000000000000846D                 db  41h ; A
.eh_frame:000000000000846E                 db  0Eh
.eh_frame:000000000000846F                 db    8
.eh_frame:0000000000008470                 db  45h ; E
.eh_frame:0000000000008471                 db  0Bh
.eh_frame:0000000000008472                 db    2
.eh_frame:0000000000008473                 db  4Ah ; J
.eh_frame:0000000000008474                 db  0Ah
.eh_frame:0000000000008475                 db  0Eh
.eh_frame:0000000000008476                 db  18h
.eh_frame:0000000000008477                 db  41h ; A
.eh_frame:0000000000008478                 db  0Eh
.eh_frame:0000000000008479                 db  10h
.eh_frame:000000000000847A                 db  41h ; A
.eh_frame:000000000000847B                 db  0Eh
.eh_frame:000000000000847C                 db    8
.eh_frame:000000000000847D                 db  44h ; D
.eh_frame:000000000000847E                 db  0Bh
.eh_frame:000000000000847F                 db    2
.eh_frame:0000000000008480                 db  54h ; T
.eh_frame:0000000000008481                 db  0Eh
.eh_frame:0000000000008482                 db  18h
.eh_frame:0000000000008483                 db  41h ; A
.eh_frame:0000000000008484                 db  0Eh
.eh_frame:0000000000008485                 db  10h
.eh_frame:0000000000008486                 db  41h ; A
.eh_frame:0000000000008487                 db  0Eh
.eh_frame:0000000000008488                 db    8
.eh_frame:0000000000008489                 db    0
.eh_frame:000000000000848A                 db    0
.eh_frame:000000000000848B                 db    0
.eh_frame:000000000000848C                 db  74h ; t
.eh_frame:000000000000848D                 db    0
.eh_frame:000000000000848E                 db    0
.eh_frame:000000000000848F                 db    0
.eh_frame:0000000000008490                 db  80h
.eh_frame:0000000000008491                 db    7
.eh_frame:0000000000008492                 db    0
.eh_frame:0000000000008493                 db    0
.eh_frame:0000000000008494                 db  9Ch
.eh_frame:0000000000008495                 db 0B8h
.eh_frame:0000000000008496                 db 0FFh
.eh_frame:0000000000008497                 db 0FFh
.eh_frame:0000000000008498                 db  34h ; 4
.eh_frame:0000000000008499                 db  12h
.eh_frame:000000000000849A                 db    0
.eh_frame:000000000000849B                 db    0
.eh_frame:000000000000849C                 db    0
.eh_frame:000000000000849D                 db  42h ; B
.eh_frame:000000000000849E                 db  0Eh
.eh_frame:000000000000849F                 db  10h
.eh_frame:00000000000084A0                 db  8Fh
.eh_frame:00000000000084A1                 db    2
.eh_frame:00000000000084A2                 db  42h ; B
.eh_frame:00000000000084A3                 db  0Eh
.eh_frame:00000000000084A4                 db  18h
.eh_frame:00000000000084A5                 db  8Eh
.eh_frame:00000000000084A6                 db    3
.eh_frame:00000000000084A7                 db  45h ; E
.eh_frame:00000000000084A8                 db  0Eh
.eh_frame:00000000000084A9                 db  20h
.eh_frame:00000000000084AA                 db  8Dh
.eh_frame:00000000000084AB                 db    4
.eh_frame:00000000000084AC                 db  42h ; B
.eh_frame:00000000000084AD                 db  0Eh
.eh_frame:00000000000084AE                 db  28h ; (
.eh_frame:00000000000084AF                 db  8Ch
.eh_frame:00000000000084B0                 db    5
.eh_frame:00000000000084B1                 db  44h ; D
.eh_frame:00000000000084B2                 db  0Eh
.eh_frame:00000000000084B3                 db  30h ; 0
.eh_frame:00000000000084B4                 db  86h
.eh_frame:00000000000084B5                 db    6
.eh_frame:00000000000084B6                 db  41h ; A
.eh_frame:00000000000084B7                 db  0Eh
.eh_frame:00000000000084B8                 db  38h ; 8
.eh_frame:00000000000084B9                 db  83h
.eh_frame:00000000000084BA                 db    7
.eh_frame:00000000000084BB                 db  53h ; S
.eh_frame:00000000000084BC                 db  0Eh
.eh_frame:00000000000084BD                 db 0F0h
.eh_frame:00000000000084BE                 db    1
.eh_frame:00000000000084BF                 db    3
.eh_frame:00000000000084C0                 db  81h
.eh_frame:00000000000084C1                 db  0Bh
.eh_frame:00000000000084C2                 db  0Eh
.eh_frame:00000000000084C3                 db 0F8h
.eh_frame:00000000000084C4                 db    1
.eh_frame:00000000000084C5                 db  4Ah ; J
.eh_frame:00000000000084C6                 db  0Eh
.eh_frame:00000000000084C7                 db  80h
.eh_frame:00000000000084C8                 db    2
.eh_frame:00000000000084C9                 db  44h ; D
.eh_frame:00000000000084CA                 db  0Eh
.eh_frame:00000000000084CB                 db  88h
.eh_frame:00000000000084CC                 db    2
.eh_frame:00000000000084CD                 db  45h ; E
.eh_frame:00000000000084CE                 db  0Eh
.eh_frame:00000000000084CF                 db  90h
.eh_frame:00000000000084D0                 db    2
.eh_frame:00000000000084D1                 db  5Fh ; _
.eh_frame:00000000000084D2                 db  0Eh
.eh_frame:00000000000084D3                 db 0F0h
.eh_frame:00000000000084D4                 db    1
.eh_frame:00000000000084D5                 db  64h ; d
.eh_frame:00000000000084D6                 db  0Ah
.eh_frame:00000000000084D7                 db  0Eh
.eh_frame:00000000000084D8                 db  38h ; 8
.eh_frame:00000000000084D9                 db  41h ; A
.eh_frame:00000000000084DA                 db  0Eh
.eh_frame:00000000000084DB                 db  30h ; 0
.eh_frame:00000000000084DC                 db  41h ; A
.eh_frame:00000000000084DD                 db  0Eh
.eh_frame:00000000000084DE                 db  28h ; (
.eh_frame:00000000000084DF                 db  42h ; B
.eh_frame:00000000000084E0                 db  0Eh
.eh_frame:00000000000084E1                 db  20h
.eh_frame:00000000000084E2                 db  42h ; B
.eh_frame:00000000000084E3                 db  0Eh
.eh_frame:00000000000084E4                 db  18h
.eh_frame:00000000000084E5                 db  42h ; B
.eh_frame:00000000000084E6                 db  0Eh
.eh_frame:00000000000084E7                 db  10h
.eh_frame:00000000000084E8                 db  42h ; B
.eh_frame:00000000000084E9                 db  0Eh
.eh_frame:00000000000084EA                 db    8
.eh_frame:00000000000084EB                 db  44h ; D
.eh_frame:00000000000084EC                 db  0Bh
.eh_frame:00000000000084ED                 db    3
.eh_frame:00000000000084EE                 db  99h
.eh_frame:00000000000084EF                 db    5
.eh_frame:00000000000084F0                 db  0Eh
.eh_frame:00000000000084F1                 db 0F8h
.eh_frame:00000000000084F2                 db    1
.eh_frame:00000000000084F3                 db  4Dh ; M
.eh_frame:00000000000084F4                 db  0Eh
.eh_frame:00000000000084F5                 db  80h
.eh_frame:00000000000084F6                 db    2
.eh_frame:00000000000084F7                 db  44h ; D
.eh_frame:00000000000084F8                 db  0Eh
.eh_frame:00000000000084F9                 db  88h
.eh_frame:00000000000084FA                 db    2
.eh_frame:00000000000084FB                 db  47h ; G
.eh_frame:00000000000084FC                 db  0Eh
.eh_frame:00000000000084FD                 db  90h
.eh_frame:00000000000084FE                 db    2
.eh_frame:00000000000084FF                 db  5Bh ; [
.eh_frame:0000000000008500                 db  0Eh
.eh_frame:0000000000008501                 db 0F0h
.eh_frame:0000000000008502                 db    1
.eh_frame:0000000000008503                 db    0
.eh_frame:0000000000008504                 db  68h ; h
.eh_frame:0000000000008505                 db    0
.eh_frame:0000000000008506                 db    0
.eh_frame:0000000000008507                 db    0
.eh_frame:0000000000008508                 db 0F8h
.eh_frame:0000000000008509                 db    7
.eh_frame:000000000000850A                 db    0
.eh_frame:000000000000850B                 db    0
.eh_frame:000000000000850C                 db  64h ; d
.eh_frame:000000000000850D                 db 0CAh
.eh_frame:000000000000850E                 db 0FFh
.eh_frame:000000000000850F                 db 0FFh
.eh_frame:0000000000008510                 db 0ABh
.eh_frame:0000000000008511                 db    1
.eh_frame:0000000000008512                 db    0
.eh_frame:0000000000008513                 db    0
.eh_frame:0000000000008514                 db    0
.eh_frame:0000000000008515                 db  42h ; B
.eh_frame:0000000000008516                 db  0Eh
.eh_frame:0000000000008517                 db  10h
.eh_frame:0000000000008518                 db  8Fh
.eh_frame:0000000000008519                 db    2
.eh_frame:000000000000851A                 db  42h ; B
.eh_frame:000000000000851B                 db  0Eh
.eh_frame:000000000000851C                 db  18h
.eh_frame:000000000000851D                 db  8Eh
.eh_frame:000000000000851E                 db    3
.eh_frame:000000000000851F                 db  45h ; E
.eh_frame:0000000000008520                 db  0Eh
.eh_frame:0000000000008521                 db  20h
.eh_frame:0000000000008522                 db  8Dh
.eh_frame:0000000000008523                 db    4
.eh_frame:0000000000008524                 db  42h ; B
.eh_frame:0000000000008525                 db  0Eh
.eh_frame:0000000000008526                 db  28h ; (
.eh_frame:0000000000008527                 db  8Ch
.eh_frame:0000000000008528                 db    5
.eh_frame:0000000000008529                 db  44h ; D
.eh_frame:000000000000852A                 db  0Eh
.eh_frame:000000000000852B                 db  30h ; 0
.eh_frame:000000000000852C                 db  86h
.eh_frame:000000000000852D                 db    6
.eh_frame:000000000000852E                 db  41h ; A
.eh_frame:000000000000852F                 db  0Eh
.eh_frame:0000000000008530                 db  38h ; 8
.eh_frame:0000000000008531                 db  83h
.eh_frame:0000000000008532                 db    7
.eh_frame:0000000000008533                 db  47h ; G
.eh_frame:0000000000008534                 db  0Eh
.eh_frame:0000000000008535                 db  60h ; `
.eh_frame:0000000000008536                 db    2
.eh_frame:0000000000008537                 db  99h
.eh_frame:0000000000008538                 db  0Eh
.eh_frame:0000000000008539                 db  68h ; h
.eh_frame:000000000000853A                 db  5Fh ; _
.eh_frame:000000000000853B                 db  0Eh
.eh_frame:000000000000853C                 db  70h ; p
.eh_frame:000000000000853D                 db  46h ; F
.eh_frame:000000000000853E                 db  0Eh
.eh_frame:000000000000853F                 db  78h ; x
.eh_frame:0000000000008540                 db  42h ; B
.eh_frame:0000000000008541                 db  0Eh
.eh_frame:0000000000008542                 db  80h
.eh_frame:0000000000008543                 db    1
.eh_frame:0000000000008544                 db  59h ; Y
.eh_frame:0000000000008545                 db  0Eh
.eh_frame:0000000000008546                 db  60h ; `
.eh_frame:0000000000008547                 db    2
.eh_frame:0000000000008548                 db  40h ; @
.eh_frame:0000000000008549                 db  0Eh
.eh_frame:000000000000854A                 db  68h ; h
.eh_frame:000000000000854B                 db  4Bh ; K
.eh_frame:000000000000854C                 db  0Eh
.eh_frame:000000000000854D                 db  70h ; p
.eh_frame:000000000000854E                 db  43h ; C
.eh_frame:000000000000854F                 db  0Eh
.eh_frame:0000000000008550                 db  78h ; x
.eh_frame:0000000000008551                 db  45h ; E
.eh_frame:0000000000008552                 db  0Eh
.eh_frame:0000000000008553                 db  80h
.eh_frame:0000000000008554                 db    1
.eh_frame:0000000000008555                 db  5Eh ; ^
.eh_frame:0000000000008556                 db  0Eh
.eh_frame:0000000000008557                 db  60h ; `
.eh_frame:0000000000008558                 db  4Ch ; L
.eh_frame:0000000000008559                 db  0Ah
.eh_frame:000000000000855A                 db  0Eh
.eh_frame:000000000000855B                 db  38h ; 8
.eh_frame:000000000000855C                 db  44h ; D
.eh_frame:000000000000855D                 db  0Eh
.eh_frame:000000000000855E                 db  30h ; 0
.eh_frame:000000000000855F                 db  41h ; A
.eh_frame:0000000000008560                 db  0Eh
.eh_frame:0000000000008561                 db  28h ; (
.eh_frame:0000000000008562                 db  42h ; B
.eh_frame:0000000000008563                 db  0Eh
.eh_frame:0000000000008564                 db  20h
.eh_frame:0000000000008565                 db  42h ; B
.eh_frame:0000000000008566                 db  0Eh
.eh_frame:0000000000008567                 db  18h
.eh_frame:0000000000008568                 db  42h ; B
.eh_frame:0000000000008569                 db  0Eh
.eh_frame:000000000000856A                 db  10h
.eh_frame:000000000000856B                 db  42h ; B
.eh_frame:000000000000856C                 db  0Eh
.eh_frame:000000000000856D                 db    8
.eh_frame:000000000000856E                 db  46h ; F
.eh_frame:000000000000856F                 db  0Bh
.eh_frame:0000000000008570                 db  28h ; (
.eh_frame:0000000000008571                 db    0
.eh_frame:0000000000008572                 db    0
.eh_frame:0000000000008573                 db    0
.eh_frame:0000000000008574                 db  64h ; d
.eh_frame:0000000000008575                 db    8
.eh_frame:0000000000008576                 db    0
.eh_frame:0000000000008577                 db    0
.eh_frame:0000000000008578                 db 0A8h
.eh_frame:0000000000008579                 db 0CBh
.eh_frame:000000000000857A                 db 0FFh
.eh_frame:000000000000857B                 db 0FFh
.eh_frame:000000000000857C                 db  36h ; 6
.eh_frame:000000000000857D                 db    0
.eh_frame:000000000000857E                 db    0
.eh_frame:000000000000857F                 db    0
.eh_frame:0000000000008580                 db    0
.eh_frame:0000000000008581                 db  42h ; B
.eh_frame:0000000000008582                 db  0Eh
.eh_frame:0000000000008583                 db  10h
.eh_frame:0000000000008584                 db  8Ch
.eh_frame:0000000000008585                 db    2
.eh_frame:0000000000008586                 db  41h ; A
.eh_frame:0000000000008587                 db  0Eh
.eh_frame:0000000000008588                 db  18h
.eh_frame:0000000000008589                 db  86h
.eh_frame:000000000000858A                 db    3
.eh_frame:000000000000858B                 db  41h ; A
.eh_frame:000000000000858C                 db  0Eh
.eh_frame:000000000000858D                 db  20h
.eh_frame:000000000000858E                 db  83h
.eh_frame:000000000000858F                 db    4
.eh_frame:0000000000008590                 db  6Eh ; n
.eh_frame:0000000000008591                 db  0Eh
.eh_frame:0000000000008592                 db  18h
.eh_frame:0000000000008593                 db  41h ; A
.eh_frame:0000000000008594                 db  0Eh
.eh_frame:0000000000008595                 db  10h
.eh_frame:0000000000008596                 db  42h ; B
.eh_frame:0000000000008597                 db  0Eh
.eh_frame:0000000000008598                 db    8
.eh_frame:0000000000008599                 db    0
.eh_frame:000000000000859A                 db    0
.eh_frame:000000000000859B                 db    0
.eh_frame:000000000000859C                 db  10h
.eh_frame:000000000000859D                 db    0
.eh_frame:000000000000859E                 db    0
.eh_frame:000000000000859F                 db    0
.eh_frame:00000000000085A0                 db  90h
.eh_frame:00000000000085A1                 db    8
.eh_frame:00000000000085A2                 db    0
.eh_frame:00000000000085A3                 db    0
.eh_frame:00000000000085A4                 db 0BCh
.eh_frame:00000000000085A5                 db 0CBh
.eh_frame:00000000000085A6                 db 0FFh
.eh_frame:00000000000085A7                 db 0FFh
.eh_frame:00000000000085A8                 db  11h
.eh_frame:00000000000085A9                 db    0
.eh_frame:00000000000085AA                 db    0
.eh_frame:00000000000085AB                 db    0
.eh_frame:00000000000085AC                 db    0
.eh_frame:00000000000085AD                 db    0
.eh_frame:00000000000085AE                 db    0
.eh_frame:00000000000085AF                 db    0
.eh_frame:00000000000085B0                 db  10h
.eh_frame:00000000000085B1                 db    0
.eh_frame:00000000000085B2                 db    0
.eh_frame:00000000000085B3                 db    0
.eh_frame:00000000000085B4                 db 0A4h
.eh_frame:00000000000085B5                 db    8
.eh_frame:00000000000085B6                 db    0
.eh_frame:00000000000085B7                 db    0
.eh_frame:00000000000085B8                 db 0C8h
.eh_frame:00000000000085B9                 db 0CBh
.eh_frame:00000000000085BA                 db 0FFh
.eh_frame:00000000000085BB                 db 0FFh
.eh_frame:00000000000085BC                 db  11h
.eh_frame:00000000000085BD                 db    0
.eh_frame:00000000000085BE                 db    0
.eh_frame:00000000000085BF                 db    0
.eh_frame:00000000000085C0                 db    0
.eh_frame:00000000000085C1                 db    0
.eh_frame:00000000000085C2                 db    0
.eh_frame:00000000000085C3                 db    0
.eh_frame:00000000000085C4                 db  10h
.eh_frame:00000000000085C5                 db    0
.eh_frame:00000000000085C6                 db    0
.eh_frame:00000000000085C7                 db    0
.eh_frame:00000000000085C8                 db 0B8h
.eh_frame:00000000000085C9                 db    8
.eh_frame:00000000000085CA                 db    0
.eh_frame:00000000000085CB                 db    0
.eh_frame:00000000000085CC                 db 0D4h
.eh_frame:00000000000085CD                 db 0CBh
.eh_frame:00000000000085CE                 db 0FFh
.eh_frame:00000000000085CF                 db 0FFh
.eh_frame:00000000000085D0                 db  35h ; 5
.eh_frame:00000000000085D1                 db    0
.eh_frame:00000000000085D2                 db    0
.eh_frame:00000000000085D3                 db    0
.eh_frame:00000000000085D4                 db    0
.eh_frame:00000000000085D5                 db    0
.eh_frame:00000000000085D6                 db    0
.eh_frame:00000000000085D7                 db    0
.eh_frame:00000000000085D8                 db  10h
.eh_frame:00000000000085D9                 db    0
.eh_frame:00000000000085DA                 db    0
.eh_frame:00000000000085DB                 db    0
.eh_frame:00000000000085DC                 db 0CCh
.eh_frame:00000000000085DD                 db    8
.eh_frame:00000000000085DE                 db    0
.eh_frame:00000000000085DF                 db    0
.eh_frame:00000000000085E0                 db    0
.eh_frame:00000000000085E1                 db 0CCh
.eh_frame:00000000000085E2                 db 0FFh
.eh_frame:00000000000085E3                 db 0FFh
.eh_frame:00000000000085E4                 db  15h
.eh_frame:00000000000085E5                 db    0
.eh_frame:00000000000085E6                 db    0
.eh_frame:00000000000085E7                 db    0
.eh_frame:00000000000085E8                 db    0
.eh_frame:00000000000085E9                 db    0
.eh_frame:00000000000085EA                 db    0
.eh_frame:00000000000085EB                 db    0
.eh_frame:00000000000085EC                 db  10h
.eh_frame:00000000000085ED                 db    0
.eh_frame:00000000000085EE                 db    0
.eh_frame:00000000000085EF                 db    0
.eh_frame:00000000000085F0                 db 0E0h
.eh_frame:00000000000085F1                 db    8
.eh_frame:00000000000085F2                 db    0
.eh_frame:00000000000085F3                 db    0
.eh_frame:00000000000085F4                 db  0Ch
.eh_frame:00000000000085F5                 db 0CCh
.eh_frame:00000000000085F6                 db 0FFh
.eh_frame:00000000000085F7                 db 0FFh
.eh_frame:00000000000085F8                 db  30h ; 0
.eh_frame:00000000000085F9                 db    0
.eh_frame:00000000000085FA                 db    0
.eh_frame:00000000000085FB                 db    0
.eh_frame:00000000000085FC                 db    0
.eh_frame:00000000000085FD                 db  6Bh ; k
.eh_frame:00000000000085FE                 db  0Eh
.eh_frame:00000000000085FF                 db  10h
.eh_frame:0000000000008600                 db  50h ; P
.eh_frame:0000000000008601                 db    0
.eh_frame:0000000000008602                 db    0
.eh_frame:0000000000008603                 db    0
.eh_frame:0000000000008604                 db 0F4h
.eh_frame:0000000000008605                 db    8
.eh_frame:0000000000008606                 db    0
.eh_frame:0000000000008607                 db    0
.eh_frame:0000000000008608                 db  28h ; (
.eh_frame:0000000000008609                 db 0CCh
.eh_frame:000000000000860A                 db 0FFh
.eh_frame:000000000000860B                 db 0FFh
.eh_frame:000000000000860C                 db  74h ; t
.eh_frame:000000000000860D                 db    0
.eh_frame:000000000000860E                 db    0
.eh_frame:000000000000860F                 db    0
.eh_frame:0000000000008610                 db    0
.eh_frame:0000000000008611                 db  42h ; B
.eh_frame:0000000000008612                 db  0Eh
.eh_frame:0000000000008613                 db  10h
.eh_frame:0000000000008614                 db  8Fh
.eh_frame:0000000000008615                 db    2
.eh_frame:0000000000008616                 db  42h ; B
.eh_frame:0000000000008617                 db  0Eh
.eh_frame:0000000000008618                 db  18h
.eh_frame:0000000000008619                 db  8Eh
.eh_frame:000000000000861A                 db    3
.eh_frame:000000000000861B                 db  49h ; I
.eh_frame:000000000000861C                 db  0Eh
.eh_frame:000000000000861D                 db  20h
.eh_frame:000000000000861E                 db  8Dh
.eh_frame:000000000000861F                 db    4
.eh_frame:0000000000008620                 db  42h ; B
.eh_frame:0000000000008621                 db  0Eh
.eh_frame:0000000000008622                 db  28h ; (
.eh_frame:0000000000008623                 db  8Ch
.eh_frame:0000000000008624                 db    5
.eh_frame:0000000000008625                 db  44h ; D
.eh_frame:0000000000008626                 db  0Eh
.eh_frame:0000000000008627                 db  30h ; 0
.eh_frame:0000000000008628                 db  86h
.eh_frame:0000000000008629                 db    6
.eh_frame:000000000000862A                 db  41h ; A
.eh_frame:000000000000862B                 db  0Eh
.eh_frame:000000000000862C                 db  38h ; 8
.eh_frame:000000000000862D                 db  83h
.eh_frame:000000000000862E                 db    7
.eh_frame:000000000000862F                 db  4Dh ; M
.eh_frame:0000000000008630                 db  0Eh
.eh_frame:0000000000008631                 db  50h ; P
.eh_frame:0000000000008632                 db  5Fh ; _
.eh_frame:0000000000008633                 db  0Eh
.eh_frame:0000000000008634                 db  58h ; X
.eh_frame:0000000000008635                 db  47h ; G
.eh_frame:0000000000008636                 db  0Eh
.eh_frame:0000000000008637                 db  60h ; `
.eh_frame:0000000000008638                 db  46h ; F
.eh_frame:0000000000008639                 db  0Eh
.eh_frame:000000000000863A                 db  68h ; h
.eh_frame:000000000000863B                 db  44h ; D
.eh_frame:000000000000863C                 db  0Eh
.eh_frame:000000000000863D                 db  70h ; p
.eh_frame:000000000000863E                 db  58h ; X
.eh_frame:000000000000863F                 db  0Eh
.eh_frame:0000000000008640                 db  38h ; 8
.eh_frame:0000000000008641                 db  41h ; A
.eh_frame:0000000000008642                 db  0Eh
.eh_frame:0000000000008643                 db  30h ; 0
.eh_frame:0000000000008644                 db  41h ; A
.eh_frame:0000000000008645                 db  0Eh
.eh_frame:0000000000008646                 db  28h ; (
.eh_frame:0000000000008647                 db  42h ; B
.eh_frame:0000000000008648                 db  0Eh
.eh_frame:0000000000008649                 db  20h
.eh_frame:000000000000864A                 db  42h ; B
.eh_frame:000000000000864B                 db  0Eh
.eh_frame:000000000000864C                 db  18h
.eh_frame:000000000000864D                 db  42h ; B
.eh_frame:000000000000864E                 db  0Eh
.eh_frame:000000000000864F                 db  10h
.eh_frame:0000000000008650                 db  42h ; B
.eh_frame:0000000000008651                 db  0Eh
.eh_frame:0000000000008652                 db    8
.eh_frame:0000000000008653                 db    0
.eh_frame:0000000000008654                 db  68h ; h
.eh_frame:0000000000008655                 db    0
.eh_frame:0000000000008656                 db    0
.eh_frame:0000000000008657                 db    0
.eh_frame:0000000000008658                 db  48h ; H
.eh_frame:0000000000008659                 db    9
.eh_frame:000000000000865A                 db    0
.eh_frame:000000000000865B                 db    0
.eh_frame:000000000000865C                 db  54h ; T
.eh_frame:000000000000865D                 db 0CCh
.eh_frame:000000000000865E                 db 0FFh
.eh_frame:000000000000865F                 db 0FFh
.eh_frame:0000000000008660                 db 0E3h
.eh_frame:0000000000008661                 db    0
.eh_frame:0000000000008662                 db    0
.eh_frame:0000000000008663                 db    0
.eh_frame:0000000000008664                 db    0
.eh_frame:0000000000008665                 db  42h ; B
.eh_frame:0000000000008666                 db  0Eh
.eh_frame:0000000000008667                 db  10h
.eh_frame:0000000000008668                 db  8Fh
.eh_frame:0000000000008669                 db    2
.eh_frame:000000000000866A                 db  42h ; B
.eh_frame:000000000000866B                 db  0Eh
.eh_frame:000000000000866C                 db  18h
.eh_frame:000000000000866D                 db  8Eh
.eh_frame:000000000000866E                 db    3
.eh_frame:000000000000866F                 db  49h ; I
.eh_frame:0000000000008670                 db  0Eh
.eh_frame:0000000000008671                 db  20h
.eh_frame:0000000000008672                 db  8Dh
.eh_frame:0000000000008673                 db    4
.eh_frame:0000000000008674                 db  42h ; B
.eh_frame:0000000000008675                 db  0Eh
.eh_frame:0000000000008676                 db  28h ; (
.eh_frame:0000000000008677                 db  8Ch
.eh_frame:0000000000008678                 db    5
.eh_frame:0000000000008679                 db  44h ; D
.eh_frame:000000000000867A                 db  0Eh
.eh_frame:000000000000867B                 db  30h ; 0
.eh_frame:000000000000867C                 db  86h
.eh_frame:000000000000867D                 db    6
.eh_frame:000000000000867E                 db  41h ; A
.eh_frame:000000000000867F                 db  0Eh
.eh_frame:0000000000008680                 db  38h ; 8
.eh_frame:0000000000008681                 db  83h
.eh_frame:0000000000008682                 db    7
.eh_frame:0000000000008683                 db  4Dh ; M
.eh_frame:0000000000008684                 db  0Eh
.eh_frame:0000000000008685                 db  70h ; p
.eh_frame:0000000000008686                 db  65h ; e
.eh_frame:0000000000008687                 db  0Eh
.eh_frame:0000000000008688                 db  78h ; x
.eh_frame:0000000000008689                 db  4Dh ; M
.eh_frame:000000000000868A                 db  0Eh
.eh_frame:000000000000868B                 db  80h
.eh_frame:000000000000868C                 db    1
.eh_frame:000000000000868D                 db  46h ; F
.eh_frame:000000000000868E                 db  0Eh
.eh_frame:000000000000868F                 db  88h
.eh_frame:0000000000008690                 db    1
.eh_frame:0000000000008691                 db  42h ; B
.eh_frame:0000000000008692                 db  0Eh
.eh_frame:0000000000008693                 db  90h
.eh_frame:0000000000008694                 db    1
.eh_frame:0000000000008695                 db  5Eh ; ^
.eh_frame:0000000000008696                 db  0Eh
.eh_frame:0000000000008697                 db  70h ; p
.eh_frame:0000000000008698                 db  56h ; V
.eh_frame:0000000000008699                 db  0Eh
.eh_frame:000000000000869A                 db  78h ; x
.eh_frame:000000000000869B                 db  43h ; C
.eh_frame:000000000000869C                 db  0Eh
.eh_frame:000000000000869D                 db  80h
.eh_frame:000000000000869E                 db    1
.eh_frame:000000000000869F                 db  43h ; C
.eh_frame:00000000000086A0                 db  0Eh
.eh_frame:00000000000086A1                 db  88h
.eh_frame:00000000000086A2                 db    1
.eh_frame:00000000000086A3                 db  56h ; V
.eh_frame:00000000000086A4                 db  0Eh
.eh_frame:00000000000086A5                 db  90h
.eh_frame:00000000000086A6                 db    1
.eh_frame:00000000000086A7                 db  52h ; R
.eh_frame:00000000000086A8                 db  0Eh
.eh_frame:00000000000086A9                 db  70h ; p
.eh_frame:00000000000086AA                 db  5Bh ; [
.eh_frame:00000000000086AB                 db  0Eh
.eh_frame:00000000000086AC                 db  38h ; 8
.eh_frame:00000000000086AD                 db  41h ; A
.eh_frame:00000000000086AE                 db  0Eh
.eh_frame:00000000000086AF                 db  30h ; 0
.eh_frame:00000000000086B0                 db  41h ; A
.eh_frame:00000000000086B1                 db  0Eh
.eh_frame:00000000000086B2                 db  28h ; (
.eh_frame:00000000000086B3                 db  42h ; B
.eh_frame:00000000000086B4                 db  0Eh
.eh_frame:00000000000086B5                 db  20h
.eh_frame:00000000000086B6                 db  42h ; B
.eh_frame:00000000000086B7                 db  0Eh
.eh_frame:00000000000086B8                 db  18h
.eh_frame:00000000000086B9                 db  42h ; B
.eh_frame:00000000000086BA                 db  0Eh
.eh_frame:00000000000086BB                 db  10h
.eh_frame:00000000000086BC                 db  42h ; B
.eh_frame:00000000000086BD                 db  0Eh
.eh_frame:00000000000086BE                 db    8
.eh_frame:00000000000086BF                 db    0
.eh_frame:00000000000086C0                 db  10h
.eh_frame:00000000000086C1                 db    0
.eh_frame:00000000000086C2                 db    0
.eh_frame:00000000000086C3                 db    0
.eh_frame:00000000000086C4                 db 0B4h
.eh_frame:00000000000086C5                 db    9
.eh_frame:00000000000086C6                 db    0
.eh_frame:00000000000086C7                 db    0
.eh_frame:00000000000086C8                 db 0D8h
.eh_frame:00000000000086C9                 db 0CCh
.eh_frame:00000000000086CA                 db 0FFh
.eh_frame:00000000000086CB                 db 0FFh
.eh_frame:00000000000086CC                 db  0Ah
.eh_frame:00000000000086CD                 db    0
.eh_frame:00000000000086CE                 db    0
.eh_frame:00000000000086CF                 db    0
.eh_frame:00000000000086D0                 db    0
.eh_frame:00000000000086D1                 db    0
.eh_frame:00000000000086D2                 db    0
.eh_frame:00000000000086D3                 db    0
.eh_frame:00000000000086D4                 db  28h ; (
.eh_frame:00000000000086D5                 db    0
.eh_frame:00000000000086D6                 db    0
.eh_frame:00000000000086D7                 db    0
.eh_frame:00000000000086D8                 db 0C8h
.eh_frame:00000000000086D9                 db    9
.eh_frame:00000000000086DA                 db    0
.eh_frame:00000000000086DB                 db    0
.eh_frame:00000000000086DC                 db 0D4h
.eh_frame:00000000000086DD                 db 0CCh
.eh_frame:00000000000086DE                 db 0FFh
.eh_frame:00000000000086DF                 db 0FFh
.eh_frame:00000000000086E0                 db  93h
.eh_frame:00000000000086E1                 db    0
.eh_frame:00000000000086E2                 db    0
.eh_frame:00000000000086E3                 db    0
.eh_frame:00000000000086E4                 db    0
.eh_frame:00000000000086E5                 db  48h ; H
.eh_frame:00000000000086E6                 db  0Eh
.eh_frame:00000000000086E7                 db  10h
.eh_frame:00000000000086E8                 db  8Ch
.eh_frame:00000000000086E9                 db    2
.eh_frame:00000000000086EA                 db  48h ; H
.eh_frame:00000000000086EB                 db  0Eh
.eh_frame:00000000000086EC                 db  18h
.eh_frame:00000000000086ED                 db  86h
.eh_frame:00000000000086EE                 db    3
.eh_frame:00000000000086EF                 db  41h ; A
.eh_frame:00000000000086F0                 db  0Eh
.eh_frame:00000000000086F1                 db  20h
.eh_frame:00000000000086F2                 db  83h
.eh_frame:00000000000086F3                 db    4
.eh_frame:00000000000086F4                 db    2
.eh_frame:00000000000086F5                 db  74h ; t
.eh_frame:00000000000086F6                 db  0Eh
.eh_frame:00000000000086F7                 db  18h
.eh_frame:00000000000086F8                 db  4Bh ; K
.eh_frame:00000000000086F9                 db  0Eh
.eh_frame:00000000000086FA                 db  10h
.eh_frame:00000000000086FB                 db  42h ; B
.eh_frame:00000000000086FC                 db  0Eh
.eh_frame:00000000000086FD                 db    8
.eh_frame:00000000000086FE                 db    0
.eh_frame:00000000000086FF                 db    0
.eh_frame:0000000000008700                 db  10h
.eh_frame:0000000000008701                 db    0
.eh_frame:0000000000008702                 db    0
.eh_frame:0000000000008703                 db    0
.eh_frame:0000000000008704                 db 0F4h
.eh_frame:0000000000008705                 db    9
.eh_frame:0000000000008706                 db    0
.eh_frame:0000000000008707                 db    0
.eh_frame:0000000000008708                 db  48h ; H
.eh_frame:0000000000008709                 db 0CDh
.eh_frame:000000000000870A                 db 0FFh
.eh_frame:000000000000870B                 db 0FFh
.eh_frame:000000000000870C                 db  13h
.eh_frame:000000000000870D                 db    0
.eh_frame:000000000000870E                 db    0
.eh_frame:000000000000870F                 db    0
.eh_frame:0000000000008710                 db    0
.eh_frame:0000000000008711                 db    0
.eh_frame:0000000000008712                 db    0
.eh_frame:0000000000008713                 db    0
.eh_frame:0000000000008714                 db  10h
.eh_frame:0000000000008715                 db    0
.eh_frame:0000000000008716                 db    0
.eh_frame:0000000000008717                 db    0
.eh_frame:0000000000008718                 db    8
.eh_frame:0000000000008719                 db  0Ah
.eh_frame:000000000000871A                 db    0
.eh_frame:000000000000871B                 db    0
.eh_frame:000000000000871C                 db  54h ; T
.eh_frame:000000000000871D                 db 0CDh
.eh_frame:000000000000871E                 db 0FFh
.eh_frame:000000000000871F                 db 0FFh
.eh_frame:0000000000008720                 db  0Ch
.eh_frame:0000000000008721                 db    0
.eh_frame:0000000000008722                 db    0
.eh_frame:0000000000008723                 db    0
.eh_frame:0000000000008724                 db    0
.eh_frame:0000000000008725                 db    0
.eh_frame:0000000000008726                 db    0
.eh_frame:0000000000008727                 db    0
.eh_frame:0000000000008728                 db  10h
.eh_frame:0000000000008729                 db    0
.eh_frame:000000000000872A                 db    0
.eh_frame:000000000000872B                 db    0
.eh_frame:000000000000872C                 db  1Ch
.eh_frame:000000000000872D                 db  0Ah
.eh_frame:000000000000872E                 db    0
.eh_frame:000000000000872F                 db    0
.eh_frame:0000000000008730                 db  50h ; P
.eh_frame:0000000000008731                 db 0CDh
.eh_frame:0000000000008732                 db 0FFh
.eh_frame:0000000000008733                 db 0FFh
.eh_frame:0000000000008734                 db  18h
.eh_frame:0000000000008735                 db    0
.eh_frame:0000000000008736                 db    0
.eh_frame:0000000000008737                 db    0
.eh_frame:0000000000008738                 db    0
.eh_frame:0000000000008739                 db    0
.eh_frame:000000000000873A                 db    0
.eh_frame:000000000000873B                 db    0
.eh_frame:000000000000873C                 db  10h
.eh_frame:000000000000873D                 db    0
.eh_frame:000000000000873E                 db    0
.eh_frame:000000000000873F                 db    0
.eh_frame:0000000000008740                 db  30h ; 0
.eh_frame:0000000000008741                 db  0Ah
.eh_frame:0000000000008742                 db    0
.eh_frame:0000000000008743                 db    0
.eh_frame:0000000000008744                 db  5Ch ; \
.eh_frame:0000000000008745                 db 0CDh
.eh_frame:0000000000008746                 db 0FFh
.eh_frame:0000000000008747                 db 0FFh
.eh_frame:0000000000008748                 db  14h
.eh_frame:0000000000008749                 db    0
.eh_frame:000000000000874A                 db    0
.eh_frame:000000000000874B                 db    0
.eh_frame:000000000000874C                 db    0
.eh_frame:000000000000874D                 db    0
.eh_frame:000000000000874E                 db    0
.eh_frame:000000000000874F                 db    0
.eh_frame:0000000000008750                 db  18h
.eh_frame:0000000000008751                 db    0
.eh_frame:0000000000008752                 db    0
.eh_frame:0000000000008753                 db    0
.eh_frame:0000000000008754                 db  44h ; D
.eh_frame:0000000000008755                 db  0Ah
.eh_frame:0000000000008756                 db    0
.eh_frame:0000000000008757                 db    0
.eh_frame:0000000000008758                 db  68h ; h
.eh_frame:0000000000008759                 db 0CDh
.eh_frame:000000000000875A                 db 0FFh
.eh_frame:000000000000875B                 db 0FFh
.eh_frame:000000000000875C                 db  8Eh
.eh_frame:000000000000875D                 db    0
.eh_frame:000000000000875E                 db    0
.eh_frame:000000000000875F                 db    0
.eh_frame:0000000000008760                 db    0
.eh_frame:0000000000008761                 db  44h ; D
.eh_frame:0000000000008762                 db  0Eh
.eh_frame:0000000000008763                 db  50h ; P
.eh_frame:0000000000008764                 db    2
.eh_frame:0000000000008765                 db  7Fh ; 
.eh_frame:0000000000008766                 db  0Ah
.eh_frame:0000000000008767                 db  0Eh
.eh_frame:0000000000008768                 db    8
.eh_frame:0000000000008769                 db  41h ; A
.eh_frame:000000000000876A                 db  0Bh
.eh_frame:000000000000876B                 db    0
.eh_frame:000000000000876C                 db  18h
.eh_frame:000000000000876D                 db    0
.eh_frame:000000000000876E                 db    0
.eh_frame:000000000000876F                 db    0
.eh_frame:0000000000008770                 db  60h ; `
.eh_frame:0000000000008771                 db  0Ah
.eh_frame:0000000000008772                 db    0
.eh_frame:0000000000008773                 db    0
.eh_frame:0000000000008774                 db 0DCh
.eh_frame:0000000000008775                 db 0CDh
.eh_frame:0000000000008776                 db 0FFh
.eh_frame:0000000000008777                 db 0FFh
.eh_frame:0000000000008778                 db  8Ah
.eh_frame:0000000000008779                 db    0
.eh_frame:000000000000877A                 db    0
.eh_frame:000000000000877B                 db    0
.eh_frame:000000000000877C                 db    0
.eh_frame:000000000000877D                 db  44h ; D
.eh_frame:000000000000877E                 db  0Eh
.eh_frame:000000000000877F                 db  50h ; P
.eh_frame:0000000000008780                 db    2
.eh_frame:0000000000008781                 db  7Bh ; {
.eh_frame:0000000000008782                 db  0Ah
.eh_frame:0000000000008783                 db  0Eh
.eh_frame:0000000000008784                 db    8
.eh_frame:0000000000008785                 db  41h ; A
.eh_frame:0000000000008786                 db  0Bh
.eh_frame:0000000000008787                 db    0
.eh_frame:0000000000008788                 db  10h
.eh_frame:0000000000008789                 db    0
.eh_frame:000000000000878A                 db    0
.eh_frame:000000000000878B                 db    0
.eh_frame:000000000000878C                 db  7Ch ; |
.eh_frame:000000000000878D                 db  0Ah
.eh_frame:000000000000878E                 db    0
.eh_frame:000000000000878F                 db    0
.eh_frame:0000000000008790                 db  50h ; P
.eh_frame:0000000000008791                 db 0CEh
.eh_frame:0000000000008792                 db 0FFh
.eh_frame:0000000000008793                 db 0FFh
.eh_frame:0000000000008794                 db  0Ch
.eh_frame:0000000000008795                 db    0
.eh_frame:0000000000008796                 db    0
.eh_frame:0000000000008797                 db    0
.eh_frame:0000000000008798                 db    0
.eh_frame:0000000000008799                 db    0
.eh_frame:000000000000879A                 db    0
.eh_frame:000000000000879B                 db    0
.eh_frame:000000000000879C                 db  10h
.eh_frame:000000000000879D                 db    0
.eh_frame:000000000000879E                 db    0
.eh_frame:000000000000879F                 db    0
.eh_frame:00000000000087A0                 db  90h
.eh_frame:00000000000087A1                 db  0Ah
.eh_frame:00000000000087A2                 db    0
.eh_frame:00000000000087A3                 db    0
.eh_frame:00000000000087A4                 db  4Ch ; L
.eh_frame:00000000000087A5                 db 0CEh
.eh_frame:00000000000087A6                 db 0FFh
.eh_frame:00000000000087A7                 db 0FFh
.eh_frame:00000000000087A8                 db  0Fh
.eh_frame:00000000000087A9                 db    0
.eh_frame:00000000000087AA                 db    0
.eh_frame:00000000000087AB                 db    0
.eh_frame:00000000000087AC                 db    0
.eh_frame:00000000000087AD                 db    0
.eh_frame:00000000000087AE                 db    0
.eh_frame:00000000000087AF                 db    0
.eh_frame:00000000000087B0                 db  18h
.eh_frame:00000000000087B1                 db    0
.eh_frame:00000000000087B2                 db    0
.eh_frame:00000000000087B3                 db    0
.eh_frame:00000000000087B4                 db 0A4h
.eh_frame:00000000000087B5                 db  0Ah
.eh_frame:00000000000087B6                 db    0
.eh_frame:00000000000087B7                 db    0
.eh_frame:00000000000087B8                 db  48h ; H
.eh_frame:00000000000087B9                 db 0CEh
.eh_frame:00000000000087BA                 db 0FFh
.eh_frame:00000000000087BB                 db 0FFh
.eh_frame:00000000000087BC                 db  98h
.eh_frame:00000000000087BD                 db    0
.eh_frame:00000000000087BE                 db    0
.eh_frame:00000000000087BF                 db    0
.eh_frame:00000000000087C0                 db    0
.eh_frame:00000000000087C1                 db  44h ; D
.eh_frame:00000000000087C2                 db  0Eh
.eh_frame:00000000000087C3                 db  50h ; P
.eh_frame:00000000000087C4                 db    2
.eh_frame:00000000000087C5                 db  8Eh
.eh_frame:00000000000087C6                 db  0Ah
.eh_frame:00000000000087C7                 db  0Eh
.eh_frame:00000000000087C8                 db    8
.eh_frame:00000000000087C9                 db  41h ; A
.eh_frame:00000000000087CA                 db  0Bh
.eh_frame:00000000000087CB                 db    0
.eh_frame:00000000000087CC                 db  10h
.eh_frame:00000000000087CD                 db    0
.eh_frame:00000000000087CE                 db    0
.eh_frame:00000000000087CF                 db    0
.eh_frame:00000000000087D0                 db 0C0h
.eh_frame:00000000000087D1                 db  0Ah
.eh_frame:00000000000087D2                 db    0
.eh_frame:00000000000087D3                 db    0
.eh_frame:00000000000087D4                 db 0CCh
.eh_frame:00000000000087D5                 db 0CEh
.eh_frame:00000000000087D6                 db 0FFh
.eh_frame:00000000000087D7                 db 0FFh
.eh_frame:00000000000087D8                 db  10h
.eh_frame:00000000000087D9                 db    0
.eh_frame:00000000000087DA                 db    0
.eh_frame:00000000000087DB                 db    0
.eh_frame:00000000000087DC                 db    0
.eh_frame:00000000000087DD                 db    0
.eh_frame:00000000000087DE                 db    0
.eh_frame:00000000000087DF                 db    0
.eh_frame:00000000000087E0                 db  10h
.eh_frame:00000000000087E1                 db    0
.eh_frame:00000000000087E2                 db    0
.eh_frame:00000000000087E3                 db    0
.eh_frame:00000000000087E4                 db 0D4h
.eh_frame:00000000000087E5                 db  0Ah
.eh_frame:00000000000087E6                 db    0
.eh_frame:00000000000087E7                 db    0
.eh_frame:00000000000087E8                 db 0C8h
.eh_frame:00000000000087E9                 db 0CEh
.eh_frame:00000000000087EA                 db 0FFh
.eh_frame:00000000000087EB                 db 0FFh
.eh_frame:00000000000087EC                 db  11h
.eh_frame:00000000000087ED                 db    0
.eh_frame:00000000000087EE                 db    0
.eh_frame:00000000000087EF                 db    0
.eh_frame:00000000000087F0                 db    0
.eh_frame:00000000000087F1                 db    0
.eh_frame:00000000000087F2                 db    0
.eh_frame:00000000000087F3                 db    0
.eh_frame:00000000000087F4                 db  10h
.eh_frame:00000000000087F5                 db    0
.eh_frame:00000000000087F6                 db    0
.eh_frame:00000000000087F7                 db    0
.eh_frame:00000000000087F8                 db 0E8h
.eh_frame:00000000000087F9                 db  0Ah
.eh_frame:00000000000087FA                 db    0
.eh_frame:00000000000087FB                 db    0
.eh_frame:00000000000087FC                 db 0D4h
.eh_frame:00000000000087FD                 db 0CEh
.eh_frame:00000000000087FE                 db 0FFh
.eh_frame:00000000000087FF                 db 0FFh
.eh_frame:0000000000008800                 db  0Ah
.eh_frame:0000000000008801                 db    0
.eh_frame:0000000000008802                 db    0
.eh_frame:0000000000008803                 db    0
.eh_frame:0000000000008804                 db    0
.eh_frame:0000000000008805                 db    0
.eh_frame:0000000000008806                 db    0
.eh_frame:0000000000008807                 db    0
.eh_frame:0000000000008808                 db  18h
.eh_frame:0000000000008809                 db    0
.eh_frame:000000000000880A                 db    0
.eh_frame:000000000000880B                 db    0
.eh_frame:000000000000880C                 db 0FCh
.eh_frame:000000000000880D                 db  0Ah
.eh_frame:000000000000880E                 db    0
.eh_frame:000000000000880F                 db    0
.eh_frame:0000000000008810                 db 0D0h
.eh_frame:0000000000008811                 db 0CEh
.eh_frame:0000000000008812                 db 0FFh
.eh_frame:0000000000008813                 db 0FFh
.eh_frame:0000000000008814                 db  8Eh
.eh_frame:0000000000008815                 db    0
.eh_frame:0000000000008816                 db    0
.eh_frame:0000000000008817                 db    0
.eh_frame:0000000000008818                 db    0
.eh_frame:0000000000008819                 db  44h ; D
.eh_frame:000000000000881A                 db  0Eh
.eh_frame:000000000000881B                 db  50h ; P
.eh_frame:000000000000881C                 db    2
.eh_frame:000000000000881D                 db  7Fh ; 
.eh_frame:000000000000881E                 db  0Ah
.eh_frame:000000000000881F                 db  0Eh
.eh_frame:0000000000008820                 db    8
.eh_frame:0000000000008821                 db  41h ; A
.eh_frame:0000000000008822                 db  0Bh
.eh_frame:0000000000008823                 db    0
.eh_frame:0000000000008824                 db  18h
.eh_frame:0000000000008825                 db    0
.eh_frame:0000000000008826                 db    0
.eh_frame:0000000000008827                 db    0
.eh_frame:0000000000008828                 db  18h
.eh_frame:0000000000008829                 db  0Bh
.eh_frame:000000000000882A                 db    0
.eh_frame:000000000000882B                 db    0
.eh_frame:000000000000882C                 db  44h ; D
.eh_frame:000000000000882D                 db 0CFh
.eh_frame:000000000000882E                 db 0FFh
.eh_frame:000000000000882F                 db 0FFh
.eh_frame:0000000000008830                 db  91h
.eh_frame:0000000000008831                 db    0
.eh_frame:0000000000008832                 db    0
.eh_frame:0000000000008833                 db    0
.eh_frame:0000000000008834                 db    0
.eh_frame:0000000000008835                 db  44h ; D
.eh_frame:0000000000008836                 db  0Eh
.eh_frame:0000000000008837                 db  50h ; P
.eh_frame:0000000000008838                 db    2
.eh_frame:0000000000008839                 db  82h
.eh_frame:000000000000883A                 db  0Ah
.eh_frame:000000000000883B                 db  0Eh
.eh_frame:000000000000883C                 db    8
.eh_frame:000000000000883D                 db  41h ; A
.eh_frame:000000000000883E                 db  0Bh
.eh_frame:000000000000883F                 db    0
.eh_frame:0000000000008840                 db  10h
.eh_frame:0000000000008841                 db    0
.eh_frame:0000000000008842                 db    0
.eh_frame:0000000000008843                 db    0
.eh_frame:0000000000008844                 db  34h ; 4
.eh_frame:0000000000008845                 db  0Bh
.eh_frame:0000000000008846                 db    0
.eh_frame:0000000000008847                 db    0
.eh_frame:0000000000008848                 db 0C8h
.eh_frame:0000000000008849                 db 0CFh
.eh_frame:000000000000884A                 db 0FFh
.eh_frame:000000000000884B                 db 0FFh
.eh_frame:000000000000884C                 db  0Ch
.eh_frame:000000000000884D                 db    0
.eh_frame:000000000000884E                 db    0
.eh_frame:000000000000884F                 db    0
.eh_frame:0000000000008850                 db    0
.eh_frame:0000000000008851                 db    0
.eh_frame:0000000000008852                 db    0
.eh_frame:0000000000008853                 db    0
.eh_frame:0000000000008854                 db  10h
.eh_frame:0000000000008855                 db    0
.eh_frame:0000000000008856                 db    0
.eh_frame:0000000000008857                 db    0
.eh_frame:0000000000008858                 db  48h ; H
.eh_frame:0000000000008859                 db  0Bh
.eh_frame:000000000000885A                 db    0
.eh_frame:000000000000885B                 db    0
.eh_frame:000000000000885C                 db 0C4h
.eh_frame:000000000000885D                 db 0CFh
.eh_frame:000000000000885E                 db 0FFh
.eh_frame:000000000000885F                 db 0FFh
.eh_frame:0000000000008860                 db  17h
.eh_frame:0000000000008861                 db    0
.eh_frame:0000000000008862                 db    0
.eh_frame:0000000000008863                 db    0
.eh_frame:0000000000008864                 db    0
.eh_frame:0000000000008865                 db    0
.eh_frame:0000000000008866                 db    0
.eh_frame:0000000000008867                 db    0
.eh_frame:0000000000008868                 db  10h
.eh_frame:0000000000008869                 db    0
.eh_frame:000000000000886A                 db    0
.eh_frame:000000000000886B                 db    0
.eh_frame:000000000000886C                 db  5Ch ; \
.eh_frame:000000000000886D                 db  0Bh
.eh_frame:000000000000886E                 db    0
.eh_frame:000000000000886F                 db    0
.eh_frame:0000000000008870                 db 0D0h
.eh_frame:0000000000008871                 db 0CFh
.eh_frame:0000000000008872                 db 0FFh
.eh_frame:0000000000008873                 db 0FFh
.eh_frame:0000000000008874                 db  13h
.eh_frame:0000000000008875                 db    0
.eh_frame:0000000000008876                 db    0
.eh_frame:0000000000008877                 db    0
.eh_frame:0000000000008878                 db    0
.eh_frame:0000000000008879                 db    0
.eh_frame:000000000000887A                 db    0
.eh_frame:000000000000887B                 db    0
.eh_frame:000000000000887C                 db  10h
.eh_frame:000000000000887D                 db    0
.eh_frame:000000000000887E                 db    0
.eh_frame:000000000000887F                 db    0
.eh_frame:0000000000008880                 db  70h ; p
.eh_frame:0000000000008881                 db  0Bh
.eh_frame:0000000000008882                 db    0
.eh_frame:0000000000008883                 db    0
.eh_frame:0000000000008884                 db 0DCh
.eh_frame:0000000000008885                 db 0CFh
.eh_frame:0000000000008886                 db 0FFh
.eh_frame:0000000000008887                 db 0FFh
.eh_frame:0000000000008888                 db  0Ch
.eh_frame:0000000000008889                 db    0
.eh_frame:000000000000888A                 db    0
.eh_frame:000000000000888B                 db    0
.eh_frame:000000000000888C                 db    0
.eh_frame:000000000000888D                 db    0
.eh_frame:000000000000888E                 db    0
.eh_frame:000000000000888F                 db    0
.eh_frame:0000000000008890                 db  10h
.eh_frame:0000000000008891                 db    0
.eh_frame:0000000000008892                 db    0
.eh_frame:0000000000008893                 db    0
.eh_frame:0000000000008894                 db  84h
.eh_frame:0000000000008895                 db  0Bh
.eh_frame:0000000000008896                 db    0
.eh_frame:0000000000008897                 db    0
.eh_frame:0000000000008898                 db 0D8h
.eh_frame:0000000000008899                 db 0CFh
.eh_frame:000000000000889A                 db 0FFh
.eh_frame:000000000000889B                 db 0FFh
.eh_frame:000000000000889C                 db  14h
.eh_frame:000000000000889D                 db    0
.eh_frame:000000000000889E                 db    0
.eh_frame:000000000000889F                 db    0
.eh_frame:00000000000088A0                 db    0
.eh_frame:00000000000088A1                 db    0
.eh_frame:00000000000088A2                 db    0
.eh_frame:00000000000088A3                 db    0
.eh_frame:00000000000088A4                 db  10h
.eh_frame:00000000000088A5                 db    0
.eh_frame:00000000000088A6                 db    0
.eh_frame:00000000000088A7                 db    0
.eh_frame:00000000000088A8                 db  98h
.eh_frame:00000000000088A9                 db  0Bh
.eh_frame:00000000000088AA                 db    0
.eh_frame:00000000000088AB                 db    0
.eh_frame:00000000000088AC                 db 0E4h
.eh_frame:00000000000088AD                 db 0CFh
.eh_frame:00000000000088AE                 db 0FFh
.eh_frame:00000000000088AF                 db 0FFh
.eh_frame:00000000000088B0                 db  13h
.eh_frame:00000000000088B1                 db    0
.eh_frame:00000000000088B2                 db    0
.eh_frame:00000000000088B3                 db    0
.eh_frame:00000000000088B4                 db    0
.eh_frame:00000000000088B5                 db    0
.eh_frame:00000000000088B6                 db    0
.eh_frame:00000000000088B7                 db    0
.eh_frame:00000000000088B8                 db  14h
.eh_frame:00000000000088B9                 db    0
.eh_frame:00000000000088BA                 db    0
.eh_frame:00000000000088BB                 db    0
.eh_frame:00000000000088BC                 db 0ACh
.eh_frame:00000000000088BD                 db  0Bh
.eh_frame:00000000000088BE                 db    0
.eh_frame:00000000000088BF                 db    0
.eh_frame:00000000000088C0                 db 0F0h
.eh_frame:00000000000088C1                 db 0CFh
.eh_frame:00000000000088C2                 db 0FFh
.eh_frame:00000000000088C3                 db 0FFh
.eh_frame:00000000000088C4                 db  18h
.eh_frame:00000000000088C5                 db    0
.eh_frame:00000000000088C6                 db    0
.eh_frame:00000000000088C7                 db    0
.eh_frame:00000000000088C8                 db    0
.eh_frame:00000000000088C9                 db    0
.eh_frame:00000000000088CA                 db    0
.eh_frame:00000000000088CB                 db    0
.eh_frame:00000000000088CC                 db    0
.eh_frame:00000000000088CD                 db    0
.eh_frame:00000000000088CE                 db    0
.eh_frame:00000000000088CF                 db    0
.eh_frame:00000000000088D0                 db  38h ; 8
.eh_frame:00000000000088D1                 db    0
.eh_frame:00000000000088D2                 db    0
.eh_frame:00000000000088D3                 db    0
.eh_frame:00000000000088D4                 db 0C4h
.eh_frame:00000000000088D5                 db  0Bh
.eh_frame:00000000000088D6                 db    0
.eh_frame:00000000000088D7                 db    0
.eh_frame:00000000000088D8                 db 0F8h
.eh_frame:00000000000088D9                 db 0CFh
.eh_frame:00000000000088DA                 db 0FFh
.eh_frame:00000000000088DB                 db 0FFh
.eh_frame:00000000000088DC                 db  27h ; '
.eh_frame:00000000000088DD                 db    1
.eh_frame:00000000000088DE                 db    0
.eh_frame:00000000000088DF                 db    0
.eh_frame:00000000000088E0                 db    0
.eh_frame:00000000000088E1                 db  42h ; B
.eh_frame:00000000000088E2                 db  0Eh
.eh_frame:00000000000088E3                 db  10h
.eh_frame:00000000000088E4                 db  8Dh
.eh_frame:00000000000088E5                 db    2
.eh_frame:00000000000088E6                 db  42h ; B
.eh_frame:00000000000088E7                 db  0Eh
.eh_frame:00000000000088E8                 db  18h
.eh_frame:00000000000088E9                 db  8Ch
.eh_frame:00000000000088EA                 db    3
.eh_frame:00000000000088EB                 db  44h ; D
.eh_frame:00000000000088EC                 db  0Eh
.eh_frame:00000000000088ED                 db  20h
.eh_frame:00000000000088EE                 db  86h
.eh_frame:00000000000088EF                 db    4
.eh_frame:00000000000088F0                 db  41h ; A
.eh_frame:00000000000088F1                 db  0Eh
.eh_frame:00000000000088F2                 db  28h ; (
.eh_frame:00000000000088F3                 db  83h
.eh_frame:00000000000088F4                 db    5
.eh_frame:00000000000088F5                 db  4Fh ; O
.eh_frame:00000000000088F6                 db  0Eh
.eh_frame:00000000000088F7                 db 0E0h
.eh_frame:00000000000088F8                 db    2
.eh_frame:00000000000088F9                 db    2
.eh_frame:00000000000088FA                 db 0B5h
.eh_frame:00000000000088FB                 db  0Ah
.eh_frame:00000000000088FC                 db  0Eh
.eh_frame:00000000000088FD                 db  28h ; (
.eh_frame:00000000000088FE                 db  41h ; A
.eh_frame:00000000000088FF                 db  0Eh
.eh_frame:0000000000008900                 db  20h
.eh_frame:0000000000008901                 db  41h ; A
.eh_frame:0000000000008902                 db  0Eh
.eh_frame:0000000000008903                 db  18h
.eh_frame:0000000000008904                 db  42h ; B
.eh_frame:0000000000008905                 db  0Eh
.eh_frame:0000000000008906                 db  10h
.eh_frame:0000000000008907                 db  42h ; B
.eh_frame:0000000000008908                 db  0Eh
.eh_frame:0000000000008909                 db    8
.eh_frame:000000000000890A                 db  45h ; E
.eh_frame:000000000000890B                 db  0Bh
.eh_frame:000000000000890C                 db  5Ch ; \
.eh_frame:000000000000890D                 db    0
.eh_frame:000000000000890E                 db    0
.eh_frame:000000000000890F                 db    0
.eh_frame:0000000000008910                 db    0
.eh_frame:0000000000008911                 db  0Ch
.eh_frame:0000000000008912                 db    0
.eh_frame:0000000000008913                 db    0
.eh_frame:0000000000008914                 db 0ECh
.eh_frame:0000000000008915                 db 0D0h
.eh_frame:0000000000008916                 db 0FFh
.eh_frame:0000000000008917                 db 0FFh
.eh_frame:0000000000008918                 db  92h
.eh_frame:0000000000008919                 db    0
.eh_frame:000000000000891A                 db    0
.eh_frame:000000000000891B                 db    0
.eh_frame:000000000000891C                 db    0
.eh_frame:000000000000891D                 db  42h ; B
.eh_frame:000000000000891E                 db  0Eh
.eh_frame:000000000000891F                 db  10h
.eh_frame:0000000000008920                 db  8Fh
.eh_frame:0000000000008921                 db    2
.eh_frame:0000000000008922                 db  42h ; B
.eh_frame:0000000000008923                 db  0Eh
.eh_frame:0000000000008924                 db  18h
.eh_frame:0000000000008925                 db  8Eh
.eh_frame:0000000000008926                 db    3
.eh_frame:0000000000008927                 db  45h ; E
.eh_frame:0000000000008928                 db  0Eh
.eh_frame:0000000000008929                 db  20h
.eh_frame:000000000000892A                 db  8Dh
.eh_frame:000000000000892B                 db    4
.eh_frame:000000000000892C                 db  42h ; B
.eh_frame:000000000000892D                 db  0Eh
.eh_frame:000000000000892E                 db  28h ; (
.eh_frame:000000000000892F                 db  8Ch
.eh_frame:0000000000008930                 db    5
.eh_frame:0000000000008931                 db  41h ; A
.eh_frame:0000000000008932                 db  0Eh
.eh_frame:0000000000008933                 db  30h ; 0
.eh_frame:0000000000008934                 db  86h
.eh_frame:0000000000008935                 db    6
.eh_frame:0000000000008936                 db  41h ; A
.eh_frame:0000000000008937                 db  0Eh
.eh_frame:0000000000008938                 db  38h ; 8
.eh_frame:0000000000008939                 db  83h
.eh_frame:000000000000893A                 db    7
.eh_frame:000000000000893B                 db  4Ah ; J
.eh_frame:000000000000893C                 db  0Eh
.eh_frame:000000000000893D                 db  50h ; P
.eh_frame:000000000000893E                 db  76h ; v
.eh_frame:000000000000893F                 db  0Ah
.eh_frame:0000000000008940                 db  0Eh
.eh_frame:0000000000008941                 db  38h ; 8
.eh_frame:0000000000008942                 db  43h ; C
.eh_frame:0000000000008943                 db  0Eh
.eh_frame:0000000000008944                 db  30h ; 0
.eh_frame:0000000000008945                 db  41h ; A
.eh_frame:0000000000008946                 db  0Eh
.eh_frame:0000000000008947                 db  28h ; (
.eh_frame:0000000000008948                 db  42h ; B
.eh_frame:0000000000008949                 db  0Eh
.eh_frame:000000000000894A                 db  20h
.eh_frame:000000000000894B                 db  42h ; B
.eh_frame:000000000000894C                 db  0Eh
.eh_frame:000000000000894D                 db  18h
.eh_frame:000000000000894E                 db  42h ; B
.eh_frame:000000000000894F                 db  0Eh
.eh_frame:0000000000008950                 db  10h
.eh_frame:0000000000008951                 db  42h ; B
.eh_frame:0000000000008952                 db  0Eh
.eh_frame:0000000000008953                 db    8
.eh_frame:0000000000008954                 db  47h ; G
.eh_frame:0000000000008955                 db  0Bh
.eh_frame:0000000000008956                 db  5Ah ; Z
.eh_frame:0000000000008957                 db  0Eh
.eh_frame:0000000000008958                 db  38h ; 8
.eh_frame:0000000000008959                 db  4Ah ; J
.eh_frame:000000000000895A                 db  0Eh
.eh_frame:000000000000895B                 db  30h ; 0
.eh_frame:000000000000895C                 db  41h ; A
.eh_frame:000000000000895D                 db  0Eh
.eh_frame:000000000000895E                 db  28h ; (
.eh_frame:000000000000895F                 db  42h ; B
.eh_frame:0000000000008960                 db  0Eh
.eh_frame:0000000000008961                 db  20h
.eh_frame:0000000000008962                 db  42h ; B
.eh_frame:0000000000008963                 db  0Eh
.eh_frame:0000000000008964                 db  18h
.eh_frame:0000000000008965                 db  42h ; B
.eh_frame:0000000000008966                 db  0Eh
.eh_frame:0000000000008967                 db  10h
.eh_frame:0000000000008968                 db  42h ; B
.eh_frame:0000000000008969                 db  0Eh
.eh_frame:000000000000896A                 db    8
.eh_frame:000000000000896B                 db    0
.eh_frame:000000000000896C                 db  10h
.eh_frame:000000000000896D                 db    0
.eh_frame:000000000000896E                 db    0
.eh_frame:000000000000896F                 db    0
.eh_frame:0000000000008970                 db  60h ; `
.eh_frame:0000000000008971                 db  0Ch
.eh_frame:0000000000008972                 db    0
.eh_frame:0000000000008973                 db    0
.eh_frame:0000000000008974                 db  2Ch ; ,
.eh_frame:0000000000008975                 db 0D1h
.eh_frame:0000000000008976                 db 0FFh
.eh_frame:0000000000008977                 db 0FFh
.eh_frame:0000000000008978                 db  12h
.eh_frame:0000000000008979                 db    0
.eh_frame:000000000000897A                 db    0
.eh_frame:000000000000897B                 db    0
.eh_frame:000000000000897C                 db    0
.eh_frame:000000000000897D                 db    0
.eh_frame:000000000000897E                 db    0
.eh_frame:000000000000897F                 db    0
.eh_frame:0000000000008980                 db  10h
.eh_frame:0000000000008981                 db    1
.eh_frame:0000000000008982                 db    0
.eh_frame:0000000000008983                 db    0
.eh_frame:0000000000008984                 db  74h ; t
.eh_frame:0000000000008985                 db  0Ch
.eh_frame:0000000000008986                 db    0
.eh_frame:0000000000008987                 db    0
.eh_frame:0000000000008988                 db  38h ; 8
.eh_frame:0000000000008989                 db 0D1h
.eh_frame:000000000000898A                 db 0FFh
.eh_frame:000000000000898B                 db 0FFh
.eh_frame:000000000000898C                 db  17h
.eh_frame:000000000000898D                 db    4
.eh_frame:000000000000898E                 db    0
.eh_frame:000000000000898F                 db    0
.eh_frame:0000000000008990                 db    0
.eh_frame:0000000000008991                 db  42h ; B
.eh_frame:0000000000008992                 db  0Eh
.eh_frame:0000000000008993                 db  10h
.eh_frame:0000000000008994                 db  8Fh
.eh_frame:0000000000008995                 db    2
.eh_frame:0000000000008996                 db  42h ; B
.eh_frame:0000000000008997                 db  0Eh
.eh_frame:0000000000008998                 db  18h
.eh_frame:0000000000008999                 db  8Eh
.eh_frame:000000000000899A                 db    3
.eh_frame:000000000000899B                 db  42h ; B
.eh_frame:000000000000899C                 db  0Eh
.eh_frame:000000000000899D                 db  20h
.eh_frame:000000000000899E                 db  8Dh
.eh_frame:000000000000899F                 db    4
.eh_frame:00000000000089A0                 db  42h ; B
.eh_frame:00000000000089A1                 db  0Eh
.eh_frame:00000000000089A2                 db  28h ; (
.eh_frame:00000000000089A3                 db  8Ch
.eh_frame:00000000000089A4                 db    5
.eh_frame:00000000000089A5                 db  44h ; D
.eh_frame:00000000000089A6                 db  0Eh
.eh_frame:00000000000089A7                 db  30h ; 0
.eh_frame:00000000000089A8                 db  86h
.eh_frame:00000000000089A9                 db    6
.eh_frame:00000000000089AA                 db  41h ; A
.eh_frame:00000000000089AB                 db  0Eh
.eh_frame:00000000000089AC                 db  38h ; 8
.eh_frame:00000000000089AD                 db  83h
.eh_frame:00000000000089AE                 db    7
.eh_frame:00000000000089AF                 db  4Ah ; J
.eh_frame:00000000000089B0                 db  0Eh
.eh_frame:00000000000089B1                 db  60h ; `
.eh_frame:00000000000089B2                 db    2
.eh_frame:00000000000089B3                 db 0DDh
.eh_frame:00000000000089B4                 db  0Eh
.eh_frame:00000000000089B5                 db  68h ; h
.eh_frame:00000000000089B6                 db  57h ; W
.eh_frame:00000000000089B7                 db  0Eh
.eh_frame:00000000000089B8                 db  70h ; p
.eh_frame:00000000000089B9                 db  42h ; B
.eh_frame:00000000000089BA                 db  0Eh
.eh_frame:00000000000089BB                 db  78h ; x
.eh_frame:00000000000089BC                 db  42h ; B
.eh_frame:00000000000089BD                 db  0Eh
.eh_frame:00000000000089BE                 db  80h
.eh_frame:00000000000089BF                 db    1
.eh_frame:00000000000089C0                 db  42h ; B
.eh_frame:00000000000089C1                 db  0Eh
.eh_frame:00000000000089C2                 db  88h
.eh_frame:00000000000089C3                 db    1
.eh_frame:00000000000089C4                 db  42h ; B
.eh_frame:00000000000089C5                 db  0Eh
.eh_frame:00000000000089C6                 db  90h
.eh_frame:00000000000089C7                 db    1
.eh_frame:00000000000089C8                 db  53h ; S
.eh_frame:00000000000089C9                 db  0Eh
.eh_frame:00000000000089CA                 db  60h ; `
.eh_frame:00000000000089CB                 db  44h ; D
.eh_frame:00000000000089CC                 db  0Ah
.eh_frame:00000000000089CD                 db  0Eh
.eh_frame:00000000000089CE                 db  38h ; 8
.eh_frame:00000000000089CF                 db  41h ; A
.eh_frame:00000000000089D0                 db  0Eh
.eh_frame:00000000000089D1                 db  30h ; 0
.eh_frame:00000000000089D2                 db  41h ; A
.eh_frame:00000000000089D3                 db  0Eh
.eh_frame:00000000000089D4                 db  28h ; (
.eh_frame:00000000000089D5                 db  42h ; B
.eh_frame:00000000000089D6                 db  0Eh
.eh_frame:00000000000089D7                 db  20h
.eh_frame:00000000000089D8                 db  42h ; B
.eh_frame:00000000000089D9                 db  0Eh
.eh_frame:00000000000089DA                 db  18h
.eh_frame:00000000000089DB                 db  42h ; B
.eh_frame:00000000000089DC                 db  0Eh
.eh_frame:00000000000089DD                 db  10h
.eh_frame:00000000000089DE                 db  42h ; B
.eh_frame:00000000000089DF                 db  0Eh
.eh_frame:00000000000089E0                 db    8
.eh_frame:00000000000089E1                 db  44h ; D
.eh_frame:00000000000089E2                 db  0Bh
.eh_frame:00000000000089E3                 db    2
.eh_frame:00000000000089E4                 db  78h ; x
.eh_frame:00000000000089E5                 db  0Ah
.eh_frame:00000000000089E6                 db  0Eh
.eh_frame:00000000000089E7                 db  68h ; h
.eh_frame:00000000000089E8                 db  48h ; H
.eh_frame:00000000000089E9                 db  0Bh
.eh_frame:00000000000089EA                 db  5Ah ; Z
.eh_frame:00000000000089EB                 db  0Ah
.eh_frame:00000000000089EC                 db  0Eh
.eh_frame:00000000000089ED                 db  38h ; 8
.eh_frame:00000000000089EE                 db  47h ; G
.eh_frame:00000000000089EF                 db  0Eh
.eh_frame:00000000000089F0                 db  30h ; 0
.eh_frame:00000000000089F1                 db  41h ; A
.eh_frame:00000000000089F2                 db  0Eh
.eh_frame:00000000000089F3                 db  28h ; (
.eh_frame:00000000000089F4                 db  42h ; B
.eh_frame:00000000000089F5                 db  0Eh
.eh_frame:00000000000089F6                 db  20h
.eh_frame:00000000000089F7                 db  42h ; B
.eh_frame:00000000000089F8                 db  0Eh
.eh_frame:00000000000089F9                 db  18h
.eh_frame:00000000000089FA                 db  42h ; B
.eh_frame:00000000000089FB                 db  0Eh
.eh_frame:00000000000089FC                 db  10h
.eh_frame:00000000000089FD                 db  42h ; B
.eh_frame:00000000000089FE                 db  0Eh
.eh_frame:00000000000089FF                 db    8
.eh_frame:0000000000008A00                 db  56h ; V
.eh_frame:0000000000008A01                 db  0Bh
.eh_frame:0000000000008A02                 db  5Eh ; ^
.eh_frame:0000000000008A03                 db  0Ah
.eh_frame:0000000000008A04                 db  0Eh
.eh_frame:0000000000008A05                 db  38h ; 8
.eh_frame:0000000000008A06                 db  52h ; R
.eh_frame:0000000000008A07                 db  0Eh
.eh_frame:0000000000008A08                 db  30h ; 0
.eh_frame:0000000000008A09                 db  41h ; A
.eh_frame:0000000000008A0A                 db  0Eh
.eh_frame:0000000000008A0B                 db  28h ; (
.eh_frame:0000000000008A0C                 db  42h ; B
.eh_frame:0000000000008A0D                 db  0Eh
.eh_frame:0000000000008A0E                 db  20h
.eh_frame:0000000000008A0F                 db  42h ; B
.eh_frame:0000000000008A10                 db  0Eh
.eh_frame:0000000000008A11                 db  18h
.eh_frame:0000000000008A12                 db  42h ; B
.eh_frame:0000000000008A13                 db  0Eh
.eh_frame:0000000000008A14                 db  10h
.eh_frame:0000000000008A15                 db  42h ; B
.eh_frame:0000000000008A16                 db  0Eh
.eh_frame:0000000000008A17                 db    8
.eh_frame:0000000000008A18                 db  4Fh ; O
.eh_frame:0000000000008A19                 db  0Bh
.eh_frame:0000000000008A1A                 db  62h ; b
.eh_frame:0000000000008A1B                 db  0Ah
.eh_frame:0000000000008A1C                 db  0Eh
.eh_frame:0000000000008A1D                 db  38h ; 8
.eh_frame:0000000000008A1E                 db  50h ; P
.eh_frame:0000000000008A1F                 db  0Eh
.eh_frame:0000000000008A20                 db  30h ; 0
.eh_frame:0000000000008A21                 db  41h ; A
.eh_frame:0000000000008A22                 db  0Eh
.eh_frame:0000000000008A23                 db  28h ; (
.eh_frame:0000000000008A24                 db  42h ; B
.eh_frame:0000000000008A25                 db  0Eh
.eh_frame:0000000000008A26                 db  20h
.eh_frame:0000000000008A27                 db  42h ; B
.eh_frame:0000000000008A28                 db  0Eh
.eh_frame:0000000000008A29                 db  18h
.eh_frame:0000000000008A2A                 db  42h ; B
.eh_frame:0000000000008A2B                 db  0Eh
.eh_frame:0000000000008A2C                 db  10h
.eh_frame:0000000000008A2D                 db  42h ; B
.eh_frame:0000000000008A2E                 db  0Eh
.eh_frame:0000000000008A2F                 db    8
.eh_frame:0000000000008A30                 db  55h ; U
.eh_frame:0000000000008A31                 db  0Bh
.eh_frame:0000000000008A32                 db  66h ; f
.eh_frame:0000000000008A33                 db  0Eh
.eh_frame:0000000000008A34                 db  68h ; h
.eh_frame:0000000000008A35                 db  42h ; B
.eh_frame:0000000000008A36                 db  0Eh
.eh_frame:0000000000008A37                 db  70h ; p
.eh_frame:0000000000008A38                 db  5Ch ; \
.eh_frame:0000000000008A39                 db  0Eh
.eh_frame:0000000000008A3A                 db  68h ; h
.eh_frame:0000000000008A3B                 db  41h ; A
.eh_frame:0000000000008A3C                 db  0Eh
.eh_frame:0000000000008A3D                 db  60h ; `
.eh_frame:0000000000008A3E                 db  44h ; D
.eh_frame:0000000000008A3F                 db  0Ah
.eh_frame:0000000000008A40                 db  0Eh
.eh_frame:0000000000008A41                 db  38h ; 8
.eh_frame:0000000000008A42                 db  41h ; A
.eh_frame:0000000000008A43                 db  0Eh
.eh_frame:0000000000008A44                 db  30h ; 0
.eh_frame:0000000000008A45                 db  41h ; A
.eh_frame:0000000000008A46                 db  0Eh
.eh_frame:0000000000008A47                 db  28h ; (
.eh_frame:0000000000008A48                 db  42h ; B
.eh_frame:0000000000008A49                 db  0Eh
.eh_frame:0000000000008A4A                 db  20h
.eh_frame:0000000000008A4B                 db  42h ; B
.eh_frame:0000000000008A4C                 db  0Eh
.eh_frame:0000000000008A4D                 db  18h
.eh_frame:0000000000008A4E                 db  42h ; B
.eh_frame:0000000000008A4F                 db  0Eh
.eh_frame:0000000000008A50                 db  10h
.eh_frame:0000000000008A51                 db  42h ; B
.eh_frame:0000000000008A52                 db  0Eh
.eh_frame:0000000000008A53                 db    8
.eh_frame:0000000000008A54                 db  45h ; E
.eh_frame:0000000000008A55                 db  0Bh
.eh_frame:0000000000008A56                 db  68h ; h
.eh_frame:0000000000008A57                 db  0Ah
.eh_frame:0000000000008A58                 db  0Eh
.eh_frame:0000000000008A59                 db  68h ; h
.eh_frame:0000000000008A5A                 db  48h ; H
.eh_frame:0000000000008A5B                 db  0Bh
.eh_frame:0000000000008A5C                 db  72h ; r
.eh_frame:0000000000008A5D                 db  0Eh
.eh_frame:0000000000008A5E                 db  68h ; h
.eh_frame:0000000000008A5F                 db  45h ; E
.eh_frame:0000000000008A60                 db  0Eh
.eh_frame:0000000000008A61                 db  70h ; p
.eh_frame:0000000000008A62                 db  42h ; B
.eh_frame:0000000000008A63                 db  0Eh
.eh_frame:0000000000008A64                 db  78h ; x
.eh_frame:0000000000008A65                 db  42h ; B
.eh_frame:0000000000008A66                 db  0Eh
.eh_frame:0000000000008A67                 db  80h
.eh_frame:0000000000008A68                 db    1
.eh_frame:0000000000008A69                 db  5Eh ; ^
.eh_frame:0000000000008A6A                 db  0Eh
.eh_frame:0000000000008A6B                 db  60h ; `
.eh_frame:0000000000008A6C                 db  44h ; D
.eh_frame:0000000000008A6D                 db  0Ah
.eh_frame:0000000000008A6E                 db  0Eh
.eh_frame:0000000000008A6F                 db  38h ; 8
.eh_frame:0000000000008A70                 db  41h ; A
.eh_frame:0000000000008A71                 db  0Eh
.eh_frame:0000000000008A72                 db  30h ; 0
.eh_frame:0000000000008A73                 db  41h ; A
.eh_frame:0000000000008A74                 db  0Eh
.eh_frame:0000000000008A75                 db  28h ; (
.eh_frame:0000000000008A76                 db  42h ; B
.eh_frame:0000000000008A77                 db  0Eh
.eh_frame:0000000000008A78                 db  20h
.eh_frame:0000000000008A79                 db  42h ; B
.eh_frame:0000000000008A7A                 db  0Eh
.eh_frame:0000000000008A7B                 db  18h
.eh_frame:0000000000008A7C                 db  42h ; B
.eh_frame:0000000000008A7D                 db  0Eh
.eh_frame:0000000000008A7E                 db  10h
.eh_frame:0000000000008A7F                 db  42h ; B
.eh_frame:0000000000008A80                 db  0Eh
.eh_frame:0000000000008A81                 db    8
.eh_frame:0000000000008A82                 db  41h ; A
.eh_frame:0000000000008A83                 db  0Bh
.eh_frame:0000000000008A84                 db  79h ; y
.eh_frame:0000000000008A85                 db  0Ah
.eh_frame:0000000000008A86                 db  0Eh
.eh_frame:0000000000008A87                 db  68h ; h
.eh_frame:0000000000008A88                 db  42h ; B
.eh_frame:0000000000008A89                 db  0Eh
.eh_frame:0000000000008A8A                 db  70h ; p
.eh_frame:0000000000008A8B                 db  42h ; B
.eh_frame:0000000000008A8C                 db  0Eh
.eh_frame:0000000000008A8D                 db  78h ; x
.eh_frame:0000000000008A8E                 db  42h ; B
.eh_frame:0000000000008A8F                 db  0Eh
.eh_frame:0000000000008A90                 db  80h
.eh_frame:0000000000008A91                 db    1
.eh_frame:0000000000008A92                 db  51h ; Q
.eh_frame:0000000000008A93                 db  0Bh
.eh_frame:0000000000008A94                 db  10h
.eh_frame:0000000000008A95                 db    0
.eh_frame:0000000000008A96                 db    0
.eh_frame:0000000000008A97                 db    0
.eh_frame:0000000000008A98                 db  88h
.eh_frame:0000000000008A99                 db  0Dh
.eh_frame:0000000000008A9A                 db    0
.eh_frame:0000000000008A9B                 db    0
.eh_frame:0000000000008A9C                 db  44h ; D
.eh_frame:0000000000008A9D                 db 0D4h
.eh_frame:0000000000008A9E                 db 0FFh
.eh_frame:0000000000008A9F                 db 0FFh
.eh_frame:0000000000008AA0                 db  20h
.eh_frame:0000000000008AA1                 db    0
.eh_frame:0000000000008AA2                 db    0
.eh_frame:0000000000008AA3                 db    0
.eh_frame:0000000000008AA4                 db    0
.eh_frame:0000000000008AA5                 db    0
.eh_frame:0000000000008AA6                 db    0
.eh_frame:0000000000008AA7                 db    0
.eh_frame:0000000000008AA8                 db  18h
.eh_frame:0000000000008AA9                 db    0
.eh_frame:0000000000008AAA                 db    0
.eh_frame:0000000000008AAB                 db    0
.eh_frame:0000000000008AAC                 db  9Ch
.eh_frame:0000000000008AAD                 db  0Dh
.eh_frame:0000000000008AAE                 db    0
.eh_frame:0000000000008AAF                 db    0
.eh_frame:0000000000008AB0                 db  50h ; P
.eh_frame:0000000000008AB1                 db 0D4h
.eh_frame:0000000000008AB2                 db 0FFh
.eh_frame:0000000000008AB3                 db 0FFh
.eh_frame:0000000000008AB4                 db  78h ; x
.eh_frame:0000000000008AB5                 db    0
.eh_frame:0000000000008AB6                 db    0
.eh_frame:0000000000008AB7                 db    0
.eh_frame:0000000000008AB8                 db    0
.eh_frame:0000000000008AB9                 db  44h ; D
.eh_frame:0000000000008ABA                 db  0Eh
.eh_frame:0000000000008ABB                 db  70h ; p
.eh_frame:0000000000008ABC                 db    2
.eh_frame:0000000000008ABD                 db  60h ; `
.eh_frame:0000000000008ABE                 db  0Ah
.eh_frame:0000000000008ABF                 db  0Eh
.eh_frame:0000000000008AC0                 db    8
.eh_frame:0000000000008AC1                 db  41h ; A
.eh_frame:0000000000008AC2                 db  0Bh
.eh_frame:0000000000008AC3                 db    0
.eh_frame:0000000000008AC4                 db  28h ; (
.eh_frame:0000000000008AC5                 db    0
.eh_frame:0000000000008AC6                 db    0
.eh_frame:0000000000008AC7                 db    0
.eh_frame:0000000000008AC8                 db 0B8h
.eh_frame:0000000000008AC9                 db  0Dh
.eh_frame:0000000000008ACA                 db    0
.eh_frame:0000000000008ACB                 db    0
.eh_frame:0000000000008ACC                 db 0B4h
.eh_frame:0000000000008ACD                 db 0D4h
.eh_frame:0000000000008ACE                 db 0FFh
.eh_frame:0000000000008ACF                 db 0FFh
.eh_frame:0000000000008AD0                 db 0D5h
.eh_frame:0000000000008AD1                 db    0
.eh_frame:0000000000008AD2                 db    0
.eh_frame:0000000000008AD3                 db    0
.eh_frame:0000000000008AD4                 db    0
.eh_frame:0000000000008AD5                 db  41h ; A
.eh_frame:0000000000008AD6                 db  0Eh
.eh_frame:0000000000008AD7                 db  10h
.eh_frame:0000000000008AD8                 db  86h
.eh_frame:0000000000008AD9                 db    2
.eh_frame:0000000000008ADA                 db  41h ; A
.eh_frame:0000000000008ADB                 db  0Eh
.eh_frame:0000000000008ADC                 db  18h
.eh_frame:0000000000008ADD                 db  83h
.eh_frame:0000000000008ADE                 db    3
.eh_frame:0000000000008ADF                 db  50h ; P
.eh_frame:0000000000008AE0                 db  0Eh
.eh_frame:0000000000008AE1                 db 0D0h
.eh_frame:0000000000008AE2                 db    1
.eh_frame:0000000000008AE3                 db    2
.eh_frame:0000000000008AE4                 db 0ABh
.eh_frame:0000000000008AE5                 db  0Ah
.eh_frame:0000000000008AE6                 db  0Eh
.eh_frame:0000000000008AE7                 db  18h
.eh_frame:0000000000008AE8                 db  41h ; A
.eh_frame:0000000000008AE9                 db  0Eh
.eh_frame:0000000000008AEA                 db  10h
.eh_frame:0000000000008AEB                 db  41h ; A
.eh_frame:0000000000008AEC                 db  0Eh
.eh_frame:0000000000008AED                 db    8
.eh_frame:0000000000008AEE                 db  41h ; A
.eh_frame:0000000000008AEF                 db  0Bh
.eh_frame:0000000000008AF0                 db  1Ch
.eh_frame:0000000000008AF1                 db    0
.eh_frame:0000000000008AF2                 db    0
.eh_frame:0000000000008AF3                 db    0
.eh_frame:0000000000008AF4                 db 0E4h
.eh_frame:0000000000008AF5                 db  0Dh
.eh_frame:0000000000008AF6                 db    0
.eh_frame:0000000000008AF7                 db    0
.eh_frame:0000000000008AF8                 db  68h ; h
.eh_frame:0000000000008AF9                 db 0D5h
.eh_frame:0000000000008AFA                 db 0FFh
.eh_frame:0000000000008AFB                 db 0FFh
.eh_frame:0000000000008AFC                 db  80h
.eh_frame:0000000000008AFD                 db    0
.eh_frame:0000000000008AFE                 db    0
.eh_frame:0000000000008AFF                 db    0
.eh_frame:0000000000008B00                 db    0
.eh_frame:0000000000008B01                 db  41h ; A
.eh_frame:0000000000008B02                 db  0Eh
.eh_frame:0000000000008B03                 db  10h
.eh_frame:0000000000008B04                 db  83h
.eh_frame:0000000000008B05                 db    2
.eh_frame:0000000000008B06                 db    2
.eh_frame:0000000000008B07                 db  7Ah ; z
.eh_frame:0000000000008B08                 db  0Eh
.eh_frame:0000000000008B09                 db    8
.eh_frame:0000000000008B0A                 db    0
.eh_frame:0000000000008B0B                 db    0
.eh_frame:0000000000008B0C                 db    0
.eh_frame:0000000000008B0D                 db    0
.eh_frame:0000000000008B0E                 db    0
.eh_frame:0000000000008B0F                 db    0
.eh_frame:0000000000008B10                 db  18h
.eh_frame:0000000000008B11                 db    0
.eh_frame:0000000000008B12                 db    0
.eh_frame:0000000000008B13                 db    0
.eh_frame:0000000000008B14                 db    4
.eh_frame:0000000000008B15                 db  0Eh
.eh_frame:0000000000008B16                 db    0
.eh_frame:0000000000008B17                 db    0
.eh_frame:0000000000008B18                 db 0C8h
.eh_frame:0000000000008B19                 db 0D5h
.eh_frame:0000000000008B1A                 db 0FFh
.eh_frame:0000000000008B1B                 db 0FFh
.eh_frame:0000000000008B1C                 db  1Ah
.eh_frame:0000000000008B1D                 db    0
.eh_frame:0000000000008B1E                 db    0
.eh_frame:0000000000008B1F                 db    0
.eh_frame:0000000000008B20                 db    0
.eh_frame:0000000000008B21                 db  41h ; A
.eh_frame:0000000000008B22                 db  0Eh
.eh_frame:0000000000008B23                 db  10h
.eh_frame:0000000000008B24                 db  83h
.eh_frame:0000000000008B25                 db    2
.eh_frame:0000000000008B26                 db  53h ; S
.eh_frame:0000000000008B27                 db  0Ah
.eh_frame:0000000000008B28                 db  0Eh
.eh_frame:0000000000008B29                 db    8
.eh_frame:0000000000008B2A                 db  41h ; A
.eh_frame:0000000000008B2B                 db  0Bh
.eh_frame:0000000000008B2C                 db  10h
.eh_frame:0000000000008B2D                 db    0
.eh_frame:0000000000008B2E                 db    0
.eh_frame:0000000000008B2F                 db    0
.eh_frame:0000000000008B30                 db  20h
.eh_frame:0000000000008B31                 db  0Eh
.eh_frame:0000000000008B32                 db    0
.eh_frame:0000000000008B33                 db    0
.eh_frame:0000000000008B34                 db 0CCh
.eh_frame:0000000000008B35                 db 0D5h
.eh_frame:0000000000008B36                 db 0FFh
.eh_frame:0000000000008B37                 db 0FFh
.eh_frame:0000000000008B38                 db  24h ; $
.eh_frame:0000000000008B39                 db    0
.eh_frame:0000000000008B3A                 db    0
.eh_frame:0000000000008B3B                 db    0
.eh_frame:0000000000008B3C                 db    0
.eh_frame:0000000000008B3D                 db  5Fh ; _
.eh_frame:0000000000008B3E                 db  0Eh
.eh_frame:0000000000008B3F                 db  10h
.eh_frame:0000000000008B40                 db  10h
.eh_frame:0000000000008B41                 db    0
.eh_frame:0000000000008B42                 db    0
.eh_frame:0000000000008B43                 db    0
.eh_frame:0000000000008B44                 db  34h ; 4
.eh_frame:0000000000008B45                 db  0Eh
.eh_frame:0000000000008B46                 db    0
.eh_frame:0000000000008B47                 db    0
.eh_frame:0000000000008B48                 db 0E8h
.eh_frame:0000000000008B49                 db 0D5h
.eh_frame:0000000000008B4A                 db 0FFh
.eh_frame:0000000000008B4B                 db 0FFh
.eh_frame:0000000000008B4C                 db    2
.eh_frame:0000000000008B4D                 db    0
.eh_frame:0000000000008B4E                 db    0
.eh_frame:0000000000008B4F                 db    0
.eh_frame:0000000000008B50                 db    0
.eh_frame:0000000000008B51                 db    0
.eh_frame:0000000000008B52                 db    0
.eh_frame:0000000000008B53                 db    0
.eh_frame:0000000000008B54                 db  20h
.eh_frame:0000000000008B55                 db    0
.eh_frame:0000000000008B56                 db    0
.eh_frame:0000000000008B57                 db    0
.eh_frame:0000000000008B58                 db  48h ; H
.eh_frame:0000000000008B59                 db  0Eh
.eh_frame:0000000000008B5A                 db    0
.eh_frame:0000000000008B5B                 db    0
.eh_frame:0000000000008B5C                 db 0E4h
.eh_frame:0000000000008B5D                 db 0D5h
.eh_frame:0000000000008B5E                 db 0FFh
.eh_frame:0000000000008B5F                 db 0FFh
.eh_frame:0000000000008B60                 db  36h ; 6
.eh_frame:0000000000008B61                 db    0
.eh_frame:0000000000008B62                 db    0
.eh_frame:0000000000008B63                 db    0
.eh_frame:0000000000008B64                 db    0
.eh_frame:0000000000008B65                 db  44h ; D
.eh_frame:0000000000008B66                 db  0Eh
.eh_frame:0000000000008B67                 db  10h
.eh_frame:0000000000008B68                 db  83h
.eh_frame:0000000000008B69                 db    2
.eh_frame:0000000000008B6A                 db  5Dh ; ]
.eh_frame:0000000000008B6B                 db  0Ah
.eh_frame:0000000000008B6C                 db  0Eh
.eh_frame:0000000000008B6D                 db    8
.eh_frame:0000000000008B6E                 db  47h ; G
.eh_frame:0000000000008B6F                 db  0Bh
.eh_frame:0000000000008B70                 db  48h ; H
.eh_frame:0000000000008B71                 db  0Ah
.eh_frame:0000000000008B72                 db  0Eh
.eh_frame:0000000000008B73                 db    8
.eh_frame:0000000000008B74                 db  41h ; A
.eh_frame:0000000000008B75                 db  0Bh
.eh_frame:0000000000008B76                 db    0
.eh_frame:0000000000008B77                 db    0
.eh_frame:0000000000008B78                 db  10h
.eh_frame:0000000000008B79                 db    0
.eh_frame:0000000000008B7A                 db    0
.eh_frame:0000000000008B7B                 db    0
.eh_frame:0000000000008B7C                 db  6Ch ; l
.eh_frame:0000000000008B7D                 db  0Eh
.eh_frame:0000000000008B7E                 db    0
.eh_frame:0000000000008B7F                 db    0
.eh_frame:0000000000008B80                 db    0
.eh_frame:0000000000008B81                 db 0D6h
.eh_frame:0000000000008B82                 db 0FFh
.eh_frame:0000000000008B83                 db 0FFh
.eh_frame:0000000000008B84                 db  24h ; $
.eh_frame:0000000000008B85                 db    0
.eh_frame:0000000000008B86                 db    0
.eh_frame:0000000000008B87                 db    0
.eh_frame:0000000000008B88                 db    0
.eh_frame:0000000000008B89                 db  5Fh ; _
.eh_frame:0000000000008B8A                 db  0Eh
.eh_frame:0000000000008B8B                 db  10h
.eh_frame:0000000000008B8C                 db  14h
.eh_frame:0000000000008B8D                 db    0
.eh_frame:0000000000008B8E                 db    0
.eh_frame:0000000000008B8F                 db    0
.eh_frame:0000000000008B90                 db  80h
.eh_frame:0000000000008B91                 db  0Eh
.eh_frame:0000000000008B92                 db    0
.eh_frame:0000000000008B93                 db    0
.eh_frame:0000000000008B94                 db  1Ch
.eh_frame:0000000000008B95                 db 0D6h
.eh_frame:0000000000008B96                 db 0FFh
.eh_frame:0000000000008B97                 db 0FFh
.eh_frame:0000000000008B98                 db  82h
.eh_frame:0000000000008B99                 db    0
.eh_frame:0000000000008B9A                 db    0
.eh_frame:0000000000008B9B                 db    0
.eh_frame:0000000000008B9C                 db    0
.eh_frame:0000000000008B9D                 db    2
.eh_frame:0000000000008B9E                 db  5Fh ; _
.eh_frame:0000000000008B9F                 db  0Eh
.eh_frame:0000000000008BA0                 db  10h
.eh_frame:0000000000008BA1                 db  49h ; I
.eh_frame:0000000000008BA2                 db  0Eh
.eh_frame:0000000000008BA3                 db    8
.eh_frame:0000000000008BA4                 db  14h
.eh_frame:0000000000008BA5                 db    0
.eh_frame:0000000000008BA6                 db    0
.eh_frame:0000000000008BA7                 db    0
.eh_frame:0000000000008BA8                 db  98h
.eh_frame:0000000000008BA9                 db  0Eh
.eh_frame:0000000000008BAA                 db    0
.eh_frame:0000000000008BAB                 db    0
.eh_frame:0000000000008BAC                 db  94h
.eh_frame:0000000000008BAD                 db 0D6h
.eh_frame:0000000000008BAE                 db 0FFh
.eh_frame:0000000000008BAF                 db 0FFh
.eh_frame:0000000000008BB0                 db  4Ah ; J
.eh_frame:0000000000008BB1                 db    0
.eh_frame:0000000000008BB2                 db    0
.eh_frame:0000000000008BB3                 db    0
.eh_frame:0000000000008BB4                 db    0
.eh_frame:0000000000008BB5                 db    2
.eh_frame:0000000000008BB6                 db  45h ; E
.eh_frame:0000000000008BB7                 db  0Eh
.eh_frame:0000000000008BB8                 db  10h
.eh_frame:0000000000008BB9                 db    0
.eh_frame:0000000000008BBA                 db    0
.eh_frame:0000000000008BBB                 db    0
.eh_frame:0000000000008BBC                 db  18h
.eh_frame:0000000000008BBD                 db    0
.eh_frame:0000000000008BBE                 db    0
.eh_frame:0000000000008BBF                 db    0
.eh_frame:0000000000008BC0                 db 0B0h
.eh_frame:0000000000008BC1                 db  0Eh
.eh_frame:0000000000008BC2                 db    0
.eh_frame:0000000000008BC3                 db    0
.eh_frame:0000000000008BC4                 db 0CCh
.eh_frame:0000000000008BC5                 db 0D6h
.eh_frame:0000000000008BC6                 db 0FFh
.eh_frame:0000000000008BC7                 db 0FFh
.eh_frame:0000000000008BC8                 db  17h
.eh_frame:0000000000008BC9                 db    0
.eh_frame:0000000000008BCA                 db    0
.eh_frame:0000000000008BCB                 db    0
.eh_frame:0000000000008BCC                 db    0
.eh_frame:0000000000008BCD                 db  41h ; A
.eh_frame:0000000000008BCE                 db  0Eh
.eh_frame:0000000000008BCF                 db  10h
.eh_frame:0000000000008BD0                 db  83h
.eh_frame:0000000000008BD1                 db    2
.eh_frame:0000000000008BD2                 db  51h ; Q
.eh_frame:0000000000008BD3                 db  0Eh
.eh_frame:0000000000008BD4                 db    8
.eh_frame:0000000000008BD5                 db    0
.eh_frame:0000000000008BD6                 db    0
.eh_frame:0000000000008BD7                 db    0
.eh_frame:0000000000008BD8                 db  18h
.eh_frame:0000000000008BD9                 db    0
.eh_frame:0000000000008BDA                 db    0
.eh_frame:0000000000008BDB                 db    0
.eh_frame:0000000000008BDC                 db 0CCh
.eh_frame:0000000000008BDD                 db  0Eh
.eh_frame:0000000000008BDE                 db    0
.eh_frame:0000000000008BDF                 db    0
.eh_frame:0000000000008BE0                 db 0D0h
.eh_frame:0000000000008BE1                 db 0D6h
.eh_frame:0000000000008BE2                 db 0FFh
.eh_frame:0000000000008BE3                 db 0FFh
.eh_frame:0000000000008BE4                 db  2Eh ; .
.eh_frame:0000000000008BE5                 db    0
.eh_frame:0000000000008BE6                 db    0
.eh_frame:0000000000008BE7                 db    0
.eh_frame:0000000000008BE8                 db    0
.eh_frame:0000000000008BE9                 db  47h ; G
.eh_frame:0000000000008BEA                 db  0Eh
.eh_frame:0000000000008BEB                 db  10h
.eh_frame:0000000000008BEC                 db  61h ; a
.eh_frame:0000000000008BED                 db  0Ah
.eh_frame:0000000000008BEE                 db  0Eh
.eh_frame:0000000000008BEF                 db    8
.eh_frame:0000000000008BF0                 db  41h ; A
.eh_frame:0000000000008BF1                 db  0Bh
.eh_frame:0000000000008BF2                 db    0
.eh_frame:0000000000008BF3                 db    0
.eh_frame:0000000000008BF4                 db  24h ; $
.eh_frame:0000000000008BF5                 db    0
.eh_frame:0000000000008BF6                 db    0
.eh_frame:0000000000008BF7                 db    0
.eh_frame:0000000000008BF8                 db 0E8h
.eh_frame:0000000000008BF9                 db  0Eh
.eh_frame:0000000000008BFA                 db    0
.eh_frame:0000000000008BFB                 db    0
.eh_frame:0000000000008BFC                 db 0E4h
.eh_frame:0000000000008BFD                 db 0D6h
.eh_frame:0000000000008BFE                 db 0FFh
.eh_frame:0000000000008BFF                 db 0FFh
.eh_frame:0000000000008C00                 db  28h ; (
.eh_frame:0000000000008C01                 db    0
.eh_frame:0000000000008C02                 db    0
.eh_frame:0000000000008C03                 db    0
.eh_frame:0000000000008C04                 db    0
.eh_frame:0000000000008C05                 db  41h ; A
.eh_frame:0000000000008C06                 db  0Eh
.eh_frame:0000000000008C07                 db  10h
.eh_frame:0000000000008C08                 db  86h
.eh_frame:0000000000008C09                 db    2
.eh_frame:0000000000008C0A                 db  41h ; A
.eh_frame:0000000000008C0B                 db  0Eh
.eh_frame:0000000000008C0C                 db  18h
.eh_frame:0000000000008C0D                 db  83h
.eh_frame:0000000000008C0E                 db    3
.eh_frame:0000000000008C0F                 db  4Dh ; M
.eh_frame:0000000000008C10                 db  0Eh
.eh_frame:0000000000008C11                 db  20h
.eh_frame:0000000000008C12                 db  49h ; I
.eh_frame:0000000000008C13                 db  0Eh
.eh_frame:0000000000008C14                 db  18h
.eh_frame:0000000000008C15                 db  47h ; G
.eh_frame:0000000000008C16                 db  0Eh
.eh_frame:0000000000008C17                 db  10h
.eh_frame:0000000000008C18                 db  41h ; A
.eh_frame:0000000000008C19                 db  0Eh
.eh_frame:0000000000008C1A                 db    8
.eh_frame:0000000000008C1B                 db    0
.eh_frame:0000000000008C1C                 db  18h
.eh_frame:0000000000008C1D                 db    0
.eh_frame:0000000000008C1E                 db    0
.eh_frame:0000000000008C1F                 db    0
.eh_frame:0000000000008C20                 db  10h
.eh_frame:0000000000008C21                 db  0Fh
.eh_frame:0000000000008C22                 db    0
.eh_frame:0000000000008C23                 db    0
.eh_frame:0000000000008C24                 db 0ECh
.eh_frame:0000000000008C25                 db 0D6h
.eh_frame:0000000000008C26                 db 0FFh
.eh_frame:0000000000008C27                 db 0FFh
.eh_frame:0000000000008C28                 db  13h
.eh_frame:0000000000008C29                 db    0
.eh_frame:0000000000008C2A                 db    0
.eh_frame:0000000000008C2B                 db    0
.eh_frame:0000000000008C2C                 db    0
.eh_frame:0000000000008C2D                 db  41h ; A
.eh_frame:0000000000008C2E                 db  0Eh
.eh_frame:0000000000008C2F                 db  10h
.eh_frame:0000000000008C30                 db  83h
.eh_frame:0000000000008C31                 db    2
.eh_frame:0000000000008C32                 db  50h ; P
.eh_frame:0000000000008C33                 db  0Eh
.eh_frame:0000000000008C34                 db    8
.eh_frame:0000000000008C35                 db    0
.eh_frame:0000000000008C36                 db    0
.eh_frame:0000000000008C37                 db    0
.eh_frame:0000000000008C38                 db  14h
.eh_frame:0000000000008C39                 db    0
.eh_frame:0000000000008C3A                 db    0
.eh_frame:0000000000008C3B                 db    0
.eh_frame:0000000000008C3C                 db  2Ch ; ,
.eh_frame:0000000000008C3D                 db  0Fh
.eh_frame:0000000000008C3E                 db    0
.eh_frame:0000000000008C3F                 db    0
.eh_frame:0000000000008C40                 db 0F0h
.eh_frame:0000000000008C41                 db 0D6h
.eh_frame:0000000000008C42                 db 0FFh
.eh_frame:0000000000008C43                 db 0FFh
.eh_frame:0000000000008C44                 db  35h ; 5
.eh_frame:0000000000008C45                 db    0
.eh_frame:0000000000008C46                 db    0
.eh_frame:0000000000008C47                 db    0
.eh_frame:0000000000008C48                 db    0
.eh_frame:0000000000008C49                 db  4Bh ; K
.eh_frame:0000000000008C4A                 db  0Eh
.eh_frame:0000000000008C4B                 db  10h
.eh_frame:0000000000008C4C                 db    0
.eh_frame:0000000000008C4D                 db    0
.eh_frame:0000000000008C4E                 db    0
.eh_frame:0000000000008C4F                 db    0
.eh_frame:0000000000008C50                 db  1Ch
.eh_frame:0000000000008C51                 db    0
.eh_frame:0000000000008C52                 db    0
.eh_frame:0000000000008C53                 db    0
.eh_frame:0000000000008C54                 db  44h ; D
.eh_frame:0000000000008C55                 db  0Fh
.eh_frame:0000000000008C56                 db    0
.eh_frame:0000000000008C57                 db    0
.eh_frame:0000000000008C58                 db  18h
.eh_frame:0000000000008C59                 db 0D7h
.eh_frame:0000000000008C5A                 db 0FFh
.eh_frame:0000000000008C5B                 db 0FFh
.eh_frame:0000000000008C5C                 db  2Fh ; /
.eh_frame:0000000000008C5D                 db    0
.eh_frame:0000000000008C5E                 db    0
.eh_frame:0000000000008C5F                 db    0
.eh_frame:0000000000008C60                 db    0
.eh_frame:0000000000008C61                 db  41h ; A
.eh_frame:0000000000008C62                 db  0Eh
.eh_frame:0000000000008C63                 db  10h
.eh_frame:0000000000008C64                 db  83h
.eh_frame:0000000000008C65                 db    2
.eh_frame:0000000000008C66                 db  55h ; U
.eh_frame:0000000000008C67                 db  0Ah
.eh_frame:0000000000008C68                 db  0Eh
.eh_frame:0000000000008C69                 db    8
.eh_frame:0000000000008C6A                 db  4Ah ; J
.eh_frame:0000000000008C6B                 db  0Bh
.eh_frame:0000000000008C6C                 db    0
.eh_frame:0000000000008C6D                 db    0
.eh_frame:0000000000008C6E                 db    0
.eh_frame:0000000000008C6F                 db    0
.eh_frame:0000000000008C70                 db  3Ch ; <
.eh_frame:0000000000008C71                 db    0
.eh_frame:0000000000008C72                 db    0
.eh_frame:0000000000008C73                 db    0
.eh_frame:0000000000008C74                 db  64h ; d
.eh_frame:0000000000008C75                 db  0Fh
.eh_frame:0000000000008C76                 db    0
.eh_frame:0000000000008C77                 db    0
.eh_frame:0000000000008C78                 db  28h ; (
.eh_frame:0000000000008C79                 db 0D7h
.eh_frame:0000000000008C7A                 db 0FFh
.eh_frame:0000000000008C7B                 db 0FFh
.eh_frame:0000000000008C7C                 db  83h
.eh_frame:0000000000008C7D                 db    0
.eh_frame:0000000000008C7E                 db    0
.eh_frame:0000000000008C7F                 db    0
.eh_frame:0000000000008C80                 db    0
.eh_frame:0000000000008C81                 db  42h ; B
.eh_frame:0000000000008C82                 db  0Eh
.eh_frame:0000000000008C83                 db  10h
.eh_frame:0000000000008C84                 db  8Dh
.eh_frame:0000000000008C85                 db    2
.eh_frame:0000000000008C86                 db  42h ; B
.eh_frame:0000000000008C87                 db  0Eh
.eh_frame:0000000000008C88                 db  18h
.eh_frame:0000000000008C89                 db  8Ch
.eh_frame:0000000000008C8A                 db    3
.eh_frame:0000000000008C8B                 db  44h ; D
.eh_frame:0000000000008C8C                 db  0Eh
.eh_frame:0000000000008C8D                 db  20h
.eh_frame:0000000000008C8E                 db  86h
.eh_frame:0000000000008C8F                 db    4
.eh_frame:0000000000008C90                 db  41h ; A
.eh_frame:0000000000008C91                 db  0Eh
.eh_frame:0000000000008C92                 db  28h ; (
.eh_frame:0000000000008C93                 db  83h
.eh_frame:0000000000008C94                 db    5
.eh_frame:0000000000008C95                 db  4Ah ; J
.eh_frame:0000000000008C96                 db  0Eh
.eh_frame:0000000000008C97                 db  40h ; @
.eh_frame:0000000000008C98                 db    2
.eh_frame:0000000000008C99                 db  64h ; d
.eh_frame:0000000000008C9A                 db  0Ah
.eh_frame:0000000000008C9B                 db  0Eh
.eh_frame:0000000000008C9C                 db  28h ; (
.eh_frame:0000000000008C9D                 db  41h ; A
.eh_frame:0000000000008C9E                 db  0Eh
.eh_frame:0000000000008C9F                 db  20h
.eh_frame:0000000000008CA0                 db  41h ; A
.eh_frame:0000000000008CA1                 db  0Eh
.eh_frame:0000000000008CA2                 db  18h
.eh_frame:0000000000008CA3                 db  42h ; B
.eh_frame:0000000000008CA4                 db  0Eh
.eh_frame:0000000000008CA5                 db  10h
.eh_frame:0000000000008CA6                 db  42h ; B
.eh_frame:0000000000008CA7                 db  0Eh
.eh_frame:0000000000008CA8                 db    8
.eh_frame:0000000000008CA9                 db  41h ; A
.eh_frame:0000000000008CAA                 db  0Bh
.eh_frame:0000000000008CAB                 db    0
.eh_frame:0000000000008CAC                 db    0
.eh_frame:0000000000008CAD                 db    0
.eh_frame:0000000000008CAE                 db    0
.eh_frame:0000000000008CAF                 db    0
.eh_frame:0000000000008CB0                 db  4Ch ; L
.eh_frame:0000000000008CB1                 db    0
.eh_frame:0000000000008CB2                 db    0
.eh_frame:0000000000008CB3                 db    0
.eh_frame:0000000000008CB4                 db 0A4h
.eh_frame:0000000000008CB5                 db  0Fh
.eh_frame:0000000000008CB6                 db    0
.eh_frame:0000000000008CB7                 db    0
.eh_frame:0000000000008CB8                 db  78h ; x
.eh_frame:0000000000008CB9                 db 0D7h
.eh_frame:0000000000008CBA                 db 0FFh
.eh_frame:0000000000008CBB                 db 0FFh
.eh_frame:0000000000008CBC                 db  7Dh ; }
.eh_frame:0000000000008CBD                 db    0
.eh_frame:0000000000008CBE                 db    0
.eh_frame:0000000000008CBF                 db    0
.eh_frame:0000000000008CC0                 db    0
.eh_frame:0000000000008CC1                 db  42h ; B
.eh_frame:0000000000008CC2                 db  0Eh
.eh_frame:0000000000008CC3                 db  10h
.eh_frame:0000000000008CC4                 db  8Ch
.eh_frame:0000000000008CC5                 db    2
.eh_frame:0000000000008CC6                 db  41h ; A
.eh_frame:0000000000008CC7                 db  0Eh
.eh_frame:0000000000008CC8                 db  18h
.eh_frame:0000000000008CC9                 db  86h
.eh_frame:0000000000008CCA                 db    3
.eh_frame:0000000000008CCB                 db  44h ; D
.eh_frame:0000000000008CCC                 db  0Eh
.eh_frame:0000000000008CCD                 db  20h
.eh_frame:0000000000008CCE                 db  83h
.eh_frame:0000000000008CCF                 db    4
.eh_frame:0000000000008CD0                 db  69h ; i
.eh_frame:0000000000008CD1                 db  0Ah
.eh_frame:0000000000008CD2                 db  0Eh
.eh_frame:0000000000008CD3                 db  18h
.eh_frame:0000000000008CD4                 db  41h ; A
.eh_frame:0000000000008CD5                 db  0Eh
.eh_frame:0000000000008CD6                 db  10h
.eh_frame:0000000000008CD7                 db  42h ; B
.eh_frame:0000000000008CD8                 db  0Eh
.eh_frame:0000000000008CD9                 db    8
.eh_frame:0000000000008CDA                 db  45h ; E
.eh_frame:0000000000008CDB                 db  0Bh
.eh_frame:0000000000008CDC                 db  55h ; U
.eh_frame:0000000000008CDD                 db  0Ah
.eh_frame:0000000000008CDE                 db  0Eh
.eh_frame:0000000000008CDF                 db  18h
.eh_frame:0000000000008CE0                 db  41h ; A
.eh_frame:0000000000008CE1                 db  0Eh
.eh_frame:0000000000008CE2                 db  10h
.eh_frame:0000000000008CE3                 db  42h ; B
.eh_frame:0000000000008CE4                 db  0Eh
.eh_frame:0000000000008CE5                 db    8
.eh_frame:0000000000008CE6                 db  48h ; H
.eh_frame:0000000000008CE7                 db  0Bh
.eh_frame:0000000000008CE8                 db  41h ; A
.eh_frame:0000000000008CE9                 db  0Ah
.eh_frame:0000000000008CEA                 db  0Eh
.eh_frame:0000000000008CEB                 db  18h
.eh_frame:0000000000008CEC                 db  46h ; F
.eh_frame:0000000000008CED                 db  0Eh
.eh_frame:0000000000008CEE                 db  10h
.eh_frame:0000000000008CEF                 db  42h ; B
.eh_frame:0000000000008CF0                 db  0Eh
.eh_frame:0000000000008CF1                 db    8
.eh_frame:0000000000008CF2                 db  47h ; G
.eh_frame:0000000000008CF3                 db  0Bh
.eh_frame:0000000000008CF4                 db  49h ; I
.eh_frame:0000000000008CF5                 db  0Eh
.eh_frame:0000000000008CF6                 db  18h
.eh_frame:0000000000008CF7                 db  41h ; A
.eh_frame:0000000000008CF8                 db  0Eh
.eh_frame:0000000000008CF9                 db  10h
.eh_frame:0000000000008CFA                 db  42h ; B
.eh_frame:0000000000008CFB                 db  0Eh
.eh_frame:0000000000008CFC                 db    8
.eh_frame:0000000000008CFD                 db    0
.eh_frame:0000000000008CFE                 db    0
.eh_frame:0000000000008CFF                 db    0
.eh_frame:0000000000008D00                 db  1Ch
.eh_frame:0000000000008D01                 db    0
.eh_frame:0000000000008D02                 db    0
.eh_frame:0000000000008D03                 db    0
.eh_frame:0000000000008D04                 db 0F4h
.eh_frame:0000000000008D05                 db  0Fh
.eh_frame:0000000000008D06                 db    0
.eh_frame:0000000000008D07                 db    0
.eh_frame:0000000000008D08                 db 0A8h
.eh_frame:0000000000008D09                 db 0D7h
.eh_frame:0000000000008D0A                 db 0FFh
.eh_frame:0000000000008D0B                 db 0FFh
.eh_frame:0000000000008D0C                 db  18h
.eh_frame:0000000000008D0D                 db    0
.eh_frame:0000000000008D0E                 db    0
.eh_frame:0000000000008D0F                 db    0
.eh_frame:0000000000008D10                 db    0
.eh_frame:0000000000008D11                 db  44h ; D
.eh_frame:0000000000008D12                 db  0Eh
.eh_frame:0000000000008D13                 db  10h
.eh_frame:0000000000008D14                 db  4Eh ; N
.eh_frame:0000000000008D15                 db  0Ah
.eh_frame:0000000000008D16                 db  0Eh
.eh_frame:0000000000008D17                 db    8
.eh_frame:0000000000008D18                 db  41h ; A
.eh_frame:0000000000008D19                 db  0Bh
.eh_frame:0000000000008D1A                 db    0
.eh_frame:0000000000008D1B                 db    0
.eh_frame:0000000000008D1C                 db    0
.eh_frame:0000000000008D1D                 db    0
.eh_frame:0000000000008D1E                 db    0
.eh_frame:0000000000008D1F                 db    0
.eh_frame:0000000000008D20                 db  30h ; 0
.eh_frame:0000000000008D21                 db    0
.eh_frame:0000000000008D22                 db    0
.eh_frame:0000000000008D23                 db    0
.eh_frame:0000000000008D24                 db  14h
.eh_frame:0000000000008D25                 db  10h
.eh_frame:0000000000008D26                 db    0
.eh_frame:0000000000008D27                 db    0
.eh_frame:0000000000008D28                 db 0A8h
.eh_frame:0000000000008D29                 db 0D7h
.eh_frame:0000000000008D2A                 db 0FFh
.eh_frame:0000000000008D2B                 db 0FFh
.eh_frame:0000000000008D2C                 db  5Dh ; ]
.eh_frame:0000000000008D2D                 db    0
.eh_frame:0000000000008D2E                 db    0
.eh_frame:0000000000008D2F                 db    0
.eh_frame:0000000000008D30                 db    0
.eh_frame:0000000000008D31                 db  41h ; A
.eh_frame:0000000000008D32                 db  0Eh
.eh_frame:0000000000008D33                 db  10h
.eh_frame:0000000000008D34                 db  86h
.eh_frame:0000000000008D35                 db    2
.eh_frame:0000000000008D36                 db  41h ; A
.eh_frame:0000000000008D37                 db  0Eh
.eh_frame:0000000000008D38                 db  18h
.eh_frame:0000000000008D39                 db  83h
.eh_frame:0000000000008D3A                 db    3
.eh_frame:0000000000008D3B                 db  49h ; I
.eh_frame:0000000000008D3C                 db  0Eh
.eh_frame:0000000000008D3D                 db  20h
.eh_frame:0000000000008D3E                 db  7Ch ; |
.eh_frame:0000000000008D3F                 db  0Ah
.eh_frame:0000000000008D40                 db  0Eh
.eh_frame:0000000000008D41                 db  18h
.eh_frame:0000000000008D42                 db  44h ; D
.eh_frame:0000000000008D43                 db  0Eh
.eh_frame:0000000000008D44                 db  10h
.eh_frame:0000000000008D45                 db  41h ; A
.eh_frame:0000000000008D46                 db  0Eh
.eh_frame:0000000000008D47                 db    8
.eh_frame:0000000000008D48                 db  44h ; D
.eh_frame:0000000000008D49                 db  0Bh
.eh_frame:0000000000008D4A                 db  44h ; D
.eh_frame:0000000000008D4B                 db  0Eh
.eh_frame:0000000000008D4C                 db  18h
.eh_frame:0000000000008D4D                 db  47h ; G
.eh_frame:0000000000008D4E                 db  0Eh
.eh_frame:0000000000008D4F                 db  10h
.eh_frame:0000000000008D50                 db  41h ; A
.eh_frame:0000000000008D51                 db  0Eh
.eh_frame:0000000000008D52                 db    8
.eh_frame:0000000000008D53                 db    0
.eh_frame:0000000000008D54                 db  28h ; (
.eh_frame:0000000000008D55                 db    0
.eh_frame:0000000000008D56                 db    0
.eh_frame:0000000000008D57                 db    0
.eh_frame:0000000000008D58                 db  48h ; H
.eh_frame:0000000000008D59                 db  10h
.eh_frame:0000000000008D5A                 db    0
.eh_frame:0000000000008D5B                 db    0
.eh_frame:0000000000008D5C                 db 0D4h
.eh_frame:0000000000008D5D                 db 0D7h
.eh_frame:0000000000008D5E                 db 0FFh
.eh_frame:0000000000008D5F                 db 0FFh
.eh_frame:0000000000008D60                 db  5Ah ; Z
.eh_frame:0000000000008D61                 db    0
.eh_frame:0000000000008D62                 db    0
.eh_frame:0000000000008D63                 db    0
.eh_frame:0000000000008D64                 db    0
.eh_frame:0000000000008D65                 db  41h ; A
.eh_frame:0000000000008D66                 db  0Eh
.eh_frame:0000000000008D67                 db  10h
.eh_frame:0000000000008D68                 db  86h
.eh_frame:0000000000008D69                 db    2
.eh_frame:0000000000008D6A                 db  41h ; A
.eh_frame:0000000000008D6B                 db  0Eh
.eh_frame:0000000000008D6C                 db  18h
.eh_frame:0000000000008D6D                 db  83h
.eh_frame:0000000000008D6E                 db    3
.eh_frame:0000000000008D6F                 db  47h ; G
.eh_frame:0000000000008D70                 db  0Eh
.eh_frame:0000000000008D71                 db  20h
.eh_frame:0000000000008D72                 db    2
.eh_frame:0000000000008D73                 db  41h ; A
.eh_frame:0000000000008D74                 db  0Ah
.eh_frame:0000000000008D75                 db  0Eh
.eh_frame:0000000000008D76                 db  18h
.eh_frame:0000000000008D77                 db  44h ; D
.eh_frame:0000000000008D78                 db  0Eh
.eh_frame:0000000000008D79                 db  10h
.eh_frame:0000000000008D7A                 db  41h ; A
.eh_frame:0000000000008D7B                 db  0Eh
.eh_frame:0000000000008D7C                 db    8
.eh_frame:0000000000008D7D                 db  41h ; A
.eh_frame:0000000000008D7E                 db  0Bh
.eh_frame:0000000000008D7F                 db    0
.eh_frame:0000000000008D80                 db  10h
.eh_frame:0000000000008D81                 db    0
.eh_frame:0000000000008D82                 db    0
.eh_frame:0000000000008D83                 db    0
.eh_frame:0000000000008D84                 db  74h ; t
.eh_frame:0000000000008D85                 db  10h
.eh_frame:0000000000008D86                 db    0
.eh_frame:0000000000008D87                 db    0
.eh_frame:0000000000008D88                 db    8
.eh_frame:0000000000008D89                 db 0D8h
.eh_frame:0000000000008D8A                 db 0FFh
.eh_frame:0000000000008D8B                 db 0FFh
.eh_frame:0000000000008D8C                 db  5Ch ; \
.eh_frame:0000000000008D8D                 db    0
.eh_frame:0000000000008D8E                 db    0
.eh_frame:0000000000008D8F                 db    0
.eh_frame:0000000000008D90                 db    0
.eh_frame:0000000000008D91                 db    0
.eh_frame:0000000000008D92                 db    0
.eh_frame:0000000000008D93                 db    0
.eh_frame:0000000000008D94                 db  28h ; (
.eh_frame:0000000000008D95                 db    0
.eh_frame:0000000000008D96                 db    0
.eh_frame:0000000000008D97                 db    0
.eh_frame:0000000000008D98                 db  88h
.eh_frame:0000000000008D99                 db  10h
.eh_frame:0000000000008D9A                 db    0
.eh_frame:0000000000008D9B                 db    0
.eh_frame:0000000000008D9C                 db  54h ; T
.eh_frame:0000000000008D9D                 db 0D8h
.eh_frame:0000000000008D9E                 db 0FFh
.eh_frame:0000000000008D9F                 db 0FFh
.eh_frame:0000000000008DA0                 db  47h ; G
.eh_frame:0000000000008DA1                 db    0
.eh_frame:0000000000008DA2                 db    0
.eh_frame:0000000000008DA3                 db    0
.eh_frame:0000000000008DA4                 db    0
.eh_frame:0000000000008DA5                 db  41h ; A
.eh_frame:0000000000008DA6                 db  0Eh
.eh_frame:0000000000008DA7                 db  10h
.eh_frame:0000000000008DA8                 db  83h
.eh_frame:0000000000008DA9                 db    2
.eh_frame:0000000000008DAA                 db  5Ah ; Z
.eh_frame:0000000000008DAB                 db  0Ah
.eh_frame:0000000000008DAC                 db  0Eh
.eh_frame:0000000000008DAD                 db    8
.eh_frame:0000000000008DAE                 db  45h ; E
.eh_frame:0000000000008DAF                 db  0Bh
.eh_frame:0000000000008DB0                 db  5Dh ; ]
.eh_frame:0000000000008DB1                 db  0Ah
.eh_frame:0000000000008DB2                 db  0Eh
.eh_frame:0000000000008DB3                 db    8
.eh_frame:0000000000008DB4                 db  43h ; C
.eh_frame:0000000000008DB5                 db  0Bh
.eh_frame:0000000000008DB6                 db  46h ; F
.eh_frame:0000000000008DB7                 db  0Eh
.eh_frame:0000000000008DB8                 db    8
.eh_frame:0000000000008DB9                 db    0
.eh_frame:0000000000008DBA                 db    0
.eh_frame:0000000000008DBB                 db    0
.eh_frame:0000000000008DBC                 db    0
.eh_frame:0000000000008DBD                 db    0
.eh_frame:0000000000008DBE                 db    0
.eh_frame:0000000000008DBF                 db    0
.eh_frame:0000000000008DC0                 db  1Ch
.eh_frame:0000000000008DC1                 db    0
.eh_frame:0000000000008DC2                 db    0
.eh_frame:0000000000008DC3                 db    0
.eh_frame:0000000000008DC4                 db 0B4h
.eh_frame:0000000000008DC5                 db  10h
.eh_frame:0000000000008DC6                 db    0
.eh_frame:0000000000008DC7                 db    0
.eh_frame:0000000000008DC8                 db  78h ; x
.eh_frame:0000000000008DC9                 db 0D8h
.eh_frame:0000000000008DCA                 db 0FFh
.eh_frame:0000000000008DCB                 db 0FFh
.eh_frame:0000000000008DCC                 db  60h ; `
.eh_frame:0000000000008DCD                 db    0
.eh_frame:0000000000008DCE                 db    0
.eh_frame:0000000000008DCF                 db    0
.eh_frame:0000000000008DD0                 db    0
.eh_frame:0000000000008DD1                 db  44h ; D
.eh_frame:0000000000008DD2                 db  0Eh
.eh_frame:0000000000008DD3                 db  10h
.eh_frame:0000000000008DD4                 db  75h ; u
.eh_frame:0000000000008DD5                 db  0Ah
.eh_frame:0000000000008DD6                 db  0Eh
.eh_frame:0000000000008DD7                 db    8
.eh_frame:0000000000008DD8                 db  47h ; G
.eh_frame:0000000000008DD9                 db  0Bh
.eh_frame:0000000000008DDA                 db  5Fh ; _
.eh_frame:0000000000008DDB                 db  0Eh
.eh_frame:0000000000008DDC                 db    8
.eh_frame:0000000000008DDD                 db    0
.eh_frame:0000000000008DDE                 db    0
.eh_frame:0000000000008DDF                 db    0
.eh_frame:0000000000008DE0                 db  14h
.eh_frame:0000000000008DE1                 db    0
.eh_frame:0000000000008DE2                 db    0
.eh_frame:0000000000008DE3                 db    0
.eh_frame:0000000000008DE4                 db 0D4h
.eh_frame:0000000000008DE5                 db  10h
.eh_frame:0000000000008DE6                 db    0
.eh_frame:0000000000008DE7                 db    0
.eh_frame:0000000000008DE8                 db 0B8h
.eh_frame:0000000000008DE9                 db 0D8h
.eh_frame:0000000000008DEA                 db 0FFh
.eh_frame:0000000000008DEB                 db 0FFh
.eh_frame:0000000000008DEC                 db  36h ; 6
.eh_frame:0000000000008DED                 db    0
.eh_frame:0000000000008DEE                 db    0
.eh_frame:0000000000008DEF                 db    0
.eh_frame:0000000000008DF0                 db    0
.eh_frame:0000000000008DF1                 db    0
.eh_frame:0000000000008DF2                 db    0
.eh_frame:0000000000008DF3                 db    0
.eh_frame:0000000000008DF4                 db    0
.eh_frame:0000000000008DF5                 db    0
.eh_frame:0000000000008DF6                 db    0
.eh_frame:0000000000008DF7                 db    0
.eh_frame:0000000000008DF8                 db  1Ch
.eh_frame:0000000000008DF9                 db    0
.eh_frame:0000000000008DFA                 db    0
.eh_frame:0000000000008DFB                 db    0
.eh_frame:0000000000008DFC                 db 0ECh
.eh_frame:0000000000008DFD                 db  10h
.eh_frame:0000000000008DFE                 db    0
.eh_frame:0000000000008DFF                 db    0
.eh_frame:0000000000008E00                 db 0E0h
.eh_frame:0000000000008E01                 db 0D8h
.eh_frame:0000000000008E02                 db 0FFh
.eh_frame:0000000000008E03                 db 0FFh
.eh_frame:0000000000008E04                 db  3Ch ; <
.eh_frame:0000000000008E05                 db    0
.eh_frame:0000000000008E06                 db    0
.eh_frame:0000000000008E07                 db    0
.eh_frame:0000000000008E08                 db    0
.eh_frame:0000000000008E09                 db  44h ; D
.eh_frame:0000000000008E0A                 db  0Eh
.eh_frame:0000000000008E0B                 db  10h
.eh_frame:0000000000008E0C                 db  61h ; a
.eh_frame:0000000000008E0D                 db  0Ah
.eh_frame:0000000000008E0E                 db  0Eh
.eh_frame:0000000000008E0F                 db    8
.eh_frame:0000000000008E10                 db  4Bh ; K
.eh_frame:0000000000008E11                 db  0Bh
.eh_frame:0000000000008E12                 db  4Bh ; K
.eh_frame:0000000000008E13                 db  0Eh
.eh_frame:0000000000008E14                 db    8
.eh_frame:0000000000008E15                 db    0
.eh_frame:0000000000008E16                 db    0
.eh_frame:0000000000008E17                 db    0
.eh_frame:0000000000008E18                 db  34h ; 4
.eh_frame:0000000000008E19                 db    0
.eh_frame:0000000000008E1A                 db    0
.eh_frame:0000000000008E1B                 db    0
.eh_frame:0000000000008E1C                 db  0Ch
.eh_frame:0000000000008E1D                 db  11h
.eh_frame:0000000000008E1E                 db    0
.eh_frame:0000000000008E1F                 db    0
.eh_frame:0000000000008E20                 db    0
.eh_frame:0000000000008E21                 db 0D9h
.eh_frame:0000000000008E22                 db 0FFh
.eh_frame:0000000000008E23                 db 0FFh
.eh_frame:0000000000008E24                 db  7Bh ; {
.eh_frame:0000000000008E25                 db    0
.eh_frame:0000000000008E26                 db    0
.eh_frame:0000000000008E27                 db    0
.eh_frame:0000000000008E28                 db    0
.eh_frame:0000000000008E29                 db  42h ; B
.eh_frame:0000000000008E2A                 db  0Eh
.eh_frame:0000000000008E2B                 db  10h
.eh_frame:0000000000008E2C                 db  8Ch
.eh_frame:0000000000008E2D                 db    2
.eh_frame:0000000000008E2E                 db  41h ; A
.eh_frame:0000000000008E2F                 db  0Eh
.eh_frame:0000000000008E30                 db  18h
.eh_frame:0000000000008E31                 db  86h
.eh_frame:0000000000008E32                 db    3
.eh_frame:0000000000008E33                 db  41h ; A
.eh_frame:0000000000008E34                 db  0Eh
.eh_frame:0000000000008E35                 db  20h
.eh_frame:0000000000008E36                 db  83h
.eh_frame:0000000000008E37                 db    4
.eh_frame:0000000000008E38                 db  7Dh ; }
.eh_frame:0000000000008E39                 db  0Ah
.eh_frame:0000000000008E3A                 db  0Eh
.eh_frame:0000000000008E3B                 db  18h
.eh_frame:0000000000008E3C                 db  41h ; A
.eh_frame:0000000000008E3D                 db  0Eh
.eh_frame:0000000000008E3E                 db  10h
.eh_frame:0000000000008E3F                 db  42h ; B
.eh_frame:0000000000008E40                 db  0Eh
.eh_frame:0000000000008E41                 db    8
.eh_frame:0000000000008E42                 db  44h ; D
.eh_frame:0000000000008E43                 db  0Bh
.eh_frame:0000000000008E44                 db  60h ; `
.eh_frame:0000000000008E45                 db  0Ah
.eh_frame:0000000000008E46                 db  0Eh
.eh_frame:0000000000008E47                 db  18h
.eh_frame:0000000000008E48                 db  41h ; A
.eh_frame:0000000000008E49                 db  0Eh
.eh_frame:0000000000008E4A                 db  10h
.eh_frame:0000000000008E4B                 db  42h ; B
.eh_frame:0000000000008E4C                 db  0Eh
.eh_frame:0000000000008E4D                 db    8
.eh_frame:0000000000008E4E                 db  45h ; E
.eh_frame:0000000000008E4F                 db  0Bh
.eh_frame:0000000000008E50                 db  1Ch
.eh_frame:0000000000008E51                 db    0
.eh_frame:0000000000008E52                 db    0
.eh_frame:0000000000008E53                 db    0
.eh_frame:0000000000008E54                 db  44h ; D
.eh_frame:0000000000008E55                 db  11h
.eh_frame:0000000000008E56                 db    0
.eh_frame:0000000000008E57                 db    0
.eh_frame:0000000000008E58                 db  48h ; H
.eh_frame:0000000000008E59                 db 0D9h
.eh_frame:0000000000008E5A                 db 0FFh
.eh_frame:0000000000008E5B                 db 0FFh
.eh_frame:0000000000008E5C                 db  40h ; @
.eh_frame:0000000000008E5D                 db    0
.eh_frame:0000000000008E5E                 db    0
.eh_frame:0000000000008E5F                 db    0
.eh_frame:0000000000008E60                 db    0
.eh_frame:0000000000008E61                 db  44h ; D
.eh_frame:0000000000008E62                 db  0Eh
.eh_frame:0000000000008E63                 db  10h
.eh_frame:0000000000008E64                 db  83h
.eh_frame:0000000000008E65                 db    2
.eh_frame:0000000000008E66                 db  5Ah ; Z
.eh_frame:0000000000008E67                 db  0Ah
.eh_frame:0000000000008E68                 db  0Eh
.eh_frame:0000000000008E69                 db    8
.eh_frame:0000000000008E6A                 db  4Ah ; J
.eh_frame:0000000000008E6B                 db  0Bh
.eh_frame:0000000000008E6C                 db  53h ; S
.eh_frame:0000000000008E6D                 db  0Eh
.eh_frame:0000000000008E6E                 db    8
.eh_frame:0000000000008E6F                 db    0
.eh_frame:0000000000008E70                 db  2Ch ; ,
.eh_frame:0000000000008E71                 db    0
.eh_frame:0000000000008E72                 db    0
.eh_frame:0000000000008E73                 db    0
.eh_frame:0000000000008E74                 db  64h ; d
.eh_frame:0000000000008E75                 db  11h
.eh_frame:0000000000008E76                 db    0
.eh_frame:0000000000008E77                 db    0
.eh_frame:0000000000008E78                 db  68h ; h
.eh_frame:0000000000008E79                 db 0D9h
.eh_frame:0000000000008E7A                 db 0FFh
.eh_frame:0000000000008E7B                 db 0FFh
.eh_frame:0000000000008E7C                 db  57h ; W
.eh_frame:0000000000008E7D                 db    0
.eh_frame:0000000000008E7E                 db    0
.eh_frame:0000000000008E7F                 db    0
.eh_frame:0000000000008E80                 db    0
.eh_frame:0000000000008E81                 db  63h ; c
.eh_frame:0000000000008E82                 db  0Eh
.eh_frame:0000000000008E83                 db  10h
.eh_frame:0000000000008E84                 db  8Ch
.eh_frame:0000000000008E85                 db    2
.eh_frame:0000000000008E86                 db  41h ; A
.eh_frame:0000000000008E87                 db  0Eh
.eh_frame:0000000000008E88                 db  18h
.eh_frame:0000000000008E89                 db  86h
.eh_frame:0000000000008E8A                 db    3
.eh_frame:0000000000008E8B                 db  44h ; D
.eh_frame:0000000000008E8C                 db  0Eh
.eh_frame:0000000000008E8D                 db  20h
.eh_frame:0000000000008E8E                 db  83h
.eh_frame:0000000000008E8F                 db    4
.eh_frame:0000000000008E90                 db  6Bh ; k
.eh_frame:0000000000008E91                 db  0Eh
.eh_frame:0000000000008E92                 db  18h
.eh_frame:0000000000008E93                 db  41h ; A
.eh_frame:0000000000008E94                 db  0Eh
.eh_frame:0000000000008E95                 db  10h
.eh_frame:0000000000008E96                 db  42h ; B
.eh_frame:0000000000008E97                 db  0Eh
.eh_frame:0000000000008E98                 db    8
.eh_frame:0000000000008E99                 db    0
.eh_frame:0000000000008E9A                 db    0
.eh_frame:0000000000008E9B                 db    0
.eh_frame:0000000000008E9C                 db    0
.eh_frame:0000000000008E9D                 db    0
.eh_frame:0000000000008E9E                 db    0
.eh_frame:0000000000008E9F                 db    0
.eh_frame:0000000000008EA0                 db  44h ; D
.eh_frame:0000000000008EA1                 db    0
.eh_frame:0000000000008EA2                 db    0
.eh_frame:0000000000008EA3                 db    0
.eh_frame:0000000000008EA4                 db  94h
.eh_frame:0000000000008EA5                 db  11h
.eh_frame:0000000000008EA6                 db    0
.eh_frame:0000000000008EA7                 db    0
.eh_frame:0000000000008EA8                 db  98h
.eh_frame:0000000000008EA9                 db 0D9h
.eh_frame:0000000000008EAA                 db 0FFh
.eh_frame:0000000000008EAB                 db 0FFh
.eh_frame:0000000000008EAC                 db  65h ; e
.eh_frame:0000000000008EAD                 db    0
.eh_frame:0000000000008EAE                 db    0
.eh_frame:0000000000008EAF                 db    0
.eh_frame:0000000000008EB0                 db    0
.eh_frame:0000000000008EB1                 db  42h ; B
.eh_frame:0000000000008EB2                 db  0Eh
.eh_frame:0000000000008EB3                 db  10h
.eh_frame:0000000000008EB4                 db  8Fh
.eh_frame:0000000000008EB5                 db    2
.eh_frame:0000000000008EB6                 db  42h ; B
.eh_frame:0000000000008EB7                 db  0Eh
.eh_frame:0000000000008EB8                 db  18h
.eh_frame:0000000000008EB9                 db  8Eh
.eh_frame:0000000000008EBA                 db    3
.eh_frame:0000000000008EBB                 db  45h ; E
.eh_frame:0000000000008EBC                 db  0Eh
.eh_frame:0000000000008EBD                 db  20h
.eh_frame:0000000000008EBE                 db  8Dh
.eh_frame:0000000000008EBF                 db    4
.eh_frame:0000000000008EC0                 db  42h ; B
.eh_frame:0000000000008EC1                 db  0Eh
.eh_frame:0000000000008EC2                 db  28h ; (
.eh_frame:0000000000008EC3                 db  8Ch
.eh_frame:0000000000008EC4                 db    5
.eh_frame:0000000000008EC5                 db  48h ; H
.eh_frame:0000000000008EC6                 db  0Eh
.eh_frame:0000000000008EC7                 db  30h ; 0
.eh_frame:0000000000008EC8                 db  86h
.eh_frame:0000000000008EC9                 db    6
.eh_frame:0000000000008ECA                 db  48h ; H
.eh_frame:0000000000008ECB                 db  0Eh
.eh_frame:0000000000008ECC                 db  38h ; 8
.eh_frame:0000000000008ECD                 db  83h
.eh_frame:0000000000008ECE                 db    7
.eh_frame:0000000000008ECF                 db  4Dh ; M
.eh_frame:0000000000008ED0                 db  0Eh
.eh_frame:0000000000008ED1                 db  40h ; @
.eh_frame:0000000000008ED2                 db  72h ; r
.eh_frame:0000000000008ED3                 db  0Eh
.eh_frame:0000000000008ED4                 db  38h ; 8
.eh_frame:0000000000008ED5                 db  41h ; A
.eh_frame:0000000000008ED6                 db  0Eh
.eh_frame:0000000000008ED7                 db  30h ; 0
.eh_frame:0000000000008ED8                 db  41h ; A
.eh_frame:0000000000008ED9                 db  0Eh
.eh_frame:0000000000008EDA                 db  28h ; (
.eh_frame:0000000000008EDB                 db  42h ; B
.eh_frame:0000000000008EDC                 db  0Eh
.eh_frame:0000000000008EDD                 db  20h
.eh_frame:0000000000008EDE                 db  42h ; B
.eh_frame:0000000000008EDF                 db  0Eh
.eh_frame:0000000000008EE0                 db  18h
.eh_frame:0000000000008EE1                 db  42h ; B
.eh_frame:0000000000008EE2                 db  0Eh
.eh_frame:0000000000008EE3                 db  10h
.eh_frame:0000000000008EE4                 db  42h ; B
.eh_frame:0000000000008EE5                 db  0Eh
.eh_frame:0000000000008EE6                 db    8
.eh_frame:0000000000008EE7                 db    0
.eh_frame:0000000000008EE8                 db  14h
.eh_frame:0000000000008EE9                 db    0
.eh_frame:0000000000008EEA                 db    0
.eh_frame:0000000000008EEB                 db    0
.eh_frame:0000000000008EEC                 db 0DCh
.eh_frame:0000000000008EED                 db  11h
.eh_frame:0000000000008EEE                 db    0
.eh_frame:0000000000008EEF                 db    0
.eh_frame:0000000000008EF0                 db 0C0h
.eh_frame:0000000000008EF1                 db 0D9h
.eh_frame:0000000000008EF2                 db 0FFh
.eh_frame:0000000000008EF3                 db 0FFh
.eh_frame:0000000000008EF4                 db    2
.eh_frame:0000000000008EF5                 db    0
.eh_frame:0000000000008EF6                 db    0
.eh_frame:0000000000008EF7                 db    0
.eh_frame:0000000000008EF8                 db    0
.eh_frame:0000000000008EF9                 db    0
.eh_frame:0000000000008EFA                 db    0
.eh_frame:0000000000008EFB                 db    0
.eh_frame:0000000000008EFC                 db    0
.eh_frame:0000000000008EFD                 db    0
.eh_frame:0000000000008EFE                 db    0
.eh_frame:0000000000008EFF                 db    0
.eh_frame:0000000000008F00                 db  10h
.eh_frame:0000000000008F01                 db    0
.eh_frame:0000000000008F02                 db    0
.eh_frame:0000000000008F03                 db    0
.eh_frame:0000000000008F04                 db 0F4h
.eh_frame:0000000000008F05                 db  11h
.eh_frame:0000000000008F06                 db    0
.eh_frame:0000000000008F07                 db    0
.eh_frame:0000000000008F08                 db 0B8h
.eh_frame:0000000000008F09                 db 0D9h
.eh_frame:0000000000008F0A                 db 0FFh
.eh_frame:0000000000008F0B                 db 0FFh
.eh_frame:0000000000008F0C                 db  0Eh
.eh_frame:0000000000008F0D                 db    0
.eh_frame:0000000000008F0E                 db    0
.eh_frame:0000000000008F0F                 db    0
.eh_frame:0000000000008F10                 db    0
.eh_frame:0000000000008F11                 db    0
.eh_frame:0000000000008F12                 db    0
.eh_frame:0000000000008F13                 db    0
.eh_frame:0000000000008F14 __FRAME_END__   db    0
.eh_frame:0000000000008F15                 db    0
.eh_frame:0000000000008F16                 db    0
.eh_frame:0000000000008F17                 db    0
.eh_frame:0000000000008F17 _eh_frame       ends
.eh_frame:0000000000008F17
.init_array:0000000000209A70 ; ELF Initialization Function Table
.init_array:0000000000209A70 ; ===========================================================================
.init_array:0000000000209A70
.init_array:0000000000209A70 ; Segment type: Pure data
.init_array:0000000000209A70 ; Segment permissions: Read/Write
.init_array:0000000000209A70 _init_array     segment qword public 'DATA' use64
.init_array:0000000000209A70                 assume cs:_init_array
.init_array:0000000000209A70                 ;org 209A70h
.init_array:0000000000209A70 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000209A70                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000209A70                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000209A70 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000209A70
.fini_array:0000000000209A78 ; ELF Termination Function Table
.fini_array:0000000000209A78 ; ===========================================================================
.fini_array:0000000000209A78
.fini_array:0000000000209A78 ; Segment type: Pure data
.fini_array:0000000000209A78 ; Segment permissions: Read/Write
.fini_array:0000000000209A78 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000209A78                 assume cs:_fini_array
.fini_array:0000000000209A78                 ;org 209A78h
.fini_array:0000000000209A78 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000209A78                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000209A78 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000209A78
.data.rel.ro:0000000000209A80 ; ===========================================================================
.data.rel.ro:0000000000209A80
.data.rel.ro:0000000000209A80 ; Segment type: Pure data
.data.rel.ro:0000000000209A80 ; Segment permissions: Read/Write
.data.rel.ro:0000000000209A80 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000209A80                 assume cs:_data_rel_ro
.data.rel.ro:0000000000209A80                 ;org 209A80h
.data.rel.ro:0000000000209A80 ; struct option longopts
.data.rel.ro:0000000000209A80 longopts        dq offset aCanonicalize ; name
.data.rel.ro:0000000000209A80                                         ; DATA XREF: main:loc_17B0↑o
.data.rel.ro:0000000000209A80                 dd 0                    ; has_arg ; "canonicalize"
.data.rel.ro:0000000000209A80                 db 4 dup(0)
.data.rel.ro:0000000000209A80                 dq 0                    ; flag
.data.rel.ro:0000000000209A80                 dd 66h                  ; val
.data.rel.ro:0000000000209A80                 db 4 dup(0)
.data.rel.ro:0000000000209AA0                 dq offset aCanonicalizeEx ; "canonicalize-existing"
.data.rel.ro:0000000000209AA8                 db    0
.data.rel.ro:0000000000209AA9                 db    0
.data.rel.ro:0000000000209AAA                 db    0
.data.rel.ro:0000000000209AAB                 db    0
.data.rel.ro:0000000000209AAC                 db    0
.data.rel.ro:0000000000209AAD                 db    0
.data.rel.ro:0000000000209AAE                 db    0
.data.rel.ro:0000000000209AAF                 db    0
.data.rel.ro:0000000000209AB0                 db    0
.data.rel.ro:0000000000209AB1                 db    0
.data.rel.ro:0000000000209AB2                 db    0
.data.rel.ro:0000000000209AB3                 db    0
.data.rel.ro:0000000000209AB4                 db    0
.data.rel.ro:0000000000209AB5                 db    0
.data.rel.ro:0000000000209AB6                 db    0
.data.rel.ro:0000000000209AB7                 db    0
.data.rel.ro:0000000000209AB8                 db  65h ; e
.data.rel.ro:0000000000209AB9                 db    0
.data.rel.ro:0000000000209ABA                 db    0
.data.rel.ro:0000000000209ABB                 db    0
.data.rel.ro:0000000000209ABC                 db    0
.data.rel.ro:0000000000209ABD                 db    0
.data.rel.ro:0000000000209ABE                 db    0
.data.rel.ro:0000000000209ABF                 db    0
.data.rel.ro:0000000000209AC0                 dq offset aCanonicalizeMi ; "canonicalize-missing"
.data.rel.ro:0000000000209AC8                 db    0
.data.rel.ro:0000000000209AC9                 db    0
.data.rel.ro:0000000000209ACA                 db    0
.data.rel.ro:0000000000209ACB                 db    0
.data.rel.ro:0000000000209ACC                 db    0
.data.rel.ro:0000000000209ACD                 db    0
.data.rel.ro:0000000000209ACE                 db    0
.data.rel.ro:0000000000209ACF                 db    0
.data.rel.ro:0000000000209AD0                 db    0
.data.rel.ro:0000000000209AD1                 db    0
.data.rel.ro:0000000000209AD2                 db    0
.data.rel.ro:0000000000209AD3                 db    0
.data.rel.ro:0000000000209AD4                 db    0
.data.rel.ro:0000000000209AD5                 db    0
.data.rel.ro:0000000000209AD6                 db    0
.data.rel.ro:0000000000209AD7                 db    0
.data.rel.ro:0000000000209AD8                 db  6Dh ; m
.data.rel.ro:0000000000209AD9                 db    0
.data.rel.ro:0000000000209ADA                 db    0
.data.rel.ro:0000000000209ADB                 db    0
.data.rel.ro:0000000000209ADC                 db    0
.data.rel.ro:0000000000209ADD                 db    0
.data.rel.ro:0000000000209ADE                 db    0
.data.rel.ro:0000000000209ADF                 db    0
.data.rel.ro:0000000000209AE0                 dq offset aNoNewline    ; "no-newline"
.data.rel.ro:0000000000209AE8                 db    0
.data.rel.ro:0000000000209AE9                 db    0
.data.rel.ro:0000000000209AEA                 db    0
.data.rel.ro:0000000000209AEB                 db    0
.data.rel.ro:0000000000209AEC                 db    0
.data.rel.ro:0000000000209AED                 db    0
.data.rel.ro:0000000000209AEE                 db    0
.data.rel.ro:0000000000209AEF                 db    0
.data.rel.ro:0000000000209AF0                 db    0
.data.rel.ro:0000000000209AF1                 db    0
.data.rel.ro:0000000000209AF2                 db    0
.data.rel.ro:0000000000209AF3                 db    0
.data.rel.ro:0000000000209AF4                 db    0
.data.rel.ro:0000000000209AF5                 db    0
.data.rel.ro:0000000000209AF6                 db    0
.data.rel.ro:0000000000209AF7                 db    0
.data.rel.ro:0000000000209AF8                 db  6Eh ; n
.data.rel.ro:0000000000209AF9                 db    0
.data.rel.ro:0000000000209AFA                 db    0
.data.rel.ro:0000000000209AFB                 db    0
.data.rel.ro:0000000000209AFC                 db    0
.data.rel.ro:0000000000209AFD                 db    0
.data.rel.ro:0000000000209AFE                 db    0
.data.rel.ro:0000000000209AFF                 db    0
.data.rel.ro:0000000000209B00                 dq offset aQuiet        ; "quiet"
.data.rel.ro:0000000000209B08                 db    0
.data.rel.ro:0000000000209B09                 db    0
.data.rel.ro:0000000000209B0A                 db    0
.data.rel.ro:0000000000209B0B                 db    0
.data.rel.ro:0000000000209B0C                 db    0
.data.rel.ro:0000000000209B0D                 db    0
.data.rel.ro:0000000000209B0E                 db    0
.data.rel.ro:0000000000209B0F                 db    0
.data.rel.ro:0000000000209B10                 db    0
.data.rel.ro:0000000000209B11                 db    0
.data.rel.ro:0000000000209B12                 db    0
.data.rel.ro:0000000000209B13                 db    0
.data.rel.ro:0000000000209B14                 db    0
.data.rel.ro:0000000000209B15                 db    0
.data.rel.ro:0000000000209B16                 db    0
.data.rel.ro:0000000000209B17                 db    0
.data.rel.ro:0000000000209B18                 db  71h ; q
.data.rel.ro:0000000000209B19                 db    0
.data.rel.ro:0000000000209B1A                 db    0
.data.rel.ro:0000000000209B1B                 db    0
.data.rel.ro:0000000000209B1C                 db    0
.data.rel.ro:0000000000209B1D                 db    0
.data.rel.ro:0000000000209B1E                 db    0
.data.rel.ro:0000000000209B1F                 db    0
.data.rel.ro:0000000000209B20                 dq offset aSilent       ; "silent"
.data.rel.ro:0000000000209B28                 db    0
.data.rel.ro:0000000000209B29                 db    0
.data.rel.ro:0000000000209B2A                 db    0
.data.rel.ro:0000000000209B2B                 db    0
.data.rel.ro:0000000000209B2C                 db    0
.data.rel.ro:0000000000209B2D                 db    0
.data.rel.ro:0000000000209B2E                 db    0
.data.rel.ro:0000000000209B2F                 db    0
.data.rel.ro:0000000000209B30                 db    0
.data.rel.ro:0000000000209B31                 db    0
.data.rel.ro:0000000000209B32                 db    0
.data.rel.ro:0000000000209B33                 db    0
.data.rel.ro:0000000000209B34                 db    0
.data.rel.ro:0000000000209B35                 db    0
.data.rel.ro:0000000000209B36                 db    0
.data.rel.ro:0000000000209B37                 db    0
.data.rel.ro:0000000000209B38                 db  73h ; s
.data.rel.ro:0000000000209B39                 db    0
.data.rel.ro:0000000000209B3A                 db    0
.data.rel.ro:0000000000209B3B                 db    0
.data.rel.ro:0000000000209B3C                 db    0
.data.rel.ro:0000000000209B3D                 db    0
.data.rel.ro:0000000000209B3E                 db    0
.data.rel.ro:0000000000209B3F                 db    0
.data.rel.ro:0000000000209B40                 dq offset aVerbose      ; "verbose"
.data.rel.ro:0000000000209B48                 db    0
.data.rel.ro:0000000000209B49                 db    0
.data.rel.ro:0000000000209B4A                 db    0
.data.rel.ro:0000000000209B4B                 db    0
.data.rel.ro:0000000000209B4C                 db    0
.data.rel.ro:0000000000209B4D                 db    0
.data.rel.ro:0000000000209B4E                 db    0
.data.rel.ro:0000000000209B4F                 db    0
.data.rel.ro:0000000000209B50                 db    0
.data.rel.ro:0000000000209B51                 db    0
.data.rel.ro:0000000000209B52                 db    0
.data.rel.ro:0000000000209B53                 db    0
.data.rel.ro:0000000000209B54                 db    0
.data.rel.ro:0000000000209B55                 db    0
.data.rel.ro:0000000000209B56                 db    0
.data.rel.ro:0000000000209B57                 db    0
.data.rel.ro:0000000000209B58                 db  76h ; v
.data.rel.ro:0000000000209B59                 db    0
.data.rel.ro:0000000000209B5A                 db    0
.data.rel.ro:0000000000209B5B                 db    0
.data.rel.ro:0000000000209B5C                 db    0
.data.rel.ro:0000000000209B5D                 db    0
.data.rel.ro:0000000000209B5E                 db    0
.data.rel.ro:0000000000209B5F                 db    0
.data.rel.ro:0000000000209B60                 dq offset aZero         ; "zero"
.data.rel.ro:0000000000209B68                 db    0
.data.rel.ro:0000000000209B69                 db    0
.data.rel.ro:0000000000209B6A                 db    0
.data.rel.ro:0000000000209B6B                 db    0
.data.rel.ro:0000000000209B6C                 db    0
.data.rel.ro:0000000000209B6D                 db    0
.data.rel.ro:0000000000209B6E                 db    0
.data.rel.ro:0000000000209B6F                 db    0
.data.rel.ro:0000000000209B70                 db    0
.data.rel.ro:0000000000209B71                 db    0
.data.rel.ro:0000000000209B72                 db    0
.data.rel.ro:0000000000209B73                 db    0
.data.rel.ro:0000000000209B74                 db    0
.data.rel.ro:0000000000209B75                 db    0
.data.rel.ro:0000000000209B76                 db    0
.data.rel.ro:0000000000209B77                 db    0
.data.rel.ro:0000000000209B78                 db  7Ah ; z
.data.rel.ro:0000000000209B79                 db    0
.data.rel.ro:0000000000209B7A                 db    0
.data.rel.ro:0000000000209B7B                 db    0
.data.rel.ro:0000000000209B7C                 db    0
.data.rel.ro:0000000000209B7D                 db    0
.data.rel.ro:0000000000209B7E                 db    0
.data.rel.ro:0000000000209B7F                 db    0
.data.rel.ro:0000000000209B80                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000209B88                 db    0
.data.rel.ro:0000000000209B89                 db    0
.data.rel.ro:0000000000209B8A                 db    0
.data.rel.ro:0000000000209B8B                 db    0
.data.rel.ro:0000000000209B8C                 db    0
.data.rel.ro:0000000000209B8D                 db    0
.data.rel.ro:0000000000209B8E                 db    0
.data.rel.ro:0000000000209B8F                 db    0
.data.rel.ro:0000000000209B90                 db    0
.data.rel.ro:0000000000209B91                 db    0
.data.rel.ro:0000000000209B92                 db    0
.data.rel.ro:0000000000209B93                 db    0
.data.rel.ro:0000000000209B94                 db    0
.data.rel.ro:0000000000209B95                 db    0
.data.rel.ro:0000000000209B96                 db    0
.data.rel.ro:0000000000209B97                 db    0
.data.rel.ro:0000000000209B98                 db  7Eh ; ~
.data.rel.ro:0000000000209B99                 db 0FFh
.data.rel.ro:0000000000209B9A                 db 0FFh
.data.rel.ro:0000000000209B9B                 db 0FFh
.data.rel.ro:0000000000209B9C                 db    0
.data.rel.ro:0000000000209B9D                 db    0
.data.rel.ro:0000000000209B9E                 db    0
.data.rel.ro:0000000000209B9F                 db    0
.data.rel.ro:0000000000209BA0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000209BA8                 db    0
.data.rel.ro:0000000000209BA9                 db    0
.data.rel.ro:0000000000209BAA                 db    0
.data.rel.ro:0000000000209BAB                 db    0
.data.rel.ro:0000000000209BAC                 db    0
.data.rel.ro:0000000000209BAD                 db    0
.data.rel.ro:0000000000209BAE                 db    0
.data.rel.ro:0000000000209BAF                 db    0
.data.rel.ro:0000000000209BB0                 db    0
.data.rel.ro:0000000000209BB1                 db    0
.data.rel.ro:0000000000209BB2                 db    0
.data.rel.ro:0000000000209BB3                 db    0
.data.rel.ro:0000000000209BB4                 db    0
.data.rel.ro:0000000000209BB5                 db    0
.data.rel.ro:0000000000209BB6                 db    0
.data.rel.ro:0000000000209BB7                 db    0
.data.rel.ro:0000000000209BB8                 db  7Dh ; }
.data.rel.ro:0000000000209BB9                 db 0FFh
.data.rel.ro:0000000000209BBA                 db 0FFh
.data.rel.ro:0000000000209BBB                 db 0FFh
.data.rel.ro:0000000000209BBC                 db    0
.data.rel.ro:0000000000209BBD                 db    0
.data.rel.ro:0000000000209BBE                 db    0
.data.rel.ro:0000000000209BBF                 db    0
.data.rel.ro:0000000000209BC0                 db    0
.data.rel.ro:0000000000209BC1                 db    0
.data.rel.ro:0000000000209BC2                 db    0
.data.rel.ro:0000000000209BC3                 db    0
.data.rel.ro:0000000000209BC4                 db    0
.data.rel.ro:0000000000209BC5                 db    0
.data.rel.ro:0000000000209BC6                 db    0
.data.rel.ro:0000000000209BC7                 db    0
.data.rel.ro:0000000000209BC8                 db    0
.data.rel.ro:0000000000209BC9                 db    0
.data.rel.ro:0000000000209BCA                 db    0
.data.rel.ro:0000000000209BCB                 db    0
.data.rel.ro:0000000000209BCC                 db    0
.data.rel.ro:0000000000209BCD                 db    0
.data.rel.ro:0000000000209BCE                 db    0
.data.rel.ro:0000000000209BCF                 db    0
.data.rel.ro:0000000000209BD0                 db    0
.data.rel.ro:0000000000209BD1                 db    0
.data.rel.ro:0000000000209BD2                 db    0
.data.rel.ro:0000000000209BD3                 db    0
.data.rel.ro:0000000000209BD4                 db    0
.data.rel.ro:0000000000209BD5                 db    0
.data.rel.ro:0000000000209BD6                 db    0
.data.rel.ro:0000000000209BD7                 db    0
.data.rel.ro:0000000000209BD8                 db    0
.data.rel.ro:0000000000209BD9                 db    0
.data.rel.ro:0000000000209BDA                 db    0
.data.rel.ro:0000000000209BDB                 db    0
.data.rel.ro:0000000000209BDC                 db    0
.data.rel.ro:0000000000209BDD                 db    0
.data.rel.ro:0000000000209BDE                 db    0
.data.rel.ro:0000000000209BDF                 db    0
.data.rel.ro:0000000000209BE0                 public quoting_style_args
.data.rel.ro:0000000000209BE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000209BE8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000209BF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000209BF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000209C00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000209C08                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000209C10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000209C18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000209C20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000209C28                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000209C30                 db    0
.data.rel.ro:0000000000209C31                 db    0
.data.rel.ro:0000000000209C32                 db    0
.data.rel.ro:0000000000209C33                 db    0
.data.rel.ro:0000000000209C34                 db    0
.data.rel.ro:0000000000209C35                 db    0
.data.rel.ro:0000000000209C36                 db    0
.data.rel.ro:0000000000209C37                 db    0
.data.rel.ro:0000000000209C37 _data_rel_ro    ends
.data.rel.ro:0000000000209C37
LOAD:0000000000209C38 ; ELF Dynamic Information
LOAD:0000000000209C38 ; ===========================================================================
LOAD:0000000000209C38
LOAD:0000000000209C38 ; Segment type: Pure data
LOAD:0000000000209C38 ; Segment permissions: Read/Write
LOAD:0000000000209C38 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209C38                 assume cs:LOAD
LOAD:0000000000209C38                 ;org 209C38h
LOAD:0000000000209C38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000209C38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000209C38                                         ; DT_NEEDED libc.so.6
LOAD:0000000000209C48                 Elf64_Dyn <0Ch, 1410h>  ; DT_INIT
LOAD:0000000000209C58                 Elf64_Dyn <0Dh, 68D0h>  ; DT_FINI
LOAD:0000000000209C68                 Elf64_Dyn <19h, 209A70h> ; DT_INIT_ARRAY
LOAD:0000000000209C78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000209C88                 Elf64_Dyn <1Ah, 209A78h> ; DT_FINI_ARRAY
LOAD:0000000000209C98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000209CA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000209CB8                 Elf64_Dyn <5, 890h>     ; DT_STRTAB
LOAD:0000000000209CC8                 Elf64_Dyn <6, 2D8h>     ; DT_SYMTAB
LOAD:0000000000209CD8                 Elf64_Dyn <0Ah, 2C5h>   ; DT_STRSZ
LOAD:0000000000209CE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000209CF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000209D08                 Elf64_Dyn <3, 209E28h>  ; DT_PLTGOT
LOAD:0000000000209D18                 Elf64_Dyn <2, 480h>     ; DT_PLTRELSZ
LOAD:0000000000209D28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000209D38                 Elf64_Dyn <17h, 0F90h>  ; DT_JMPREL
LOAD:0000000000209D48                 Elf64_Dyn <7, 0C30h>    ; DT_RELA
LOAD:0000000000209D58                 Elf64_Dyn <8, 360h>     ; DT_RELASZ
LOAD:0000000000209D68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000209D78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000209D88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000209D98                 Elf64_Dyn <6FFFFFFEh, 0BD0h> ; DT_VERNEED
LOAD:0000000000209DA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000209DB8                 Elf64_Dyn <6FFFFFF0h, 0B56h> ; DT_VERSYM
LOAD:0000000000209DC8                 Elf64_Dyn <6FFFFFF9h, 1Ah> ; DT_RELACOUNT
LOAD:0000000000209DD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000209DE8                 db    0
LOAD:0000000000209DE9                 db    0
LOAD:0000000000209DEA                 db    0
LOAD:0000000000209DEB                 db    0
LOAD:0000000000209DEC                 db    0
LOAD:0000000000209DED                 db    0
LOAD:0000000000209DEE                 db    0
LOAD:0000000000209DEF                 db    0
LOAD:0000000000209DF0                 db    0
LOAD:0000000000209DF1                 db    0
LOAD:0000000000209DF2                 db    0
LOAD:0000000000209DF3                 db    0
LOAD:0000000000209DF4                 db    0
LOAD:0000000000209DF5                 db    0
LOAD:0000000000209DF6                 db    0
LOAD:0000000000209DF7                 db    0
LOAD:0000000000209DF8                 db    0
LOAD:0000000000209DF9                 db    0
LOAD:0000000000209DFA                 db    0
LOAD:0000000000209DFB                 db    0
LOAD:0000000000209DFC                 db    0
LOAD:0000000000209DFD                 db    0
LOAD:0000000000209DFE                 db    0
LOAD:0000000000209DFF                 db    0
LOAD:0000000000209E00                 db    0
LOAD:0000000000209E01                 db    0
LOAD:0000000000209E02                 db    0
LOAD:0000000000209E03                 db    0
LOAD:0000000000209E04                 db    0
LOAD:0000000000209E05                 db    0
LOAD:0000000000209E06                 db    0
LOAD:0000000000209E07                 db    0
LOAD:0000000000209E08                 db    0
LOAD:0000000000209E09                 db    0
LOAD:0000000000209E0A                 db    0
LOAD:0000000000209E0B                 db    0
LOAD:0000000000209E0C                 db    0
LOAD:0000000000209E0D                 db    0
LOAD:0000000000209E0E                 db    0
LOAD:0000000000209E0F                 db    0
LOAD:0000000000209E10                 db    0
LOAD:0000000000209E11                 db    0
LOAD:0000000000209E12                 db    0
LOAD:0000000000209E13                 db    0
LOAD:0000000000209E14                 db    0
LOAD:0000000000209E15                 db    0
LOAD:0000000000209E16                 db    0
LOAD:0000000000209E17                 db    0
LOAD:0000000000209E18                 db    0
LOAD:0000000000209E19                 db    0
LOAD:0000000000209E1A                 db    0
LOAD:0000000000209E1B                 db    0
LOAD:0000000000209E1C                 db    0
LOAD:0000000000209E1D                 db    0
LOAD:0000000000209E1E                 db    0
LOAD:0000000000209E1F                 db    0
LOAD:0000000000209E20                 db    0
LOAD:0000000000209E21                 db    0
LOAD:0000000000209E22                 db    0
LOAD:0000000000209E23                 db    0
LOAD:0000000000209E24                 db    0
LOAD:0000000000209E25                 db    0
LOAD:0000000000209E26                 db    0
LOAD:0000000000209E27                 db    0
LOAD:0000000000209E27 LOAD            ends
LOAD:0000000000209E27
.got:0000000000209E28 ; ===========================================================================
.got:0000000000209E28
.got:0000000000209E28 ; Segment type: Pure data
.got:0000000000209E28 ; Segment permissions: Read/Write
.got:0000000000209E28 _got            segment qword public 'DATA' use64
.got:0000000000209E28                 assume cs:_got
.got:0000000000209E28                 ;org 209E28h
.got:0000000000209E28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000209E30 qword_209E30    dq 0                    ; DATA XREF: sub_1430↑r
.got:0000000000209E38 qword_209E38    dq 0                    ; DATA XREF: sub_1430+6↑r
.got:0000000000209E40 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000209E48 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000209E50 __errno_location_ptr dq offset __errno_location
.got:0000000000209E50                                         ; DATA XREF: ___errno_location↑r
.got:0000000000209E58 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000209E60 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000209E68 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000209E70 readlink_ptr    dq offset readlink      ; DATA XREF: _readlink↑r
.got:0000000000209E78 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000209E80 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000209E88 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000209E88                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000209E90 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000209E98 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000209E98                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000209EA0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000209EA8 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:0000000000209EB0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000209EB0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000209EB8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000209EC0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000209EC8 __fxstatat_ptr  dq offset __fxstatat    ; DATA XREF: ___fxstatat↑r
.got:0000000000209ED0 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000209ED8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000209EE0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000209EE8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000209EF0 getcwd_ptr      dq offset getcwd        ; DATA XREF: _getcwd↑r
.got:0000000000209EF8 strspn_ptr      dq offset strspn        ; DATA XREF: _strspn↑r
.got:0000000000209F00 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000209F08 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000209F08                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000209F10 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000209F18 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000209F20 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000209F28 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000209F30 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:0000000000209F38 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000209F40 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000209F48 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000209F50 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000209F58 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000209F60 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000209F68 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000209F70 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:0000000000209F78 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000209F80 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000209F88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000209F90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000209F98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000209FA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000209FA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000209FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000209FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000209FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000209FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000209FC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000209FC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000209FC8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000209FC8                                         ; DATA XREF: start+24↑r
.got:0000000000209FD0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000209FD0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000209FD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000209FD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000209FE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000209FE0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000209FE0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000209FE0 _got            ends
.got:0000000000209FE0
LOAD:0000000000209FE8 ; ===========================================================================
LOAD:0000000000209FE8
LOAD:0000000000209FE8 ; Segment type: Pure data
LOAD:0000000000209FE8 ; Segment permissions: Read/Write
LOAD:0000000000209FE8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209FE8                 assume cs:LOAD
LOAD:0000000000209FE8                 ;org 209FE8h
LOAD:0000000000209FE8                 align 20h
LOAD:0000000000209FE8 LOAD            ends
LOAD:0000000000209FE8
.data:000000000020A000 ; ===========================================================================
.data:000000000020A000
.data:000000000020A000 ; Segment type: Pure data
.data:000000000020A000 ; Segment permissions: Read/Write
.data:000000000020A000 _data           segment align_32 public 'DATA' use64
.data:000000000020A000                 assume cs:_data
.data:000000000020A000                 ;org 20A000h
.data:000000000020A000                 public __data_start ; weak
.data:000000000020A000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020A000                                         ; data_start
.data:000000000020A001                 db    0
.data:000000000020A002                 db    0
.data:000000000020A003                 db    0
.data:000000000020A004                 db    0
.data:000000000020A005                 db    0
.data:000000000020A006                 db    0
.data:000000000020A007                 db    0
.data:000000000020A008                 public __dso_handle
.data:000000000020A008 ; void *_dso_handle
.data:000000000020A008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020A008                                         ; atexit↑r ...
.data:000000000020A010                 public Version
.data:000000000020A010 Version         dq offset a831          ; DATA XREF: main+142↑r
.data:000000000020A010                                         ; "8.31"
.data:000000000020A018                 public exit_failure
.data:000000000020A018 ; int exit_failure
.data:000000000020A018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_26D2↑r
.data:000000000020A018                                         ; xalloc_die+17↑r
.data:000000000020A01C                 align 20h
.data:000000000020A020                 public quote_quoting_options
.data:000000000020A020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020A020                                         ; quote_mem↑o ...
.data:000000000020A021                 db    0
.data:000000000020A022                 db    0
.data:000000000020A023                 db    0
.data:000000000020A024                 db    0
.data:000000000020A025                 db    0
.data:000000000020A026                 db    0
.data:000000000020A027                 db    0
.data:000000000020A028                 db    0
.data:000000000020A029                 db    0
.data:000000000020A02A                 db    0
.data:000000000020A02B                 db    0
.data:000000000020A02C                 db    0
.data:000000000020A02D                 db    0
.data:000000000020A02E                 db    0
.data:000000000020A02F                 db    0
.data:000000000020A030                 db    0
.data:000000000020A031                 db    0
.data:000000000020A032                 db    0
.data:000000000020A033                 db    0
.data:000000000020A034                 db    0
.data:000000000020A035                 db    0
.data:000000000020A036                 db    0
.data:000000000020A037                 db    0
.data:000000000020A038                 db    0
.data:000000000020A039                 db    0
.data:000000000020A03A                 db    0
.data:000000000020A03B                 db    0
.data:000000000020A03C                 db    0
.data:000000000020A03D                 db    0
.data:000000000020A03E                 db    0
.data:000000000020A03F                 db    0
.data:000000000020A040                 db    0
.data:000000000020A041                 db    0
.data:000000000020A042                 db    0
.data:000000000020A043                 db    0
.data:000000000020A044                 db    0
.data:000000000020A045                 db    0
.data:000000000020A046                 db    0
.data:000000000020A047                 db    0
.data:000000000020A048                 db    0
.data:000000000020A049                 db    0
.data:000000000020A04A                 db    0
.data:000000000020A04B                 db    0
.data:000000000020A04C                 db    0
.data:000000000020A04D                 db    0
.data:000000000020A04E                 db    0
.data:000000000020A04F                 db    0
.data:000000000020A050                 db    0
.data:000000000020A051                 db    0
.data:000000000020A052                 db    0
.data:000000000020A053                 db    0
.data:000000000020A054                 db    0
.data:000000000020A055                 db    0
.data:000000000020A056                 db    0
.data:000000000020A057                 db    0
.data:000000000020A058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020A058                                         ; quotearg_n_options:loc_4FED↑r ...
.data:000000000020A05C                 align 20h
.data:000000000020A060 ; void *slotvec
.data:000000000020A060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020A060                                         ; quotearg_n_options+76↑w ...
.data:000000000020A068                 align 10h
.data:000000000020A070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020A070                                         ; quotearg_n_options+187↑r ...
.data:000000000020A078 off_20A078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020A078 _data           ends
.data:000000000020A078
.bss:000000000020A080 ; ===========================================================================
.bss:000000000020A080
.bss:000000000020A080 ; Segment type: Uninitialized
.bss:000000000020A080 ; Segment permissions: Read/Write
.bss:000000000020A080 _bss            segment align_32 public 'BSS' use64
.bss:000000000020A080                 assume cs:_bss
.bss:000000000020A080                 ;org 20A080h
.bss:000000000020A080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020A080                 public __bss_start ; weak
.bss:000000000020A080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000800↑o
.bss:000000000020A080                                         ; LOAD:0000000000000848↑o ...
.bss:000000000020A080                                         ; Alternative name is '__TMC_END__'
.bss:000000000020A080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020A080                                         ; _edata
.bss:000000000020A080                                         ; Copy of shared data
.bss:000000000020A088                 public stdout@@GLIBC_2_2_5
.bss:000000000020A088 ; FILE *stdout
.bss:000000000020A088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007E8↑o
.bss:000000000020A088                                         ; main+13B↑r ...
.bss:000000000020A088                                         ; Alternative name is 'stdout'
.bss:000000000020A088                                         ; Copy of shared data
.bss:000000000020A090                 public optind@@GLIBC_2_2_5
.bss:000000000020A090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000878↑o
.bss:000000000020A090                                         ; main:loc_18BF↑r ...
.bss:000000000020A090                                         ; Alternative name is 'optind'
.bss:000000000020A090                                         ; Copy of shared data
.bss:000000000020A094                 align 8
.bss:000000000020A098                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020A098 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020A098                                         ; DATA XREF: LOAD:0000000000000818↑o
.bss:000000000020A098                                         ; LOAD:0000000000000830↑o ...
.bss:000000000020A098                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020A098                                         ; Copy of shared data
.bss:000000000020A0A0                 public stderr@@GLIBC_2_2_5
.bss:000000000020A0A0 ; FILE *stderr
.bss:000000000020A0A0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000860↑o
.bss:000000000020A0A0                                         ; usage+3D↑r ...
.bss:000000000020A0A0                                         ; Alternative name is 'stderr'
.bss:000000000020A0A0                                         ; Copy of shared data
.bss:000000000020A0A8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020A0A8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020A0A9 verbose         db ?                    ; DATA XREF: main:loc_1842↑w
.bss:000000000020A0A9                                         ; main:loc_1860↑w ...
.bss:000000000020A0AA no_newline      db ?                    ; DATA XREF: main+DD↑w
.bss:000000000020A0AA                                         ; main+188↑r ...
.bss:000000000020A0AB                 align 10h
.bss:000000000020A0B0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020A0B0                                         ; close_stdout+1B↑r
.bss:000000000020A0B1                 align 8
.bss:000000000020A0B8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020A0B8                                         ; close_stdout+56↑r
.bss:000000000020A0C0                 public program_name
.bss:000000000020A0C0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020A0C0                                         ; set_program_name:loc_3C0D↑w
.bss:000000000020A0C8                 align 20h
.bss:000000000020A0E0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020A0E0                                         ; quotearg_free+46↑o ...
.bss:000000000020A0E1                 db    ? ;
.bss:000000000020A0E2                 db    ? ;
.bss:000000000020A0E3                 db    ? ;
.bss:000000000020A0E4                 db    ? ;
.bss:000000000020A0E5                 db    ? ;
.bss:000000000020A0E6                 db    ? ;
.bss:000000000020A0E7                 db    ? ;
.bss:000000000020A0E8                 db    ? ;
.bss:000000000020A0E9                 db    ? ;
.bss:000000000020A0EA                 db    ? ;
.bss:000000000020A0EB                 db    ? ;
.bss:000000000020A0EC                 db    ? ;
.bss:000000000020A0ED                 db    ? ;
.bss:000000000020A0EE                 db    ? ;
.bss:000000000020A0EF                 db    ? ;
.bss:000000000020A0F0                 db    ? ;
.bss:000000000020A0F1                 db    ? ;
.bss:000000000020A0F2                 db    ? ;
.bss:000000000020A0F3                 db    ? ;
.bss:000000000020A0F4                 db    ? ;
.bss:000000000020A0F5                 db    ? ;
.bss:000000000020A0F6                 db    ? ;
.bss:000000000020A0F7                 db    ? ;
.bss:000000000020A0F8                 db    ? ;
.bss:000000000020A0F9                 db    ? ;
.bss:000000000020A0FA                 db    ? ;
.bss:000000000020A0FB                 db    ? ;
.bss:000000000020A0FC                 db    ? ;
.bss:000000000020A0FD                 db    ? ;
.bss:000000000020A0FE                 db    ? ;
.bss:000000000020A0FF                 db    ? ;
.bss:000000000020A100                 db    ? ;
.bss:000000000020A101                 db    ? ;
.bss:000000000020A102                 db    ? ;
.bss:000000000020A103                 db    ? ;
.bss:000000000020A104                 db    ? ;
.bss:000000000020A105                 db    ? ;
.bss:000000000020A106                 db    ? ;
.bss:000000000020A107                 db    ? ;
.bss:000000000020A108                 db    ? ;
.bss:000000000020A109                 db    ? ;
.bss:000000000020A10A                 db    ? ;
.bss:000000000020A10B                 db    ? ;
.bss:000000000020A10C                 db    ? ;
.bss:000000000020A10D                 db    ? ;
.bss:000000000020A10E                 db    ? ;
.bss:000000000020A10F                 db    ? ;
.bss:000000000020A110                 db    ? ;
.bss:000000000020A111                 db    ? ;
.bss:000000000020A112                 db    ? ;
.bss:000000000020A113                 db    ? ;
.bss:000000000020A114                 db    ? ;
.bss:000000000020A115                 db    ? ;
.bss:000000000020A116                 db    ? ;
.bss:000000000020A117                 db    ? ;
.bss:000000000020A118                 db    ? ;
.bss:000000000020A119                 db    ? ;
.bss:000000000020A11A                 db    ? ;
.bss:000000000020A11B                 db    ? ;
.bss:000000000020A11C                 db    ? ;
.bss:000000000020A11D                 db    ? ;
.bss:000000000020A11E                 db    ? ;
.bss:000000000020A11F                 db    ? ;
.bss:000000000020A120                 db    ? ;
.bss:000000000020A121                 db    ? ;
.bss:000000000020A122                 db    ? ;
.bss:000000000020A123                 db    ? ;
.bss:000000000020A124                 db    ? ;
.bss:000000000020A125                 db    ? ;
.bss:000000000020A126                 db    ? ;
.bss:000000000020A127                 db    ? ;
.bss:000000000020A128                 db    ? ;
.bss:000000000020A129                 db    ? ;
.bss:000000000020A12A                 db    ? ;
.bss:000000000020A12B                 db    ? ;
.bss:000000000020A12C                 db    ? ;
.bss:000000000020A12D                 db    ? ;
.bss:000000000020A12E                 db    ? ;
.bss:000000000020A12F                 db    ? ;
.bss:000000000020A130                 db    ? ;
.bss:000000000020A131                 db    ? ;
.bss:000000000020A132                 db    ? ;
.bss:000000000020A133                 db    ? ;
.bss:000000000020A134                 db    ? ;
.bss:000000000020A135                 db    ? ;
.bss:000000000020A136                 db    ? ;
.bss:000000000020A137                 db    ? ;
.bss:000000000020A138                 db    ? ;
.bss:000000000020A139                 db    ? ;
.bss:000000000020A13A                 db    ? ;
.bss:000000000020A13B                 db    ? ;
.bss:000000000020A13C                 db    ? ;
.bss:000000000020A13D                 db    ? ;
.bss:000000000020A13E                 db    ? ;
.bss:000000000020A13F                 db    ? ;
.bss:000000000020A140                 db    ? ;
.bss:000000000020A141                 db    ? ;
.bss:000000000020A142                 db    ? ;
.bss:000000000020A143                 db    ? ;
.bss:000000000020A144                 db    ? ;
.bss:000000000020A145                 db    ? ;
.bss:000000000020A146                 db    ? ;
.bss:000000000020A147                 db    ? ;
.bss:000000000020A148                 db    ? ;
.bss:000000000020A149                 db    ? ;
.bss:000000000020A14A                 db    ? ;
.bss:000000000020A14B                 db    ? ;
.bss:000000000020A14C                 db    ? ;
.bss:000000000020A14D                 db    ? ;
.bss:000000000020A14E                 db    ? ;
.bss:000000000020A14F                 db    ? ;
.bss:000000000020A150                 db    ? ;
.bss:000000000020A151                 db    ? ;
.bss:000000000020A152                 db    ? ;
.bss:000000000020A153                 db    ? ;
.bss:000000000020A154                 db    ? ;
.bss:000000000020A155                 db    ? ;
.bss:000000000020A156                 db    ? ;
.bss:000000000020A157                 db    ? ;
.bss:000000000020A158                 db    ? ;
.bss:000000000020A159                 db    ? ;
.bss:000000000020A15A                 db    ? ;
.bss:000000000020A15B                 db    ? ;
.bss:000000000020A15C                 db    ? ;
.bss:000000000020A15D                 db    ? ;
.bss:000000000020A15E                 db    ? ;
.bss:000000000020A15F                 db    ? ;
.bss:000000000020A160                 db    ? ;
.bss:000000000020A161                 db    ? ;
.bss:000000000020A162                 db    ? ;
.bss:000000000020A163                 db    ? ;
.bss:000000000020A164                 db    ? ;
.bss:000000000020A165                 db    ? ;
.bss:000000000020A166                 db    ? ;
.bss:000000000020A167                 db    ? ;
.bss:000000000020A168                 db    ? ;
.bss:000000000020A169                 db    ? ;
.bss:000000000020A16A                 db    ? ;
.bss:000000000020A16B                 db    ? ;
.bss:000000000020A16C                 db    ? ;
.bss:000000000020A16D                 db    ? ;
.bss:000000000020A16E                 db    ? ;
.bss:000000000020A16F                 db    ? ;
.bss:000000000020A170                 db    ? ;
.bss:000000000020A171                 db    ? ;
.bss:000000000020A172                 db    ? ;
.bss:000000000020A173                 db    ? ;
.bss:000000000020A174                 db    ? ;
.bss:000000000020A175                 db    ? ;
.bss:000000000020A176                 db    ? ;
.bss:000000000020A177                 db    ? ;
.bss:000000000020A178                 db    ? ;
.bss:000000000020A179                 db    ? ;
.bss:000000000020A17A                 db    ? ;
.bss:000000000020A17B                 db    ? ;
.bss:000000000020A17C                 db    ? ;
.bss:000000000020A17D                 db    ? ;
.bss:000000000020A17E                 db    ? ;
.bss:000000000020A17F                 db    ? ;
.bss:000000000020A180                 db    ? ;
.bss:000000000020A181                 db    ? ;
.bss:000000000020A182                 db    ? ;
.bss:000000000020A183                 db    ? ;
.bss:000000000020A184                 db    ? ;
.bss:000000000020A185                 db    ? ;
.bss:000000000020A186                 db    ? ;
.bss:000000000020A187                 db    ? ;
.bss:000000000020A188                 db    ? ;
.bss:000000000020A189                 db    ? ;
.bss:000000000020A18A                 db    ? ;
.bss:000000000020A18B                 db    ? ;
.bss:000000000020A18C                 db    ? ;
.bss:000000000020A18D                 db    ? ;
.bss:000000000020A18E                 db    ? ;
.bss:000000000020A18F                 db    ? ;
.bss:000000000020A190                 db    ? ;
.bss:000000000020A191                 db    ? ;
.bss:000000000020A192                 db    ? ;
.bss:000000000020A193                 db    ? ;
.bss:000000000020A194                 db    ? ;
.bss:000000000020A195                 db    ? ;
.bss:000000000020A196                 db    ? ;
.bss:000000000020A197                 db    ? ;
.bss:000000000020A198                 db    ? ;
.bss:000000000020A199                 db    ? ;
.bss:000000000020A19A                 db    ? ;
.bss:000000000020A19B                 db    ? ;
.bss:000000000020A19C                 db    ? ;
.bss:000000000020A19D                 db    ? ;
.bss:000000000020A19E                 db    ? ;
.bss:000000000020A19F                 db    ? ;
.bss:000000000020A1A0                 db    ? ;
.bss:000000000020A1A1                 db    ? ;
.bss:000000000020A1A2                 db    ? ;
.bss:000000000020A1A3                 db    ? ;
.bss:000000000020A1A4                 db    ? ;
.bss:000000000020A1A5                 db    ? ;
.bss:000000000020A1A6                 db    ? ;
.bss:000000000020A1A7                 db    ? ;
.bss:000000000020A1A8                 db    ? ;
.bss:000000000020A1A9                 db    ? ;
.bss:000000000020A1AA                 db    ? ;
.bss:000000000020A1AB                 db    ? ;
.bss:000000000020A1AC                 db    ? ;
.bss:000000000020A1AD                 db    ? ;
.bss:000000000020A1AE                 db    ? ;
.bss:000000000020A1AF                 db    ? ;
.bss:000000000020A1B0                 db    ? ;
.bss:000000000020A1B1                 db    ? ;
.bss:000000000020A1B2                 db    ? ;
.bss:000000000020A1B3                 db    ? ;
.bss:000000000020A1B4                 db    ? ;
.bss:000000000020A1B5                 db    ? ;
.bss:000000000020A1B6                 db    ? ;
.bss:000000000020A1B7                 db    ? ;
.bss:000000000020A1B8                 db    ? ;
.bss:000000000020A1B9                 db    ? ;
.bss:000000000020A1BA                 db    ? ;
.bss:000000000020A1BB                 db    ? ;
.bss:000000000020A1BC                 db    ? ;
.bss:000000000020A1BD                 db    ? ;
.bss:000000000020A1BE                 db    ? ;
.bss:000000000020A1BF                 db    ? ;
.bss:000000000020A1C0                 db    ? ;
.bss:000000000020A1C1                 db    ? ;
.bss:000000000020A1C2                 db    ? ;
.bss:000000000020A1C3                 db    ? ;
.bss:000000000020A1C4                 db    ? ;
.bss:000000000020A1C5                 db    ? ;
.bss:000000000020A1C6                 db    ? ;
.bss:000000000020A1C7                 db    ? ;
.bss:000000000020A1C8                 db    ? ;
.bss:000000000020A1C9                 db    ? ;
.bss:000000000020A1CA                 db    ? ;
.bss:000000000020A1CB                 db    ? ;
.bss:000000000020A1CC                 db    ? ;
.bss:000000000020A1CD                 db    ? ;
.bss:000000000020A1CE                 db    ? ;
.bss:000000000020A1CF                 db    ? ;
.bss:000000000020A1D0                 db    ? ;
.bss:000000000020A1D1                 db    ? ;
.bss:000000000020A1D2                 db    ? ;
.bss:000000000020A1D3                 db    ? ;
.bss:000000000020A1D4                 db    ? ;
.bss:000000000020A1D5                 db    ? ;
.bss:000000000020A1D6                 db    ? ;
.bss:000000000020A1D7                 db    ? ;
.bss:000000000020A1D8                 db    ? ;
.bss:000000000020A1D9                 db    ? ;
.bss:000000000020A1DA                 db    ? ;
.bss:000000000020A1DB                 db    ? ;
.bss:000000000020A1DC                 db    ? ;
.bss:000000000020A1DD                 db    ? ;
.bss:000000000020A1DE                 db    ? ;
.bss:000000000020A1DF                 db    ? ;
.bss:000000000020A1E0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020A1E0                                         ; get_quoting_style↑o ...
.bss:000000000020A1F0 xmmword_20A1F0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020A1F0                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020A200 xmmword_20A200  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020A200                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020A210 qword_20A210    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020A210                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020A210 _bss            ends
.bss:000000000020A210
.prgend:000000000020A218 ; ===========================================================================
.prgend:000000000020A218
.prgend:000000000020A218 ; Segment type: Zero-length
.prgend:000000000020A218 _prgend         segment byte public '' use64
.prgend:000000000020A218 _end            label byte
.prgend:000000000020A218 _prgend         ends
.prgend:000000000020A218
extern:000000000020A220 ; ===========================================================================
extern:000000000020A220
extern:000000000020A220 ; Segment type: Externs
extern:000000000020A220 ; extern
extern:000000000020A220 ; void free(void *ptr)
extern:000000000020A220                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020A220                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020A228 ; void __noreturn abort(void)
extern:000000000020A228                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020A228                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020A230 ; int *_errno_location(void)
extern:000000000020A230                 extrn __errno_location:near
extern:000000000020A230                                         ; CODE XREF: ___errno_location↑j
extern:000000000020A230                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020A238 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020A238                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020A238                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020A240 ; void __noreturn exit(int status)
extern:000000000020A240                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020A240                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020A248 ; size_t _fpending(FILE *fp)
extern:000000000020A248                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020A248                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020A250 ; ssize_t readlink(const char *path, char *buf, size_t len)
extern:000000000020A250                 extrn readlink:near     ; CODE XREF: _readlink↑j
extern:000000000020A250                                         ; DATA XREF: .got:readlink_ptr↑o
extern:000000000020A258 ; char *textdomain(const char *domainname)
extern:000000000020A258                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020A258                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020A260 ; int fclose(FILE *stream)
extern:000000000020A260                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020A260                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020A268 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020A268                 extrn bindtextdomain:near
extern:000000000020A268                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020A268                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020A270 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020A270                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020A270                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020A278 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020A278                 extrn __ctype_get_mb_cur_max:near
extern:000000000020A278                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020A278                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020A280 ; size_t strlen(const char *s)
extern:000000000020A280                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020A280                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020A288 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020A288                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:000000000020A288                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:000000000020A290                 extrn __stack_chk_fail:near
extern:000000000020A290                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020A290                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020A298 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020A298                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020A298                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020A2A0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020A2A0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020A2A0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020A2A8 ; int _fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
extern:000000000020A2A8                 extrn __fxstatat:near   ; CODE XREF: ___fxstatat↑j
extern:000000000020A2A8                                         ; DATA XREF: .got:__fxstatat_ptr↑o
extern:000000000020A2B0 ; int _overflow(_IO_FILE *, int)
extern:000000000020A2B0                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:000000000020A2B0                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:000000000020A2B8 ; char *strrchr(const char *s, int c)
extern:000000000020A2B8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020A2B8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020A2C0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020A2C0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020A2C0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020A2C8 ; void *memset(void *s, int c, size_t n)
extern:000000000020A2C8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020A2C8                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020A2D0 ; char *getcwd(char *buf, size_t size)
extern:000000000020A2D0                 extrn getcwd:near       ; CODE XREF: _getcwd↑j
extern:000000000020A2D0                                         ; DATA XREF: .got:getcwd_ptr↑o
extern:000000000020A2D8 ; size_t strspn(const char *s, const char *accept)
extern:000000000020A2D8                 extrn strspn:near       ; CODE XREF: _strspn↑j
extern:000000000020A2D8                                         ; DATA XREF: .got:strspn_ptr↑o
extern:000000000020A2E0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020A2E0                 extrn __libc_start_main:near
extern:000000000020A2E0                                         ; CODE XREF: start+24↑p
extern:000000000020A2E0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020A2E8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020A2E8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020A2E8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020A2F0 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020A2F0                 extrn fputs_unlocked:near
extern:000000000020A2F0                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020A2F0                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020A2F8 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020A2F8                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020A2F8                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020A300 ; int strcmp(const char *s1, const char *s2)
extern:000000000020A300                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020A300                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020A308 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020A308                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020A308                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020A310 ; int fileno(FILE *stream)
extern:000000000020A310                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020A310                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020A318 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020A318                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:000000000020A318                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:000000000020A320 ; void *malloc(size_t size)
extern:000000000020A320                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020A320                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020A328 ; int fflush(FILE *stream)
extern:000000000020A328                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020A328                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020A330 ; char *nl_langinfo(nl_item item)
extern:000000000020A330                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020A330                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020A338 ; int _freading(FILE *fp)
extern:000000000020A338                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020A338                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020A340 ; void *realloc(void *ptr, size_t size)
extern:000000000020A340                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020A340                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020A348 ; char *setlocale(int category, const char *locale)
extern:000000000020A348                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020A348                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020A350                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020A350                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020A358 ; void *memmove(void *dest, const void *src, size_t n)
extern:000000000020A358                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:000000000020A358                                         ; DATA XREF: .got:memmove_ptr↑o
extern:000000000020A360 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020A360                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020A360                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020A368 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020A368                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020A368                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020A370 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020A370                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020A370                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020A378 ; void __noreturn exit(int status)
extern:000000000020A378                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020A378                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020A380 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020A380                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020A380                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020A388                 extrn __fprintf_chk:near
extern:000000000020A388                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020A388                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020A390 ; int mbsinit(const mbstate_t *ps)
extern:000000000020A390                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020A390                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020A398 ; int iswprint(wint_t wc)
extern:000000000020A398                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020A398                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020A3A0 ; int __fastcall __cxa_finalize(void *)
extern:000000000020A3A0                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020A3A0                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020A3A0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020A3A8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020A3A8                 extrn __ctype_b_loc:near
extern:000000000020A3A8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020A3A8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020A3B0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020A3B0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020A3B8                 extrn __gmon_start__:near ; weak
extern:000000000020A3B8                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020A3B8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020A3C0                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020A3C0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020A3C0
extern:000000000020A3C0
extern:000000000020A3C0                 end start
