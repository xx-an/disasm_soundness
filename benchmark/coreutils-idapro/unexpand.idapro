LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 34C026A8D57FC9E398753E4627BF677A3CB6C3DD1C24CA85B43B04F897BC918A
LOAD:0000000000000000 ; Input MD5    : 4E0C067FF3766DE298DB1E551F6D5478
LOAD:0000000000000000 ; Input CRC32  : 1E65DD53
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/unexpand
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'unexpand.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'expand-common.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xstrndup.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 27EC8h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 75B0h                ; Size in file image
LOAD:00000000000000D8                 dq 75B0h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 7B10h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 207B10h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 590h                 ; Size in file image
LOAD:0000000000000110                 dq 790h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 7C38h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 207C38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 6670h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 6670h                ; Physical address
LOAD:00000000000001B0                 dq 2A4h                 ; Size in file image
LOAD:00000000000001B8                 dq 2A4h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 7B10h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 207B10h              ; Physical address
LOAD:0000000000000220                 dq 4F0h                 ; Size in file image
LOAD:0000000000000228                 dq 4F0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0D4h, 83h, 0F7h, 9Ah, 6, 0C7h, 0EDh, 8Fh, 0B2h, 70h ; Desc
LOAD:0000000000000284                 db 0DFh, 0, 0DDh, 39h, 69h, 2Eh, 22h, 12h, 1Ch, 5Bh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 36h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 36h, 37h, 3Dh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aUflow - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "__uflow"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_8C8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_8C8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncmp - offset byte_8C8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aItmDeregistert - offset byte_8C8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aExit - offset byte_8C8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFpending - offset byte_8C8, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aClearerrUnlock - offset byte_8C8, 12h, 0, 0, \ ; "clearerr_unlocked"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_8C8, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aFclose - offset byte_8C8, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aBindtextdomain - offset byte_8C8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aDcgettext - offset byte_8C8, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_8C8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStrlen - offset byte_8C8, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStackChkFail - offset byte_8C8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aGetoptLong - offset byte_8C8, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aMbrtowc - offset byte_8C8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aOverflow - offset byte_8C8, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrrchr - offset byte_8C8, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aLseek - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004D8                            0>
LOAD:00000000000004F0                 Elf64_Sym <offset aAssertFail - offset byte_8C8, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aMemset - offset byte_8C8, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aStrspn - offset byte_8C8, 12h, 0, 0, \ ; "strspn"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aPosixFadvise - offset byte_8C8, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aStrndup - offset byte_8C8, 12h, 0, 0, \ ; "strndup"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aLibcStartMain - offset byte_8C8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aMemcmp - offset byte_8C8, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aFputsUnlocked - offset byte_8C8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aCalloc - offset byte_8C8, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aGmonStart - offset byte_8C8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aMemcpy - offset byte_8C8, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aFileno - offset byte_8C8, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aMalloc - offset byte_8C8, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aFflush - offset byte_8C8, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aNlLanginfo - offset byte_8C8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aFreading - offset byte_8C8, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aFwriteUnlocked - offset byte_8C8, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aRealloc - offset byte_8C8, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aSetlocale - offset byte_8C8, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aPrintfChk - offset byte_8C8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aError - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000006D0                            0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFseeko - offset byte_8C8, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFopen - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000700                            0>
LOAD:0000000000000718                 Elf64_Sym <offset aCxaAtexit - offset byte_8C8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aExit+1 - offset byte_8C8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aFwrite - offset byte_8C8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aFprintfChk - offset byte_8C8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aItmRegistertmc - offset byte_8C8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aMbsinit - offset byte_8C8, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aIswprint - offset byte_8C8, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aCxaFinalize - offset byte_8C8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aCtypeBLoc - offset byte_8C8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aStdout - offset byte_8C8, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000007F0                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000808                 Elf64_Sym <offset aProgname - offset byte_8C8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000808                            offset __bss_start, 8>
LOAD:0000000000000820                 Elf64_Sym <offset aStdin - offset byte_8C8, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000820                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000838                 Elf64_Sym <offset aProgramInvocat - offset byte_8C8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000838                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000850                 Elf64_Sym <offset aPrognameFull - offset byte_8C8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000850                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000868                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_8C8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000868                            offset __bss_start, 8>
LOAD:0000000000000880                 Elf64_Sym <offset aStderr - offset byte_8C8, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000880                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000898                 Elf64_Sym <offset aOptind - offset byte_8C8, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000898                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000008B0                 Elf64_Sym <offset aOptarg - offset byte_8C8, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000008B0                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:00000000000008C8 ; ELF String Table
LOAD:00000000000008C8 byte_8C8        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000008C8                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000008C9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000C38↓o
LOAD:00000000000008D3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:00000000000008DA aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:00000000000008E7 aClearerrUnlock db 'clearerr_unlocked',0
LOAD:00000000000008E7                                         ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:00000000000008F9 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000903 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000490↑o
LOAD:000000000000090B aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000911 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000919 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000920 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000928 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000932 aError          db 'error',0            ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000938 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000949 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000952 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000688↑o
LOAD:000000000000095A aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000960 aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000966 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000966                                         ; LOAD:0000000000000730↑o
LOAD:000000000000096C aStrspn         db 'strspn',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000973 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000973                                         ; DATA XREF: LOAD:0000000000000838↑o
LOAD:000000000000098B aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000999 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000999                                         ; DATA XREF: LOAD:0000000000000430↑o
LOAD:00000000000009B0 aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000538↑o
LOAD:00000000000009BE aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:00000000000009C5 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000448↑o
LOAD:00000000000009CC aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:00000000000009D3 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:00000000000009E4 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:00000000000009EB aStrndup        db 'strndup',0          ; DATA XREF: LOAD:0000000000000550↑o
LOAD:00000000000009F3 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000A01 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000A08 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000A0E aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000A15 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000A1C aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000A23 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000A2B aUflow          db '__uflow',0          ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000A33 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000A3F aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000A4D aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000A54 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000A5F aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000A66 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000A72 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000A79 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000A80 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000A8B aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A8B                                         ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000AA9 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000AB8 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000AB8                                         ; LOAD:00000000000003D0↑o
LOAD:0000000000000AC7 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000AD7 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000AD7                                         ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000AE9 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000AF0 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000AFB aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000B0A aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000B0F aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000B1A aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000B2A aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000B37 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000C48↓o
LOAD:0000000000000B41 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000C58↓o
LOAD:0000000000000B4D aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000C68↓o
LOAD:0000000000000B58 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000C78↓o
LOAD:0000000000000B62 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000C88↓o
LOAD:0000000000000B6E aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B6E                                         ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000B8A aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000B99 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B99                                         ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000BB3                 align 4
LOAD:0000000000000BB4 ; ELF GNU Symbol Version Table
LOAD:0000000000000BB4                 dw 0
LOAD:0000000000000BB6                 dw 2                    ; __uflow@@GLIBC_2.2.5
LOAD:0000000000000BB8                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000BBA                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000BBC                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000BBE                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000BC0                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000BC2                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000BC4                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000BC6                 dw 2                    ; clearerr_unlocked@@GLIBC_2.2.5
LOAD:0000000000000BC8                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000BCA                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000BCC                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000BCE                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000BD0                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000BD2                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000BD4                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000BD6                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000BD8                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000BDA                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000BDC                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000BDE                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000BE0                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000BE2                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000BE4                 dw 2                    ; strspn@@GLIBC_2.2.5
LOAD:0000000000000BE6                 dw 2                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000BE8                 dw 2                    ; strndup@@GLIBC_2.2.5
LOAD:0000000000000BEA                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000BEC                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000BEE                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000BF0                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000BF2                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000BF4                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000BF6                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000BF8                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000BFA                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000BFC                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000BFE                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000C00                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C02                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000C04                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000C06                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000C08                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000C0A                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000C0C                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000C0E                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000C10                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000C12                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000C14                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000C16                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000C18                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000C1A                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000C1C                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000C1E                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000C20                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000C22                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000C24                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000C26                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000C28                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000C2A                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000C2C                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000C2E                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000C30                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000C32                 dw 0
LOAD:0000000000000C34                 dw 0
LOAD:0000000000000C36                 dw 0
LOAD:0000000000000C38 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000C38                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_8C8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000C48                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_8C8, \ ; "GLIBC_2.3"
LOAD:0000000000000C48                                10h>
LOAD:0000000000000C58                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_8C8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000C58                                10h>
LOAD:0000000000000C68                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_8C8, \ ; "GLIBC_2.14"
LOAD:0000000000000C68                                10h>
LOAD:0000000000000C78                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_8C8, \ ; "GLIBC_2.4"
LOAD:0000000000000C78                                10h>
LOAD:0000000000000C88                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_8C8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000C98 ; ELF RELA Relocation Table
LOAD:0000000000000C98                 Elf64_Rela <207B10h, 8, 1DE0h> ; R_X86_64_RELATIVE +1DE0h
LOAD:0000000000000CB0                 Elf64_Rela <207B18h, 8, 1DA0h> ; R_X86_64_RELATIVE +1DA0h
LOAD:0000000000000CC8                 Elf64_Rela <207B20h, 8, 5726h> ; R_X86_64_RELATIVE +5726h
LOAD:0000000000000CE0                 Elf64_Rela <207B40h, 8, 572Bh> ; R_X86_64_RELATIVE +572Bh
LOAD:0000000000000CF8                 Elf64_Rela <207B60h, 8, 572Fh> ; R_X86_64_RELATIVE +572Fh
LOAD:0000000000000D10                 Elf64_Rela <207B80h, 8, 573Ah> ; R_X86_64_RELATIVE +573Ah
LOAD:0000000000000D28                 Elf64_Rela <207BA0h, 8, 573Fh> ; R_X86_64_RELATIVE +573Fh
LOAD:0000000000000D40                 Elf64_Rela <207BE0h, 8, 5E21h> ; R_X86_64_RELATIVE +5E21h
LOAD:0000000000000D58                 Elf64_Rela <207BE8h, 8, 5E29h> ; R_X86_64_RELATIVE +5E29h
LOAD:0000000000000D70                 Elf64_Rela <207BF0h, 8, 5E2Fh> ; R_X86_64_RELATIVE +5E2Fh
LOAD:0000000000000D88                 Elf64_Rela <207BF8h, 8, 5E3Ch> ; R_X86_64_RELATIVE +5E3Ch
LOAD:0000000000000DA0                 Elf64_Rela <207C00h, 8, 5E49h> ; R_X86_64_RELATIVE +5E49h
LOAD:0000000000000DB8                 Elf64_Rela <207C08h, 8, 5E5Dh> ; R_X86_64_RELATIVE +5E5Dh
LOAD:0000000000000DD0                 Elf64_Rela <207C10h, 8, 5E5Fh> ; R_X86_64_RELATIVE +5E5Fh
LOAD:0000000000000DE8                 Elf64_Rela <207C18h, 8, 5E42h> ; R_X86_64_RELATIVE +5E42h
LOAD:0000000000000E00                 Elf64_Rela <207C20h, 8, 56C1h> ; R_X86_64_RELATIVE +56C1h
LOAD:0000000000000E18                 Elf64_Rela <207C28h, 8, 5E67h> ; R_X86_64_RELATIVE +5E67h
LOAD:0000000000000E30                 Elf64_Rela <208008h, 8, 208008h> ; R_X86_64_RELATIVE +208008h
LOAD:0000000000000E48                 Elf64_Rela <208010h, 8, 5E0Ah> ; R_X86_64_RELATIVE +5E0Ah
LOAD:0000000000000E60                 Elf64_Rela <208020h, 8, 5DBAh> ; R_X86_64_RELATIVE +5DBAh
LOAD:0000000000000E78                 Elf64_Rela <208080h, 8, 208090h> ; R_X86_64_RELATIVE +208090h
LOAD:0000000000000E90                 Elf64_Rela <208098h, 8, 208160h> ; R_X86_64_RELATIVE +208160h
LOAD:0000000000000EA8                 Elf64_Rela <207FC0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000EC0                 Elf64_Rela <207FC8h, 1B00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000ED8                 Elf64_Rela <207FD0h, 1F00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000EF0                 Elf64_Rela <207FD8h, 3100000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000F08                 Elf64_Rela <207FE0h, 3400000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000F20                 Elf64_Rela <2080A0h, 3700000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000F38                 Elf64_Rela <2080A8h, 3600000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000F50                 Elf64_Rela <2080B0h, 3800000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000000F68                 Elf64_Rela <2080B8h, 3D00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000F80                 Elf64_Rela <2080C0h, 3E00000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000000F98                 Elf64_Rela <2080C8h, 3A00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000FB0                 Elf64_Rela <2080E0h, 3C00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000FC8 ; ELF JMPREL Relocation Table
LOAD:0000000000000FC8                 Elf64_Rela <207E40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __uflow
LOAD:0000000000000FE0                 Elf64_Rela <207E48h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000FF8                 Elf64_Rela <207E50h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001010                 Elf64_Rela <207E58h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001028                 Elf64_Rela <207E60h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001040                 Elf64_Rela <207E68h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001058                 Elf64_Rela <207E70h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001070                 Elf64_Rela <207E78h, 900000007h, 0> ; R_X86_64_JUMP_SLOT clearerr_unlocked
LOAD:0000000000001088                 Elf64_Rela <207E80h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:00000000000010A0                 Elf64_Rela <207E88h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:00000000000010B8                 Elf64_Rela <207E90h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000010D0                 Elf64_Rela <207E98h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000010E8                 Elf64_Rela <207EA0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001100                 Elf64_Rela <207EA8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001118                 Elf64_Rela <207EB0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001130                 Elf64_Rela <207EB8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001148                 Elf64_Rela <207EC0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001160                 Elf64_Rela <207EC8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001178                 Elf64_Rela <207ED0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001190                 Elf64_Rela <207ED8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000011A8                 Elf64_Rela <207EE0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000011C0                 Elf64_Rela <207EE8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000011D8                 Elf64_Rela <207EF0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT strspn
LOAD:00000000000011F0                 Elf64_Rela <207EF8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:0000000000001208                 Elf64_Rela <207F00h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT strndup
LOAD:0000000000001220                 Elf64_Rela <207F08h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001238                 Elf64_Rela <207F10h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001250                 Elf64_Rela <207F18h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001268                 Elf64_Rela <207F20h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001280                 Elf64_Rela <207F28h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001298                 Elf64_Rela <207F30h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000012B0                 Elf64_Rela <207F38h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000012C8                 Elf64_Rela <207F40h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000012E0                 Elf64_Rela <207F48h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000012F8                 Elf64_Rela <207F50h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:0000000000001310                 Elf64_Rela <207F58h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001328                 Elf64_Rela <207F60h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001340                 Elf64_Rela <207F68h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001358                 Elf64_Rela <207F70h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001370                 Elf64_Rela <207F78h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001388                 Elf64_Rela <207F80h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:00000000000013A0                 Elf64_Rela <207F88h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000013B8                 Elf64_Rela <207F90h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000013D0                 Elf64_Rela <207F98h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000013E8                 Elf64_Rela <207FA0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001400                 Elf64_Rela <207FA8h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001418                 Elf64_Rela <207FB0h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001430                 Elf64_Rela <207FB8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001430 LOAD            ends
LOAD:0000000000001430
.init:0000000000001448 ; ===========================================================================
.init:0000000000001448
.init:0000000000001448 ; Segment type: Pure code
.init:0000000000001448 ; Segment permissions: Read/Execute
.init:0000000000001448 _init           segment dword public 'CODE' use64
.init:0000000000001448                 assume cs:_init
.init:0000000000001448                 ;org 1448h
.init:0000000000001448                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001448
.init:0000000000001448 ; =============== S U B R O U T I N E =======================================
.init:0000000000001448
.init:0000000000001448
.init:0000000000001448                 public _init_proc
.init:0000000000001448 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001448                 sub     rsp, 8          ; _init
.init:000000000000144C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001453                 test    rax, rax
.init:0000000000001456                 jz      short loc_145A
.init:0000000000001458                 call    rax ; __gmon_start__
.init:000000000000145A
.init:000000000000145A loc_145A:                               ; CODE XREF: _init_proc+E↑j
.init:000000000000145A                 add     rsp, 8
.init:000000000000145E                 retn
.init:000000000000145E _init_proc      endp
.init:000000000000145E
.init:000000000000145E _init           ends
.init:000000000000145E
LOAD:000000000000145F ; ===========================================================================
LOAD:000000000000145F
LOAD:000000000000145F ; Segment type: Pure code
LOAD:000000000000145F ; Segment permissions: Read/Execute
LOAD:000000000000145F LOAD            segment byte public 'CODE' use64
LOAD:000000000000145F                 assume cs:LOAD
LOAD:000000000000145F                 ;org 145Fh
LOAD:000000000000145F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000145F                 align 20h
LOAD:000000000000145F LOAD            ends
LOAD:000000000000145F
.plt:0000000000001460 ; ===========================================================================
.plt:0000000000001460
.plt:0000000000001460 ; Segment type: Pure code
.plt:0000000000001460 ; Segment permissions: Read/Execute
.plt:0000000000001460 _plt            segment para public 'CODE' use64
.plt:0000000000001460                 assume cs:_plt
.plt:0000000000001460                 ;org 1460h
.plt:0000000000001460                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460
.plt:0000000000001460 sub_1460        proc near               ; CODE XREF: .plt:000000000000147B↓j
.plt:0000000000001460                                         ; .plt:000000000000148B↓j ...
.plt:0000000000001460 ; __unwind {
.plt:0000000000001460                 push    cs:qword_207E30
.plt:0000000000001466                 jmp     cs:qword_207E38
.plt:0000000000001466 sub_1460        endp
.plt:0000000000001466
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:000000000000146C                 align 10h
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; int __uflow(_IO_FILE *)
.plt:0000000000001470 ___uflow        proc near               ; CODE XREF: main+3BD↓p
.plt:0000000000001470                 jmp     cs:__uflow_ptr
.plt:0000000000001470 ___uflow        endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    0
.plt:000000000000147B                 jmp     sub_1460
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; void free(void *ptr)
.plt:0000000000001480 _free           proc near               ; CODE XREF: main+42E↓p
.plt:0000000000001480                                         ; parse_tab_stops+249↓p ...
.plt:0000000000001480                 jmp     cs:free_ptr
.plt:0000000000001480 _free           endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    1
.plt:000000000000148B                 jmp     sub_1460
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: noreturn thunk
.plt:0000000000001490
.plt:0000000000001490 ; void __noreturn abort(void)
.plt:0000000000001490 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001490                                         ; quotearg_buffer_restyled:def_2EA1↓p ...
.plt:0000000000001490                 jmp     cs:abort_ptr
.plt:0000000000001490 _abort          endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    2
.plt:000000000000149B                 jmp     sub_1460
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; int *__errno_location(void)
.plt:00000000000014A0 ___errno_location proc near             ; CODE XREF: main+40D↓p
.plt:00000000000014A0                                         ; main+51B↓p ...
.plt:00000000000014A0                 jmp     cs:__errno_location_ptr
.plt:00000000000014A0 ___errno_location endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    3
.plt:00000000000014AB                 jmp     sub_1460
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000014B0 _strncmp        proc near               ; CODE XREF: usage+27C↓p
.plt:00000000000014B0                                         ; usage+33D↓p
.plt:00000000000014B0                 jmp     cs:strncmp_ptr
.plt:00000000000014B0 _strncmp        endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    4
.plt:00000000000014BB                 jmp     sub_1460
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: noreturn thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; void __noreturn _exit(int status)
.plt:00000000000014C0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000014C0                 jmp     cs:_exit_ptr
.plt:00000000000014C0 __exit          endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    5
.plt:00000000000014CB                 jmp     sub_1460
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; size_t __fpending(FILE *fp)
.plt:00000000000014D0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000014D0                 jmp     cs:__fpending_ptr
.plt:00000000000014D0 ___fpending     endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    6
.plt:00000000000014DB                 jmp     sub_1460
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; void clearerr_unlocked(FILE *stream)
.plt:00000000000014E0 _clearerr_unlocked proc near            ; CODE XREF: next_file+4A↓p
.plt:00000000000014E0                 jmp     cs:clearerr_unlocked_ptr
.plt:00000000000014E0 _clearerr_unlocked endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    7
.plt:00000000000014EB                 jmp     sub_1460
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; char *textdomain(const char *domainname)
.plt:00000000000014F0 _textdomain     proc near               ; CODE XREF: main+66↓p
.plt:00000000000014F0                 jmp     cs:textdomain_ptr
.plt:00000000000014F0 _textdomain     endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    8
.plt:00000000000014FB                 jmp     sub_1460
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; int fclose(FILE *stream)
.plt:0000000000001500 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001500                                         ; rpl_fclose+6B↓j
.plt:0000000000001500                 jmp     cs:fclose_ptr
.plt:0000000000001500 _fclose         endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    9
.plt:000000000000150B                 jmp     sub_1460
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001510 _bindtextdomain proc near               ; CODE XREF: main+5A↓p
.plt:0000000000001510                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001510 _bindtextdomain endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    0Ah
.plt:000000000000151B                 jmp     sub_1460
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001520 _dcgettext      proc near               ; CODE XREF: main+405↓p
.plt:0000000000001520                                         ; main+4C6↓p ...
.plt:0000000000001520                 jmp     cs:dcgettext_ptr
.plt:0000000000001520 _dcgettext      endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    0Bh
.plt:000000000000152B                 jmp     sub_1460
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001530 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001530                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001530 ___ctype_get_mb_cur_max endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    0Ch
.plt:000000000000153B                 jmp     sub_1460
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; size_t strlen(const char *s)
.plt:0000000000001540 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001540                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001540                 jmp     cs:strlen_ptr
.plt:0000000000001540 _strlen         endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    0Dh
.plt:000000000000154B                 jmp     sub_1460
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: noreturn thunk
.plt:0000000000001550
.plt:0000000000001550 ___stack_chk_fail proc near             ; CODE XREF: main:loc_1C5C↓p
.plt:0000000000001550                                         ; quotearg_buffer_restyled:loc_4003↓p ...
.plt:0000000000001550                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001550 ___stack_chk_fail endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    0Eh
.plt:000000000000155B                 jmp     sub_1460
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001560 _getopt_long    proc near               ; CODE XREF: main+92↓p
.plt:0000000000001560                 jmp     cs:getopt_long_ptr
.plt:0000000000001560 _getopt_long    endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    0Fh
.plt:000000000000156B                 jmp     sub_1460
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001570 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001570                 jmp     cs:mbrtowc_ptr
.plt:0000000000001570 _mbrtowc        endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    10h
.plt:000000000000157B                 jmp     sub_1460
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001580 ___overflow     proc near               ; CODE XREF: main+3EA↓p
.plt:0000000000001580                 jmp     cs:__overflow_ptr
.plt:0000000000001580 ___overflow     endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    11h
.plt:000000000000158B                 jmp     sub_1460
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; char *strrchr(const char *s, int c)
.plt:0000000000001590 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001590                 jmp     cs:strrchr_ptr
.plt:0000000000001590 _strrchr        endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    12h
.plt:000000000000159B                 jmp     sub_1460
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000015A0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000015A0                                         ; rpl_fseeko+3B↓p
.plt:00000000000015A0                 jmp     cs:lseek_ptr
.plt:00000000000015A0 _lseek          endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    13h
.plt:00000000000015AB                 jmp     sub_1460
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: noreturn thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:00000000000015B0 ___assert_fail  proc near               ; CODE XREF: next_file+1FC↓p
.plt:00000000000015B0                 jmp     cs:__assert_fail_ptr
.plt:00000000000015B0 ___assert_fail  endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    14h
.plt:00000000000015BB                 jmp     sub_1460
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000015C0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000015C0                                         ; xzalloc+12↓j
.plt:00000000000015C0                 jmp     cs:memset_ptr
.plt:00000000000015C0 _memset         endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    15h
.plt:00000000000015CB                 jmp     sub_1460
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; size_t strspn(const char *s, const char *accept)
.plt:00000000000015D0 _strspn         proc near               ; CODE XREF: parse_tab_stops+1F9↓p
.plt:00000000000015D0                 jmp     cs:strspn_ptr
.plt:00000000000015D0 _strspn         endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    16h
.plt:00000000000015DB                 jmp     sub_1460
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:00000000000015E0 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:00000000000015E0                                         ; fadvise+16↓j
.plt:00000000000015E0                 jmp     cs:posix_fadvise_ptr
.plt:00000000000015E0 _posix_fadvise  endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    17h
.plt:00000000000015EB                 jmp     sub_1460
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; char *strndup(const char *string, size_t n)
.plt:00000000000015F0 _strndup        proc near               ; CODE XREF: xstrndup+4↓p
.plt:00000000000015F0                 jmp     cs:strndup_ptr
.plt:00000000000015F0 _strndup        endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    18h
.plt:00000000000015FB                 jmp     sub_1460
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001600 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001600                 jmp     cs:memcmp_ptr
.plt:0000000000001600 _memcmp         endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    19h
.plt:000000000000160B                 jmp     sub_1460
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001610 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001610                                         ; usage+C2↓p ...
.plt:0000000000001610                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001610 _fputs_unlocked endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    1Ah
.plt:000000000000161B                 jmp     sub_1460
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001620 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001620                 jmp     cs:calloc_ptr
.plt:0000000000001620 _calloc         endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    1Bh
.plt:000000000000162B                 jmp     sub_1460
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001630 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001630                 jmp     cs:memcpy_ptr
.plt:0000000000001630 _memcpy         endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    1Ch
.plt:000000000000163B                 jmp     sub_1460
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; int fileno(FILE *stream)
.plt:0000000000001640 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:0000000000001640                                         ; rpl_fclose+7↓p ...
.plt:0000000000001640                 jmp     cs:fileno_ptr
.plt:0000000000001640 _fileno         endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    1Dh
.plt:000000000000164B                 jmp     sub_1460
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; void *malloc(size_t size)
.plt:0000000000001650 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001650                 jmp     cs:malloc_ptr
.plt:0000000000001650 _malloc         endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    1Eh
.plt:000000000000165B                 jmp     sub_1460
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; int fflush(FILE *stream)
.plt:0000000000001660 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001660                                         ; rpl_fflush+3B↓j
.plt:0000000000001660                 jmp     cs:fflush_ptr
.plt:0000000000001660 _fflush         endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    1Fh
.plt:000000000000166B                 jmp     sub_1460
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; char *nl_langinfo(nl_item item)
.plt:0000000000001670 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001670                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001670 _nl_langinfo    endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    20h ; ' '
.plt:000000000000167B                 jmp     sub_1460
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; int __freading(FILE *fp)
.plt:0000000000001680 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001680                                         ; rpl_fflush+9↓p
.plt:0000000000001680                 jmp     cs:__freading_ptr
.plt:0000000000001680 ___freading     endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    21h ; '!'
.plt:000000000000168B                 jmp     sub_1460
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001690 _fwrite_unlocked proc near              ; CODE XREF: main+28D↓p
.plt:0000000000001690                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000001690 _fwrite_unlocked endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    22h ; '"'
.plt:000000000000169B                 jmp     sub_1460
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000016A0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000016A0                 jmp     cs:realloc_ptr
.plt:00000000000016A0 _realloc        endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    23h ; '#'
.plt:00000000000016AB                 jmp     sub_1460
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; char *setlocale(int category, const char *locale)
.plt:00000000000016B0 _setlocale      proc near               ; CODE XREF: main+47↓p
.plt:00000000000016B0                                         ; usage+263↓p ...
.plt:00000000000016B0                 jmp     cs:setlocale_ptr
.plt:00000000000016B0 _setlocale      endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    24h ; '$'
.plt:00000000000016BB                 jmp     sub_1460
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:00000000000016C0                                         ; usage+257↓p ...
.plt:00000000000016C0                 jmp     cs:__printf_chk_ptr
.plt:00000000000016C0 ___printf_chk   endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    25h ; '%'
.plt:00000000000016CB                 jmp     sub_1460
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000016D0 _error          proc near               ; CODE XREF: main+41E↓p
.plt:00000000000016D0                                         ; main+4D7↓p ...
.plt:00000000000016D0                 jmp     cs:error_ptr
.plt:00000000000016D0 _error          endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    26h ; '&'
.plt:00000000000016DB                 jmp     sub_1460
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000016E0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_534A↓j
.plt:00000000000016E0                 jmp     cs:fseeko_ptr
.plt:00000000000016E0 _fseeko         endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    27h ; '''
.plt:00000000000016EB                 jmp     sub_1460
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; FILE *fopen(const char *filename, const char *modes)
.plt:00000000000016F0 _fopen          proc near               ; CODE XREF: next_file+101↓p
.plt:00000000000016F0                 jmp     cs:fopen_ptr
.plt:00000000000016F0 _fopen          endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    28h ; '('
.plt:00000000000016FB                 jmp     sub_1460
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001700 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001700                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001700 ___cxa_atexit   endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    29h ; ')'
.plt:000000000000170B                 jmp     sub_1460
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: noreturn thunk
.plt:0000000000001710
.plt:0000000000001710 ; void __noreturn exit(int status)
.plt:0000000000001710 _exit           proc near               ; CODE XREF: main+146↓p
.plt:0000000000001710                                         ; usage+58↓p ...
.plt:0000000000001710                 jmp     cs:exit_ptr
.plt:0000000000001710 _exit           endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    2Ah ; '*'
.plt:000000000000171B                 jmp     sub_1460
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001720 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001720                 jmp     cs:fwrite_ptr
.plt:0000000000001720 _fwrite         endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    2Bh ; '+'
.plt:000000000000172B                 jmp     sub_1460
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001730                                         ; version_etc_arn+37↓p ...
.plt:0000000000001730                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001730 ___fprintf_chk  endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    2Ch ; ','
.plt:000000000000173B                 jmp     sub_1460
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001740 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001740                 jmp     cs:mbsinit_ptr
.plt:0000000000001740 _mbsinit        endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    2Dh ; '-'
.plt:000000000000174B                 jmp     sub_1460
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ; int iswprint(wint_t wc)
.plt:0000000000001750 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001750                 jmp     cs:iswprint_ptr
.plt:0000000000001750 _iswprint       endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    2Eh ; '.'
.plt:000000000000175B                 jmp     sub_1460
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001760 ___ctype_b_loc  proc near               ; CODE XREF: main+308↓p
.plt:0000000000001760                                         ; parse_tab_stops:loc_2390↓p ...
.plt:0000000000001760                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001760 ___ctype_b_loc  endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    2Fh ; '/'
.plt:000000000000176B                 jmp     sub_1460
.plt:000000000000176B ; } // starts at 1460
.plt:000000000000176B _plt            ends
.plt:000000000000176B
.plt.got:0000000000001770 ; ===========================================================================
.plt.got:0000000000001770
.plt.got:0000000000001770 ; Segment type: Pure code
.plt.got:0000000000001770 ; Segment permissions: Read/Execute
.plt.got:0000000000001770 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001770                 assume cs:_plt_got
.plt.got:0000000000001770                 ;org 1770h
.plt.got:0000000000001770                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001770
.plt.got:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001770
.plt.got:0000000000001770 ; Attributes: thunk
.plt.got:0000000000001770
.plt.got:0000000000001770 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001770 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001770 ; __unwind {
.plt.got:0000000000001770                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001770 __cxa_finalize  endp
.plt.got:0000000000001770
.plt.got:0000000000001770 ; ---------------------------------------------------------------------------
.plt.got:0000000000001776                 align 8
.plt.got:0000000000001776 ; } // starts at 1770
.plt.got:0000000000001776 _plt_got        ends
.plt.got:0000000000001776
LOAD:0000000000001778 ; ===========================================================================
LOAD:0000000000001778
LOAD:0000000000001778 ; Segment type: Pure code
LOAD:0000000000001778 ; Segment permissions: Read/Execute
LOAD:0000000000001778 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001778                 assume cs:LOAD
LOAD:0000000000001778                 ;org 1778h
LOAD:0000000000001778                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001778                 align 20h
LOAD:0000000000001778 LOAD            ends
LOAD:0000000000001778
.text:0000000000001780 ; ===========================================================================
.text:0000000000001780
.text:0000000000001780 ; Segment type: Pure code
.text:0000000000001780 ; Segment permissions: Read/Execute
.text:0000000000001780 _text           segment para public 'CODE' use64
.text:0000000000001780                 assume cs:_text
.text:0000000000001780                 ;org 1780h
.text:0000000000001780                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001780
.text:0000000000001780 ; =============== S U B R O U T I N E =======================================
.text:0000000000001780
.text:0000000000001780
.text:0000000000001780 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001780                 public main
.text:0000000000001780 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001780
.text:0000000000001780 ptr             = qword ptr -78h
.text:0000000000001780 var_6A          = byte ptr -6Ah
.text:0000000000001780 var_69          = byte ptr -69h
.text:0000000000001780 var_68          = qword ptr -68h
.text:0000000000001780 var_60          = qword ptr -60h
.text:0000000000001780 var_49          = byte ptr -49h
.text:0000000000001780 var_48          = qword ptr -48h
.text:0000000000001780 var_40          = qword ptr -40h
.text:0000000000001780
.text:0000000000001780 ; __unwind {
.text:0000000000001780                 push    r15
.text:0000000000001782                 push    r14
.text:0000000000001784                 mov     r14d, 1
.text:000000000000178A                 push    r13
.text:000000000000178C                 push    r12
.text:000000000000178E                 lea     r12, longopts
.text:0000000000001795                 push    rbp
.text:0000000000001796                 push    rbx
.text:0000000000001797                 mov     ebp, edi
.text:0000000000001799                 mov     rbx, rsi
.text:000000000000179C                 xor     r13d, r13d
.text:000000000000179F                 sub     rsp, 48h
.text:00000000000017A3                 mov     rdi, [rsi]
.text:00000000000017A6                 mov     rax, fs:28h
.text:00000000000017AF                 mov     [rsp+78h+var_40], rax
.text:00000000000017B4                 xor     eax, eax
.text:00000000000017B6                 call    set_program_name
.text:00000000000017BB                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:00000000000017C2                 mov     edi, 6          ; category
.text:00000000000017C7                 call    _setlocale
.text:00000000000017CC                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:00000000000017D3                 lea     rdi, domainname ; "coreutils"
.text:00000000000017DA                 call    _bindtextdomain
.text:00000000000017DF                 lea     rdi, domainname ; "coreutils"
.text:00000000000017E6                 call    _textdomain
.text:00000000000017EB                 lea     rdi, close_stdout
.text:00000000000017F2                 call    atexit
.text:00000000000017F7                 mov     [rsp+78h+var_6A], 0
.text:00000000000017FC                 nop     dword ptr [rax+00h]
.text:0000000000001800
.text:0000000000001800 loc_1800:                               ; CODE XREF: main+FC↓j
.text:0000000000001800                                         ; main+157↓j ...
.text:0000000000001800                 lea     rdx, shortopts  ; ",0123456789at:"
.text:0000000000001807                 xor     r8d, r8d        ; longind
.text:000000000000180A                 mov     rcx, r12        ; longopts
.text:000000000000180D                 mov     rsi, rbx        ; argv
.text:0000000000001810                 mov     edi, ebp        ; argc
.text:0000000000001812                 call    _getopt_long
.text:0000000000001817                 cmp     eax, 0FFFFFFFFh
.text:000000000000181A                 jz      loc_1939
.text:0000000000001820                 cmp     eax, 3Fh ; '?'
.text:0000000000001823                 jz      loc_1C2E
.text:0000000000001829                 jle     short loc_1880
.text:000000000000182B                 cmp     eax, 74h ; 't'
.text:000000000000182E                 jz      loc_1910
.text:0000000000001834                 cmp     eax, 80h
.text:0000000000001839                 jz      loc_1900
.text:000000000000183F                 cmp     eax, 61h ; 'a'
.text:0000000000001842                 jz      loc_18D0
.text:0000000000001848
.text:0000000000001848 loc_1848:                               ; CODE XREF: main+115↓j
.text:0000000000001848                 test    r13b, r13b
.text:000000000000184B                 jz      loc_1928
.text:0000000000001851                 mov     rcx, 1999999999999999h
.text:000000000000185B                 cmp     r15, rcx
.text:000000000000185E                 ja      loc_1C38
.text:0000000000001864                 imul    rdx, r15, 0Ah
.text:0000000000001868                 sub     eax, 30h ; '0'
.text:000000000000186B                 cdqe
.text:000000000000186D                 add     rax, rdx
.text:0000000000001870                 cmp     rax, r15
.text:0000000000001873                 jb      loc_1C38
.text:0000000000001879                 mov     r15, rax
.text:000000000000187C                 jmp     short loc_1800
.text:000000000000187C ; ---------------------------------------------------------------------------
.text:000000000000187E                 align 20h
.text:0000000000001880
.text:0000000000001880 loc_1880:                               ; CODE XREF: main+A9↑j
.text:0000000000001880                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001885                 jz      loc_1C27
.text:000000000000188B                 cmp     eax, 2Ch ; ','
.text:000000000000188E                 jz      short loc_18E0
.text:0000000000001890                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001895                 jnz     short loc_1848
.text:0000000000001897                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000189E                 mov     rcx, cs:Version
.text:00000000000018A5                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:00000000000018AC                 lea     rdx, unk_5683
.text:00000000000018B3                 lea     rsi, aUnexpand  ; "unexpand"
.text:00000000000018BA                 xor     r9d, r9d
.text:00000000000018BD                 xor     eax, eax
.text:00000000000018BF                 call    version_etc
.text:00000000000018C4                 xor     edi, edi        ; status
.text:00000000000018C6                 call    _exit
.text:00000000000018C6 ; ---------------------------------------------------------------------------
.text:00000000000018CB                 align 10h
.text:00000000000018D0
.text:00000000000018D0 loc_18D0:                               ; CODE XREF: main+C2↑j
.text:00000000000018D0                 mov     cs:convert_entire_line, r14b
.text:00000000000018D7                 jmp     loc_1800
.text:00000000000018D7 ; ---------------------------------------------------------------------------
.text:00000000000018DC                 align 20h
.text:00000000000018E0
.text:00000000000018E0 loc_18E0:                               ; CODE XREF: main+10E↑j
.text:00000000000018E0                 test    r13b, r13b
.text:00000000000018E3                 jz      loc_1800
.text:00000000000018E9                 mov     rdi, r15
.text:00000000000018EC                 xor     r13d, r13d
.text:00000000000018EF                 call    add_tab_stop
.text:00000000000018F4                 jmp     loc_1800
.text:00000000000018F4 ; ---------------------------------------------------------------------------
.text:00000000000018F9                 align 20h
.text:0000000000001900
.text:0000000000001900 loc_1900:                               ; CODE XREF: main+B9↑j
.text:0000000000001900                 mov     [rsp+78h+var_6A], 1
.text:0000000000001905                 jmp     loc_1800
.text:0000000000001905 ; ---------------------------------------------------------------------------
.text:000000000000190A                 align 10h
.text:0000000000001910
.text:0000000000001910 loc_1910:                               ; CODE XREF: main+AE↑j
.text:0000000000001910                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001917                 mov     cs:convert_entire_line, r14b
.text:000000000000191E                 call    parse_tab_stops
.text:0000000000001923                 jmp     loc_1800
.text:0000000000001928 ; ---------------------------------------------------------------------------
.text:0000000000001928
.text:0000000000001928 loc_1928:                               ; CODE XREF: main+CB↑j
.text:0000000000001928                 sub     eax, 30h ; '0'
.text:000000000000192B                 mov     r13d, 1
.text:0000000000001931                 movsxd  r15, eax
.text:0000000000001934                 jmp     loc_1800
.text:0000000000001939 ; ---------------------------------------------------------------------------
.text:0000000000001939
.text:0000000000001939 loc_1939:                               ; CODE XREF: main+9A↑j
.text:0000000000001939                 cmp     [rsp+78h+var_6A], 0
.text:000000000000193E                 jz      short loc_1947
.text:0000000000001940                 mov     cs:convert_entire_line, 0
.text:0000000000001947
.text:0000000000001947 loc_1947:                               ; CODE XREF: main+1BE↑j
.text:0000000000001947                 test    r13b, r13b
.text:000000000000194A                 jnz     loc_1C1A
.text:0000000000001950
.text:0000000000001950 loc_1950:                               ; CODE XREF: main+4A2↓j
.text:0000000000001950                 call    finalize_tab_stops
.text:0000000000001955                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:000000000000195C                 xor     edi, edi
.text:000000000000195E                 cmp     eax, ebp
.text:0000000000001960                 jge     short loc_1966
.text:0000000000001962                 lea     rdi, [rbx+rax*8]
.text:0000000000001966
.text:0000000000001966 loc_1966:                               ; CODE XREF: main+1E0↑j
.text:0000000000001966                 call    set_file_list
.text:000000000000196B                 xor     edi, edi        ; stream
.text:000000000000196D                 call    next_file
.text:0000000000001972                 test    rax, rax
.text:0000000000001975                 mov     r15, rax
.text:0000000000001978                 jz      loc_1BB3
.text:000000000000197E                 mov     rdi, cs:max_column_width
.text:0000000000001985                 call    xmalloc
.text:000000000000198A                 mov     [rsp+78h+ptr], rax
.text:000000000000198E                 lea     rax, [rsp+78h+var_49]
.text:0000000000001993                 mov     [rsp+78h+var_68], rax
.text:0000000000001998                 lea     rax, [rsp+78h+var_48]
.text:000000000000199D                 mov     [rsp+78h+var_60], rax
.text:00000000000019A2
.text:00000000000019A2 loc_19A2:                               ; CODE XREF: main+2E4↓j
.text:00000000000019A2                 mov     [rsp+78h+var_48], 0
.text:00000000000019AB                 xor     ebp, ebp
.text:00000000000019AD                 mov     r13d, 1
.text:00000000000019B3                 mov     [rsp+78h+var_6A], 0
.text:00000000000019B8                 xor     r12d, r12d
.text:00000000000019BB                 mov     ebx, 1
.text:00000000000019C0                 jmp     loc_1A6A
.text:00000000000019C0 ; ---------------------------------------------------------------------------
.text:00000000000019C5                 align 8
.text:00000000000019C8
.text:00000000000019C8 loc_19C8:                               ; CODE XREF: main+320↓j
.text:00000000000019C8                 cmp     r14d, 8
.text:00000000000019CC                 jz      loc_1B15
.text:00000000000019D2                 add     r12, 1
.text:00000000000019D6                 jz      loc_1CB1
.text:00000000000019DC
.text:00000000000019DC loc_19DC:                               ; CODE XREF: main+390↓j
.text:00000000000019DC                                         ; main+3B5↓j ...
.text:00000000000019DC                 test    rbp, rbp
.text:00000000000019DF                 jz      short loc_1A26
.text:00000000000019E1                 cmp     rbp, 1
.text:00000000000019E5                 jbe     short loc_19F5
.text:00000000000019E7                 cmp     [rsp+78h+var_6A], 0
.text:00000000000019EC                 jz      short loc_19F5
.text:00000000000019EE                 mov     rax, [rsp+78h+ptr]
.text:00000000000019F2                 mov     byte ptr [rax], 9
.text:00000000000019F5
.text:00000000000019F5 loc_19F5:                               ; CODE XREF: main+265↑j
.text:00000000000019F5                                         ; main+26C↑j
.text:00000000000019F5                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000019FC                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:0000000000001A00                 mov     rdx, rbp        ; n
.text:0000000000001A03                 mov     esi, 1          ; size
.text:0000000000001A08                 mov     [rsp+78h+var_6A], r10b
.text:0000000000001A0D                 call    _fwrite_unlocked
.text:0000000000001A12                 cmp     rbp, rax
.text:0000000000001A15                 movzx   r10d, [rsp+78h+var_6A]
.text:0000000000001A1B                 jnz     loc_1C85
.text:0000000000001A21                 mov     [rsp+78h+var_6A], 0
.text:0000000000001A26
.text:0000000000001A26 loc_1A26:                               ; CODE XREF: main+25F↑j
.text:0000000000001A26                 movzx   eax, cs:convert_entire_line
.text:0000000000001A2D                 mov     r13d, r10d
.text:0000000000001A30                 xor     ebp, ebp
.text:0000000000001A32                 or      eax, r10d
.text:0000000000001A35                 and     ebx, eax
.text:0000000000001A37
.text:0000000000001A37 loc_1A37:                               ; CODE XREF: main+306↓j
.text:0000000000001A37                 test    r14d, r14d
.text:0000000000001A3A                 js      loc_1BAA
.text:0000000000001A40                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000001A47                 mov     rax, [rdi+28h]
.text:0000000000001A4B                 cmp     rax, [rdi+30h]
.text:0000000000001A4F                 jnb     loc_1B66
.text:0000000000001A55                 lea     rdx, [rax+1]
.text:0000000000001A59                 mov     [rdi+28h], rdx
.text:0000000000001A5D                 mov     [rax], r14b
.text:0000000000001A60
.text:0000000000001A60 loc_1A60:                               ; CODE XREF: main+3F1↓j
.text:0000000000001A60                                         ; main+495↓j
.text:0000000000001A60                 cmp     r14d, 0Ah
.text:0000000000001A64                 jz      loc_19A2
.text:0000000000001A6A
.text:0000000000001A6A loc_1A6A:                               ; CODE XREF: main+240↑j
.text:0000000000001A6A                                         ; main+3DB↓j
.text:0000000000001A6A                 mov     rax, [r15+8]
.text:0000000000001A6E                 cmp     rax, [r15+10h]
.text:0000000000001A72                 jnb     loc_1B3A
.text:0000000000001A78                 lea     rdx, [rax+1]
.text:0000000000001A7C                 mov     [r15+8], rdx
.text:0000000000001A80                 movzx   r14d, byte ptr [rax]
.text:0000000000001A84
.text:0000000000001A84 loc_1A84:                               ; CODE XREF: main+3C7↓j
.text:0000000000001A84                                         ; main+3E1↓j
.text:0000000000001A84                 test    bl, bl
.text:0000000000001A86                 jz      short loc_1A37
.text:0000000000001A88                 call    ___ctype_b_loc
.text:0000000000001A8D                 mov     rcx, [rax]
.text:0000000000001A90                 movsxd  rdx, r14d
.text:0000000000001A93                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000001A97                 mov     r10d, eax
.text:0000000000001A9A                 and     r10d, 1
.text:0000000000001A9E                 test    al, 1
.text:0000000000001AA0                 jz      loc_19C8
.text:0000000000001AA6                 mov     rdx, [rsp+78h+var_68]
.text:0000000000001AAB                 mov     rsi, [rsp+78h+var_60]
.text:0000000000001AB0                 mov     rdi, r12
.text:0000000000001AB3                 mov     [rsp+78h+var_69], r10b
.text:0000000000001AB8                 call    get_next_tab_column
.text:0000000000001ABD                 cmp     [rsp+78h+var_49], 0
.text:0000000000001AC2                 movzx   r10d, [rsp+78h+var_69]
.text:0000000000001AC8                 jnz     loc_1BA3
.text:0000000000001ACE                 cmp     r12, rax
.text:0000000000001AD1                 ja      loc_1C61
.text:0000000000001AD7                 cmp     r14d, 9
.text:0000000000001ADB                 jz      loc_1BE1
.text:0000000000001AE1                 add     r12, 1
.text:0000000000001AE5                 xor     r13d, 1
.text:0000000000001AE9                 cmp     rax, r12
.text:0000000000001AEC                 setnz   dl
.text:0000000000001AEF                 or      r13b, dl
.text:0000000000001AF2                 jnz     loc_1BF6
.text:0000000000001AF8                 mov     rax, [rsp+78h+ptr]
.text:0000000000001AFC                 mov     byte ptr [rax], 9
.text:0000000000001AFF                 mov     rax, r12
.text:0000000000001B02
.text:0000000000001B02 loc_1B02:                               ; CODE XREF: main+464↓j
.text:0000000000001B02                                         ; main+471↓j
.text:0000000000001B02                 movzx   ebp, [rsp+78h+var_6A]
.text:0000000000001B07                 mov     r12, rax
.text:0000000000001B0A                 mov     r14d, 9
.text:0000000000001B10                 jmp     loc_19DC
.text:0000000000001B15 ; ---------------------------------------------------------------------------
.text:0000000000001B15
.text:0000000000001B15 loc_1B15:                               ; CODE XREF: main+24C↑j
.text:0000000000001B15                 xor     eax, eax
.text:0000000000001B17                 test    r12, r12
.text:0000000000001B1A                 setnz   al
.text:0000000000001B1D                 xor     edx, edx
.text:0000000000001B1F                 sub     r12, rax
.text:0000000000001B22                 mov     rax, [rsp+78h+var_48]
.text:0000000000001B27                 test    rax, rax
.text:0000000000001B2A                 setnz   dl
.text:0000000000001B2D                 sub     rax, rdx
.text:0000000000001B30                 mov     [rsp+78h+var_48], rax
.text:0000000000001B35                 jmp     loc_19DC
.text:0000000000001B3A ; ---------------------------------------------------------------------------
.text:0000000000001B3A
.text:0000000000001B3A loc_1B3A:                               ; CODE XREF: main+2F2↑j
.text:0000000000001B3A                 mov     rdi, r15        ; _IO_FILE *
.text:0000000000001B3D                 call    ___uflow
.text:0000000000001B42                 test    eax, eax
.text:0000000000001B44                 mov     r14d, eax
.text:0000000000001B47                 jns     loc_1A84
.text:0000000000001B4D                 mov     rdi, r15        ; stream
.text:0000000000001B50                 call    next_file
.text:0000000000001B55                 test    rax, rax
.text:0000000000001B58                 mov     r15, rax
.text:0000000000001B5B                 jnz     loc_1A6A
.text:0000000000001B61                 jmp     loc_1A84
.text:0000000000001B66 ; ---------------------------------------------------------------------------
.text:0000000000001B66
.text:0000000000001B66 loc_1B66:                               ; CODE XREF: main+2CF↑j
.text:0000000000001B66                 movzx   esi, r14b       ; int
.text:0000000000001B6A                 call    ___overflow
.text:0000000000001B6F                 test    eax, eax
.text:0000000000001B71                 jns     loc_1A60
.text:0000000000001B77                 lea     rsi, msgid      ; "write error"
.text:0000000000001B7E                 mov     edx, 5          ; category
.text:0000000000001B83                 xor     edi, edi        ; domainname
.text:0000000000001B85                 call    _dcgettext
.text:0000000000001B8A                 mov     rbx, rax
.text:0000000000001B8D                 call    ___errno_location
.text:0000000000001B92                 mov     esi, [rax]      ; errnum
.text:0000000000001B94                 mov     rdx, rbx        ; format
.text:0000000000001B97                 mov     edi, 1          ; status
.text:0000000000001B9C                 xor     eax, eax
.text:0000000000001B9E                 call    _error
.text:0000000000001BA3
.text:0000000000001BA3 loc_1BA3:                               ; CODE XREF: main+348↑j
.text:0000000000001BA3                 xor     ebx, ebx
.text:0000000000001BA5                 jmp     loc_19DC
.text:0000000000001BAA ; ---------------------------------------------------------------------------
.text:0000000000001BAA
.text:0000000000001BAA loc_1BAA:                               ; CODE XREF: main+2BA↑j
.text:0000000000001BAA                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:0000000000001BAE                 call    _free
.text:0000000000001BB3
.text:0000000000001BB3 loc_1BB3:                               ; CODE XREF: main+1F8↑j
.text:0000000000001BB3                 call    cleanup_file_list_stdin
.text:0000000000001BB8                 mov     rcx, [rsp+78h+var_40]
.text:0000000000001BBD                 xor     rcx, fs:28h
.text:0000000000001BC6                 mov     eax, cs:exit_status
.text:0000000000001BCC                 jnz     loc_1C5C
.text:0000000000001BD2                 add     rsp, 48h
.text:0000000000001BD6                 pop     rbx
.text:0000000000001BD7                 pop     rbp
.text:0000000000001BD8                 pop     r12
.text:0000000000001BDA                 pop     r13
.text:0000000000001BDC                 pop     r14
.text:0000000000001BDE                 pop     r15
.text:0000000000001BE0                 retn
.text:0000000000001BE1 ; ---------------------------------------------------------------------------
.text:0000000000001BE1
.text:0000000000001BE1 loc_1BE1:                               ; CODE XREF: main+35B↑j
.text:0000000000001BE1                 test    rbp, rbp
.text:0000000000001BE4                 jz      loc_1B02
.text:0000000000001BEA                 mov     rcx, [rsp+78h+ptr]
.text:0000000000001BEE                 mov     byte ptr [rcx], 9
.text:0000000000001BF1                 jmp     loc_1B02
.text:0000000000001BF6 ; ---------------------------------------------------------------------------
.text:0000000000001BF6
.text:0000000000001BF6 loc_1BF6:                               ; CODE XREF: main+372↑j
.text:0000000000001BF6                 cmp     rax, r12
.text:0000000000001BF9                 movzx   eax, [rsp+78h+var_6A]
.text:0000000000001BFE                 mov     ebx, r13d
.text:0000000000001C01                 cmovz   eax, r13d
.text:0000000000001C05                 mov     [rsp+78h+var_6A], al
.text:0000000000001C09                 mov     rax, [rsp+78h+ptr]
.text:0000000000001C0D                 mov     [rax+rbp], r14b
.text:0000000000001C11                 add     rbp, 1
.text:0000000000001C15                 jmp     loc_1A60
.text:0000000000001C1A ; ---------------------------------------------------------------------------
.text:0000000000001C1A
.text:0000000000001C1A loc_1C1A:                               ; CODE XREF: main+1CA↑j
.text:0000000000001C1A                 mov     rdi, r15
.text:0000000000001C1D                 call    add_tab_stop
.text:0000000000001C22                 jmp     loc_1950
.text:0000000000001C27 ; ---------------------------------------------------------------------------
.text:0000000000001C27
.text:0000000000001C27 loc_1C27:                               ; CODE XREF: main+105↑j
.text:0000000000001C27                 xor     edi, edi        ; status
.text:0000000000001C29                 call    usage
.text:0000000000001C2E ; ---------------------------------------------------------------------------
.text:0000000000001C2E
.text:0000000000001C2E loc_1C2E:                               ; CODE XREF: main+A3↑j
.text:0000000000001C2E                 mov     edi, 1          ; status
.text:0000000000001C33                 call    usage
.text:0000000000001C38 ; ---------------------------------------------------------------------------
.text:0000000000001C38
.text:0000000000001C38 loc_1C38:                               ; CODE XREF: main+DE↑j
.text:0000000000001C38                                         ; main+F3↑j
.text:0000000000001C38                 lea     rsi, aTabStopValueIs ; "tab stop value is too large"
.text:0000000000001C3F                 mov     edx, 5          ; category
.text:0000000000001C44                 xor     edi, edi        ; domainname
.text:0000000000001C46                 call    _dcgettext
.text:0000000000001C4B                 xor     esi, esi        ; errnum
.text:0000000000001C4D                 mov     rdx, rax        ; format
.text:0000000000001C50                 mov     edi, 1          ; status
.text:0000000000001C55                 xor     eax, eax
.text:0000000000001C57                 call    _error
.text:0000000000001C5C
.text:0000000000001C5C loc_1C5C:                               ; CODE XREF: main+44C↑j
.text:0000000000001C5C                 call    ___stack_chk_fail
.text:0000000000001C61 ; ---------------------------------------------------------------------------
.text:0000000000001C61
.text:0000000000001C61 loc_1C61:                               ; CODE XREF: main+351↑j
.text:0000000000001C61                 lea     rsi, aInputLineIsToo ; "input line is too long"
.text:0000000000001C68                 mov     edx, 5          ; category
.text:0000000000001C6D                 xor     edi, edi        ; domainname
.text:0000000000001C6F                 call    _dcgettext
.text:0000000000001C74                 xor     esi, esi        ; errnum
.text:0000000000001C76                 mov     rdx, rax        ; format
.text:0000000000001C79                 mov     edi, 1          ; status
.text:0000000000001C7E                 xor     eax, eax
.text:0000000000001C80                 call    _error
.text:0000000000001C85
.text:0000000000001C85 loc_1C85:                               ; CODE XREF: main+29B↑j
.text:0000000000001C85                 lea     rsi, msgid      ; "write error"
.text:0000000000001C8C                 mov     edx, 5          ; category
.text:0000000000001C91                 xor     edi, edi        ; domainname
.text:0000000000001C93                 call    _dcgettext
.text:0000000000001C98                 mov     rbx, rax
.text:0000000000001C9B                 call    ___errno_location
.text:0000000000001CA0                 mov     esi, [rax]      ; errnum
.text:0000000000001CA2                 mov     rdx, rbx        ; format
.text:0000000000001CA5                 mov     edi, 1          ; status
.text:0000000000001CAA                 xor     eax, eax
.text:0000000000001CAC                 call    _error
.text:0000000000001CB1
.text:0000000000001CB1 loc_1CB1:                               ; CODE XREF: main+256↑j
.text:0000000000001CB1                 lea     rsi, aInputLineIsToo ; "input line is too long"
.text:0000000000001CB8                 mov     edx, 5          ; category
.text:0000000000001CBD                 xor     edi, edi        ; domainname
.text:0000000000001CBF                 call    _dcgettext
.text:0000000000001CC4                 xor     esi, esi        ; errnum
.text:0000000000001CC6                 mov     rdx, rax        ; format
.text:0000000000001CC9                 mov     edi, 1          ; status
.text:0000000000001CCE                 xor     eax, eax
.text:0000000000001CD0                 call    _error
.text:0000000000001CD0 ; } // starts at 1780
.text:0000000000001CD5                 db      2Eh
.text:0000000000001CD5                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001CDF                 nop
.text:0000000000001CDF main            endp ; sp-analysis failed
.text:0000000000001CDF
.text:0000000000001CE0
.text:0000000000001CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001CE0
.text:0000000000001CE0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001CE0
.text:0000000000001CE0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001CE0                 public start
.text:0000000000001CE0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001CE0 ; __unwind {
.text:0000000000001CE0                 xor     ebp, ebp
.text:0000000000001CE2                 mov     r9, rdx         ; rtld_fini
.text:0000000000001CE5                 pop     rsi             ; argc
.text:0000000000001CE6                 mov     rdx, rsp        ; ubp_av
.text:0000000000001CE9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001CED                 push    rax
.text:0000000000001CEE                 push    rsp             ; stack_end
.text:0000000000001CEF                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001CF6                 lea     rcx, __libc_csu_init ; init
.text:0000000000001CFD                 lea     rdi, main       ; main
.text:0000000000001D04                 call    cs:__libc_start_main_ptr
.text:0000000000001D0A                 hlt
.text:0000000000001D0A ; } // starts at 1CE0
.text:0000000000001D0A start           endp
.text:0000000000001D0A
.text:0000000000001D0A ; ---------------------------------------------------------------------------
.text:0000000000001D0B                 align 10h
.text:0000000000001D10
.text:0000000000001D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D10
.text:0000000000001D10 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001D10
.text:0000000000001D10 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1DC3↓p
.text:0000000000001D10                 lea     rdi, __bss_start
.text:0000000000001D17                 push    rbp
.text:0000000000001D18                 lea     rax, __bss_start
.text:0000000000001D1F                 cmp     rax, rdi
.text:0000000000001D22                 mov     rbp, rsp
.text:0000000000001D25                 jz      short loc_1D40
.text:0000000000001D27                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001D2E                 test    rax, rax
.text:0000000000001D31                 jz      short loc_1D40
.text:0000000000001D33                 pop     rbp
.text:0000000000001D34                 jmp     rax
.text:0000000000001D34 ; ---------------------------------------------------------------------------
.text:0000000000001D36                 align 20h
.text:0000000000001D40
.text:0000000000001D40 loc_1D40:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001D40                                         ; deregister_tm_clones+21↑j
.text:0000000000001D40                 pop     rbp
.text:0000000000001D41                 retn
.text:0000000000001D41 deregister_tm_clones endp
.text:0000000000001D41
.text:0000000000001D41 ; ---------------------------------------------------------------------------
.text:0000000000001D42                 align 10h
.text:0000000000001D50
.text:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D50
.text:0000000000001D50 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001D50
.text:0000000000001D50 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001D50                 lea     rdi, __bss_start
.text:0000000000001D57                 lea     rsi, __bss_start
.text:0000000000001D5E                 push    rbp
.text:0000000000001D5F                 sub     rsi, rdi
.text:0000000000001D62                 mov     rbp, rsp
.text:0000000000001D65                 sar     rsi, 3
.text:0000000000001D69                 mov     rax, rsi
.text:0000000000001D6C                 shr     rax, 3Fh
.text:0000000000001D70                 add     rsi, rax
.text:0000000000001D73                 sar     rsi, 1
.text:0000000000001D76                 jz      short loc_1D90
.text:0000000000001D78                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001D7F                 test    rax, rax
.text:0000000000001D82                 jz      short loc_1D90
.text:0000000000001D84                 pop     rbp
.text:0000000000001D85                 jmp     rax
.text:0000000000001D85 ; ---------------------------------------------------------------------------
.text:0000000000001D87                 align 10h
.text:0000000000001D90
.text:0000000000001D90 loc_1D90:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001D90                                         ; register_tm_clones+32↑j
.text:0000000000001D90                 pop     rbp
.text:0000000000001D91                 retn
.text:0000000000001D91 register_tm_clones endp
.text:0000000000001D91
.text:0000000000001D91 ; ---------------------------------------------------------------------------
.text:0000000000001D92                 align 20h
.text:0000000000001DA0
.text:0000000000001DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DA0
.text:0000000000001DA0 ; Attributes: info_from_lumina
.text:0000000000001DA0
.text:0000000000001DA0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001DA0                 cmp     cs:completed_7697, 0
.text:0000000000001DA7                 jnz     short locret_1DD8
.text:0000000000001DA9                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001DB1                 push    rbp
.text:0000000000001DB2                 mov     rbp, rsp
.text:0000000000001DB5                 jz      short loc_1DC3
.text:0000000000001DB7                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001DBE                 call    __cxa_finalize
.text:0000000000001DC3
.text:0000000000001DC3 loc_1DC3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001DC3                 call    deregister_tm_clones
.text:0000000000001DC8                 mov     cs:completed_7697, 1
.text:0000000000001DCF                 pop     rbp
.text:0000000000001DD0                 retn
.text:0000000000001DD0 ; ---------------------------------------------------------------------------
.text:0000000000001DD1                 align 8
.text:0000000000001DD8
.text:0000000000001DD8 locret_1DD8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001DD8                 rep retn
.text:0000000000001DD8 __do_global_dtors_aux endp
.text:0000000000001DD8
.text:0000000000001DD8 ; ---------------------------------------------------------------------------
.text:0000000000001DDA                 align 20h
.text:0000000000001DE0
.text:0000000000001DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DE0
.text:0000000000001DE0 ; Attributes: bp-based frame
.text:0000000000001DE0
.text:0000000000001DE0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001DE0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001DE0                 push    rbp
.text:0000000000001DE1                 mov     rbp, rsp
.text:0000000000001DE4                 pop     rbp
.text:0000000000001DE5                 jmp     register_tm_clones
.text:0000000000001DE5 frame_dummy     endp
.text:0000000000001DE5
.text:0000000000001DE5 ; ---------------------------------------------------------------------------
.text:0000000000001DEA                 align 10h
.text:0000000000001DF0
.text:0000000000001DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DF0
.text:0000000000001DF0 ; Attributes: noreturn
.text:0000000000001DF0
.text:0000000000001DF0 ; void __fastcall __noreturn usage(int status)
.text:0000000000001DF0                 public usage
.text:0000000000001DF0 usage           proc near               ; CODE XREF: main+4A9↑p
.text:0000000000001DF0                                         ; main+4B3↑p
.text:0000000000001DF0
.text:0000000000001DF0 var_A8          = qword ptr -0A8h
.text:0000000000001DF0 var_A0          = qword ptr -0A0h
.text:0000000000001DF0 var_98          = qword ptr -98h
.text:0000000000001DF0 var_90          = qword ptr -90h
.text:0000000000001DF0 var_88          = qword ptr -88h
.text:0000000000001DF0 var_80          = qword ptr -80h
.text:0000000000001DF0 var_78          = qword ptr -78h
.text:0000000000001DF0 var_70          = qword ptr -70h
.text:0000000000001DF0 var_68          = qword ptr -68h
.text:0000000000001DF0 var_60          = qword ptr -60h
.text:0000000000001DF0 var_58          = qword ptr -58h
.text:0000000000001DF0 var_50          = qword ptr -50h
.text:0000000000001DF0 var_48          = qword ptr -48h
.text:0000000000001DF0 var_40          = qword ptr -40h
.text:0000000000001DF0 var_30          = qword ptr -30h
.text:0000000000001DF0
.text:0000000000001DF0 ; __unwind {
.text:0000000000001DF0                 push    r13
.text:0000000000001DF2                 push    r12
.text:0000000000001DF4                 mov     edx, 5          ; category
.text:0000000000001DF9                 push    rbp
.text:0000000000001DFA                 push    rbx
.text:0000000000001DFB                 mov     ebp, edi
.text:0000000000001DFD                 sub     rsp, 88h
.text:0000000000001E04                 mov     rbx, cs:program_name
.text:0000000000001E0B                 mov     rax, fs:28h
.text:0000000000001E14                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001E19                 xor     eax, eax
.text:0000000000001E1B                 test    edi, edi
.text:0000000000001E1D                 jz      short loc_1E4D
.text:0000000000001E1F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001E26                 xor     edi, edi        ; domainname
.text:0000000000001E28                 call    _dcgettext
.text:0000000000001E2D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001E34                 mov     rdx, rax
.text:0000000000001E37                 mov     rcx, rbx
.text:0000000000001E3A                 mov     esi, 1
.text:0000000000001E3F                 xor     eax, eax
.text:0000000000001E41                 call    ___fprintf_chk
.text:0000000000001E46
.text:0000000000001E46 loc_1E46:                               ; CODE XREF: usage+2F6↓j
.text:0000000000001E46                 mov     edi, ebp        ; status
.text:0000000000001E48                 call    _exit
.text:0000000000001E4D ; ---------------------------------------------------------------------------
.text:0000000000001E4D
.text:0000000000001E4D loc_1E4D:                               ; CODE XREF: usage+2D↑j
.text:0000000000001E4D                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:0000000000001E54                 xor     edi, edi        ; domainname
.text:0000000000001E56                 call    _dcgettext
.text:0000000000001E5B                 mov     rdx, rbx
.text:0000000000001E5E                 mov     rsi, rax
.text:0000000000001E61                 mov     edi, 1
.text:0000000000001E66                 xor     eax, eax
.text:0000000000001E68                 call    ___printf_chk
.text:0000000000001E6D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001E74                 lea     rsi, aConvertBlanksI ; "Convert blanks in each FILE to tabs, wr"...
.text:0000000000001E7B                 mov     edx, 5          ; category
.text:0000000000001E80                 xor     edi, edi        ; domainname
.text:0000000000001E82                 call    _dcgettext
.text:0000000000001E87                 mov     rsi, rbx        ; stream
.text:0000000000001E8A                 mov     rdi, rax        ; s
.text:0000000000001E8D                 call    _fputs_unlocked
.text:0000000000001E92                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001E99                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:0000000000001EA0                 mov     edx, 5          ; category
.text:0000000000001EA5                 xor     edi, edi        ; domainname
.text:0000000000001EA7                 call    _dcgettext
.text:0000000000001EAC                 mov     rsi, rbx        ; stream
.text:0000000000001EAF                 mov     rdi, rax        ; s
.text:0000000000001EB2                 call    _fputs_unlocked
.text:0000000000001EB7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001EBE                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000001EC5                 mov     edx, 5          ; category
.text:0000000000001ECA                 xor     edi, edi        ; domainname
.text:0000000000001ECC                 call    _dcgettext
.text:0000000000001ED1                 mov     rsi, rbx        ; stream
.text:0000000000001ED4                 mov     rdi, rax        ; s
.text:0000000000001ED7                 call    _fputs_unlocked
.text:0000000000001EDC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001EE3                 lea     rsi, aAAllConvertAll ; "  -a, --all        convert all blanks, "...
.text:0000000000001EEA                 mov     edx, 5          ; category
.text:0000000000001EEF                 xor     edi, edi        ; domainname
.text:0000000000001EF1                 call    _dcgettext
.text:0000000000001EF6                 mov     rsi, rbx        ; stream
.text:0000000000001EF9                 mov     rdi, rax        ; s
.text:0000000000001EFC                 call    _fputs_unlocked
.text:0000000000001F01                 call    emit_tab_list_info
.text:0000000000001F06                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001F0D                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000001F14                 mov     edx, 5          ; category
.text:0000000000001F19                 xor     edi, edi        ; domainname
.text:0000000000001F1B                 call    _dcgettext
.text:0000000000001F20                 mov     rsi, rbx        ; stream
.text:0000000000001F23                 mov     rdi, rax        ; s
.text:0000000000001F26                 call    _fputs_unlocked
.text:0000000000001F2B                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001F32                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001F39                 mov     edx, 5          ; category
.text:0000000000001F3E                 xor     edi, edi        ; domainname
.text:0000000000001F40                 call    _dcgettext
.text:0000000000001F45                 mov     rsi, rbx        ; stream
.text:0000000000001F48                 mov     rdi, rax        ; s
.text:0000000000001F4B                 lea     rbx, aUnexpand  ; "unexpand"
.text:0000000000001F52                 call    _fputs_unlocked
.text:0000000000001F57                 lea     rax, asc_560D   ; "["
.text:0000000000001F5E                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000001F65                 mov     [rsp+0A8h+var_48], 0
.text:0000000000001F6E                 mov     [rsp+0A8h+var_40], 0
.text:0000000000001F77                 mov     rdx, rsp
.text:0000000000001F7A                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000001F7E                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001F85                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000001F8A                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000001F91                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000001F96                 lea     rax, domainname ; "coreutils"
.text:0000000000001F9D                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000001FA2                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000001FA9                 mov     [rsp+0A8h+var_98], rax
.text:0000000000001FAE                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001FB5                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000001FBA                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001FBF                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000001FC6                 mov     [rsp+0A8h+var_88], rax
.text:0000000000001FCB                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000001FD2                 mov     [rsp+0A8h+var_80], rax
.text:0000000000001FD7                 mov     [rsp+0A8h+var_70], rax
.text:0000000000001FDC                 mov     [rsp+0A8h+var_60], rax
.text:0000000000001FE1                 mov     [rsp+0A8h+var_50], rax
.text:0000000000001FE6                 db      2Eh
.text:0000000000001FE6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001FF0
.text:0000000000001FF0 loc_1FF0:                               ; CODE XREF: usage+21D↓j
.text:0000000000001FF0                 add     rdx, 10h
.text:0000000000001FF4                 mov     rdi, [rdx]
.text:0000000000001FF7                 test    rdi, rdi
.text:0000000000001FFA                 jz      short loc_200F
.text:0000000000001FFC                 mov     ecx, 9
.text:0000000000002001                 mov     rsi, rbx
.text:0000000000002004                 repe cmpsb
.text:0000000000002006                 setnbe  al
.text:0000000000002009                 sbb     al, 0
.text:000000000000200B                 test    al, al
.text:000000000000200D                 jnz     short loc_1FF0
.text:000000000000200F
.text:000000000000200F loc_200F:                               ; CODE XREF: usage+20A↑j
.text:000000000000200F                 mov     r12, [rdx+8]
.text:0000000000002013                 xor     edi, edi        ; domainname
.text:0000000000002015                 mov     edx, 5          ; category
.text:000000000000201A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002021                 test    r12, r12
.text:0000000000002024                 jz      loc_20EB
.text:000000000000202A                 call    _dcgettext
.text:000000000000202F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002036                 lea     rdx, unk_5683
.text:000000000000203D                 mov     rsi, rax
.text:0000000000002040                 mov     edi, 1
.text:0000000000002045                 xor     eax, eax
.text:0000000000002047                 call    ___printf_chk
.text:000000000000204C                 xor     esi, esi        ; locale
.text:000000000000204E                 mov     edi, 5          ; category
.text:0000000000002053                 call    _setlocale
.text:0000000000002058                 test    rax, rax
.text:000000000000205B                 jz      short loc_2079
.text:000000000000205D                 lea     rsi, s2         ; "en_"
.text:0000000000002064                 mov     edx, 3          ; n
.text:0000000000002069                 mov     rdi, rax        ; s1
.text:000000000000206C                 call    _strncmp
.text:0000000000002071                 test    eax, eax
.text:0000000000002073                 jnz     loc_2180
.text:0000000000002079
.text:0000000000002079 loc_2079:                               ; CODE XREF: usage+26B↑j
.text:0000000000002079                                         ; usage+3B5↓j
.text:0000000000002079                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002080                 xor     edi, edi        ; domainname
.text:0000000000002082                 mov     edx, 5          ; category
.text:0000000000002087                 call    _dcgettext
.text:000000000000208C                 lea     rcx, aUnexpand  ; "unexpand"
.text:0000000000002093                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000209A                 mov     rsi, rax
.text:000000000000209D                 mov     edi, 1
.text:00000000000020A2                 xor     eax, eax
.text:00000000000020A4                 call    ___printf_chk
.text:00000000000020A9                 cmp     r12, rbx
.text:00000000000020AC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000020B3                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000020BA                 cmovz   rbx, rcx
.text:00000000000020BE
.text:00000000000020BE loc_20BE:                               ; CODE XREF: usage+384↓j
.text:00000000000020BE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000020C5                 xor     edi, edi        ; domainname
.text:00000000000020C7                 mov     edx, 5          ; category
.text:00000000000020CC                 call    _dcgettext
.text:00000000000020D1                 mov     rcx, rbx
.text:00000000000020D4                 mov     rsi, rax
.text:00000000000020D7                 mov     rdx, r12
.text:00000000000020DA                 mov     edi, 1
.text:00000000000020DF                 xor     eax, eax
.text:00000000000020E1                 call    ___printf_chk
.text:00000000000020E6                 jmp     loc_1E46
.text:00000000000020EB ; ---------------------------------------------------------------------------
.text:00000000000020EB
.text:00000000000020EB loc_20EB:                               ; CODE XREF: usage+234↑j
.text:00000000000020EB                 call    _dcgettext
.text:00000000000020F0                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000020F7                 lea     rdx, unk_5683
.text:00000000000020FE                 mov     rsi, rax
.text:0000000000002101                 mov     edi, 1
.text:0000000000002106                 xor     eax, eax
.text:0000000000002108                 call    ___printf_chk
.text:000000000000210D                 xor     esi, esi        ; locale
.text:000000000000210F                 mov     edi, 5          ; category
.text:0000000000002114                 call    _setlocale
.text:0000000000002119                 test    rax, rax
.text:000000000000211C                 jz      short loc_2136
.text:000000000000211E                 lea     rsi, s2         ; "en_"
.text:0000000000002125                 mov     edx, 3          ; n
.text:000000000000212A                 mov     rdi, rax        ; s1
.text:000000000000212D                 call    _strncmp
.text:0000000000002132                 test    eax, eax
.text:0000000000002134                 jnz     short loc_2179
.text:0000000000002136
.text:0000000000002136 loc_2136:                               ; CODE XREF: usage+32C↑j
.text:0000000000002136                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000213D                 mov     edx, 5          ; category
.text:0000000000002142                 xor     edi, edi        ; domainname
.text:0000000000002144                 lea     r12, aUnexpand  ; "unexpand"
.text:000000000000214B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002152                 call    _dcgettext
.text:0000000000002157                 lea     rcx, aUnexpand  ; "unexpand"
.text:000000000000215E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002165                 mov     rsi, rax
.text:0000000000002168                 mov     edi, 1
.text:000000000000216D                 xor     eax, eax
.text:000000000000216F                 call    ___printf_chk
.text:0000000000002174                 jmp     loc_20BE
.text:0000000000002179 ; ---------------------------------------------------------------------------
.text:0000000000002179
.text:0000000000002179 loc_2179:                               ; CODE XREF: usage+344↑j
.text:0000000000002179                 lea     r12, aUnexpand  ; "unexpand"
.text:0000000000002180
.text:0000000000002180 loc_2180:                               ; CODE XREF: usage+283↑j
.text:0000000000002180                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000002187                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000218E                 xor     edi, edi        ; domainname
.text:0000000000002190                 mov     edx, 5          ; category
.text:0000000000002195                 call    _dcgettext
.text:000000000000219A                 mov     rsi, r13        ; stream
.text:000000000000219D                 mov     rdi, rax        ; s
.text:00000000000021A0                 call    _fputs_unlocked
.text:00000000000021A5                 jmp     loc_2079
.text:00000000000021A5 ; } // starts at 1DF0
.text:00000000000021A5 usage           endp
.text:00000000000021A5
.text:00000000000021A5 ; ---------------------------------------------------------------------------
.text:00000000000021AA                 align 10h
.text:00000000000021B0
.text:00000000000021B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000021B0
.text:00000000000021B0
.text:00000000000021B0 set_extend_size proc near               ; CODE XREF: parse_tab_stops:loc_24E8↓p
.text:00000000000021B0                                         ; parse_tab_stops:loc_2655↓p
.text:00000000000021B0 ; __unwind {
.text:00000000000021B0                 cmp     cs:extend_size, 0
.text:00000000000021B8                 push    rbx
.text:00000000000021B9                 mov     eax, 1
.text:00000000000021BE                 mov     rbx, rdi
.text:00000000000021C1                 jz      short loc_21E6
.text:00000000000021C3                 lea     rsi, aSpecifierOnlyA ; "'/' specifier only allowed with the las"...
.text:00000000000021CA                 mov     edx, 5          ; category
.text:00000000000021CF                 xor     edi, edi        ; domainname
.text:00000000000021D1                 call    _dcgettext
.text:00000000000021D6                 xor     esi, esi        ; errnum
.text:00000000000021D8                 mov     rdx, rax        ; format
.text:00000000000021DB                 xor     edi, edi        ; status
.text:00000000000021DD                 xor     eax, eax
.text:00000000000021DF                 call    _error
.text:00000000000021E4                 xor     eax, eax
.text:00000000000021E6
.text:00000000000021E6 loc_21E6:                               ; CODE XREF: set_extend_size+11↑j
.text:00000000000021E6                 mov     cs:extend_size, rbx
.text:00000000000021ED                 pop     rbx
.text:00000000000021EE                 retn
.text:00000000000021EE ; } // starts at 21B0
.text:00000000000021EE set_extend_size endp
.text:00000000000021EE
.text:00000000000021EE ; ---------------------------------------------------------------------------
.text:00000000000021EF                 align 10h
.text:00000000000021F0
.text:00000000000021F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000021F0
.text:00000000000021F0
.text:00000000000021F0 set_increment_size proc near            ; CODE XREF: parse_tab_stops+C2↓p
.text:00000000000021F0                                         ; parse_tab_stops+10D↓p
.text:00000000000021F0 ; __unwind {
.text:00000000000021F0                 cmp     cs:increment_size, 0
.text:00000000000021F8                 push    rbx
.text:00000000000021F9                 mov     eax, 1
.text:00000000000021FE                 mov     rbx, rdi
.text:0000000000002201                 jz      short loc_2226
.text:0000000000002203                 lea     rsi, aSpecifierOnlyA_0 ; "'+' specifier only allowed with the las"...
.text:000000000000220A                 mov     edx, 5          ; category
.text:000000000000220F                 xor     edi, edi        ; domainname
.text:0000000000002211                 call    _dcgettext
.text:0000000000002216                 xor     esi, esi        ; errnum
.text:0000000000002218                 mov     rdx, rax        ; format
.text:000000000000221B                 xor     edi, edi        ; status
.text:000000000000221D                 xor     eax, eax
.text:000000000000221F                 call    _error
.text:0000000000002224                 xor     eax, eax
.text:0000000000002226
.text:0000000000002226 loc_2226:                               ; CODE XREF: set_increment_size+11↑j
.text:0000000000002226                 mov     cs:increment_size, rbx
.text:000000000000222D                 pop     rbx
.text:000000000000222E                 retn
.text:000000000000222E ; } // starts at 21F0
.text:000000000000222E set_increment_size endp
.text:000000000000222E
.text:000000000000222E ; ---------------------------------------------------------------------------
.text:000000000000222F                 align 10h
.text:0000000000002230
.text:0000000000002230 ; =============== S U B R O U T I N E =======================================
.text:0000000000002230
.text:0000000000002230
.text:0000000000002230                 public add_tab_stop
.text:0000000000002230 add_tab_stop    proc near               ; CODE XREF: main+16F↑p
.text:0000000000002230                                         ; main+49D↑p ...
.text:0000000000002230 ; __unwind {
.text:0000000000002230                 push    rbp
.text:0000000000002231                 push    rbx
.text:0000000000002232                 mov     rbx, rdi
.text:0000000000002235                 sub     rsp, 8
.text:0000000000002239                 mov     rax, cs:first_free_tab
.text:0000000000002240                 mov     rdi, cs:tab_list
.text:0000000000002247                 mov     rsi, cs:n_tabs_allocated
.text:000000000000224E                 test    rax, rax
.text:0000000000002251                 jz      short loc_2288
.text:0000000000002253                 lea     rdx, ds:0[rax*8]
.text:000000000000225B                 mov     rcx, [rdi+rdx-8]
.text:0000000000002260                 cmp     rcx, rbx
.text:0000000000002263                 jbe     loc_2332
.text:0000000000002269                 cmp     rax, rsi
.text:000000000000226C                 jz      short loc_22C0
.text:000000000000226E                 add     rax, 1
.text:0000000000002272                 mov     [rdi+rdx], rbx
.text:0000000000002276                 mov     cs:first_free_tab, rax
.text:000000000000227D                 add     rsp, 8
.text:0000000000002281                 pop     rbx
.text:0000000000002282                 pop     rbp
.text:0000000000002283                 retn
.text:0000000000002283 ; ---------------------------------------------------------------------------
.text:0000000000002284                 align 8
.text:0000000000002288
.text:0000000000002288 loc_2288:                               ; CODE XREF: add_tab_stop+21↑j
.text:0000000000002288                 mov     rbp, rbx
.text:000000000000228B
.text:000000000000228B loc_228B:                               ; CODE XREF: add_tab_stop+108↓j
.text:000000000000228B                 cmp     rax, rsi
.text:000000000000228E                 jz      short loc_22C2
.text:0000000000002290
.text:0000000000002290 loc_2290:                               ; CODE XREF: add_tab_stop+D2↓j
.text:0000000000002290                 mov     [rdi+rax*8], rbx
.text:0000000000002294                 cmp     cs:max_column_width, rbp
.text:000000000000229B                 lea     rdx, [rax+1]
.text:000000000000229F                 mov     cs:first_free_tab, rdx
.text:00000000000022A6                 jnb     short loc_22AF
.text:00000000000022A8                 mov     cs:max_column_width, rbp
.text:00000000000022AF
.text:00000000000022AF loc_22AF:                               ; CODE XREF: add_tab_stop+76↑j
.text:00000000000022AF                 add     rsp, 8
.text:00000000000022B3                 pop     rbx
.text:00000000000022B4                 pop     rbp
.text:00000000000022B5                 retn
.text:00000000000022B5 ; ---------------------------------------------------------------------------
.text:00000000000022B6                 align 20h
.text:00000000000022C0
.text:00000000000022C0 loc_22C0:                               ; CODE XREF: add_tab_stop+3C↑j
.text:00000000000022C0                 xor     ebp, ebp
.text:00000000000022C2
.text:00000000000022C2 loc_22C2:                               ; CODE XREF: add_tab_stop+5E↑j
.text:00000000000022C2                 test    rdi, rdi
.text:00000000000022C5                 jz      short loc_2308
.text:00000000000022C7                 mov     rax, 0AAAAAAAAAAAAAA9h
.text:00000000000022D1                 cmp     rsi, rax
.text:00000000000022D4                 ja      short loc_232D
.text:00000000000022D6                 mov     rax, rsi
.text:00000000000022D9                 shr     rax, 1
.text:00000000000022DC                 lea     rsi, [rsi+rax+1]
.text:00000000000022E1
.text:00000000000022E1 loc_22E1:                               ; CODE XREF: add_tab_stop+FB↓j
.text:00000000000022E1                 mov     cs:n_tabs_allocated, rsi
.text:00000000000022E8                 shl     rsi, 3
.text:00000000000022EC                 call    xrealloc
.text:00000000000022F1                 mov     rdi, rax
.text:00000000000022F4                 mov     cs:tab_list, rax
.text:00000000000022FB                 mov     rax, cs:first_free_tab
.text:0000000000002302                 jmp     short loc_2290
.text:0000000000002302 ; ---------------------------------------------------------------------------
.text:0000000000002304                 align 8
.text:0000000000002308
.text:0000000000002308 loc_2308:                               ; CODE XREF: add_tab_stop+95↑j
.text:0000000000002308                 test    rsi, rsi
.text:000000000000230B                 mov     eax, 10h
.text:0000000000002310                 mov     edx, 8
.text:0000000000002315                 cmovz   rsi, rax
.text:0000000000002319                 mov     rax, rdx
.text:000000000000231C                 xor     ecx, ecx
.text:000000000000231E                 mul     rsi
.text:0000000000002321                 jo      short loc_233D
.text:0000000000002323
.text:0000000000002323 loc_2323:                               ; CODE XREF: add_tab_stop+112↓j
.text:0000000000002323                 test    rax, rax
.text:0000000000002326                 js      short loc_232D
.text:0000000000002328                 test    rcx, rcx
.text:000000000000232B                 jz      short loc_22E1
.text:000000000000232D
.text:000000000000232D loc_232D:                               ; CODE XREF: add_tab_stop+A4↑j
.text:000000000000232D                                         ; add_tab_stop+F6↑j
.text:000000000000232D                 call    xalloc_die
.text:0000000000002332 ; ---------------------------------------------------------------------------
.text:0000000000002332
.text:0000000000002332 loc_2332:                               ; CODE XREF: add_tab_stop+33↑j
.text:0000000000002332                 mov     rbp, rbx
.text:0000000000002335                 sub     rbp, rcx
.text:0000000000002338                 jmp     loc_228B
.text:000000000000233D ; ---------------------------------------------------------------------------
.text:000000000000233D
.text:000000000000233D loc_233D:                               ; CODE XREF: add_tab_stop+F1↑j
.text:000000000000233D                 mov     ecx, 1
.text:0000000000002342                 jmp     short loc_2323
.text:0000000000002342 ; } // starts at 2230
.text:0000000000002342 add_tab_stop    endp
.text:0000000000002342
.text:0000000000002342 ; ---------------------------------------------------------------------------
.text:0000000000002344                 align 10h
.text:0000000000002350
.text:0000000000002350 ; =============== S U B R O U T I N E =======================================
.text:0000000000002350
.text:0000000000002350
.text:0000000000002350                 public parse_tab_stops
.text:0000000000002350 parse_tab_stops proc near               ; CODE XREF: main+19E↑p
.text:0000000000002350
.text:0000000000002350 s               = qword ptr -48h
.text:0000000000002350 var_40          = qword ptr -40h
.text:0000000000002350
.text:0000000000002350 ; __unwind {
.text:0000000000002350                 push    r15
.text:0000000000002352                 push    r14
.text:0000000000002354                 push    r13
.text:0000000000002356                 push    r12
.text:0000000000002358                 push    rbp
.text:0000000000002359                 push    rbx
.text:000000000000235A                 sub     rsp, 18h
.text:000000000000235E                 movzx   r15d, byte ptr [rdi]
.text:0000000000002362                 test    r15b, r15b
.text:0000000000002365                 jz      loc_2471
.text:000000000000236B                 mov     rbx, rdi
.text:000000000000236E                 xor     r14d, r14d
.text:0000000000002371                 mov     byte ptr [rsp+48h+var_40], 1
.text:0000000000002376                 mov     [rsp+48h+s], 0
.text:000000000000237E                 xor     r13d, r13d
.text:0000000000002381                 xor     r12d, r12d
.text:0000000000002384                 xor     ebp, ebp
.text:0000000000002386                 jmp     short loc_23EE
.text:0000000000002386 ; ---------------------------------------------------------------------------
.text:0000000000002388                 align 10h
.text:0000000000002390
.text:0000000000002390 loc_2390:                               ; CODE XREF: parse_tab_stops+A2↓j
.text:0000000000002390                 call    ___ctype_b_loc
.text:0000000000002395                 mov     rsi, [rax]
.text:0000000000002398                 movzx   ecx, r15b
.text:000000000000239C                 test    byte ptr [rsi+rcx*2], 1
.text:00000000000023A0                 jnz     short loc_23F4
.text:00000000000023A2                 cmp     r15b, 2Fh ; '/'
.text:00000000000023A6                 jz      loc_24C8
.text:00000000000023AC                 cmp     r15b, 2Bh ; '+'
.text:00000000000023B0                 jz      loc_2508
.text:00000000000023B6                 movsx   edx, r15b
.text:00000000000023BA                 sub     edx, 30h ; '0'
.text:00000000000023BD                 cmp     edx, 9
.text:00000000000023C0                 ja      loc_2670
.text:00000000000023C6                 test    bpl, bpl
.text:00000000000023C9                 jnz     loc_2528
.text:00000000000023CF                 movsxd  r14, edx
.text:00000000000023D2                 mov     rax, rbx
.text:00000000000023D5                 mov     [rsp+48h+s], rbx
.text:00000000000023D9                 mov     ebp, 1
.text:00000000000023DE                 xchg    ax, ax
.text:00000000000023E0
.text:00000000000023E0 loc_23E0:                               ; CODE XREF: parse_tab_stops+153↓j
.text:00000000000023E0                                         ; parse_tab_stops+16D↓j ...
.text:00000000000023E0                 movzx   r15d, byte ptr [rax+1]
.text:00000000000023E5                 lea     rbx, [rax+1]
.text:00000000000023E9                 test    r15b, r15b
.text:00000000000023EC                 jz      short loc_2438
.text:00000000000023EE
.text:00000000000023EE loc_23EE:                               ; CODE XREF: parse_tab_stops+36↑j
.text:00000000000023EE                                         ; parse_tab_stops+E3↓j
.text:00000000000023EE                 cmp     r15b, 2Ch ; ','
.text:00000000000023F2                 jnz     short loc_2390
.text:00000000000023F4
.text:00000000000023F4 loc_23F4:                               ; CODE XREF: parse_tab_stops+50↑j
.text:00000000000023F4                 test    bpl, bpl
.text:00000000000023F7                 jz      loc_24A0
.text:00000000000023FD                 test    r12b, r12b
.text:0000000000002400                 mov     rdi, r14
.text:0000000000002403                 jnz     loc_24E8
.text:0000000000002409                 test    r13b, r13b
.text:000000000000240C                 jz      loc_24B0
.text:0000000000002412                 call    set_increment_size
.text:0000000000002417                 test    al, al
.text:0000000000002419                 mov     r13d, eax
.text:000000000000241C                 jz      loc_269F
.text:0000000000002422                 mov     rax, rbx
.text:0000000000002425                 xor     ebp, ebp
.text:0000000000002427                 movzx   r15d, byte ptr [rax+1]
.text:000000000000242C                 lea     rbx, [rax+1]
.text:0000000000002430                 test    r15b, r15b
.text:0000000000002433                 jnz     short loc_23EE
.text:0000000000002435                 nop     dword ptr [rax]
.text:0000000000002438
.text:0000000000002438 loc_2438:                               ; CODE XREF: parse_tab_stops+9C↑j
.text:0000000000002438                 test    bpl, bpl
.text:000000000000243B                 jz      short loc_2466
.text:000000000000243D                 cmp     byte ptr [rsp+48h+var_40], 0
.text:0000000000002442                 jz      loc_269F
.text:0000000000002448                 test    r12b, r12b
.text:000000000000244B                 mov     rdi, r14
.text:000000000000244E                 jnz     loc_2655
.text:0000000000002454                 test    r13b, r13b
.text:0000000000002457                 jz      loc_2642
.text:000000000000245D                 call    set_increment_size
.text:0000000000002462                 mov     byte ptr [rsp+48h+var_40], al
.text:0000000000002466
.text:0000000000002466 loc_2466:                               ; CODE XREF: parse_tab_stops+EB↑j
.text:0000000000002466                 cmp     byte ptr [rsp+48h+var_40], 0
.text:000000000000246B                 jz      loc_269F
.text:0000000000002471
.text:0000000000002471 loc_2471:                               ; CODE XREF: parse_tab_stops+15↑j
.text:0000000000002471                                         ; parse_tab_stops+313↓j
.text:0000000000002471                 add     rsp, 18h
.text:0000000000002475                 pop     rbx
.text:0000000000002476                 pop     rbp
.text:0000000000002477                 pop     r12
.text:0000000000002479                 pop     r13
.text:000000000000247B                 pop     r14
.text:000000000000247D                 pop     r15
.text:000000000000247F                 retn
.text:0000000000002480 ; ---------------------------------------------------------------------------
.text:0000000000002480
.text:0000000000002480 loc_2480:                               ; CODE XREF: parse_tab_stops+1E5↓j
.text:0000000000002480                 lea     rax, [r14+r14*4]
.text:0000000000002484                 movsxd  rdx, edx
.text:0000000000002487                 lea     rax, [rdx+rax*2]
.text:000000000000248B                 cmp     rax, r14
.text:000000000000248E                 jb      loc_253B
.text:0000000000002494                 mov     r14, rax
.text:0000000000002497                 nop     word ptr [rax+rax+00000000h]
.text:00000000000024A0
.text:00000000000024A0 loc_24A0:                               ; CODE XREF: parse_tab_stops+A7↑j
.text:00000000000024A0                 mov     rax, rbx
.text:00000000000024A3                 jmp     loc_23E0
.text:00000000000024A3 ; ---------------------------------------------------------------------------
.text:00000000000024A8                 align 10h
.text:00000000000024B0
.text:00000000000024B0 loc_24B0:                               ; CODE XREF: parse_tab_stops+BC↑j
.text:00000000000024B0                 call    add_tab_stop
.text:00000000000024B5                 mov     r12d, r13d
.text:00000000000024B8                 xor     ebp, ebp
.text:00000000000024BA                 mov     rax, rbx
.text:00000000000024BD                 jmp     loc_23E0
.text:00000000000024BD ; ---------------------------------------------------------------------------
.text:00000000000024C2                 align 8
.text:00000000000024C8
.text:00000000000024C8 loc_24C8:                               ; CODE XREF: parse_tab_stops+56↑j
.text:00000000000024C8                 test    bpl, bpl
.text:00000000000024CB                 jnz     loc_25B8
.text:00000000000024D1                 xor     r13d, r13d
.text:00000000000024D4                 mov     rax, rbx
.text:00000000000024D7                 mov     r12d, 1
.text:00000000000024DD                 jmp     loc_23E0
.text:00000000000024DD ; ---------------------------------------------------------------------------
.text:00000000000024E2                 align 8
.text:00000000000024E8
.text:00000000000024E8 loc_24E8:                               ; CODE XREF: parse_tab_stops+B3↑j
.text:00000000000024E8                 call    set_extend_size
.text:00000000000024ED                 test    al, al
.text:00000000000024EF                 mov     r12d, eax
.text:00000000000024F2                 jz      loc_269F
.text:00000000000024F8                 mov     rax, rbx
.text:00000000000024FB                 xor     ebp, ebp
.text:00000000000024FD                 jmp     loc_23E0
.text:00000000000024FD ; ---------------------------------------------------------------------------
.text:0000000000002502                 align 8
.text:0000000000002508
.text:0000000000002508 loc_2508:                               ; CODE XREF: parse_tab_stops+60↑j
.text:0000000000002508                 test    bpl, bpl
.text:000000000000250B                 jnz     loc_2600
.text:0000000000002511                 xor     r12d, r12d
.text:0000000000002514                 mov     rax, rbx
.text:0000000000002517                 mov     r13d, 1
.text:000000000000251D                 jmp     loc_23E0
.text:000000000000251D ; ---------------------------------------------------------------------------
.text:0000000000002522                 align 8
.text:0000000000002528
.text:0000000000002528 loc_2528:                               ; CODE XREF: parse_tab_stops+79↑j
.text:0000000000002528                 mov     rax, 1999999999999999h
.text:0000000000002532                 cmp     r14, rax
.text:0000000000002535                 jbe     loc_2480
.text:000000000000253B
.text:000000000000253B loc_253B:                               ; CODE XREF: parse_tab_stops+13E↑j
.text:000000000000253B                 mov     r15, [rsp+48h+s]
.text:000000000000253F                 lea     rsi, accept     ; "0123456789"
.text:0000000000002546                 mov     rdi, r15        ; s
.text:0000000000002549                 call    _strspn
.text:000000000000254E                 mov     rdi, r15
.text:0000000000002551                 mov     rsi, rax
.text:0000000000002554                 mov     rbx, rax
.text:0000000000002557                 mov     [rsp+48h+s], r15
.text:000000000000255B                 call    xstrndup
.text:0000000000002560                 mov     rdi, rax
.text:0000000000002563                 mov     r15, rax
.text:0000000000002566                 call    quote
.text:000000000000256B                 lea     rsi, aTabStopIsTooLa ; "tab stop is too large %s"
.text:0000000000002572                 mov     edx, 5          ; category
.text:0000000000002577                 xor     edi, edi        ; domainname
.text:0000000000002579                 mov     [rsp+48h+var_40], rax
.text:000000000000257E                 call    _dcgettext
.text:0000000000002583                 mov     rcx, [rsp+48h+var_40]
.text:0000000000002588                 mov     rdx, rax        ; format
.text:000000000000258B                 xor     esi, esi        ; errnum
.text:000000000000258D                 xor     eax, eax
.text:000000000000258F                 xor     edi, edi        ; status
.text:0000000000002591                 call    _error
.text:0000000000002596                 mov     rdi, r15        ; ptr
.text:0000000000002599                 call    _free
.text:000000000000259E                 mov     rax, [rsp+48h+s]
.text:00000000000025A2                 mov     byte ptr [rsp+48h+var_40], 0
.text:00000000000025A7                 lea     rax, [rax+rbx-1]
.text:00000000000025AC                 jmp     loc_23E0
.text:00000000000025AC ; ---------------------------------------------------------------------------
.text:00000000000025B1                 align 8
.text:00000000000025B8
.text:00000000000025B8 loc_25B8:                               ; CODE XREF: parse_tab_stops+17B↑j
.text:00000000000025B8                 mov     rdi, rbx
.text:00000000000025BB                 xor     r13d, r13d
.text:00000000000025BE                 call    quote
.text:00000000000025C3                 lea     rsi, aSpecifierNotAt ; "'/' specifier not at start of number: %"...
.text:00000000000025CA                 mov     r12, rax
.text:00000000000025CD                 mov     edx, 5          ; category
.text:00000000000025D2                 xor     edi, edi        ; domainname
.text:00000000000025D4                 call    _dcgettext
.text:00000000000025D9                 mov     rcx, r12
.text:00000000000025DC                 mov     rdx, rax        ; format
.text:00000000000025DF                 xor     esi, esi        ; errnum
.text:00000000000025E1                 xor     eax, eax
.text:00000000000025E3                 xor     edi, edi        ; status
.text:00000000000025E5                 mov     r12d, ebp
.text:00000000000025E8                 call    _error
.text:00000000000025ED                 mov     rax, rbx
.text:00000000000025F0                 mov     byte ptr [rsp+48h+var_40], 0
.text:00000000000025F5                 jmp     loc_23E0
.text:00000000000025F5 ; ---------------------------------------------------------------------------
.text:00000000000025FA                 align 20h
.text:0000000000002600
.text:0000000000002600 loc_2600:                               ; CODE XREF: parse_tab_stops+1BB↑j
.text:0000000000002600                 mov     rdi, rbx
.text:0000000000002603                 mov     r13d, ebp
.text:0000000000002606                 call    quote
.text:000000000000260B                 lea     rsi, aSpecifierNotAt_0 ; "'+' specifier not at start of number: %"...
.text:0000000000002612                 mov     r12, rax
.text:0000000000002615                 mov     edx, 5          ; category
.text:000000000000261A                 xor     edi, edi        ; domainname
.text:000000000000261C                 call    _dcgettext
.text:0000000000002621                 mov     rcx, r12
.text:0000000000002624                 mov     rdx, rax        ; format
.text:0000000000002627                 xor     esi, esi        ; errnum
.text:0000000000002629                 xor     eax, eax
.text:000000000000262B                 xor     edi, edi        ; status
.text:000000000000262D                 xor     r12d, r12d
.text:0000000000002630                 call    _error
.text:0000000000002635                 mov     rax, rbx
.text:0000000000002638                 mov     byte ptr [rsp+48h+var_40], 0
.text:000000000000263D                 jmp     loc_23E0
.text:0000000000002642 ; ---------------------------------------------------------------------------
.text:0000000000002642
.text:0000000000002642 loc_2642:                               ; CODE XREF: parse_tab_stops+107↑j
.text:0000000000002642                 add     rsp, 18h
.text:0000000000002646                 pop     rbx
.text:0000000000002647                 pop     rbp
.text:0000000000002648                 pop     r12
.text:000000000000264A                 pop     r13
.text:000000000000264C                 pop     r14
.text:000000000000264E                 pop     r15
.text:0000000000002650                 jmp     add_tab_stop
.text:0000000000002655 ; ---------------------------------------------------------------------------
.text:0000000000002655
.text:0000000000002655 loc_2655:                               ; CODE XREF: parse_tab_stops+FE↑j
.text:0000000000002655                 call    set_extend_size
.text:000000000000265A                 mov     byte ptr [rsp+48h+var_40], al
.text:000000000000265E                 cmp     byte ptr [rsp+48h+var_40], 0
.text:0000000000002663                 jnz     loc_2471
.text:0000000000002669                 jmp     short loc_269F
.text:0000000000002669 ; ---------------------------------------------------------------------------
.text:000000000000266B                 align 10h
.text:0000000000002670
.text:0000000000002670 loc_2670:                               ; CODE XREF: parse_tab_stops+70↑j
.text:0000000000002670                 mov     rdi, rbx
.text:0000000000002673                 call    quote
.text:0000000000002678                 lea     rsi, aTabSizeContain ; "tab size contains invalid character(s):"...
.text:000000000000267F                 mov     rbx, rax
.text:0000000000002682                 mov     edx, 5          ; category
.text:0000000000002687                 xor     edi, edi        ; domainname
.text:0000000000002689                 call    _dcgettext
.text:000000000000268E                 mov     rcx, rbx
.text:0000000000002691                 mov     rdx, rax        ; format
.text:0000000000002694                 xor     esi, esi        ; errnum
.text:0000000000002696                 xor     edi, edi        ; status
.text:0000000000002698                 xor     eax, eax
.text:000000000000269A                 call    _error
.text:000000000000269F
.text:000000000000269F loc_269F:                               ; CODE XREF: parse_tab_stops+CC↑j
.text:000000000000269F                                         ; parse_tab_stops+F2↑j ...
.text:000000000000269F                 mov     edi, 1          ; status
.text:00000000000026A4                 call    _exit
.text:00000000000026A4 ; } // starts at 2350
.text:00000000000026A4 parse_tab_stops endp
.text:00000000000026A4
.text:00000000000026A4 ; ---------------------------------------------------------------------------
.text:00000000000026A9                 align 10h
.text:00000000000026B0
.text:00000000000026B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000026B0
.text:00000000000026B0
.text:00000000000026B0                 public finalize_tab_stops
.text:00000000000026B0 finalize_tab_stops proc near            ; CODE XREF: main:loc_1950↑p
.text:00000000000026B0 ; __unwind {
.text:00000000000026B0                 sub     rsp, 8
.text:00000000000026B4                 mov     rsi, cs:first_free_tab
.text:00000000000026BB                 mov     rdi, cs:tab_list
.text:00000000000026C2                 test    rsi, rsi
.text:00000000000026C5                 jz      short loc_2744
.text:00000000000026C7                 mov     r8, [rdi]
.text:00000000000026CA                 test    r8, r8
.text:00000000000026CD                 mov     rcx, r8
.text:00000000000026D0                 jz      loc_2780
.text:00000000000026D6                 xor     eax, eax
.text:00000000000026D8                 jmp     short loc_26F9
.text:00000000000026D8 ; ---------------------------------------------------------------------------
.text:00000000000026DA                 align 20h
.text:00000000000026E0
.text:00000000000026E0 loc_26E0:                               ; CODE XREF: finalize_tab_stops+50↓j
.text:00000000000026E0                 mov     rdx, [rdi+rax*8]
.text:00000000000026E4                 test    rdx, rdx
.text:00000000000026E7                 jz      loc_2780
.text:00000000000026ED                 cmp     rcx, rdx
.text:00000000000026F0                 jnb     loc_27A4
.text:00000000000026F6                 mov     rcx, rdx
.text:00000000000026F9
.text:00000000000026F9 loc_26F9:                               ; CODE XREF: finalize_tab_stops+28↑j
.text:00000000000026F9                 add     rax, 1
.text:00000000000026FD                 cmp     rsi, rax
.text:0000000000002700                 jnz     short loc_26E0
.text:0000000000002702                 mov     rax, cs:increment_size
.text:0000000000002709                 test    rax, rax
.text:000000000000270C                 jz      short loc_271C
.text:000000000000270E                 cmp     cs:extend_size, 0
.text:0000000000002716                 jnz     loc_27C8
.text:000000000000271C
.text:000000000000271C loc_271C:                               ; CODE XREF: finalize_tab_stops+5C↑j
.text:000000000000271C                 cmp     rsi, 1
.text:0000000000002720                 jz      short loc_2732
.text:0000000000002722
.text:0000000000002722 loc_2722:                               ; CODE XREF: finalize_tab_stops+89↓j
.text:0000000000002722                 mov     cs:tab_size, 0
.text:000000000000272D
.text:000000000000272D loc_272D:                               ; CODE XREF: finalize_tab_stops+92↓j
.text:000000000000272D                 add     rsp, 8
.text:0000000000002731                 retn
.text:0000000000002732 ; ---------------------------------------------------------------------------
.text:0000000000002732
.text:0000000000002732 loc_2732:                               ; CODE XREF: finalize_tab_stops+70↑j
.text:0000000000002732                 or      rax, cs:extend_size
.text:0000000000002739                 jnz     short loc_2722
.text:000000000000273B                 mov     cs:tab_size, r8
.text:0000000000002742                 jmp     short loc_272D
.text:0000000000002744 ; ---------------------------------------------------------------------------
.text:0000000000002744
.text:0000000000002744 loc_2744:                               ; CODE XREF: finalize_tab_stops+15↑j
.text:0000000000002744                 mov     rdx, cs:increment_size
.text:000000000000274B                 mov     rax, cs:extend_size
.text:0000000000002752                 test    rdx, rdx
.text:0000000000002755                 jz      short loc_2772
.text:0000000000002757                 test    rax, rax
.text:000000000000275A                 jnz     short loc_27C8
.text:000000000000275C                 mov     rax, rdx
.text:000000000000275F
.text:000000000000275F loc_275F:                               ; CODE XREF: finalize_tab_stops+CE↓j
.text:000000000000275F                 mov     cs:max_column_width, rax
.text:0000000000002766                 mov     cs:tab_size, rax
.text:000000000000276D                 add     rsp, 8
.text:0000000000002771                 retn
.text:0000000000002772 ; ---------------------------------------------------------------------------
.text:0000000000002772
.text:0000000000002772 loc_2772:                               ; CODE XREF: finalize_tab_stops+A5↑j
.text:0000000000002772                 test    rax, rax
.text:0000000000002775                 mov     edx, 8
.text:000000000000277A                 cmovz   rax, rdx
.text:000000000000277E                 jmp     short loc_275F
.text:0000000000002780 ; ---------------------------------------------------------------------------
.text:0000000000002780
.text:0000000000002780 loc_2780:                               ; CODE XREF: finalize_tab_stops+20↑j
.text:0000000000002780                                         ; finalize_tab_stops+37↑j
.text:0000000000002780                 lea     rsi, aTabSizeCannotB ; "tab size cannot be 0"
.text:0000000000002787                 mov     edx, 5          ; category
.text:000000000000278C                 xor     edi, edi        ; domainname
.text:000000000000278E                 call    _dcgettext
.text:0000000000002793                 xor     esi, esi        ; errnum
.text:0000000000002795                 mov     rdx, rax        ; format
.text:0000000000002798                 mov     edi, 1          ; status
.text:000000000000279D                 xor     eax, eax
.text:000000000000279F                 call    _error
.text:00000000000027A4
.text:00000000000027A4 loc_27A4:                               ; CODE XREF: finalize_tab_stops+40↑j
.text:00000000000027A4                 lea     rsi, aTabSizesMustBe ; "tab sizes must be ascending"
.text:00000000000027AB                 mov     edx, 5          ; category
.text:00000000000027B0                 xor     edi, edi        ; domainname
.text:00000000000027B2                 call    _dcgettext
.text:00000000000027B7                 xor     esi, esi        ; errnum
.text:00000000000027B9                 mov     rdx, rax        ; format
.text:00000000000027BC                 mov     edi, 1          ; status
.text:00000000000027C1                 xor     eax, eax
.text:00000000000027C3                 call    _error
.text:00000000000027C8
.text:00000000000027C8 loc_27C8:                               ; CODE XREF: finalize_tab_stops+66↑j
.text:00000000000027C8                                         ; finalize_tab_stops+AA↑j
.text:00000000000027C8                 lea     rsi, aSpecifierIsMut ; "'/' specifier is mutually exclusive wit"...
.text:00000000000027CF                 mov     edx, 5          ; category
.text:00000000000027D4                 xor     edi, edi        ; domainname
.text:00000000000027D6                 call    _dcgettext
.text:00000000000027DB                 xor     esi, esi        ; errnum
.text:00000000000027DD                 mov     rdx, rax        ; format
.text:00000000000027E0                 mov     edi, 1          ; status
.text:00000000000027E5                 xor     eax, eax
.text:00000000000027E7                 call    _error
.text:00000000000027E7 ; } // starts at 26B0
.text:00000000000027EC                 nop     dword ptr [rax+00h]
.text:00000000000027EC finalize_tab_stops endp ; sp-analysis failed
.text:00000000000027EC
.text:00000000000027F0
.text:00000000000027F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000027F0
.text:00000000000027F0
.text:00000000000027F0                 public get_next_tab_column
.text:00000000000027F0 get_next_tab_column proc near           ; CODE XREF: main+338↑p
.text:00000000000027F0 ; __unwind {
.text:00000000000027F0                 mov     rcx, cs:tab_size
.text:00000000000027F7                 mov     byte ptr [rdx], 0
.text:00000000000027FA                 test    rcx, rcx
.text:00000000000027FD                 jnz     short loc_2860
.text:00000000000027FF                 mov     rcx, [rsi]
.text:0000000000002802                 mov     rax, cs:first_free_tab
.text:0000000000002809                 cmp     rax, rcx
.text:000000000000280C                 jbe     short loc_283E
.text:000000000000280E                 mov     r9, cs:tab_list
.text:0000000000002815                 mov     r8, [r9+rcx*8]
.text:0000000000002819                 cmp     rdi, r8
.text:000000000000281C                 jb      short loc_286F
.text:000000000000281E                 add     rcx, 1
.text:0000000000002822                 jmp     short loc_2836
.text:0000000000002822 ; ---------------------------------------------------------------------------
.text:0000000000002824                 align 8
.text:0000000000002828
.text:0000000000002828 loc_2828:                               ; CODE XREF: get_next_tab_column+4C↓j
.text:0000000000002828                 add     rcx, 1
.text:000000000000282C                 mov     r8, [r9+rcx*8-8]
.text:0000000000002831                 cmp     rdi, r8
.text:0000000000002834                 jb      short loc_286F
.text:0000000000002836
.text:0000000000002836 loc_2836:                               ; CODE XREF: get_next_tab_column+32↑j
.text:0000000000002836                 cmp     rax, rcx
.text:0000000000002839                 mov     [rsi], rcx
.text:000000000000283C                 jnz     short loc_2828
.text:000000000000283E
.text:000000000000283E loc_283E:                               ; CODE XREF: get_next_tab_column+1C↑j
.text:000000000000283E                 mov     rcx, cs:extend_size
.text:0000000000002845                 test    rcx, rcx
.text:0000000000002848                 jnz     short loc_2860
.text:000000000000284A                 mov     r8, cs:increment_size
.text:0000000000002851                 test    r8, r8
.text:0000000000002854                 jnz     short loc_2878
.text:0000000000002856                 mov     byte ptr [rdx], 1
.text:0000000000002859                 jmp     short loc_286F
.text:0000000000002859 ; ---------------------------------------------------------------------------
.text:000000000000285B                 align 20h
.text:0000000000002860
.text:0000000000002860 loc_2860:                               ; CODE XREF: get_next_tab_column+D↑j
.text:0000000000002860                                         ; get_next_tab_column+58↑j
.text:0000000000002860                 mov     rax, rdi
.text:0000000000002863                 xor     edx, edx
.text:0000000000002865                 lea     r8, [rcx+rdi]
.text:0000000000002869                 div     rcx
.text:000000000000286C                 sub     r8, rdx
.text:000000000000286F
.text:000000000000286F loc_286F:                               ; CODE XREF: get_next_tab_column+2C↑j
.text:000000000000286F                                         ; get_next_tab_column+44↑j ...
.text:000000000000286F                 mov     rax, r8
.text:0000000000002872                 retn
.text:0000000000002872 ; ---------------------------------------------------------------------------
.text:0000000000002873                 align 8
.text:0000000000002878
.text:0000000000002878 loc_2878:                               ; CODE XREF: get_next_tab_column+64↑j
.text:0000000000002878                 mov     rdx, cs:tab_list
.text:000000000000287F                 lea     rcx, [r8+rdi]
.text:0000000000002883                 sub     rdi, [rdx+rax*8-8]
.text:0000000000002888                 xor     edx, edx
.text:000000000000288A                 mov     rax, rdi
.text:000000000000288D                 div     r8
.text:0000000000002890                 sub     rcx, rdx
.text:0000000000002893                 mov     r8, rcx
.text:0000000000002896                 jmp     short loc_286F
.text:0000000000002896 ; } // starts at 27F0
.text:0000000000002896 get_next_tab_column endp
.text:0000000000002896
.text:0000000000002896 ; ---------------------------------------------------------------------------
.text:0000000000002898                 align 20h
.text:00000000000028A0
.text:00000000000028A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028A0
.text:00000000000028A0
.text:00000000000028A0                 public set_file_list
.text:00000000000028A0 set_file_list   proc near               ; CODE XREF: main:loc_1966↑p
.text:00000000000028A0 ; __unwind {
.text:00000000000028A0                 lea     rax, stdin_argv
.text:00000000000028A7                 test    rdi, rdi
.text:00000000000028AA                 mov     cs:have_read_stdin, 0
.text:00000000000028B1                 cmovz   rdi, rax
.text:00000000000028B5                 mov     cs:file_list, rdi
.text:00000000000028BC                 retn
.text:00000000000028BC ; } // starts at 28A0
.text:00000000000028BC set_file_list   endp
.text:00000000000028BC
.text:00000000000028BC ; ---------------------------------------------------------------------------
.text:00000000000028BD                 align 20h
.text:00000000000028C0
.text:00000000000028C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028C0
.text:00000000000028C0
.text:00000000000028C0 ; __int64 __fastcall next_file(FILE *stream)
.text:00000000000028C0                 public next_file
.text:00000000000028C0 next_file       proc near               ; CODE XREF: main+1ED↑p
.text:00000000000028C0                                         ; main+3D0↑p
.text:00000000000028C0
.text:00000000000028C0 var_20          = qword ptr -20h
.text:00000000000028C0
.text:00000000000028C0 ; __unwind {
.text:00000000000028C0                 push    r12
.text:00000000000028C2                 push    rbp
.text:00000000000028C3                 push    rbx
.text:00000000000028C4                 sub     rsp, 10h
.text:00000000000028C8                 test    rdi, rdi
.text:00000000000028CB                 jz      short loc_290F
.text:00000000000028CD                 mov     rsi, cs:prev_file_6959
.text:00000000000028D4                 test    rsi, rsi
.text:00000000000028D7                 jz      loc_2AA2
.text:00000000000028DD                 test    byte ptr [rdi], 20h
.text:00000000000028E0                 mov     rbp, rdi
.text:00000000000028E3                 jnz     loc_2A60
.text:00000000000028E9
.text:00000000000028E9 loc_28E9:                               ; CODE XREF: next_file+1DD↓j
.text:00000000000028E9                 lea     rbx, aLt+2      ; "-"
.text:00000000000028F0                 mov     ecx, 2
.text:00000000000028F5                 mov     rdi, rbx
.text:00000000000028F8                 repe cmpsb
.text:00000000000028FA                 mov     rdi, rbp        ; stream
.text:00000000000028FD                 setnbe  al
.text:0000000000002900                 sbb     al, 0
.text:0000000000002902                 test    al, al
.text:0000000000002904                 jnz     loc_2A10
.text:000000000000290A                 call    _clearerr_unlocked
.text:000000000000290F
.text:000000000000290F loc_290F:                               ; CODE XREF: next_file+B↑j
.text:000000000000290F                                         ; next_file+157↓j ...
.text:000000000000290F                 mov     rax, cs:file_list
.text:0000000000002916                 lea     rdx, [rax+8]
.text:000000000000291A                 mov     cs:file_list, rdx
.text:0000000000002921                 mov     rdx, [rax]
.text:0000000000002924                 test    rdx, rdx
.text:0000000000002927                 jz      loc_2A00
.text:000000000000292D                 lea     rbx, aLt+2      ; "-"
.text:0000000000002934                 lea     rbp, msgid+0Ah  ; "r"
.text:000000000000293B                 jmp     short loc_29A0
.text:000000000000293B ; ---------------------------------------------------------------------------
.text:000000000000293D                 align 20h
.text:0000000000002940
.text:0000000000002940 loc_2940:                               ; CODE XREF: next_file+F4↓j
.text:0000000000002940                 mov     rax, cs:stdin@@GLIBC_2_2_5
.text:0000000000002947                 mov     cs:have_read_stdin, 1
.text:000000000000294E                 test    rax, rax
.text:0000000000002951                 jnz     short loc_29D0
.text:0000000000002953
.text:0000000000002953 loc_2953:                               ; CODE XREF: next_file+10E↓j
.text:0000000000002953                 xor     edi, edi
.text:0000000000002955                 mov     esi, 3
.text:000000000000295A                 call    quotearg_n_style_colon
.text:000000000000295F                 mov     r12, rax
.text:0000000000002962                 call    ___errno_location
.text:0000000000002967                 mov     esi, [rax]      ; errnum
.text:0000000000002969                 lea     rdx, format     ; format
.text:0000000000002970                 xor     eax, eax
.text:0000000000002972                 xor     edi, edi        ; status
.text:0000000000002974                 mov     rcx, r12
.text:0000000000002977                 call    _error
.text:000000000000297C                 mov     rax, cs:file_list
.text:0000000000002983                 mov     cs:exit_status, 1
.text:000000000000298D                 lea     rdx, [rax+8]
.text:0000000000002991                 mov     cs:file_list, rdx
.text:0000000000002998                 mov     rdx, [rax]
.text:000000000000299B                 test    rdx, rdx
.text:000000000000299E                 jz      short loc_2A00
.text:00000000000029A0
.text:00000000000029A0 loc_29A0:                               ; CODE XREF: next_file+7B↑j
.text:00000000000029A0                 mov     ecx, 2
.text:00000000000029A5                 mov     rsi, rdx
.text:00000000000029A8                 mov     rdi, rbx
.text:00000000000029AB                 repe cmpsb
.text:00000000000029AD                 setnbe  al
.text:00000000000029B0                 sbb     al, 0
.text:00000000000029B2                 test    al, al
.text:00000000000029B4                 jz      short loc_2940
.text:00000000000029B6                 mov     rdi, rdx        ; filename
.text:00000000000029B9                 mov     rsi, rbp        ; modes
.text:00000000000029BC                 mov     [rsp+28h+var_20], rdx
.text:00000000000029C1                 call    _fopen
.text:00000000000029C6                 test    rax, rax
.text:00000000000029C9                 mov     rdx, [rsp+28h+var_20]
.text:00000000000029CE                 jz      short loc_2953
.text:00000000000029D0
.text:00000000000029D0 loc_29D0:                               ; CODE XREF: next_file+91↑j
.text:00000000000029D0                 mov     rdi, rax
.text:00000000000029D3                 mov     esi, 2
.text:00000000000029D8                 mov     [rsp+28h+var_20], rax
.text:00000000000029DD                 mov     cs:prev_file_6959, rdx
.text:00000000000029E4                 call    fadvise
.text:00000000000029E9                 mov     rax, [rsp+28h+var_20]
.text:00000000000029EE                 add     rsp, 10h
.text:00000000000029F2                 pop     rbx
.text:00000000000029F3                 pop     rbp
.text:00000000000029F4                 pop     r12
.text:00000000000029F6                 retn
.text:00000000000029F6 ; ---------------------------------------------------------------------------
.text:00000000000029F7                 align 20h
.text:0000000000002A00
.text:0000000000002A00 loc_2A00:                               ; CODE XREF: next_file+67↑j
.text:0000000000002A00                                         ; next_file+DE↑j
.text:0000000000002A00                 add     rsp, 10h
.text:0000000000002A04                 xor     eax, eax
.text:0000000000002A06                 pop     rbx
.text:0000000000002A07                 pop     rbp
.text:0000000000002A08                 pop     r12
.text:0000000000002A0A                 retn
.text:0000000000002A0A ; ---------------------------------------------------------------------------
.text:0000000000002A0B                 align 10h
.text:0000000000002A10
.text:0000000000002A10 loc_2A10:                               ; CODE XREF: next_file+44↑j
.text:0000000000002A10                 call    rpl_fclose
.text:0000000000002A15                 test    eax, eax
.text:0000000000002A17                 jz      loc_290F
.text:0000000000002A1D                 mov     rdx, cs:prev_file_6959
.text:0000000000002A24                 mov     esi, 3
.text:0000000000002A29                 xor     edi, edi
.text:0000000000002A2B                 call    quotearg_n_style_colon
.text:0000000000002A30                 mov     rbx, rax
.text:0000000000002A33                 call    ___errno_location
.text:0000000000002A38                 mov     esi, [rax]      ; errnum
.text:0000000000002A3A                 lea     rdx, format     ; format
.text:0000000000002A41                 mov     rcx, rbx
.text:0000000000002A44                 xor     edi, edi        ; status
.text:0000000000002A46                 xor     eax, eax
.text:0000000000002A48                 call    _error
.text:0000000000002A4D                 mov     cs:exit_status, 1
.text:0000000000002A57                 jmp     loc_290F
.text:0000000000002A57 ; ---------------------------------------------------------------------------
.text:0000000000002A5C                 align 20h
.text:0000000000002A60
.text:0000000000002A60 loc_2A60:                               ; CODE XREF: next_file+23↑j
.text:0000000000002A60                 mov     rdx, rsi
.text:0000000000002A63                 xor     edi, edi
.text:0000000000002A65                 mov     esi, 3
.text:0000000000002A6A                 call    quotearg_n_style_colon
.text:0000000000002A6F                 mov     rbx, rax
.text:0000000000002A72                 call    ___errno_location
.text:0000000000002A77                 mov     esi, [rax]      ; errnum
.text:0000000000002A79                 lea     rdx, format     ; format
.text:0000000000002A80                 mov     rcx, rbx
.text:0000000000002A83                 xor     edi, edi        ; status
.text:0000000000002A85                 xor     eax, eax
.text:0000000000002A87                 call    _error
.text:0000000000002A8C                 mov     cs:exit_status, 1
.text:0000000000002A96                 mov     rsi, cs:prev_file_6959
.text:0000000000002A9D                 jmp     loc_28E9
.text:0000000000002AA2 ; ---------------------------------------------------------------------------
.text:0000000000002AA2
.text:0000000000002AA2 loc_2AA2:                               ; CODE XREF: next_file+17↑j
.text:0000000000002AA2                 lea     rcx, __PRETTY_FUNCTION___6961 ; "next_file"
.text:0000000000002AA9                 lea     rsi, file       ; "../coreutils-8.31/src/expand-common.c"
.text:0000000000002AB0                 lea     rdi, assertion  ; "prev_file"
.text:0000000000002AB7                 mov     edx, 155h       ; line
.text:0000000000002ABC                 call    ___assert_fail
.text:0000000000002ABC ; } // starts at 28C0
.text:0000000000002ABC next_file       endp
.text:0000000000002ABC
.text:0000000000002ABC ; ---------------------------------------------------------------------------
.text:0000000000002AC1                 align 10h
.text:0000000000002AD0
.text:0000000000002AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002AD0
.text:0000000000002AD0
.text:0000000000002AD0                 public cleanup_file_list_stdin
.text:0000000000002AD0 cleanup_file_list_stdin proc near       ; CODE XREF: main:loc_1BB3↑p
.text:0000000000002AD0 ; __unwind {
.text:0000000000002AD0                 cmp     cs:have_read_stdin, 0
.text:0000000000002AD7                 jnz     short loc_2AE0
.text:0000000000002AD9                 rep retn
.text:0000000000002AD9 ; ---------------------------------------------------------------------------
.text:0000000000002ADB                 align 20h
.text:0000000000002AE0
.text:0000000000002AE0 loc_2AE0:                               ; CODE XREF: cleanup_file_list_stdin+7↑j
.text:0000000000002AE0                 sub     rsp, 8
.text:0000000000002AE4                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:0000000000002AEB                 call    rpl_fclose
.text:0000000000002AF0                 test    eax, eax
.text:0000000000002AF2                 jnz     short loc_2AF9
.text:0000000000002AF4                 add     rsp, 8
.text:0000000000002AF8                 retn
.text:0000000000002AF9 ; ---------------------------------------------------------------------------
.text:0000000000002AF9
.text:0000000000002AF9 loc_2AF9:                               ; CODE XREF: cleanup_file_list_stdin+22↑j
.text:0000000000002AF9                 call    ___errno_location
.text:0000000000002AFE                 mov     esi, [rax]      ; errnum
.text:0000000000002B00                 lea     rdx, aLt+2      ; format
.text:0000000000002B07                 mov     edi, 1          ; status
.text:0000000000002B0C                 xor     eax, eax
.text:0000000000002B0E                 call    _error
.text:0000000000002B0E ; } // starts at 2AD0
.text:0000000000002B13                 nop     dword ptr [rax]
.text:0000000000002B16                 db      2Eh
.text:0000000000002B16                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002B16 cleanup_file_list_stdin endp ; sp-analysis failed
.text:0000000000002B16
.text:0000000000002B20
.text:0000000000002B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B20
.text:0000000000002B20
.text:0000000000002B20                 public emit_tab_list_info
.text:0000000000002B20 emit_tab_list_info proc near            ; CODE XREF: usage+111↑p
.text:0000000000002B20 ; __unwind {
.text:0000000000002B20                 push    rbx
.text:0000000000002B21                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002B28                 lea     rsi, aTTabsListUseCo ; "  -t, --tabs=LIST  use comma separated "...
.text:0000000000002B2F                 mov     edx, 5          ; category
.text:0000000000002B34                 xor     edi, edi        ; domainname
.text:0000000000002B36                 call    _dcgettext
.text:0000000000002B3B                 mov     rsi, rbx        ; stream
.text:0000000000002B3E                 mov     rdi, rax        ; s
.text:0000000000002B41                 call    _fputs_unlocked
.text:0000000000002B46                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002B4D                 lea     rsi, aTheLastSpecifi ; "                     The last specified"...
.text:0000000000002B54                 xor     edi, edi        ; domainname
.text:0000000000002B56                 mov     edx, 5          ; category
.text:0000000000002B5B                 call    _dcgettext
.text:0000000000002B60                 mov     rsi, rbx        ; stream
.text:0000000000002B63                 mov     rdi, rax        ; s
.text:0000000000002B66                 pop     rbx
.text:0000000000002B67                 jmp     _fputs_unlocked
.text:0000000000002B67 ; } // starts at 2B20
.text:0000000000002B67 emit_tab_list_info endp
.text:0000000000002B67
.text:0000000000002B67 ; ---------------------------------------------------------------------------
.text:0000000000002B6C                 align 10h
.text:0000000000002B70
.text:0000000000002B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B70
.text:0000000000002B70
.text:0000000000002B70                 public close_stdout_set_file_name
.text:0000000000002B70 close_stdout_set_file_name proc near
.text:0000000000002B70 ; __unwind {
.text:0000000000002B70                 mov     cs:file_name, rdi
.text:0000000000002B77                 retn
.text:0000000000002B77 ; } // starts at 2B70
.text:0000000000002B77 close_stdout_set_file_name endp
.text:0000000000002B77
.text:0000000000002B77 ; ---------------------------------------------------------------------------
.text:0000000000002B78                 align 20h
.text:0000000000002B80
.text:0000000000002B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B80
.text:0000000000002B80
.text:0000000000002B80                 public close_stdout_set_ignore_EPIPE
.text:0000000000002B80 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002B80 ; __unwind {
.text:0000000000002B80                 mov     cs:ignore_EPIPE, dil
.text:0000000000002B87                 retn
.text:0000000000002B87 ; } // starts at 2B80
.text:0000000000002B87 close_stdout_set_ignore_EPIPE endp
.text:0000000000002B87
.text:0000000000002B87 ; ---------------------------------------------------------------------------
.text:0000000000002B88                 align 10h
.text:0000000000002B90
.text:0000000000002B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B90
.text:0000000000002B90 ; Attributes: info_from_lumina
.text:0000000000002B90
.text:0000000000002B90 ; void __cdecl close_stdout()
.text:0000000000002B90                 public close_stdout
.text:0000000000002B90 close_stdout    proc near               ; DATA XREF: main+6B↑o
.text:0000000000002B90 ; __unwind {
.text:0000000000002B90                 push    rbp
.text:0000000000002B91                 push    rbx
.text:0000000000002B92                 sub     rsp, 8
.text:0000000000002B96                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002B9D                 call    close_stream
.text:0000000000002BA2                 test    eax, eax
.text:0000000000002BA4                 jz      short loc_2BBC
.text:0000000000002BA6                 call    ___errno_location
.text:0000000000002BAB                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002BB2                 mov     rbx, rax
.text:0000000000002BB5                 jz      short loc_2BD3
.text:0000000000002BB7                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000002BBA                 jnz     short loc_2BD3
.text:0000000000002BBC
.text:0000000000002BBC loc_2BBC:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000002BBC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002BC3                 call    close_stream
.text:0000000000002BC8                 test    eax, eax
.text:0000000000002BCA                 jnz     short loc_2C12
.text:0000000000002BCC                 add     rsp, 8
.text:0000000000002BD0                 pop     rbx
.text:0000000000002BD1                 pop     rbp
.text:0000000000002BD2                 retn
.text:0000000000002BD3 ; ---------------------------------------------------------------------------
.text:0000000000002BD3
.text:0000000000002BD3 loc_2BD3:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000002BD3                                         ; close_stdout+2A↑j
.text:0000000000002BD3                 lea     rsi, msgid      ; "write error"
.text:0000000000002BDA                 xor     edi, edi        ; domainname
.text:0000000000002BDC                 mov     edx, 5          ; category
.text:0000000000002BE1                 call    _dcgettext
.text:0000000000002BE6                 mov     rdi, cs:file_name
.text:0000000000002BED                 mov     rbp, rax
.text:0000000000002BF0                 test    rdi, rdi
.text:0000000000002BF3                 jz      short loc_2C1D
.text:0000000000002BF5                 call    quotearg_colon
.text:0000000000002BFA                 mov     esi, [rbx]      ; errnum
.text:0000000000002BFC                 lea     rdx, aS         ; "%s: "
.text:0000000000002C03                 mov     rcx, rax
.text:0000000000002C06                 mov     r8, rbp
.text:0000000000002C09                 xor     edi, edi        ; status
.text:0000000000002C0B                 xor     eax, eax
.text:0000000000002C0D                 call    _error
.text:0000000000002C12
.text:0000000000002C12 loc_2C12:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002C12                                         ; close_stdout+A2↓j
.text:0000000000002C12                 mov     edi, cs:exit_failure ; status
.text:0000000000002C18                 call    __exit
.text:0000000000002C1D ; ---------------------------------------------------------------------------
.text:0000000000002C1D
.text:0000000000002C1D loc_2C1D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000002C1D                 mov     esi, [rbx]      ; errnum
.text:0000000000002C1F                 lea     rdx, format     ; format
.text:0000000000002C26                 mov     rcx, rax
.text:0000000000002C29                 xor     edi, edi        ; status
.text:0000000000002C2B                 xor     eax, eax
.text:0000000000002C2D                 call    _error
.text:0000000000002C32                 jmp     short loc_2C12
.text:0000000000002C32 ; } // starts at 2B90
.text:0000000000002C32 close_stdout    endp
.text:0000000000002C32
.text:0000000000002C32 ; ---------------------------------------------------------------------------
.text:0000000000002C34                 align 20h
.text:0000000000002C40
.text:0000000000002C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C40
.text:0000000000002C40
.text:0000000000002C40 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:0000000000002C40                 public fdadvise
.text:0000000000002C40 fdadvise        proc near
.text:0000000000002C40 ; __unwind {
.text:0000000000002C40                 jmp     _posix_fadvise
.text:0000000000002C40 ; } // starts at 2C40
.text:0000000000002C40 fdadvise        endp
.text:0000000000002C40
.text:0000000000002C40 ; ---------------------------------------------------------------------------
.text:0000000000002C45                 align 10h
.text:0000000000002C50
.text:0000000000002C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C50
.text:0000000000002C50
.text:0000000000002C50                 public fadvise
.text:0000000000002C50 fadvise         proc near               ; CODE XREF: next_file+124↑p
.text:0000000000002C50 ; __unwind {
.text:0000000000002C50                 test    rdi, rdi
.text:0000000000002C53                 jz      short locret_2C70
.text:0000000000002C55                 push    rbx
.text:0000000000002C56                 mov     ebx, esi
.text:0000000000002C58                 call    _fileno
.text:0000000000002C5D                 mov     ecx, ebx        ; advise
.text:0000000000002C5F                 xor     edx, edx        ; len
.text:0000000000002C61                 xor     esi, esi        ; offset
.text:0000000000002C63                 pop     rbx
.text:0000000000002C64                 mov     edi, eax        ; fd
.text:0000000000002C66                 jmp     _posix_fadvise
.text:0000000000002C66 ; ---------------------------------------------------------------------------
.text:0000000000002C6B                 align 10h
.text:0000000000002C70
.text:0000000000002C70 locret_2C70:                            ; CODE XREF: fadvise+3↑j
.text:0000000000002C70                 rep retn
.text:0000000000002C70 ; } // starts at 2C50
.text:0000000000002C70 fadvise         endp
.text:0000000000002C70
.text:0000000000002C70 ; ---------------------------------------------------------------------------
.text:0000000000002C72                 align 20h
.text:0000000000002C80
.text:0000000000002C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C80
.text:0000000000002C80
.text:0000000000002C80                 public set_program_name
.text:0000000000002C80 set_program_name proc near              ; CODE XREF: main+36↑p
.text:0000000000002C80 ; __unwind {
.text:0000000000002C80                 test    rdi, rdi
.text:0000000000002C83                 push    rbx
.text:0000000000002C84                 jz      short loc_2CFD
.text:0000000000002C86                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000002C8B                 mov     rbx, rdi
.text:0000000000002C8E                 call    _strrchr
.text:0000000000002C93                 test    rax, rax
.text:0000000000002C96                 jz      short loc_2CED
.text:0000000000002C98                 lea     r8, [rax+1]
.text:0000000000002C9C                 mov     rdx, r8
.text:0000000000002C9F                 sub     rdx, rbx
.text:0000000000002CA2                 cmp     rdx, 6
.text:0000000000002CA6                 jle     short loc_2CED
.text:0000000000002CA8                 lea     rsi, [rax-6]
.text:0000000000002CAC                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002CB3                 mov     ecx, 7
.text:0000000000002CB8                 repe cmpsb
.text:0000000000002CBA                 setnbe  dl
.text:0000000000002CBD                 sbb     dl, 0
.text:0000000000002CC0                 test    dl, dl
.text:0000000000002CC2                 jnz     short loc_2CED
.text:0000000000002CC4                 lea     rdi, aLt        ; "lt-"
.text:0000000000002CCB                 mov     ecx, 3
.text:0000000000002CD0                 mov     rsi, r8
.text:0000000000002CD3                 mov     rbx, r8
.text:0000000000002CD6                 repe cmpsb
.text:0000000000002CD8                 setnbe  dl
.text:0000000000002CDB                 sbb     dl, 0
.text:0000000000002CDE                 test    dl, dl
.text:0000000000002CE0                 jnz     short loc_2CED
.text:0000000000002CE2                 lea     rbx, [rax+4]
.text:0000000000002CE6                 mov     cs:__bss_start, rbx
.text:0000000000002CED
.text:0000000000002CED loc_2CED:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000002CED                                         ; set_program_name+26↑j ...
.text:0000000000002CED                 mov     cs:program_name, rbx
.text:0000000000002CF4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000002CFB                 pop     rbx
.text:0000000000002CFC                 retn
.text:0000000000002CFD ; ---------------------------------------------------------------------------
.text:0000000000002CFD
.text:0000000000002CFD loc_2CFD:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000002CFD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002D04                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000002D0B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002D10                 mov     esi, 1          ; size
.text:0000000000002D15                 call    _fwrite
.text:0000000000002D1A                 call    _abort
.text:0000000000002D1A ; } // starts at 2C80
.text:0000000000002D1A set_program_name endp
.text:0000000000002D1A
.text:0000000000002D1A ; ---------------------------------------------------------------------------
.text:0000000000002D1F                 align 20h
.text:0000000000002D20
.text:0000000000002D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D20
.text:0000000000002D20 ; Attributes: info_from_lumina
.text:0000000000002D20
.text:0000000000002D20 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002D20 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002D20                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002D20 ; __unwind {
.text:0000000000002D20                 push    rbp
.text:0000000000002D21                 push    rbx
.text:0000000000002D22                 mov     rbp, rdi
.text:0000000000002D25                 mov     ebx, esi
.text:0000000000002D27                 sub     rsp, 8
.text:0000000000002D2B                 call    locale_charset
.text:0000000000002D30                 movzx   edx, byte ptr [rax]
.text:0000000000002D33                 and     edx, 0FFFFFFDFh
.text:0000000000002D36                 cmp     dl, 55h ; 'U'
.text:0000000000002D39                 jz      short loc_2DB0
.text:0000000000002D3B                 cmp     dl, 47h ; 'G'
.text:0000000000002D3E                 jz      short loc_2D60
.text:0000000000002D40
.text:0000000000002D40 loc_2D40:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002D40                                         ; gettext_quote+50↓j ...
.text:0000000000002D40                 lea     rax, unk_5E1B
.text:0000000000002D47                 lea     rdx, asc_5E1D   ; "'"
.text:0000000000002D4E                 cmp     ebx, 9
.text:0000000000002D51                 cmovnz  rax, rdx
.text:0000000000002D55                 add     rsp, 8
.text:0000000000002D59                 pop     rbx
.text:0000000000002D5A                 pop     rbp
.text:0000000000002D5B                 retn
.text:0000000000002D5B ; ---------------------------------------------------------------------------
.text:0000000000002D5C                 align 20h
.text:0000000000002D60
.text:0000000000002D60 loc_2D60:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002D60                 movzx   edx, byte ptr [rax+1]
.text:0000000000002D64                 and     edx, 0FFFFFFDFh
.text:0000000000002D67                 cmp     dl, 42h ; 'B'
.text:0000000000002D6A                 jnz     short loc_2D40
.text:0000000000002D6C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002D70                 jnz     short loc_2D40
.text:0000000000002D72                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002D76                 jnz     short loc_2D40
.text:0000000000002D78                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000002D7C                 jnz     short loc_2D40
.text:0000000000002D7E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002D82                 jnz     short loc_2D40
.text:0000000000002D84                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002D88                 jnz     short loc_2D40
.text:0000000000002D8A                 cmp     byte ptr [rax+7], 0
.text:0000000000002D8E                 jnz     short loc_2D40
.text:0000000000002D90                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002D94                 lea     rax, unk_5E14
.text:0000000000002D9B                 lea     rdx, unk_5E18
.text:0000000000002DA2                 cmovnz  rax, rdx
.text:0000000000002DA6                 add     rsp, 8
.text:0000000000002DAA                 pop     rbx
.text:0000000000002DAB                 pop     rbp
.text:0000000000002DAC                 retn
.text:0000000000002DAC ; ---------------------------------------------------------------------------
.text:0000000000002DAD                 align 10h
.text:0000000000002DB0
.text:0000000000002DB0 loc_2DB0:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002DB0                 movzx   edx, byte ptr [rax+1]
.text:0000000000002DB4                 and     edx, 0FFFFFFDFh
.text:0000000000002DB7                 cmp     dl, 54h ; 'T'
.text:0000000000002DBA                 jnz     short loc_2D40
.text:0000000000002DBC                 movzx   edx, byte ptr [rax+2]
.text:0000000000002DC0                 and     edx, 0FFFFFFDFh
.text:0000000000002DC3                 cmp     dl, 46h ; 'F'
.text:0000000000002DC6                 jnz     loc_2D40
.text:0000000000002DCC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002DD0                 jnz     loc_2D40
.text:0000000000002DD6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000002DDA                 jnz     loc_2D40
.text:0000000000002DE0                 cmp     byte ptr [rax+5], 0
.text:0000000000002DE4                 jnz     loc_2D40
.text:0000000000002DEA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002DEE                 lea     rax, unk_5E0C
.text:0000000000002DF5                 lea     rdx, unk_5E10
.text:0000000000002DFC                 cmovnz  rax, rdx
.text:0000000000002E00                 add     rsp, 8
.text:0000000000002E04                 pop     rbx
.text:0000000000002E05                 pop     rbp
.text:0000000000002E06                 retn
.text:0000000000002E06 ; } // starts at 2D20
.text:0000000000002E06 gettext_quote   endp
.text:0000000000002E06
.text:0000000000002E06 ; ---------------------------------------------------------------------------
.text:0000000000002E07                 align 10h
.text:0000000000002E10
.text:0000000000002E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E10
.text:0000000000002E10 ; Attributes: info_from_lumina
.text:0000000000002E10
.text:0000000000002E10 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002E10 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002E10                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002E10
.text:0000000000002E10 var_E0          = dword ptr -0E0h
.text:0000000000002E10 var_DB          = byte ptr -0DBh
.text:0000000000002E10 var_DA          = byte ptr -0DAh
.text:0000000000002E10 var_D9          = byte ptr -0D9h
.text:0000000000002E10 s               = qword ptr -0D8h
.text:0000000000002E10 n               = qword ptr -0D0h
.text:0000000000002E10 var_C8          = qword ptr -0C8h
.text:0000000000002E10 ps              = qword ptr -0C0h
.text:0000000000002E10 var_B8          = qword ptr -0B8h
.text:0000000000002E10 var_B0          = qword ptr -0B0h
.text:0000000000002E10 var_A8          = qword ptr -0A8h
.text:0000000000002E10 s2              = qword ptr -0A0h
.text:0000000000002E10 var_98          = qword ptr -98h
.text:0000000000002E10 var_90          = qword ptr -90h
.text:0000000000002E10 var_88          = qword ptr -88h
.text:0000000000002E10 var_80          = qword ptr -80h
.text:0000000000002E10 var_78          = qword ptr -78h
.text:0000000000002E10 var_70          = dword ptr -70h
.text:0000000000002E10 var_6C          = byte ptr -6Ch
.text:0000000000002E10 var_6B          = byte ptr -6Bh
.text:0000000000002E10 var_6A          = byte ptr -6Ah
.text:0000000000002E10 var_69          = byte ptr -69h
.text:0000000000002E10 var_68          = qword ptr -68h
.text:0000000000002E10 var_60          = qword ptr -60h
.text:0000000000002E10 wc              = dword ptr -4Ch
.text:0000000000002E10 var_48          = qword ptr -48h
.text:0000000000002E10 var_40          = qword ptr -40h
.text:0000000000002E10 arg_0           = qword ptr  8
.text:0000000000002E10 arg_8           = qword ptr  10h
.text:0000000000002E10 arg_10          = qword ptr  18h
.text:0000000000002E10
.text:0000000000002E10 ; __unwind {
.text:0000000000002E10                 push    r15
.text:0000000000002E12                 push    r14
.text:0000000000002E14                 mov     r15d, r8d
.text:0000000000002E17                 push    r13
.text:0000000000002E19                 push    r12
.text:0000000000002E1B                 mov     r14, rdi
.text:0000000000002E1E                 push    rbp
.text:0000000000002E1F                 push    rbx
.text:0000000000002E20                 mov     ebx, r9d
.text:0000000000002E23                 mov     r13, rsi
.text:0000000000002E26                 mov     rbp, rcx
.text:0000000000002E29                 and     ebx, 2
.text:0000000000002E2C                 sub     rsp, 0B8h
.text:0000000000002E33                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000002E3B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002E40                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002E45                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000002E4A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000002E4F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002E57                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002E5C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002E64                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002E69                 mov     rax, fs:28h
.text:0000000000002E72                 mov     [rsp+0E8h+var_40], rax
.text:0000000000002E7A                 xor     eax, eax
.text:0000000000002E7C                 call    ___ctype_get_mb_cur_max
.text:0000000000002E81                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002E85                 mov     [rsp+0E8h+var_90], rax
.text:0000000000002E8A                 ja      def_2EA1        ; jumptable 00000000000121F1 default case
.text:0000000000002E90                 lea     rcx, jpt_2EA1
.text:0000000000002E97                 mov     edx, r15d
.text:0000000000002E9A                 movsxd  rax, ds:(jpt_2EA1 - 5E80h)[rcx+rdx*4]
.text:0000000000002E9E                 add     rax, rcx
.text:0000000000002EA1                 jmp     rax             ; switch jump
.text:0000000000002EA3 ; ---------------------------------------------------------------------------
.text:0000000000002EA3
.text:0000000000002EA3 loc_2EA3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002EA3                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002EA3                                         ; DATA XREF: ...
.text:0000000000002EA3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002EA8                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002EAD                 xor     r12d, r12d
.text:0000000000002EB0                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002EB9                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002EBE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002EC3
.text:0000000000002EC3 loc_2EC3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002EC3                 lea     rax, asc_5E1D   ; "'"
.text:0000000000002ECA                 mov     [rsp+0E8h+n], 1
.text:0000000000002ED3                 xor     r15d, r15d
.text:0000000000002ED6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002EDE                 mov     [rsp+0E8h+s2], rax
.text:0000000000002EE3
.text:0000000000002EE3 loc_2EE3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002EE3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002EE3                 xor     r11d, r11d
.text:0000000000002EE6                 mov     rax, rbp
.text:0000000000002EE9                 mov     r8d, r12d
.text:0000000000002EEC                 mov     rbp, r11
.text:0000000000002EEF                 mov     r11, rax
.text:0000000000002EF2                 nop     word ptr [rax+rax+00h]
.text:0000000000002EF8
.text:0000000000002EF8 loc_2EF8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002EF8                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002EF8                 cmp     r11, rbp
.text:0000000000002EFB                 setnz   r12b
.text:0000000000002EFF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002F03                 jnz     short loc_2F12
.text:0000000000002F05                 mov     rax, [rsp+0E8h+s]
.text:0000000000002F0A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000002F0E                 setnz   r12b
.text:0000000000002F12
.text:0000000000002F12 loc_2F12:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002F12                 test    r12b, r12b
.text:0000000000002F15                 jz      loc_3570
.text:0000000000002F1B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002F20                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002F25                 lea     r9, [rdi+rbp]
.text:0000000000002F29                 setnz   al
.text:0000000000002F2C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002F30                 mov     r10d, eax
.text:0000000000002F33                 jz      loc_2FE0
.text:0000000000002F39                 mov     rax, [rsp+0E8h+n]
.text:0000000000002F3E                 test    rax, rax
.text:0000000000002F41                 jz      loc_3370
.text:0000000000002F47                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002F4B                 lea     rbx, [rbp+rax+0]
.text:0000000000002F50                 jnz     short loc_2F80
.text:0000000000002F52                 cmp     rax, 1
.text:0000000000002F56                 jbe     short loc_2F80
.text:0000000000002F58                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002F5D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002F62                 mov     [rsp+0E8h+ps], r9
.text:0000000000002F67                 call    _strlen
.text:0000000000002F6C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002F72                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002F78                 mov     r11, rax
.text:0000000000002F7B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002F80
.text:0000000000002F80 loc_2F80:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002F80                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002F80                 cmp     rbx, r11
.text:0000000000002F83                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002F88                 ja      loc_3540
.text:0000000000002F8E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002F93                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002F98                 mov     rdi, r9         ; s1
.text:0000000000002F9B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002FA0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002FA5                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002FAA                 call    _memcmp
.text:0000000000002FAF                 test    eax, eax
.text:0000000000002FB1                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002FB6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002FBC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002FC1                 jnz     loc_3540
.text:0000000000002FC7                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002FCC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002FD2                 jnz     loc_3F55
.text:0000000000002FD8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002FE0
.text:0000000000002FE0 loc_2FE0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002FE0                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002FE0                 movzx   ebx, byte ptr [r9]
.text:0000000000002FE4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002FE7                 ja      def_2FFE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002FED                 lea     rcx, jpt_2FFE
.text:0000000000002FF4                 movzx   edx, bl
.text:0000000000002FF7                 movsxd  rax, ds:(jpt_2FFE - 5EACh)[rcx+rdx*4]
.text:0000000000002FFB                 add     rax, rcx
.text:0000000000002FFE                 jmp     rax             ; switch jump
.text:0000000000003000 ; ---------------------------------------------------------------------------
.text:0000000000003000
.text:0000000000003000 loc_3000:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003000                                         ; DATA XREF: .rodata:jpt_338A↓o
.text:0000000000003000                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000003003
.text:0000000000003003 loc_3003:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003003                                         ; DATA XREF: .rodata:jpt_2FFE↓o
.text:0000000000003003                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000003007                 setnz   al
.text:000000000000300A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000300E                 jnz     short loc_301C
.text:0000000000003010                 mov     rax, [rsp+0E8h+s]
.text:0000000000003015                 cmp     byte ptr [rax+1], 0
.text:0000000000003019                 setnz   al
.text:000000000000301C
.text:000000000000301C loc_301C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000301C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003021                 setz    dl
.text:0000000000003024                 test    al, al
.text:0000000000003026                 jz      loc_3278
.text:000000000000302C
.text:000000000000302C loc_302C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000302C                 xor     r12d, r12d
.text:000000000000302F                 xor     eax, eax
.text:0000000000003031                 nop     dword ptr [rax+00000000h]
.text:0000000000003038
.text:0000000000003038 loc_3038:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000003038                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000003038                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000303D                 jnz     loc_3152
.text:0000000000003043                 test    dl, dl
.text:0000000000003045                 jnz     loc_3152
.text:000000000000304B
.text:000000000000304B loc_304B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000304B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000003050                 test    rsi, rsi
.text:0000000000003053                 jz      short loc_3069
.text:0000000000003055                 mov     edx, ebx
.text:0000000000003057                 shr     dl, 5
.text:000000000000305A                 movzx   edx, dl
.text:000000000000305D                 mov     edx, [rsi+rdx*4]
.text:0000000000003060                 bt      edx, ebx
.text:0000000000003063                 jb      loc_31B3
.text:0000000000003069
.text:0000000000003069 loc_3069:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000003069                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000003069                 test    r10b, r10b
.text:000000000000306C                 jnz     loc_31B3
.text:0000000000003072                 xor     eax, 1
.text:0000000000003075                 add     rbp, 1
.text:0000000000003079                 and     eax, r8d
.text:000000000000307C
.text:000000000000307C loc_307C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000307C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000307C                 test    al, al
.text:000000000000307E                 jz      short loc_30A0
.text:0000000000003080                 cmp     r13, r15
.text:0000000000003083                 jbe     short loc_308A
.text:0000000000003085                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000308A
.text:000000000000308A loc_308A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000308A                 lea     rax, [r15+1]
.text:000000000000308E                 cmp     r13, rax
.text:0000000000003091                 jbe     short loc_3099
.text:0000000000003093                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003099
.text:0000000000003099 loc_3099:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003099                 add     r15, 2
.text:000000000000309D                 xor     r8d, r8d
.text:00000000000030A0
.text:00000000000030A0 loc_30A0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:00000000000030A0                                         ; quotearg_buffer_restyled+403↓j ...
.text:00000000000030A0                 cmp     r15, r13
.text:00000000000030A3                 jnb     short loc_30A9
.text:00000000000030A5                 mov     [r14+r15], bl
.text:00000000000030A9
.text:00000000000030A9 loc_30A9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:00000000000030A9                 movzx   edi, [rsp+0E8h+var_DA]
.text:00000000000030AE                 add     r15, 1
.text:00000000000030B2                 mov     eax, 0
.text:00000000000030B7                 test    r12b, r12b
.text:00000000000030BA                 cmovz   edi, eax
.text:00000000000030BD                 mov     [rsp+0E8h+var_DA], dil
.text:00000000000030C2                 jmp     loc_2EF8
.text:00000000000030C2 ; ---------------------------------------------------------------------------
.text:00000000000030C7                 align 10h
.text:00000000000030D0
.text:00000000000030D0 loc_30D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000030D0                                         ; DATA XREF: .rodata:jpt_338A↓o
.text:00000000000030D0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000030D3
.text:00000000000030D3 loc_30D3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030D3                                         ; DATA XREF: .rodata:jpt_2FFE↓o
.text:00000000000030D3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000030D7                 cmp     eax, 2
.text:00000000000030DA                 jz      loc_3698
.text:00000000000030E0                 cmp     eax, 5
.text:00000000000030E3                 jz      loc_3658
.text:00000000000030E9                 cmp     eax, 2
.text:00000000000030EC                 mov     ebx, 3Fh ; '?'
.text:00000000000030F1                 setz    dl
.text:00000000000030F4                 xor     r12d, r12d
.text:00000000000030F7                 xor     eax, eax
.text:00000000000030F9                 jmp     loc_3038
.text:00000000000030F9 ; ---------------------------------------------------------------------------
.text:00000000000030FE                 align 20h
.text:0000000000003100
.text:0000000000003100 loc_3100:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003100                                         ; DATA XREF: .rodata:jpt_338A↓o
.text:0000000000003100                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000003103
.text:0000000000003103 loc_3103:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003103                                         ; DATA XREF: .rodata:jpt_2FFE↓o
.text:0000000000003103                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000003108                 jz      loc_3610
.text:000000000000310E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003113                 xor     edx, edx
.text:0000000000003115                 xor     eax, eax
.text:0000000000003117                 mov     ebx, 27h ; '''
.text:000000000000311C                 jmp     loc_3038
.text:000000000000311C ; ---------------------------------------------------------------------------
.text:0000000000003121                 align 8
.text:0000000000003128
.text:0000000000003128 loc_3128:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003128                                         ; DATA XREF: .rodata:jpt_2FFE↓o
.text:0000000000003128                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000312D                 mov     ebx, 74h ; 't'
.text:0000000000003132
.text:0000000000003132 loc_3132:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000003132                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000003132                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003137                 setz    al
.text:000000000000313A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000313E                 jnz     loc_328E
.text:0000000000003144
.text:0000000000003144 loc_3144:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000003144                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000003144                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003149                 jnz     short loc_31B0
.text:000000000000314B
.text:000000000000314B loc_314B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000314B                 mov     ebx, edx
.text:000000000000314D                 xor     r12d, r12d
.text:0000000000003150                 xor     eax, eax
.text:0000000000003152
.text:0000000000003152 loc_3152:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000003152                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000003152                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003157                 jnz     loc_304B
.text:000000000000315D                 jmp     loc_3069
.text:000000000000315D ; ---------------------------------------------------------------------------
.text:0000000000003162                 align 8
.text:0000000000003168
.text:0000000000003168 loc_3168:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003168                                         ; DATA XREF: .rodata:jpt_2FFE↓o
.text:0000000000003168                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000316D                 mov     ebx, 62h ; 'b'
.text:0000000000003172                 jmp     short loc_3144
.text:0000000000003172 ; ---------------------------------------------------------------------------
.text:0000000000003174                 align 8
.text:0000000000003178
.text:0000000000003178 loc_3178:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003178                                         ; DATA XREF: .rodata:jpt_2FFE↓o
.text:0000000000003178                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000317D                 jz      loc_3550
.text:0000000000003183                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003188                 jz      loc_33A0
.text:000000000000318E
.text:000000000000318E loc_318E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000318E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003193                 jz      loc_33A0
.text:0000000000003199                 cmp     [rsp+0E8h+n], 0
.text:000000000000319F                 jnz     loc_355B
.text:00000000000031A5                 mov     ebx, 5Ch ; '\'
.text:00000000000031AA                 nop     word ptr [rax+rax+00h]
.text:00000000000031B0
.text:00000000000031B0 loc_31B0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000031B0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000031B0                 xor     r12d, r12d
.text:00000000000031B3
.text:00000000000031B3 loc_31B3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000031B3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000031B3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000031B8                 setz    dl
.text:00000000000031BB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000031C0                 mov     eax, edx
.text:00000000000031C2                 jnz     loc_3A18
.text:00000000000031C8                 mov     eax, r8d
.text:00000000000031CB                 xor     eax, 1
.text:00000000000031CE                 and     al, dl
.text:00000000000031D0                 jz      short loc_3201
.text:00000000000031D2                 cmp     r13, r15
.text:00000000000031D5                 jbe     short loc_31DC
.text:00000000000031D7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000031DC
.text:00000000000031DC loc_31DC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000031DC                 lea     rdx, [r15+1]
.text:00000000000031E0                 cmp     r13, rdx
.text:00000000000031E3                 jbe     short loc_31EB
.text:00000000000031E5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000031EB
.text:00000000000031EB loc_31EB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000031EB                 lea     rdx, [r15+2]
.text:00000000000031EF                 cmp     r13, rdx
.text:00000000000031F2                 jbe     short loc_31FA
.text:00000000000031F4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000031FA
.text:00000000000031FA loc_31FA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000031FA                 add     r15, 3
.text:00000000000031FE                 mov     r8d, eax
.text:0000000000003201
.text:0000000000003201 loc_3201:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003201                 cmp     r13, r15
.text:0000000000003204                 jbe     short loc_320B
.text:0000000000003206                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000320B
.text:000000000000320B loc_320B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000320B                 add     r15, 1
.text:000000000000320F                 add     rbp, 1
.text:0000000000003213                 jmp     loc_30A0
.text:0000000000003213 ; ---------------------------------------------------------------------------
.text:0000000000003218                 align 20h
.text:0000000000003220
.text:0000000000003220 loc_3220:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003220                                         ; DATA XREF: .rodata:jpt_2FFE↓o
.text:0000000000003220                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003225                 jnz     loc_33F3
.text:000000000000322B                 xor     edx, edx
.text:000000000000322D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003232                 jz      loc_314B
.text:0000000000003238                 add     rbp, 1
.text:000000000000323C                 jmp     loc_2EF8
.text:000000000000323C ; ---------------------------------------------------------------------------
.text:0000000000003241                 align 8
.text:0000000000003248
.text:0000000000003248 loc_3248:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003248                                         ; DATA XREF: .rodata:jpt_2FFE↓o
.text:0000000000003248                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000324D                 setz    dl
.text:0000000000003250                 xor     eax, eax
.text:0000000000003252                 jmp     loc_3038
.text:0000000000003252 ; ---------------------------------------------------------------------------
.text:0000000000003257                 align 20h
.text:0000000000003260
.text:0000000000003260 loc_3260:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003260                                         ; DATA XREF: .rodata:jpt_2FFE↓o
.text:0000000000003260                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003265                 mov     ebx, 61h ; 'a'
.text:000000000000326A                 jmp     loc_3144
.text:000000000000326A ; ---------------------------------------------------------------------------
.text:000000000000326F                 align 10h
.text:0000000000003270
.text:0000000000003270 loc_3270:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003270                                         ; DATA XREF: .rodata:jpt_2FFE↓o
.text:0000000000003270                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003275                 setz    dl
.text:0000000000003278
.text:0000000000003278 loc_3278:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003278                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003278                 test    rbp, rbp
.text:000000000000327B                 jnz     loc_302C
.text:0000000000003281
.text:0000000000003281 loc_3281:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003281                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003281                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003286                 and     al, dl
.text:0000000000003288                 jz      loc_3038
.text:000000000000328E
.text:000000000000328E loc_328E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000328E                 mov     rbp, r11
.text:0000000000003291                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003299                 jmp     loc_3999
.text:0000000000003299 ; ---------------------------------------------------------------------------
.text:000000000000329E                 align 20h
.text:00000000000032A0
.text:00000000000032A0 loc_32A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000032A0                                         ; DATA XREF: .rodata:jpt_2FFE↓o
.text:00000000000032A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000032A5                 setz    dl
.text:00000000000032A8                 xor     r12d, r12d
.text:00000000000032AB                 jmp     short loc_3281
.text:00000000000032AB ; ---------------------------------------------------------------------------
.text:00000000000032AD                 align 10h
.text:00000000000032B0
.text:00000000000032B0 loc_32B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000032B0                                         ; DATA XREF: .rodata:jpt_2FFE↓o
.text:00000000000032B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000032B5                 mov     ebx, 20h ; ' '
.text:00000000000032BA                 setz    dl
.text:00000000000032BD                 jmp     short loc_3281
.text:00000000000032BD ; ---------------------------------------------------------------------------
.text:00000000000032BF                 align 20h
.text:00000000000032C0
.text:00000000000032C0 loc_32C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000032C0                                         ; DATA XREF: .rodata:jpt_2FFE↓o
.text:00000000000032C0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000032C5                 mov     ebx, 72h ; 'r'
.text:00000000000032CA                 jmp     loc_3132
.text:00000000000032CA ; ---------------------------------------------------------------------------
.text:00000000000032CF                 align 10h
.text:00000000000032D0
.text:00000000000032D0 loc_32D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000032D0                                         ; DATA XREF: .rodata:jpt_2FFE↓o
.text:00000000000032D0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000032D5                 mov     ebx, 66h ; 'f'
.text:00000000000032DA                 jmp     loc_3144
.text:00000000000032DA ; ---------------------------------------------------------------------------
.text:00000000000032DF                 align 20h
.text:00000000000032E0
.text:00000000000032E0 loc_32E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000032E0                                         ; DATA XREF: .rodata:jpt_2FFE↓o
.text:00000000000032E0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000032E5                 mov     ebx, 76h ; 'v'
.text:00000000000032EA                 jmp     loc_3144
.text:00000000000032EA ; ---------------------------------------------------------------------------
.text:00000000000032EF                 align 10h
.text:00000000000032F0
.text:00000000000032F0 loc_32F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000032F0                                         ; DATA XREF: .rodata:jpt_2FFE↓o
.text:00000000000032F0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000032F5                 mov     ebx, 6Eh ; 'n'
.text:00000000000032FA                 jmp     loc_3132
.text:00000000000032FA ; ---------------------------------------------------------------------------
.text:00000000000032FF                 align 20h
.text:0000000000003300
.text:0000000000003300 def_338A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003300                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003300                                         ; DATA XREF: ...
.text:0000000000003300                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003303                 nop     dword ptr [rax+rax+00h]
.text:0000000000003308
.text:0000000000003308 def_2FFE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003308                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003308                                         ; DATA XREF: ...
.text:0000000000003308                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000330E                 jnz     loc_36B8
.text:0000000000003314                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003319                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000331E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003323                 call    ___ctype_b_loc
.text:0000000000003328                 mov     rcx, [rax]
.text:000000000000332B                 movzx   edx, bl
.text:000000000000332E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003334                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000333A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000333F                 mov     edi, 1
.text:0000000000003344                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003348                 and     ax, 4000h
.text:000000000000334C                 setnz   r12b
.text:0000000000003350                 setz    al
.text:0000000000003353                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003357
.text:0000000000003357 loc_3357:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003357                 test    al, al
.text:0000000000003359                 jnz     loc_3CF1
.text:000000000000335F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003364                 setz    dl
.text:0000000000003367                 jmp     loc_3038
.text:0000000000003367 ; ---------------------------------------------------------------------------
.text:000000000000336C                 align 10h
.text:0000000000003370
.text:0000000000003370 loc_3370:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000003370                 movzx   ebx, byte ptr [r9]
.text:0000000000003374                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003377                 ja      short def_338A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003379                 lea     rcx, jpt_338A
.text:0000000000003380                 movzx   edx, bl
.text:0000000000003383                 movsxd  rax, ds:(jpt_338A - 60A8h)[rcx+rdx*4]
.text:0000000000003387                 add     rax, rcx
.text:000000000000338A                 jmp     rax             ; switch jump
.text:000000000000338A ; ---------------------------------------------------------------------------
.text:000000000000338C                 align 10h
.text:0000000000003390
.text:0000000000003390 loc_3390:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003390                                         ; DATA XREF: .rodata:jpt_338A↓o
.text:0000000000003390                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000003393                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003398                 jnz     loc_318E
.text:000000000000339E                 xchg    ax, ax
.text:00000000000033A0
.text:00000000000033A0 loc_33A0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000033A0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000033A0                 mov     edx, 5Ch ; '\'
.text:00000000000033A5                 mov     ebx, 5Ch ; '\'
.text:00000000000033AA                 jmp     loc_3144
.text:00000000000033AA ; ---------------------------------------------------------------------------
.text:00000000000033AF                 align 10h
.text:00000000000033B0
.text:00000000000033B0 loc_33B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000033B0                                         ; DATA XREF: .rodata:jpt_338A↓o
.text:00000000000033B0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000033B5                 xor     r10d, r10d
.text:00000000000033B8                 mov     ebx, 66h ; 'f'
.text:00000000000033BD                 jmp     loc_3144
.text:00000000000033BD ; ---------------------------------------------------------------------------
.text:00000000000033C2                 align 8
.text:00000000000033C8
.text:00000000000033C8 loc_33C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000033C8                                         ; DATA XREF: .rodata:jpt_338A↓o
.text:00000000000033C8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000033CD                 xor     r10d, r10d
.text:00000000000033D0                 mov     ebx, 6Eh ; 'n'
.text:00000000000033D5                 jmp     loc_3132
.text:00000000000033D5 ; ---------------------------------------------------------------------------
.text:00000000000033DA                 align 20h
.text:00000000000033E0
.text:00000000000033E0 loc_33E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000033E0                                         ; DATA XREF: .rodata:jpt_338A↓o
.text:00000000000033E0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000033E5                 jmp     loc_31B0
.text:00000000000033E5 ; ---------------------------------------------------------------------------
.text:00000000000033EA                 align 10h
.text:00000000000033F0
.text:00000000000033F0 loc_33F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000033F0                                         ; DATA XREF: .rodata:jpt_338A↓o
.text:00000000000033F0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000033F3
.text:00000000000033F3 loc_33F3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000033F3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000033F8                 setz    dl
.text:00000000000033FB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003400                 jnz     loc_3F9A
.text:0000000000003406                 mov     eax, r8d
.text:0000000000003409                 mov     rcx, r15
.text:000000000000340C                 xor     eax, 1
.text:000000000000340F                 and     al, dl
.text:0000000000003411                 jz      short loc_3440
.text:0000000000003413                 cmp     r13, r15
.text:0000000000003416                 jbe     short loc_341D
.text:0000000000003418                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000341D
.text:000000000000341D loc_341D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000341D                 lea     rcx, [r15+1]
.text:0000000000003421                 cmp     r13, rcx
.text:0000000000003424                 jbe     short loc_342C
.text:0000000000003426                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000342C
.text:000000000000342C loc_342C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000342C                 lea     rcx, [r15+2]
.text:0000000000003430                 cmp     r13, rcx
.text:0000000000003433                 ja      loc_3A69
.text:0000000000003439
.text:0000000000003439 loc_3439:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003439                 lea     rcx, [r15+3]
.text:000000000000343D                 mov     r8d, eax
.text:0000000000003440
.text:0000000000003440 loc_3440:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003440                 cmp     r13, rcx
.text:0000000000003443                 jbe     short loc_344A
.text:0000000000003445                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000344A
.text:000000000000344A loc_344A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000344A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000344F                 lea     r15, [rcx+1]
.text:0000000000003453                 jz      loc_3A59
.text:0000000000003459                 lea     rax, [rbp+1]
.text:000000000000345D                 cmp     rax, r11
.text:0000000000003460                 jnb     short loc_347B
.text:0000000000003462                 mov     rax, [rsp+0E8h+s]
.text:0000000000003467                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000346C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003470                 sub     eax, 30h ; '0'
.text:0000000000003473                 cmp     al, 9
.text:0000000000003475                 jbe     loc_3CA9
.text:000000000000347B
.text:000000000000347B loc_347B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000347B                 mov     eax, r12d
.text:000000000000347E                 mov     ebx, 30h ; '0'
.text:0000000000003483                 xor     r12d, r12d
.text:0000000000003486                 jmp     loc_3038
.text:0000000000003486 ; ---------------------------------------------------------------------------
.text:000000000000348B                 align 10h
.text:0000000000003490
.text:0000000000003490 loc_3490:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003490                                         ; DATA XREF: .rodata:jpt_338A↓o
.text:0000000000003490                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003495                 mov     r12d, r10d
.text:0000000000003498                 setz    dl
.text:000000000000349B                 xor     r10d, r10d
.text:000000000000349E                 xor     eax, eax
.text:00000000000034A0                 jmp     loc_3038
.text:00000000000034A0 ; ---------------------------------------------------------------------------
.text:00000000000034A5                 align 8
.text:00000000000034A8
.text:00000000000034A8 loc_34A8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000034A8                                         ; DATA XREF: .rodata:jpt_338A↓o
.text:00000000000034A8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000034AD                 setz    dl
.text:00000000000034B0                 xor     r10d, r10d
.text:00000000000034B3                 jmp     loc_3278
.text:00000000000034B3 ; ---------------------------------------------------------------------------
.text:00000000000034B8                 align 20h
.text:00000000000034C0
.text:00000000000034C0 loc_34C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000034C0                                         ; DATA XREF: .rodata:jpt_338A↓o
.text:00000000000034C0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000034C5                 setz    dl
.text:00000000000034C8                 xor     r10d, r10d
.text:00000000000034CB                 xor     r12d, r12d
.text:00000000000034CE                 jmp     loc_3281
.text:00000000000034CE ; ---------------------------------------------------------------------------
.text:00000000000034D3                 align 8
.text:00000000000034D8
.text:00000000000034D8 loc_34D8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000034D8                                         ; DATA XREF: .rodata:jpt_338A↓o
.text:00000000000034D8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000034DD                 mov     r12d, r10d
.text:00000000000034E0                 mov     ebx, 20h ; ' '
.text:00000000000034E5                 setz    dl
.text:00000000000034E8                 xor     r10d, r10d
.text:00000000000034EB                 jmp     loc_3281
.text:00000000000034F0 ; ---------------------------------------------------------------------------
.text:00000000000034F0
.text:00000000000034F0 loc_34F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000034F0                                         ; DATA XREF: .rodata:jpt_338A↓o
.text:00000000000034F0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000034F5                 xor     r10d, r10d
.text:00000000000034F8                 mov     ebx, 72h ; 'r'
.text:00000000000034FD                 jmp     loc_3132
.text:00000000000034FD ; ---------------------------------------------------------------------------
.text:0000000000003502                 align 8
.text:0000000000003508
.text:0000000000003508 loc_3508:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003508                                         ; DATA XREF: .rodata:jpt_338A↓o
.text:0000000000003508                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000350D                 jmp     loc_31B0
.text:000000000000350D ; ---------------------------------------------------------------------------
.text:0000000000003512                 align 8
.text:0000000000003518
.text:0000000000003518 loc_3518:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003518                                         ; DATA XREF: .rodata:jpt_338A↓o
.text:0000000000003518                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000351D                 xor     r10d, r10d
.text:0000000000003520                 mov     ebx, 74h ; 't'
.text:0000000000003525                 jmp     loc_3132
.text:0000000000003525 ; ---------------------------------------------------------------------------
.text:000000000000352A                 align 10h
.text:0000000000003530
.text:0000000000003530 loc_3530:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003530                                         ; DATA XREF: .rodata:jpt_338A↓o
.text:0000000000003530                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003535                 jmp     loc_31B0
.text:0000000000003535 ; ---------------------------------------------------------------------------
.text:000000000000353A                 align 20h
.text:0000000000003540
.text:0000000000003540 loc_3540:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003540                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003540                 xor     r10d, r10d
.text:0000000000003543                 jmp     loc_2FE0
.text:0000000000003543 ; ---------------------------------------------------------------------------
.text:0000000000003548                 align 10h
.text:0000000000003550
.text:0000000000003550 loc_3550:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003550                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003555                 jnz     loc_3EC0
.text:000000000000355B
.text:000000000000355B loc_355B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000355B                 add     rbp, 1
.text:000000000000355F                 mov     eax, r8d
.text:0000000000003562                 xor     r12d, r12d
.text:0000000000003565                 mov     ebx, 5Ch ; '\'
.text:000000000000356A                 jmp     loc_307C
.text:000000000000356A ; ---------------------------------------------------------------------------
.text:000000000000356F                 align 10h
.text:0000000000003570
.text:0000000000003570 loc_3570:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003570                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003575                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000357A                 mov     r12d, r8d
.text:000000000000357D                 mov     rbp, r11
.text:0000000000003580                 setz    dl
.text:0000000000003583                 mov     eax, ebx
.text:0000000000003585                 test    r15, r15
.text:0000000000003588                 setz    cl
.text:000000000000358B                 and     eax, edx
.text:000000000000358D                 and     al, cl
.text:000000000000358F                 jnz     loc_3FF6
.text:0000000000003595                 mov     eax, ebx
.text:0000000000003597                 xor     eax, 1
.text:000000000000359A                 and     dl, al
.text:000000000000359C                 jz      loc_3F0C
.text:00000000000035A2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000035A7                 jz      loc_3F0A
.text:00000000000035AD                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000035B2                 jnz     loc_3FAD
.text:00000000000035B8                 test    r13, r13
.text:00000000000035BB                 setz    al
.text:00000000000035BE                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000035C4                 setnz   dl
.text:00000000000035C7                 and     al, dl
.text:00000000000035C9                 jz      loc_3FEC
.text:00000000000035CF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000035D4
.text:00000000000035D4 loc_35D4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000035D4                 lea     rbx, asc_5E1D   ; "'"
.text:00000000000035DB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000035DF                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000035E7                 mov     r15d, 1
.text:00000000000035ED                 mov     [rsp+0E8h+n], 1
.text:00000000000035F6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000035FB                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003600                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003604                 jmp     loc_2EE3
.text:0000000000003604 ; ---------------------------------------------------------------------------
.text:0000000000003609                 align 10h
.text:0000000000003610
.text:0000000000003610 loc_3610:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003610                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003615                 jnz     loc_3EC0
.text:000000000000361B                 test    r13, r13
.text:000000000000361E                 jz      loc_3A20
.text:0000000000003624                 xor     edx, edx
.text:0000000000003626                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000362C                 jnz     loc_3A20
.text:0000000000003632
.text:0000000000003632 loc_3632:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003632                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003632                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003637                 add     r15, 3
.text:000000000000363B                 xor     eax, eax
.text:000000000000363D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003642                 xor     r8d, r8d
.text:0000000000003645                 mov     r13, rdx
.text:0000000000003648                 mov     ebx, 27h ; '''
.text:000000000000364D                 jmp     loc_3069
.text:000000000000364D ; ---------------------------------------------------------------------------
.text:0000000000003652                 align 8
.text:0000000000003658
.text:0000000000003658 loc_3658:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003658                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000365D                 jz      short loc_3680
.text:000000000000365F                 lea     rcx, [rbp+2]
.text:0000000000003663                 cmp     rcx, r11
.text:0000000000003666                 jnb     short loc_3680
.text:0000000000003668                 mov     rax, [rsp+0E8h+s]
.text:000000000000366D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000003672                 jz      loc_3E02
.text:0000000000003678                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003680
.text:0000000000003680 loc_3680:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003680                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003680                 xor     edx, edx
.text:0000000000003682                 xor     r12d, r12d
.text:0000000000003685                 xor     eax, eax
.text:0000000000003687                 mov     ebx, 3Fh ; '?'
.text:000000000000368C                 jmp     loc_3038
.text:000000000000368C ; ---------------------------------------------------------------------------
.text:0000000000003691                 align 8
.text:0000000000003698
.text:0000000000003698 loc_3698:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000003698                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000369D                 jnz     loc_3EC0
.text:00000000000036A3                 xor     r12d, r12d
.text:00000000000036A6                 xor     eax, eax
.text:00000000000036A8                 mov     ebx, 3Fh ; '?'
.text:00000000000036AD                 jmp     loc_3069
.text:00000000000036AD ; ---------------------------------------------------------------------------
.text:00000000000036B2                 align 8
.text:00000000000036B8
.text:00000000000036B8 loc_36B8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000036B8                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000036C0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000036C4                 mov     [rsp+0E8h+var_48], 0
.text:00000000000036D0                 mov     [rsp+0E8h+ps], rax
.text:00000000000036D5                 jnz     short loc_3704
.text:00000000000036D7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000036DC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:00000000000036E1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:00000000000036E6                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000036EB                 call    _strlen
.text:00000000000036F0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:00000000000036F6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000036FC                 mov     r11, rax
.text:00000000000036FF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003704
.text:0000000000003704 loc_3704:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003704                 lea     rax, [rsp+0E8h+wc]
.text:000000000000370C                 xor     ecx, ecx
.text:000000000000370E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003712                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003717                 mov     rbx, rcx
.text:000000000000371A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003722                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003727                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000372C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003734                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003739                 mov     [rsp+0E8h+var_78], r13
.text:000000000000373E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003743
.text:0000000000003743 loc_3743:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003743                 mov     rax, [rsp+0E8h+s]
.text:0000000000003748                 lea     r14, [rbp+rbx+0]
.text:000000000000374D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003752                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003757                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000375C                 lea     r13, [rax+r14]
.text:0000000000003760                 sub     rdx, r14
.text:0000000000003763                 mov     rsi, r13
.text:0000000000003766                 call    rpl_mbrtowc
.text:000000000000376B                 test    rax, rax
.text:000000000000376E                 mov     r15, rax
.text:0000000000003771                 jz      short loc_37C1
.text:0000000000003773                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003777                 jz      loc_3D95
.text:000000000000377D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003781                 jz      loc_3D21
.text:0000000000003787                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000378C                 setz    al
.text:000000000000378F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003793                 jnz     loc_3930
.text:0000000000003799
.text:0000000000003799 loc_3799:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000003799                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000003799                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000037A0                 call    _iswprint
.text:00000000000037A5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000037AA                 test    eax, eax
.text:00000000000037AC                 mov     eax, 0
.text:00000000000037B1                 cmovz   r12d, eax
.text:00000000000037B5                 add     rbx, r15
.text:00000000000037B8                 call    _mbsinit
.text:00000000000037BD                 test    eax, eax
.text:00000000000037BF                 jz      short loc_3743
.text:00000000000037C1
.text:00000000000037C1 loc_37C1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:00000000000037C1                 mov     edx, r12d
.text:00000000000037C4                 mov     rdi, rbx
.text:00000000000037C7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000037CD                 xor     edx, 1
.text:00000000000037D0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000037D5                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000037DB                 and     dl, [rsp+0E8h+var_DB]
.text:00000000000037DF                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000037E7                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000037EC                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000037F1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000037F6
.text:00000000000037F6 loc_37F6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:00000000000037F6                                         ; quotearg_buffer_restyled+FB8↓j
.text:00000000000037F6                 cmp     rdi, 1
.text:00000000000037FA                 jbe     loc_3DFB
.text:0000000000003800
.text:0000000000003800 loc_3800:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003800                 mov     rcx, rdi
.text:0000000000003803                 xor     esi, esi
.text:0000000000003805                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000380B                 add     rcx, rbp
.text:000000000000380E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003813                 jmp     loc_38CE
.text:0000000000003813 ; ---------------------------------------------------------------------------
.text:0000000000003818                 align 20h
.text:0000000000003820
.text:0000000000003820 loc_3820:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003820                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003825                 setz    al
.text:0000000000003828                 test    r9b, r9b
.text:000000000000382B                 jnz     loc_3CE0
.text:0000000000003831                 mov     esi, r8d
.text:0000000000003834                 xor     esi, 1
.text:0000000000003837                 and     al, sil
.text:000000000000383A                 jz      short loc_386B
.text:000000000000383C                 cmp     r13, r15
.text:000000000000383F                 jbe     short loc_3846
.text:0000000000003841                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003846
.text:0000000000003846 loc_3846:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003846                 lea     rsi, [r15+1]
.text:000000000000384A                 cmp     r13, rsi
.text:000000000000384D                 jbe     short loc_3855
.text:000000000000384F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003855
.text:0000000000003855 loc_3855:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003855                 lea     rsi, [r15+2]
.text:0000000000003859                 cmp     r13, rsi
.text:000000000000385C                 jbe     short loc_3864
.text:000000000000385E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003864
.text:0000000000003864 loc_3864:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000003864                 add     r15, 3
.text:0000000000003868                 mov     r8d, eax
.text:000000000000386B
.text:000000000000386B loc_386B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000386B                 cmp     r13, r15
.text:000000000000386E                 jbe     short loc_3875
.text:0000000000003870                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003875
.text:0000000000003875 loc_3875:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000003875                 lea     rax, [r15+1]
.text:0000000000003879                 cmp     r13, rax
.text:000000000000387C                 jbe     short loc_388B
.text:000000000000387E                 mov     eax, ebx
.text:0000000000003880                 shr     al, 6
.text:0000000000003883                 add     eax, 30h ; '0'
.text:0000000000003886                 mov     [r14+r15+1], al
.text:000000000000388B
.text:000000000000388B loc_388B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000388B                 lea     rax, [r15+2]
.text:000000000000388F                 cmp     r13, rax
.text:0000000000003892                 jbe     short loc_38A4
.text:0000000000003894                 mov     eax, ebx
.text:0000000000003896                 shr     al, 3
.text:0000000000003899                 and     eax, 7
.text:000000000000389C                 add     eax, 30h ; '0'
.text:000000000000389F                 mov     [r14+r15+2], al
.text:00000000000038A4
.text:00000000000038A4 loc_38A4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:00000000000038A4                 and     ebx, 7
.text:00000000000038A7                 add     rbp, 1
.text:00000000000038AB                 add     r15, 3
.text:00000000000038AF                 add     ebx, 30h ; '0'
.text:00000000000038B2                 cmp     rbp, rcx
.text:00000000000038B5                 jnb     loc_30A0
.text:00000000000038BB                 mov     esi, edx
.text:00000000000038BD
.text:00000000000038BD loc_38BD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000038BD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000038BD                 cmp     r13, r15
.text:00000000000038C0                 jbe     short loc_38C6
.text:00000000000038C2                 mov     [r14+r15], bl
.text:00000000000038C6
.text:00000000000038C6 loc_38C6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:00000000000038C6                 movzx   ebx, byte ptr [rdi+rbp]
.text:00000000000038CA                 add     r15, 1
.text:00000000000038CE
.text:00000000000038CE loc_38CE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:00000000000038CE                 test    dl, dl
.text:00000000000038D0                 jnz     loc_3820
.text:00000000000038D6                 mov     eax, esi
.text:00000000000038D8                 xor     eax, 1
.text:00000000000038DB                 and     eax, r8d
.text:00000000000038DE                 test    r10b, r10b
.text:00000000000038E1                 jz      short loc_38F1
.text:00000000000038E3                 cmp     r13, r15
.text:00000000000038E6                 jbe     short loc_38ED
.text:00000000000038E8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000038ED
.text:00000000000038ED loc_38ED:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000038ED                 add     r15, 1
.text:00000000000038F1
.text:00000000000038F1 loc_38F1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:00000000000038F1                 add     rbp, 1
.text:00000000000038F5                 cmp     rbp, rcx
.text:00000000000038F8                 jnb     loc_307C
.text:00000000000038FE                 test    al, al
.text:0000000000003900                 jz      loc_3CFE
.text:0000000000003906                 cmp     r13, r15
.text:0000000000003909                 jbe     short loc_3910
.text:000000000000390B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003910
.text:0000000000003910 loc_3910:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003910                 lea     rax, [r15+1]
.text:0000000000003914                 cmp     r13, rax
.text:0000000000003917                 jbe     short loc_391F
.text:0000000000003919                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000391F
.text:000000000000391F loc_391F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000391F                 add     r15, 2
.text:0000000000003923                 xor     r10d, r10d
.text:0000000000003926                 xor     r8d, r8d
.text:0000000000003929                 jmp     short loc_38BD
.text:0000000000003929 ; ---------------------------------------------------------------------------
.text:000000000000392B                 align 10h
.text:0000000000003930
.text:0000000000003930 loc_3930:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003930                 cmp     r15, 1
.text:0000000000003934                 jz      loc_3799
.text:000000000000393A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000393F                 lea     rcx, [rdi+r15]
.text:0000000000003943                 lea     rdx, [rdi+r14+1]
.text:0000000000003948                 lea     r8, [rcx+r14]
.text:000000000000394C                 jmp     short loc_395D
.text:000000000000394C ; ---------------------------------------------------------------------------
.text:000000000000394E                 align 10h
.text:0000000000003950
.text:0000000000003950 loc_3950:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003950                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003950                 add     rdx, 1
.text:0000000000003954                 cmp     r8, rdx
.text:0000000000003957                 jz      loc_3799
.text:000000000000395D
.text:000000000000395D loc_395D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000395D                 movzx   ecx, byte ptr [rdx]
.text:0000000000003960                 sub     ecx, 5Bh ; '['
.text:0000000000003963                 cmp     cl, 21h ; '!'
.text:0000000000003966                 ja      short loc_3950
.text:0000000000003968                 mov     esi, 1
.text:000000000000396D                 shl     rsi, cl
.text:0000000000003970                 mov     rcx, rsi
.text:0000000000003973                 mov     rsi, 20000002Bh
.text:000000000000397D                 test    rcx, rsi
.text:0000000000003980                 jz      short loc_3950
.text:0000000000003982                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003987                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000398C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000003991                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003999
.text:0000000000003999 loc_3999:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000003999                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000003999                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000399E                 jz      short loc_39B0
.text:00000000000039A0                 test    al, al
.text:00000000000039A2                 mov     eax, 4
.text:00000000000039A7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000039AC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000039B0
.text:00000000000039B0 loc_39B0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000039B0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000039B0                 sub     rsp, 8
.text:00000000000039B4                 mov     rcx, rbp
.text:00000000000039B7                 mov     rsi, r13
.text:00000000000039BA                 push    [rsp+0F0h+var_88]
.text:00000000000039BE                 push    [rsp+0F8h+var_80]
.text:00000000000039C2                 mov     rdi, r14
.text:00000000000039C5                 push    0
.text:00000000000039C7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000039CF                 mov     r8d, [rsp+108h+var_E0]
.text:00000000000039D4                 mov     rdx, [rsp+108h+s]
.text:00000000000039D9                 and     r9d, 0FFFFFFFDh
.text:00000000000039DD                 call    quotearg_buffer_restyled
.text:00000000000039E2                 add     rsp, 20h
.text:00000000000039E6                 mov     r15, rax
.text:00000000000039E9
.text:00000000000039E9 loc_39E9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:00000000000039E9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:00000000000039E9                 mov     rbx, [rsp+0E8h+var_40]
.text:00000000000039F1                 xor     rbx, fs:28h
.text:00000000000039FA                 mov     rax, r15
.text:00000000000039FD                 jnz     loc_4003
.text:0000000000003A03                 add     rsp, 0B8h
.text:0000000000003A0A                 pop     rbx
.text:0000000000003A0B                 pop     rbp
.text:0000000000003A0C                 pop     r12
.text:0000000000003A0E                 pop     r13
.text:0000000000003A10                 pop     r14
.text:0000000000003A12                 pop     r15
.text:0000000000003A14                 retn
.text:0000000000003A14 ; ---------------------------------------------------------------------------
.text:0000000000003A15                 align 8
.text:0000000000003A18
.text:0000000000003A18 loc_3A18:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003A18                 mov     rbp, r11
.text:0000000000003A1B                 jmp     loc_3999
.text:0000000000003A20 ; ---------------------------------------------------------------------------
.text:0000000000003A20
.text:0000000000003A20 loc_3A20:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003A20                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003A20                 cmp     r13, r15
.text:0000000000003A23                 jbe     short loc_3A2A
.text:0000000000003A25                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003A2A
.text:0000000000003A2A loc_3A2A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000003A2A                 lea     rax, [r15+1]
.text:0000000000003A2E                 cmp     r13, rax
.text:0000000000003A31                 jbe     short loc_3A39
.text:0000000000003A33                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003A39
.text:0000000000003A39 loc_3A39:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003A39                 lea     rax, [r15+2]
.text:0000000000003A3D                 cmp     r13, rax
.text:0000000000003A40                 jbe     loc_4032
.text:0000000000003A46                 mov     rdx, r13
.text:0000000000003A49                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003A4F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003A54                 jmp     loc_3632
.text:0000000000003A59 ; ---------------------------------------------------------------------------
.text:0000000000003A59
.text:0000000000003A59 loc_3A59:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003A59                 mov     eax, r12d
.text:0000000000003A5C                 mov     ebx, 30h ; '0'
.text:0000000000003A61                 xor     r12d, r12d
.text:0000000000003A64                 jmp     loc_3069
.text:0000000000003A69 ; ---------------------------------------------------------------------------
.text:0000000000003A69
.text:0000000000003A69 loc_3A69:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000003A69                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003A6F                 jmp     loc_3439
.text:0000000000003A74 ; ---------------------------------------------------------------------------
.text:0000000000003A74
.text:0000000000003A74 loc_3A74:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003A74                                         ; DATA XREF: .rodata:jpt_2EA1↓o
.text:0000000000003A74                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000003A76                 jnz     loc_2EA3        ; jumptable 00000000000121F1 case 1
.text:0000000000003A7C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003A81
.text:0000000000003A81 loc_3A81:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000003A81                 test    r13, r13
.text:0000000000003A84                 jnz     loc_401A
.text:0000000000003A8A                 lea     rax, asc_5E1D   ; "'"
.text:0000000000003A91                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003A9A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003A9F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003AA4                 xor     r12d, r12d
.text:0000000000003AA7                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003AAC                 mov     [rsp+0E8h+n], 1
.text:0000000000003AB5                 mov     [rsp+0E8h+s2], rax
.text:0000000000003ABA                 mov     r15d, 1
.text:0000000000003AC0                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003AC8                 jmp     loc_2EE3
.text:0000000000003AC8 ; ---------------------------------------------------------------------------
.text:0000000000003ACD                 align 10h
.text:0000000000003AD0
.text:0000000000003AD0 loc_3AD0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003AD0                                         ; DATA XREF: .rodata:jpt_2EA1↓o
.text:0000000000003AD0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003AD2                 jnz     loc_3ECD
.text:0000000000003AD8                 test    r13, r13
.text:0000000000003ADB                 jz      loc_3D06
.text:0000000000003AE1                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003AE5                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003AEA                 xor     r12d, r12d
.text:0000000000003AED                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003AF2                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003AFB
.text:0000000000003AFB loc_3AFB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000003AFB                 lea     rax, unk_5E1B
.text:0000000000003B02                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003B07                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003B0C                 mov     [rsp+0E8h+n], 1
.text:0000000000003B15                 mov     r15d, 1
.text:0000000000003B1B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003B20                 jmp     loc_2EE3
.text:0000000000003B25 ; ---------------------------------------------------------------------------
.text:0000000000003B25
.text:0000000000003B25 loc_3B25:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003B25                                         ; DATA XREF: .rodata:jpt_2EA1↓o
.text:0000000000003B25                 lea     rax, unk_5E1B   ; jumptable 00000000000121F1 case 6
.text:0000000000003B2C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003B31                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003B36                 xor     r12d, r12d
.text:0000000000003B39                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003B42                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003B47                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003B4C                 mov     [rsp+0E8h+n], 1
.text:0000000000003B55                 xor     r15d, r15d
.text:0000000000003B58                 mov     [rsp+0E8h+s2], rax
.text:0000000000003B5D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000003B65                 jmp     loc_2EE3
.text:0000000000003B6A ; ---------------------------------------------------------------------------
.text:0000000000003B6A
.text:0000000000003B6A loc_3B6A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003B6A                                         ; DATA XREF: .rodata:jpt_2EA1↓o
.text:0000000000003B6A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000003B6F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003B74                 xor     r12d, r12d
.text:0000000000003B77                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003B80                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003B85                 xor     r15d, r15d
.text:0000000000003B88                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003B8D                 mov     [rsp+0E8h+n], 0
.text:0000000000003B96                 mov     [rsp+0E8h+s2], 0
.text:0000000000003B9F                 jmp     loc_2EE3
.text:0000000000003BA4 ; ---------------------------------------------------------------------------
.text:0000000000003BA4
.text:0000000000003BA4 loc_3BA4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003BA4                                         ; DATA XREF: .rodata:jpt_2EA1↓o
.text:0000000000003BA4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000003BA9                 jz      short loc_3C01
.text:0000000000003BAB                 lea     rsi, asc_5E1F   ; "`"
.text:0000000000003BB2                 xor     edi, edi        ; domainname
.text:0000000000003BB4                 mov     edx, 5          ; category
.text:0000000000003BB9                 call    _dcgettext
.text:0000000000003BBE                 mov     rcx, rax
.text:0000000000003BC1                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003BC6                 lea     rax, asc_5E1F   ; "`"
.text:0000000000003BCD                 cmp     rcx, rax
.text:0000000000003BD0                 jz      loc_3F6E
.text:0000000000003BD6
.text:0000000000003BD6 loc_3BD6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003BD6                 lea     rsi, asc_5E1D   ; "'"
.text:0000000000003BDD                 xor     edi, edi        ; domainname
.text:0000000000003BDF                 mov     edx, 5          ; category
.text:0000000000003BE4                 call    _dcgettext
.text:0000000000003BE9                 mov     rcx, rax
.text:0000000000003BEC                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003BF1                 lea     rax, asc_5E1D   ; "'"
.text:0000000000003BF8                 cmp     rcx, rax
.text:0000000000003BFB                 jz      loc_3F84
.text:0000000000003C01
.text:0000000000003C01 loc_3C01:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003C01                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003C01                 xor     r15d, r15d
.text:0000000000003C04                 test    ebx, ebx
.text:0000000000003C06                 jz      loc_3DCD
.text:0000000000003C0C
.text:0000000000003C0C loc_3C0C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000003C0C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000003C0C                 test    ebx, ebx
.text:0000000000003C0E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003C13                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003C18                 xor     r12d, r12d
.text:0000000000003C1B                 mov     rdi, rbx        ; s
.text:0000000000003C1E                 call    _strlen
.text:0000000000003C23                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003C28                 mov     [rsp+0E8h+n], rax
.text:0000000000003C2D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003C32                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003C37                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003C40                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003C45                 jmp     loc_2EE3
.text:0000000000003C4A ; ---------------------------------------------------------------------------
.text:0000000000003C4A
.text:0000000000003C4A loc_3C4A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003C4A                                         ; DATA XREF: .rodata:jpt_2EA1↓o
.text:0000000000003C4A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000003C4F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003C54                 xor     r12d, r12d
.text:0000000000003C57                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003C60                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003C65                 xor     r15d, r15d
.text:0000000000003C68                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003C6D                 mov     [rsp+0E8h+n], 0
.text:0000000000003C76                 mov     [rsp+0E8h+s2], 0
.text:0000000000003C7F                 jmp     loc_2EE3
.text:0000000000003C84 ; ---------------------------------------------------------------------------
.text:0000000000003C84
.text:0000000000003C84 loc_3C84:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003C84                                         ; DATA XREF: .rodata:jpt_2EA1↓o
.text:0000000000003C84                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003C89                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003C8E                 xor     r12d, r12d
.text:0000000000003C91                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003C9A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003C9F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003CA4                 jmp     loc_2EC3
.text:0000000000003CA9 ; ---------------------------------------------------------------------------
.text:0000000000003CA9
.text:0000000000003CA9 loc_3CA9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003CA9                 cmp     r13, r15
.text:0000000000003CAC                 jbe     short loc_3CB3
.text:0000000000003CAE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003CB3
.text:0000000000003CB3 loc_3CB3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003CB3                 lea     rax, [rcx+2]
.text:0000000000003CB7                 cmp     r13, rax
.text:0000000000003CBA                 jbe     short loc_3CC2
.text:0000000000003CBC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003CC2
.text:0000000000003CC2 loc_3CC2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003CC2                 mov     eax, r12d
.text:0000000000003CC5                 lea     r15, [rcx+3]
.text:0000000000003CC9                 xor     r12d, r12d
.text:0000000000003CCC                 mov     ebx, 30h ; '0'
.text:0000000000003CD1                 jmp     loc_3038
.text:0000000000003CD1 ; ---------------------------------------------------------------------------
.text:0000000000003CD6                 align 20h
.text:0000000000003CE0
.text:0000000000003CE0 loc_3CE0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003CE0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003CE5                 mov     rbp, r11
.text:0000000000003CE8                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003CEC                 jmp     loc_3999
.text:0000000000003CF1 ; ---------------------------------------------------------------------------
.text:0000000000003CF1
.text:0000000000003CF1 loc_3CF1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003CF1                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003CF6                 xor     r12d, r12d
.text:0000000000003CF9                 jmp     loc_3800
.text:0000000000003CFE ; ---------------------------------------------------------------------------
.text:0000000000003CFE
.text:0000000000003CFE loc_3CFE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000003CFE                 xor     r10d, r10d
.text:0000000000003D01                 jmp     loc_38BD
.text:0000000000003D06 ; ---------------------------------------------------------------------------
.text:0000000000003D06
.text:0000000000003D06 loc_3D06:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003D06                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003D0F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003D14                 xor     r12d, r12d
.text:0000000000003D17                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003D1C                 jmp     loc_3AFB
.text:0000000000003D21 ; ---------------------------------------------------------------------------
.text:0000000000003D21
.text:0000000000003D21 loc_3D21:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003D21                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003D26                 mov     rsi, r14
.text:0000000000003D29                 mov     rcx, r13
.text:0000000000003D2C                 mov     rax, rbx
.text:0000000000003D2F                 mov     rdi, rbx
.text:0000000000003D32                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003D38                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003D3D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003D45                 cmp     rsi, r11
.text:0000000000003D48                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003D4E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003D56                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003D5B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003D60                 jnb     short loc_3D88
.text:0000000000003D62                 cmp     byte ptr [rcx], 0
.text:0000000000003D65                 jnz     short loc_3D77
.text:0000000000003D67                 jmp     short loc_3D88
.text:0000000000003D67 ; ---------------------------------------------------------------------------
.text:0000000000003D69                 align 10h
.text:0000000000003D70
.text:0000000000003D70 loc_3D70:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003D70                 cmp     byte ptr [r9+rax], 0
.text:0000000000003D75                 jz      short loc_3D85
.text:0000000000003D77
.text:0000000000003D77 loc_3D77:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003D77                 add     rax, 1
.text:0000000000003D7B                 lea     rdx, [rbp+rax+0]
.text:0000000000003D80                 cmp     r11, rdx
.text:0000000000003D83                 ja      short loc_3D70
.text:0000000000003D85
.text:0000000000003D85 loc_3D85:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003D85                 mov     rdi, rax
.text:0000000000003D88
.text:0000000000003D88 loc_3D88:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003D88                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003D88                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003D8D                 xor     r12d, r12d
.text:0000000000003D90                 jmp     loc_37F6
.text:0000000000003D95 ; ---------------------------------------------------------------------------
.text:0000000000003D95
.text:0000000000003D95 loc_3D95:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003D95                 mov     rdi, rbx
.text:0000000000003D98                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003D9E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003DA3                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003DA9                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003DB1                 xor     r12d, r12d
.text:0000000000003DB4                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003DB9                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003DBE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003DC3                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003DC8                 jmp     loc_37F6
.text:0000000000003DCD ; ---------------------------------------------------------------------------
.text:0000000000003DCD
.text:0000000000003DCD loc_3DCD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000003DCD                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003DD2                 movzx   eax, byte ptr [rdx]
.text:0000000000003DD5                 test    al, al
.text:0000000000003DD7                 jz      loc_3C0C
.text:0000000000003DDD                 nop     dword ptr [rax]
.text:0000000000003DE0
.text:0000000000003DE0 loc_3DE0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003DE0                 cmp     r13, r15
.text:0000000000003DE3                 jbe     short loc_3DE9
.text:0000000000003DE5                 mov     [r14+r15], al
.text:0000000000003DE9
.text:0000000000003DE9 loc_3DE9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003DE9                 add     r15, 1
.text:0000000000003DED                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003DF2                 test    al, al
.text:0000000000003DF4                 jnz     short loc_3DE0
.text:0000000000003DF6                 jmp     loc_3C0C
.text:0000000000003DFB ; ---------------------------------------------------------------------------
.text:0000000000003DFB
.text:0000000000003DFB loc_3DFB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000003DFB                 mov     eax, edx
.text:0000000000003DFD                 jmp     loc_3357
.text:0000000000003E02 ; ---------------------------------------------------------------------------
.text:0000000000003E02
.text:0000000000003E02 loc_3E02:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003E02                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003E06                 cmp     bl, 3Eh ; '>'
.text:0000000000003E09                 ja      loc_3680
.text:0000000000003E0F                 mov     rax, 7000A38200000000h
.text:0000000000003E19                 bt      rax, rbx
.text:0000000000003E1D                 jnb     loc_3680
.text:0000000000003E23                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003E28                 jnz     loc_4012
.text:0000000000003E2E                 cmp     r13, r15
.text:0000000000003E31                 jbe     short loc_3E38
.text:0000000000003E33                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003E38
.text:0000000000003E38 loc_3E38:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003E38                 lea     rax, [r15+1]
.text:0000000000003E3C                 cmp     r13, rax
.text:0000000000003E3F                 jbe     short loc_3E47
.text:0000000000003E41                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003E47
.text:0000000000003E47 loc_3E47:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003E47                 lea     rax, [r15+2]
.text:0000000000003E4B                 cmp     r13, rax
.text:0000000000003E4E                 jbe     short loc_3E56
.text:0000000000003E50                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003E56
.text:0000000000003E56 loc_3E56:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003E56                 lea     rax, [r15+3]
.text:0000000000003E5A                 cmp     r13, rax
.text:0000000000003E5D                 jbe     short loc_3E65
.text:0000000000003E5F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003E65
.text:0000000000003E65 loc_3E65:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003E65                 add     r15, 4
.text:0000000000003E69                 xor     edx, edx
.text:0000000000003E6B                 xor     r12d, r12d
.text:0000000000003E6E                 xor     eax, eax
.text:0000000000003E70                 mov     rbp, rcx
.text:0000000000003E73                 jmp     loc_3038
.text:0000000000003E78 ; ---------------------------------------------------------------------------
.text:0000000000003E78
.text:0000000000003E78 loc_3E78:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003E78                                         ; DATA XREF: .rodata:jpt_2EA1↓o
.text:0000000000003E78                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000003E7A                 jz      loc_4008
.text:0000000000003E80                 lea     rax, asc_5E1D   ; "'"
.text:0000000000003E87                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003E8C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003E91                 xor     r12d, r12d
.text:0000000000003E94                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003E9D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003EA2                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003EA7                 mov     [rsp+0E8h+n], 1
.text:0000000000003EB0                 xor     r15d, r15d
.text:0000000000003EB3                 mov     [rsp+0E8h+s2], rax
.text:0000000000003EB8                 jmp     loc_2EE3
.text:0000000000003EB8 ; ---------------------------------------------------------------------------
.text:0000000000003EBD                 align 20h
.text:0000000000003EC0
.text:0000000000003EC0 loc_3EC0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003EC0                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003EC0                 mov     rbp, r11
.text:0000000000003EC3                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003EC8                 jmp     loc_3999
.text:0000000000003ECD ; ---------------------------------------------------------------------------
.text:0000000000003ECD
.text:0000000000003ECD loc_3ECD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000003ECD                 lea     rax, unk_5E1B
.text:0000000000003ED4                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003ED9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003EDE                 xor     r12d, r12d
.text:0000000000003EE1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003EEA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003EEF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003EF4                 mov     [rsp+0E8h+n], 1
.text:0000000000003EFD                 xor     r15d, r15d
.text:0000000000003F00                 mov     [rsp+0E8h+s2], rax
.text:0000000000003F05                 jmp     loc_2EE3
.text:0000000000003F0A ; ---------------------------------------------------------------------------
.text:0000000000003F0A
.text:0000000000003F0A loc_3F0A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000003F0A                 mov     eax, edx
.text:0000000000003F0C
.text:0000000000003F0C loc_3F0C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000003F0C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000003F0C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003F11                 test    rbx, rbx
.text:0000000000003F14                 jz      short loc_3F42
.text:0000000000003F16                 test    al, al
.text:0000000000003F18                 jz      short loc_3F42
.text:0000000000003F1A                 movzx   ecx, byte ptr [rbx]
.text:0000000000003F1D                 mov     rax, rbx
.text:0000000000003F20                 test    cl, cl
.text:0000000000003F22                 jz      short loc_3F42
.text:0000000000003F24                 mov     rdx, r15
.text:0000000000003F27                 sub     rax, r15
.text:0000000000003F2A
.text:0000000000003F2A loc_3F2A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000003F2A                 cmp     r13, rdx
.text:0000000000003F2D                 jbe     short loc_3F33
.text:0000000000003F2F                 mov     [r14+rdx], cl
.text:0000000000003F33
.text:0000000000003F33 loc_3F33:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003F33                 add     rdx, 1
.text:0000000000003F37                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000003F3B                 test    cl, cl
.text:0000000000003F3D                 jnz     short loc_3F2A
.text:0000000000003F3F                 mov     r15, rdx
.text:0000000000003F42
.text:0000000000003F42 loc_3F42:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003F42                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003F42                 cmp     r13, r15
.text:0000000000003F45                 jbe     loc_39E9
.text:0000000000003F4B                 mov     byte ptr [r14+r15], 0
.text:0000000000003F50                 jmp     loc_39E9
.text:0000000000003F55 ; ---------------------------------------------------------------------------
.text:0000000000003F55
.text:0000000000003F55 loc_3F55:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003F55                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003F5A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003F5F                 mov     rbp, r11
.text:0000000000003F62                 setz    al
.text:0000000000003F65                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003F69                 jmp     loc_3999
.text:0000000000003F6E ; ---------------------------------------------------------------------------
.text:0000000000003F6E
.text:0000000000003F6E loc_3F6E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000003F6E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003F72                 mov     rdi, rcx
.text:0000000000003F75                 call    gettext_quote
.text:0000000000003F7A                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003F7F                 jmp     loc_3BD6
.text:0000000000003F84 ; ---------------------------------------------------------------------------
.text:0000000000003F84
.text:0000000000003F84 loc_3F84:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003F84                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003F88                 mov     rdi, rcx
.text:0000000000003F8B                 call    gettext_quote
.text:0000000000003F90                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003F95                 jmp     loc_3C01
.text:0000000000003F9A ; ---------------------------------------------------------------------------
.text:0000000000003F9A
.text:0000000000003F9A loc_3F9A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000003F9A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003F9F                 mov     rbp, r11
.text:0000000000003FA2                 mov     eax, edx
.text:0000000000003FA4                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003FA8                 jmp     loc_3999
.text:0000000000003FAD ; ---------------------------------------------------------------------------
.text:0000000000003FAD
.text:0000000000003FAD loc_3FAD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000003FAD                 sub     rsp, 8
.text:0000000000003FB1                 mov     r8d, 5
.text:0000000000003FB7                 mov     rcx, r11
.text:0000000000003FBA                 push    [rsp+0F0h+var_88]
.text:0000000000003FBE                 push    [rsp+0F8h+var_80]
.text:0000000000003FC2                 mov     rdi, r14
.text:0000000000003FC5                 push    [rsp+100h+var_C8]
.text:0000000000003FC9                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003FD1                 mov     rdx, [rsp+108h+s]
.text:0000000000003FD6                 mov     rsi, [rsp+108h+var_98]
.text:0000000000003FDB                 call    quotearg_buffer_restyled
.text:0000000000003FE0                 add     rsp, 20h
.text:0000000000003FE4                 mov     r15, rax
.text:0000000000003FE7                 jmp     loc_39E9
.text:0000000000003FEC ; ---------------------------------------------------------------------------
.text:0000000000003FEC
.text:0000000000003FEC loc_3FEC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000003FEC                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003FF1                 jmp     loc_3F0C
.text:0000000000003FF6 ; ---------------------------------------------------------------------------
.text:0000000000003FF6
.text:0000000000003FF6 loc_3FF6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003FF6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003FFE                 jmp     loc_3999
.text:0000000000004003 ; ---------------------------------------------------------------------------
.text:0000000000004003
.text:0000000000004003 loc_4003:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000004003                 call    ___stack_chk_fail
.text:0000000000004008 ; ---------------------------------------------------------------------------
.text:0000000000004008
.text:0000000000004008 loc_4008:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000004008                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000400D                 jmp     loc_3A81
.text:0000000000004012 ; ---------------------------------------------------------------------------
.text:0000000000004012
.text:0000000000004012 loc_4012:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000004012                 mov     rbp, r11
.text:0000000000004015                 jmp     loc_39B0
.text:000000000000401A ; ---------------------------------------------------------------------------
.text:000000000000401A
.text:000000000000401A loc_401A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000401A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000401F                 xor     eax, eax
.text:0000000000004021                 xor     r12d, r12d
.text:0000000000004024                 mov     [rsp+0E8h+var_98], 0
.text:000000000000402D                 jmp     loc_35D4
.text:0000000000004032 ; ---------------------------------------------------------------------------
.text:0000000000004032
.text:0000000000004032 loc_4032:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000004032                 mov     rdx, r13
.text:0000000000004035                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000403A                 jmp     loc_3632
.text:000000000000403F ; ---------------------------------------------------------------------------
.text:000000000000403F
.text:000000000000403F def_2EA1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000403F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000403F ; } // starts at 2E10
.text:000000000000403F quotearg_buffer_restyled endp
.text:000000000000403F
.text:000000000000403F ; ---------------------------------------------------------------------------
.text:0000000000004044                 align 10h
.text:0000000000004050
.text:0000000000004050 ; =============== S U B R O U T I N E =======================================
.text:0000000000004050
.text:0000000000004050
.text:0000000000004050 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000004050                                         ; quotearg_n_mem+7↓j ...
.text:0000000000004050
.text:0000000000004050 var_50          = qword ptr -50h
.text:0000000000004050 var_48          = qword ptr -48h
.text:0000000000004050 var_40          = dword ptr -40h
.text:0000000000004050 var_3C          = dword ptr -3Ch
.text:0000000000004050
.text:0000000000004050 ; __unwind {
.text:0000000000004050                 push    r15
.text:0000000000004052                 push    r14
.text:0000000000004054                 movsxd  r15, edi
.text:0000000000004057                 push    r13
.text:0000000000004059                 push    r12
.text:000000000000405B                 mov     r14, rdx
.text:000000000000405E                 push    rbp
.text:000000000000405F                 push    rbx
.text:0000000000004060                 mov     rbp, rcx
.text:0000000000004063                 sub     rsp, 28h
.text:0000000000004067                 mov     [rsp+58h+var_50], rsi
.text:000000000000406C                 call    ___errno_location
.text:0000000000004071                 mov     r13, rax
.text:0000000000004074                 mov     eax, [rax]
.text:0000000000004076                 test    r15d, r15d
.text:0000000000004079                 mov     rbx, cs:slotvec
.text:0000000000004080                 mov     [rsp+58h+var_40], eax
.text:0000000000004084                 js      loc_41F1
.text:000000000000408A                 cmp     cs:nslots, r15d
.text:0000000000004091                 jg      short loc_40F5
.text:0000000000004093                 cmp     r15d, 7FFFFFFFh
.text:000000000000409A                 jz      loc_41F6
.text:00000000000040A0                 lea     r12d, [r15+1]
.text:00000000000040A4                 lea     rax, slotvec0
.text:00000000000040AB                 movsxd  rsi, r12d
.text:00000000000040AE                 shl     rsi, 4
.text:00000000000040B2                 cmp     rbx, rax
.text:00000000000040B5                 jz      loc_41D0
.text:00000000000040BB                 mov     rdi, rbx
.text:00000000000040BE                 call    xrealloc
.text:00000000000040C3                 mov     rbx, rax
.text:00000000000040C6                 mov     cs:slotvec, rax
.text:00000000000040CD
.text:00000000000040CD loc_40CD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:00000000000040CD                 movsxd  rdi, cs:nslots
.text:00000000000040D4                 mov     edx, r12d
.text:00000000000040D7                 xor     esi, esi        ; c
.text:00000000000040D9                 sub     edx, edi
.text:00000000000040DB                 shl     rdi, 4
.text:00000000000040DF                 movsxd  rdx, edx
.text:00000000000040E2                 add     rdi, rbx        ; s
.text:00000000000040E5                 shl     rdx, 4          ; n
.text:00000000000040E9                 call    _memset
.text:00000000000040EE                 mov     cs:nslots, r12d
.text:00000000000040F5
.text:00000000000040F5 loc_40F5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000040F5                 mov     eax, [rbp+4]
.text:00000000000040F8                 shl     r15, 4
.text:00000000000040FC                 sub     rsp, 8
.text:0000000000004100                 add     rbx, r15
.text:0000000000004103                 lea     r15, [rbp+8]
.text:0000000000004107                 mov     r8d, [rbp+0]
.text:000000000000410B                 mov     r11, [rbx]
.text:000000000000410E                 mov     r12, [rbx+8]
.text:0000000000004112                 mov     rcx, r14
.text:0000000000004115                 or      eax, 1
.text:0000000000004118                 mov     [rsp+60h+var_3C], eax
.text:000000000000411C                 push    qword ptr [rbp+30h]
.text:000000000000411F                 mov     r9d, eax
.text:0000000000004122                 push    qword ptr [rbp+28h]
.text:0000000000004125                 push    r15
.text:0000000000004127                 mov     rsi, r11
.text:000000000000412A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000412F                 mov     rdi, r12
.text:0000000000004132                 mov     [rsp+78h+var_48], r11
.text:0000000000004137                 call    quotearg_buffer_restyled
.text:000000000000413C                 add     rsp, 20h
.text:0000000000004140                 mov     r11, [rsp+58h+var_48]
.text:0000000000004145                 cmp     r11, rax
.text:0000000000004148                 ja      short loc_41B1
.text:000000000000414A                 lea     rsi, [rax+1]
.text:000000000000414E                 lea     rax, slot0
.text:0000000000004155                 cmp     r12, rax
.text:0000000000004158                 mov     [rbx], rsi
.text:000000000000415B                 jz      short loc_416F
.text:000000000000415D                 mov     rdi, r12        ; ptr
.text:0000000000004160                 mov     [rsp+58h+var_48], rsi
.text:0000000000004165                 call    _free
.text:000000000000416A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000416F
.text:000000000000416F loc_416F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000416F                 mov     rdi, rsi
.text:0000000000004172                 mov     [rsp+58h+var_48], rsi
.text:0000000000004177                 call    xmalloc
.text:000000000000417C                 sub     rsp, 8
.text:0000000000004180                 mov     [rbx+8], rax
.text:0000000000004184                 mov     r8d, [rbp+0]
.text:0000000000004188                 push    qword ptr [rbp+30h]
.text:000000000000418B                 push    qword ptr [rbp+28h]
.text:000000000000418E                 mov     rcx, r14
.text:0000000000004191                 push    r15
.text:0000000000004193                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004198                 mov     rdi, rax
.text:000000000000419B                 mov     rdx, [rsp+78h+var_50]
.text:00000000000041A0                 mov     rsi, [rsp+78h+var_48]
.text:00000000000041A5                 mov     r12, rax
.text:00000000000041A8                 call    quotearg_buffer_restyled
.text:00000000000041AD                 add     rsp, 20h
.text:00000000000041B1
.text:00000000000041B1 loc_41B1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000041B1                 mov     eax, [rsp+58h+var_40]
.text:00000000000041B5                 mov     [r13+0], eax
.text:00000000000041B9                 add     rsp, 28h
.text:00000000000041BD                 mov     rax, r12
.text:00000000000041C0                 pop     rbx
.text:00000000000041C1                 pop     rbp
.text:00000000000041C2                 pop     r12
.text:00000000000041C4                 pop     r13
.text:00000000000041C6                 pop     r14
.text:00000000000041C8                 pop     r15
.text:00000000000041CA                 retn
.text:00000000000041CA ; ---------------------------------------------------------------------------
.text:00000000000041CB                 align 10h
.text:00000000000041D0
.text:00000000000041D0 loc_41D0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000041D0                 xor     edi, edi
.text:00000000000041D2                 call    xrealloc
.text:00000000000041D7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000041DF                 mov     rbx, rax
.text:00000000000041E2                 mov     cs:slotvec, rax
.text:00000000000041E9                 movups  xmmword ptr [rax], xmm0
.text:00000000000041EC                 jmp     loc_40CD
.text:00000000000041F1 ; ---------------------------------------------------------------------------
.text:00000000000041F1
.text:00000000000041F1 loc_41F1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000041F1                 call    _abort
.text:00000000000041F6 ; ---------------------------------------------------------------------------
.text:00000000000041F6
.text:00000000000041F6 loc_41F6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000041F6                 call    xalloc_die
.text:00000000000041F6 ; } // starts at 4050
.text:00000000000041F6 quotearg_n_options endp
.text:00000000000041F6
.text:00000000000041F6 ; ---------------------------------------------------------------------------
.text:00000000000041FB                 align 20h
.text:0000000000004200
.text:0000000000004200 ; =============== S U B R O U T I N E =======================================
.text:0000000000004200
.text:0000000000004200 ; Attributes: info_from_lumina
.text:0000000000004200
.text:0000000000004200 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004200                 public clone_quoting_options
.text:0000000000004200 clone_quoting_options proc near
.text:0000000000004200 ; __unwind {
.text:0000000000004200                 push    r12
.text:0000000000004202                 push    rbp
.text:0000000000004203                 push    rbx
.text:0000000000004204                 mov     rbx, rdi
.text:0000000000004207                 call    ___errno_location
.text:000000000000420C                 mov     r12d, [rax]
.text:000000000000420F                 mov     rbp, rax
.text:0000000000004212                 lea     rax, default_quoting_options
.text:0000000000004219                 test    rbx, rbx
.text:000000000000421C                 mov     esi, 38h ; '8'  ; n
.text:0000000000004221                 cmovz   rbx, rax
.text:0000000000004225                 mov     rdi, rbx        ; src
.text:0000000000004228                 call    xmemdup
.text:000000000000422D                 mov     [rbp+0], r12d
.text:0000000000004231                 pop     rbx
.text:0000000000004232                 pop     rbp
.text:0000000000004233                 pop     r12
.text:0000000000004235                 retn
.text:0000000000004235 ; } // starts at 4200
.text:0000000000004235 clone_quoting_options endp
.text:0000000000004235
.text:0000000000004235 ; ---------------------------------------------------------------------------
.text:0000000000004236                 align 20h
.text:0000000000004240
.text:0000000000004240 ; =============== S U B R O U T I N E =======================================
.text:0000000000004240
.text:0000000000004240
.text:0000000000004240                 public get_quoting_style
.text:0000000000004240 get_quoting_style proc near
.text:0000000000004240 ; __unwind {
.text:0000000000004240                 lea     rax, default_quoting_options
.text:0000000000004247                 test    rdi, rdi
.text:000000000000424A                 cmovz   rdi, rax
.text:000000000000424E                 mov     eax, [rdi]
.text:0000000000004250                 retn
.text:0000000000004250 ; } // starts at 4240
.text:0000000000004250 get_quoting_style endp
.text:0000000000004250
.text:0000000000004250 ; ---------------------------------------------------------------------------
.text:0000000000004251                 align 20h
.text:0000000000004260
.text:0000000000004260 ; =============== S U B R O U T I N E =======================================
.text:0000000000004260
.text:0000000000004260
.text:0000000000004260                 public set_quoting_style
.text:0000000000004260 set_quoting_style proc near
.text:0000000000004260 ; __unwind {
.text:0000000000004260                 lea     rax, default_quoting_options
.text:0000000000004267                 test    rdi, rdi
.text:000000000000426A                 cmovz   rdi, rax
.text:000000000000426E                 mov     [rdi], esi
.text:0000000000004270                 retn
.text:0000000000004270 ; } // starts at 4260
.text:0000000000004270 set_quoting_style endp
.text:0000000000004270
.text:0000000000004270 ; ---------------------------------------------------------------------------
.text:0000000000004271                 align 20h
.text:0000000000004280
.text:0000000000004280 ; =============== S U B R O U T I N E =======================================
.text:0000000000004280
.text:0000000000004280 ; Attributes: info_from_lumina
.text:0000000000004280
.text:0000000000004280 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004280                 public set_char_quoting
.text:0000000000004280 set_char_quoting proc near
.text:0000000000004280 ; __unwind {
.text:0000000000004280                 lea     rax, default_quoting_options
.text:0000000000004287                 test    rdi, rdi
.text:000000000000428A                 mov     ecx, esi
.text:000000000000428C                 cmovz   rdi, rax
.text:0000000000004290                 mov     eax, esi
.text:0000000000004292                 and     ecx, 1Fh
.text:0000000000004295                 shr     al, 5
.text:0000000000004298                 movzx   eax, al
.text:000000000000429B                 lea     rdi, [rdi+rax*4+8]
.text:00000000000042A0                 mov     esi, [rdi]
.text:00000000000042A2                 mov     eax, esi
.text:00000000000042A4                 shr     eax, cl
.text:00000000000042A6                 xor     edx, eax
.text:00000000000042A8                 and     eax, 1
.text:00000000000042AB                 and     edx, 1
.text:00000000000042AE                 shl     edx, cl
.text:00000000000042B0                 xor     edx, esi
.text:00000000000042B2                 mov     [rdi], edx
.text:00000000000042B4                 retn
.text:00000000000042B4 ; } // starts at 4280
.text:00000000000042B4 set_char_quoting endp
.text:00000000000042B4
.text:00000000000042B4 ; ---------------------------------------------------------------------------
.text:00000000000042B5                 align 20h
.text:00000000000042C0
.text:00000000000042C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042C0
.text:00000000000042C0
.text:00000000000042C0                 public set_quoting_flags
.text:00000000000042C0 set_quoting_flags proc near
.text:00000000000042C0 ; __unwind {
.text:00000000000042C0                 lea     rax, default_quoting_options
.text:00000000000042C7                 test    rdi, rdi
.text:00000000000042CA                 cmovz   rdi, rax
.text:00000000000042CE                 mov     eax, [rdi+4]
.text:00000000000042D1                 mov     [rdi+4], esi
.text:00000000000042D4                 retn
.text:00000000000042D4 ; } // starts at 42C0
.text:00000000000042D4 set_quoting_flags endp
.text:00000000000042D4
.text:00000000000042D4 ; ---------------------------------------------------------------------------
.text:00000000000042D5                 align 20h
.text:00000000000042E0
.text:00000000000042E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042E0
.text:00000000000042E0 ; Attributes: info_from_lumina
.text:00000000000042E0
.text:00000000000042E0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000042E0                 public set_custom_quoting
.text:00000000000042E0 set_custom_quoting proc near
.text:00000000000042E0 ; __unwind {
.text:00000000000042E0                 lea     rax, default_quoting_options
.text:00000000000042E7                 test    rdi, rdi
.text:00000000000042EA                 cmovz   rdi, rax
.text:00000000000042EE                 test    rsi, rsi
.text:00000000000042F1                 mov     dword ptr [rdi], 0Ah
.text:00000000000042F7                 jz      short loc_4307
.text:00000000000042F9                 test    rdx, rdx
.text:00000000000042FC                 jz      short loc_4307
.text:00000000000042FE                 mov     [rdi+28h], rsi
.text:0000000000004302                 mov     [rdi+30h], rdx
.text:0000000000004306                 retn
.text:0000000000004307 ; ---------------------------------------------------------------------------
.text:0000000000004307
.text:0000000000004307 loc_4307:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004307                                         ; set_custom_quoting+1C↑j
.text:0000000000004307                 sub     rsp, 8
.text:000000000000430B                 call    _abort
.text:000000000000430B ; } // starts at 42E0
.text:000000000000430B set_custom_quoting endp
.text:000000000000430B
.text:0000000000004310
.text:0000000000004310 ; =============== S U B R O U T I N E =======================================
.text:0000000000004310
.text:0000000000004310 ; Attributes: info_from_lumina
.text:0000000000004310
.text:0000000000004310 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004310                 public quotearg_buffer
.text:0000000000004310 quotearg_buffer proc near
.text:0000000000004310
.text:0000000000004310 var_40          = qword ptr -40h
.text:0000000000004310
.text:0000000000004310 ; __unwind {
.text:0000000000004310                 push    r15
.text:0000000000004312                 push    r14
.text:0000000000004314                 lea     rax, default_quoting_options
.text:000000000000431B                 push    r13
.text:000000000000431D                 push    r12
.text:000000000000431F                 mov     r13, rdi
.text:0000000000004322                 push    rbp
.text:0000000000004323                 push    rbx
.text:0000000000004324                 mov     rbx, r8
.text:0000000000004327                 mov     r14, rsi
.text:000000000000432A                 mov     r15, rdx
.text:000000000000432D                 sub     rsp, 18h
.text:0000000000004331                 test    r8, r8
.text:0000000000004334                 cmovz   rbx, rax
.text:0000000000004338                 mov     [rsp+48h+var_40], rcx
.text:000000000000433D                 call    ___errno_location
.text:0000000000004342                 mov     r12d, [rax]
.text:0000000000004345                 mov     rbp, rax
.text:0000000000004348                 lea     rax, [rbx+8]
.text:000000000000434C                 sub     rsp, 8
.text:0000000000004350                 mov     r9d, [rbx+4]
.text:0000000000004354                 push    qword ptr [rbx+30h]
.text:0000000000004357                 mov     r8d, [rbx]
.text:000000000000435A                 push    qword ptr [rbx+28h]
.text:000000000000435D                 mov     rdx, r15
.text:0000000000004360                 push    rax
.text:0000000000004361                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004366                 mov     rsi, r14
.text:0000000000004369                 mov     rdi, r13
.text:000000000000436C                 call    quotearg_buffer_restyled
.text:0000000000004371                 mov     [rbp+0], r12d
.text:0000000000004375                 add     rsp, 38h
.text:0000000000004379                 pop     rbx
.text:000000000000437A                 pop     rbp
.text:000000000000437B                 pop     r12
.text:000000000000437D                 pop     r13
.text:000000000000437F                 pop     r14
.text:0000000000004381                 pop     r15
.text:0000000000004383                 retn
.text:0000000000004383 ; } // starts at 4310
.text:0000000000004383 quotearg_buffer endp
.text:0000000000004383
.text:0000000000004383 ; ---------------------------------------------------------------------------
.text:0000000000004384                 align 10h
.text:0000000000004390
.text:0000000000004390 ; =============== S U B R O U T I N E =======================================
.text:0000000000004390
.text:0000000000004390 ; Attributes: info_from_lumina
.text:0000000000004390
.text:0000000000004390 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000004390                 public quotearg_alloc_mem
.text:0000000000004390 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000004390
.text:0000000000004390 var_5C          = dword ptr -5Ch
.text:0000000000004390 var_58          = qword ptr -58h
.text:0000000000004390 var_50          = qword ptr -50h
.text:0000000000004390 var_48          = qword ptr -48h
.text:0000000000004390 var_40          = qword ptr -40h
.text:0000000000004390
.text:0000000000004390 ; __unwind {
.text:0000000000004390                 push    r15
.text:0000000000004392                 push    r14
.text:0000000000004394                 lea     rax, default_quoting_options
.text:000000000000439B                 push    r13
.text:000000000000439D                 push    r12
.text:000000000000439F                 mov     r12, rdx
.text:00000000000043A2                 push    rbp
.text:00000000000043A3                 push    rbx
.text:00000000000043A4                 mov     rbx, rcx
.text:00000000000043A7                 mov     r14, rdi
.text:00000000000043AA                 mov     r15, rsi
.text:00000000000043AD                 sub     rsp, 38h
.text:00000000000043B1                 test    rcx, rcx
.text:00000000000043B4                 cmovz   rbx, rax
.text:00000000000043B8                 xor     ebp, ebp
.text:00000000000043BA                 call    ___errno_location
.text:00000000000043BF                 test    r12, r12
.text:00000000000043C2                 mov     r13, rax
.text:00000000000043C5                 mov     eax, [rax]
.text:00000000000043C7                 setz    bpl
.text:00000000000043CB                 or      ebp, [rbx+4]
.text:00000000000043CE                 lea     r10, [rbx+8]
.text:00000000000043D2                 sub     rsp, 8
.text:00000000000043D6                 mov     r8d, [rbx]
.text:00000000000043D9                 mov     rcx, r15
.text:00000000000043DC                 mov     [rsp+70h+var_5C], eax
.text:00000000000043E0                 push    qword ptr [rbx+30h]
.text:00000000000043E3                 mov     rdx, r14
.text:00000000000043E6                 push    qword ptr [rbx+28h]
.text:00000000000043E9                 push    r10
.text:00000000000043EB                 xor     esi, esi
.text:00000000000043ED                 mov     r9d, ebp
.text:00000000000043F0                 xor     edi, edi
.text:00000000000043F2                 mov     [rsp+88h+var_48], r10
.text:00000000000043F7                 call    quotearg_buffer_restyled
.text:00000000000043FC                 lea     rsi, [rax+1]
.text:0000000000004400                 mov     [rsp+88h+var_40], rax
.text:0000000000004405                 add     rsp, 20h
.text:0000000000004409                 mov     rdi, rsi
.text:000000000000440C                 mov     [rsp+68h+var_50], rsi
.text:0000000000004411                 call    xmalloc
.text:0000000000004416                 mov     [rsp+68h+var_58], rax
.text:000000000000441B                 sub     rsp, 8
.text:000000000000441F                 push    qword ptr [rbx+30h]
.text:0000000000004422                 push    qword ptr [rbx+28h]
.text:0000000000004425                 mov     r10, [rsp+80h+var_48]
.text:000000000000442A                 mov     r9d, ebp
.text:000000000000442D                 mov     r8d, [rbx]
.text:0000000000004430                 mov     rcx, r15
.text:0000000000004433                 mov     rdx, r14
.text:0000000000004436                 mov     rdi, rax
.text:0000000000004439                 push    r10
.text:000000000000443B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004440                 call    quotearg_buffer_restyled
.text:0000000000004445                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004449                 add     rsp, 20h
.text:000000000000444D                 test    r12, r12
.text:0000000000004450                 mov     [r13+0], eax
.text:0000000000004454                 jz      short loc_445F
.text:0000000000004456                 mov     r11, [rsp+68h+var_40]
.text:000000000000445B                 mov     [r12], r11
.text:000000000000445F
.text:000000000000445F loc_445F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000445F                 mov     rax, [rsp+68h+var_58]
.text:0000000000004464                 add     rsp, 38h
.text:0000000000004468                 pop     rbx
.text:0000000000004469                 pop     rbp
.text:000000000000446A                 pop     r12
.text:000000000000446C                 pop     r13
.text:000000000000446E                 pop     r14
.text:0000000000004470                 pop     r15
.text:0000000000004472                 retn
.text:0000000000004472 ; } // starts at 4390
.text:0000000000004472 quotearg_alloc_mem endp
.text:0000000000004472
.text:0000000000004472 ; ---------------------------------------------------------------------------
.text:0000000000004473                 align 20h
.text:0000000000004480
.text:0000000000004480 ; =============== S U B R O U T I N E =======================================
.text:0000000000004480
.text:0000000000004480
.text:0000000000004480                 public quotearg_alloc
.text:0000000000004480 quotearg_alloc  proc near
.text:0000000000004480 ; __unwind {
.text:0000000000004480                 mov     rcx, rdx
.text:0000000000004483                 xor     edx, edx
.text:0000000000004485                 jmp     quotearg_alloc_mem
.text:0000000000004485 ; } // starts at 4480
.text:0000000000004485 quotearg_alloc  endp
.text:0000000000004485
.text:0000000000004485 ; ---------------------------------------------------------------------------
.text:000000000000448A                 align 10h
.text:0000000000004490
.text:0000000000004490 ; =============== S U B R O U T I N E =======================================
.text:0000000000004490
.text:0000000000004490 ; Attributes: info_from_lumina
.text:0000000000004490
.text:0000000000004490 ; void __cdecl quotearg_free()
.text:0000000000004490                 public quotearg_free
.text:0000000000004490 quotearg_free   proc near
.text:0000000000004490 ; __unwind {
.text:0000000000004490                 mov     eax, cs:nslots
.text:0000000000004496                 push    r12
.text:0000000000004498                 mov     r12, cs:slotvec
.text:000000000000449F                 push    rbp
.text:00000000000044A0                 push    rbx
.text:00000000000044A1                 cmp     eax, 1
.text:00000000000044A4                 jle     short loc_44D1
.text:00000000000044A6                 sub     eax, 2
.text:00000000000044A9                 lea     rbx, [r12+18h]
.text:00000000000044AE                 shl     rax, 4
.text:00000000000044B2                 lea     rbp, [r12+rax+28h]
.text:00000000000044B7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000044C0
.text:00000000000044C0 loc_44C0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000044C0                 mov     rdi, [rbx]      ; ptr
.text:00000000000044C3                 add     rbx, 10h
.text:00000000000044C7                 call    _free
.text:00000000000044CC                 cmp     rbx, rbp
.text:00000000000044CF                 jnz     short loc_44C0
.text:00000000000044D1
.text:00000000000044D1 loc_44D1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000044D1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000044D6                 lea     rbx, slot0
.text:00000000000044DD                 cmp     rdi, rbx
.text:00000000000044E0                 jz      short loc_44F9
.text:00000000000044E2                 call    _free
.text:00000000000044E7                 mov     cs:slotvec0, 100h
.text:00000000000044F2                 mov     cs:off_208098, rbx
.text:00000000000044F9
.text:00000000000044F9 loc_44F9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000044F9                 lea     rbx, slotvec0
.text:0000000000004500                 cmp     r12, rbx
.text:0000000000004503                 jz      short loc_4514
.text:0000000000004505                 mov     rdi, r12        ; ptr
.text:0000000000004508                 call    _free
.text:000000000000450D                 mov     cs:slotvec, rbx
.text:0000000000004514
.text:0000000000004514 loc_4514:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004514                 pop     rbx
.text:0000000000004515                 mov     cs:nslots, 1
.text:000000000000451F                 pop     rbp
.text:0000000000004520                 pop     r12
.text:0000000000004522                 retn
.text:0000000000004522 ; } // starts at 4490
.text:0000000000004522 quotearg_free   endp
.text:0000000000004522
.text:0000000000004522 ; ---------------------------------------------------------------------------
.text:0000000000004523                 align 10h
.text:0000000000004530
.text:0000000000004530 ; =============== S U B R O U T I N E =======================================
.text:0000000000004530
.text:0000000000004530
.text:0000000000004530                 public quotearg_n
.text:0000000000004530 quotearg_n      proc near
.text:0000000000004530 ; __unwind {
.text:0000000000004530                 lea     rcx, default_quoting_options
.text:0000000000004537                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000453E                 jmp     quotearg_n_options
.text:000000000000453E ; } // starts at 4530
.text:000000000000453E quotearg_n      endp
.text:000000000000453E
.text:000000000000453E ; ---------------------------------------------------------------------------
.text:0000000000004543                 align 10h
.text:0000000000004550
.text:0000000000004550 ; =============== S U B R O U T I N E =======================================
.text:0000000000004550
.text:0000000000004550
.text:0000000000004550                 public quotearg_n_mem
.text:0000000000004550 quotearg_n_mem  proc near
.text:0000000000004550 ; __unwind {
.text:0000000000004550                 lea     rcx, default_quoting_options
.text:0000000000004557                 jmp     quotearg_n_options
.text:0000000000004557 ; } // starts at 4550
.text:0000000000004557 quotearg_n_mem  endp
.text:0000000000004557
.text:0000000000004557 ; ---------------------------------------------------------------------------
.text:000000000000455C                 align 20h
.text:0000000000004560
.text:0000000000004560 ; =============== S U B R O U T I N E =======================================
.text:0000000000004560
.text:0000000000004560
.text:0000000000004560                 public quotearg
.text:0000000000004560 quotearg        proc near
.text:0000000000004560 ; __unwind {
.text:0000000000004560                 lea     rcx, default_quoting_options
.text:0000000000004567                 mov     rsi, rdi
.text:000000000000456A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004571                 xor     edi, edi
.text:0000000000004573                 jmp     quotearg_n_options
.text:0000000000004573 ; } // starts at 4560
.text:0000000000004573 quotearg        endp
.text:0000000000004573
.text:0000000000004573 ; ---------------------------------------------------------------------------
.text:0000000000004578                 align 20h
.text:0000000000004580
.text:0000000000004580 ; =============== S U B R O U T I N E =======================================
.text:0000000000004580
.text:0000000000004580
.text:0000000000004580                 public quotearg_mem
.text:0000000000004580 quotearg_mem    proc near
.text:0000000000004580 ; __unwind {
.text:0000000000004580                 lea     rcx, default_quoting_options
.text:0000000000004587                 mov     rdx, rsi
.text:000000000000458A                 mov     rsi, rdi
.text:000000000000458D                 xor     edi, edi
.text:000000000000458F                 jmp     quotearg_n_options
.text:000000000000458F ; } // starts at 4580
.text:000000000000458F quotearg_mem    endp
.text:000000000000458F
.text:000000000000458F ; ---------------------------------------------------------------------------
.text:0000000000004594                 align 20h
.text:00000000000045A0
.text:00000000000045A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045A0
.text:00000000000045A0 ; Attributes: info_from_lumina
.text:00000000000045A0
.text:00000000000045A0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000045A0                 public quotearg_n_style
.text:00000000000045A0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:00000000000045A0
.text:00000000000045A0 var_48          = dword ptr -48h
.text:00000000000045A0 var_44          = qword ptr -44h
.text:00000000000045A0 var_3C          = qword ptr -3Ch
.text:00000000000045A0 var_34          = qword ptr -34h
.text:00000000000045A0 var_2C          = qword ptr -2Ch
.text:00000000000045A0 var_24          = qword ptr -24h
.text:00000000000045A0 var_1C          = qword ptr -1Ch
.text:00000000000045A0 var_14          = dword ptr -14h
.text:00000000000045A0 var_10          = qword ptr -10h
.text:00000000000045A0
.text:00000000000045A0 ; __unwind {
.text:00000000000045A0                 sub     rsp, 48h
.text:00000000000045A4                 mov     rax, rdx
.text:00000000000045A7                 mov     rdx, fs:28h
.text:00000000000045B0                 mov     [rsp+48h+var_10], rdx
.text:00000000000045B5                 xor     edx, edx
.text:00000000000045B7                 cmp     esi, 0Ah
.text:00000000000045BA                 jz      short loc_4624
.text:00000000000045BC                 mov     [rsp+48h+var_48], esi
.text:00000000000045BF                 mov     rcx, rsp
.text:00000000000045C2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000045C9                 mov     rsi, rax
.text:00000000000045CC                 mov     [rsp+48h+var_44], 0
.text:00000000000045D5                 mov     [rsp+48h+var_3C], 0
.text:00000000000045DE                 mov     [rsp+48h+var_34], 0
.text:00000000000045E7                 mov     [rsp+48h+var_2C], 0
.text:00000000000045F0                 mov     [rsp+48h+var_24], 0
.text:00000000000045F9                 mov     [rsp+48h+var_1C], 0
.text:0000000000004602                 mov     [rsp+48h+var_14], 0
.text:000000000000460A                 call    quotearg_n_options
.text:000000000000460F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004614                 xor     rcx, fs:28h
.text:000000000000461D                 jnz     short loc_4629
.text:000000000000461F                 add     rsp, 48h
.text:0000000000004623                 retn
.text:0000000000004624 ; ---------------------------------------------------------------------------
.text:0000000000004624
.text:0000000000004624 loc_4624:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004624                 call    _abort
.text:0000000000004629 ; ---------------------------------------------------------------------------
.text:0000000000004629
.text:0000000000004629 loc_4629:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004629                 call    ___stack_chk_fail
.text:0000000000004629 ; } // starts at 45A0
.text:0000000000004629 quotearg_n_style endp
.text:0000000000004629
.text:0000000000004629 ; ---------------------------------------------------------------------------
.text:000000000000462E                 align 10h
.text:0000000000004630
.text:0000000000004630 ; =============== S U B R O U T I N E =======================================
.text:0000000000004630
.text:0000000000004630 ; Attributes: info_from_lumina
.text:0000000000004630
.text:0000000000004630 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004630                 public quotearg_n_style_mem
.text:0000000000004630 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004630
.text:0000000000004630 var_48          = dword ptr -48h
.text:0000000000004630 var_44          = qword ptr -44h
.text:0000000000004630 var_3C          = qword ptr -3Ch
.text:0000000000004630 var_34          = qword ptr -34h
.text:0000000000004630 var_2C          = qword ptr -2Ch
.text:0000000000004630 var_24          = qword ptr -24h
.text:0000000000004630 var_1C          = qword ptr -1Ch
.text:0000000000004630 var_14          = dword ptr -14h
.text:0000000000004630 var_10          = qword ptr -10h
.text:0000000000004630
.text:0000000000004630 ; __unwind {
.text:0000000000004630                 sub     rsp, 48h
.text:0000000000004634                 mov     rax, rdx
.text:0000000000004637                 mov     rdx, rcx
.text:000000000000463A                 mov     rcx, fs:28h
.text:0000000000004643                 mov     [rsp+48h+var_10], rcx
.text:0000000000004648                 xor     ecx, ecx
.text:000000000000464A                 cmp     esi, 0Ah
.text:000000000000464D                 jz      short loc_46B0
.text:000000000000464F                 mov     [rsp+48h+var_48], esi
.text:0000000000004652                 mov     rcx, rsp
.text:0000000000004655                 mov     rsi, rax
.text:0000000000004658                 mov     [rsp+48h+var_44], 0
.text:0000000000004661                 mov     [rsp+48h+var_3C], 0
.text:000000000000466A                 mov     [rsp+48h+var_34], 0
.text:0000000000004673                 mov     [rsp+48h+var_2C], 0
.text:000000000000467C                 mov     [rsp+48h+var_24], 0
.text:0000000000004685                 mov     [rsp+48h+var_1C], 0
.text:000000000000468E                 mov     [rsp+48h+var_14], 0
.text:0000000000004696                 call    quotearg_n_options
.text:000000000000469B                 mov     rdx, [rsp+48h+var_10]
.text:00000000000046A0                 xor     rdx, fs:28h
.text:00000000000046A9                 jnz     short loc_46B5
.text:00000000000046AB                 add     rsp, 48h
.text:00000000000046AF                 retn
.text:00000000000046B0 ; ---------------------------------------------------------------------------
.text:00000000000046B0
.text:00000000000046B0 loc_46B0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000046B0                 call    _abort
.text:00000000000046B5 ; ---------------------------------------------------------------------------
.text:00000000000046B5
.text:00000000000046B5 loc_46B5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000046B5                 call    ___stack_chk_fail
.text:00000000000046B5 ; } // starts at 4630
.text:00000000000046B5 quotearg_n_style_mem endp
.text:00000000000046B5
.text:00000000000046B5 ; ---------------------------------------------------------------------------
.text:00000000000046BA                 align 20h
.text:00000000000046C0
.text:00000000000046C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046C0
.text:00000000000046C0
.text:00000000000046C0                 public quotearg_style
.text:00000000000046C0 quotearg_style  proc near
.text:00000000000046C0 ; __unwind {
.text:00000000000046C0                 mov     rdx, rsi
.text:00000000000046C3                 mov     esi, edi
.text:00000000000046C5                 xor     edi, edi
.text:00000000000046C7                 jmp     quotearg_n_style
.text:00000000000046C7 ; } // starts at 46C0
.text:00000000000046C7 quotearg_style  endp
.text:00000000000046C7
.text:00000000000046C7 ; ---------------------------------------------------------------------------
.text:00000000000046CC                 align 10h
.text:00000000000046D0
.text:00000000000046D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046D0
.text:00000000000046D0
.text:00000000000046D0                 public quotearg_style_mem
.text:00000000000046D0 quotearg_style_mem proc near
.text:00000000000046D0 ; __unwind {
.text:00000000000046D0                 mov     rcx, rdx
.text:00000000000046D3                 mov     rdx, rsi
.text:00000000000046D6                 mov     esi, edi
.text:00000000000046D8                 xor     edi, edi
.text:00000000000046DA                 jmp     quotearg_n_style_mem
.text:00000000000046DA ; } // starts at 46D0
.text:00000000000046DA quotearg_style_mem endp
.text:00000000000046DA
.text:00000000000046DA ; ---------------------------------------------------------------------------
.text:00000000000046DF                 align 20h
.text:00000000000046E0
.text:00000000000046E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046E0
.text:00000000000046E0 ; Attributes: info_from_lumina
.text:00000000000046E0
.text:00000000000046E0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:00000000000046E0                 public quotearg_char_mem
.text:00000000000046E0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:00000000000046E0                                         ; quotearg_colon+C↓j ...
.text:00000000000046E0
.text:00000000000046E0 var_48          = xmmword ptr -48h
.text:00000000000046E0 var_38          = xmmword ptr -38h
.text:00000000000046E0 var_28          = xmmword ptr -28h
.text:00000000000046E0 var_18          = qword ptr -18h
.text:00000000000046E0 var_10          = qword ptr -10h
.text:00000000000046E0
.text:00000000000046E0 ; __unwind {
.text:00000000000046E0                 sub     rsp, 48h
.text:00000000000046E4                 mov     ecx, edx
.text:00000000000046E6                 mov     rax, fs:28h
.text:00000000000046EF                 mov     [rsp+48h+var_10], rax
.text:00000000000046F4                 xor     eax, eax
.text:00000000000046F6                 mov     rax, cs:qword_208290
.text:00000000000046FD                 mov     r8, rsp
.text:0000000000004700                 and     ecx, 1Fh
.text:0000000000004703                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000470B                 mov     [rsp+48h+var_18], rax
.text:0000000000004710                 mov     eax, edx
.text:0000000000004712                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004716                 shr     al, 5
.text:0000000000004719                 movzx   eax, al
.text:000000000000471C                 lea     r9, [r8+rax*4+8]
.text:0000000000004721                 movdqa  xmm0, cs:xmmword_208270
.text:0000000000004729                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000472E                 movdqa  xmm0, cs:xmmword_208280
.text:0000000000004736                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000473B                 mov     edx, [r9]
.text:000000000000473E                 mov     eax, edx
.text:0000000000004740                 shr     eax, cl
.text:0000000000004742                 not     eax
.text:0000000000004744                 and     eax, 1
.text:0000000000004747                 shl     eax, cl
.text:0000000000004749                 mov     rcx, r8
.text:000000000000474C                 xor     eax, edx
.text:000000000000474E                 mov     rdx, rsi
.text:0000000000004751                 mov     rsi, rdi
.text:0000000000004754                 mov     [r9], eax
.text:0000000000004757                 xor     edi, edi
.text:0000000000004759                 call    quotearg_n_options
.text:000000000000475E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000004763                 xor     rsi, fs:28h
.text:000000000000476C                 jnz     short loc_4773
.text:000000000000476E                 add     rsp, 48h
.text:0000000000004772                 retn
.text:0000000000004773 ; ---------------------------------------------------------------------------
.text:0000000000004773
.text:0000000000004773 loc_4773:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000004773                 call    ___stack_chk_fail
.text:0000000000004773 ; } // starts at 46E0
.text:0000000000004773 quotearg_char_mem endp
.text:0000000000004773
.text:0000000000004773 ; ---------------------------------------------------------------------------
.text:0000000000004778                 align 20h
.text:0000000000004780
.text:0000000000004780 ; =============== S U B R O U T I N E =======================================
.text:0000000000004780
.text:0000000000004780
.text:0000000000004780                 public quotearg_char
.text:0000000000004780 quotearg_char   proc near
.text:0000000000004780 ; __unwind {
.text:0000000000004780                 movsx   edx, sil
.text:0000000000004784                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000478B                 jmp     quotearg_char_mem
.text:000000000000478B ; } // starts at 4780
.text:000000000000478B quotearg_char   endp
.text:000000000000478B
.text:0000000000004790
.text:0000000000004790 ; =============== S U B R O U T I N E =======================================
.text:0000000000004790
.text:0000000000004790
.text:0000000000004790                 public quotearg_colon
.text:0000000000004790 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000004790 ; __unwind {
.text:0000000000004790                 mov     edx, 3Ah ; ':'
.text:0000000000004795                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000479C                 jmp     quotearg_char_mem
.text:000000000000479C ; } // starts at 4790
.text:000000000000479C quotearg_colon  endp
.text:000000000000479C
.text:000000000000479C ; ---------------------------------------------------------------------------
.text:00000000000047A1                 align 10h
.text:00000000000047B0
.text:00000000000047B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047B0
.text:00000000000047B0
.text:00000000000047B0                 public quotearg_colon_mem
.text:00000000000047B0 quotearg_colon_mem proc near
.text:00000000000047B0 ; __unwind {
.text:00000000000047B0                 mov     edx, 3Ah ; ':'
.text:00000000000047B5                 jmp     quotearg_char_mem
.text:00000000000047B5 ; } // starts at 47B0
.text:00000000000047B5 quotearg_colon_mem endp
.text:00000000000047B5
.text:00000000000047B5 ; ---------------------------------------------------------------------------
.text:00000000000047BA                 align 20h
.text:00000000000047C0
.text:00000000000047C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047C0
.text:00000000000047C0 ; Attributes: info_from_lumina
.text:00000000000047C0
.text:00000000000047C0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:00000000000047C0                 public quotearg_n_style_colon
.text:00000000000047C0 quotearg_n_style_colon proc near        ; CODE XREF: next_file+9A↑p
.text:00000000000047C0                                         ; next_file+16B↑p ...
.text:00000000000047C0
.text:00000000000047C0 var_48          = dword ptr -48h
.text:00000000000047C0 var_44          = qword ptr -44h
.text:00000000000047C0 var_3C          = qword ptr -3Ch
.text:00000000000047C0 var_34          = qword ptr -34h
.text:00000000000047C0 var_2C          = qword ptr -2Ch
.text:00000000000047C0 var_24          = qword ptr -24h
.text:00000000000047C0 var_1C          = qword ptr -1Ch
.text:00000000000047C0 var_14          = dword ptr -14h
.text:00000000000047C0 var_10          = qword ptr -10h
.text:00000000000047C0
.text:00000000000047C0 ; __unwind {
.text:00000000000047C0                 sub     rsp, 48h
.text:00000000000047C4                 mov     rax, rdx
.text:00000000000047C7                 mov     rdx, fs:28h
.text:00000000000047D0                 mov     [rsp+48h+var_10], rdx
.text:00000000000047D5                 xor     edx, edx
.text:00000000000047D7                 cmp     esi, 0Ah
.text:00000000000047DA                 jz      short loc_4844
.text:00000000000047DC                 mov     [rsp+48h+var_48], esi
.text:00000000000047DF                 mov     rcx, rsp
.text:00000000000047E2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000047E9                 mov     rsi, rax
.text:00000000000047EC                 mov     [rsp+48h+var_44], 0
.text:00000000000047F5                 mov     [rsp+48h+var_3C], 4000000h
.text:00000000000047FE                 mov     [rsp+48h+var_34], 0
.text:0000000000004807                 mov     [rsp+48h+var_2C], 0
.text:0000000000004810                 mov     [rsp+48h+var_24], 0
.text:0000000000004819                 mov     [rsp+48h+var_1C], 0
.text:0000000000004822                 mov     [rsp+48h+var_14], 0
.text:000000000000482A                 call    quotearg_n_options
.text:000000000000482F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004834                 xor     rcx, fs:28h
.text:000000000000483D                 jnz     short loc_4849
.text:000000000000483F                 add     rsp, 48h
.text:0000000000004843                 retn
.text:0000000000004844 ; ---------------------------------------------------------------------------
.text:0000000000004844
.text:0000000000004844 loc_4844:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004844                 call    _abort
.text:0000000000004849 ; ---------------------------------------------------------------------------
.text:0000000000004849
.text:0000000000004849 loc_4849:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004849                 call    ___stack_chk_fail
.text:0000000000004849 ; } // starts at 47C0
.text:0000000000004849 quotearg_n_style_colon endp
.text:0000000000004849
.text:0000000000004849 ; ---------------------------------------------------------------------------
.text:000000000000484E                 align 10h
.text:0000000000004850
.text:0000000000004850 ; =============== S U B R O U T I N E =======================================
.text:0000000000004850
.text:0000000000004850 ; Attributes: info_from_lumina
.text:0000000000004850
.text:0000000000004850 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004850                 public quotearg_n_custom_mem
.text:0000000000004850 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004850                                         ; quotearg_custom+12↓j ...
.text:0000000000004850
.text:0000000000004850 var_48          = xmmword ptr -48h
.text:0000000000004850 var_38          = xmmword ptr -38h
.text:0000000000004850 var_28          = xmmword ptr -28h
.text:0000000000004850 var_18          = qword ptr -18h
.text:0000000000004850 var_10          = qword ptr -10h
.text:0000000000004850
.text:0000000000004850 ; __unwind {
.text:0000000000004850                 sub     rsp, 48h
.text:0000000000004854                 mov     r9, rcx
.text:0000000000004857                 mov     rcx, cs:qword_208290
.text:000000000000485E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004866                 mov     rax, fs:28h
.text:000000000000486F                 mov     [rsp+48h+var_10], rax
.text:0000000000004874                 xor     eax, eax
.text:0000000000004876                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000487A                 test    rsi, rsi
.text:000000000000487D                 mov     [rsp+48h+var_18], rcx
.text:0000000000004882                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000004889                 movdqa  xmm0, cs:xmmword_208270
.text:0000000000004891                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004896                 movdqa  xmm0, cs:xmmword_208280
.text:000000000000489E                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000048A3                 jz      short loc_48D7
.text:00000000000048A5                 test    rdx, rdx
.text:00000000000048A8                 jz      short loc_48D7
.text:00000000000048AA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:00000000000048AF                 mov     [rsp+48h+var_18], rdx
.text:00000000000048B4                 mov     rcx, rsp
.text:00000000000048B7                 mov     rdx, r8
.text:00000000000048BA                 mov     rsi, r9
.text:00000000000048BD                 call    quotearg_n_options
.text:00000000000048C2                 mov     rdi, [rsp+48h+var_10]
.text:00000000000048C7                 xor     rdi, fs:28h
.text:00000000000048D0                 jnz     short loc_48DC
.text:00000000000048D2                 add     rsp, 48h
.text:00000000000048D6                 retn
.text:00000000000048D7 ; ---------------------------------------------------------------------------
.text:00000000000048D7
.text:00000000000048D7 loc_48D7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:00000000000048D7                                         ; quotearg_n_custom_mem+58↑j
.text:00000000000048D7                 call    _abort
.text:00000000000048DC ; ---------------------------------------------------------------------------
.text:00000000000048DC
.text:00000000000048DC loc_48DC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:00000000000048DC                 call    ___stack_chk_fail
.text:00000000000048DC ; } // starts at 4850
.text:00000000000048DC quotearg_n_custom_mem endp
.text:00000000000048DC
.text:00000000000048DC ; ---------------------------------------------------------------------------
.text:00000000000048E1                 align 10h
.text:00000000000048F0
.text:00000000000048F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048F0
.text:00000000000048F0
.text:00000000000048F0                 public quotearg_n_custom
.text:00000000000048F0 quotearg_n_custom proc near
.text:00000000000048F0 ; __unwind {
.text:00000000000048F0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000048F7                 jmp     quotearg_n_custom_mem
.text:00000000000048F7 ; } // starts at 48F0
.text:00000000000048F7 quotearg_n_custom endp
.text:00000000000048F7
.text:00000000000048F7 ; ---------------------------------------------------------------------------
.text:00000000000048FC                 align 20h
.text:0000000000004900
.text:0000000000004900 ; =============== S U B R O U T I N E =======================================
.text:0000000000004900
.text:0000000000004900
.text:0000000000004900                 public quotearg_custom
.text:0000000000004900 quotearg_custom proc near
.text:0000000000004900 ; __unwind {
.text:0000000000004900                 mov     rcx, rdx
.text:0000000000004903                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000490A                 mov     rdx, rsi
.text:000000000000490D                 mov     rsi, rdi
.text:0000000000004910                 xor     edi, edi
.text:0000000000004912                 jmp     quotearg_n_custom_mem
.text:0000000000004912 ; } // starts at 4900
.text:0000000000004912 quotearg_custom endp
.text:0000000000004912
.text:0000000000004912 ; ---------------------------------------------------------------------------
.text:0000000000004917                 align 20h
.text:0000000000004920
.text:0000000000004920 ; =============== S U B R O U T I N E =======================================
.text:0000000000004920
.text:0000000000004920
.text:0000000000004920                 public quotearg_custom_mem
.text:0000000000004920 quotearg_custom_mem proc near
.text:0000000000004920 ; __unwind {
.text:0000000000004920                 mov     r8, rcx
.text:0000000000004923                 mov     rcx, rdx
.text:0000000000004926                 mov     rdx, rsi
.text:0000000000004929                 mov     rsi, rdi
.text:000000000000492C                 xor     edi, edi
.text:000000000000492E                 jmp     quotearg_n_custom_mem
.text:000000000000492E ; } // starts at 4920
.text:000000000000492E quotearg_custom_mem endp
.text:000000000000492E
.text:000000000000492E ; ---------------------------------------------------------------------------
.text:0000000000004933                 align 20h
.text:0000000000004940
.text:0000000000004940 ; =============== S U B R O U T I N E =======================================
.text:0000000000004940
.text:0000000000004940
.text:0000000000004940                 public quote_n_mem
.text:0000000000004940 quote_n_mem     proc near
.text:0000000000004940 ; __unwind {
.text:0000000000004940                 lea     rcx, quote_quoting_options
.text:0000000000004947                 jmp     quotearg_n_options
.text:0000000000004947 ; } // starts at 4940
.text:0000000000004947 quote_n_mem     endp
.text:0000000000004947
.text:0000000000004947 ; ---------------------------------------------------------------------------
.text:000000000000494C                 align 10h
.text:0000000000004950
.text:0000000000004950 ; =============== S U B R O U T I N E =======================================
.text:0000000000004950
.text:0000000000004950
.text:0000000000004950                 public quote_mem
.text:0000000000004950 quote_mem       proc near
.text:0000000000004950 ; __unwind {
.text:0000000000004950                 lea     rcx, quote_quoting_options
.text:0000000000004957                 mov     rdx, rsi
.text:000000000000495A                 mov     rsi, rdi
.text:000000000000495D                 xor     edi, edi
.text:000000000000495F                 jmp     quotearg_n_options
.text:000000000000495F ; } // starts at 4950
.text:000000000000495F quote_mem       endp
.text:000000000000495F
.text:000000000000495F ; ---------------------------------------------------------------------------
.text:0000000000004964                 align 10h
.text:0000000000004970
.text:0000000000004970 ; =============== S U B R O U T I N E =======================================
.text:0000000000004970
.text:0000000000004970
.text:0000000000004970                 public quote_n
.text:0000000000004970 quote_n         proc near
.text:0000000000004970 ; __unwind {
.text:0000000000004970                 lea     rcx, quote_quoting_options
.text:0000000000004977                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000497E                 jmp     quotearg_n_options
.text:000000000000497E ; } // starts at 4970
.text:000000000000497E quote_n         endp
.text:000000000000497E
.text:000000000000497E ; ---------------------------------------------------------------------------
.text:0000000000004983                 align 10h
.text:0000000000004990
.text:0000000000004990 ; =============== S U B R O U T I N E =======================================
.text:0000000000004990
.text:0000000000004990
.text:0000000000004990                 public quote
.text:0000000000004990 quote           proc near               ; CODE XREF: parse_tab_stops+216↑p
.text:0000000000004990                                         ; parse_tab_stops+26E↑p ...
.text:0000000000004990 ; __unwind {
.text:0000000000004990                 lea     rcx, quote_quoting_options
.text:0000000000004997                 mov     rsi, rdi
.text:000000000000499A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000049A1                 xor     edi, edi
.text:00000000000049A3                 jmp     quotearg_n_options
.text:00000000000049A3 ; } // starts at 4990
.text:00000000000049A3 quote           endp
.text:00000000000049A3
.text:00000000000049A3 ; ---------------------------------------------------------------------------
.text:00000000000049A8                 align 10h
.text:00000000000049B0
.text:00000000000049B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049B0
.text:00000000000049B0
.text:00000000000049B0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000049B0                 public version_etc_arn
.text:00000000000049B0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_4DEB↓j
.text:00000000000049B0                                         ; version_etc_va:loc_4E3B↓p ...
.text:00000000000049B0
.text:00000000000049B0 var_58          = qword ptr -58h
.text:00000000000049B0 var_50          = qword ptr -50h
.text:00000000000049B0 var_48          = qword ptr -48h
.text:00000000000049B0 var_40          = qword ptr -40h
.text:00000000000049B0
.text:00000000000049B0 ; __unwind {
.text:00000000000049B0                 push    r15
.text:00000000000049B2                 push    r14
.text:00000000000049B4                 push    r13
.text:00000000000049B6                 push    r12
.text:00000000000049B8                 mov     r12, r9
.text:00000000000049BB                 push    rbp
.text:00000000000049BC                 push    rbx
.text:00000000000049BD                 mov     rbp, rdi
.text:00000000000049C0                 mov     rbx, r8
.text:00000000000049C3                 sub     rsp, 28h
.text:00000000000049C7                 test    rsi, rsi
.text:00000000000049CA                 jz      loc_4AE8
.text:00000000000049D0                 mov     r8, rdx
.text:00000000000049D3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:00000000000049DA                 mov     r9, rcx
.text:00000000000049DD                 xor     eax, eax
.text:00000000000049DF                 mov     rcx, rsi
.text:00000000000049E2                 mov     esi, 1
.text:00000000000049E7                 call    ___fprintf_chk
.text:00000000000049EC
.text:00000000000049EC loc_49EC:                               ; CODE XREF: version_etc_arn+151↓j
.text:00000000000049EC                 lea     rsi, aC_0       ; "(C)"
.text:00000000000049F3                 xor     edi, edi        ; domainname
.text:00000000000049F5                 mov     edx, 5          ; category
.text:00000000000049FA                 call    _dcgettext
.text:00000000000049FF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004A06                 mov     rcx, rax
.text:0000000000004A09                 mov     r8d, 7E3h
.text:0000000000004A0F                 mov     esi, 1
.text:0000000000004A14                 mov     rdi, rbp
.text:0000000000004A17                 xor     eax, eax
.text:0000000000004A19                 call    ___fprintf_chk
.text:0000000000004A1E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004A25                 xor     edi, edi        ; domainname
.text:0000000000004A27                 mov     edx, 5          ; category
.text:0000000000004A2C                 call    _dcgettext
.text:0000000000004A31                 mov     rsi, rbp        ; stream
.text:0000000000004A34                 mov     rdi, rax        ; s
.text:0000000000004A37                 call    _fputs_unlocked
.text:0000000000004A3C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004A40                 ja      def_4A54        ; jumptable 0000000000004A54 default case
.text:0000000000004A46                 lea     rdx, jpt_4A54
.text:0000000000004A4D                 movsxd  rax, ds:(jpt_4A54 - 65E8h)[rdx+r12*4]
.text:0000000000004A51                 add     rax, rdx
.text:0000000000004A54                 jmp     rax             ; switch jump
.text:0000000000004A54 ; ---------------------------------------------------------------------------
.text:0000000000004A56                 align 20h
.text:0000000000004A60
.text:0000000000004A60 loc_4A60:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004A60                                         ; DATA XREF: .rodata:jpt_4A54↓o
.text:0000000000004A60                 mov     r9, [rbx+38h]   ; jumptable 0000000000004A54 case 8
.text:0000000000004A64                 mov     rax, [rbx+10h]
.text:0000000000004A68                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004A6F                 mov     r8, [rbx+8]
.text:0000000000004A73                 mov     edx, 5          ; category
.text:0000000000004A78                 xor     edi, edi        ; domainname
.text:0000000000004A7A                 mov     r13, [rbx+30h]
.text:0000000000004A7E                 mov     r12, [rbx+28h]
.text:0000000000004A82                 mov     [rsp+58h+var_48], r9
.text:0000000000004A87                 mov     r15, [rbx+20h]
.text:0000000000004A8B                 mov     r14, [rbx+18h]
.text:0000000000004A8F                 mov     [rsp+58h+var_58], rax
.text:0000000000004A93                 mov     [rsp+58h+var_50], r8
.text:0000000000004A98                 mov     rbx, [rbx]
.text:0000000000004A9B                 call    _dcgettext
.text:0000000000004AA0                 sub     rsp, 8
.text:0000000000004AA4
.text:0000000000004AA4 loc_4AA4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000004AA4                 mov     r9, [rsp+60h+var_48]
.text:0000000000004AA9                 mov     rdx, rax
.text:0000000000004AAC                 mov     rcx, rbx
.text:0000000000004AAF                 mov     esi, 1
.text:0000000000004AB4                 mov     rdi, rbp
.text:0000000000004AB7                 xor     eax, eax
.text:0000000000004AB9                 push    r9
.text:0000000000004ABB                 push    r13
.text:0000000000004ABD                 push    r12
.text:0000000000004ABF                 push    r15
.text:0000000000004AC1                 push    r14
.text:0000000000004AC3                 mov     r9, [rsp+88h+var_58]
.text:0000000000004AC8                 mov     r8, [rsp+88h+var_50]
.text:0000000000004ACD                 call    ___fprintf_chk
.text:0000000000004AD2                 add     rsp, 30h
.text:0000000000004AD6
.text:0000000000004AD6 loc_4AD6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004AD6                                         ; DATA XREF: .rodata:jpt_4A54↓o
.text:0000000000004AD6                 add     rsp, 28h        ; jumptable 0000000000004A54 case 0
.text:0000000000004ADA                 pop     rbx
.text:0000000000004ADB                 pop     rbp
.text:0000000000004ADC                 pop     r12
.text:0000000000004ADE                 pop     r13
.text:0000000000004AE0                 pop     r14
.text:0000000000004AE2                 pop     r15
.text:0000000000004AE4                 retn
.text:0000000000004AE4 ; ---------------------------------------------------------------------------
.text:0000000000004AE5                 align 8
.text:0000000000004AE8
.text:0000000000004AE8 loc_4AE8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000004AE8                 mov     r8, rcx
.text:0000000000004AEB                 mov     rcx, rdx
.text:0000000000004AEE                 lea     rdx, aSS        ; "%s %s\n"
.text:0000000000004AF5                 mov     esi, 1
.text:0000000000004AFA                 xor     eax, eax
.text:0000000000004AFC                 call    ___fprintf_chk
.text:0000000000004B01                 jmp     loc_49EC
.text:0000000000004B01 ; ---------------------------------------------------------------------------
.text:0000000000004B06                 align 10h
.text:0000000000004B10
.text:0000000000004B10 loc_4B10:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004B10                                         ; DATA XREF: .rodata:jpt_4A54↓o
.text:0000000000004B10                 mov     r10, [rbx+40h]  ; jumptable 0000000000004A54 case 9
.text:0000000000004B14                 mov     r9, [rbx+38h]
.text:0000000000004B18                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004B1F                 mov     rax, [rbx+10h]
.text:0000000000004B23                 mov     r8, [rbx+8]
.text:0000000000004B27                 mov     edx, 5          ; category
.text:0000000000004B2C                 mov     r13, [rbx+30h]
.text:0000000000004B30                 mov     r12, [rbx+28h]
.text:0000000000004B34                 mov     r15, [rbx+20h]
.text:0000000000004B38                 mov     r14, [rbx+18h]
.text:0000000000004B3C                 mov     rbx, [rbx]
.text:0000000000004B3F                 mov     [rsp+58h+var_40], r10
.text:0000000000004B44                 mov     [rsp+58h+var_48], r9
.text:0000000000004B49                 mov     [rsp+58h+var_58], rax
.text:0000000000004B4D                 mov     [rsp+58h+var_50], r8
.text:0000000000004B52
.text:0000000000004B52 loc_4B52:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004B52                 xor     edi, edi        ; domainname
.text:0000000000004B54                 call    _dcgettext
.text:0000000000004B59                 mov     r10, [rsp+58h+var_40]
.text:0000000000004B5E                 push    r10
.text:0000000000004B60                 jmp     loc_4AA4
.text:0000000000004B60 ; ---------------------------------------------------------------------------
.text:0000000000004B65                 align 8
.text:0000000000004B68
.text:0000000000004B68 loc_4B68:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004B68                                         ; DATA XREF: .rodata:jpt_4A54↓o
.text:0000000000004B68                 mov     rbx, [rbx]      ; jumptable 0000000000004A54 case 1
.text:0000000000004B6B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000004B72                 mov     edx, 5          ; category
.text:0000000000004B77                 xor     edi, edi        ; domainname
.text:0000000000004B79                 call    _dcgettext
.text:0000000000004B7E                 add     rsp, 28h
.text:0000000000004B82                 mov     rcx, rbx
.text:0000000000004B85                 mov     rdi, rbp
.text:0000000000004B88                 pop     rbx
.text:0000000000004B89                 pop     rbp
.text:0000000000004B8A                 pop     r12
.text:0000000000004B8C                 pop     r13
.text:0000000000004B8E                 pop     r14
.text:0000000000004B90                 pop     r15
.text:0000000000004B92                 mov     rdx, rax
.text:0000000000004B95                 mov     esi, 1
.text:0000000000004B9A                 xor     eax, eax
.text:0000000000004B9C                 jmp     ___fprintf_chk
.text:0000000000004B9C ; ---------------------------------------------------------------------------
.text:0000000000004BA1                 align 8
.text:0000000000004BA8
.text:0000000000004BA8 loc_4BA8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004BA8                                         ; DATA XREF: .rodata:jpt_4A54↓o
.text:0000000000004BA8                 mov     r12, [rbx+8]    ; jumptable 0000000000004A54 case 2
.text:0000000000004BAC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000004BB3                 mov     rbx, [rbx]
.text:0000000000004BB6                 mov     edx, 5          ; category
.text:0000000000004BBB                 xor     edi, edi        ; domainname
.text:0000000000004BBD                 call    _dcgettext
.text:0000000000004BC2                 add     rsp, 28h
.text:0000000000004BC6                 mov     r8, r12
.text:0000000000004BC9                 mov     rcx, rbx
.text:0000000000004BCC                 mov     rdi, rbp
.text:0000000000004BCF                 mov     rdx, rax
.text:0000000000004BD2                 mov     esi, 1
.text:0000000000004BD7                 pop     rbx
.text:0000000000004BD8                 pop     rbp
.text:0000000000004BD9                 pop     r12
.text:0000000000004BDB                 pop     r13
.text:0000000000004BDD                 pop     r14
.text:0000000000004BDF                 pop     r15
.text:0000000000004BE1                 xor     eax, eax
.text:0000000000004BE3                 jmp     ___fprintf_chk
.text:0000000000004BE3 ; ---------------------------------------------------------------------------
.text:0000000000004BE8                 align 10h
.text:0000000000004BF0
.text:0000000000004BF0 loc_4BF0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004BF0                                         ; DATA XREF: .rodata:jpt_4A54↓o
.text:0000000000004BF0                 mov     r13, [rbx+10h]  ; jumptable 0000000000004A54 case 3
.text:0000000000004BF4                 mov     r12, [rbx+8]
.text:0000000000004BF8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000004BFF                 mov     rbx, [rbx]
.text:0000000000004C02                 mov     edx, 5          ; category
.text:0000000000004C07                 xor     edi, edi        ; domainname
.text:0000000000004C09                 call    _dcgettext
.text:0000000000004C0E                 add     rsp, 28h
.text:0000000000004C12                 mov     r9, r13
.text:0000000000004C15                 mov     r8, r12
.text:0000000000004C18                 mov     rcx, rbx
.text:0000000000004C1B                 mov     rdi, rbp
.text:0000000000004C1E                 mov     rdx, rax
.text:0000000000004C21                 pop     rbx
.text:0000000000004C22                 pop     rbp
.text:0000000000004C23                 pop     r12
.text:0000000000004C25                 pop     r13
.text:0000000000004C27                 pop     r14
.text:0000000000004C29                 pop     r15
.text:0000000000004C2B                 mov     esi, 1
.text:0000000000004C30                 xor     eax, eax
.text:0000000000004C32                 jmp     ___fprintf_chk
.text:0000000000004C32 ; ---------------------------------------------------------------------------
.text:0000000000004C37                 align 20h
.text:0000000000004C40
.text:0000000000004C40 loc_4C40:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004C40                                         ; DATA XREF: .rodata:jpt_4A54↓o
.text:0000000000004C40                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004A54 case 4
.text:0000000000004C47                 mov     edx, 5          ; category
.text:0000000000004C4C                 xor     edi, edi        ; domainname
.text:0000000000004C4E                 mov     r14, [rbx+18h]
.text:0000000000004C52                 mov     r13, [rbx+10h]
.text:0000000000004C56                 mov     r12, [rbx+8]
.text:0000000000004C5A                 mov     rbx, [rbx]
.text:0000000000004C5D                 call    _dcgettext
.text:0000000000004C62                 sub     rsp, 8
.text:0000000000004C66
.text:0000000000004C66 loc_4C66:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000004C66                 push    r14
.text:0000000000004C68                 mov     rdx, rax
.text:0000000000004C6B                 mov     r9, r13
.text:0000000000004C6E                 mov     r8, r12
.text:0000000000004C71                 mov     rcx, rbx
.text:0000000000004C74                 mov     rdi, rbp
.text:0000000000004C77                 mov     esi, 1
.text:0000000000004C7C                 xor     eax, eax
.text:0000000000004C7E                 call    ___fprintf_chk
.text:0000000000004C83                 pop     rax
.text:0000000000004C84                 pop     rdx
.text:0000000000004C85                 add     rsp, 28h
.text:0000000000004C89                 pop     rbx
.text:0000000000004C8A                 pop     rbp
.text:0000000000004C8B                 pop     r12
.text:0000000000004C8D                 pop     r13
.text:0000000000004C8F                 pop     r14
.text:0000000000004C91                 pop     r15
.text:0000000000004C93                 retn
.text:0000000000004C93 ; ---------------------------------------------------------------------------
.text:0000000000004C94                 align 8
.text:0000000000004C98
.text:0000000000004C98 loc_4C98:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004C98                                         ; DATA XREF: .rodata:jpt_4A54↓o
.text:0000000000004C98                 mov     r15, [rbx+20h]  ; jumptable 0000000000004A54 case 5
.text:0000000000004C9C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000004CA3                 mov     edx, 5          ; category
.text:0000000000004CA8                 xor     edi, edi        ; domainname
.text:0000000000004CAA                 mov     r14, [rbx+18h]
.text:0000000000004CAE                 mov     r13, [rbx+10h]
.text:0000000000004CB2                 mov     r12, [rbx+8]
.text:0000000000004CB6                 mov     rbx, [rbx]
.text:0000000000004CB9                 call    _dcgettext
.text:0000000000004CBE                 push    r15
.text:0000000000004CC0                 jmp     short loc_4C66
.text:0000000000004CC0 ; ---------------------------------------------------------------------------
.text:0000000000004CC2                 align 8
.text:0000000000004CC8
.text:0000000000004CC8 loc_4CC8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004CC8                                         ; DATA XREF: .rodata:jpt_4A54↓o
.text:0000000000004CC8                 mov     r8, [rbx+8]     ; jumptable 0000000000004A54 case 6
.text:0000000000004CCC                 mov     r12, [rbx+28h]
.text:0000000000004CD0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004CD7                 mov     r15, [rbx+20h]
.text:0000000000004CDB                 mov     r14, [rbx+18h]
.text:0000000000004CDF                 mov     edx, 5          ; category
.text:0000000000004CE4                 mov     r13, [rbx+10h]
.text:0000000000004CE8                 xor     edi, edi        ; domainname
.text:0000000000004CEA                 mov     rbx, [rbx]
.text:0000000000004CED                 mov     [rsp+58h+var_58], r8
.text:0000000000004CF1                 call    _dcgettext
.text:0000000000004CF6                 sub     rsp, 8
.text:0000000000004CFA                 mov     r9, r13
.text:0000000000004CFD                 push    r12
.text:0000000000004CFF                 push    r15
.text:0000000000004D01                 push    r14
.text:0000000000004D03
.text:0000000000004D03 loc_4D03:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004D03                 mov     r8, [rsp+78h+var_58]
.text:0000000000004D08                 mov     rcx, rbx
.text:0000000000004D0B                 mov     rdx, rax
.text:0000000000004D0E                 mov     rdi, rbp
.text:0000000000004D11                 mov     esi, 1
.text:0000000000004D16                 xor     eax, eax
.text:0000000000004D18                 call    ___fprintf_chk
.text:0000000000004D1D                 add     rsp, 20h
.text:0000000000004D21                 add     rsp, 28h
.text:0000000000004D25                 pop     rbx
.text:0000000000004D26                 pop     rbp
.text:0000000000004D27                 pop     r12
.text:0000000000004D29                 pop     r13
.text:0000000000004D2B                 pop     r14
.text:0000000000004D2D                 pop     r15
.text:0000000000004D2F                 retn
.text:0000000000004D30 ; ---------------------------------------------------------------------------
.text:0000000000004D30
.text:0000000000004D30 loc_4D30:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004D30                                         ; DATA XREF: .rodata:jpt_4A54↓o
.text:0000000000004D30                 mov     r9, [rbx+10h]   ; jumptable 0000000000004A54 case 7
.text:0000000000004D34                 mov     r13, [rbx+30h]
.text:0000000000004D38                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000004D3F                 mov     r12, [rbx+28h]
.text:0000000000004D43                 mov     r15, [rbx+20h]
.text:0000000000004D47                 mov     edx, 5          ; category
.text:0000000000004D4C                 mov     r14, [rbx+18h]
.text:0000000000004D50                 mov     r8, [rbx+8]
.text:0000000000004D54                 xor     edi, edi        ; domainname
.text:0000000000004D56                 mov     [rsp+58h+var_50], r9
.text:0000000000004D5B                 mov     rbx, [rbx]
.text:0000000000004D5E                 mov     [rsp+58h+var_58], r8
.text:0000000000004D62                 call    _dcgettext
.text:0000000000004D67                 push    r13
.text:0000000000004D69                 push    r12
.text:0000000000004D6B                 push    r15
.text:0000000000004D6D                 push    r14
.text:0000000000004D6F                 mov     r9, [rsp+78h+var_50]
.text:0000000000004D74                 jmp     short loc_4D03
.text:0000000000004D74 ; ---------------------------------------------------------------------------
.text:0000000000004D76                 align 20h
.text:0000000000004D80
.text:0000000000004D80 def_4A54:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004D80                 mov     r10, [rbx+40h]  ; jumptable 0000000000004A54 default case
.text:0000000000004D84                 mov     r9, [rbx+38h]
.text:0000000000004D88                 mov     edx, 5
.text:0000000000004D8D                 mov     rax, [rbx+10h]
.text:0000000000004D91                 mov     r8, [rbx+8]
.text:0000000000004D95                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004D9C                 mov     r13, [rbx+30h]
.text:0000000000004DA0                 mov     r12, [rbx+28h]
.text:0000000000004DA4                 mov     r15, [rbx+20h]
.text:0000000000004DA8                 mov     r14, [rbx+18h]
.text:0000000000004DAC                 mov     [rsp+58h+var_40], r10
.text:0000000000004DB1                 mov     [rsp+58h+var_48], r9
.text:0000000000004DB6                 mov     [rsp+58h+var_58], rax
.text:0000000000004DBA                 mov     [rsp+58h+var_50], r8
.text:0000000000004DBF                 mov     rbx, [rbx]
.text:0000000000004DC2                 jmp     loc_4B52
.text:0000000000004DC2 ; } // starts at 49B0
.text:0000000000004DC2 version_etc_arn endp
.text:0000000000004DC2
.text:0000000000004DC2 ; ---------------------------------------------------------------------------
.text:0000000000004DC7                 align 10h
.text:0000000000004DD0
.text:0000000000004DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DD0
.text:0000000000004DD0 ; Attributes: info_from_lumina
.text:0000000000004DD0
.text:0000000000004DD0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004DD0                 public version_etc_ar
.text:0000000000004DD0 version_etc_ar  proc near
.text:0000000000004DD0 ; __unwind {
.text:0000000000004DD0                 xor     r9d, r9d
.text:0000000000004DD3                 cmp     qword ptr [r8], 0
.text:0000000000004DD7                 jz      short loc_4DEB
.text:0000000000004DD9                 nop     dword ptr [rax+00000000h]
.text:0000000000004DE0
.text:0000000000004DE0 loc_4DE0:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004DE0                 add     r9, 1
.text:0000000000004DE4                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004DE9                 jnz     short loc_4DE0
.text:0000000000004DEB
.text:0000000000004DEB loc_4DEB:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000004DEB                 jmp     version_etc_arn
.text:0000000000004DEB ; } // starts at 4DD0
.text:0000000000004DEB version_etc_ar  endp
.text:0000000000004DEB
.text:0000000000004DF0
.text:0000000000004DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DF0
.text:0000000000004DF0 ; Attributes: info_from_lumina
.text:0000000000004DF0
.text:0000000000004DF0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004DF0                 public version_etc_va
.text:0000000000004DF0 version_etc_va  proc near
.text:0000000000004DF0
.text:0000000000004DF0 authtab         = qword ptr -68h
.text:0000000000004DF0 var_10          = qword ptr -10h
.text:0000000000004DF0
.text:0000000000004DF0 ; __unwind {
.text:0000000000004DF0                 sub     rsp, 68h
.text:0000000000004DF4                 mov     r10, r8
.text:0000000000004DF7                 xor     r9d, r9d
.text:0000000000004DFA                 mov     rax, fs:28h
.text:0000000000004E03                 mov     [rsp+68h+var_10], rax
.text:0000000000004E08                 xor     eax, eax
.text:0000000000004E0A                 mov     r8, rsp
.text:0000000000004E0D                 nop     dword ptr [rax]
.text:0000000000004E10
.text:0000000000004E10 loc_4E10:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004E10                 mov     eax, [r10]
.text:0000000000004E13                 cmp     eax, 2Fh ; '/'
.text:0000000000004E16                 ja      short loc_4E5A
.text:0000000000004E18                 mov     r11d, eax
.text:0000000000004E1B                 add     r11, [r10+10h]
.text:0000000000004E1F                 add     eax, 8
.text:0000000000004E22                 mov     [r10], eax
.text:0000000000004E25
.text:0000000000004E25 loc_4E25:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004E25                 mov     rax, [r11]
.text:0000000000004E28                 test    rax, rax
.text:0000000000004E2B                 mov     [r8+r9*8], rax
.text:0000000000004E2F                 jz      short loc_4E3B
.text:0000000000004E31                 add     r9, 1
.text:0000000000004E35                 cmp     r9, 0Ah
.text:0000000000004E39                 jnz     short loc_4E10
.text:0000000000004E3B
.text:0000000000004E3B loc_4E3B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000004E3B                 call    version_etc_arn
.text:0000000000004E40                 mov     rax, [rsp+68h+var_10]
.text:0000000000004E45                 xor     rax, fs:28h
.text:0000000000004E4E                 jnz     short loc_4E55
.text:0000000000004E50                 add     rsp, 68h
.text:0000000000004E54                 retn
.text:0000000000004E55 ; ---------------------------------------------------------------------------
.text:0000000000004E55
.text:0000000000004E55 loc_4E55:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004E55                 call    ___stack_chk_fail
.text:0000000000004E5A ; ---------------------------------------------------------------------------
.text:0000000000004E5A
.text:0000000000004E5A loc_4E5A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000004E5A                 mov     r11, [r10+8]
.text:0000000000004E5E                 lea     rax, [r11+8]
.text:0000000000004E62                 mov     [r10+8], rax
.text:0000000000004E66                 jmp     short loc_4E25
.text:0000000000004E66 ; } // starts at 4DF0
.text:0000000000004E66 version_etc_va  endp
.text:0000000000004E66
.text:0000000000004E66 ; ---------------------------------------------------------------------------
.text:0000000000004E68                 align 10h
.text:0000000000004E70
.text:0000000000004E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E70
.text:0000000000004E70 ; Attributes: info_from_lumina
.text:0000000000004E70
.text:0000000000004E70 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000004E70                 public version_etc
.text:0000000000004E70 version_etc     proc near               ; CODE XREF: main+13F↑p
.text:0000000000004E70
.text:0000000000004E70 var_C0          = dword ptr -0C0h
.text:0000000000004E70 var_B8          = qword ptr -0B8h
.text:0000000000004E70 var_B0          = qword ptr -0B0h
.text:0000000000004E70 var_A8          = byte ptr -0A8h
.text:0000000000004E70 var_50          = qword ptr -50h
.text:0000000000004E70 var_48          = byte ptr -48h
.text:0000000000004E70 var_28          = qword ptr -28h
.text:0000000000004E70 var_20          = qword ptr -20h
.text:0000000000004E70 arg_0           = byte ptr  8
.text:0000000000004E70
.text:0000000000004E70 ; __unwind {
.text:0000000000004E70                 push    rbp
.text:0000000000004E71                 push    rbx
.text:0000000000004E72                 mov     r10d, 20h ; ' '
.text:0000000000004E78                 xor     r11d, r11d
.text:0000000000004E7B                 sub     rsp, 0B8h
.text:0000000000004E82                 mov     rax, fs:28h
.text:0000000000004E8B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000004E90                 xor     eax, eax
.text:0000000000004E92                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000004E9A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004EA2                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000004EAA                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000004EAF                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004EB7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000004EBF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004EC4                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000004ECC                 xor     r9d, r9d
.text:0000000000004ECF                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004ED4                 mov     rbp, rax
.text:0000000000004ED7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004EE0
.text:0000000000004EE0 loc_4EE0:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004EE0                 cmp     r10d, 2Fh ; '/'
.text:0000000000004EE4                 ja      short loc_4F3C
.text:0000000000004EE6                 mov     eax, r10d
.text:0000000000004EE9                 mov     r11d, 1
.text:0000000000004EEF                 add     r10d, 8
.text:0000000000004EF3                 add     rax, rbp
.text:0000000000004EF6
.text:0000000000004EF6 loc_4EF6:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004EF6                 mov     rax, [rax]
.text:0000000000004EF9                 test    rax, rax
.text:0000000000004EFC                 mov     [r8+r9*8], rax
.text:0000000000004F00                 jz      short loc_4F0C
.text:0000000000004F02                 add     r9, 1
.text:0000000000004F06                 cmp     r9, 0Ah
.text:0000000000004F0A                 jnz     short loc_4EE0
.text:0000000000004F0C
.text:0000000000004F0C loc_4F0C:                               ; CODE XREF: version_etc+90↑j
.text:0000000000004F0C                 test    r11b, r11b
.text:0000000000004F0F                 jnz     short loc_4F35
.text:0000000000004F11
.text:0000000000004F11 loc_4F11:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004F11                 call    version_etc_arn
.text:0000000000004F16                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000004F1B                 xor     rax, fs:28h
.text:0000000000004F24                 jnz     short loc_4F30
.text:0000000000004F26                 add     rsp, 0B8h
.text:0000000000004F2D                 pop     rbx
.text:0000000000004F2E                 pop     rbp
.text:0000000000004F2F                 retn
.text:0000000000004F30 ; ---------------------------------------------------------------------------
.text:0000000000004F30
.text:0000000000004F30 loc_4F30:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004F30                 call    ___stack_chk_fail
.text:0000000000004F35 ; ---------------------------------------------------------------------------
.text:0000000000004F35
.text:0000000000004F35 loc_4F35:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004F35                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000004F3A                 jmp     short loc_4F11
.text:0000000000004F3C ; ---------------------------------------------------------------------------
.text:0000000000004F3C
.text:0000000000004F3C loc_4F3C:                               ; CODE XREF: version_etc+74↑j
.text:0000000000004F3C                 mov     rax, rbx
.text:0000000000004F3F                 add     rbx, 8
.text:0000000000004F43                 jmp     short loc_4EF6
.text:0000000000004F43 ; } // starts at 4E70
.text:0000000000004F43 version_etc     endp
.text:0000000000004F43
.text:0000000000004F43 ; ---------------------------------------------------------------------------
.text:0000000000004F45                 align 10h
.text:0000000000004F50
.text:0000000000004F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F50
.text:0000000000004F50 ; Attributes: info_from_lumina
.text:0000000000004F50
.text:0000000000004F50 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004F50                 public emit_bug_reporting_address
.text:0000000000004F50 emit_bug_reporting_address proc near
.text:0000000000004F50 ; __unwind {
.text:0000000000004F50                 push    rbx
.text:0000000000004F51                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004F58                 mov     edx, 5          ; category
.text:0000000000004F5D                 xor     edi, edi        ; domainname
.text:0000000000004F5F                 call    _dcgettext
.text:0000000000004F64                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000004F6B                 mov     rsi, rax
.text:0000000000004F6E                 mov     edi, 1
.text:0000000000004F73                 xor     eax, eax
.text:0000000000004F75                 call    ___printf_chk
.text:0000000000004F7A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004F81                 mov     edx, 5          ; category
.text:0000000000004F86                 xor     edi, edi        ; domainname
.text:0000000000004F88                 call    _dcgettext
.text:0000000000004F8D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004F94                 lea     rdx, unk_5683
.text:0000000000004F9B                 mov     rsi, rax
.text:0000000000004F9E                 mov     edi, 1
.text:0000000000004FA3                 xor     eax, eax
.text:0000000000004FA5                 call    ___printf_chk
.text:0000000000004FAA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004FB1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004FB8                 xor     edi, edi        ; domainname
.text:0000000000004FBA                 mov     edx, 5          ; category
.text:0000000000004FBF                 call    _dcgettext
.text:0000000000004FC4                 mov     rsi, rbx        ; stream
.text:0000000000004FC7                 mov     rdi, rax        ; s
.text:0000000000004FCA                 pop     rbx
.text:0000000000004FCB                 jmp     _fputs_unlocked
.text:0000000000004FCB ; } // starts at 4F50
.text:0000000000004FCB emit_bug_reporting_address endp
.text:0000000000004FCB
.text:0000000000004FD0
.text:0000000000004FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FD0
.text:0000000000004FD0
.text:0000000000004FD0                 public xmalloc
.text:0000000000004FD0 xmalloc         proc near               ; CODE XREF: main+205↑p
.text:0000000000004FD0                                         ; quotearg_n_options+127↑p ...
.text:0000000000004FD0 ; __unwind {
.text:0000000000004FD0                 push    rbx
.text:0000000000004FD1                 mov     rbx, rdi
.text:0000000000004FD4                 call    _malloc
.text:0000000000004FD9                 test    rax, rax
.text:0000000000004FDC                 jnz     short loc_4FE3
.text:0000000000004FDE                 test    rbx, rbx
.text:0000000000004FE1                 jnz     short loc_4FE5
.text:0000000000004FE3
.text:0000000000004FE3 loc_4FE3:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004FE3                 pop     rbx
.text:0000000000004FE4                 retn
.text:0000000000004FE5 ; ---------------------------------------------------------------------------
.text:0000000000004FE5
.text:0000000000004FE5 loc_4FE5:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004FE5                 call    xalloc_die
.text:0000000000004FE5 ; } // starts at 4FD0
.text:0000000000004FE5 xmalloc         endp
.text:0000000000004FE5
.text:0000000000004FE5 ; ---------------------------------------------------------------------------
.text:0000000000004FEA                 align 10h
.text:0000000000004FF0
.text:0000000000004FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FF0
.text:0000000000004FF0 ; Attributes: info_from_lumina
.text:0000000000004FF0
.text:0000000000004FF0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004FF0                 public xnmalloc
.text:0000000000004FF0 xnmalloc        proc near
.text:0000000000004FF0 ; __unwind {
.text:0000000000004FF0                 mov     rax, rdi
.text:0000000000004FF3                 mul     rsi
.text:0000000000004FF6                 mov     rdi, rax
.text:0000000000004FF9                 seto    al
.text:0000000000004FFC                 test    rdi, rdi
.text:0000000000004FFF                 js      short loc_500B
.text:0000000000005001                 movzx   eax, al
.text:0000000000005004                 test    rax, rax
.text:0000000000005007                 jnz     short loc_500B
.text:0000000000005009                 jmp     short xmalloc
.text:000000000000500B ; ---------------------------------------------------------------------------
.text:000000000000500B
.text:000000000000500B loc_500B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000500B                                         ; xnmalloc+17↑j
.text:000000000000500B                 sub     rsp, 8
.text:000000000000500F                 call    xalloc_die
.text:000000000000500F ; } // starts at 4FF0
.text:000000000000500F xnmalloc        endp
.text:000000000000500F
.text:000000000000500F ; ---------------------------------------------------------------------------
.text:0000000000005014                 align 20h
.text:0000000000005020
.text:0000000000005020 ; =============== S U B R O U T I N E =======================================
.text:0000000000005020
.text:0000000000005020
.text:0000000000005020                 public xcharalloc
.text:0000000000005020 xcharalloc      proc near
.text:0000000000005020 ; __unwind {
.text:0000000000005020                 jmp     short xmalloc
.text:0000000000005020 ; } // starts at 5020
.text:0000000000005020 xcharalloc      endp
.text:0000000000005020
.text:0000000000005020 ; ---------------------------------------------------------------------------
.text:0000000000005022                 align 10h
.text:0000000000005030
.text:0000000000005030 ; =============== S U B R O U T I N E =======================================
.text:0000000000005030
.text:0000000000005030 ; Attributes: info_from_lumina
.text:0000000000005030
.text:0000000000005030 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000005030                 public xrealloc
.text:0000000000005030 xrealloc        proc near               ; CODE XREF: add_tab_stop+BC↑p
.text:0000000000005030                                         ; quotearg_n_options+6E↑p ...
.text:0000000000005030 ; __unwind {
.text:0000000000005030                 test    rsi, rsi
.text:0000000000005033                 push    rbx
.text:0000000000005034                 mov     rbx, rsi
.text:0000000000005037                 jnz     short loc_503E
.text:0000000000005039                 test    rdi, rdi
.text:000000000000503C                 jnz     short loc_5058
.text:000000000000503E
.text:000000000000503E loc_503E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000503E                 mov     rsi, rbx        ; size
.text:0000000000005041                 call    _realloc
.text:0000000000005046                 test    rax, rax
.text:0000000000005049                 jnz     short loc_5050
.text:000000000000504B                 test    rbx, rbx
.text:000000000000504E                 jnz     short loc_5061
.text:0000000000005050
.text:0000000000005050 loc_5050:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000005050                 pop     rbx
.text:0000000000005051                 retn
.text:0000000000005051 ; ---------------------------------------------------------------------------
.text:0000000000005052                 align 8
.text:0000000000005058
.text:0000000000005058 loc_5058:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000005058                 call    _free
.text:000000000000505D                 xor     eax, eax
.text:000000000000505F                 pop     rbx
.text:0000000000005060                 retn
.text:0000000000005061 ; ---------------------------------------------------------------------------
.text:0000000000005061
.text:0000000000005061 loc_5061:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000005061                 call    xalloc_die
.text:0000000000005061 ; } // starts at 5030
.text:0000000000005061 xrealloc        endp
.text:0000000000005061
.text:0000000000005061 ; ---------------------------------------------------------------------------
.text:0000000000005066                 align 10h
.text:0000000000005070
.text:0000000000005070 ; =============== S U B R O U T I N E =======================================
.text:0000000000005070
.text:0000000000005070 ; Attributes: info_from_lumina
.text:0000000000005070
.text:0000000000005070 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000005070                 public xnrealloc
.text:0000000000005070 xnrealloc       proc near
.text:0000000000005070 ; __unwind {
.text:0000000000005070                 mov     rax, rsi
.text:0000000000005073                 mul     rdx
.text:0000000000005076                 mov     rsi, rax
.text:0000000000005079                 seto    al
.text:000000000000507C                 test    rsi, rsi
.text:000000000000507F                 js      short loc_508B
.text:0000000000005081                 movzx   eax, al
.text:0000000000005084                 test    rax, rax
.text:0000000000005087                 jnz     short loc_508B
.text:0000000000005089                 jmp     short xrealloc
.text:000000000000508B ; ---------------------------------------------------------------------------
.text:000000000000508B
.text:000000000000508B loc_508B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000508B                                         ; xnrealloc+17↑j
.text:000000000000508B                 sub     rsp, 8
.text:000000000000508F                 call    xalloc_die
.text:000000000000508F ; } // starts at 5070
.text:000000000000508F xnrealloc       endp
.text:000000000000508F
.text:000000000000508F ; ---------------------------------------------------------------------------
.text:0000000000005094                 align 20h
.text:00000000000050A0
.text:00000000000050A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050A0
.text:00000000000050A0 ; Attributes: info_from_lumina
.text:00000000000050A0
.text:00000000000050A0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000050A0                 public x2nrealloc
.text:00000000000050A0 x2nrealloc      proc near
.text:00000000000050A0 ; __unwind {
.text:00000000000050A0                 test    rdi, rdi
.text:00000000000050A3                 mov     r9, rdx
.text:00000000000050A6                 mov     rcx, [rsi]
.text:00000000000050A9                 jz      short loc_50E0
.text:00000000000050AB                 xor     edx, edx
.text:00000000000050AD                 mov     rax, 5555555555555554h
.text:00000000000050B7                 div     r9
.text:00000000000050BA                 cmp     rax, rcx
.text:00000000000050BD                 jbe     short loc_50FB
.text:00000000000050BF                 mov     rax, rcx
.text:00000000000050C2                 shr     rax, 1
.text:00000000000050C5                 lea     rcx, [rax+rcx+1]
.text:00000000000050CA
.text:00000000000050CA loc_50CA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000050CA                 mov     [rsi], rcx
.text:00000000000050CD                 imul    rcx, r9
.text:00000000000050D1                 mov     rsi, rcx
.text:00000000000050D4                 jmp     xrealloc
.text:00000000000050D4 ; ---------------------------------------------------------------------------
.text:00000000000050D9                 align 20h
.text:00000000000050E0
.text:00000000000050E0 loc_50E0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000050E0                 test    rcx, rcx
.text:00000000000050E3                 jz      short loc_5108
.text:00000000000050E5
.text:00000000000050E5 loc_50E5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000050E5                 mov     rax, rcx
.text:00000000000050E8                 mul     r9
.text:00000000000050EB                 seto    dl
.text:00000000000050EE                 test    rax, rax
.text:00000000000050F1                 movzx   edx, dl
.text:00000000000050F4                 js      short loc_50FB
.text:00000000000050F6                 test    rdx, rdx
.text:00000000000050F9                 jz      short loc_50CA
.text:00000000000050FB
.text:00000000000050FB loc_50FB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000050FB                                         ; x2nrealloc+54↑j
.text:00000000000050FB                 sub     rsp, 8
.text:00000000000050FF                 call    xalloc_die
.text:00000000000050FF ; ---------------------------------------------------------------------------
.text:0000000000005104                 align 8
.text:0000000000005108
.text:0000000000005108 loc_5108:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005108                 xor     edx, edx
.text:000000000000510A                 mov     eax, 80h
.text:000000000000510F                 xor     r8d, r8d
.text:0000000000005112                 div     r9
.text:0000000000005115                 test    rax, rax
.text:0000000000005118                 setz    r8b
.text:000000000000511C                 lea     rcx, [r8+rax]
.text:0000000000005120                 jmp     short loc_50E5
.text:0000000000005120 ; } // starts at 50A0
.text:0000000000005120 x2nrealloc      endp
.text:0000000000005120
.text:0000000000005120 ; ---------------------------------------------------------------------------
.text:0000000000005122                 align 10h
.text:0000000000005130
.text:0000000000005130 ; =============== S U B R O U T I N E =======================================
.text:0000000000005130
.text:0000000000005130 ; Attributes: info_from_lumina
.text:0000000000005130
.text:0000000000005130 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000005130                 public x2realloc
.text:0000000000005130 x2realloc       proc near
.text:0000000000005130 ; __unwind {
.text:0000000000005130                 test    rdi, rdi
.text:0000000000005133                 mov     rax, [rsi]
.text:0000000000005136                 jz      short loc_5160
.text:0000000000005138                 mov     rdx, 5555555555555553h
.text:0000000000005142                 cmp     rax, rdx
.text:0000000000005145                 ja      short loc_5171
.text:0000000000005147                 mov     rdx, rax
.text:000000000000514A                 shr     rdx, 1
.text:000000000000514D                 lea     rax, [rdx+rax+1]
.text:0000000000005152
.text:0000000000005152 loc_5152:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000005152                 mov     [rsi], rax
.text:0000000000005155                 mov     rsi, rax
.text:0000000000005158                 jmp     xrealloc
.text:0000000000005158 ; ---------------------------------------------------------------------------
.text:000000000000515D                 align 20h
.text:0000000000005160
.text:0000000000005160 loc_5160:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000005160                 test    rax, rax
.text:0000000000005163                 mov     edx, 80h
.text:0000000000005168                 cmovz   rax, rdx
.text:000000000000516C                 test    rax, rax
.text:000000000000516F                 jns     short loc_5152
.text:0000000000005171
.text:0000000000005171 loc_5171:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005171                 sub     rsp, 8
.text:0000000000005175                 call    xalloc_die
.text:0000000000005175 ; } // starts at 5130
.text:0000000000005175 x2realloc       endp
.text:0000000000005175
.text:0000000000005175 ; ---------------------------------------------------------------------------
.text:000000000000517A                 align 20h
.text:0000000000005180
.text:0000000000005180 ; =============== S U B R O U T I N E =======================================
.text:0000000000005180
.text:0000000000005180
.text:0000000000005180 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005180                 public xzalloc
.text:0000000000005180 xzalloc         proc near
.text:0000000000005180 ; __unwind {
.text:0000000000005180                 push    rbx
.text:0000000000005181                 mov     rbx, rdi
.text:0000000000005184                 call    xmalloc
.text:0000000000005189                 mov     rdx, rbx        ; n
.text:000000000000518C                 xor     esi, esi        ; c
.text:000000000000518E                 mov     rdi, rax        ; s
.text:0000000000005191                 pop     rbx
.text:0000000000005192                 jmp     _memset
.text:0000000000005192 ; } // starts at 5180
.text:0000000000005192 xzalloc         endp
.text:0000000000005192
.text:0000000000005192 ; ---------------------------------------------------------------------------
.text:0000000000005197                 align 20h
.text:00000000000051A0
.text:00000000000051A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051A0
.text:00000000000051A0 ; Attributes: info_from_lumina
.text:00000000000051A0
.text:00000000000051A0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000051A0                 public xcalloc
.text:00000000000051A0 xcalloc         proc near
.text:00000000000051A0 ; __unwind {
.text:00000000000051A0                 mov     rax, rdi
.text:00000000000051A3                 sub     rsp, 8
.text:00000000000051A7                 mul     rsi
.text:00000000000051AA                 seto    dl
.text:00000000000051AD                 test    rax, rax
.text:00000000000051B0                 js      short loc_51C9
.text:00000000000051B2                 movzx   edx, dl
.text:00000000000051B5                 test    rdx, rdx
.text:00000000000051B8                 jnz     short loc_51C9
.text:00000000000051BA                 call    _calloc
.text:00000000000051BF                 test    rax, rax
.text:00000000000051C2                 jz      short loc_51C9
.text:00000000000051C4                 add     rsp, 8
.text:00000000000051C8                 retn
.text:00000000000051C9 ; ---------------------------------------------------------------------------
.text:00000000000051C9
.text:00000000000051C9 loc_51C9:                               ; CODE XREF: xcalloc+10↑j
.text:00000000000051C9                                         ; xcalloc+18↑j ...
.text:00000000000051C9                 call    xalloc_die
.text:00000000000051C9 ; } // starts at 51A0
.text:00000000000051C9 xcalloc         endp
.text:00000000000051C9
.text:00000000000051C9 ; ---------------------------------------------------------------------------
.text:00000000000051CE                 align 10h
.text:00000000000051D0
.text:00000000000051D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051D0
.text:00000000000051D0 ; Attributes: info_from_lumina
.text:00000000000051D0
.text:00000000000051D0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000051D0                 public xmemdup
.text:00000000000051D0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000051D0                                         ; xstrdup+11↓j
.text:00000000000051D0 ; __unwind {
.text:00000000000051D0                 push    rbp
.text:00000000000051D1                 push    rbx
.text:00000000000051D2                 mov     rbp, rdi
.text:00000000000051D5                 mov     rdi, rsi
.text:00000000000051D8                 mov     rbx, rsi
.text:00000000000051DB                 sub     rsp, 8
.text:00000000000051DF                 call    xmalloc
.text:00000000000051E4                 add     rsp, 8
.text:00000000000051E8                 mov     rdx, rbx        ; n
.text:00000000000051EB                 mov     rsi, rbp        ; src
.text:00000000000051EE                 pop     rbx
.text:00000000000051EF                 pop     rbp
.text:00000000000051F0                 mov     rdi, rax        ; dest
.text:00000000000051F3                 jmp     _memcpy
.text:00000000000051F3 ; } // starts at 51D0
.text:00000000000051F3 xmemdup         endp
.text:00000000000051F3
.text:00000000000051F3 ; ---------------------------------------------------------------------------
.text:00000000000051F8                 align 20h
.text:0000000000005200
.text:0000000000005200 ; =============== S U B R O U T I N E =======================================
.text:0000000000005200
.text:0000000000005200
.text:0000000000005200 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005200                 public xstrdup
.text:0000000000005200 xstrdup         proc near
.text:0000000000005200 ; __unwind {
.text:0000000000005200                 push    rbx
.text:0000000000005201                 mov     rbx, rdi
.text:0000000000005204                 call    _strlen
.text:0000000000005209                 mov     rdi, rbx        ; src
.text:000000000000520C                 lea     rsi, [rax+1]    ; n
.text:0000000000005210                 pop     rbx
.text:0000000000005211                 jmp     short xmemdup
.text:0000000000005211 ; } // starts at 5200
.text:0000000000005211 xstrdup         endp
.text:0000000000005211
.text:0000000000005211 ; ---------------------------------------------------------------------------
.text:0000000000005213                 align 20h
.text:0000000000005220
.text:0000000000005220 ; =============== S U B R O U T I N E =======================================
.text:0000000000005220
.text:0000000000005220 ; Attributes: noreturn info_from_lumina
.text:0000000000005220
.text:0000000000005220 ; void __cdecl xalloc_die()
.text:0000000000005220                 public xalloc_die
.text:0000000000005220 xalloc_die      proc near               ; CODE XREF: add_tab_stop:loc_232D↑p
.text:0000000000005220                                         ; quotearg_n_options:loc_41F6↑p ...
.text:0000000000005220 ; __unwind {
.text:0000000000005220                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005227                 sub     rsp, 8
.text:000000000000522B                 mov     edx, 5          ; category
.text:0000000000005230                 xor     edi, edi        ; domainname
.text:0000000000005232                 call    _dcgettext
.text:0000000000005237                 mov     edi, cs:exit_failure ; status
.text:000000000000523D                 lea     rdx, format     ; format
.text:0000000000005244                 mov     rcx, rax
.text:0000000000005247                 xor     esi, esi        ; errnum
.text:0000000000005249                 xor     eax, eax
.text:000000000000524B                 call    _error
.text:0000000000005250                 call    _abort
.text:0000000000005250 ; } // starts at 5220
.text:0000000000005250 xalloc_die      endp
.text:0000000000005250
.text:0000000000005250 ; ---------------------------------------------------------------------------
.text:0000000000005255                 align 20h
.text:0000000000005260
.text:0000000000005260 ; =============== S U B R O U T I N E =======================================
.text:0000000000005260
.text:0000000000005260
.text:0000000000005260                 public xstrndup
.text:0000000000005260 xstrndup        proc near               ; CODE XREF: parse_tab_stops+20B↑p
.text:0000000000005260 ; __unwind {
.text:0000000000005260                 sub     rsp, 8
.text:0000000000005264                 call    _strndup
.text:0000000000005269                 test    rax, rax
.text:000000000000526C                 jz      short loc_5273
.text:000000000000526E                 add     rsp, 8
.text:0000000000005272                 retn
.text:0000000000005273 ; ---------------------------------------------------------------------------
.text:0000000000005273
.text:0000000000005273 loc_5273:                               ; CODE XREF: xstrndup+C↑j
.text:0000000000005273                 call    xalloc_die
.text:0000000000005273 ; } // starts at 5260
.text:0000000000005273 xstrndup        endp
.text:0000000000005273
.text:0000000000005273 ; ---------------------------------------------------------------------------
.text:0000000000005278                 align 20h
.text:0000000000005280
.text:0000000000005280 ; =============== S U B R O U T I N E =======================================
.text:0000000000005280
.text:0000000000005280 ; Attributes: info_from_lumina
.text:0000000000005280
.text:0000000000005280 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000005280                 public rpl_fclose
.text:0000000000005280 rpl_fclose      proc near               ; CODE XREF: next_file:loc_2A10↑p
.text:0000000000005280                                         ; cleanup_file_list_stdin+1B↑p ...
.text:0000000000005280 ; __unwind {
.text:0000000000005280                 push    r12
.text:0000000000005282                 push    rbp
.text:0000000000005283                 push    rbx
.text:0000000000005284                 mov     rbx, rdi
.text:0000000000005287                 call    _fileno
.text:000000000000528C                 test    eax, eax
.text:000000000000528E                 mov     rdi, rbx        ; fp
.text:0000000000005291                 js      short loc_52E7
.text:0000000000005293                 call    ___freading
.text:0000000000005298                 test    eax, eax
.text:000000000000529A                 jnz     short loc_52C8
.text:000000000000529C
.text:000000000000529C loc_529C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000529C                 mov     rdi, rbx        ; stream
.text:000000000000529F                 call    rpl_fflush
.text:00000000000052A4                 test    eax, eax
.text:00000000000052A6                 jz      short loc_52E4
.text:00000000000052A8                 call    ___errno_location
.text:00000000000052AD                 mov     r12d, [rax]
.text:00000000000052B0                 mov     rdi, rbx        ; stream
.text:00000000000052B3                 mov     rbp, rax
.text:00000000000052B6                 call    _fclose
.text:00000000000052BB                 test    r12d, r12d
.text:00000000000052BE                 jnz     short loc_52F0
.text:00000000000052C0
.text:00000000000052C0 loc_52C0:                               ; CODE XREF: rpl_fclose+79↓j
.text:00000000000052C0                 pop     rbx
.text:00000000000052C1                 pop     rbp
.text:00000000000052C2                 pop     r12
.text:00000000000052C4                 retn
.text:00000000000052C4 ; ---------------------------------------------------------------------------
.text:00000000000052C5                 align 8
.text:00000000000052C8
.text:00000000000052C8 loc_52C8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000052C8                 mov     rdi, rbx        ; stream
.text:00000000000052CB                 call    _fileno
.text:00000000000052D0                 xor     esi, esi        ; offset
.text:00000000000052D2                 mov     edx, 1          ; whence
.text:00000000000052D7                 mov     edi, eax        ; fd
.text:00000000000052D9                 call    _lseek
.text:00000000000052DE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000052E2                 jnz     short loc_529C
.text:00000000000052E4
.text:00000000000052E4 loc_52E4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000052E4                 mov     rdi, rbx        ; stream
.text:00000000000052E7
.text:00000000000052E7 loc_52E7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000052E7                 pop     rbx
.text:00000000000052E8                 pop     rbp
.text:00000000000052E9                 pop     r12
.text:00000000000052EB                 jmp     _fclose
.text:00000000000052F0 ; ---------------------------------------------------------------------------
.text:00000000000052F0
.text:00000000000052F0 loc_52F0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000052F0                 mov     [rbp+0], r12d
.text:00000000000052F4                 mov     eax, 0FFFFFFFFh
.text:00000000000052F9                 jmp     short loc_52C0
.text:00000000000052F9 ; } // starts at 5280
.text:00000000000052F9 rpl_fclose      endp
.text:00000000000052F9
.text:00000000000052F9 ; ---------------------------------------------------------------------------
.text:00000000000052FB                 align 20h
.text:0000000000005300
.text:0000000000005300 ; =============== S U B R O U T I N E =======================================
.text:0000000000005300
.text:0000000000005300 ; Attributes: info_from_lumina
.text:0000000000005300
.text:0000000000005300 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000005300                 public rpl_fflush
.text:0000000000005300 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000005300 ; __unwind {
.text:0000000000005300                 test    rdi, rdi
.text:0000000000005303                 push    rbx
.text:0000000000005304                 mov     rbx, rdi
.text:0000000000005307                 jz      short loc_531A
.text:0000000000005309                 call    ___freading
.text:000000000000530E                 test    eax, eax
.text:0000000000005310                 jz      short loc_531A
.text:0000000000005312                 test    dword ptr [rbx], 100h
.text:0000000000005318                 jnz     short loc_5328
.text:000000000000531A
.text:000000000000531A loc_531A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000531A                                         ; rpl_fflush+10↑j
.text:000000000000531A                 mov     rdi, rbx        ; stream
.text:000000000000531D                 pop     rbx
.text:000000000000531E                 jmp     _fflush
.text:000000000000531E ; ---------------------------------------------------------------------------
.text:0000000000005323                 align 8
.text:0000000000005328
.text:0000000000005328 loc_5328:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000005328                 mov     rdi, rbx
.text:000000000000532B                 mov     edx, 1
.text:0000000000005330                 xor     esi, esi
.text:0000000000005332                 call    rpl_fseeko
.text:0000000000005337                 mov     rdi, rbx        ; stream
.text:000000000000533A                 pop     rbx
.text:000000000000533B                 jmp     _fflush
.text:000000000000533B ; } // starts at 5300
.text:000000000000533B rpl_fflush      endp
.text:000000000000533B
.text:0000000000005340
.text:0000000000005340 ; =============== S U B R O U T I N E =======================================
.text:0000000000005340
.text:0000000000005340 ; Attributes: info_from_lumina
.text:0000000000005340
.text:0000000000005340 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000005340                 public rpl_fseeko
.text:0000000000005340 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000005340 ; __unwind {
.text:0000000000005340                 mov     rax, [rdi+8]
.text:0000000000005344                 cmp     [rdi+10h], rax
.text:0000000000005348                 jz      short loc_5350
.text:000000000000534A
.text:000000000000534A loc_534A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000534A                                         ; rpl_fseeko+1F↓j
.text:000000000000534A                 jmp     _fseeko
.text:000000000000534A ; ---------------------------------------------------------------------------
.text:000000000000534F                 align 10h
.text:0000000000005350
.text:0000000000005350 loc_5350:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005350                 mov     rax, [rdi+20h]
.text:0000000000005354                 cmp     [rdi+28h], rax
.text:0000000000005358                 jnz     short loc_534A
.text:000000000000535A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000535F                 jnz     short loc_534A
.text:0000000000005361                 push    r12
.text:0000000000005363                 push    rbp
.text:0000000000005364                 mov     r12d, edx
.text:0000000000005367                 push    rbx
.text:0000000000005368                 mov     rbp, rsi
.text:000000000000536B                 mov     rbx, rdi
.text:000000000000536E                 call    _fileno
.text:0000000000005373                 mov     edx, r12d       ; whence
.text:0000000000005376                 mov     rsi, rbp        ; offset
.text:0000000000005379                 mov     edi, eax        ; fd
.text:000000000000537B                 call    _lseek
.text:0000000000005380                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005384                 jz      short loc_5392
.text:0000000000005386                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005389                 mov     [rbx+90h], rax
.text:0000000000005390                 xor     eax, eax
.text:0000000000005392
.text:0000000000005392 loc_5392:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000005392                 pop     rbx
.text:0000000000005393                 pop     rbp
.text:0000000000005394                 pop     r12
.text:0000000000005396                 retn
.text:0000000000005396 ; } // starts at 5340
.text:0000000000005396 rpl_fseeko      endp
.text:0000000000005396
.text:0000000000005396 ; ---------------------------------------------------------------------------
.text:0000000000005397                 align 20h
.text:00000000000053A0
.text:00000000000053A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053A0
.text:00000000000053A0 ; Attributes: info_from_lumina
.text:00000000000053A0
.text:00000000000053A0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:00000000000053A0                 public rpl_mbrtowc
.text:00000000000053A0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:00000000000053A0
.text:00000000000053A0 pwc             = dword ptr -34h
.text:00000000000053A0 var_30          = qword ptr -30h
.text:00000000000053A0
.text:00000000000053A0 ; __unwind {
.text:00000000000053A0                 push    r13
.text:00000000000053A2                 push    r12
.text:00000000000053A4                 mov     r13, rsi
.text:00000000000053A7                 push    rbp
.text:00000000000053A8                 push    rbx
.text:00000000000053A9                 mov     rbx, rdi
.text:00000000000053AC                 mov     r12, rdx
.text:00000000000053AF                 sub     rsp, 18h
.text:00000000000053B3                 mov     rax, fs:28h
.text:00000000000053BC                 mov     [rsp+38h+var_30], rax
.text:00000000000053C1                 xor     eax, eax
.text:00000000000053C3                 lea     rax, [rsp+38h+pwc]
.text:00000000000053C8                 test    rdi, rdi
.text:00000000000053CB                 cmovz   rbx, rax
.text:00000000000053CF                 mov     rdi, rbx        ; pwc
.text:00000000000053D2                 call    _mbrtowc
.text:00000000000053D7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000053DB                 mov     rbp, rax
.text:00000000000053DE                 jbe     short loc_5400
.text:00000000000053E0                 test    r12, r12
.text:00000000000053E3                 jz      short loc_5400
.text:00000000000053E5                 xor     edi, edi
.text:00000000000053E7                 call    hard_locale
.text:00000000000053EC                 test    al, al
.text:00000000000053EE                 jnz     short loc_5400
.text:00000000000053F0                 movzx   eax, byte ptr [r13+0]
.text:00000000000053F5                 mov     ebp, 1
.text:00000000000053FA                 mov     [rbx], eax
.text:00000000000053FC                 nop     dword ptr [rax+00h]
.text:0000000000005400
.text:0000000000005400 loc_5400:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005400                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005400                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005405                 xor     rdx, fs:28h
.text:000000000000540E                 mov     rax, rbp
.text:0000000000005411                 jnz     short loc_541E
.text:0000000000005413                 add     rsp, 18h
.text:0000000000005417                 pop     rbx
.text:0000000000005418                 pop     rbp
.text:0000000000005419                 pop     r12
.text:000000000000541B                 pop     r13
.text:000000000000541D                 retn
.text:000000000000541E ; ---------------------------------------------------------------------------
.text:000000000000541E
.text:000000000000541E loc_541E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000541E                 call    ___stack_chk_fail
.text:000000000000541E ; } // starts at 53A0
.text:000000000000541E rpl_mbrtowc     endp
.text:000000000000541E
.text:000000000000541E ; ---------------------------------------------------------------------------
.text:0000000000005423                 align 10h
.text:0000000000005430
.text:0000000000005430 ; =============== S U B R O U T I N E =======================================
.text:0000000000005430
.text:0000000000005430 ; Attributes: info_from_lumina
.text:0000000000005430
.text:0000000000005430 ; int __fastcall close_stream(FILE *stream)
.text:0000000000005430                 public close_stream
.text:0000000000005430 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000005430                                         ; close_stdout+33↑p
.text:0000000000005430 ; __unwind {
.text:0000000000005430                 push    r12
.text:0000000000005432                 push    rbp
.text:0000000000005433                 mov     rbp, rdi
.text:0000000000005436                 push    rbx
.text:0000000000005437                 call    ___fpending
.text:000000000000543C                 mov     ebx, [rbp+0]
.text:000000000000543F                 mov     rdi, rbp        ; stream
.text:0000000000005442                 mov     r12, rax
.text:0000000000005445                 call    rpl_fclose
.text:000000000000544A                 and     ebx, 20h
.text:000000000000544D                 test    ebx, ebx
.text:000000000000544F                 jnz     short loc_5468
.text:0000000000005451                 test    eax, eax
.text:0000000000005453                 jz      short loc_545F
.text:0000000000005455                 test    r12, r12
.text:0000000000005458                 mov     eax, 0FFFFFFFFh
.text:000000000000545D                 jz      short loc_5498
.text:000000000000545F
.text:000000000000545F loc_545F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000545F                 pop     rbx
.text:0000000000005460                 pop     rbp
.text:0000000000005461                 pop     r12
.text:0000000000005463                 retn
.text:0000000000005463 ; ---------------------------------------------------------------------------
.text:0000000000005464                 align 8
.text:0000000000005468
.text:0000000000005468 loc_5468:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000005468                 test    eax, eax
.text:000000000000546A                 jnz     short loc_5488
.text:000000000000546C                 call    ___errno_location
.text:0000000000005471                 mov     dword ptr [rax], 0
.text:0000000000005477                 mov     eax, 0FFFFFFFFh
.text:000000000000547C                 pop     rbx
.text:000000000000547D                 pop     rbp
.text:000000000000547E                 pop     r12
.text:0000000000005480                 retn
.text:0000000000005480 ; ---------------------------------------------------------------------------
.text:0000000000005481                 align 8
.text:0000000000005488
.text:0000000000005488 loc_5488:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000005488                 pop     rbx
.text:0000000000005489                 mov     eax, 0FFFFFFFFh
.text:000000000000548E                 pop     rbp
.text:000000000000548F                 pop     r12
.text:0000000000005491                 retn
.text:0000000000005491 ; ---------------------------------------------------------------------------
.text:0000000000005492                 align 8
.text:0000000000005498
.text:0000000000005498 loc_5498:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000005498                 call    ___errno_location
.text:000000000000549D                 cmp     dword ptr [rax], 9
.text:00000000000054A0                 pop     rbx
.text:00000000000054A1                 pop     rbp
.text:00000000000054A2                 pop     r12
.text:00000000000054A4                 setnz   al
.text:00000000000054A7                 movzx   eax, al
.text:00000000000054AA                 neg     eax
.text:00000000000054AC                 retn
.text:00000000000054AC ; } // starts at 5430
.text:00000000000054AC close_stream    endp
.text:00000000000054AC
.text:00000000000054AC ; ---------------------------------------------------------------------------
.text:00000000000054AD                 align 10h
.text:00000000000054B0
.text:00000000000054B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054B0
.text:00000000000054B0
.text:00000000000054B0                 public hard_locale
.text:00000000000054B0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:00000000000054B0 ; __unwind {
.text:00000000000054B0                 sub     rsp, 8
.text:00000000000054B4                 xor     esi, esi        ; locale
.text:00000000000054B6                 call    _setlocale
.text:00000000000054BB                 mov     rdx, rax
.text:00000000000054BE                 mov     eax, 1
.text:00000000000054C3                 test    rdx, rdx
.text:00000000000054C6                 jz      short loc_54E5
.text:00000000000054C8                 lea     rdi, aC         ; "C"
.text:00000000000054CF                 mov     ecx, 2
.text:00000000000054D4                 mov     rsi, rdx
.text:00000000000054D7                 repe cmpsb
.text:00000000000054D9                 setnbe  cl
.text:00000000000054DC                 sbb     cl, 0
.text:00000000000054DF                 xor     eax, eax
.text:00000000000054E1                 test    cl, cl
.text:00000000000054E3                 jnz     short loc_54F0
.text:00000000000054E5
.text:00000000000054E5 loc_54E5:                               ; CODE XREF: hard_locale+16↑j
.text:00000000000054E5                 add     rsp, 8
.text:00000000000054E9                 retn
.text:00000000000054E9 ; ---------------------------------------------------------------------------
.text:00000000000054EA                 align 10h
.text:00000000000054F0
.text:00000000000054F0 loc_54F0:                               ; CODE XREF: hard_locale+33↑j
.text:00000000000054F0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000054F7                 mov     ecx, 6
.text:00000000000054FC                 mov     rsi, rdx
.text:00000000000054FF                 repe cmpsb
.text:0000000000005501                 setnbe  al
.text:0000000000005504                 sbb     al, 0
.text:0000000000005506                 test    al, al
.text:0000000000005508                 setnz   al
.text:000000000000550B                 add     rsp, 8
.text:000000000000550F                 retn
.text:000000000000550F ; } // starts at 54B0
.text:000000000000550F hard_locale     endp
.text:000000000000550F
.text:0000000000005510
.text:0000000000005510 ; =============== S U B R O U T I N E =======================================
.text:0000000000005510
.text:0000000000005510
.text:0000000000005510                 public locale_charset
.text:0000000000005510 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005510 ; __unwind {
.text:0000000000005510                 sub     rsp, 8
.text:0000000000005514                 mov     edi, 0Eh        ; item
.text:0000000000005519                 call    _nl_langinfo
.text:000000000000551E                 test    rax, rax
.text:0000000000005521                 jz      short loc_5540
.text:0000000000005523                 cmp     byte ptr [rax], 0
.text:0000000000005526                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000552D                 cmovz   rax, rdx
.text:0000000000005531                 add     rsp, 8
.text:0000000000005535                 retn
.text:0000000000005535 ; ---------------------------------------------------------------------------
.text:0000000000005536                 align 20h
.text:0000000000005540
.text:0000000000005540 loc_5540:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000005540                 lea     rax, aAscii     ; "ASCII"
.text:0000000000005547                 add     rsp, 8
.text:000000000000554B                 retn
.text:000000000000554B ; } // starts at 5510
.text:000000000000554B locale_charset  endp
.text:000000000000554B
.text:000000000000554B ; ---------------------------------------------------------------------------
.text:000000000000554C                 align 10h
.text:0000000000005550
.text:0000000000005550 ; =============== S U B R O U T I N E =======================================
.text:0000000000005550
.text:0000000000005550 ; Attributes: info_from_lumina
.text:0000000000005550
.text:0000000000005550 ; void _libc_csu_init(void)
.text:0000000000005550                 public __libc_csu_init
.text:0000000000005550 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000005550 ; __unwind {
.text:0000000000005550                 push    r15
.text:0000000000005552                 push    r14
.text:0000000000005554                 mov     r15, rdx
.text:0000000000005557                 push    r13
.text:0000000000005559                 push    r12
.text:000000000000555B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000005562                 push    rbp
.text:0000000000005563                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000556A                 push    rbx
.text:000000000000556B                 mov     r13d, edi
.text:000000000000556E                 mov     r14, rsi
.text:0000000000005571                 sub     rbp, r12
.text:0000000000005574                 sub     rsp, 8
.text:0000000000005578                 sar     rbp, 3
.text:000000000000557C                 call    _init_proc
.text:0000000000005581                 test    rbp, rbp
.text:0000000000005584                 jz      short loc_55A6
.text:0000000000005586                 xor     ebx, ebx
.text:0000000000005588                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005590
.text:0000000000005590 loc_5590:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000005590                 mov     rdx, r15
.text:0000000000005593                 mov     rsi, r14
.text:0000000000005596                 mov     edi, r13d
.text:0000000000005599                 call    ds:(__frame_dummy_init_array_entry - 207B10h)[r12+rbx*8]
.text:000000000000559D                 add     rbx, 1
.text:00000000000055A1                 cmp     rbp, rbx
.text:00000000000055A4                 jnz     short loc_5590
.text:00000000000055A6
.text:00000000000055A6 loc_55A6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000055A6                 add     rsp, 8
.text:00000000000055AA                 pop     rbx
.text:00000000000055AB                 pop     rbp
.text:00000000000055AC                 pop     r12
.text:00000000000055AE                 pop     r13
.text:00000000000055B0                 pop     r14
.text:00000000000055B2                 pop     r15
.text:00000000000055B4                 retn
.text:00000000000055B4 ; } // starts at 5550
.text:00000000000055B4 __libc_csu_init endp
.text:00000000000055B4
.text:00000000000055B4 ; ---------------------------------------------------------------------------
.text:00000000000055B5                 align 20h
.text:00000000000055C0
.text:00000000000055C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055C0
.text:00000000000055C0
.text:00000000000055C0 ; void _libc_csu_fini(void)
.text:00000000000055C0                 public __libc_csu_fini
.text:00000000000055C0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000055C0 ; __unwind {
.text:00000000000055C0                 rep retn
.text:00000000000055C0 ; } // starts at 55C0
.text:00000000000055C0 __libc_csu_fini endp
.text:00000000000055C0
.text:00000000000055C0 ; ---------------------------------------------------------------------------
.text:00000000000055C2                 align 10h
.text:00000000000055D0
.text:00000000000055D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055D0
.text:00000000000055D0
.text:00000000000055D0 atexit          proc near               ; CODE XREF: main+72↑p
.text:00000000000055D0 ; __unwind {
.text:00000000000055D0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:00000000000055D7                 xor     esi, esi        ; obj
.text:00000000000055D9                 jmp     ___cxa_atexit
.text:00000000000055D9 ; } // starts at 55D0
.text:00000000000055D9 atexit          endp
.text:00000000000055D9
.text:00000000000055D9 _text           ends
.text:00000000000055D9
LOAD:00000000000055DE ; ===========================================================================
LOAD:00000000000055DE
LOAD:00000000000055DE ; Segment type: Pure code
LOAD:00000000000055DE ; Segment permissions: Read/Execute
LOAD:00000000000055DE LOAD            segment byte public 'CODE' use64
LOAD:00000000000055DE                 assume cs:LOAD
LOAD:00000000000055DE                 ;org 55DEh
LOAD:00000000000055DE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000055DE                 align 20h
LOAD:00000000000055DE LOAD            ends
LOAD:00000000000055DE
.fini:00000000000055E0 ; ===========================================================================
.fini:00000000000055E0
.fini:00000000000055E0 ; Segment type: Pure code
.fini:00000000000055E0 ; Segment permissions: Read/Execute
.fini:00000000000055E0 _fini           segment dword public 'CODE' use64
.fini:00000000000055E0                 assume cs:_fini
.fini:00000000000055E0                 ;org 55E0h
.fini:00000000000055E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00000000000055E0
.fini:00000000000055E0 ; =============== S U B R O U T I N E =======================================
.fini:00000000000055E0
.fini:00000000000055E0
.fini:00000000000055E0                 public _term_proc
.fini:00000000000055E0 _term_proc      proc near
.fini:00000000000055E0                 sub     rsp, 8          ; _fini
.fini:00000000000055E4                 add     rsp, 8
.fini:00000000000055E8                 retn
.fini:00000000000055E8 _term_proc      endp
.fini:00000000000055E8
.fini:00000000000055E8 _fini           ends
.fini:00000000000055E8
LOAD:00000000000055E9 ; ===========================================================================
LOAD:00000000000055E9
LOAD:00000000000055E9 ; Segment type: Pure code
LOAD:00000000000055E9 ; Segment permissions: Read/Execute
LOAD:00000000000055E9 LOAD            segment byte public 'CODE' use64
LOAD:00000000000055E9                 assume cs:LOAD
LOAD:00000000000055E9                 ;org 55E9h
LOAD:00000000000055E9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000055E9                 align 20h
LOAD:00000000000055E9 LOAD            ends
LOAD:00000000000055E9
.rodata:0000000000005600 ; ===========================================================================
.rodata:0000000000005600
.rodata:0000000000005600 ; Segment type: Pure data
.rodata:0000000000005600 ; Segment permissions: Read
.rodata:0000000000005600 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000005600                 assume cs:_rodata
.rodata:0000000000005600                 ;org 5600h
.rodata:0000000000005600                 public _IO_stdin_used
.rodata:0000000000005600 _IO_stdin_used  db    1
.rodata:0000000000005601                 db    0
.rodata:0000000000005602                 db    2
.rodata:0000000000005603                 db    0
.rodata:0000000000005604 aUnexpand       db 'unexpand',0         ; DATA XREF: main+133↑o
.rodata:0000000000005604                                         ; usage+15B↑o ...
.rodata:000000000000560D asc_560D        db '[',0                ; DATA XREF: usage+167↑o
.rodata:000000000000560F aTestInvocation db 'test invocation',0  ; DATA XREF: usage+18E↑o
.rodata:000000000000561F aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000561F                                         ; DATA XREF: usage+1BE↑o
.rodata:000000000000561F                                         ; usage+2BC↑o ...
.rodata:0000000000005635 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1CF↑o
.rodata:000000000000563F aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1DB↑o
.rodata:000000000000564E aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+16E↑o
.rodata:0000000000005658 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+19A↑o
.rodata:0000000000005662 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1B2↑o
.rodata:000000000000566C ; const char aSOnlineHelpS[]
.rodata:000000000000566C aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+22A↑o
.rodata:000000000000566C                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000005683 unk_5683        db  47h ; G             ; DATA XREF: main+12C↑o
.rodata:0000000000005683                                         ; usage+246↑o ...
.rodata:0000000000005684                 db  4Eh ; N
.rodata:0000000000005685                 db  55h ; U
.rodata:0000000000005686                 db  20h
.rodata:0000000000005687 ; const char domainname[]
.rodata:0000000000005687 domainname      db 'coreutils',0        ; DATA XREF: main+53↑o
.rodata:0000000000005687                                         ; main+5F↑o ...
.rodata:0000000000005691 ; const char s2[]
.rodata:0000000000005691 s2              db 'en_',0              ; DATA XREF: usage+26D↑o
.rodata:0000000000005691                                         ; usage+32E↑o
.rodata:0000000000005695 ; const char aFullDocumentat[]
.rodata:0000000000005695 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000005695                                         ; DATA XREF: usage:loc_2079↑o
.rodata:0000000000005695                                         ; usage:loc_2136↑o
.rodata:00000000000056B0 ; const char dirname[]
.rodata:00000000000056B0 dirname         db '/usr/local/share/locale',0
.rodata:00000000000056B0                                         ; DATA XREF: main+4C↑o
.rodata:00000000000056C8 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+125↑o
.rodata:00000000000056D8 ; const char aTabStopValueIs[]
.rodata:00000000000056D8 aTabStopValueIs db 'tab stop value is too large',0
.rodata:00000000000056D8                                         ; DATA XREF: main:loc_1C38↑o
.rodata:00000000000056F4 ; const char shortopts[]
.rodata:00000000000056F4 shortopts       db ',0123456789at:',0   ; DATA XREF: main:loc_1800↑o
.rodata:0000000000005703 ; const char aInputLineIsToo[]
.rodata:0000000000005703 aInputLineIsToo db 'input line is too long',0
.rodata:0000000000005703                                         ; DATA XREF: main:loc_1C61↑o
.rodata:0000000000005703                                         ; main:loc_1CB1↑o
.rodata:000000000000571A ; const char msgid[]
.rodata:000000000000571A msgid           db 'write error',0      ; DATA XREF: main+3F7↑o
.rodata:000000000000571A                                         ; main:loc_1C85↑o ...
.rodata:0000000000005726 aTabs           db 'tabs',0             ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:000000000000572B aAll            db 'all',0              ; DATA XREF: .data.rel.ro:0000000000207B40↓o
.rodata:000000000000572F aFirstOnly      db 'first-only',0       ; DATA XREF: .data.rel.ro:0000000000207B60↓o
.rodata:000000000000573A aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000207B80↓o
.rodata:000000000000573F aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000207BA0↓o
.rodata:0000000000005747                 align 8
.rodata:0000000000005748 ; const char aTrySHelpForMor[]
.rodata:0000000000005748 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000005748                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000576F                 align 10h
.rodata:0000000000005770 ; const char aUsageSOptionFi[]
.rodata:0000000000005770 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.rodata:0000000000005770                                         ; DATA XREF: usage:loc_1E4D↑o
.rodata:0000000000005791                 align 8
.rodata:0000000000005798 ; const char aConvertBlanksI[]
.rodata:0000000000005798 aConvertBlanksI db 'Convert blanks in each FILE to tabs, writing to standard output.',0Ah
.rodata:0000000000005798                                         ; DATA XREF: usage+84↑o
.rodata:0000000000005798                 db 0
.rodata:00000000000057DA                 align 20h
.rodata:00000000000057E0 ; const char aWithNoFileOrWh[]
.rodata:00000000000057E0 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:00000000000057E0                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:0000000000005818 ; const char aMandatoryArgum[]
.rodata:0000000000005818 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+CE↑o
.rodata:0000000000005818                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000005818                 db 'ns too.',0Ah,0
.rodata:0000000000005863                 align 8
.rodata:0000000000005868 ; const char aAAllConvertAll[]
.rodata:0000000000005868 aAAllConvertAll db '  -a, --all        convert all blanks, instead of just initial bl'
.rodata:0000000000005868                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000005868                 db 'anks',0Ah
.rodata:0000000000005868                 db '      --first-only  convert only leading sequences of blanks (ove'
.rodata:0000000000005868                 db 'rrides -a)',0Ah
.rodata:0000000000005868                 db '  -t, --tabs=N     have tabs N characters apart instead of 8 (ena'
.rodata:0000000000005868                 db 'bles -a)',0Ah,0
.rodata:0000000000005945                 align 8
.rodata:0000000000005948 ; const char aHelpDisplayThi[]
.rodata:0000000000005948 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000005948                                         ; DATA XREF: usage+11D↑o
.rodata:0000000000005975                 align 8
.rodata:0000000000005978 ; const char aVersionOutputV[]
.rodata:0000000000005978 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000005978                                         ; DATA XREF: usage+142↑o
.rodata:00000000000059AE                 align 10h
.rodata:00000000000059B0 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:00000000000059B0                                         ; DATA XREF: usage+23F↑o
.rodata:00000000000059B0                                         ; usage+2A3↑o ...
.rodata:00000000000059D8 ; const char aReportAnyTrans[]
.rodata:00000000000059D8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:00000000000059D8                                         ; DATA XREF: usage+397↑o
.rodata:00000000000059D8                 db 'am/>',0Ah,0
.rodata:0000000000005A1F                 align 20h
.rodata:0000000000005A20 ; const char aOrAvailableLoc[]
.rodata:0000000000005A20 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000005A20                                         ; DATA XREF: usage:loc_20BE↑o
.rodata:0000000000005A53                 align 8
.rodata:0000000000005A58 ; const char aSpecifierOnlyA[]
.rodata:0000000000005A58 aSpecifierOnlyA db 27h,'/',27h,' specifier only allowed with the last value',0
.rodata:0000000000005A58                                         ; DATA XREF: set_extend_size+13↑o
.rodata:0000000000005A87                 align 8
.rodata:0000000000005A88 ; const char aSpecifierOnlyA_0[]
.rodata:0000000000005A88 aSpecifierOnlyA_0 db 27h,'+',27h,' specifier only allowed with the last value',0
.rodata:0000000000005A88                                         ; DATA XREF: set_increment_size+13↑o
.rodata:0000000000005AB7                 align 8
.rodata:0000000000005AB8 ; const char aSpecifierNotAt[]
.rodata:0000000000005AB8 aSpecifierNotAt db 27h,'/',27h,' specifier not at start of number: %s',0
.rodata:0000000000005AB8                                         ; DATA XREF: parse_tab_stops+273↑o
.rodata:0000000000005AE1                 align 8
.rodata:0000000000005AE8 ; const char aSpecifierNotAt_0[]
.rodata:0000000000005AE8 aSpecifierNotAt_0 db 27h,'+',27h,' specifier not at start of number: %s',0
.rodata:0000000000005AE8                                         ; DATA XREF: parse_tab_stops+2BB↑o
.rodata:0000000000005B11                 align 8
.rodata:0000000000005B18 ; const char aTabSizeContain[]
.rodata:0000000000005B18 aTabSizeContain db 'tab size contains invalid character(s): %s',0
.rodata:0000000000005B18                                         ; DATA XREF: parse_tab_stops+328↑o
.rodata:0000000000005B43                 align 8
.rodata:0000000000005B48 ; const char aSpecifierIsMut[]
.rodata:0000000000005B48 aSpecifierIsMut db 27h,'/',27h,' specifier is mutually exclusive with ',27h,'+',27h,0
.rodata:0000000000005B48                                         ; DATA XREF: finalize_tab_stops:loc_27C8↑o
.rodata:0000000000005B75                 align 8
.rodata:0000000000005B78 ; const char file[]
.rodata:0000000000005B78 file            db '../coreutils-8.31/src/expand-common.c',0
.rodata:0000000000005B78                                         ; DATA XREF: next_file+1E9↑o
.rodata:0000000000005B9E                 align 20h
.rodata:0000000000005BA0 ; const char aTTabsListUseCo[]
.rodata:0000000000005BA0 aTTabsListUseCo db '  -t, --tabs=LIST  use comma separated list of tab positions',0Ah
.rodata:0000000000005BA0                                         ; DATA XREF: emit_tab_list_info+8↑o
.rodata:0000000000005BA0                 db 0
.rodata:0000000000005BDE                 align 20h
.rodata:0000000000005BE0 ; const char aTheLastSpecifi[]
.rodata:0000000000005BE0 aTheLastSpecifi db '                     The last specified position can be prefixed '
.rodata:0000000000005BE0                                         ; DATA XREF: emit_tab_list_info+2D↑o
.rodata:0000000000005BE0                 db 'with ',27h,'/',27h,0Ah
.rodata:0000000000005BE0                 db '                     to specify a tab size to use after the last',0Ah
.rodata:0000000000005BE0                 db '                     explicitly specified tab stop.  Also a prefi'
.rodata:0000000000005BE0                 db 'x of ',27h,'+',27h,0Ah
.rodata:0000000000005BE0                 db '                     can be used to align remaining tab stops rel'
.rodata:0000000000005BE0                 db 'ative to',0Ah
.rodata:0000000000005BE0                 db '                     the last specified tab stop instead of the f'
.rodata:0000000000005BE0                 db 'irst column',0Ah,0
.rodata:0000000000005D4D ; const char accept[]
.rodata:0000000000005D4D accept          db '0123456789',0       ; DATA XREF: parse_tab_stops+1EF↑o
.rodata:0000000000005D58 ; const char aTabStopIsTooLa[]
.rodata:0000000000005D58 aTabStopIsTooLa db 'tab stop is too large %s',0
.rodata:0000000000005D58                                         ; DATA XREF: parse_tab_stops+21B↑o
.rodata:0000000000005D71 ; const char aTabSizeCannotB[]
.rodata:0000000000005D71 aTabSizeCannotB db 'tab size cannot be 0',0
.rodata:0000000000005D71                                         ; DATA XREF: finalize_tab_stops:loc_2780↑o
.rodata:0000000000005D86 ; const char aTabSizesMustBe[]
.rodata:0000000000005D86 aTabSizesMustBe db 'tab sizes must be ascending',0
.rodata:0000000000005D86                                         ; DATA XREF: finalize_tab_stops:loc_27A4↑o
.rodata:0000000000005DA2 ; const char assertion[]
.rodata:0000000000005DA2 assertion       db 'prev_file',0        ; DATA XREF: next_file+1F0↑o
.rodata:0000000000005DAC                 align 10h
.rodata:0000000000005DB0 ; const char _PRETTY_FUNCTION___6961[]
.rodata:0000000000005DB0 __PRETTY_FUNCTION___6961 db 'next_file',0
.rodata:0000000000005DB0                                         ; DATA XREF: next_file:loc_2AA2↑o
.rodata:0000000000005DBA a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000005DBF ; const char aS[4]
.rodata:0000000000005DBF aS              db '%s: '               ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000005DC3 ; const char format[]
.rodata:0000000000005DC3 format          dd offset unk_7325      ; DATA XREF: next_file+A9↑o
.rodata:0000000000005DC3                                         ; next_file+17A↑o ...
.rodata:0000000000005DC7                 align 8
.rodata:0000000000005DC8 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000005DC8                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000005E00 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000005E08 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000005E08                                         ; next_file:loc_28E9↑o ...
.rodata:0000000000005E0C unk_5E0C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000005E0D                 db  80h
.rodata:0000000000005E0E                 db  98h
.rodata:0000000000005E0F                 db    0
.rodata:0000000000005E10 unk_5E10        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000005E11                 db  80h
.rodata:0000000000005E12                 db  99h
.rodata:0000000000005E13                 db    0
.rodata:0000000000005E14 unk_5E14        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000005E15                 db    7
.rodata:0000000000005E16                 db  65h ; e
.rodata:0000000000005E17                 db    0
.rodata:0000000000005E18 unk_5E18        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000005E19                 db 0AFh
.rodata:0000000000005E1A                 db    0
.rodata:0000000000005E1B unk_5E1B        db  22h ; "             ; DATA XREF: gettext_quote:loc_2D40↑o
.rodata:0000000000005E1B                                         ; quotearg_buffer_restyled:loc_3AFB↑o ...
.rodata:0000000000005E1C                 db    0
.rodata:0000000000005E1D ; const char asc_5E1D[2]
.rodata:0000000000005E1D asc_5E1D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000005E1D                                         ; quotearg_buffer_restyled:loc_2EC3↑o ...
.rodata:0000000000005E1F ; const char asc_5E1F[2]
.rodata:0000000000005E1F asc_5E1F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000005E1F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000005E21 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000005E29 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000207BE8↓o
.rodata:0000000000005E2F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000207BF0↓o
.rodata:0000000000005E3C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000207BF8↓o
.rodata:0000000000005E3C                                         ; .data.rel.ro:0000000000207C18↓o
.rodata:0000000000005E49 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000005E49                                         ; DATA XREF: .data.rel.ro:0000000000207C00↓o
.rodata:0000000000005E5D aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000207C08↓o
.rodata:0000000000005E5F aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000207C10↓o
.rodata:0000000000005E67 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000207C28↓o
.rodata:0000000000005E6F                 align 20h
.rodata:0000000000005E80 jpt_2EA1        dd offset loc_3C4A - 5E80h
.rodata:0000000000005E80                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000005E80                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000005E80                 dd offset loc_2EA3 - 5E80h ; jump table for switch statement
.rodata:0000000000005E80                 dd offset loc_3E78 - 5E80h
.rodata:0000000000005E80                 dd offset loc_3C84 - 5E80h
.rodata:0000000000005E80                 dd offset loc_3A74 - 5E80h
.rodata:0000000000005E80                 dd offset loc_3AD0 - 5E80h
.rodata:0000000000005E80                 dd offset loc_3B25 - 5E80h
.rodata:0000000000005E80                 dd offset loc_3B6A - 5E80h
.rodata:0000000000005E80                 dd offset loc_3BA4 - 5E80h
.rodata:0000000000005E80                 dd offset loc_3BA4 - 5E80h
.rodata:0000000000005E80                 dd offset loc_3BA4 - 5E80h
.rodata:0000000000005EAC jpt_2FFE        dd offset loc_3220 - 5EACh, offset def_2FFE - 5EACh, offset def_2FFE - 5EACh
.rodata:0000000000005EAC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000005EAC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000005EAC                 dd offset def_2FFE - 5EACh, offset def_2FFE - 5EACh, offset def_2FFE - 5EACh ; jump table for switch statement
.rodata:0000000000005EAC                 dd offset def_2FFE - 5EACh, offset loc_3260 - 5EACh, offset loc_3168 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3128 - 5EACh, offset loc_32F0 - 5EACh, offset loc_32E0 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_32D0 - 5EACh, offset loc_32C0 - 5EACh, offset def_2FFE - 5EACh
.rodata:0000000000005EAC                 dd offset def_2FFE - 5EACh, offset def_2FFE - 5EACh, offset def_2FFE - 5EACh
.rodata:0000000000005EAC                 dd offset def_2FFE - 5EACh, offset def_2FFE - 5EACh, offset def_2FFE - 5EACh
.rodata:0000000000005EAC                 dd offset def_2FFE - 5EACh, offset def_2FFE - 5EACh, offset def_2FFE - 5EACh
.rodata:0000000000005EAC                 dd offset def_2FFE - 5EACh, offset def_2FFE - 5EACh, offset def_2FFE - 5EACh
.rodata:0000000000005EAC                 dd offset def_2FFE - 5EACh, offset def_2FFE - 5EACh, offset def_2FFE - 5EACh
.rodata:0000000000005EAC                 dd offset def_2FFE - 5EACh, offset def_2FFE - 5EACh, offset loc_32B0 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_32A0 - 5EACh, offset loc_32A0 - 5EACh, offset loc_3270 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_32A0 - 5EACh, offset loc_3248 - 5EACh, offset loc_32A0 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3103 - 5EACh, offset loc_32A0 - 5EACh, offset loc_32A0 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_32A0 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_32A0 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_32A0 - 5EACh, offset loc_32A0 - 5EACh, offset loc_32A0 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_30D3 - 5EACh, offset def_2FFE - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_32A0 - 5EACh, offset loc_3178 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_32A0 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_32A0 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3248 - 5EACh, offset loc_3248 - 5EACh, offset loc_3248 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3003 - 5EACh, offset loc_32A0 - 5EACh, offset loc_3003 - 5EACh
.rodata:0000000000005EAC                 dd offset loc_3270 - 5EACh
.rodata:00000000000060A8 jpt_338A        dd offset loc_33F0 - 60A8h, offset def_338A - 60A8h, offset def_338A - 60A8h
.rodata:00000000000060A8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:00000000000060A8                                         ; quotearg_buffer_restyled+573↑r
.rodata:00000000000060A8                 dd offset def_338A - 60A8h, offset def_338A - 60A8h, offset def_338A - 60A8h ; jump table for switch statement
.rodata:00000000000060A8                 dd offset def_338A - 60A8h, offset loc_33E0 - 60A8h, offset loc_3530 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3518 - 60A8h, offset loc_33C8 - 60A8h, offset loc_3508 - 60A8h
.rodata:00000000000060A8                 dd offset loc_33B0 - 60A8h, offset loc_34F0 - 60A8h, offset def_338A - 60A8h
.rodata:00000000000060A8                 dd offset def_338A - 60A8h, offset def_338A - 60A8h, offset def_338A - 60A8h
.rodata:00000000000060A8                 dd offset def_338A - 60A8h, offset def_338A - 60A8h, offset def_338A - 60A8h
.rodata:00000000000060A8                 dd offset def_338A - 60A8h, offset def_338A - 60A8h, offset def_338A - 60A8h
.rodata:00000000000060A8                 dd offset def_338A - 60A8h, offset def_338A - 60A8h, offset def_338A - 60A8h
.rodata:00000000000060A8                 dd offset def_338A - 60A8h, offset def_338A - 60A8h, offset def_338A - 60A8h
.rodata:00000000000060A8                 dd offset def_338A - 60A8h, offset def_338A - 60A8h, offset loc_34D8 - 60A8h
.rodata:00000000000060A8                 dd offset loc_34C0 - 60A8h, offset loc_34C0 - 60A8h, offset loc_34A8 - 60A8h
.rodata:00000000000060A8                 dd offset loc_34C0 - 60A8h, offset loc_3490 - 60A8h, offset loc_34C0 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3100 - 60A8h, offset loc_34C0 - 60A8h, offset loc_34C0 - 60A8h
.rodata:00000000000060A8                 dd offset loc_34C0 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_34C0 - 60A8h
.rodata:00000000000060A8                 dd offset loc_34C0 - 60A8h, offset loc_34C0 - 60A8h, offset loc_34C0 - 60A8h
.rodata:00000000000060A8                 dd offset loc_30D0 - 60A8h, offset def_338A - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_34C0 - 60A8h, offset loc_3390 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_34C0 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_34C0 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3490 - 60A8h, offset loc_3490 - 60A8h, offset loc_3490 - 60A8h
.rodata:00000000000060A8                 dd offset loc_3000 - 60A8h, offset loc_34C0 - 60A8h, offset loc_3000 - 60A8h
.rodata:00000000000060A8                 dd offset loc_34A8 - 60A8h
.rodata:00000000000062A4                 align 20h
.rodata:00000000000062C0                 public quoting_style_vals
.rodata:00000000000062C0 quoting_style_vals db    0
.rodata:00000000000062C1                 db    0
.rodata:00000000000062C2                 db    0
.rodata:00000000000062C3                 db    0
.rodata:00000000000062C4                 db    1
.rodata:00000000000062C5                 db    0
.rodata:00000000000062C6                 db    0
.rodata:00000000000062C7                 db    0
.rodata:00000000000062C8                 db    2
.rodata:00000000000062C9                 db    0
.rodata:00000000000062CA                 db    0
.rodata:00000000000062CB                 db    0
.rodata:00000000000062CC                 db    3
.rodata:00000000000062CD                 db    0
.rodata:00000000000062CE                 db    0
.rodata:00000000000062CF                 db    0
.rodata:00000000000062D0                 db    4
.rodata:00000000000062D1                 db    0
.rodata:00000000000062D2                 db    0
.rodata:00000000000062D3                 db    0
.rodata:00000000000062D4                 db    5
.rodata:00000000000062D5                 db    0
.rodata:00000000000062D6                 db    0
.rodata:00000000000062D7                 db    0
.rodata:00000000000062D8                 db    6
.rodata:00000000000062D9                 db    0
.rodata:00000000000062DA                 db    0
.rodata:00000000000062DB                 db    0
.rodata:00000000000062DC                 db    7
.rodata:00000000000062DD                 db    0
.rodata:00000000000062DE                 db    0
.rodata:00000000000062DF                 db    0
.rodata:00000000000062E0                 db    8
.rodata:00000000000062E1                 db    0
.rodata:00000000000062E2                 db    0
.rodata:00000000000062E3                 db    0
.rodata:00000000000062E4                 db    9
.rodata:00000000000062E5                 db    0
.rodata:00000000000062E6                 db    0
.rodata:00000000000062E7                 db    0
.rodata:00000000000062E8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:00000000000062F4 aSS             db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:00000000000062FB ; const char aC_0[]
.rodata:00000000000062FB aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_49EC↑o
.rodata:00000000000062FF ; const char aWrittenByS[]
.rodata:00000000000062FF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:00000000000062FF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000630F ; const char aWrittenBySAndS[]
.rodata:000000000000630F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000630F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000006326 ; const char aWrittenBySSAnd[]
.rodata:0000000000006326 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000006326                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000006342 ; const char aReportBugsToS[]
.rodata:0000000000006342 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000006342                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000006357 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000006357                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000636D ; const char aSHomePageS[]
.rodata:000000000000636D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000636D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000006381                 align 8
.rodata:0000000000006388 ; const char aLicenseGplv3Gn[]
.rodata:0000000000006388 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000006388                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000006388                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000006388                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000006388                 db '.',0Ah
.rodata:0000000000006388                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000006388                 db 0Ah,0
.rodata:0000000000006454                 align 8
.rodata:0000000000006458 ; const char aWrittenBySSSAn[]
.rodata:0000000000006458 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006458                                         ; DATA XREF: version_etc_arn:loc_4C40↑o
.rodata:0000000000006458                 db 'and %s.',0Ah,0
.rodata:0000000000006478 ; const char aWrittenBySSSSA[]
.rodata:0000000000006478 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006478                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000006478                 db '%s, and %s.',0Ah,0
.rodata:000000000000649C                 align 20h
.rodata:00000000000064A0 ; const char aWrittenBySSSSS_1[]
.rodata:00000000000064A0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000064A0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:00000000000064A0                 db '%s, %s, and %s.',0Ah,0
.rodata:00000000000064C8 ; const char aWrittenBySSSSS_2[]
.rodata:00000000000064C8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000064C8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:00000000000064C8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:00000000000064F4                 align 8
.rodata:00000000000064F8 ; const char aWrittenBySSSSS[]
.rodata:00000000000064F8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000064F8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:00000000000064F8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000064F8                 db 'and %s.',0Ah,0
.rodata:0000000000006528 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000006528 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006528                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000006528                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006528                 db '%s, and %s.',0Ah,0
.rodata:000000000000655C                 align 20h
.rodata:0000000000006560 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006560                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000006560                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006560                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000659C                 align 20h
.rodata:00000000000065A0 ; const char aGeneralHelpUsi[]
.rodata:00000000000065A0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:00000000000065A0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:00000000000065A0                 db 0
.rodata:00000000000065E1                 align 8
.rodata:00000000000065E8 jpt_4A54        dd offset loc_4AD6 - 65E8h
.rodata:00000000000065E8                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:00000000000065E8                                         ; version_etc_arn+9D↑r
.rodata:00000000000065E8                 dd offset loc_4B68 - 65E8h ; jump table for switch statement
.rodata:00000000000065E8                 dd offset loc_4BA8 - 65E8h
.rodata:00000000000065E8                 dd offset loc_4BF0 - 65E8h
.rodata:00000000000065E8                 dd offset loc_4C40 - 65E8h
.rodata:00000000000065E8                 dd offset loc_4C98 - 65E8h
.rodata:00000000000065E8                 dd offset loc_4CC8 - 65E8h
.rodata:00000000000065E8                 dd offset loc_4D30 - 65E8h
.rodata:00000000000065E8                 dd offset loc_4A60 - 65E8h
.rodata:00000000000065E8                 dd offset loc_4B10 - 65E8h
.rodata:0000000000006610                 align 20h
.rodata:0000000000006620                 public version_etc_copyright
.rodata:0000000000006620 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000006620                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000664F ; const char aMemoryExhauste[]
.rodata:000000000000664F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000006660 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000006662 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_54F0↑o
.rodata:0000000000006668 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000006668                                         ; locale_charset:loc_5540↑o
.rodata:0000000000006668 _rodata         ends
.rodata:0000000000006668
LOAD:000000000000666E ; ===========================================================================
LOAD:000000000000666E
LOAD:000000000000666E ; Segment type: Pure code
LOAD:000000000000666E ; Segment permissions: Read/Execute
LOAD:000000000000666E LOAD            segment byte public 'CODE' use64
LOAD:000000000000666E                 assume cs:LOAD
LOAD:000000000000666E                 ;org 666Eh
LOAD:000000000000666E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000666E                 align 10h
LOAD:000000000000666E LOAD            ends
LOAD:000000000000666E
.eh_frame_hdr:0000000000006670 ; ===========================================================================
.eh_frame_hdr:0000000000006670
.eh_frame_hdr:0000000000006670 ; Segment type: Pure data
.eh_frame_hdr:0000000000006670 ; Segment permissions: Read
.eh_frame_hdr:0000000000006670 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000006670                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000006670                 ;org 6670h
.eh_frame_hdr:0000000000006670 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000006671                 db  1Bh
.eh_frame_hdr:0000000000006672                 db    3
.eh_frame_hdr:0000000000006673                 db  3Bh ; ;
.eh_frame_hdr:0000000000006674                 db 0A4h
.eh_frame_hdr:0000000000006675                 db    2
.eh_frame_hdr:0000000000006676                 db    0
.eh_frame_hdr:0000000000006677                 db    0
.eh_frame_hdr:0000000000006678                 db  53h ; S
.eh_frame_hdr:0000000000006679                 db    0
.eh_frame_hdr:000000000000667A                 db    0
.eh_frame_hdr:000000000000667B                 db    0
.eh_frame_hdr:000000000000667C                 db 0F0h
.eh_frame_hdr:000000000000667D                 db 0ADh
.eh_frame_hdr:000000000000667E                 db 0FFh
.eh_frame_hdr:000000000000667F                 db 0FFh
.eh_frame_hdr:0000000000006680                 db 0F0h
.eh_frame_hdr:0000000000006681                 db    2
.eh_frame_hdr:0000000000006682                 db    0
.eh_frame_hdr:0000000000006683                 db    0
.eh_frame_hdr:0000000000006684                 db    0
.eh_frame_hdr:0000000000006685                 db 0B1h
.eh_frame_hdr:0000000000006686                 db 0FFh
.eh_frame_hdr:0000000000006687                 db 0FFh
.eh_frame_hdr:0000000000006688                 db  18h
.eh_frame_hdr:0000000000006689                 db    3
.eh_frame_hdr:000000000000668A                 db    0
.eh_frame_hdr:000000000000668B                 db    0
.eh_frame_hdr:000000000000668C                 db  10h
.eh_frame_hdr:000000000000668D                 db 0B1h
.eh_frame_hdr:000000000000668E                 db 0FFh
.eh_frame_hdr:000000000000668F                 db 0FFh
.eh_frame_hdr:0000000000006690                 db  5Ch ; \
.eh_frame_hdr:0000000000006691                 db    3
.eh_frame_hdr:0000000000006692                 db    0
.eh_frame_hdr:0000000000006693                 db    0
.eh_frame_hdr:0000000000006694                 db  70h ; p
.eh_frame_hdr:0000000000006695                 db 0B6h
.eh_frame_hdr:0000000000006696                 db 0FFh
.eh_frame_hdr:0000000000006697                 db 0FFh
.eh_frame_hdr:0000000000006698                 db 0C0h
.eh_frame_hdr:0000000000006699                 db    2
.eh_frame_hdr:000000000000669A                 db    0
.eh_frame_hdr:000000000000669B                 db    0
.eh_frame_hdr:000000000000669C                 db  80h
.eh_frame_hdr:000000000000669D                 db 0B7h
.eh_frame_hdr:000000000000669E                 db 0FFh
.eh_frame_hdr:000000000000669F                 db 0FFh
.eh_frame_hdr:00000000000066A0                 db  30h ; 0
.eh_frame_hdr:00000000000066A1                 db    3
.eh_frame_hdr:00000000000066A2                 db    0
.eh_frame_hdr:00000000000066A3                 db    0
.eh_frame_hdr:00000000000066A4                 db  40h ; @
.eh_frame_hdr:00000000000066A5                 db 0BBh
.eh_frame_hdr:00000000000066A6                 db 0FFh
.eh_frame_hdr:00000000000066A7                 db 0FFh
.eh_frame_hdr:00000000000066A8                 db 0B0h
.eh_frame_hdr:00000000000066A9                 db    3
.eh_frame_hdr:00000000000066AA                 db    0
.eh_frame_hdr:00000000000066AB                 db    0
.eh_frame_hdr:00000000000066AC                 db  80h
.eh_frame_hdr:00000000000066AD                 db 0BBh
.eh_frame_hdr:00000000000066AE                 db 0FFh
.eh_frame_hdr:00000000000066AF                 db 0FFh
.eh_frame_hdr:00000000000066B0                 db 0CCh
.eh_frame_hdr:00000000000066B1                 db    3
.eh_frame_hdr:00000000000066B2                 db    0
.eh_frame_hdr:00000000000066B3                 db    0
.eh_frame_hdr:00000000000066B4                 db 0C0h
.eh_frame_hdr:00000000000066B5                 db 0BBh
.eh_frame_hdr:00000000000066B6                 db 0FFh
.eh_frame_hdr:00000000000066B7                 db 0FFh
.eh_frame_hdr:00000000000066B8                 db 0E8h
.eh_frame_hdr:00000000000066B9                 db    3
.eh_frame_hdr:00000000000066BA                 db    0
.eh_frame_hdr:00000000000066BB                 db    0
.eh_frame_hdr:00000000000066BC                 db 0E0h
.eh_frame_hdr:00000000000066BD                 db 0BCh
.eh_frame_hdr:00000000000066BE                 db 0FFh
.eh_frame_hdr:00000000000066BF                 db 0FFh
.eh_frame_hdr:00000000000066C0                 db  20h
.eh_frame_hdr:00000000000066C1                 db    4
.eh_frame_hdr:00000000000066C2                 db    0
.eh_frame_hdr:00000000000066C3                 db    0
.eh_frame_hdr:00000000000066C4                 db  40h ; @
.eh_frame_hdr:00000000000066C5                 db 0C0h
.eh_frame_hdr:00000000000066C6                 db 0FFh
.eh_frame_hdr:00000000000066C7                 db 0FFh
.eh_frame_hdr:00000000000066C8                 db  88h
.eh_frame_hdr:00000000000066C9                 db    4
.eh_frame_hdr:00000000000066CA                 db    0
.eh_frame_hdr:00000000000066CB                 db    0
.eh_frame_hdr:00000000000066CC                 db  80h
.eh_frame_hdr:00000000000066CD                 db 0C1h
.eh_frame_hdr:00000000000066CE                 db 0FFh
.eh_frame_hdr:00000000000066CF                 db 0FFh
.eh_frame_hdr:00000000000066D0                 db 0ACh
.eh_frame_hdr:00000000000066D1                 db    4
.eh_frame_hdr:00000000000066D2                 db    0
.eh_frame_hdr:00000000000066D3                 db    0
.eh_frame_hdr:00000000000066D4                 db  30h ; 0
.eh_frame_hdr:00000000000066D5                 db 0C2h
.eh_frame_hdr:00000000000066D6                 db 0FFh
.eh_frame_hdr:00000000000066D7                 db 0FFh
.eh_frame_hdr:00000000000066D8                 db 0C0h
.eh_frame_hdr:00000000000066D9                 db    4
.eh_frame_hdr:00000000000066DA                 db    0
.eh_frame_hdr:00000000000066DB                 db    0
.eh_frame_hdr:00000000000066DC                 db  50h ; P
.eh_frame_hdr:00000000000066DD                 db 0C2h
.eh_frame_hdr:00000000000066DE                 db 0FFh
.eh_frame_hdr:00000000000066DF                 db 0FFh
.eh_frame_hdr:00000000000066E0                 db 0D4h
.eh_frame_hdr:00000000000066E1                 db    4
.eh_frame_hdr:00000000000066E2                 db    0
.eh_frame_hdr:00000000000066E3                 db    0
.eh_frame_hdr:00000000000066E4                 db  60h ; `
.eh_frame_hdr:00000000000066E5                 db 0C4h
.eh_frame_hdr:00000000000066E6                 db 0FFh
.eh_frame_hdr:00000000000066E7                 db 0FFh
.eh_frame_hdr:00000000000066E8                 db  18h
.eh_frame_hdr:00000000000066E9                 db    5
.eh_frame_hdr:00000000000066EA                 db    0
.eh_frame_hdr:00000000000066EB                 db    0
.eh_frame_hdr:00000000000066EC                 db 0B0h
.eh_frame_hdr:00000000000066ED                 db 0C4h
.eh_frame_hdr:00000000000066EE                 db 0FFh
.eh_frame_hdr:00000000000066EF                 db 0FFh
.eh_frame_hdr:00000000000066F0                 db  34h ; 4
.eh_frame_hdr:00000000000066F1                 db    5
.eh_frame_hdr:00000000000066F2                 db    0
.eh_frame_hdr:00000000000066F3                 db    0
.eh_frame_hdr:00000000000066F4                 db    0
.eh_frame_hdr:00000000000066F5                 db 0C5h
.eh_frame_hdr:00000000000066F6                 db 0FFh
.eh_frame_hdr:00000000000066F7                 db 0FFh
.eh_frame_hdr:00000000000066F8                 db  50h ; P
.eh_frame_hdr:00000000000066F9                 db    5
.eh_frame_hdr:00000000000066FA                 db    0
.eh_frame_hdr:00000000000066FB                 db    0
.eh_frame_hdr:00000000000066FC                 db  10h
.eh_frame_hdr:00000000000066FD                 db 0C5h
.eh_frame_hdr:00000000000066FE                 db 0FFh
.eh_frame_hdr:00000000000066FF                 db 0FFh
.eh_frame_hdr:0000000000006700                 db  64h ; d
.eh_frame_hdr:0000000000006701                 db    5
.eh_frame_hdr:0000000000006702                 db    0
.eh_frame_hdr:0000000000006703                 db    0
.eh_frame_hdr:0000000000006704                 db  20h
.eh_frame_hdr:0000000000006705                 db 0C5h
.eh_frame_hdr:0000000000006706                 db 0FFh
.eh_frame_hdr:0000000000006707                 db 0FFh
.eh_frame_hdr:0000000000006708                 db  78h ; x
.eh_frame_hdr:0000000000006709                 db    5
.eh_frame_hdr:000000000000670A                 db    0
.eh_frame_hdr:000000000000670B                 db    0
.eh_frame_hdr:000000000000670C                 db 0D0h
.eh_frame_hdr:000000000000670D                 db 0C5h
.eh_frame_hdr:000000000000670E                 db 0FFh
.eh_frame_hdr:000000000000670F                 db 0FFh
.eh_frame_hdr:0000000000006710                 db 0A8h
.eh_frame_hdr:0000000000006711                 db    5
.eh_frame_hdr:0000000000006712                 db    0
.eh_frame_hdr:0000000000006713                 db    0
.eh_frame_hdr:0000000000006714                 db 0E0h
.eh_frame_hdr:0000000000006715                 db 0C5h
.eh_frame_hdr:0000000000006716                 db 0FFh
.eh_frame_hdr:0000000000006717                 db 0FFh
.eh_frame_hdr:0000000000006718                 db 0BCh
.eh_frame_hdr:0000000000006719                 db    5
.eh_frame_hdr:000000000000671A                 db    0
.eh_frame_hdr:000000000000671B                 db    0
.eh_frame_hdr:000000000000671C                 db  10h
.eh_frame_hdr:000000000000671D                 db 0C6h
.eh_frame_hdr:000000000000671E                 db 0FFh
.eh_frame_hdr:000000000000671F                 db 0FFh
.eh_frame_hdr:0000000000006720                 db 0D8h
.eh_frame_hdr:0000000000006721                 db    5
.eh_frame_hdr:0000000000006722                 db    0
.eh_frame_hdr:0000000000006723                 db    0
.eh_frame_hdr:0000000000006724                 db 0B0h
.eh_frame_hdr:0000000000006725                 db 0C6h
.eh_frame_hdr:0000000000006726                 db 0FFh
.eh_frame_hdr:0000000000006727                 db 0FFh
.eh_frame_hdr:0000000000006728                 db 0F8h
.eh_frame_hdr:0000000000006729                 db    5
.eh_frame_hdr:000000000000672A                 db    0
.eh_frame_hdr:000000000000672B                 db    0
.eh_frame_hdr:000000000000672C                 db 0A0h
.eh_frame_hdr:000000000000672D                 db 0C7h
.eh_frame_hdr:000000000000672E                 db 0FFh
.eh_frame_hdr:000000000000672F                 db 0FFh
.eh_frame_hdr:0000000000006730                 db  3Ch ; <
.eh_frame_hdr:0000000000006731                 db    6
.eh_frame_hdr:0000000000006732                 db    0
.eh_frame_hdr:0000000000006733                 db    0
.eh_frame_hdr:0000000000006734                 db 0E0h
.eh_frame_hdr:0000000000006735                 db 0D9h
.eh_frame_hdr:0000000000006736                 db 0FFh
.eh_frame_hdr:0000000000006737                 db 0FFh
.eh_frame_hdr:0000000000006738                 db 0B4h
.eh_frame_hdr:0000000000006739                 db    6
.eh_frame_hdr:000000000000673A                 db    0
.eh_frame_hdr:000000000000673B                 db    0
.eh_frame_hdr:000000000000673C                 db  90h
.eh_frame_hdr:000000000000673D                 db 0DBh
.eh_frame_hdr:000000000000673E                 db 0FFh
.eh_frame_hdr:000000000000673F                 db 0FFh
.eh_frame_hdr:0000000000006740                 db  20h
.eh_frame_hdr:0000000000006741                 db    7
.eh_frame_hdr:0000000000006742                 db    0
.eh_frame_hdr:0000000000006743                 db    0
.eh_frame_hdr:0000000000006744                 db 0D0h
.eh_frame_hdr:0000000000006745                 db 0DBh
.eh_frame_hdr:0000000000006746                 db 0FFh
.eh_frame_hdr:0000000000006747                 db 0FFh
.eh_frame_hdr:0000000000006748                 db  4Ch ; L
.eh_frame_hdr:0000000000006749                 db    7
.eh_frame_hdr:000000000000674A                 db    0
.eh_frame_hdr:000000000000674B                 db    0
.eh_frame_hdr:000000000000674C                 db 0F0h
.eh_frame_hdr:000000000000674D                 db 0DBh
.eh_frame_hdr:000000000000674E                 db 0FFh
.eh_frame_hdr:000000000000674F                 db 0FFh
.eh_frame_hdr:0000000000006750                 db  60h ; `
.eh_frame_hdr:0000000000006751                 db    7
.eh_frame_hdr:0000000000006752                 db    0
.eh_frame_hdr:0000000000006753                 db    0
.eh_frame_hdr:0000000000006754                 db  10h
.eh_frame_hdr:0000000000006755                 db 0DCh
.eh_frame_hdr:0000000000006756                 db 0FFh
.eh_frame_hdr:0000000000006757                 db 0FFh
.eh_frame_hdr:0000000000006758                 db  74h ; t
.eh_frame_hdr:0000000000006759                 db    7
.eh_frame_hdr:000000000000675A                 db    0
.eh_frame_hdr:000000000000675B                 db    0
.eh_frame_hdr:000000000000675C                 db  50h ; P
.eh_frame_hdr:000000000000675D                 db 0DCh
.eh_frame_hdr:000000000000675E                 db 0FFh
.eh_frame_hdr:000000000000675F                 db 0FFh
.eh_frame_hdr:0000000000006760                 db  88h
.eh_frame_hdr:0000000000006761                 db    7
.eh_frame_hdr:0000000000006762                 db    0
.eh_frame_hdr:0000000000006763                 db    0
.eh_frame_hdr:0000000000006764                 db  70h ; p
.eh_frame_hdr:0000000000006765                 db 0DCh
.eh_frame_hdr:0000000000006766                 db 0FFh
.eh_frame_hdr:0000000000006767                 db 0FFh
.eh_frame_hdr:0000000000006768                 db  9Ch
.eh_frame_hdr:0000000000006769                 db    7
.eh_frame_hdr:000000000000676A                 db    0
.eh_frame_hdr:000000000000676B                 db    0
.eh_frame_hdr:000000000000676C                 db 0A0h
.eh_frame_hdr:000000000000676D                 db 0DCh
.eh_frame_hdr:000000000000676E                 db 0FFh
.eh_frame_hdr:000000000000676F                 db 0FFh
.eh_frame_hdr:0000000000006770                 db 0B0h
.eh_frame_hdr:0000000000006771                 db    7
.eh_frame_hdr:0000000000006772                 db    0
.eh_frame_hdr:0000000000006773                 db    0
.eh_frame_hdr:0000000000006774                 db  20h
.eh_frame_hdr:0000000000006775                 db 0DDh
.eh_frame_hdr:0000000000006776                 db 0FFh
.eh_frame_hdr:0000000000006777                 db 0FFh
.eh_frame_hdr:0000000000006778                 db    4
.eh_frame_hdr:0000000000006779                 db    8
.eh_frame_hdr:000000000000677A                 db    0
.eh_frame_hdr:000000000000677B                 db    0
.eh_frame_hdr:000000000000677C                 db  10h
.eh_frame_hdr:000000000000677D                 db 0DEh
.eh_frame_hdr:000000000000677E                 db 0FFh
.eh_frame_hdr:000000000000677F                 db 0FFh
.eh_frame_hdr:0000000000006780                 db  70h ; p
.eh_frame_hdr:0000000000006781                 db    8
.eh_frame_hdr:0000000000006782                 db    0
.eh_frame_hdr:0000000000006783                 db    0
.eh_frame_hdr:0000000000006784                 db  20h
.eh_frame_hdr:0000000000006785                 db 0DEh
.eh_frame_hdr:0000000000006786                 db 0FFh
.eh_frame_hdr:0000000000006787                 db 0FFh
.eh_frame_hdr:0000000000006788                 db  84h
.eh_frame_hdr:0000000000006789                 db    8
.eh_frame_hdr:000000000000678A                 db    0
.eh_frame_hdr:000000000000678B                 db    0
.eh_frame_hdr:000000000000678C                 db 0C0h
.eh_frame_hdr:000000000000678D                 db 0DEh
.eh_frame_hdr:000000000000678E                 db 0FFh
.eh_frame_hdr:000000000000678F                 db 0FFh
.eh_frame_hdr:0000000000006790                 db 0B0h
.eh_frame_hdr:0000000000006791                 db    8
.eh_frame_hdr:0000000000006792                 db    0
.eh_frame_hdr:0000000000006793                 db    0
.eh_frame_hdr:0000000000006794                 db 0E0h
.eh_frame_hdr:0000000000006795                 db 0DEh
.eh_frame_hdr:0000000000006796                 db 0FFh
.eh_frame_hdr:0000000000006797                 db 0FFh
.eh_frame_hdr:0000000000006798                 db 0C4h
.eh_frame_hdr:0000000000006799                 db    8
.eh_frame_hdr:000000000000679A                 db    0
.eh_frame_hdr:000000000000679B                 db    0
.eh_frame_hdr:000000000000679C                 db 0F0h
.eh_frame_hdr:000000000000679D                 db 0DEh
.eh_frame_hdr:000000000000679E                 db 0FFh
.eh_frame_hdr:000000000000679F                 db 0FFh
.eh_frame_hdr:00000000000067A0                 db 0D8h
.eh_frame_hdr:00000000000067A1                 db    8
.eh_frame_hdr:00000000000067A2                 db    0
.eh_frame_hdr:00000000000067A3                 db    0
.eh_frame_hdr:00000000000067A4                 db  10h
.eh_frame_hdr:00000000000067A5                 db 0DFh
.eh_frame_hdr:00000000000067A6                 db 0FFh
.eh_frame_hdr:00000000000067A7                 db 0FFh
.eh_frame_hdr:00000000000067A8                 db 0ECh
.eh_frame_hdr:00000000000067A9                 db    8
.eh_frame_hdr:00000000000067AA                 db    0
.eh_frame_hdr:00000000000067AB                 db    0
.eh_frame_hdr:00000000000067AC                 db  30h ; 0
.eh_frame_hdr:00000000000067AD                 db 0DFh
.eh_frame_hdr:00000000000067AE                 db 0FFh
.eh_frame_hdr:00000000000067AF                 db 0FFh
.eh_frame_hdr:00000000000067B0                 db    0
.eh_frame_hdr:00000000000067B1                 db    9
.eh_frame_hdr:00000000000067B2                 db    0
.eh_frame_hdr:00000000000067B3                 db    0
.eh_frame_hdr:00000000000067B4                 db 0C0h
.eh_frame_hdr:00000000000067B5                 db 0DFh
.eh_frame_hdr:00000000000067B6                 db 0FFh
.eh_frame_hdr:00000000000067B7                 db 0FFh
.eh_frame_hdr:00000000000067B8                 db  1Ch
.eh_frame_hdr:00000000000067B9                 db    9
.eh_frame_hdr:00000000000067BA                 db    0
.eh_frame_hdr:00000000000067BB                 db    0
.eh_frame_hdr:00000000000067BC                 db  50h ; P
.eh_frame_hdr:00000000000067BD                 db 0E0h
.eh_frame_hdr:00000000000067BE                 db 0FFh
.eh_frame_hdr:00000000000067BF                 db 0FFh
.eh_frame_hdr:00000000000067C0                 db  38h ; 8
.eh_frame_hdr:00000000000067C1                 db    9
.eh_frame_hdr:00000000000067C2                 db    0
.eh_frame_hdr:00000000000067C3                 db    0
.eh_frame_hdr:00000000000067C4                 db  60h ; `
.eh_frame_hdr:00000000000067C5                 db 0E0h
.eh_frame_hdr:00000000000067C6                 db 0FFh
.eh_frame_hdr:00000000000067C7                 db 0FFh
.eh_frame_hdr:00000000000067C8                 db  4Ch ; L
.eh_frame_hdr:00000000000067C9                 db    9
.eh_frame_hdr:00000000000067CA                 db    0
.eh_frame_hdr:00000000000067CB                 db    0
.eh_frame_hdr:00000000000067CC                 db  70h ; p
.eh_frame_hdr:00000000000067CD                 db 0E0h
.eh_frame_hdr:00000000000067CE                 db 0FFh
.eh_frame_hdr:00000000000067CF                 db 0FFh
.eh_frame_hdr:00000000000067D0                 db  60h ; `
.eh_frame_hdr:00000000000067D1                 db    9
.eh_frame_hdr:00000000000067D2                 db    0
.eh_frame_hdr:00000000000067D3                 db    0
.eh_frame_hdr:00000000000067D4                 db  10h
.eh_frame_hdr:00000000000067D5                 db 0E1h
.eh_frame_hdr:00000000000067D6                 db 0FFh
.eh_frame_hdr:00000000000067D7                 db 0FFh
.eh_frame_hdr:00000000000067D8                 db  7Ch ; |
.eh_frame_hdr:00000000000067D9                 db    9
.eh_frame_hdr:00000000000067DA                 db    0
.eh_frame_hdr:00000000000067DB                 db    0
.eh_frame_hdr:00000000000067DC                 db  20h
.eh_frame_hdr:00000000000067DD                 db 0E1h
.eh_frame_hdr:00000000000067DE                 db 0FFh
.eh_frame_hdr:00000000000067DF                 db 0FFh
.eh_frame_hdr:00000000000067E0                 db  90h
.eh_frame_hdr:00000000000067E1                 db    9
.eh_frame_hdr:00000000000067E2                 db    0
.eh_frame_hdr:00000000000067E3                 db    0
.eh_frame_hdr:00000000000067E4                 db  40h ; @
.eh_frame_hdr:00000000000067E5                 db 0E1h
.eh_frame_hdr:00000000000067E6                 db 0FFh
.eh_frame_hdr:00000000000067E7                 db 0FFh
.eh_frame_hdr:00000000000067E8                 db 0A4h
.eh_frame_hdr:00000000000067E9                 db    9
.eh_frame_hdr:00000000000067EA                 db    0
.eh_frame_hdr:00000000000067EB                 db    0
.eh_frame_hdr:00000000000067EC                 db  50h ; P
.eh_frame_hdr:00000000000067ED                 db 0E1h
.eh_frame_hdr:00000000000067EE                 db 0FFh
.eh_frame_hdr:00000000000067EF                 db 0FFh
.eh_frame_hdr:00000000000067F0                 db 0B8h
.eh_frame_hdr:00000000000067F1                 db    9
.eh_frame_hdr:00000000000067F2                 db    0
.eh_frame_hdr:00000000000067F3                 db    0
.eh_frame_hdr:00000000000067F4                 db 0E0h
.eh_frame_hdr:00000000000067F5                 db 0E1h
.eh_frame_hdr:00000000000067F6                 db 0FFh
.eh_frame_hdr:00000000000067F7                 db 0FFh
.eh_frame_hdr:00000000000067F8                 db 0D4h
.eh_frame_hdr:00000000000067F9                 db    9
.eh_frame_hdr:00000000000067FA                 db    0
.eh_frame_hdr:00000000000067FB                 db    0
.eh_frame_hdr:00000000000067FC                 db  80h
.eh_frame_hdr:00000000000067FD                 db 0E2h
.eh_frame_hdr:00000000000067FE                 db 0FFh
.eh_frame_hdr:00000000000067FF                 db 0FFh
.eh_frame_hdr:0000000000006800                 db 0F0h
.eh_frame_hdr:0000000000006801                 db    9
.eh_frame_hdr:0000000000006802                 db    0
.eh_frame_hdr:0000000000006803                 db    0
.eh_frame_hdr:0000000000006804                 db  90h
.eh_frame_hdr:0000000000006805                 db 0E2h
.eh_frame_hdr:0000000000006806                 db 0FFh
.eh_frame_hdr:0000000000006807                 db 0FFh
.eh_frame_hdr:0000000000006808                 db    4
.eh_frame_hdr:0000000000006809                 db  0Ah
.eh_frame_hdr:000000000000680A                 db    0
.eh_frame_hdr:000000000000680B                 db    0
.eh_frame_hdr:000000000000680C                 db 0B0h
.eh_frame_hdr:000000000000680D                 db 0E2h
.eh_frame_hdr:000000000000680E                 db 0FFh
.eh_frame_hdr:000000000000680F                 db 0FFh
.eh_frame_hdr:0000000000006810                 db  18h
.eh_frame_hdr:0000000000006811                 db  0Ah
.eh_frame_hdr:0000000000006812                 db    0
.eh_frame_hdr:0000000000006813                 db    0
.eh_frame_hdr:0000000000006814                 db 0D0h
.eh_frame_hdr:0000000000006815                 db 0E2h
.eh_frame_hdr:0000000000006816                 db 0FFh
.eh_frame_hdr:0000000000006817                 db 0FFh
.eh_frame_hdr:0000000000006818                 db  2Ch ; ,
.eh_frame_hdr:0000000000006819                 db  0Ah
.eh_frame_hdr:000000000000681A                 db    0
.eh_frame_hdr:000000000000681B                 db    0
.eh_frame_hdr:000000000000681C                 db 0E0h
.eh_frame_hdr:000000000000681D                 db 0E2h
.eh_frame_hdr:000000000000681E                 db 0FFh
.eh_frame_hdr:000000000000681F                 db 0FFh
.eh_frame_hdr:0000000000006820                 db  40h ; @
.eh_frame_hdr:0000000000006821                 db  0Ah
.eh_frame_hdr:0000000000006822                 db    0
.eh_frame_hdr:0000000000006823                 db    0
.eh_frame_hdr:0000000000006824                 db    0
.eh_frame_hdr:0000000000006825                 db 0E3h
.eh_frame_hdr:0000000000006826                 db 0FFh
.eh_frame_hdr:0000000000006827                 db 0FFh
.eh_frame_hdr:0000000000006828                 db  54h ; T
.eh_frame_hdr:0000000000006829                 db  0Ah
.eh_frame_hdr:000000000000682A                 db    0
.eh_frame_hdr:000000000000682B                 db    0
.eh_frame_hdr:000000000000682C                 db  20h
.eh_frame_hdr:000000000000682D                 db 0E3h
.eh_frame_hdr:000000000000682E                 db 0FFh
.eh_frame_hdr:000000000000682F                 db 0FFh
.eh_frame_hdr:0000000000006830                 db  68h ; h
.eh_frame_hdr:0000000000006831                 db  0Ah
.eh_frame_hdr:0000000000006832                 db    0
.eh_frame_hdr:0000000000006833                 db    0
.eh_frame_hdr:0000000000006834                 db  40h ; @
.eh_frame_hdr:0000000000006835                 db 0E3h
.eh_frame_hdr:0000000000006836                 db 0FFh
.eh_frame_hdr:0000000000006837                 db 0FFh
.eh_frame_hdr:0000000000006838                 db  80h
.eh_frame_hdr:0000000000006839                 db  0Ah
.eh_frame_hdr:000000000000683A                 db    0
.eh_frame_hdr:000000000000683B                 db    0
.eh_frame_hdr:000000000000683C                 db  60h ; `
.eh_frame_hdr:000000000000683D                 db 0E7h
.eh_frame_hdr:000000000000683E                 db 0FFh
.eh_frame_hdr:000000000000683F                 db 0FFh
.eh_frame_hdr:0000000000006840                 db  94h
.eh_frame_hdr:0000000000006841                 db  0Bh
.eh_frame_hdr:0000000000006842                 db    0
.eh_frame_hdr:0000000000006843                 db    0
.eh_frame_hdr:0000000000006844                 db  80h
.eh_frame_hdr:0000000000006845                 db 0E7h
.eh_frame_hdr:0000000000006846                 db 0FFh
.eh_frame_hdr:0000000000006847                 db 0FFh
.eh_frame_hdr:0000000000006848                 db 0A8h
.eh_frame_hdr:0000000000006849                 db  0Bh
.eh_frame_hdr:000000000000684A                 db    0
.eh_frame_hdr:000000000000684B                 db    0
.eh_frame_hdr:000000000000684C                 db    0
.eh_frame_hdr:000000000000684D                 db 0E8h
.eh_frame_hdr:000000000000684E                 db 0FFh
.eh_frame_hdr:000000000000684F                 db 0FFh
.eh_frame_hdr:0000000000006850                 db 0C4h
.eh_frame_hdr:0000000000006851                 db  0Bh
.eh_frame_hdr:0000000000006852                 db    0
.eh_frame_hdr:0000000000006853                 db    0
.eh_frame_hdr:0000000000006854                 db 0E0h
.eh_frame_hdr:0000000000006855                 db 0E8h
.eh_frame_hdr:0000000000006856                 db 0FFh
.eh_frame_hdr:0000000000006857                 db 0FFh
.eh_frame_hdr:0000000000006858                 db 0F0h
.eh_frame_hdr:0000000000006859                 db  0Bh
.eh_frame_hdr:000000000000685A                 db    0
.eh_frame_hdr:000000000000685B                 db    0
.eh_frame_hdr:000000000000685C                 db  60h ; `
.eh_frame_hdr:000000000000685D                 db 0E9h
.eh_frame_hdr:000000000000685E                 db 0FFh
.eh_frame_hdr:000000000000685F                 db 0FFh
.eh_frame_hdr:0000000000006860                 db  10h
.eh_frame_hdr:0000000000006861                 db  0Ch
.eh_frame_hdr:0000000000006862                 db    0
.eh_frame_hdr:0000000000006863                 db    0
.eh_frame_hdr:0000000000006864                 db  80h
.eh_frame_hdr:0000000000006865                 db 0E9h
.eh_frame_hdr:0000000000006866                 db 0FFh
.eh_frame_hdr:0000000000006867                 db 0FFh
.eh_frame_hdr:0000000000006868                 db  2Ch ; ,
.eh_frame_hdr:0000000000006869                 db  0Ch
.eh_frame_hdr:000000000000686A                 db    0
.eh_frame_hdr:000000000000686B                 db    0
.eh_frame_hdr:000000000000686C                 db 0B0h
.eh_frame_hdr:000000000000686D                 db 0E9h
.eh_frame_hdr:000000000000686E                 db 0FFh
.eh_frame_hdr:000000000000686F                 db 0FFh
.eh_frame_hdr:0000000000006870                 db  40h ; @
.eh_frame_hdr:0000000000006871                 db  0Ch
.eh_frame_hdr:0000000000006872                 db    0
.eh_frame_hdr:0000000000006873                 db    0
.eh_frame_hdr:0000000000006874                 db 0C0h
.eh_frame_hdr:0000000000006875                 db 0E9h
.eh_frame_hdr:0000000000006876                 db 0FFh
.eh_frame_hdr:0000000000006877                 db 0FFh
.eh_frame_hdr:0000000000006878                 db  54h ; T
.eh_frame_hdr:0000000000006879                 db  0Ch
.eh_frame_hdr:000000000000687A                 db    0
.eh_frame_hdr:000000000000687B                 db    0
.eh_frame_hdr:000000000000687C                 db    0
.eh_frame_hdr:000000000000687D                 db 0EAh
.eh_frame_hdr:000000000000687E                 db 0FFh
.eh_frame_hdr:000000000000687F                 db 0FFh
.eh_frame_hdr:0000000000006880                 db  78h ; x
.eh_frame_hdr:0000000000006881                 db  0Ch
.eh_frame_hdr:0000000000006882                 db    0
.eh_frame_hdr:0000000000006883                 db    0
.eh_frame_hdr:0000000000006884                 db  30h ; 0
.eh_frame_hdr:0000000000006885                 db 0EAh
.eh_frame_hdr:0000000000006886                 db 0FFh
.eh_frame_hdr:0000000000006887                 db 0FFh
.eh_frame_hdr:0000000000006888                 db  8Ch
.eh_frame_hdr:0000000000006889                 db  0Ch
.eh_frame_hdr:000000000000688A                 db    0
.eh_frame_hdr:000000000000688B                 db    0
.eh_frame_hdr:000000000000688C                 db 0C0h
.eh_frame_hdr:000000000000688D                 db 0EAh
.eh_frame_hdr:000000000000688E                 db 0FFh
.eh_frame_hdr:000000000000688F                 db 0FFh
.eh_frame_hdr:0000000000006890                 db 0A4h
.eh_frame_hdr:0000000000006891                 db  0Ch
.eh_frame_hdr:0000000000006892                 db    0
.eh_frame_hdr:0000000000006893                 db    0
.eh_frame_hdr:0000000000006894                 db  10h
.eh_frame_hdr:0000000000006895                 db 0EBh
.eh_frame_hdr:0000000000006896                 db 0FFh
.eh_frame_hdr:0000000000006897                 db 0FFh
.eh_frame_hdr:0000000000006898                 db 0BCh
.eh_frame_hdr:0000000000006899                 db  0Ch
.eh_frame_hdr:000000000000689A                 db    0
.eh_frame_hdr:000000000000689B                 db    0
.eh_frame_hdr:000000000000689C                 db  30h ; 0
.eh_frame_hdr:000000000000689D                 db 0EBh
.eh_frame_hdr:000000000000689E                 db 0FFh
.eh_frame_hdr:000000000000689F                 db 0FFh
.eh_frame_hdr:00000000000068A0                 db 0D8h
.eh_frame_hdr:00000000000068A1                 db  0Ch
.eh_frame_hdr:00000000000068A2                 db    0
.eh_frame_hdr:00000000000068A3                 db    0
.eh_frame_hdr:00000000000068A4                 db  60h ; `
.eh_frame_hdr:00000000000068A5                 db 0EBh
.eh_frame_hdr:00000000000068A6                 db 0FFh
.eh_frame_hdr:00000000000068A7                 db 0FFh
.eh_frame_hdr:00000000000068A8                 db 0F4h
.eh_frame_hdr:00000000000068A9                 db  0Ch
.eh_frame_hdr:00000000000068AA                 db    0
.eh_frame_hdr:00000000000068AB                 db    0
.eh_frame_hdr:00000000000068AC                 db  90h
.eh_frame_hdr:00000000000068AD                 db 0EBh
.eh_frame_hdr:00000000000068AE                 db 0FFh
.eh_frame_hdr:00000000000068AF                 db 0FFh
.eh_frame_hdr:00000000000068B0                 db  1Ch
.eh_frame_hdr:00000000000068B1                 db  0Dh
.eh_frame_hdr:00000000000068B2                 db    0
.eh_frame_hdr:00000000000068B3                 db    0
.eh_frame_hdr:00000000000068B4                 db 0B0h
.eh_frame_hdr:00000000000068B5                 db 0EBh
.eh_frame_hdr:00000000000068B6                 db 0FFh
.eh_frame_hdr:00000000000068B7                 db 0FFh
.eh_frame_hdr:00000000000068B8                 db  38h ; 8
.eh_frame_hdr:00000000000068B9                 db  0Dh
.eh_frame_hdr:00000000000068BA                 db    0
.eh_frame_hdr:00000000000068BB                 db    0
.eh_frame_hdr:00000000000068BC                 db 0F0h
.eh_frame_hdr:00000000000068BD                 db 0EBh
.eh_frame_hdr:00000000000068BE                 db 0FFh
.eh_frame_hdr:00000000000068BF                 db 0FFh
.eh_frame_hdr:00000000000068C0                 db  50h ; P
.eh_frame_hdr:00000000000068C1                 db  0Dh
.eh_frame_hdr:00000000000068C2                 db    0
.eh_frame_hdr:00000000000068C3                 db    0
.eh_frame_hdr:00000000000068C4                 db  10h
.eh_frame_hdr:00000000000068C5                 db 0ECh
.eh_frame_hdr:00000000000068C6                 db 0FFh
.eh_frame_hdr:00000000000068C7                 db 0FFh
.eh_frame_hdr:00000000000068C8                 db  70h ; p
.eh_frame_hdr:00000000000068C9                 db  0Dh
.eh_frame_hdr:00000000000068CA                 db    0
.eh_frame_hdr:00000000000068CB                 db    0
.eh_frame_hdr:00000000000068CC                 db  90h
.eh_frame_hdr:00000000000068CD                 db 0ECh
.eh_frame_hdr:00000000000068CE                 db 0FFh
.eh_frame_hdr:00000000000068CF                 db 0FFh
.eh_frame_hdr:00000000000068D0                 db 0A8h
.eh_frame_hdr:00000000000068D1                 db  0Dh
.eh_frame_hdr:00000000000068D2                 db    0
.eh_frame_hdr:00000000000068D3                 db    0
.eh_frame_hdr:00000000000068D4                 db 0D0h
.eh_frame_hdr:00000000000068D5                 db 0ECh
.eh_frame_hdr:00000000000068D6                 db 0FFh
.eh_frame_hdr:00000000000068D7                 db 0FFh
.eh_frame_hdr:00000000000068D8                 db 0C8h
.eh_frame_hdr:00000000000068D9                 db  0Dh
.eh_frame_hdr:00000000000068DA                 db    0
.eh_frame_hdr:00000000000068DB                 db    0
.eh_frame_hdr:00000000000068DC                 db  30h ; 0
.eh_frame_hdr:00000000000068DD                 db 0EDh
.eh_frame_hdr:00000000000068DE                 db 0FFh
.eh_frame_hdr:00000000000068DF                 db 0FFh
.eh_frame_hdr:00000000000068E0                 db 0F8h
.eh_frame_hdr:00000000000068E1                 db  0Dh
.eh_frame_hdr:00000000000068E2                 db    0
.eh_frame_hdr:00000000000068E3                 db    0
.eh_frame_hdr:00000000000068E4                 db 0C0h
.eh_frame_hdr:00000000000068E5                 db 0EDh
.eh_frame_hdr:00000000000068E6                 db 0FFh
.eh_frame_hdr:00000000000068E7                 db 0FFh
.eh_frame_hdr:00000000000068E8                 db  38h ; 8
.eh_frame_hdr:00000000000068E9                 db  0Eh
.eh_frame_hdr:00000000000068EA                 db    0
.eh_frame_hdr:00000000000068EB                 db    0
.eh_frame_hdr:00000000000068EC                 db  40h ; @
.eh_frame_hdr:00000000000068ED                 db 0EEh
.eh_frame_hdr:00000000000068EE                 db 0FFh
.eh_frame_hdr:00000000000068EF                 db 0FFh
.eh_frame_hdr:00000000000068F0                 db  88h
.eh_frame_hdr:00000000000068F1                 db  0Eh
.eh_frame_hdr:00000000000068F2                 db    0
.eh_frame_hdr:00000000000068F3                 db    0
.eh_frame_hdr:00000000000068F4                 db 0A0h
.eh_frame_hdr:00000000000068F5                 db 0EEh
.eh_frame_hdr:00000000000068F6                 db 0FFh
.eh_frame_hdr:00000000000068F7                 db 0FFh
.eh_frame_hdr:00000000000068F8                 db 0A8h
.eh_frame_hdr:00000000000068F9                 db  0Eh
.eh_frame_hdr:00000000000068FA                 db    0
.eh_frame_hdr:00000000000068FB                 db    0
.eh_frame_hdr:00000000000068FC                 db 0E0h
.eh_frame_hdr:00000000000068FD                 db 0EEh
.eh_frame_hdr:00000000000068FE                 db 0FFh
.eh_frame_hdr:00000000000068FF                 db 0FFh
.eh_frame_hdr:0000000000006900                 db 0C8h
.eh_frame_hdr:0000000000006901                 db  0Eh
.eh_frame_hdr:0000000000006902                 db    0
.eh_frame_hdr:0000000000006903                 db    0
.eh_frame_hdr:0000000000006904                 db  50h ; P
.eh_frame_hdr:0000000000006905                 db 0EFh
.eh_frame_hdr:0000000000006906                 db 0FFh
.eh_frame_hdr:0000000000006907                 db 0FFh
.eh_frame_hdr:0000000000006908                 db  10h
.eh_frame_hdr:0000000000006909                 db  0Fh
.eh_frame_hdr:000000000000690A                 db    0
.eh_frame_hdr:000000000000690B                 db    0
.eh_frame_hdr:000000000000690C                 db  60h ; `
.eh_frame_hdr:000000000000690D                 db 0EFh
.eh_frame_hdr:000000000000690E                 db 0FFh
.eh_frame_hdr:000000000000690F                 db 0FFh
.eh_frame_hdr:0000000000006910                 db  28h ; (
.eh_frame_hdr:0000000000006911                 db  0Fh
.eh_frame_hdr:0000000000006912                 db    0
.eh_frame_hdr:0000000000006913                 db    0
.eh_frame_hdr:0000000000006913 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000006913
LOAD:0000000000006914 ; ===========================================================================
LOAD:0000000000006914
LOAD:0000000000006914 ; Segment type: Pure code
LOAD:0000000000006914 ; Segment permissions: Read/Execute
LOAD:0000000000006914 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006914                 assume cs:LOAD
LOAD:0000000000006914                 ;org 6914h
LOAD:0000000000006914                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006914                 align 8
LOAD:0000000000006914 LOAD            ends
LOAD:0000000000006914
.eh_frame:0000000000006918 ; ===========================================================================
.eh_frame:0000000000006918
.eh_frame:0000000000006918 ; Segment type: Pure data
.eh_frame:0000000000006918 ; Segment permissions: Read
.eh_frame:0000000000006918 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000006918                 assume cs:_eh_frame
.eh_frame:0000000000006918                 ;org 6918h
.eh_frame:0000000000006918                 db  14h
.eh_frame:0000000000006919                 db    0
.eh_frame:000000000000691A                 db    0
.eh_frame:000000000000691B                 db    0
.eh_frame:000000000000691C                 db    0
.eh_frame:000000000000691D                 db    0
.eh_frame:000000000000691E                 db    0
.eh_frame:000000000000691F                 db    0
.eh_frame:0000000000006920                 db    1
.eh_frame:0000000000006921                 db  7Ah ; z
.eh_frame:0000000000006922                 db  52h ; R
.eh_frame:0000000000006923                 db    0
.eh_frame:0000000000006924                 db    1
.eh_frame:0000000000006925                 db  78h ; x
.eh_frame:0000000000006926                 db  10h
.eh_frame:0000000000006927                 db    1
.eh_frame:0000000000006928                 db  1Bh
.eh_frame:0000000000006929                 db  0Ch
.eh_frame:000000000000692A                 db    7
.eh_frame:000000000000692B                 db    8
.eh_frame:000000000000692C                 db  90h
.eh_frame:000000000000692D                 db    1
.eh_frame:000000000000692E                 db    7
.eh_frame:000000000000692F                 db  10h
.eh_frame:0000000000006930                 db  14h
.eh_frame:0000000000006931                 db    0
.eh_frame:0000000000006932                 db    0
.eh_frame:0000000000006933                 db    0
.eh_frame:0000000000006934                 db  1Ch
.eh_frame:0000000000006935                 db    0
.eh_frame:0000000000006936                 db    0
.eh_frame:0000000000006937                 db    0
.eh_frame:0000000000006938                 db 0A8h
.eh_frame:0000000000006939                 db 0B3h
.eh_frame:000000000000693A                 db 0FFh
.eh_frame:000000000000693B                 db 0FFh
.eh_frame:000000000000693C                 db  2Bh ; +
.eh_frame:000000000000693D                 db    0
.eh_frame:000000000000693E                 db    0
.eh_frame:000000000000693F                 db    0
.eh_frame:0000000000006940                 db    0
.eh_frame:0000000000006941                 db    0
.eh_frame:0000000000006942                 db    0
.eh_frame:0000000000006943                 db    0
.eh_frame:0000000000006944                 db    0
.eh_frame:0000000000006945                 db    0
.eh_frame:0000000000006946                 db    0
.eh_frame:0000000000006947                 db    0
.eh_frame:0000000000006948                 db  14h
.eh_frame:0000000000006949                 db    0
.eh_frame:000000000000694A                 db    0
.eh_frame:000000000000694B                 db    0
.eh_frame:000000000000694C                 db    0
.eh_frame:000000000000694D                 db    0
.eh_frame:000000000000694E                 db    0
.eh_frame:000000000000694F                 db    0
.eh_frame:0000000000006950                 db    1
.eh_frame:0000000000006951                 db  7Ah ; z
.eh_frame:0000000000006952                 db  52h ; R
.eh_frame:0000000000006953                 db    0
.eh_frame:0000000000006954                 db    1
.eh_frame:0000000000006955                 db  78h ; x
.eh_frame:0000000000006956                 db  10h
.eh_frame:0000000000006957                 db    1
.eh_frame:0000000000006958                 db  1Bh
.eh_frame:0000000000006959                 db  0Ch
.eh_frame:000000000000695A                 db    7
.eh_frame:000000000000695B                 db    8
.eh_frame:000000000000695C                 db  90h
.eh_frame:000000000000695D                 db    1
.eh_frame:000000000000695E                 db    0
.eh_frame:000000000000695F                 db    0
.eh_frame:0000000000006960                 db  24h ; $
.eh_frame:0000000000006961                 db    0
.eh_frame:0000000000006962                 db    0
.eh_frame:0000000000006963                 db    0
.eh_frame:0000000000006964                 db  1Ch
.eh_frame:0000000000006965                 db    0
.eh_frame:0000000000006966                 db    0
.eh_frame:0000000000006967                 db    0
.eh_frame:0000000000006968                 db 0F8h
.eh_frame:0000000000006969                 db 0AAh
.eh_frame:000000000000696A                 db 0FFh
.eh_frame:000000000000696B                 db 0FFh
.eh_frame:000000000000696C                 db  10h
.eh_frame:000000000000696D                 db    3
.eh_frame:000000000000696E                 db    0
.eh_frame:000000000000696F                 db    0
.eh_frame:0000000000006970                 db    0
.eh_frame:0000000000006971                 db  0Eh
.eh_frame:0000000000006972                 db  10h
.eh_frame:0000000000006973                 db  46h ; F
.eh_frame:0000000000006974                 db  0Eh
.eh_frame:0000000000006975                 db  18h
.eh_frame:0000000000006976                 db  4Ah ; J
.eh_frame:0000000000006977                 db  0Fh
.eh_frame:0000000000006978                 db  0Bh
.eh_frame:0000000000006979                 db  77h ; w
.eh_frame:000000000000697A                 db    8
.eh_frame:000000000000697B                 db  80h
.eh_frame:000000000000697C                 db    0
.eh_frame:000000000000697D                 db  3Fh ; ?
.eh_frame:000000000000697E                 db  1Ah
.eh_frame:000000000000697F                 db  3Bh ; ;
.eh_frame:0000000000006980                 db  2Ah ; *
.eh_frame:0000000000006981                 db  33h ; 3
.eh_frame:0000000000006982                 db  24h ; $
.eh_frame:0000000000006983                 db  22h ; "
.eh_frame:0000000000006984                 db    0
.eh_frame:0000000000006985                 db    0
.eh_frame:0000000000006986                 db    0
.eh_frame:0000000000006987                 db    0
.eh_frame:0000000000006988                 db  14h
.eh_frame:0000000000006989                 db    0
.eh_frame:000000000000698A                 db    0
.eh_frame:000000000000698B                 db    0
.eh_frame:000000000000698C                 db  44h ; D
.eh_frame:000000000000698D                 db    0
.eh_frame:000000000000698E                 db    0
.eh_frame:000000000000698F                 db    0
.eh_frame:0000000000006990                 db 0E0h
.eh_frame:0000000000006991                 db 0ADh
.eh_frame:0000000000006992                 db 0FFh
.eh_frame:0000000000006993                 db 0FFh
.eh_frame:0000000000006994                 db    8
.eh_frame:0000000000006995                 db    0
.eh_frame:0000000000006996                 db    0
.eh_frame:0000000000006997                 db    0
.eh_frame:0000000000006998                 db    0
.eh_frame:0000000000006999                 db    0
.eh_frame:000000000000699A                 db    0
.eh_frame:000000000000699B                 db    0
.eh_frame:000000000000699C                 db    0
.eh_frame:000000000000699D                 db    0
.eh_frame:000000000000699E                 db    0
.eh_frame:000000000000699F                 db    0
.eh_frame:00000000000069A0                 db  28h ; (
.eh_frame:00000000000069A1                 db    0
.eh_frame:00000000000069A2                 db    0
.eh_frame:00000000000069A3                 db    0
.eh_frame:00000000000069A4                 db  5Ch ; \
.eh_frame:00000000000069A5                 db    0
.eh_frame:00000000000069A6                 db    0
.eh_frame:00000000000069A7                 db    0
.eh_frame:00000000000069A8                 db  48h ; H
.eh_frame:00000000000069A9                 db 0B4h
.eh_frame:00000000000069AA                 db 0FFh
.eh_frame:00000000000069AB                 db 0FFh
.eh_frame:00000000000069AC                 db 0BAh
.eh_frame:00000000000069AD                 db    3
.eh_frame:00000000000069AE                 db    0
.eh_frame:00000000000069AF                 db    0
.eh_frame:00000000000069B0                 db    0
.eh_frame:00000000000069B1                 db  42h ; B
.eh_frame:00000000000069B2                 db  0Eh
.eh_frame:00000000000069B3                 db  10h
.eh_frame:00000000000069B4                 db  8Dh
.eh_frame:00000000000069B5                 db    2
.eh_frame:00000000000069B6                 db  42h ; B
.eh_frame:00000000000069B7                 db  0Eh
.eh_frame:00000000000069B8                 db  18h
.eh_frame:00000000000069B9                 db  8Ch
.eh_frame:00000000000069BA                 db    3
.eh_frame:00000000000069BB                 db  46h ; F
.eh_frame:00000000000069BC                 db  0Eh
.eh_frame:00000000000069BD                 db  20h
.eh_frame:00000000000069BE                 db  86h
.eh_frame:00000000000069BF                 db    4
.eh_frame:00000000000069C0                 db  41h ; A
.eh_frame:00000000000069C1                 db  0Eh
.eh_frame:00000000000069C2                 db  28h ; (
.eh_frame:00000000000069C3                 db  83h
.eh_frame:00000000000069C4                 db    5
.eh_frame:00000000000069C5                 db  49h ; I
.eh_frame:00000000000069C6                 db  0Eh
.eh_frame:00000000000069C7                 db 0B0h
.eh_frame:00000000000069C8                 db    1
.eh_frame:00000000000069C9                 db    0
.eh_frame:00000000000069CA                 db    0
.eh_frame:00000000000069CB                 db    0
.eh_frame:00000000000069CC                 db  50h ; P
.eh_frame:00000000000069CD                 db    0
.eh_frame:00000000000069CE                 db    0
.eh_frame:00000000000069CF                 db    0
.eh_frame:00000000000069D0                 db  88h
.eh_frame:00000000000069D1                 db    0
.eh_frame:00000000000069D2                 db    0
.eh_frame:00000000000069D3                 db    0
.eh_frame:00000000000069D4                 db 0ACh
.eh_frame:00000000000069D5                 db 0ADh
.eh_frame:00000000000069D6                 db 0FFh
.eh_frame:00000000000069D7                 db 0FFh
.eh_frame:00000000000069D8                 db  55h ; U
.eh_frame:00000000000069D9                 db    5
.eh_frame:00000000000069DA                 db    0
.eh_frame:00000000000069DB                 db    0
.eh_frame:00000000000069DC                 db    0
.eh_frame:00000000000069DD                 db  42h ; B
.eh_frame:00000000000069DE                 db  0Eh
.eh_frame:00000000000069DF                 db  10h
.eh_frame:00000000000069E0                 db  8Fh
.eh_frame:00000000000069E1                 db    2
.eh_frame:00000000000069E2                 db  42h ; B
.eh_frame:00000000000069E3                 db  0Eh
.eh_frame:00000000000069E4                 db  18h
.eh_frame:00000000000069E5                 db  8Eh
.eh_frame:00000000000069E6                 db    3
.eh_frame:00000000000069E7                 db  48h ; H
.eh_frame:00000000000069E8                 db  0Eh
.eh_frame:00000000000069E9                 db  20h
.eh_frame:00000000000069EA                 db  8Dh
.eh_frame:00000000000069EB                 db    4
.eh_frame:00000000000069EC                 db  42h ; B
.eh_frame:00000000000069ED                 db  0Eh
.eh_frame:00000000000069EE                 db  28h ; (
.eh_frame:00000000000069EF                 db  8Ch
.eh_frame:00000000000069F0                 db    5
.eh_frame:00000000000069F1                 db  48h ; H
.eh_frame:00000000000069F2                 db  0Eh
.eh_frame:00000000000069F3                 db  30h ; 0
.eh_frame:00000000000069F4                 db  86h
.eh_frame:00000000000069F5                 db    6
.eh_frame:00000000000069F6                 db  41h ; A
.eh_frame:00000000000069F7                 db  0Eh
.eh_frame:00000000000069F8                 db  38h ; 8
.eh_frame:00000000000069F9                 db  83h
.eh_frame:00000000000069FA                 db    7
.eh_frame:00000000000069FB                 db  4Ch ; L
.eh_frame:00000000000069FC                 db  0Eh
.eh_frame:00000000000069FD                 db  80h
.eh_frame:00000000000069FE                 db    1
.eh_frame:00000000000069FF                 db    3
.eh_frame:0000000000006A00                 db  33h ; 3
.eh_frame:0000000000006A01                 db    4
.eh_frame:0000000000006A02                 db  0Ah
.eh_frame:0000000000006A03                 db  0Eh
.eh_frame:0000000000006A04                 db  38h ; 8
.eh_frame:0000000000006A05                 db  41h ; A
.eh_frame:0000000000006A06                 db  0Eh
.eh_frame:0000000000006A07                 db  30h ; 0
.eh_frame:0000000000006A08                 db  41h ; A
.eh_frame:0000000000006A09                 db  0Eh
.eh_frame:0000000000006A0A                 db  28h ; (
.eh_frame:0000000000006A0B                 db  42h ; B
.eh_frame:0000000000006A0C                 db  0Eh
.eh_frame:0000000000006A0D                 db  20h
.eh_frame:0000000000006A0E                 db  42h ; B
.eh_frame:0000000000006A0F                 db  0Eh
.eh_frame:0000000000006A10                 db  18h
.eh_frame:0000000000006A11                 db  42h ; B
.eh_frame:0000000000006A12                 db  0Eh
.eh_frame:0000000000006A13                 db  10h
.eh_frame:0000000000006A14                 db  42h ; B
.eh_frame:0000000000006A15                 db  0Eh
.eh_frame:0000000000006A16                 db    8
.eh_frame:0000000000006A17                 db  41h ; A
.eh_frame:0000000000006A18                 db  0Bh
.eh_frame:0000000000006A19                 db    0
.eh_frame:0000000000006A1A                 db    0
.eh_frame:0000000000006A1B                 db    0
.eh_frame:0000000000006A1C                 db    0
.eh_frame:0000000000006A1D                 db    0
.eh_frame:0000000000006A1E                 db    0
.eh_frame:0000000000006A1F                 db    0
.eh_frame:0000000000006A20                 db  18h
.eh_frame:0000000000006A21                 db    0
.eh_frame:0000000000006A22                 db    0
.eh_frame:0000000000006A23                 db    0
.eh_frame:0000000000006A24                 db 0DCh
.eh_frame:0000000000006A25                 db    0
.eh_frame:0000000000006A26                 db    0
.eh_frame:0000000000006A27                 db    0
.eh_frame:0000000000006A28                 db  88h
.eh_frame:0000000000006A29                 db 0B7h
.eh_frame:0000000000006A2A                 db 0FFh
.eh_frame:0000000000006A2B                 db 0FFh
.eh_frame:0000000000006A2C                 db  3Fh ; ?
.eh_frame:0000000000006A2D                 db    0
.eh_frame:0000000000006A2E                 db    0
.eh_frame:0000000000006A2F                 db    0
.eh_frame:0000000000006A30                 db    0
.eh_frame:0000000000006A31                 db  49h ; I
.eh_frame:0000000000006A32                 db  0Eh
.eh_frame:0000000000006A33                 db  10h
.eh_frame:0000000000006A34                 db  83h
.eh_frame:0000000000006A35                 db    2
.eh_frame:0000000000006A36                 db  75h ; u
.eh_frame:0000000000006A37                 db  0Eh
.eh_frame:0000000000006A38                 db    8
.eh_frame:0000000000006A39                 db    0
.eh_frame:0000000000006A3A                 db    0
.eh_frame:0000000000006A3B                 db    0
.eh_frame:0000000000006A3C                 db  18h
.eh_frame:0000000000006A3D                 db    0
.eh_frame:0000000000006A3E                 db    0
.eh_frame:0000000000006A3F                 db    0
.eh_frame:0000000000006A40                 db 0F8h
.eh_frame:0000000000006A41                 db    0
.eh_frame:0000000000006A42                 db    0
.eh_frame:0000000000006A43                 db    0
.eh_frame:0000000000006A44                 db 0ACh
.eh_frame:0000000000006A45                 db 0B7h
.eh_frame:0000000000006A46                 db 0FFh
.eh_frame:0000000000006A47                 db 0FFh
.eh_frame:0000000000006A48                 db  3Fh ; ?
.eh_frame:0000000000006A49                 db    0
.eh_frame:0000000000006A4A                 db    0
.eh_frame:0000000000006A4B                 db    0
.eh_frame:0000000000006A4C                 db    0
.eh_frame:0000000000006A4D                 db  49h ; I
.eh_frame:0000000000006A4E                 db  0Eh
.eh_frame:0000000000006A4F                 db  10h
.eh_frame:0000000000006A50                 db  83h
.eh_frame:0000000000006A51                 db    2
.eh_frame:0000000000006A52                 db  75h ; u
.eh_frame:0000000000006A53                 db  0Eh
.eh_frame:0000000000006A54                 db    8
.eh_frame:0000000000006A55                 db    0
.eh_frame:0000000000006A56                 db    0
.eh_frame:0000000000006A57                 db    0
.eh_frame:0000000000006A58                 db  34h ; 4
.eh_frame:0000000000006A59                 db    0
.eh_frame:0000000000006A5A                 db    0
.eh_frame:0000000000006A5B                 db    0
.eh_frame:0000000000006A5C                 db  14h
.eh_frame:0000000000006A5D                 db    1
.eh_frame:0000000000006A5E                 db    0
.eh_frame:0000000000006A5F                 db    0
.eh_frame:0000000000006A60                 db 0D0h
.eh_frame:0000000000006A61                 db 0B7h
.eh_frame:0000000000006A62                 db 0FFh
.eh_frame:0000000000006A63                 db 0FFh
.eh_frame:0000000000006A64                 db  14h
.eh_frame:0000000000006A65                 db    1
.eh_frame:0000000000006A66                 db    0
.eh_frame:0000000000006A67                 db    0
.eh_frame:0000000000006A68                 db    0
.eh_frame:0000000000006A69                 db  41h ; A
.eh_frame:0000000000006A6A                 db  0Eh
.eh_frame:0000000000006A6B                 db  10h
.eh_frame:0000000000006A6C                 db  86h
.eh_frame:0000000000006A6D                 db    2
.eh_frame:0000000000006A6E                 db  41h ; A
.eh_frame:0000000000006A6F                 db  0Eh
.eh_frame:0000000000006A70                 db  18h
.eh_frame:0000000000006A71                 db  83h
.eh_frame:0000000000006A72                 db    3
.eh_frame:0000000000006A73                 db  47h ; G
.eh_frame:0000000000006A74                 db  0Eh
.eh_frame:0000000000006A75                 db  20h
.eh_frame:0000000000006A76                 db    2
.eh_frame:0000000000006A77                 db  48h ; H
.eh_frame:0000000000006A78                 db  0Ah
.eh_frame:0000000000006A79                 db  0Eh
.eh_frame:0000000000006A7A                 db  18h
.eh_frame:0000000000006A7B                 db  41h ; A
.eh_frame:0000000000006A7C                 db  0Eh
.eh_frame:0000000000006A7D                 db  10h
.eh_frame:0000000000006A7E                 db  41h ; A
.eh_frame:0000000000006A7F                 db  0Eh
.eh_frame:0000000000006A80                 db    8
.eh_frame:0000000000006A81                 db  45h ; E
.eh_frame:0000000000006A82                 db  0Bh
.eh_frame:0000000000006A83                 db  6Bh ; k
.eh_frame:0000000000006A84                 db  0Ah
.eh_frame:0000000000006A85                 db  0Eh
.eh_frame:0000000000006A86                 db  18h
.eh_frame:0000000000006A87                 db  41h ; A
.eh_frame:0000000000006A88                 db  0Eh
.eh_frame:0000000000006A89                 db  10h
.eh_frame:0000000000006A8A                 db  41h ; A
.eh_frame:0000000000006A8B                 db  0Eh
.eh_frame:0000000000006A8C                 db    8
.eh_frame:0000000000006A8D                 db  4Bh ; K
.eh_frame:0000000000006A8E                 db  0Bh
.eh_frame:0000000000006A8F                 db    0
.eh_frame:0000000000006A90                 db  64h ; d
.eh_frame:0000000000006A91                 db    0
.eh_frame:0000000000006A92                 db    0
.eh_frame:0000000000006A93                 db    0
.eh_frame:0000000000006A94                 db  4Ch ; L
.eh_frame:0000000000006A95                 db    1
.eh_frame:0000000000006A96                 db    0
.eh_frame:0000000000006A97                 db    0
.eh_frame:0000000000006A98                 db 0B8h
.eh_frame:0000000000006A99                 db 0B8h
.eh_frame:0000000000006A9A                 db 0FFh
.eh_frame:0000000000006A9B                 db 0FFh
.eh_frame:0000000000006A9C                 db  59h ; Y
.eh_frame:0000000000006A9D                 db    3
.eh_frame:0000000000006A9E                 db    0
.eh_frame:0000000000006A9F                 db    0
.eh_frame:0000000000006AA0                 db    0
.eh_frame:0000000000006AA1                 db  42h ; B
.eh_frame:0000000000006AA2                 db  0Eh
.eh_frame:0000000000006AA3                 db  10h
.eh_frame:0000000000006AA4                 db  8Fh
.eh_frame:0000000000006AA5                 db    2
.eh_frame:0000000000006AA6                 db  42h ; B
.eh_frame:0000000000006AA7                 db  0Eh
.eh_frame:0000000000006AA8                 db  18h
.eh_frame:0000000000006AA9                 db  8Eh
.eh_frame:0000000000006AAA                 db    3
.eh_frame:0000000000006AAB                 db  42h ; B
.eh_frame:0000000000006AAC                 db  0Eh
.eh_frame:0000000000006AAD                 db  20h
.eh_frame:0000000000006AAE                 db  8Dh
.eh_frame:0000000000006AAF                 db    4
.eh_frame:0000000000006AB0                 db  42h ; B
.eh_frame:0000000000006AB1                 db  0Eh
.eh_frame:0000000000006AB2                 db  28h ; (
.eh_frame:0000000000006AB3                 db  8Ch
.eh_frame:0000000000006AB4                 db    5
.eh_frame:0000000000006AB5                 db  41h ; A
.eh_frame:0000000000006AB6                 db  0Eh
.eh_frame:0000000000006AB7                 db  30h ; 0
.eh_frame:0000000000006AB8                 db  86h
.eh_frame:0000000000006AB9                 db    6
.eh_frame:0000000000006ABA                 db  41h ; A
.eh_frame:0000000000006ABB                 db  0Eh
.eh_frame:0000000000006ABC                 db  38h ; 8
.eh_frame:0000000000006ABD                 db  83h
.eh_frame:0000000000006ABE                 db    7
.eh_frame:0000000000006ABF                 db  44h ; D
.eh_frame:0000000000006AC0                 db  0Eh
.eh_frame:0000000000006AC1                 db  50h ; P
.eh_frame:0000000000006AC2                 db    3
.eh_frame:0000000000006AC3                 db  17h
.eh_frame:0000000000006AC4                 db    1
.eh_frame:0000000000006AC5                 db  0Ah
.eh_frame:0000000000006AC6                 db  0Eh
.eh_frame:0000000000006AC7                 db  38h ; 8
.eh_frame:0000000000006AC8                 db  41h ; A
.eh_frame:0000000000006AC9                 db  0Eh
.eh_frame:0000000000006ACA                 db  30h ; 0
.eh_frame:0000000000006ACB                 db  41h ; A
.eh_frame:0000000000006ACC                 db  0Eh
.eh_frame:0000000000006ACD                 db  28h ; (
.eh_frame:0000000000006ACE                 db  42h ; B
.eh_frame:0000000000006ACF                 db  0Eh
.eh_frame:0000000000006AD0                 db  20h
.eh_frame:0000000000006AD1                 db  42h ; B
.eh_frame:0000000000006AD2                 db  0Eh
.eh_frame:0000000000006AD3                 db  18h
.eh_frame:0000000000006AD4                 db  42h ; B
.eh_frame:0000000000006AD5                 db  0Eh
.eh_frame:0000000000006AD6                 db  10h
.eh_frame:0000000000006AD7                 db  42h ; B
.eh_frame:0000000000006AD8                 db  0Eh
.eh_frame:0000000000006AD9                 db    8
.eh_frame:0000000000006ADA                 db  41h ; A
.eh_frame:0000000000006ADB                 db  0Bh
.eh_frame:0000000000006ADC                 db    3
.eh_frame:0000000000006ADD                 db 0C6h
.eh_frame:0000000000006ADE                 db    1
.eh_frame:0000000000006ADF                 db  0Ah
.eh_frame:0000000000006AE0                 db  0Eh
.eh_frame:0000000000006AE1                 db  38h ; 8
.eh_frame:0000000000006AE2                 db  41h ; A
.eh_frame:0000000000006AE3                 db  0Eh
.eh_frame:0000000000006AE4                 db  30h ; 0
.eh_frame:0000000000006AE5                 db  41h ; A
.eh_frame:0000000000006AE6                 db  0Eh
.eh_frame:0000000000006AE7                 db  28h ; (
.eh_frame:0000000000006AE8                 db  42h ; B
.eh_frame:0000000000006AE9                 db  0Eh
.eh_frame:0000000000006AEA                 db  20h
.eh_frame:0000000000006AEB                 db  42h ; B
.eh_frame:0000000000006AEC                 db  0Eh
.eh_frame:0000000000006AED                 db  18h
.eh_frame:0000000000006AEE                 db  42h ; B
.eh_frame:0000000000006AEF                 db  0Eh
.eh_frame:0000000000006AF0                 db  10h
.eh_frame:0000000000006AF1                 db  42h ; B
.eh_frame:0000000000006AF2                 db  0Eh
.eh_frame:0000000000006AF3                 db    8
.eh_frame:0000000000006AF4                 db  45h ; E
.eh_frame:0000000000006AF5                 db  0Bh
.eh_frame:0000000000006AF6                 db    0
.eh_frame:0000000000006AF7                 db    0
.eh_frame:0000000000006AF8                 db  20h
.eh_frame:0000000000006AF9                 db    0
.eh_frame:0000000000006AFA                 db    0
.eh_frame:0000000000006AFB                 db    0
.eh_frame:0000000000006AFC                 db 0B4h
.eh_frame:0000000000006AFD                 db    1
.eh_frame:0000000000006AFE                 db    0
.eh_frame:0000000000006AFF                 db    0
.eh_frame:0000000000006B00                 db 0B0h
.eh_frame:0000000000006B01                 db 0BBh
.eh_frame:0000000000006B02                 db 0FFh
.eh_frame:0000000000006B03                 db 0FFh
.eh_frame:0000000000006B04                 db  3Ch ; <
.eh_frame:0000000000006B05                 db    1
.eh_frame:0000000000006B06                 db    0
.eh_frame:0000000000006B07                 db    0
.eh_frame:0000000000006B08                 db    0
.eh_frame:0000000000006B09                 db  44h ; D
.eh_frame:0000000000006B0A                 db  0Eh
.eh_frame:0000000000006B0B                 db  10h
.eh_frame:0000000000006B0C                 db    2
.eh_frame:0000000000006B0D                 db  7Dh ; }
.eh_frame:0000000000006B0E                 db  0Ah
.eh_frame:0000000000006B0F                 db  0Eh
.eh_frame:0000000000006B10                 db    8
.eh_frame:0000000000006B11                 db  41h ; A
.eh_frame:0000000000006B12                 db  0Bh
.eh_frame:0000000000006B13                 db  7Fh ; 
.eh_frame:0000000000006B14                 db  0Ah
.eh_frame:0000000000006B15                 db  0Eh
.eh_frame:0000000000006B16                 db    8
.eh_frame:0000000000006B17                 db  41h ; A
.eh_frame:0000000000006B18                 db  0Bh
.eh_frame:0000000000006B19                 db    0
.eh_frame:0000000000006B1A                 db    0
.eh_frame:0000000000006B1B                 db    0
.eh_frame:0000000000006B1C                 db  10h
.eh_frame:0000000000006B1D                 db    0
.eh_frame:0000000000006B1E                 db    0
.eh_frame:0000000000006B1F                 db    0
.eh_frame:0000000000006B20                 db 0D8h
.eh_frame:0000000000006B21                 db    1
.eh_frame:0000000000006B22                 db    0
.eh_frame:0000000000006B23                 db    0
.eh_frame:0000000000006B24                 db 0CCh
.eh_frame:0000000000006B25                 db 0BCh
.eh_frame:0000000000006B26                 db 0FFh
.eh_frame:0000000000006B27                 db 0FFh
.eh_frame:0000000000006B28                 db 0A8h
.eh_frame:0000000000006B29                 db    0
.eh_frame:0000000000006B2A                 db    0
.eh_frame:0000000000006B2B                 db    0
.eh_frame:0000000000006B2C                 db    0
.eh_frame:0000000000006B2D                 db    0
.eh_frame:0000000000006B2E                 db    0
.eh_frame:0000000000006B2F                 db    0
.eh_frame:0000000000006B30                 db  10h
.eh_frame:0000000000006B31                 db    0
.eh_frame:0000000000006B32                 db    0
.eh_frame:0000000000006B33                 db    0
.eh_frame:0000000000006B34                 db 0ECh
.eh_frame:0000000000006B35                 db    1
.eh_frame:0000000000006B36                 db    0
.eh_frame:0000000000006B37                 db    0
.eh_frame:0000000000006B38                 db  68h ; h
.eh_frame:0000000000006B39                 db 0BDh
.eh_frame:0000000000006B3A                 db 0FFh
.eh_frame:0000000000006B3B                 db 0FFh
.eh_frame:0000000000006B3C                 db  1Dh
.eh_frame:0000000000006B3D                 db    0
.eh_frame:0000000000006B3E                 db    0
.eh_frame:0000000000006B3F                 db    0
.eh_frame:0000000000006B40                 db    0
.eh_frame:0000000000006B41                 db    0
.eh_frame:0000000000006B42                 db    0
.eh_frame:0000000000006B43                 db    0
.eh_frame:0000000000006B44                 db  40h ; @
.eh_frame:0000000000006B45                 db    0
.eh_frame:0000000000006B46                 db    0
.eh_frame:0000000000006B47                 db    0
.eh_frame:0000000000006B48                 db    0
.eh_frame:0000000000006B49                 db    2
.eh_frame:0000000000006B4A                 db    0
.eh_frame:0000000000006B4B                 db    0
.eh_frame:0000000000006B4C                 db  74h ; t
.eh_frame:0000000000006B4D                 db 0BDh
.eh_frame:0000000000006B4E                 db 0FFh
.eh_frame:0000000000006B4F                 db 0FFh
.eh_frame:0000000000006B50                 db    1
.eh_frame:0000000000006B51                 db    2
.eh_frame:0000000000006B52                 db    0
.eh_frame:0000000000006B53                 db    0
.eh_frame:0000000000006B54                 db    0
.eh_frame:0000000000006B55                 db  42h ; B
.eh_frame:0000000000006B56                 db  0Eh
.eh_frame:0000000000006B57                 db  10h
.eh_frame:0000000000006B58                 db  8Ch
.eh_frame:0000000000006B59                 db    2
.eh_frame:0000000000006B5A                 db  41h ; A
.eh_frame:0000000000006B5B                 db  0Eh
.eh_frame:0000000000006B5C                 db  18h
.eh_frame:0000000000006B5D                 db  86h
.eh_frame:0000000000006B5E                 db    3
.eh_frame:0000000000006B5F                 db  41h ; A
.eh_frame:0000000000006B60                 db  0Eh
.eh_frame:0000000000006B61                 db  20h
.eh_frame:0000000000006B62                 db  83h
.eh_frame:0000000000006B63                 db    4
.eh_frame:0000000000006B64                 db  44h ; D
.eh_frame:0000000000006B65                 db  0Eh
.eh_frame:0000000000006B66                 db  30h ; 0
.eh_frame:0000000000006B67                 db    3
.eh_frame:0000000000006B68                 db  2Ah ; *
.eh_frame:0000000000006B69                 db    1
.eh_frame:0000000000006B6A                 db  0Ah
.eh_frame:0000000000006B6B                 db  0Eh
.eh_frame:0000000000006B6C                 db  20h
.eh_frame:0000000000006B6D                 db  41h ; A
.eh_frame:0000000000006B6E                 db  0Eh
.eh_frame:0000000000006B6F                 db  18h
.eh_frame:0000000000006B70                 db  41h ; A
.eh_frame:0000000000006B71                 db  0Eh
.eh_frame:0000000000006B72                 db  10h
.eh_frame:0000000000006B73                 db  42h ; B
.eh_frame:0000000000006B74                 db  0Eh
.eh_frame:0000000000006B75                 db    8
.eh_frame:0000000000006B76                 db  4Ah ; J
.eh_frame:0000000000006B77                 db  0Bh
.eh_frame:0000000000006B78                 db  44h ; D
.eh_frame:0000000000006B79                 db  0Ah
.eh_frame:0000000000006B7A                 db  0Eh
.eh_frame:0000000000006B7B                 db  20h
.eh_frame:0000000000006B7C                 db  43h ; C
.eh_frame:0000000000006B7D                 db  0Eh
.eh_frame:0000000000006B7E                 db  18h
.eh_frame:0000000000006B7F                 db  41h ; A
.eh_frame:0000000000006B80                 db  0Eh
.eh_frame:0000000000006B81                 db  10h
.eh_frame:0000000000006B82                 db  42h ; B
.eh_frame:0000000000006B83                 db  0Eh
.eh_frame:0000000000006B84                 db    8
.eh_frame:0000000000006B85                 db  46h ; F
.eh_frame:0000000000006B86                 db  0Bh
.eh_frame:0000000000006B87                 db    0
.eh_frame:0000000000006B88                 db  18h
.eh_frame:0000000000006B89                 db    0
.eh_frame:0000000000006B8A                 db    0
.eh_frame:0000000000006B8B                 db    0
.eh_frame:0000000000006B8C                 db  44h ; D
.eh_frame:0000000000006B8D                 db    2
.eh_frame:0000000000006B8E                 db    0
.eh_frame:0000000000006B8F                 db    0
.eh_frame:0000000000006B90                 db  40h ; @
.eh_frame:0000000000006B91                 db 0BFh
.eh_frame:0000000000006B92                 db 0FFh
.eh_frame:0000000000006B93                 db 0FFh
.eh_frame:0000000000006B94                 db  43h ; C
.eh_frame:0000000000006B95                 db    0
.eh_frame:0000000000006B96                 db    0
.eh_frame:0000000000006B97                 db    0
.eh_frame:0000000000006B98                 db    0
.eh_frame:0000000000006B99                 db  54h ; T
.eh_frame:0000000000006B9A                 db  0Eh
.eh_frame:0000000000006B9B                 db  10h
.eh_frame:0000000000006B9C                 db  54h ; T
.eh_frame:0000000000006B9D                 db  0Ah
.eh_frame:0000000000006B9E                 db  0Eh
.eh_frame:0000000000006B9F                 db    8
.eh_frame:0000000000006BA0                 db  41h ; A
.eh_frame:0000000000006BA1                 db  0Bh
.eh_frame:0000000000006BA2                 db    0
.eh_frame:0000000000006BA3                 db    0
.eh_frame:0000000000006BA4                 db  18h
.eh_frame:0000000000006BA5                 db    0
.eh_frame:0000000000006BA6                 db    0
.eh_frame:0000000000006BA7                 db    0
.eh_frame:0000000000006BA8                 db  60h ; `
.eh_frame:0000000000006BA9                 db    2
.eh_frame:0000000000006BAA                 db    0
.eh_frame:0000000000006BAB                 db    0
.eh_frame:0000000000006BAC                 db  74h ; t
.eh_frame:0000000000006BAD                 db 0BFh
.eh_frame:0000000000006BAE                 db 0FFh
.eh_frame:0000000000006BAF                 db 0FFh
.eh_frame:0000000000006BB0                 db  4Ch ; L
.eh_frame:0000000000006BB1                 db    0
.eh_frame:0000000000006BB2                 db    0
.eh_frame:0000000000006BB3                 db    0
.eh_frame:0000000000006BB4                 db    0
.eh_frame:0000000000006BB5                 db  41h ; A
.eh_frame:0000000000006BB6                 db  0Eh
.eh_frame:0000000000006BB7                 db  10h
.eh_frame:0000000000006BB8                 db  83h
.eh_frame:0000000000006BB9                 db    2
.eh_frame:0000000000006BBA                 db    2
.eh_frame:0000000000006BBB                 db  46h ; F
.eh_frame:0000000000006BBC                 db  0Eh
.eh_frame:0000000000006BBD                 db    8
.eh_frame:0000000000006BBE                 db    0
.eh_frame:0000000000006BBF                 db    0
.eh_frame:0000000000006BC0                 db  10h
.eh_frame:0000000000006BC1                 db    0
.eh_frame:0000000000006BC2                 db    0
.eh_frame:0000000000006BC3                 db    0
.eh_frame:0000000000006BC4                 db  7Ch ; |
.eh_frame:0000000000006BC5                 db    2
.eh_frame:0000000000006BC6                 db    0
.eh_frame:0000000000006BC7                 db    0
.eh_frame:0000000000006BC8                 db 0A8h
.eh_frame:0000000000006BC9                 db 0BFh
.eh_frame:0000000000006BCA                 db 0FFh
.eh_frame:0000000000006BCB                 db 0FFh
.eh_frame:0000000000006BCC                 db    8
.eh_frame:0000000000006BCD                 db    0
.eh_frame:0000000000006BCE                 db    0
.eh_frame:0000000000006BCF                 db    0
.eh_frame:0000000000006BD0                 db    0
.eh_frame:0000000000006BD1                 db    0
.eh_frame:0000000000006BD2                 db    0
.eh_frame:0000000000006BD3                 db    0
.eh_frame:0000000000006BD4                 db  10h
.eh_frame:0000000000006BD5                 db    0
.eh_frame:0000000000006BD6                 db    0
.eh_frame:0000000000006BD7                 db    0
.eh_frame:0000000000006BD8                 db  90h
.eh_frame:0000000000006BD9                 db    2
.eh_frame:0000000000006BDA                 db    0
.eh_frame:0000000000006BDB                 db    0
.eh_frame:0000000000006BDC                 db 0A4h
.eh_frame:0000000000006BDD                 db 0BFh
.eh_frame:0000000000006BDE                 db 0FFh
.eh_frame:0000000000006BDF                 db 0FFh
.eh_frame:0000000000006BE0                 db    8
.eh_frame:0000000000006BE1                 db    0
.eh_frame:0000000000006BE2                 db    0
.eh_frame:0000000000006BE3                 db    0
.eh_frame:0000000000006BE4                 db    0
.eh_frame:0000000000006BE5                 db    0
.eh_frame:0000000000006BE6                 db    0
.eh_frame:0000000000006BE7                 db    0
.eh_frame:0000000000006BE8                 db  2Ch ; ,
.eh_frame:0000000000006BE9                 db    0
.eh_frame:0000000000006BEA                 db    0
.eh_frame:0000000000006BEB                 db    0
.eh_frame:0000000000006BEC                 db 0A4h
.eh_frame:0000000000006BED                 db    2
.eh_frame:0000000000006BEE                 db    0
.eh_frame:0000000000006BEF                 db    0
.eh_frame:0000000000006BF0                 db 0A0h
.eh_frame:0000000000006BF1                 db 0BFh
.eh_frame:0000000000006BF2                 db 0FFh
.eh_frame:0000000000006BF3                 db 0FFh
.eh_frame:0000000000006BF4                 db 0A4h
.eh_frame:0000000000006BF5                 db    0
.eh_frame:0000000000006BF6                 db    0
.eh_frame:0000000000006BF7                 db    0
.eh_frame:0000000000006BF8                 db    0
.eh_frame:0000000000006BF9                 db  41h ; A
.eh_frame:0000000000006BFA                 db  0Eh
.eh_frame:0000000000006BFB                 db  10h
.eh_frame:0000000000006BFC                 db  86h
.eh_frame:0000000000006BFD                 db    2
.eh_frame:0000000000006BFE                 db  41h ; A
.eh_frame:0000000000006BFF                 db  0Eh
.eh_frame:0000000000006C00                 db  18h
.eh_frame:0000000000006C01                 db  83h
.eh_frame:0000000000006C02                 db    3
.eh_frame:0000000000006C03                 db  44h ; D
.eh_frame:0000000000006C04                 db  0Eh
.eh_frame:0000000000006C05                 db  20h
.eh_frame:0000000000006C06                 db  7Ah ; z
.eh_frame:0000000000006C07                 db  0Ah
.eh_frame:0000000000006C08                 db  0Eh
.eh_frame:0000000000006C09                 db  18h
.eh_frame:0000000000006C0A                 db  41h ; A
.eh_frame:0000000000006C0B                 db  0Eh
.eh_frame:0000000000006C0C                 db  10h
.eh_frame:0000000000006C0D                 db  41h ; A
.eh_frame:0000000000006C0E                 db  0Eh
.eh_frame:0000000000006C0F                 db    8
.eh_frame:0000000000006C10                 db  41h ; A
.eh_frame:0000000000006C11                 db  0Bh
.eh_frame:0000000000006C12                 db    0
.eh_frame:0000000000006C13                 db    0
.eh_frame:0000000000006C14                 db    0
.eh_frame:0000000000006C15                 db    0
.eh_frame:0000000000006C16                 db    0
.eh_frame:0000000000006C17                 db    0
.eh_frame:0000000000006C18                 db  10h
.eh_frame:0000000000006C19                 db    0
.eh_frame:0000000000006C1A                 db    0
.eh_frame:0000000000006C1B                 db    0
.eh_frame:0000000000006C1C                 db 0D4h
.eh_frame:0000000000006C1D                 db    2
.eh_frame:0000000000006C1E                 db    0
.eh_frame:0000000000006C1F                 db    0
.eh_frame:0000000000006C20                 db  20h
.eh_frame:0000000000006C21                 db 0C0h
.eh_frame:0000000000006C22                 db 0FFh
.eh_frame:0000000000006C23                 db 0FFh
.eh_frame:0000000000006C24                 db    5
.eh_frame:0000000000006C25                 db    0
.eh_frame:0000000000006C26                 db    0
.eh_frame:0000000000006C27                 db    0
.eh_frame:0000000000006C28                 db    0
.eh_frame:0000000000006C29                 db    0
.eh_frame:0000000000006C2A                 db    0
.eh_frame:0000000000006C2B                 db    0
.eh_frame:0000000000006C2C                 db  18h
.eh_frame:0000000000006C2D                 db    0
.eh_frame:0000000000006C2E                 db    0
.eh_frame:0000000000006C2F                 db    0
.eh_frame:0000000000006C30                 db 0E8h
.eh_frame:0000000000006C31                 db    2
.eh_frame:0000000000006C32                 db    0
.eh_frame:0000000000006C33                 db    0
.eh_frame:0000000000006C34                 db  1Ch
.eh_frame:0000000000006C35                 db 0C0h
.eh_frame:0000000000006C36                 db 0FFh
.eh_frame:0000000000006C37                 db 0FFh
.eh_frame:0000000000006C38                 db  22h ; "
.eh_frame:0000000000006C39                 db    0
.eh_frame:0000000000006C3A                 db    0
.eh_frame:0000000000006C3B                 db    0
.eh_frame:0000000000006C3C                 db    0
.eh_frame:0000000000006C3D                 db  46h ; F
.eh_frame:0000000000006C3E                 db  0Eh
.eh_frame:0000000000006C3F                 db  10h
.eh_frame:0000000000006C40                 db  83h
.eh_frame:0000000000006C41                 db    2
.eh_frame:0000000000006C42                 db  4Eh ; N
.eh_frame:0000000000006C43                 db 0C3h
.eh_frame:0000000000006C44                 db  0Eh
.eh_frame:0000000000006C45                 db    8
.eh_frame:0000000000006C46                 db    0
.eh_frame:0000000000006C47                 db    0
.eh_frame:0000000000006C48                 db  1Ch
.eh_frame:0000000000006C49                 db    0
.eh_frame:0000000000006C4A                 db    0
.eh_frame:0000000000006C4B                 db    0
.eh_frame:0000000000006C4C                 db    4
.eh_frame:0000000000006C4D                 db    3
.eh_frame:0000000000006C4E                 db    0
.eh_frame:0000000000006C4F                 db    0
.eh_frame:0000000000006C50                 db  30h ; 0
.eh_frame:0000000000006C51                 db 0C0h
.eh_frame:0000000000006C52                 db 0FFh
.eh_frame:0000000000006C53                 db 0FFh
.eh_frame:0000000000006C54                 db  9Fh
.eh_frame:0000000000006C55                 db    0
.eh_frame:0000000000006C56                 db    0
.eh_frame:0000000000006C57                 db    0
.eh_frame:0000000000006C58                 db    0
.eh_frame:0000000000006C59                 db  44h ; D
.eh_frame:0000000000006C5A                 db  0Eh
.eh_frame:0000000000006C5B                 db  10h
.eh_frame:0000000000006C5C                 db  83h
.eh_frame:0000000000006C5D                 db    2
.eh_frame:0000000000006C5E                 db    2
.eh_frame:0000000000006C5F                 db  78h ; x
.eh_frame:0000000000006C60                 db  0Ah
.eh_frame:0000000000006C61                 db  0Eh
.eh_frame:0000000000006C62                 db    8
.eh_frame:0000000000006C63                 db  41h ; A
.eh_frame:0000000000006C64                 db  0Bh
.eh_frame:0000000000006C65                 db    0
.eh_frame:0000000000006C66                 db    0
.eh_frame:0000000000006C67                 db    0
.eh_frame:0000000000006C68                 db  40h ; @
.eh_frame:0000000000006C69                 db    0
.eh_frame:0000000000006C6A                 db    0
.eh_frame:0000000000006C6B                 db    0
.eh_frame:0000000000006C6C                 db  24h ; $
.eh_frame:0000000000006C6D                 db    3
.eh_frame:0000000000006C6E                 db    0
.eh_frame:0000000000006C6F                 db    0
.eh_frame:0000000000006C70                 db 0B0h
.eh_frame:0000000000006C71                 db 0C0h
.eh_frame:0000000000006C72                 db 0FFh
.eh_frame:0000000000006C73                 db 0FFh
.eh_frame:0000000000006C74                 db 0E7h
.eh_frame:0000000000006C75                 db    0
.eh_frame:0000000000006C76                 db    0
.eh_frame:0000000000006C77                 db    0
.eh_frame:0000000000006C78                 db    0
.eh_frame:0000000000006C79                 db  41h ; A
.eh_frame:0000000000006C7A                 db  0Eh
.eh_frame:0000000000006C7B                 db  10h
.eh_frame:0000000000006C7C                 db  86h
.eh_frame:0000000000006C7D                 db    2
.eh_frame:0000000000006C7E                 db  41h ; A
.eh_frame:0000000000006C7F                 db  0Eh
.eh_frame:0000000000006C80                 db  18h
.eh_frame:0000000000006C81                 db  83h
.eh_frame:0000000000006C82                 db    3
.eh_frame:0000000000006C83                 db  49h ; I
.eh_frame:0000000000006C84                 db  0Eh
.eh_frame:0000000000006C85                 db  20h
.eh_frame:0000000000006C86                 db  6Eh ; n
.eh_frame:0000000000006C87                 db  0Ah
.eh_frame:0000000000006C88                 db  0Eh
.eh_frame:0000000000006C89                 db  18h
.eh_frame:0000000000006C8A                 db  41h ; A
.eh_frame:0000000000006C8B                 db  0Eh
.eh_frame:0000000000006C8C                 db  10h
.eh_frame:0000000000006C8D                 db  41h ; A
.eh_frame:0000000000006C8E                 db  0Eh
.eh_frame:0000000000006C8F                 db    8
.eh_frame:0000000000006C90                 db  45h ; E
.eh_frame:0000000000006C91                 db  0Bh
.eh_frame:0000000000006C92                 db    2
.eh_frame:0000000000006C93                 db  4Ah ; J
.eh_frame:0000000000006C94                 db  0Ah
.eh_frame:0000000000006C95                 db  0Eh
.eh_frame:0000000000006C96                 db  18h
.eh_frame:0000000000006C97                 db  41h ; A
.eh_frame:0000000000006C98                 db  0Eh
.eh_frame:0000000000006C99                 db  10h
.eh_frame:0000000000006C9A                 db  41h ; A
.eh_frame:0000000000006C9B                 db  0Eh
.eh_frame:0000000000006C9C                 db    8
.eh_frame:0000000000006C9D                 db  44h ; D
.eh_frame:0000000000006C9E                 db  0Bh
.eh_frame:0000000000006C9F                 db    2
.eh_frame:0000000000006CA0                 db  54h ; T
.eh_frame:0000000000006CA1                 db  0Eh
.eh_frame:0000000000006CA2                 db  18h
.eh_frame:0000000000006CA3                 db  41h ; A
.eh_frame:0000000000006CA4                 db  0Eh
.eh_frame:0000000000006CA5                 db  10h
.eh_frame:0000000000006CA6                 db  41h ; A
.eh_frame:0000000000006CA7                 db  0Eh
.eh_frame:0000000000006CA8                 db    8
.eh_frame:0000000000006CA9                 db    0
.eh_frame:0000000000006CAA                 db    0
.eh_frame:0000000000006CAB                 db    0
.eh_frame:0000000000006CAC                 db  74h ; t
.eh_frame:0000000000006CAD                 db    0
.eh_frame:0000000000006CAE                 db    0
.eh_frame:0000000000006CAF                 db    0
.eh_frame:0000000000006CB0                 db  68h ; h
.eh_frame:0000000000006CB1                 db    3
.eh_frame:0000000000006CB2                 db    0
.eh_frame:0000000000006CB3                 db    0
.eh_frame:0000000000006CB4                 db  5Ch ; \
.eh_frame:0000000000006CB5                 db 0C1h
.eh_frame:0000000000006CB6                 db 0FFh
.eh_frame:0000000000006CB7                 db 0FFh
.eh_frame:0000000000006CB8                 db  34h ; 4
.eh_frame:0000000000006CB9                 db  12h
.eh_frame:0000000000006CBA                 db    0
.eh_frame:0000000000006CBB                 db    0
.eh_frame:0000000000006CBC                 db    0
.eh_frame:0000000000006CBD                 db  42h ; B
.eh_frame:0000000000006CBE                 db  0Eh
.eh_frame:0000000000006CBF                 db  10h
.eh_frame:0000000000006CC0                 db  8Fh
.eh_frame:0000000000006CC1                 db    2
.eh_frame:0000000000006CC2                 db  42h ; B
.eh_frame:0000000000006CC3                 db  0Eh
.eh_frame:0000000000006CC4                 db  18h
.eh_frame:0000000000006CC5                 db  8Eh
.eh_frame:0000000000006CC6                 db    3
.eh_frame:0000000000006CC7                 db  45h ; E
.eh_frame:0000000000006CC8                 db  0Eh
.eh_frame:0000000000006CC9                 db  20h
.eh_frame:0000000000006CCA                 db  8Dh
.eh_frame:0000000000006CCB                 db    4
.eh_frame:0000000000006CCC                 db  42h ; B
.eh_frame:0000000000006CCD                 db  0Eh
.eh_frame:0000000000006CCE                 db  28h ; (
.eh_frame:0000000000006CCF                 db  8Ch
.eh_frame:0000000000006CD0                 db    5
.eh_frame:0000000000006CD1                 db  44h ; D
.eh_frame:0000000000006CD2                 db  0Eh
.eh_frame:0000000000006CD3                 db  30h ; 0
.eh_frame:0000000000006CD4                 db  86h
.eh_frame:0000000000006CD5                 db    6
.eh_frame:0000000000006CD6                 db  41h ; A
.eh_frame:0000000000006CD7                 db  0Eh
.eh_frame:0000000000006CD8                 db  38h ; 8
.eh_frame:0000000000006CD9                 db  83h
.eh_frame:0000000000006CDA                 db    7
.eh_frame:0000000000006CDB                 db  53h ; S
.eh_frame:0000000000006CDC                 db  0Eh
.eh_frame:0000000000006CDD                 db 0F0h
.eh_frame:0000000000006CDE                 db    1
.eh_frame:0000000000006CDF                 db    3
.eh_frame:0000000000006CE0                 db  81h
.eh_frame:0000000000006CE1                 db  0Bh
.eh_frame:0000000000006CE2                 db  0Eh
.eh_frame:0000000000006CE3                 db 0F8h
.eh_frame:0000000000006CE4                 db    1
.eh_frame:0000000000006CE5                 db  4Ah ; J
.eh_frame:0000000000006CE6                 db  0Eh
.eh_frame:0000000000006CE7                 db  80h
.eh_frame:0000000000006CE8                 db    2
.eh_frame:0000000000006CE9                 db  44h ; D
.eh_frame:0000000000006CEA                 db  0Eh
.eh_frame:0000000000006CEB                 db  88h
.eh_frame:0000000000006CEC                 db    2
.eh_frame:0000000000006CED                 db  45h ; E
.eh_frame:0000000000006CEE                 db  0Eh
.eh_frame:0000000000006CEF                 db  90h
.eh_frame:0000000000006CF0                 db    2
.eh_frame:0000000000006CF1                 db  5Fh ; _
.eh_frame:0000000000006CF2                 db  0Eh
.eh_frame:0000000000006CF3                 db 0F0h
.eh_frame:0000000000006CF4                 db    1
.eh_frame:0000000000006CF5                 db  64h ; d
.eh_frame:0000000000006CF6                 db  0Ah
.eh_frame:0000000000006CF7                 db  0Eh
.eh_frame:0000000000006CF8                 db  38h ; 8
.eh_frame:0000000000006CF9                 db  41h ; A
.eh_frame:0000000000006CFA                 db  0Eh
.eh_frame:0000000000006CFB                 db  30h ; 0
.eh_frame:0000000000006CFC                 db  41h ; A
.eh_frame:0000000000006CFD                 db  0Eh
.eh_frame:0000000000006CFE                 db  28h ; (
.eh_frame:0000000000006CFF                 db  42h ; B
.eh_frame:0000000000006D00                 db  0Eh
.eh_frame:0000000000006D01                 db  20h
.eh_frame:0000000000006D02                 db  42h ; B
.eh_frame:0000000000006D03                 db  0Eh
.eh_frame:0000000000006D04                 db  18h
.eh_frame:0000000000006D05                 db  42h ; B
.eh_frame:0000000000006D06                 db  0Eh
.eh_frame:0000000000006D07                 db  10h
.eh_frame:0000000000006D08                 db  42h ; B
.eh_frame:0000000000006D09                 db  0Eh
.eh_frame:0000000000006D0A                 db    8
.eh_frame:0000000000006D0B                 db  44h ; D
.eh_frame:0000000000006D0C                 db  0Bh
.eh_frame:0000000000006D0D                 db    3
.eh_frame:0000000000006D0E                 db  99h
.eh_frame:0000000000006D0F                 db    5
.eh_frame:0000000000006D10                 db  0Eh
.eh_frame:0000000000006D11                 db 0F8h
.eh_frame:0000000000006D12                 db    1
.eh_frame:0000000000006D13                 db  4Dh ; M
.eh_frame:0000000000006D14                 db  0Eh
.eh_frame:0000000000006D15                 db  80h
.eh_frame:0000000000006D16                 db    2
.eh_frame:0000000000006D17                 db  44h ; D
.eh_frame:0000000000006D18                 db  0Eh
.eh_frame:0000000000006D19                 db  88h
.eh_frame:0000000000006D1A                 db    2
.eh_frame:0000000000006D1B                 db  47h ; G
.eh_frame:0000000000006D1C                 db  0Eh
.eh_frame:0000000000006D1D                 db  90h
.eh_frame:0000000000006D1E                 db    2
.eh_frame:0000000000006D1F                 db  5Bh ; [
.eh_frame:0000000000006D20                 db  0Eh
.eh_frame:0000000000006D21                 db 0F0h
.eh_frame:0000000000006D22                 db    1
.eh_frame:0000000000006D23                 db    0
.eh_frame:0000000000006D24                 db  68h ; h
.eh_frame:0000000000006D25                 db    0
.eh_frame:0000000000006D26                 db    0
.eh_frame:0000000000006D27                 db    0
.eh_frame:0000000000006D28                 db 0E0h
.eh_frame:0000000000006D29                 db    3
.eh_frame:0000000000006D2A                 db    0
.eh_frame:0000000000006D2B                 db    0
.eh_frame:0000000000006D2C                 db  24h ; $
.eh_frame:0000000000006D2D                 db 0D3h
.eh_frame:0000000000006D2E                 db 0FFh
.eh_frame:0000000000006D2F                 db 0FFh
.eh_frame:0000000000006D30                 db 0ABh
.eh_frame:0000000000006D31                 db    1
.eh_frame:0000000000006D32                 db    0
.eh_frame:0000000000006D33                 db    0
.eh_frame:0000000000006D34                 db    0
.eh_frame:0000000000006D35                 db  42h ; B
.eh_frame:0000000000006D36                 db  0Eh
.eh_frame:0000000000006D37                 db  10h
.eh_frame:0000000000006D38                 db  8Fh
.eh_frame:0000000000006D39                 db    2
.eh_frame:0000000000006D3A                 db  42h ; B
.eh_frame:0000000000006D3B                 db  0Eh
.eh_frame:0000000000006D3C                 db  18h
.eh_frame:0000000000006D3D                 db  8Eh
.eh_frame:0000000000006D3E                 db    3
.eh_frame:0000000000006D3F                 db  45h ; E
.eh_frame:0000000000006D40                 db  0Eh
.eh_frame:0000000000006D41                 db  20h
.eh_frame:0000000000006D42                 db  8Dh
.eh_frame:0000000000006D43                 db    4
.eh_frame:0000000000006D44                 db  42h ; B
.eh_frame:0000000000006D45                 db  0Eh
.eh_frame:0000000000006D46                 db  28h ; (
.eh_frame:0000000000006D47                 db  8Ch
.eh_frame:0000000000006D48                 db    5
.eh_frame:0000000000006D49                 db  44h ; D
.eh_frame:0000000000006D4A                 db  0Eh
.eh_frame:0000000000006D4B                 db  30h ; 0
.eh_frame:0000000000006D4C                 db  86h
.eh_frame:0000000000006D4D                 db    6
.eh_frame:0000000000006D4E                 db  41h ; A
.eh_frame:0000000000006D4F                 db  0Eh
.eh_frame:0000000000006D50                 db  38h ; 8
.eh_frame:0000000000006D51                 db  83h
.eh_frame:0000000000006D52                 db    7
.eh_frame:0000000000006D53                 db  47h ; G
.eh_frame:0000000000006D54                 db  0Eh
.eh_frame:0000000000006D55                 db  60h ; `
.eh_frame:0000000000006D56                 db    2
.eh_frame:0000000000006D57                 db  99h
.eh_frame:0000000000006D58                 db  0Eh
.eh_frame:0000000000006D59                 db  68h ; h
.eh_frame:0000000000006D5A                 db  5Fh ; _
.eh_frame:0000000000006D5B                 db  0Eh
.eh_frame:0000000000006D5C                 db  70h ; p
.eh_frame:0000000000006D5D                 db  46h ; F
.eh_frame:0000000000006D5E                 db  0Eh
.eh_frame:0000000000006D5F                 db  78h ; x
.eh_frame:0000000000006D60                 db  42h ; B
.eh_frame:0000000000006D61                 db  0Eh
.eh_frame:0000000000006D62                 db  80h
.eh_frame:0000000000006D63                 db    1
.eh_frame:0000000000006D64                 db  59h ; Y
.eh_frame:0000000000006D65                 db  0Eh
.eh_frame:0000000000006D66                 db  60h ; `
.eh_frame:0000000000006D67                 db    2
.eh_frame:0000000000006D68                 db  40h ; @
.eh_frame:0000000000006D69                 db  0Eh
.eh_frame:0000000000006D6A                 db  68h ; h
.eh_frame:0000000000006D6B                 db  4Bh ; K
.eh_frame:0000000000006D6C                 db  0Eh
.eh_frame:0000000000006D6D                 db  70h ; p
.eh_frame:0000000000006D6E                 db  43h ; C
.eh_frame:0000000000006D6F                 db  0Eh
.eh_frame:0000000000006D70                 db  78h ; x
.eh_frame:0000000000006D71                 db  45h ; E
.eh_frame:0000000000006D72                 db  0Eh
.eh_frame:0000000000006D73                 db  80h
.eh_frame:0000000000006D74                 db    1
.eh_frame:0000000000006D75                 db  5Eh ; ^
.eh_frame:0000000000006D76                 db  0Eh
.eh_frame:0000000000006D77                 db  60h ; `
.eh_frame:0000000000006D78                 db  4Ch ; L
.eh_frame:0000000000006D79                 db  0Ah
.eh_frame:0000000000006D7A                 db  0Eh
.eh_frame:0000000000006D7B                 db  38h ; 8
.eh_frame:0000000000006D7C                 db  44h ; D
.eh_frame:0000000000006D7D                 db  0Eh
.eh_frame:0000000000006D7E                 db  30h ; 0
.eh_frame:0000000000006D7F                 db  41h ; A
.eh_frame:0000000000006D80                 db  0Eh
.eh_frame:0000000000006D81                 db  28h ; (
.eh_frame:0000000000006D82                 db  42h ; B
.eh_frame:0000000000006D83                 db  0Eh
.eh_frame:0000000000006D84                 db  20h
.eh_frame:0000000000006D85                 db  42h ; B
.eh_frame:0000000000006D86                 db  0Eh
.eh_frame:0000000000006D87                 db  18h
.eh_frame:0000000000006D88                 db  42h ; B
.eh_frame:0000000000006D89                 db  0Eh
.eh_frame:0000000000006D8A                 db  10h
.eh_frame:0000000000006D8B                 db  42h ; B
.eh_frame:0000000000006D8C                 db  0Eh
.eh_frame:0000000000006D8D                 db    8
.eh_frame:0000000000006D8E                 db  46h ; F
.eh_frame:0000000000006D8F                 db  0Bh
.eh_frame:0000000000006D90                 db  28h ; (
.eh_frame:0000000000006D91                 db    0
.eh_frame:0000000000006D92                 db    0
.eh_frame:0000000000006D93                 db    0
.eh_frame:0000000000006D94                 db  4Ch ; L
.eh_frame:0000000000006D95                 db    4
.eh_frame:0000000000006D96                 db    0
.eh_frame:0000000000006D97                 db    0
.eh_frame:0000000000006D98                 db  68h ; h
.eh_frame:0000000000006D99                 db 0D4h
.eh_frame:0000000000006D9A                 db 0FFh
.eh_frame:0000000000006D9B                 db 0FFh
.eh_frame:0000000000006D9C                 db  36h ; 6
.eh_frame:0000000000006D9D                 db    0
.eh_frame:0000000000006D9E                 db    0
.eh_frame:0000000000006D9F                 db    0
.eh_frame:0000000000006DA0                 db    0
.eh_frame:0000000000006DA1                 db  42h ; B
.eh_frame:0000000000006DA2                 db  0Eh
.eh_frame:0000000000006DA3                 db  10h
.eh_frame:0000000000006DA4                 db  8Ch
.eh_frame:0000000000006DA5                 db    2
.eh_frame:0000000000006DA6                 db  41h ; A
.eh_frame:0000000000006DA7                 db  0Eh
.eh_frame:0000000000006DA8                 db  18h
.eh_frame:0000000000006DA9                 db  86h
.eh_frame:0000000000006DAA                 db    3
.eh_frame:0000000000006DAB                 db  41h ; A
.eh_frame:0000000000006DAC                 db  0Eh
.eh_frame:0000000000006DAD                 db  20h
.eh_frame:0000000000006DAE                 db  83h
.eh_frame:0000000000006DAF                 db    4
.eh_frame:0000000000006DB0                 db  6Eh ; n
.eh_frame:0000000000006DB1                 db  0Eh
.eh_frame:0000000000006DB2                 db  18h
.eh_frame:0000000000006DB3                 db  41h ; A
.eh_frame:0000000000006DB4                 db  0Eh
.eh_frame:0000000000006DB5                 db  10h
.eh_frame:0000000000006DB6                 db  42h ; B
.eh_frame:0000000000006DB7                 db  0Eh
.eh_frame:0000000000006DB8                 db    8
.eh_frame:0000000000006DB9                 db    0
.eh_frame:0000000000006DBA                 db    0
.eh_frame:0000000000006DBB                 db    0
.eh_frame:0000000000006DBC                 db  10h
.eh_frame:0000000000006DBD                 db    0
.eh_frame:0000000000006DBE                 db    0
.eh_frame:0000000000006DBF                 db    0
.eh_frame:0000000000006DC0                 db  78h ; x
.eh_frame:0000000000006DC1                 db    4
.eh_frame:0000000000006DC2                 db    0
.eh_frame:0000000000006DC3                 db    0
.eh_frame:0000000000006DC4                 db  7Ch ; |
.eh_frame:0000000000006DC5                 db 0D4h
.eh_frame:0000000000006DC6                 db 0FFh
.eh_frame:0000000000006DC7                 db 0FFh
.eh_frame:0000000000006DC8                 db  11h
.eh_frame:0000000000006DC9                 db    0
.eh_frame:0000000000006DCA                 db    0
.eh_frame:0000000000006DCB                 db    0
.eh_frame:0000000000006DCC                 db    0
.eh_frame:0000000000006DCD                 db    0
.eh_frame:0000000000006DCE                 db    0
.eh_frame:0000000000006DCF                 db    0
.eh_frame:0000000000006DD0                 db  10h
.eh_frame:0000000000006DD1                 db    0
.eh_frame:0000000000006DD2                 db    0
.eh_frame:0000000000006DD3                 db    0
.eh_frame:0000000000006DD4                 db  8Ch
.eh_frame:0000000000006DD5                 db    4
.eh_frame:0000000000006DD6                 db    0
.eh_frame:0000000000006DD7                 db    0
.eh_frame:0000000000006DD8                 db  88h
.eh_frame:0000000000006DD9                 db 0D4h
.eh_frame:0000000000006DDA                 db 0FFh
.eh_frame:0000000000006DDB                 db 0FFh
.eh_frame:0000000000006DDC                 db  11h
.eh_frame:0000000000006DDD                 db    0
.eh_frame:0000000000006DDE                 db    0
.eh_frame:0000000000006DDF                 db    0
.eh_frame:0000000000006DE0                 db    0
.eh_frame:0000000000006DE1                 db    0
.eh_frame:0000000000006DE2                 db    0
.eh_frame:0000000000006DE3                 db    0
.eh_frame:0000000000006DE4                 db  10h
.eh_frame:0000000000006DE5                 db    0
.eh_frame:0000000000006DE6                 db    0
.eh_frame:0000000000006DE7                 db    0
.eh_frame:0000000000006DE8                 db 0A0h
.eh_frame:0000000000006DE9                 db    4
.eh_frame:0000000000006DEA                 db    0
.eh_frame:0000000000006DEB                 db    0
.eh_frame:0000000000006DEC                 db  94h
.eh_frame:0000000000006DED                 db 0D4h
.eh_frame:0000000000006DEE                 db 0FFh
.eh_frame:0000000000006DEF                 db 0FFh
.eh_frame:0000000000006DF0                 db  35h ; 5
.eh_frame:0000000000006DF1                 db    0
.eh_frame:0000000000006DF2                 db    0
.eh_frame:0000000000006DF3                 db    0
.eh_frame:0000000000006DF4                 db    0
.eh_frame:0000000000006DF5                 db    0
.eh_frame:0000000000006DF6                 db    0
.eh_frame:0000000000006DF7                 db    0
.eh_frame:0000000000006DF8                 db  10h
.eh_frame:0000000000006DF9                 db    0
.eh_frame:0000000000006DFA                 db    0
.eh_frame:0000000000006DFB                 db    0
.eh_frame:0000000000006DFC                 db 0B4h
.eh_frame:0000000000006DFD                 db    4
.eh_frame:0000000000006DFE                 db    0
.eh_frame:0000000000006DFF                 db    0
.eh_frame:0000000000006E00                 db 0C0h
.eh_frame:0000000000006E01                 db 0D4h
.eh_frame:0000000000006E02                 db 0FFh
.eh_frame:0000000000006E03                 db 0FFh
.eh_frame:0000000000006E04                 db  15h
.eh_frame:0000000000006E05                 db    0
.eh_frame:0000000000006E06                 db    0
.eh_frame:0000000000006E07                 db    0
.eh_frame:0000000000006E08                 db    0
.eh_frame:0000000000006E09                 db    0
.eh_frame:0000000000006E0A                 db    0
.eh_frame:0000000000006E0B                 db    0
.eh_frame:0000000000006E0C                 db  10h
.eh_frame:0000000000006E0D                 db    0
.eh_frame:0000000000006E0E                 db    0
.eh_frame:0000000000006E0F                 db    0
.eh_frame:0000000000006E10                 db 0C8h
.eh_frame:0000000000006E11                 db    4
.eh_frame:0000000000006E12                 db    0
.eh_frame:0000000000006E13                 db    0
.eh_frame:0000000000006E14                 db 0CCh
.eh_frame:0000000000006E15                 db 0D4h
.eh_frame:0000000000006E16                 db 0FFh
.eh_frame:0000000000006E17                 db 0FFh
.eh_frame:0000000000006E18                 db  30h ; 0
.eh_frame:0000000000006E19                 db    0
.eh_frame:0000000000006E1A                 db    0
.eh_frame:0000000000006E1B                 db    0
.eh_frame:0000000000006E1C                 db    0
.eh_frame:0000000000006E1D                 db  6Bh ; k
.eh_frame:0000000000006E1E                 db  0Eh
.eh_frame:0000000000006E1F                 db  10h
.eh_frame:0000000000006E20                 db  50h ; P
.eh_frame:0000000000006E21                 db    0
.eh_frame:0000000000006E22                 db    0
.eh_frame:0000000000006E23                 db    0
.eh_frame:0000000000006E24                 db 0DCh
.eh_frame:0000000000006E25                 db    4
.eh_frame:0000000000006E26                 db    0
.eh_frame:0000000000006E27                 db    0
.eh_frame:0000000000006E28                 db 0E8h
.eh_frame:0000000000006E29                 db 0D4h
.eh_frame:0000000000006E2A                 db 0FFh
.eh_frame:0000000000006E2B                 db 0FFh
.eh_frame:0000000000006E2C                 db  74h ; t
.eh_frame:0000000000006E2D                 db    0
.eh_frame:0000000000006E2E                 db    0
.eh_frame:0000000000006E2F                 db    0
.eh_frame:0000000000006E30                 db    0
.eh_frame:0000000000006E31                 db  42h ; B
.eh_frame:0000000000006E32                 db  0Eh
.eh_frame:0000000000006E33                 db  10h
.eh_frame:0000000000006E34                 db  8Fh
.eh_frame:0000000000006E35                 db    2
.eh_frame:0000000000006E36                 db  42h ; B
.eh_frame:0000000000006E37                 db  0Eh
.eh_frame:0000000000006E38                 db  18h
.eh_frame:0000000000006E39                 db  8Eh
.eh_frame:0000000000006E3A                 db    3
.eh_frame:0000000000006E3B                 db  49h ; I
.eh_frame:0000000000006E3C                 db  0Eh
.eh_frame:0000000000006E3D                 db  20h
.eh_frame:0000000000006E3E                 db  8Dh
.eh_frame:0000000000006E3F                 db    4
.eh_frame:0000000000006E40                 db  42h ; B
.eh_frame:0000000000006E41                 db  0Eh
.eh_frame:0000000000006E42                 db  28h ; (
.eh_frame:0000000000006E43                 db  8Ch
.eh_frame:0000000000006E44                 db    5
.eh_frame:0000000000006E45                 db  44h ; D
.eh_frame:0000000000006E46                 db  0Eh
.eh_frame:0000000000006E47                 db  30h ; 0
.eh_frame:0000000000006E48                 db  86h
.eh_frame:0000000000006E49                 db    6
.eh_frame:0000000000006E4A                 db  41h ; A
.eh_frame:0000000000006E4B                 db  0Eh
.eh_frame:0000000000006E4C                 db  38h ; 8
.eh_frame:0000000000006E4D                 db  83h
.eh_frame:0000000000006E4E                 db    7
.eh_frame:0000000000006E4F                 db  4Dh ; M
.eh_frame:0000000000006E50                 db  0Eh
.eh_frame:0000000000006E51                 db  50h ; P
.eh_frame:0000000000006E52                 db  5Fh ; _
.eh_frame:0000000000006E53                 db  0Eh
.eh_frame:0000000000006E54                 db  58h ; X
.eh_frame:0000000000006E55                 db  47h ; G
.eh_frame:0000000000006E56                 db  0Eh
.eh_frame:0000000000006E57                 db  60h ; `
.eh_frame:0000000000006E58                 db  46h ; F
.eh_frame:0000000000006E59                 db  0Eh
.eh_frame:0000000000006E5A                 db  68h ; h
.eh_frame:0000000000006E5B                 db  44h ; D
.eh_frame:0000000000006E5C                 db  0Eh
.eh_frame:0000000000006E5D                 db  70h ; p
.eh_frame:0000000000006E5E                 db  58h ; X
.eh_frame:0000000000006E5F                 db  0Eh
.eh_frame:0000000000006E60                 db  38h ; 8
.eh_frame:0000000000006E61                 db  41h ; A
.eh_frame:0000000000006E62                 db  0Eh
.eh_frame:0000000000006E63                 db  30h ; 0
.eh_frame:0000000000006E64                 db  41h ; A
.eh_frame:0000000000006E65                 db  0Eh
.eh_frame:0000000000006E66                 db  28h ; (
.eh_frame:0000000000006E67                 db  42h ; B
.eh_frame:0000000000006E68                 db  0Eh
.eh_frame:0000000000006E69                 db  20h
.eh_frame:0000000000006E6A                 db  42h ; B
.eh_frame:0000000000006E6B                 db  0Eh
.eh_frame:0000000000006E6C                 db  18h
.eh_frame:0000000000006E6D                 db  42h ; B
.eh_frame:0000000000006E6E                 db  0Eh
.eh_frame:0000000000006E6F                 db  10h
.eh_frame:0000000000006E70                 db  42h ; B
.eh_frame:0000000000006E71                 db  0Eh
.eh_frame:0000000000006E72                 db    8
.eh_frame:0000000000006E73                 db    0
.eh_frame:0000000000006E74                 db  68h ; h
.eh_frame:0000000000006E75                 db    0
.eh_frame:0000000000006E76                 db    0
.eh_frame:0000000000006E77                 db    0
.eh_frame:0000000000006E78                 db  30h ; 0
.eh_frame:0000000000006E79                 db    5
.eh_frame:0000000000006E7A                 db    0
.eh_frame:0000000000006E7B                 db    0
.eh_frame:0000000000006E7C                 db  14h
.eh_frame:0000000000006E7D                 db 0D5h
.eh_frame:0000000000006E7E                 db 0FFh
.eh_frame:0000000000006E7F                 db 0FFh
.eh_frame:0000000000006E80                 db 0E3h
.eh_frame:0000000000006E81                 db    0
.eh_frame:0000000000006E82                 db    0
.eh_frame:0000000000006E83                 db    0
.eh_frame:0000000000006E84                 db    0
.eh_frame:0000000000006E85                 db  42h ; B
.eh_frame:0000000000006E86                 db  0Eh
.eh_frame:0000000000006E87                 db  10h
.eh_frame:0000000000006E88                 db  8Fh
.eh_frame:0000000000006E89                 db    2
.eh_frame:0000000000006E8A                 db  42h ; B
.eh_frame:0000000000006E8B                 db  0Eh
.eh_frame:0000000000006E8C                 db  18h
.eh_frame:0000000000006E8D                 db  8Eh
.eh_frame:0000000000006E8E                 db    3
.eh_frame:0000000000006E8F                 db  49h ; I
.eh_frame:0000000000006E90                 db  0Eh
.eh_frame:0000000000006E91                 db  20h
.eh_frame:0000000000006E92                 db  8Dh
.eh_frame:0000000000006E93                 db    4
.eh_frame:0000000000006E94                 db  42h ; B
.eh_frame:0000000000006E95                 db  0Eh
.eh_frame:0000000000006E96                 db  28h ; (
.eh_frame:0000000000006E97                 db  8Ch
.eh_frame:0000000000006E98                 db    5
.eh_frame:0000000000006E99                 db  44h ; D
.eh_frame:0000000000006E9A                 db  0Eh
.eh_frame:0000000000006E9B                 db  30h ; 0
.eh_frame:0000000000006E9C                 db  86h
.eh_frame:0000000000006E9D                 db    6
.eh_frame:0000000000006E9E                 db  41h ; A
.eh_frame:0000000000006E9F                 db  0Eh
.eh_frame:0000000000006EA0                 db  38h ; 8
.eh_frame:0000000000006EA1                 db  83h
.eh_frame:0000000000006EA2                 db    7
.eh_frame:0000000000006EA3                 db  4Dh ; M
.eh_frame:0000000000006EA4                 db  0Eh
.eh_frame:0000000000006EA5                 db  70h ; p
.eh_frame:0000000000006EA6                 db  65h ; e
.eh_frame:0000000000006EA7                 db  0Eh
.eh_frame:0000000000006EA8                 db  78h ; x
.eh_frame:0000000000006EA9                 db  4Dh ; M
.eh_frame:0000000000006EAA                 db  0Eh
.eh_frame:0000000000006EAB                 db  80h
.eh_frame:0000000000006EAC                 db    1
.eh_frame:0000000000006EAD                 db  46h ; F
.eh_frame:0000000000006EAE                 db  0Eh
.eh_frame:0000000000006EAF                 db  88h
.eh_frame:0000000000006EB0                 db    1
.eh_frame:0000000000006EB1                 db  42h ; B
.eh_frame:0000000000006EB2                 db  0Eh
.eh_frame:0000000000006EB3                 db  90h
.eh_frame:0000000000006EB4                 db    1
.eh_frame:0000000000006EB5                 db  5Eh ; ^
.eh_frame:0000000000006EB6                 db  0Eh
.eh_frame:0000000000006EB7                 db  70h ; p
.eh_frame:0000000000006EB8                 db  56h ; V
.eh_frame:0000000000006EB9                 db  0Eh
.eh_frame:0000000000006EBA                 db  78h ; x
.eh_frame:0000000000006EBB                 db  43h ; C
.eh_frame:0000000000006EBC                 db  0Eh
.eh_frame:0000000000006EBD                 db  80h
.eh_frame:0000000000006EBE                 db    1
.eh_frame:0000000000006EBF                 db  43h ; C
.eh_frame:0000000000006EC0                 db  0Eh
.eh_frame:0000000000006EC1                 db  88h
.eh_frame:0000000000006EC2                 db    1
.eh_frame:0000000000006EC3                 db  56h ; V
.eh_frame:0000000000006EC4                 db  0Eh
.eh_frame:0000000000006EC5                 db  90h
.eh_frame:0000000000006EC6                 db    1
.eh_frame:0000000000006EC7                 db  52h ; R
.eh_frame:0000000000006EC8                 db  0Eh
.eh_frame:0000000000006EC9                 db  70h ; p
.eh_frame:0000000000006ECA                 db  5Bh ; [
.eh_frame:0000000000006ECB                 db  0Eh
.eh_frame:0000000000006ECC                 db  38h ; 8
.eh_frame:0000000000006ECD                 db  41h ; A
.eh_frame:0000000000006ECE                 db  0Eh
.eh_frame:0000000000006ECF                 db  30h ; 0
.eh_frame:0000000000006ED0                 db  41h ; A
.eh_frame:0000000000006ED1                 db  0Eh
.eh_frame:0000000000006ED2                 db  28h ; (
.eh_frame:0000000000006ED3                 db  42h ; B
.eh_frame:0000000000006ED4                 db  0Eh
.eh_frame:0000000000006ED5                 db  20h
.eh_frame:0000000000006ED6                 db  42h ; B
.eh_frame:0000000000006ED7                 db  0Eh
.eh_frame:0000000000006ED8                 db  18h
.eh_frame:0000000000006ED9                 db  42h ; B
.eh_frame:0000000000006EDA                 db  0Eh
.eh_frame:0000000000006EDB                 db  10h
.eh_frame:0000000000006EDC                 db  42h ; B
.eh_frame:0000000000006EDD                 db  0Eh
.eh_frame:0000000000006EDE                 db    8
.eh_frame:0000000000006EDF                 db    0
.eh_frame:0000000000006EE0                 db  10h
.eh_frame:0000000000006EE1                 db    0
.eh_frame:0000000000006EE2                 db    0
.eh_frame:0000000000006EE3                 db    0
.eh_frame:0000000000006EE4                 db  9Ch
.eh_frame:0000000000006EE5                 db    5
.eh_frame:0000000000006EE6                 db    0
.eh_frame:0000000000006EE7                 db    0
.eh_frame:0000000000006EE8                 db  98h
.eh_frame:0000000000006EE9                 db 0D5h
.eh_frame:0000000000006EEA                 db 0FFh
.eh_frame:0000000000006EEB                 db 0FFh
.eh_frame:0000000000006EEC                 db  0Ah
.eh_frame:0000000000006EED                 db    0
.eh_frame:0000000000006EEE                 db    0
.eh_frame:0000000000006EEF                 db    0
.eh_frame:0000000000006EF0                 db    0
.eh_frame:0000000000006EF1                 db    0
.eh_frame:0000000000006EF2                 db    0
.eh_frame:0000000000006EF3                 db    0
.eh_frame:0000000000006EF4                 db  28h ; (
.eh_frame:0000000000006EF5                 db    0
.eh_frame:0000000000006EF6                 db    0
.eh_frame:0000000000006EF7                 db    0
.eh_frame:0000000000006EF8                 db 0B0h
.eh_frame:0000000000006EF9                 db    5
.eh_frame:0000000000006EFA                 db    0
.eh_frame:0000000000006EFB                 db    0
.eh_frame:0000000000006EFC                 db  94h
.eh_frame:0000000000006EFD                 db 0D5h
.eh_frame:0000000000006EFE                 db 0FFh
.eh_frame:0000000000006EFF                 db 0FFh
.eh_frame:0000000000006F00                 db  93h
.eh_frame:0000000000006F01                 db    0
.eh_frame:0000000000006F02                 db    0
.eh_frame:0000000000006F03                 db    0
.eh_frame:0000000000006F04                 db    0
.eh_frame:0000000000006F05                 db  48h ; H
.eh_frame:0000000000006F06                 db  0Eh
.eh_frame:0000000000006F07                 db  10h
.eh_frame:0000000000006F08                 db  8Ch
.eh_frame:0000000000006F09                 db    2
.eh_frame:0000000000006F0A                 db  48h ; H
.eh_frame:0000000000006F0B                 db  0Eh
.eh_frame:0000000000006F0C                 db  18h
.eh_frame:0000000000006F0D                 db  86h
.eh_frame:0000000000006F0E                 db    3
.eh_frame:0000000000006F0F                 db  41h ; A
.eh_frame:0000000000006F10                 db  0Eh
.eh_frame:0000000000006F11                 db  20h
.eh_frame:0000000000006F12                 db  83h
.eh_frame:0000000000006F13                 db    4
.eh_frame:0000000000006F14                 db    2
.eh_frame:0000000000006F15                 db  74h ; t
.eh_frame:0000000000006F16                 db  0Eh
.eh_frame:0000000000006F17                 db  18h
.eh_frame:0000000000006F18                 db  4Bh ; K
.eh_frame:0000000000006F19                 db  0Eh
.eh_frame:0000000000006F1A                 db  10h
.eh_frame:0000000000006F1B                 db  42h ; B
.eh_frame:0000000000006F1C                 db  0Eh
.eh_frame:0000000000006F1D                 db    8
.eh_frame:0000000000006F1E                 db    0
.eh_frame:0000000000006F1F                 db    0
.eh_frame:0000000000006F20                 db  10h
.eh_frame:0000000000006F21                 db    0
.eh_frame:0000000000006F22                 db    0
.eh_frame:0000000000006F23                 db    0
.eh_frame:0000000000006F24                 db 0DCh
.eh_frame:0000000000006F25                 db    5
.eh_frame:0000000000006F26                 db    0
.eh_frame:0000000000006F27                 db    0
.eh_frame:0000000000006F28                 db    8
.eh_frame:0000000000006F29                 db 0D6h
.eh_frame:0000000000006F2A                 db 0FFh
.eh_frame:0000000000006F2B                 db 0FFh
.eh_frame:0000000000006F2C                 db  13h
.eh_frame:0000000000006F2D                 db    0
.eh_frame:0000000000006F2E                 db    0
.eh_frame:0000000000006F2F                 db    0
.eh_frame:0000000000006F30                 db    0
.eh_frame:0000000000006F31                 db    0
.eh_frame:0000000000006F32                 db    0
.eh_frame:0000000000006F33                 db    0
.eh_frame:0000000000006F34                 db  10h
.eh_frame:0000000000006F35                 db    0
.eh_frame:0000000000006F36                 db    0
.eh_frame:0000000000006F37                 db    0
.eh_frame:0000000000006F38                 db 0F0h
.eh_frame:0000000000006F39                 db    5
.eh_frame:0000000000006F3A                 db    0
.eh_frame:0000000000006F3B                 db    0
.eh_frame:0000000000006F3C                 db  14h
.eh_frame:0000000000006F3D                 db 0D6h
.eh_frame:0000000000006F3E                 db 0FFh
.eh_frame:0000000000006F3F                 db 0FFh
.eh_frame:0000000000006F40                 db  0Ch
.eh_frame:0000000000006F41                 db    0
.eh_frame:0000000000006F42                 db    0
.eh_frame:0000000000006F43                 db    0
.eh_frame:0000000000006F44                 db    0
.eh_frame:0000000000006F45                 db    0
.eh_frame:0000000000006F46                 db    0
.eh_frame:0000000000006F47                 db    0
.eh_frame:0000000000006F48                 db  10h
.eh_frame:0000000000006F49                 db    0
.eh_frame:0000000000006F4A                 db    0
.eh_frame:0000000000006F4B                 db    0
.eh_frame:0000000000006F4C                 db    4
.eh_frame:0000000000006F4D                 db    6
.eh_frame:0000000000006F4E                 db    0
.eh_frame:0000000000006F4F                 db    0
.eh_frame:0000000000006F50                 db  10h
.eh_frame:0000000000006F51                 db 0D6h
.eh_frame:0000000000006F52                 db 0FFh
.eh_frame:0000000000006F53                 db 0FFh
.eh_frame:0000000000006F54                 db  18h
.eh_frame:0000000000006F55                 db    0
.eh_frame:0000000000006F56                 db    0
.eh_frame:0000000000006F57                 db    0
.eh_frame:0000000000006F58                 db    0
.eh_frame:0000000000006F59                 db    0
.eh_frame:0000000000006F5A                 db    0
.eh_frame:0000000000006F5B                 db    0
.eh_frame:0000000000006F5C                 db  10h
.eh_frame:0000000000006F5D                 db    0
.eh_frame:0000000000006F5E                 db    0
.eh_frame:0000000000006F5F                 db    0
.eh_frame:0000000000006F60                 db  18h
.eh_frame:0000000000006F61                 db    6
.eh_frame:0000000000006F62                 db    0
.eh_frame:0000000000006F63                 db    0
.eh_frame:0000000000006F64                 db  1Ch
.eh_frame:0000000000006F65                 db 0D6h
.eh_frame:0000000000006F66                 db 0FFh
.eh_frame:0000000000006F67                 db 0FFh
.eh_frame:0000000000006F68                 db  14h
.eh_frame:0000000000006F69                 db    0
.eh_frame:0000000000006F6A                 db    0
.eh_frame:0000000000006F6B                 db    0
.eh_frame:0000000000006F6C                 db    0
.eh_frame:0000000000006F6D                 db    0
.eh_frame:0000000000006F6E                 db    0
.eh_frame:0000000000006F6F                 db    0
.eh_frame:0000000000006F70                 db  18h
.eh_frame:0000000000006F71                 db    0
.eh_frame:0000000000006F72                 db    0
.eh_frame:0000000000006F73                 db    0
.eh_frame:0000000000006F74                 db  2Ch ; ,
.eh_frame:0000000000006F75                 db    6
.eh_frame:0000000000006F76                 db    0
.eh_frame:0000000000006F77                 db    0
.eh_frame:0000000000006F78                 db  28h ; (
.eh_frame:0000000000006F79                 db 0D6h
.eh_frame:0000000000006F7A                 db 0FFh
.eh_frame:0000000000006F7B                 db 0FFh
.eh_frame:0000000000006F7C                 db  8Eh
.eh_frame:0000000000006F7D                 db    0
.eh_frame:0000000000006F7E                 db    0
.eh_frame:0000000000006F7F                 db    0
.eh_frame:0000000000006F80                 db    0
.eh_frame:0000000000006F81                 db  44h ; D
.eh_frame:0000000000006F82                 db  0Eh
.eh_frame:0000000000006F83                 db  50h ; P
.eh_frame:0000000000006F84                 db    2
.eh_frame:0000000000006F85                 db  7Fh ; 
.eh_frame:0000000000006F86                 db  0Ah
.eh_frame:0000000000006F87                 db  0Eh
.eh_frame:0000000000006F88                 db    8
.eh_frame:0000000000006F89                 db  41h ; A
.eh_frame:0000000000006F8A                 db  0Bh
.eh_frame:0000000000006F8B                 db    0
.eh_frame:0000000000006F8C                 db  18h
.eh_frame:0000000000006F8D                 db    0
.eh_frame:0000000000006F8E                 db    0
.eh_frame:0000000000006F8F                 db    0
.eh_frame:0000000000006F90                 db  48h ; H
.eh_frame:0000000000006F91                 db    6
.eh_frame:0000000000006F92                 db    0
.eh_frame:0000000000006F93                 db    0
.eh_frame:0000000000006F94                 db  9Ch
.eh_frame:0000000000006F95                 db 0D6h
.eh_frame:0000000000006F96                 db 0FFh
.eh_frame:0000000000006F97                 db 0FFh
.eh_frame:0000000000006F98                 db  8Ah
.eh_frame:0000000000006F99                 db    0
.eh_frame:0000000000006F9A                 db    0
.eh_frame:0000000000006F9B                 db    0
.eh_frame:0000000000006F9C                 db    0
.eh_frame:0000000000006F9D                 db  44h ; D
.eh_frame:0000000000006F9E                 db  0Eh
.eh_frame:0000000000006F9F                 db  50h ; P
.eh_frame:0000000000006FA0                 db    2
.eh_frame:0000000000006FA1                 db  7Bh ; {
.eh_frame:0000000000006FA2                 db  0Ah
.eh_frame:0000000000006FA3                 db  0Eh
.eh_frame:0000000000006FA4                 db    8
.eh_frame:0000000000006FA5                 db  41h ; A
.eh_frame:0000000000006FA6                 db  0Bh
.eh_frame:0000000000006FA7                 db    0
.eh_frame:0000000000006FA8                 db  10h
.eh_frame:0000000000006FA9                 db    0
.eh_frame:0000000000006FAA                 db    0
.eh_frame:0000000000006FAB                 db    0
.eh_frame:0000000000006FAC                 db  64h ; d
.eh_frame:0000000000006FAD                 db    6
.eh_frame:0000000000006FAE                 db    0
.eh_frame:0000000000006FAF                 db    0
.eh_frame:0000000000006FB0                 db  10h
.eh_frame:0000000000006FB1                 db 0D7h
.eh_frame:0000000000006FB2                 db 0FFh
.eh_frame:0000000000006FB3                 db 0FFh
.eh_frame:0000000000006FB4                 db  0Ch
.eh_frame:0000000000006FB5                 db    0
.eh_frame:0000000000006FB6                 db    0
.eh_frame:0000000000006FB7                 db    0
.eh_frame:0000000000006FB8                 db    0
.eh_frame:0000000000006FB9                 db    0
.eh_frame:0000000000006FBA                 db    0
.eh_frame:0000000000006FBB                 db    0
.eh_frame:0000000000006FBC                 db  10h
.eh_frame:0000000000006FBD                 db    0
.eh_frame:0000000000006FBE                 db    0
.eh_frame:0000000000006FBF                 db    0
.eh_frame:0000000000006FC0                 db  78h ; x
.eh_frame:0000000000006FC1                 db    6
.eh_frame:0000000000006FC2                 db    0
.eh_frame:0000000000006FC3                 db    0
.eh_frame:0000000000006FC4                 db  0Ch
.eh_frame:0000000000006FC5                 db 0D7h
.eh_frame:0000000000006FC6                 db 0FFh
.eh_frame:0000000000006FC7                 db 0FFh
.eh_frame:0000000000006FC8                 db  0Fh
.eh_frame:0000000000006FC9                 db    0
.eh_frame:0000000000006FCA                 db    0
.eh_frame:0000000000006FCB                 db    0
.eh_frame:0000000000006FCC                 db    0
.eh_frame:0000000000006FCD                 db    0
.eh_frame:0000000000006FCE                 db    0
.eh_frame:0000000000006FCF                 db    0
.eh_frame:0000000000006FD0                 db  18h
.eh_frame:0000000000006FD1                 db    0
.eh_frame:0000000000006FD2                 db    0
.eh_frame:0000000000006FD3                 db    0
.eh_frame:0000000000006FD4                 db  8Ch
.eh_frame:0000000000006FD5                 db    6
.eh_frame:0000000000006FD6                 db    0
.eh_frame:0000000000006FD7                 db    0
.eh_frame:0000000000006FD8                 db    8
.eh_frame:0000000000006FD9                 db 0D7h
.eh_frame:0000000000006FDA                 db 0FFh
.eh_frame:0000000000006FDB                 db 0FFh
.eh_frame:0000000000006FDC                 db  98h
.eh_frame:0000000000006FDD                 db    0
.eh_frame:0000000000006FDE                 db    0
.eh_frame:0000000000006FDF                 db    0
.eh_frame:0000000000006FE0                 db    0
.eh_frame:0000000000006FE1                 db  44h ; D
.eh_frame:0000000000006FE2                 db  0Eh
.eh_frame:0000000000006FE3                 db  50h ; P
.eh_frame:0000000000006FE4                 db    2
.eh_frame:0000000000006FE5                 db  8Eh
.eh_frame:0000000000006FE6                 db  0Ah
.eh_frame:0000000000006FE7                 db  0Eh
.eh_frame:0000000000006FE8                 db    8
.eh_frame:0000000000006FE9                 db  41h ; A
.eh_frame:0000000000006FEA                 db  0Bh
.eh_frame:0000000000006FEB                 db    0
.eh_frame:0000000000006FEC                 db  10h
.eh_frame:0000000000006FED                 db    0
.eh_frame:0000000000006FEE                 db    0
.eh_frame:0000000000006FEF                 db    0
.eh_frame:0000000000006FF0                 db 0A8h
.eh_frame:0000000000006FF1                 db    6
.eh_frame:0000000000006FF2                 db    0
.eh_frame:0000000000006FF3                 db    0
.eh_frame:0000000000006FF4                 db  8Ch
.eh_frame:0000000000006FF5                 db 0D7h
.eh_frame:0000000000006FF6                 db 0FFh
.eh_frame:0000000000006FF7                 db 0FFh
.eh_frame:0000000000006FF8                 db  10h
.eh_frame:0000000000006FF9                 db    0
.eh_frame:0000000000006FFA                 db    0
.eh_frame:0000000000006FFB                 db    0
.eh_frame:0000000000006FFC                 db    0
.eh_frame:0000000000006FFD                 db    0
.eh_frame:0000000000006FFE                 db    0
.eh_frame:0000000000006FFF                 db    0
.eh_frame:0000000000007000                 db  10h
.eh_frame:0000000000007001                 db    0
.eh_frame:0000000000007002                 db    0
.eh_frame:0000000000007003                 db    0
.eh_frame:0000000000007004                 db 0BCh
.eh_frame:0000000000007005                 db    6
.eh_frame:0000000000007006                 db    0
.eh_frame:0000000000007007                 db    0
.eh_frame:0000000000007008                 db  88h
.eh_frame:0000000000007009                 db 0D7h
.eh_frame:000000000000700A                 db 0FFh
.eh_frame:000000000000700B                 db 0FFh
.eh_frame:000000000000700C                 db  11h
.eh_frame:000000000000700D                 db    0
.eh_frame:000000000000700E                 db    0
.eh_frame:000000000000700F                 db    0
.eh_frame:0000000000007010                 db    0
.eh_frame:0000000000007011                 db    0
.eh_frame:0000000000007012                 db    0
.eh_frame:0000000000007013                 db    0
.eh_frame:0000000000007014                 db  10h
.eh_frame:0000000000007015                 db    0
.eh_frame:0000000000007016                 db    0
.eh_frame:0000000000007017                 db    0
.eh_frame:0000000000007018                 db 0D0h
.eh_frame:0000000000007019                 db    6
.eh_frame:000000000000701A                 db    0
.eh_frame:000000000000701B                 db    0
.eh_frame:000000000000701C                 db  94h
.eh_frame:000000000000701D                 db 0D7h
.eh_frame:000000000000701E                 db 0FFh
.eh_frame:000000000000701F                 db 0FFh
.eh_frame:0000000000007020                 db  0Ah
.eh_frame:0000000000007021                 db    0
.eh_frame:0000000000007022                 db    0
.eh_frame:0000000000007023                 db    0
.eh_frame:0000000000007024                 db    0
.eh_frame:0000000000007025                 db    0
.eh_frame:0000000000007026                 db    0
.eh_frame:0000000000007027                 db    0
.eh_frame:0000000000007028                 db  18h
.eh_frame:0000000000007029                 db    0
.eh_frame:000000000000702A                 db    0
.eh_frame:000000000000702B                 db    0
.eh_frame:000000000000702C                 db 0E4h
.eh_frame:000000000000702D                 db    6
.eh_frame:000000000000702E                 db    0
.eh_frame:000000000000702F                 db    0
.eh_frame:0000000000007030                 db  90h
.eh_frame:0000000000007031                 db 0D7h
.eh_frame:0000000000007032                 db 0FFh
.eh_frame:0000000000007033                 db 0FFh
.eh_frame:0000000000007034                 db  8Eh
.eh_frame:0000000000007035                 db    0
.eh_frame:0000000000007036                 db    0
.eh_frame:0000000000007037                 db    0
.eh_frame:0000000000007038                 db    0
.eh_frame:0000000000007039                 db  44h ; D
.eh_frame:000000000000703A                 db  0Eh
.eh_frame:000000000000703B                 db  50h ; P
.eh_frame:000000000000703C                 db    2
.eh_frame:000000000000703D                 db  7Fh ; 
.eh_frame:000000000000703E                 db  0Ah
.eh_frame:000000000000703F                 db  0Eh
.eh_frame:0000000000007040                 db    8
.eh_frame:0000000000007041                 db  41h ; A
.eh_frame:0000000000007042                 db  0Bh
.eh_frame:0000000000007043                 db    0
.eh_frame:0000000000007044                 db  18h
.eh_frame:0000000000007045                 db    0
.eh_frame:0000000000007046                 db    0
.eh_frame:0000000000007047                 db    0
.eh_frame:0000000000007048                 db    0
.eh_frame:0000000000007049                 db    7
.eh_frame:000000000000704A                 db    0
.eh_frame:000000000000704B                 db    0
.eh_frame:000000000000704C                 db    4
.eh_frame:000000000000704D                 db 0D8h
.eh_frame:000000000000704E                 db 0FFh
.eh_frame:000000000000704F                 db 0FFh
.eh_frame:0000000000007050                 db  91h
.eh_frame:0000000000007051                 db    0
.eh_frame:0000000000007052                 db    0
.eh_frame:0000000000007053                 db    0
.eh_frame:0000000000007054                 db    0
.eh_frame:0000000000007055                 db  44h ; D
.eh_frame:0000000000007056                 db  0Eh
.eh_frame:0000000000007057                 db  50h ; P
.eh_frame:0000000000007058                 db    2
.eh_frame:0000000000007059                 db  82h
.eh_frame:000000000000705A                 db  0Ah
.eh_frame:000000000000705B                 db  0Eh
.eh_frame:000000000000705C                 db    8
.eh_frame:000000000000705D                 db  41h ; A
.eh_frame:000000000000705E                 db  0Bh
.eh_frame:000000000000705F                 db    0
.eh_frame:0000000000007060                 db  10h
.eh_frame:0000000000007061                 db    0
.eh_frame:0000000000007062                 db    0
.eh_frame:0000000000007063                 db    0
.eh_frame:0000000000007064                 db  1Ch
.eh_frame:0000000000007065                 db    7
.eh_frame:0000000000007066                 db    0
.eh_frame:0000000000007067                 db    0
.eh_frame:0000000000007068                 db  88h
.eh_frame:0000000000007069                 db 0D8h
.eh_frame:000000000000706A                 db 0FFh
.eh_frame:000000000000706B                 db 0FFh
.eh_frame:000000000000706C                 db  0Ch
.eh_frame:000000000000706D                 db    0
.eh_frame:000000000000706E                 db    0
.eh_frame:000000000000706F                 db    0
.eh_frame:0000000000007070                 db    0
.eh_frame:0000000000007071                 db    0
.eh_frame:0000000000007072                 db    0
.eh_frame:0000000000007073                 db    0
.eh_frame:0000000000007074                 db  10h
.eh_frame:0000000000007075                 db    0
.eh_frame:0000000000007076                 db    0
.eh_frame:0000000000007077                 db    0
.eh_frame:0000000000007078                 db  30h ; 0
.eh_frame:0000000000007079                 db    7
.eh_frame:000000000000707A                 db    0
.eh_frame:000000000000707B                 db    0
.eh_frame:000000000000707C                 db  84h
.eh_frame:000000000000707D                 db 0D8h
.eh_frame:000000000000707E                 db 0FFh
.eh_frame:000000000000707F                 db 0FFh
.eh_frame:0000000000007080                 db  17h
.eh_frame:0000000000007081                 db    0
.eh_frame:0000000000007082                 db    0
.eh_frame:0000000000007083                 db    0
.eh_frame:0000000000007084                 db    0
.eh_frame:0000000000007085                 db    0
.eh_frame:0000000000007086                 db    0
.eh_frame:0000000000007087                 db    0
.eh_frame:0000000000007088                 db  10h
.eh_frame:0000000000007089                 db    0
.eh_frame:000000000000708A                 db    0
.eh_frame:000000000000708B                 db    0
.eh_frame:000000000000708C                 db  44h ; D
.eh_frame:000000000000708D                 db    7
.eh_frame:000000000000708E                 db    0
.eh_frame:000000000000708F                 db    0
.eh_frame:0000000000007090                 db  90h
.eh_frame:0000000000007091                 db 0D8h
.eh_frame:0000000000007092                 db 0FFh
.eh_frame:0000000000007093                 db 0FFh
.eh_frame:0000000000007094                 db  13h
.eh_frame:0000000000007095                 db    0
.eh_frame:0000000000007096                 db    0
.eh_frame:0000000000007097                 db    0
.eh_frame:0000000000007098                 db    0
.eh_frame:0000000000007099                 db    0
.eh_frame:000000000000709A                 db    0
.eh_frame:000000000000709B                 db    0
.eh_frame:000000000000709C                 db  10h
.eh_frame:000000000000709D                 db    0
.eh_frame:000000000000709E                 db    0
.eh_frame:000000000000709F                 db    0
.eh_frame:00000000000070A0                 db  58h ; X
.eh_frame:00000000000070A1                 db    7
.eh_frame:00000000000070A2                 db    0
.eh_frame:00000000000070A3                 db    0
.eh_frame:00000000000070A4                 db  9Ch
.eh_frame:00000000000070A5                 db 0D8h
.eh_frame:00000000000070A6                 db 0FFh
.eh_frame:00000000000070A7                 db 0FFh
.eh_frame:00000000000070A8                 db  0Ch
.eh_frame:00000000000070A9                 db    0
.eh_frame:00000000000070AA                 db    0
.eh_frame:00000000000070AB                 db    0
.eh_frame:00000000000070AC                 db    0
.eh_frame:00000000000070AD                 db    0
.eh_frame:00000000000070AE                 db    0
.eh_frame:00000000000070AF                 db    0
.eh_frame:00000000000070B0                 db  10h
.eh_frame:00000000000070B1                 db    0
.eh_frame:00000000000070B2                 db    0
.eh_frame:00000000000070B3                 db    0
.eh_frame:00000000000070B4                 db  6Ch ; l
.eh_frame:00000000000070B5                 db    7
.eh_frame:00000000000070B6                 db    0
.eh_frame:00000000000070B7                 db    0
.eh_frame:00000000000070B8                 db  98h
.eh_frame:00000000000070B9                 db 0D8h
.eh_frame:00000000000070BA                 db 0FFh
.eh_frame:00000000000070BB                 db 0FFh
.eh_frame:00000000000070BC                 db  14h
.eh_frame:00000000000070BD                 db    0
.eh_frame:00000000000070BE                 db    0
.eh_frame:00000000000070BF                 db    0
.eh_frame:00000000000070C0                 db    0
.eh_frame:00000000000070C1                 db    0
.eh_frame:00000000000070C2                 db    0
.eh_frame:00000000000070C3                 db    0
.eh_frame:00000000000070C4                 db  10h
.eh_frame:00000000000070C5                 db    0
.eh_frame:00000000000070C6                 db    0
.eh_frame:00000000000070C7                 db    0
.eh_frame:00000000000070C8                 db  80h
.eh_frame:00000000000070C9                 db    7
.eh_frame:00000000000070CA                 db    0
.eh_frame:00000000000070CB                 db    0
.eh_frame:00000000000070CC                 db 0A4h
.eh_frame:00000000000070CD                 db 0D8h
.eh_frame:00000000000070CE                 db 0FFh
.eh_frame:00000000000070CF                 db 0FFh
.eh_frame:00000000000070D0                 db  13h
.eh_frame:00000000000070D1                 db    0
.eh_frame:00000000000070D2                 db    0
.eh_frame:00000000000070D3                 db    0
.eh_frame:00000000000070D4                 db    0
.eh_frame:00000000000070D5                 db    0
.eh_frame:00000000000070D6                 db    0
.eh_frame:00000000000070D7                 db    0
.eh_frame:00000000000070D8                 db  14h
.eh_frame:00000000000070D9                 db    0
.eh_frame:00000000000070DA                 db    0
.eh_frame:00000000000070DB                 db    0
.eh_frame:00000000000070DC                 db  94h
.eh_frame:00000000000070DD                 db    7
.eh_frame:00000000000070DE                 db    0
.eh_frame:00000000000070DF                 db    0
.eh_frame:00000000000070E0                 db 0B0h
.eh_frame:00000000000070E1                 db 0D8h
.eh_frame:00000000000070E2                 db 0FFh
.eh_frame:00000000000070E3                 db 0FFh
.eh_frame:00000000000070E4                 db  18h
.eh_frame:00000000000070E5                 db    0
.eh_frame:00000000000070E6                 db    0
.eh_frame:00000000000070E7                 db    0
.eh_frame:00000000000070E8                 db    0
.eh_frame:00000000000070E9                 db    0
.eh_frame:00000000000070EA                 db    0
.eh_frame:00000000000070EB                 db    0
.eh_frame:00000000000070EC                 db    0
.eh_frame:00000000000070ED                 db    0
.eh_frame:00000000000070EE                 db    0
.eh_frame:00000000000070EF                 db    0
.eh_frame:00000000000070F0                 db  10h
.eh_frame:00000000000070F1                 db    1
.eh_frame:00000000000070F2                 db    0
.eh_frame:00000000000070F3                 db    0
.eh_frame:00000000000070F4                 db 0ACh
.eh_frame:00000000000070F5                 db    7
.eh_frame:00000000000070F6                 db    0
.eh_frame:00000000000070F7                 db    0
.eh_frame:00000000000070F8                 db 0B8h
.eh_frame:00000000000070F9                 db 0D8h
.eh_frame:00000000000070FA                 db 0FFh
.eh_frame:00000000000070FB                 db 0FFh
.eh_frame:00000000000070FC                 db  17h
.eh_frame:00000000000070FD                 db    4
.eh_frame:00000000000070FE                 db    0
.eh_frame:00000000000070FF                 db    0
.eh_frame:0000000000007100                 db    0
.eh_frame:0000000000007101                 db  42h ; B
.eh_frame:0000000000007102                 db  0Eh
.eh_frame:0000000000007103                 db  10h
.eh_frame:0000000000007104                 db  8Fh
.eh_frame:0000000000007105                 db    2
.eh_frame:0000000000007106                 db  42h ; B
.eh_frame:0000000000007107                 db  0Eh
.eh_frame:0000000000007108                 db  18h
.eh_frame:0000000000007109                 db  8Eh
.eh_frame:000000000000710A                 db    3
.eh_frame:000000000000710B                 db  42h ; B
.eh_frame:000000000000710C                 db  0Eh
.eh_frame:000000000000710D                 db  20h
.eh_frame:000000000000710E                 db  8Dh
.eh_frame:000000000000710F                 db    4
.eh_frame:0000000000007110                 db  42h ; B
.eh_frame:0000000000007111                 db  0Eh
.eh_frame:0000000000007112                 db  28h ; (
.eh_frame:0000000000007113                 db  8Ch
.eh_frame:0000000000007114                 db    5
.eh_frame:0000000000007115                 db  44h ; D
.eh_frame:0000000000007116                 db  0Eh
.eh_frame:0000000000007117                 db  30h ; 0
.eh_frame:0000000000007118                 db  86h
.eh_frame:0000000000007119                 db    6
.eh_frame:000000000000711A                 db  41h ; A
.eh_frame:000000000000711B                 db  0Eh
.eh_frame:000000000000711C                 db  38h ; 8
.eh_frame:000000000000711D                 db  83h
.eh_frame:000000000000711E                 db    7
.eh_frame:000000000000711F                 db  4Ah ; J
.eh_frame:0000000000007120                 db  0Eh
.eh_frame:0000000000007121                 db  60h ; `
.eh_frame:0000000000007122                 db    2
.eh_frame:0000000000007123                 db 0DDh
.eh_frame:0000000000007124                 db  0Eh
.eh_frame:0000000000007125                 db  68h ; h
.eh_frame:0000000000007126                 db  57h ; W
.eh_frame:0000000000007127                 db  0Eh
.eh_frame:0000000000007128                 db  70h ; p
.eh_frame:0000000000007129                 db  42h ; B
.eh_frame:000000000000712A                 db  0Eh
.eh_frame:000000000000712B                 db  78h ; x
.eh_frame:000000000000712C                 db  42h ; B
.eh_frame:000000000000712D                 db  0Eh
.eh_frame:000000000000712E                 db  80h
.eh_frame:000000000000712F                 db    1
.eh_frame:0000000000007130                 db  42h ; B
.eh_frame:0000000000007131                 db  0Eh
.eh_frame:0000000000007132                 db  88h
.eh_frame:0000000000007133                 db    1
.eh_frame:0000000000007134                 db  42h ; B
.eh_frame:0000000000007135                 db  0Eh
.eh_frame:0000000000007136                 db  90h
.eh_frame:0000000000007137                 db    1
.eh_frame:0000000000007138                 db  53h ; S
.eh_frame:0000000000007139                 db  0Eh
.eh_frame:000000000000713A                 db  60h ; `
.eh_frame:000000000000713B                 db  44h ; D
.eh_frame:000000000000713C                 db  0Ah
.eh_frame:000000000000713D                 db  0Eh
.eh_frame:000000000000713E                 db  38h ; 8
.eh_frame:000000000000713F                 db  41h ; A
.eh_frame:0000000000007140                 db  0Eh
.eh_frame:0000000000007141                 db  30h ; 0
.eh_frame:0000000000007142                 db  41h ; A
.eh_frame:0000000000007143                 db  0Eh
.eh_frame:0000000000007144                 db  28h ; (
.eh_frame:0000000000007145                 db  42h ; B
.eh_frame:0000000000007146                 db  0Eh
.eh_frame:0000000000007147                 db  20h
.eh_frame:0000000000007148                 db  42h ; B
.eh_frame:0000000000007149                 db  0Eh
.eh_frame:000000000000714A                 db  18h
.eh_frame:000000000000714B                 db  42h ; B
.eh_frame:000000000000714C                 db  0Eh
.eh_frame:000000000000714D                 db  10h
.eh_frame:000000000000714E                 db  42h ; B
.eh_frame:000000000000714F                 db  0Eh
.eh_frame:0000000000007150                 db    8
.eh_frame:0000000000007151                 db  44h ; D
.eh_frame:0000000000007152                 db  0Bh
.eh_frame:0000000000007153                 db    2
.eh_frame:0000000000007154                 db  78h ; x
.eh_frame:0000000000007155                 db  0Ah
.eh_frame:0000000000007156                 db  0Eh
.eh_frame:0000000000007157                 db  68h ; h
.eh_frame:0000000000007158                 db  48h ; H
.eh_frame:0000000000007159                 db  0Bh
.eh_frame:000000000000715A                 db  5Ah ; Z
.eh_frame:000000000000715B                 db  0Ah
.eh_frame:000000000000715C                 db  0Eh
.eh_frame:000000000000715D                 db  38h ; 8
.eh_frame:000000000000715E                 db  47h ; G
.eh_frame:000000000000715F                 db  0Eh
.eh_frame:0000000000007160                 db  30h ; 0
.eh_frame:0000000000007161                 db  41h ; A
.eh_frame:0000000000007162                 db  0Eh
.eh_frame:0000000000007163                 db  28h ; (
.eh_frame:0000000000007164                 db  42h ; B
.eh_frame:0000000000007165                 db  0Eh
.eh_frame:0000000000007166                 db  20h
.eh_frame:0000000000007167                 db  42h ; B
.eh_frame:0000000000007168                 db  0Eh
.eh_frame:0000000000007169                 db  18h
.eh_frame:000000000000716A                 db  42h ; B
.eh_frame:000000000000716B                 db  0Eh
.eh_frame:000000000000716C                 db  10h
.eh_frame:000000000000716D                 db  42h ; B
.eh_frame:000000000000716E                 db  0Eh
.eh_frame:000000000000716F                 db    8
.eh_frame:0000000000007170                 db  56h ; V
.eh_frame:0000000000007171                 db  0Bh
.eh_frame:0000000000007172                 db  5Eh ; ^
.eh_frame:0000000000007173                 db  0Ah
.eh_frame:0000000000007174                 db  0Eh
.eh_frame:0000000000007175                 db  38h ; 8
.eh_frame:0000000000007176                 db  52h ; R
.eh_frame:0000000000007177                 db  0Eh
.eh_frame:0000000000007178                 db  30h ; 0
.eh_frame:0000000000007179                 db  41h ; A
.eh_frame:000000000000717A                 db  0Eh
.eh_frame:000000000000717B                 db  28h ; (
.eh_frame:000000000000717C                 db  42h ; B
.eh_frame:000000000000717D                 db  0Eh
.eh_frame:000000000000717E                 db  20h
.eh_frame:000000000000717F                 db  42h ; B
.eh_frame:0000000000007180                 db  0Eh
.eh_frame:0000000000007181                 db  18h
.eh_frame:0000000000007182                 db  42h ; B
.eh_frame:0000000000007183                 db  0Eh
.eh_frame:0000000000007184                 db  10h
.eh_frame:0000000000007185                 db  42h ; B
.eh_frame:0000000000007186                 db  0Eh
.eh_frame:0000000000007187                 db    8
.eh_frame:0000000000007188                 db  4Fh ; O
.eh_frame:0000000000007189                 db  0Bh
.eh_frame:000000000000718A                 db  62h ; b
.eh_frame:000000000000718B                 db  0Ah
.eh_frame:000000000000718C                 db  0Eh
.eh_frame:000000000000718D                 db  38h ; 8
.eh_frame:000000000000718E                 db  50h ; P
.eh_frame:000000000000718F                 db  0Eh
.eh_frame:0000000000007190                 db  30h ; 0
.eh_frame:0000000000007191                 db  41h ; A
.eh_frame:0000000000007192                 db  0Eh
.eh_frame:0000000000007193                 db  28h ; (
.eh_frame:0000000000007194                 db  42h ; B
.eh_frame:0000000000007195                 db  0Eh
.eh_frame:0000000000007196                 db  20h
.eh_frame:0000000000007197                 db  42h ; B
.eh_frame:0000000000007198                 db  0Eh
.eh_frame:0000000000007199                 db  18h
.eh_frame:000000000000719A                 db  42h ; B
.eh_frame:000000000000719B                 db  0Eh
.eh_frame:000000000000719C                 db  10h
.eh_frame:000000000000719D                 db  42h ; B
.eh_frame:000000000000719E                 db  0Eh
.eh_frame:000000000000719F                 db    8
.eh_frame:00000000000071A0                 db  55h ; U
.eh_frame:00000000000071A1                 db  0Bh
.eh_frame:00000000000071A2                 db  66h ; f
.eh_frame:00000000000071A3                 db  0Eh
.eh_frame:00000000000071A4                 db  68h ; h
.eh_frame:00000000000071A5                 db  42h ; B
.eh_frame:00000000000071A6                 db  0Eh
.eh_frame:00000000000071A7                 db  70h ; p
.eh_frame:00000000000071A8                 db  5Ch ; \
.eh_frame:00000000000071A9                 db  0Eh
.eh_frame:00000000000071AA                 db  68h ; h
.eh_frame:00000000000071AB                 db  41h ; A
.eh_frame:00000000000071AC                 db  0Eh
.eh_frame:00000000000071AD                 db  60h ; `
.eh_frame:00000000000071AE                 db  44h ; D
.eh_frame:00000000000071AF                 db  0Ah
.eh_frame:00000000000071B0                 db  0Eh
.eh_frame:00000000000071B1                 db  38h ; 8
.eh_frame:00000000000071B2                 db  41h ; A
.eh_frame:00000000000071B3                 db  0Eh
.eh_frame:00000000000071B4                 db  30h ; 0
.eh_frame:00000000000071B5                 db  41h ; A
.eh_frame:00000000000071B6                 db  0Eh
.eh_frame:00000000000071B7                 db  28h ; (
.eh_frame:00000000000071B8                 db  42h ; B
.eh_frame:00000000000071B9                 db  0Eh
.eh_frame:00000000000071BA                 db  20h
.eh_frame:00000000000071BB                 db  42h ; B
.eh_frame:00000000000071BC                 db  0Eh
.eh_frame:00000000000071BD                 db  18h
.eh_frame:00000000000071BE                 db  42h ; B
.eh_frame:00000000000071BF                 db  0Eh
.eh_frame:00000000000071C0                 db  10h
.eh_frame:00000000000071C1                 db  42h ; B
.eh_frame:00000000000071C2                 db  0Eh
.eh_frame:00000000000071C3                 db    8
.eh_frame:00000000000071C4                 db  45h ; E
.eh_frame:00000000000071C5                 db  0Bh
.eh_frame:00000000000071C6                 db  68h ; h
.eh_frame:00000000000071C7                 db  0Ah
.eh_frame:00000000000071C8                 db  0Eh
.eh_frame:00000000000071C9                 db  68h ; h
.eh_frame:00000000000071CA                 db  48h ; H
.eh_frame:00000000000071CB                 db  0Bh
.eh_frame:00000000000071CC                 db  72h ; r
.eh_frame:00000000000071CD                 db  0Eh
.eh_frame:00000000000071CE                 db  68h ; h
.eh_frame:00000000000071CF                 db  45h ; E
.eh_frame:00000000000071D0                 db  0Eh
.eh_frame:00000000000071D1                 db  70h ; p
.eh_frame:00000000000071D2                 db  42h ; B
.eh_frame:00000000000071D3                 db  0Eh
.eh_frame:00000000000071D4                 db  78h ; x
.eh_frame:00000000000071D5                 db  42h ; B
.eh_frame:00000000000071D6                 db  0Eh
.eh_frame:00000000000071D7                 db  80h
.eh_frame:00000000000071D8                 db    1
.eh_frame:00000000000071D9                 db  5Eh ; ^
.eh_frame:00000000000071DA                 db  0Eh
.eh_frame:00000000000071DB                 db  60h ; `
.eh_frame:00000000000071DC                 db  44h ; D
.eh_frame:00000000000071DD                 db  0Ah
.eh_frame:00000000000071DE                 db  0Eh
.eh_frame:00000000000071DF                 db  38h ; 8
.eh_frame:00000000000071E0                 db  41h ; A
.eh_frame:00000000000071E1                 db  0Eh
.eh_frame:00000000000071E2                 db  30h ; 0
.eh_frame:00000000000071E3                 db  41h ; A
.eh_frame:00000000000071E4                 db  0Eh
.eh_frame:00000000000071E5                 db  28h ; (
.eh_frame:00000000000071E6                 db  42h ; B
.eh_frame:00000000000071E7                 db  0Eh
.eh_frame:00000000000071E8                 db  20h
.eh_frame:00000000000071E9                 db  42h ; B
.eh_frame:00000000000071EA                 db  0Eh
.eh_frame:00000000000071EB                 db  18h
.eh_frame:00000000000071EC                 db  42h ; B
.eh_frame:00000000000071ED                 db  0Eh
.eh_frame:00000000000071EE                 db  10h
.eh_frame:00000000000071EF                 db  42h ; B
.eh_frame:00000000000071F0                 db  0Eh
.eh_frame:00000000000071F1                 db    8
.eh_frame:00000000000071F2                 db  41h ; A
.eh_frame:00000000000071F3                 db  0Bh
.eh_frame:00000000000071F4                 db  79h ; y
.eh_frame:00000000000071F5                 db  0Ah
.eh_frame:00000000000071F6                 db  0Eh
.eh_frame:00000000000071F7                 db  68h ; h
.eh_frame:00000000000071F8                 db  42h ; B
.eh_frame:00000000000071F9                 db  0Eh
.eh_frame:00000000000071FA                 db  70h ; p
.eh_frame:00000000000071FB                 db  42h ; B
.eh_frame:00000000000071FC                 db  0Eh
.eh_frame:00000000000071FD                 db  78h ; x
.eh_frame:00000000000071FE                 db  42h ; B
.eh_frame:00000000000071FF                 db  0Eh
.eh_frame:0000000000007200                 db  80h
.eh_frame:0000000000007201                 db    1
.eh_frame:0000000000007202                 db  51h ; Q
.eh_frame:0000000000007203                 db  0Bh
.eh_frame:0000000000007204                 db  10h
.eh_frame:0000000000007205                 db    0
.eh_frame:0000000000007206                 db    0
.eh_frame:0000000000007207                 db    0
.eh_frame:0000000000007208                 db 0C0h
.eh_frame:0000000000007209                 db    8
.eh_frame:000000000000720A                 db    0
.eh_frame:000000000000720B                 db    0
.eh_frame:000000000000720C                 db 0C4h
.eh_frame:000000000000720D                 db 0DBh
.eh_frame:000000000000720E                 db 0FFh
.eh_frame:000000000000720F                 db 0FFh
.eh_frame:0000000000007210                 db  20h
.eh_frame:0000000000007211                 db    0
.eh_frame:0000000000007212                 db    0
.eh_frame:0000000000007213                 db    0
.eh_frame:0000000000007214                 db    0
.eh_frame:0000000000007215                 db    0
.eh_frame:0000000000007216                 db    0
.eh_frame:0000000000007217                 db    0
.eh_frame:0000000000007218                 db  18h
.eh_frame:0000000000007219                 db    0
.eh_frame:000000000000721A                 db    0
.eh_frame:000000000000721B                 db    0
.eh_frame:000000000000721C                 db 0D4h
.eh_frame:000000000000721D                 db    8
.eh_frame:000000000000721E                 db    0
.eh_frame:000000000000721F                 db    0
.eh_frame:0000000000007220                 db 0D0h
.eh_frame:0000000000007221                 db 0DBh
.eh_frame:0000000000007222                 db 0FFh
.eh_frame:0000000000007223                 db 0FFh
.eh_frame:0000000000007224                 db  78h ; x
.eh_frame:0000000000007225                 db    0
.eh_frame:0000000000007226                 db    0
.eh_frame:0000000000007227                 db    0
.eh_frame:0000000000007228                 db    0
.eh_frame:0000000000007229                 db  44h ; D
.eh_frame:000000000000722A                 db  0Eh
.eh_frame:000000000000722B                 db  70h ; p
.eh_frame:000000000000722C                 db    2
.eh_frame:000000000000722D                 db  60h ; `
.eh_frame:000000000000722E                 db  0Ah
.eh_frame:000000000000722F                 db  0Eh
.eh_frame:0000000000007230                 db    8
.eh_frame:0000000000007231                 db  41h ; A
.eh_frame:0000000000007232                 db  0Bh
.eh_frame:0000000000007233                 db    0
.eh_frame:0000000000007234                 db  28h ; (
.eh_frame:0000000000007235                 db    0
.eh_frame:0000000000007236                 db    0
.eh_frame:0000000000007237                 db    0
.eh_frame:0000000000007238                 db 0F0h
.eh_frame:0000000000007239                 db    8
.eh_frame:000000000000723A                 db    0
.eh_frame:000000000000723B                 db    0
.eh_frame:000000000000723C                 db  34h ; 4
.eh_frame:000000000000723D                 db 0DCh
.eh_frame:000000000000723E                 db 0FFh
.eh_frame:000000000000723F                 db 0FFh
.eh_frame:0000000000007240                 db 0D5h
.eh_frame:0000000000007241                 db    0
.eh_frame:0000000000007242                 db    0
.eh_frame:0000000000007243                 db    0
.eh_frame:0000000000007244                 db    0
.eh_frame:0000000000007245                 db  41h ; A
.eh_frame:0000000000007246                 db  0Eh
.eh_frame:0000000000007247                 db  10h
.eh_frame:0000000000007248                 db  86h
.eh_frame:0000000000007249                 db    2
.eh_frame:000000000000724A                 db  41h ; A
.eh_frame:000000000000724B                 db  0Eh
.eh_frame:000000000000724C                 db  18h
.eh_frame:000000000000724D                 db  83h
.eh_frame:000000000000724E                 db    3
.eh_frame:000000000000724F                 db  50h ; P
.eh_frame:0000000000007250                 db  0Eh
.eh_frame:0000000000007251                 db 0D0h
.eh_frame:0000000000007252                 db    1
.eh_frame:0000000000007253                 db    2
.eh_frame:0000000000007254                 db 0ABh
.eh_frame:0000000000007255                 db  0Ah
.eh_frame:0000000000007256                 db  0Eh
.eh_frame:0000000000007257                 db  18h
.eh_frame:0000000000007258                 db  41h ; A
.eh_frame:0000000000007259                 db  0Eh
.eh_frame:000000000000725A                 db  10h
.eh_frame:000000000000725B                 db  41h ; A
.eh_frame:000000000000725C                 db  0Eh
.eh_frame:000000000000725D                 db    8
.eh_frame:000000000000725E                 db  41h ; A
.eh_frame:000000000000725F                 db  0Bh
.eh_frame:0000000000007260                 db  1Ch
.eh_frame:0000000000007261                 db    0
.eh_frame:0000000000007262                 db    0
.eh_frame:0000000000007263                 db    0
.eh_frame:0000000000007264                 db  1Ch
.eh_frame:0000000000007265                 db    9
.eh_frame:0000000000007266                 db    0
.eh_frame:0000000000007267                 db    0
.eh_frame:0000000000007268                 db 0E8h
.eh_frame:0000000000007269                 db 0DCh
.eh_frame:000000000000726A                 db 0FFh
.eh_frame:000000000000726B                 db 0FFh
.eh_frame:000000000000726C                 db  80h
.eh_frame:000000000000726D                 db    0
.eh_frame:000000000000726E                 db    0
.eh_frame:000000000000726F                 db    0
.eh_frame:0000000000007270                 db    0
.eh_frame:0000000000007271                 db  41h ; A
.eh_frame:0000000000007272                 db  0Eh
.eh_frame:0000000000007273                 db  10h
.eh_frame:0000000000007274                 db  83h
.eh_frame:0000000000007275                 db    2
.eh_frame:0000000000007276                 db    2
.eh_frame:0000000000007277                 db  7Ah ; z
.eh_frame:0000000000007278                 db  0Eh
.eh_frame:0000000000007279                 db    8
.eh_frame:000000000000727A                 db    0
.eh_frame:000000000000727B                 db    0
.eh_frame:000000000000727C                 db    0
.eh_frame:000000000000727D                 db    0
.eh_frame:000000000000727E                 db    0
.eh_frame:000000000000727F                 db    0
.eh_frame:0000000000007280                 db  18h
.eh_frame:0000000000007281                 db    0
.eh_frame:0000000000007282                 db    0
.eh_frame:0000000000007283                 db    0
.eh_frame:0000000000007284                 db  3Ch ; <
.eh_frame:0000000000007285                 db    9
.eh_frame:0000000000007286                 db    0
.eh_frame:0000000000007287                 db    0
.eh_frame:0000000000007288                 db  48h ; H
.eh_frame:0000000000007289                 db 0DDh
.eh_frame:000000000000728A                 db 0FFh
.eh_frame:000000000000728B                 db 0FFh
.eh_frame:000000000000728C                 db  1Ah
.eh_frame:000000000000728D                 db    0
.eh_frame:000000000000728E                 db    0
.eh_frame:000000000000728F                 db    0
.eh_frame:0000000000007290                 db    0
.eh_frame:0000000000007291                 db  41h ; A
.eh_frame:0000000000007292                 db  0Eh
.eh_frame:0000000000007293                 db  10h
.eh_frame:0000000000007294                 db  83h
.eh_frame:0000000000007295                 db    2
.eh_frame:0000000000007296                 db  53h ; S
.eh_frame:0000000000007297                 db  0Ah
.eh_frame:0000000000007298                 db  0Eh
.eh_frame:0000000000007299                 db    8
.eh_frame:000000000000729A                 db  41h ; A
.eh_frame:000000000000729B                 db  0Bh
.eh_frame:000000000000729C                 db  10h
.eh_frame:000000000000729D                 db    0
.eh_frame:000000000000729E                 db    0
.eh_frame:000000000000729F                 db    0
.eh_frame:00000000000072A0                 db  58h ; X
.eh_frame:00000000000072A1                 db    9
.eh_frame:00000000000072A2                 db    0
.eh_frame:00000000000072A3                 db    0
.eh_frame:00000000000072A4                 db  4Ch ; L
.eh_frame:00000000000072A5                 db 0DDh
.eh_frame:00000000000072A6                 db 0FFh
.eh_frame:00000000000072A7                 db 0FFh
.eh_frame:00000000000072A8                 db  24h ; $
.eh_frame:00000000000072A9                 db    0
.eh_frame:00000000000072AA                 db    0
.eh_frame:00000000000072AB                 db    0
.eh_frame:00000000000072AC                 db    0
.eh_frame:00000000000072AD                 db  5Fh ; _
.eh_frame:00000000000072AE                 db  0Eh
.eh_frame:00000000000072AF                 db  10h
.eh_frame:00000000000072B0                 db  10h
.eh_frame:00000000000072B1                 db    0
.eh_frame:00000000000072B2                 db    0
.eh_frame:00000000000072B3                 db    0
.eh_frame:00000000000072B4                 db  6Ch ; l
.eh_frame:00000000000072B5                 db    9
.eh_frame:00000000000072B6                 db    0
.eh_frame:00000000000072B7                 db    0
.eh_frame:00000000000072B8                 db  68h ; h
.eh_frame:00000000000072B9                 db 0DDh
.eh_frame:00000000000072BA                 db 0FFh
.eh_frame:00000000000072BB                 db 0FFh
.eh_frame:00000000000072BC                 db    2
.eh_frame:00000000000072BD                 db    0
.eh_frame:00000000000072BE                 db    0
.eh_frame:00000000000072BF                 db    0
.eh_frame:00000000000072C0                 db    0
.eh_frame:00000000000072C1                 db    0
.eh_frame:00000000000072C2                 db    0
.eh_frame:00000000000072C3                 db    0
.eh_frame:00000000000072C4                 db  20h
.eh_frame:00000000000072C5                 db    0
.eh_frame:00000000000072C6                 db    0
.eh_frame:00000000000072C7                 db    0
.eh_frame:00000000000072C8                 db  80h
.eh_frame:00000000000072C9                 db    9
.eh_frame:00000000000072CA                 db    0
.eh_frame:00000000000072CB                 db    0
.eh_frame:00000000000072CC                 db  64h ; d
.eh_frame:00000000000072CD                 db 0DDh
.eh_frame:00000000000072CE                 db 0FFh
.eh_frame:00000000000072CF                 db 0FFh
.eh_frame:00000000000072D0                 db  36h ; 6
.eh_frame:00000000000072D1                 db    0
.eh_frame:00000000000072D2                 db    0
.eh_frame:00000000000072D3                 db    0
.eh_frame:00000000000072D4                 db    0
.eh_frame:00000000000072D5                 db  44h ; D
.eh_frame:00000000000072D6                 db  0Eh
.eh_frame:00000000000072D7                 db  10h
.eh_frame:00000000000072D8                 db  83h
.eh_frame:00000000000072D9                 db    2
.eh_frame:00000000000072DA                 db  5Dh ; ]
.eh_frame:00000000000072DB                 db  0Ah
.eh_frame:00000000000072DC                 db  0Eh
.eh_frame:00000000000072DD                 db    8
.eh_frame:00000000000072DE                 db  47h ; G
.eh_frame:00000000000072DF                 db  0Bh
.eh_frame:00000000000072E0                 db  48h ; H
.eh_frame:00000000000072E1                 db  0Ah
.eh_frame:00000000000072E2                 db  0Eh
.eh_frame:00000000000072E3                 db    8
.eh_frame:00000000000072E4                 db  41h ; A
.eh_frame:00000000000072E5                 db  0Bh
.eh_frame:00000000000072E6                 db    0
.eh_frame:00000000000072E7                 db    0
.eh_frame:00000000000072E8                 db  10h
.eh_frame:00000000000072E9                 db    0
.eh_frame:00000000000072EA                 db    0
.eh_frame:00000000000072EB                 db    0
.eh_frame:00000000000072EC                 db 0A4h
.eh_frame:00000000000072ED                 db    9
.eh_frame:00000000000072EE                 db    0
.eh_frame:00000000000072EF                 db    0
.eh_frame:00000000000072F0                 db  80h
.eh_frame:00000000000072F1                 db 0DDh
.eh_frame:00000000000072F2                 db 0FFh
.eh_frame:00000000000072F3                 db 0FFh
.eh_frame:00000000000072F4                 db  24h ; $
.eh_frame:00000000000072F5                 db    0
.eh_frame:00000000000072F6                 db    0
.eh_frame:00000000000072F7                 db    0
.eh_frame:00000000000072F8                 db    0
.eh_frame:00000000000072F9                 db  5Fh ; _
.eh_frame:00000000000072FA                 db  0Eh
.eh_frame:00000000000072FB                 db  10h
.eh_frame:00000000000072FC                 db  14h
.eh_frame:00000000000072FD                 db    0
.eh_frame:00000000000072FE                 db    0
.eh_frame:00000000000072FF                 db    0
.eh_frame:0000000000007300                 db 0B8h
.eh_frame:0000000000007301                 db    9
.eh_frame:0000000000007302                 db    0
.eh_frame:0000000000007303                 db    0
.eh_frame:0000000000007304                 db  9Ch
.eh_frame:0000000000007305                 db 0DDh
.eh_frame:0000000000007306                 db 0FFh
.eh_frame:0000000000007307                 db 0FFh
.eh_frame:0000000000007308                 db  82h
.eh_frame:0000000000007309                 db    0
.eh_frame:000000000000730A                 db    0
.eh_frame:000000000000730B                 db    0
.eh_frame:000000000000730C                 db    0
.eh_frame:000000000000730D                 db    2
.eh_frame:000000000000730E                 db  5Fh ; _
.eh_frame:000000000000730F                 db  0Eh
.eh_frame:0000000000007310                 db  10h
.eh_frame:0000000000007311                 db  49h ; I
.eh_frame:0000000000007312                 db  0Eh
.eh_frame:0000000000007313                 db    8
.eh_frame:0000000000007314                 db  14h
.eh_frame:0000000000007315                 db    0
.eh_frame:0000000000007316                 db    0
.eh_frame:0000000000007317                 db    0
.eh_frame:0000000000007318                 db 0D0h
.eh_frame:0000000000007319                 db    9
.eh_frame:000000000000731A                 db    0
.eh_frame:000000000000731B                 db    0
.eh_frame:000000000000731C                 db  14h
.eh_frame:000000000000731D                 db 0DEh
.eh_frame:000000000000731E                 db 0FFh
.eh_frame:000000000000731F                 db 0FFh
.eh_frame:0000000000007320                 db  4Ah ; J
.eh_frame:0000000000007321                 db    0
.eh_frame:0000000000007322                 db    0
.eh_frame:0000000000007323                 db    0
.eh_frame:0000000000007324                 db    0
.eh_frame:0000000000007325 unk_7325        db    2                 ; DATA XREF: .rodata:format↑o
.eh_frame:0000000000007326                 db  45h ; E
.eh_frame:0000000000007327                 db  0Eh
.eh_frame:0000000000007328                 db  10h
.eh_frame:0000000000007329                 db    0
.eh_frame:000000000000732A                 db    0
.eh_frame:000000000000732B                 db    0
.eh_frame:000000000000732C                 db  18h
.eh_frame:000000000000732D                 db    0
.eh_frame:000000000000732E                 db    0
.eh_frame:000000000000732F                 db    0
.eh_frame:0000000000007330                 db 0E8h
.eh_frame:0000000000007331                 db    9
.eh_frame:0000000000007332                 db    0
.eh_frame:0000000000007333                 db    0
.eh_frame:0000000000007334                 db  4Ch ; L
.eh_frame:0000000000007335                 db 0DEh
.eh_frame:0000000000007336                 db 0FFh
.eh_frame:0000000000007337                 db 0FFh
.eh_frame:0000000000007338                 db  17h
.eh_frame:0000000000007339                 db    0
.eh_frame:000000000000733A                 db    0
.eh_frame:000000000000733B                 db    0
.eh_frame:000000000000733C                 db    0
.eh_frame:000000000000733D                 db  41h ; A
.eh_frame:000000000000733E                 db  0Eh
.eh_frame:000000000000733F                 db  10h
.eh_frame:0000000000007340                 db  83h
.eh_frame:0000000000007341                 db    2
.eh_frame:0000000000007342                 db  51h ; Q
.eh_frame:0000000000007343                 db  0Eh
.eh_frame:0000000000007344                 db    8
.eh_frame:0000000000007345                 db    0
.eh_frame:0000000000007346                 db    0
.eh_frame:0000000000007347                 db    0
.eh_frame:0000000000007348                 db  18h
.eh_frame:0000000000007349                 db    0
.eh_frame:000000000000734A                 db    0
.eh_frame:000000000000734B                 db    0
.eh_frame:000000000000734C                 db    4
.eh_frame:000000000000734D                 db  0Ah
.eh_frame:000000000000734E                 db    0
.eh_frame:000000000000734F                 db    0
.eh_frame:0000000000007350                 db  50h ; P
.eh_frame:0000000000007351                 db 0DEh
.eh_frame:0000000000007352                 db 0FFh
.eh_frame:0000000000007353                 db 0FFh
.eh_frame:0000000000007354                 db  2Eh ; .
.eh_frame:0000000000007355                 db    0
.eh_frame:0000000000007356                 db    0
.eh_frame:0000000000007357                 db    0
.eh_frame:0000000000007358                 db    0
.eh_frame:0000000000007359                 db  47h ; G
.eh_frame:000000000000735A                 db  0Eh
.eh_frame:000000000000735B                 db  10h
.eh_frame:000000000000735C                 db  61h ; a
.eh_frame:000000000000735D                 db  0Ah
.eh_frame:000000000000735E                 db  0Eh
.eh_frame:000000000000735F                 db    8
.eh_frame:0000000000007360                 db  41h ; A
.eh_frame:0000000000007361                 db  0Bh
.eh_frame:0000000000007362                 db    0
.eh_frame:0000000000007363                 db    0
.eh_frame:0000000000007364                 db  24h ; $
.eh_frame:0000000000007365                 db    0
.eh_frame:0000000000007366                 db    0
.eh_frame:0000000000007367                 db    0
.eh_frame:0000000000007368                 db  20h
.eh_frame:0000000000007369                 db  0Ah
.eh_frame:000000000000736A                 db    0
.eh_frame:000000000000736B                 db    0
.eh_frame:000000000000736C                 db  64h ; d
.eh_frame:000000000000736D                 db 0DEh
.eh_frame:000000000000736E                 db 0FFh
.eh_frame:000000000000736F                 db 0FFh
.eh_frame:0000000000007370                 db  28h ; (
.eh_frame:0000000000007371                 db    0
.eh_frame:0000000000007372                 db    0
.eh_frame:0000000000007373                 db    0
.eh_frame:0000000000007374                 db    0
.eh_frame:0000000000007375                 db  41h ; A
.eh_frame:0000000000007376                 db  0Eh
.eh_frame:0000000000007377                 db  10h
.eh_frame:0000000000007378                 db  86h
.eh_frame:0000000000007379                 db    2
.eh_frame:000000000000737A                 db  41h ; A
.eh_frame:000000000000737B                 db  0Eh
.eh_frame:000000000000737C                 db  18h
.eh_frame:000000000000737D                 db  83h
.eh_frame:000000000000737E                 db    3
.eh_frame:000000000000737F                 db  4Dh ; M
.eh_frame:0000000000007380                 db  0Eh
.eh_frame:0000000000007381                 db  20h
.eh_frame:0000000000007382                 db  49h ; I
.eh_frame:0000000000007383                 db  0Eh
.eh_frame:0000000000007384                 db  18h
.eh_frame:0000000000007385                 db  47h ; G
.eh_frame:0000000000007386                 db  0Eh
.eh_frame:0000000000007387                 db  10h
.eh_frame:0000000000007388                 db  41h ; A
.eh_frame:0000000000007389                 db  0Eh
.eh_frame:000000000000738A                 db    8
.eh_frame:000000000000738B                 db    0
.eh_frame:000000000000738C                 db  18h
.eh_frame:000000000000738D                 db    0
.eh_frame:000000000000738E                 db    0
.eh_frame:000000000000738F                 db    0
.eh_frame:0000000000007390                 db  48h ; H
.eh_frame:0000000000007391                 db  0Ah
.eh_frame:0000000000007392                 db    0
.eh_frame:0000000000007393                 db    0
.eh_frame:0000000000007394                 db  6Ch ; l
.eh_frame:0000000000007395                 db 0DEh
.eh_frame:0000000000007396                 db 0FFh
.eh_frame:0000000000007397                 db 0FFh
.eh_frame:0000000000007398                 db  13h
.eh_frame:0000000000007399                 db    0
.eh_frame:000000000000739A                 db    0
.eh_frame:000000000000739B                 db    0
.eh_frame:000000000000739C                 db    0
.eh_frame:000000000000739D                 db  41h ; A
.eh_frame:000000000000739E                 db  0Eh
.eh_frame:000000000000739F                 db  10h
.eh_frame:00000000000073A0                 db  83h
.eh_frame:00000000000073A1                 db    2
.eh_frame:00000000000073A2                 db  50h ; P
.eh_frame:00000000000073A3                 db  0Eh
.eh_frame:00000000000073A4                 db    8
.eh_frame:00000000000073A5                 db    0
.eh_frame:00000000000073A6                 db    0
.eh_frame:00000000000073A7                 db    0
.eh_frame:00000000000073A8                 db  14h
.eh_frame:00000000000073A9                 db    0
.eh_frame:00000000000073AA                 db    0
.eh_frame:00000000000073AB                 db    0
.eh_frame:00000000000073AC                 db  64h ; d
.eh_frame:00000000000073AD                 db  0Ah
.eh_frame:00000000000073AE                 db    0
.eh_frame:00000000000073AF                 db    0
.eh_frame:00000000000073B0                 db  70h ; p
.eh_frame:00000000000073B1                 db 0DEh
.eh_frame:00000000000073B2                 db 0FFh
.eh_frame:00000000000073B3                 db 0FFh
.eh_frame:00000000000073B4                 db  35h ; 5
.eh_frame:00000000000073B5                 db    0
.eh_frame:00000000000073B6                 db    0
.eh_frame:00000000000073B7                 db    0
.eh_frame:00000000000073B8                 db    0
.eh_frame:00000000000073B9                 db  4Bh ; K
.eh_frame:00000000000073BA                 db  0Eh
.eh_frame:00000000000073BB                 db  10h
.eh_frame:00000000000073BC                 db    0
.eh_frame:00000000000073BD                 db    0
.eh_frame:00000000000073BE                 db    0
.eh_frame:00000000000073BF                 db    0
.eh_frame:00000000000073C0                 db  1Ch
.eh_frame:00000000000073C1                 db    0
.eh_frame:00000000000073C2                 db    0
.eh_frame:00000000000073C3                 db    0
.eh_frame:00000000000073C4                 db  7Ch ; |
.eh_frame:00000000000073C5                 db  0Ah
.eh_frame:00000000000073C6                 db    0
.eh_frame:00000000000073C7                 db    0
.eh_frame:00000000000073C8                 db  98h
.eh_frame:00000000000073C9                 db 0DEh
.eh_frame:00000000000073CA                 db 0FFh
.eh_frame:00000000000073CB                 db 0FFh
.eh_frame:00000000000073CC                 db  18h
.eh_frame:00000000000073CD                 db    0
.eh_frame:00000000000073CE                 db    0
.eh_frame:00000000000073CF                 db    0
.eh_frame:00000000000073D0                 db    0
.eh_frame:00000000000073D1                 db  44h ; D
.eh_frame:00000000000073D2                 db  0Eh
.eh_frame:00000000000073D3                 db  10h
.eh_frame:00000000000073D4                 db  4Eh ; N
.eh_frame:00000000000073D5                 db  0Ah
.eh_frame:00000000000073D6                 db  0Eh
.eh_frame:00000000000073D7                 db    8
.eh_frame:00000000000073D8                 db  41h ; A
.eh_frame:00000000000073D9                 db  0Bh
.eh_frame:00000000000073DA                 db    0
.eh_frame:00000000000073DB                 db    0
.eh_frame:00000000000073DC                 db    0
.eh_frame:00000000000073DD                 db    0
.eh_frame:00000000000073DE                 db    0
.eh_frame:00000000000073DF                 db    0
.eh_frame:00000000000073E0                 db  34h ; 4
.eh_frame:00000000000073E1                 db    0
.eh_frame:00000000000073E2                 db    0
.eh_frame:00000000000073E3                 db    0
.eh_frame:00000000000073E4                 db  9Ch
.eh_frame:00000000000073E5                 db  0Ah
.eh_frame:00000000000073E6                 db    0
.eh_frame:00000000000073E7                 db    0
.eh_frame:00000000000073E8                 db  98h
.eh_frame:00000000000073E9                 db 0DEh
.eh_frame:00000000000073EA                 db 0FFh
.eh_frame:00000000000073EB                 db 0FFh
.eh_frame:00000000000073EC                 db  7Bh ; {
.eh_frame:00000000000073ED                 db    0
.eh_frame:00000000000073EE                 db    0
.eh_frame:00000000000073EF                 db    0
.eh_frame:00000000000073F0                 db    0
.eh_frame:00000000000073F1                 db  42h ; B
.eh_frame:00000000000073F2                 db  0Eh
.eh_frame:00000000000073F3                 db  10h
.eh_frame:00000000000073F4                 db  8Ch
.eh_frame:00000000000073F5                 db    2
.eh_frame:00000000000073F6                 db  41h ; A
.eh_frame:00000000000073F7                 db  0Eh
.eh_frame:00000000000073F8                 db  18h
.eh_frame:00000000000073F9                 db  86h
.eh_frame:00000000000073FA                 db    3
.eh_frame:00000000000073FB                 db  41h ; A
.eh_frame:00000000000073FC                 db  0Eh
.eh_frame:00000000000073FD                 db  20h
.eh_frame:00000000000073FE                 db  83h
.eh_frame:00000000000073FF                 db    4
.eh_frame:0000000000007400                 db  7Dh ; }
.eh_frame:0000000000007401                 db  0Ah
.eh_frame:0000000000007402                 db  0Eh
.eh_frame:0000000000007403                 db  18h
.eh_frame:0000000000007404                 db  41h ; A
.eh_frame:0000000000007405                 db  0Eh
.eh_frame:0000000000007406                 db  10h
.eh_frame:0000000000007407                 db  42h ; B
.eh_frame:0000000000007408                 db  0Eh
.eh_frame:0000000000007409                 db    8
.eh_frame:000000000000740A                 db  44h ; D
.eh_frame:000000000000740B                 db  0Bh
.eh_frame:000000000000740C                 db  60h ; `
.eh_frame:000000000000740D                 db  0Ah
.eh_frame:000000000000740E                 db  0Eh
.eh_frame:000000000000740F                 db  18h
.eh_frame:0000000000007410                 db  41h ; A
.eh_frame:0000000000007411                 db  0Eh
.eh_frame:0000000000007412                 db  10h
.eh_frame:0000000000007413                 db  42h ; B
.eh_frame:0000000000007414                 db  0Eh
.eh_frame:0000000000007415                 db    8
.eh_frame:0000000000007416                 db  45h ; E
.eh_frame:0000000000007417                 db  0Bh
.eh_frame:0000000000007418                 db  1Ch
.eh_frame:0000000000007419                 db    0
.eh_frame:000000000000741A                 db    0
.eh_frame:000000000000741B                 db    0
.eh_frame:000000000000741C                 db 0D4h
.eh_frame:000000000000741D                 db  0Ah
.eh_frame:000000000000741E                 db    0
.eh_frame:000000000000741F                 db    0
.eh_frame:0000000000007420                 db 0E0h
.eh_frame:0000000000007421                 db 0DEh
.eh_frame:0000000000007422                 db 0FFh
.eh_frame:0000000000007423                 db 0FFh
.eh_frame:0000000000007424                 db  40h ; @
.eh_frame:0000000000007425                 db    0
.eh_frame:0000000000007426                 db    0
.eh_frame:0000000000007427                 db    0
.eh_frame:0000000000007428                 db    0
.eh_frame:0000000000007429                 db  44h ; D
.eh_frame:000000000000742A                 db  0Eh
.eh_frame:000000000000742B                 db  10h
.eh_frame:000000000000742C                 db  83h
.eh_frame:000000000000742D                 db    2
.eh_frame:000000000000742E                 db  5Ah ; Z
.eh_frame:000000000000742F                 db  0Ah
.eh_frame:0000000000007430                 db  0Eh
.eh_frame:0000000000007431                 db    8
.eh_frame:0000000000007432                 db  4Ah ; J
.eh_frame:0000000000007433                 db  0Bh
.eh_frame:0000000000007434                 db  53h ; S
.eh_frame:0000000000007435                 db  0Eh
.eh_frame:0000000000007436                 db    8
.eh_frame:0000000000007437                 db    0
.eh_frame:0000000000007438                 db  2Ch ; ,
.eh_frame:0000000000007439                 db    0
.eh_frame:000000000000743A                 db    0
.eh_frame:000000000000743B                 db    0
.eh_frame:000000000000743C                 db 0F4h
.eh_frame:000000000000743D                 db  0Ah
.eh_frame:000000000000743E                 db    0
.eh_frame:000000000000743F                 db    0
.eh_frame:0000000000007440                 db    0
.eh_frame:0000000000007441                 db 0DFh
.eh_frame:0000000000007442                 db 0FFh
.eh_frame:0000000000007443                 db 0FFh
.eh_frame:0000000000007444                 db  57h ; W
.eh_frame:0000000000007445                 db    0
.eh_frame:0000000000007446                 db    0
.eh_frame:0000000000007447                 db    0
.eh_frame:0000000000007448                 db    0
.eh_frame:0000000000007449                 db  63h ; c
.eh_frame:000000000000744A                 db  0Eh
.eh_frame:000000000000744B                 db  10h
.eh_frame:000000000000744C                 db  8Ch
.eh_frame:000000000000744D                 db    2
.eh_frame:000000000000744E                 db  41h ; A
.eh_frame:000000000000744F                 db  0Eh
.eh_frame:0000000000007450                 db  18h
.eh_frame:0000000000007451                 db  86h
.eh_frame:0000000000007452                 db    3
.eh_frame:0000000000007453                 db  44h ; D
.eh_frame:0000000000007454                 db  0Eh
.eh_frame:0000000000007455                 db  20h
.eh_frame:0000000000007456                 db  83h
.eh_frame:0000000000007457                 db    4
.eh_frame:0000000000007458                 db  6Bh ; k
.eh_frame:0000000000007459                 db  0Eh
.eh_frame:000000000000745A                 db  18h
.eh_frame:000000000000745B                 db  41h ; A
.eh_frame:000000000000745C                 db  0Eh
.eh_frame:000000000000745D                 db  10h
.eh_frame:000000000000745E                 db  42h ; B
.eh_frame:000000000000745F                 db  0Eh
.eh_frame:0000000000007460                 db    8
.eh_frame:0000000000007461                 db    0
.eh_frame:0000000000007462                 db    0
.eh_frame:0000000000007463                 db    0
.eh_frame:0000000000007464                 db    0
.eh_frame:0000000000007465                 db    0
.eh_frame:0000000000007466                 db    0
.eh_frame:0000000000007467                 db    0
.eh_frame:0000000000007468                 db  3Ch ; <
.eh_frame:0000000000007469                 db    0
.eh_frame:000000000000746A                 db    0
.eh_frame:000000000000746B                 db    0
.eh_frame:000000000000746C                 db  24h ; $
.eh_frame:000000000000746D                 db  0Bh
.eh_frame:000000000000746E                 db    0
.eh_frame:000000000000746F                 db    0
.eh_frame:0000000000007470                 db  30h ; 0
.eh_frame:0000000000007471                 db 0DFh
.eh_frame:0000000000007472                 db 0FFh
.eh_frame:0000000000007473                 db 0FFh
.eh_frame:0000000000007474                 db  83h
.eh_frame:0000000000007475                 db    0
.eh_frame:0000000000007476                 db    0
.eh_frame:0000000000007477                 db    0
.eh_frame:0000000000007478                 db    0
.eh_frame:0000000000007479                 db  42h ; B
.eh_frame:000000000000747A                 db  0Eh
.eh_frame:000000000000747B                 db  10h
.eh_frame:000000000000747C                 db  8Dh
.eh_frame:000000000000747D                 db    2
.eh_frame:000000000000747E                 db  42h ; B
.eh_frame:000000000000747F                 db  0Eh
.eh_frame:0000000000007480                 db  18h
.eh_frame:0000000000007481                 db  8Ch
.eh_frame:0000000000007482                 db    3
.eh_frame:0000000000007483                 db  44h ; D
.eh_frame:0000000000007484                 db  0Eh
.eh_frame:0000000000007485                 db  20h
.eh_frame:0000000000007486                 db  86h
.eh_frame:0000000000007487                 db    4
.eh_frame:0000000000007488                 db  41h ; A
.eh_frame:0000000000007489                 db  0Eh
.eh_frame:000000000000748A                 db  28h ; (
.eh_frame:000000000000748B                 db  83h
.eh_frame:000000000000748C                 db    5
.eh_frame:000000000000748D                 db  4Ah ; J
.eh_frame:000000000000748E                 db  0Eh
.eh_frame:000000000000748F                 db  40h ; @
.eh_frame:0000000000007490                 db    2
.eh_frame:0000000000007491                 db  64h ; d
.eh_frame:0000000000007492                 db  0Ah
.eh_frame:0000000000007493                 db  0Eh
.eh_frame:0000000000007494                 db  28h ; (
.eh_frame:0000000000007495                 db  41h ; A
.eh_frame:0000000000007496                 db  0Eh
.eh_frame:0000000000007497                 db  20h
.eh_frame:0000000000007498                 db  41h ; A
.eh_frame:0000000000007499                 db  0Eh
.eh_frame:000000000000749A                 db  18h
.eh_frame:000000000000749B                 db  42h ; B
.eh_frame:000000000000749C                 db  0Eh
.eh_frame:000000000000749D                 db  10h
.eh_frame:000000000000749E                 db  42h ; B
.eh_frame:000000000000749F                 db  0Eh
.eh_frame:00000000000074A0                 db    8
.eh_frame:00000000000074A1                 db  41h ; A
.eh_frame:00000000000074A2                 db  0Bh
.eh_frame:00000000000074A3                 db    0
.eh_frame:00000000000074A4                 db    0
.eh_frame:00000000000074A5                 db    0
.eh_frame:00000000000074A6                 db    0
.eh_frame:00000000000074A7                 db    0
.eh_frame:00000000000074A8                 db  4Ch ; L
.eh_frame:00000000000074A9                 db    0
.eh_frame:00000000000074AA                 db    0
.eh_frame:00000000000074AB                 db    0
.eh_frame:00000000000074AC                 db  64h ; d
.eh_frame:00000000000074AD                 db  0Bh
.eh_frame:00000000000074AE                 db    0
.eh_frame:00000000000074AF                 db    0
.eh_frame:00000000000074B0                 db  80h
.eh_frame:00000000000074B1                 db 0DFh
.eh_frame:00000000000074B2                 db 0FFh
.eh_frame:00000000000074B3                 db 0FFh
.eh_frame:00000000000074B4                 db  7Dh ; }
.eh_frame:00000000000074B5                 db    0
.eh_frame:00000000000074B6                 db    0
.eh_frame:00000000000074B7                 db    0
.eh_frame:00000000000074B8                 db    0
.eh_frame:00000000000074B9                 db  42h ; B
.eh_frame:00000000000074BA                 db  0Eh
.eh_frame:00000000000074BB                 db  10h
.eh_frame:00000000000074BC                 db  8Ch
.eh_frame:00000000000074BD                 db    2
.eh_frame:00000000000074BE                 db  41h ; A
.eh_frame:00000000000074BF                 db  0Eh
.eh_frame:00000000000074C0                 db  18h
.eh_frame:00000000000074C1                 db  86h
.eh_frame:00000000000074C2                 db    3
.eh_frame:00000000000074C3                 db  44h ; D
.eh_frame:00000000000074C4                 db  0Eh
.eh_frame:00000000000074C5                 db  20h
.eh_frame:00000000000074C6                 db  83h
.eh_frame:00000000000074C7                 db    4
.eh_frame:00000000000074C8                 db  69h ; i
.eh_frame:00000000000074C9                 db  0Ah
.eh_frame:00000000000074CA                 db  0Eh
.eh_frame:00000000000074CB                 db  18h
.eh_frame:00000000000074CC                 db  41h ; A
.eh_frame:00000000000074CD                 db  0Eh
.eh_frame:00000000000074CE                 db  10h
.eh_frame:00000000000074CF                 db  42h ; B
.eh_frame:00000000000074D0                 db  0Eh
.eh_frame:00000000000074D1                 db    8
.eh_frame:00000000000074D2                 db  45h ; E
.eh_frame:00000000000074D3                 db  0Bh
.eh_frame:00000000000074D4                 db  55h ; U
.eh_frame:00000000000074D5                 db  0Ah
.eh_frame:00000000000074D6                 db  0Eh
.eh_frame:00000000000074D7                 db  18h
.eh_frame:00000000000074D8                 db  41h ; A
.eh_frame:00000000000074D9                 db  0Eh
.eh_frame:00000000000074DA                 db  10h
.eh_frame:00000000000074DB                 db  42h ; B
.eh_frame:00000000000074DC                 db  0Eh
.eh_frame:00000000000074DD                 db    8
.eh_frame:00000000000074DE                 db  48h ; H
.eh_frame:00000000000074DF                 db  0Bh
.eh_frame:00000000000074E0                 db  41h ; A
.eh_frame:00000000000074E1                 db  0Ah
.eh_frame:00000000000074E2                 db  0Eh
.eh_frame:00000000000074E3                 db  18h
.eh_frame:00000000000074E4                 db  46h ; F
.eh_frame:00000000000074E5                 db  0Eh
.eh_frame:00000000000074E6                 db  10h
.eh_frame:00000000000074E7                 db  42h ; B
.eh_frame:00000000000074E8                 db  0Eh
.eh_frame:00000000000074E9                 db    8
.eh_frame:00000000000074EA                 db  47h ; G
.eh_frame:00000000000074EB                 db  0Bh
.eh_frame:00000000000074EC                 db  49h ; I
.eh_frame:00000000000074ED                 db  0Eh
.eh_frame:00000000000074EE                 db  18h
.eh_frame:00000000000074EF                 db  41h ; A
.eh_frame:00000000000074F0                 db  0Eh
.eh_frame:00000000000074F1                 db  10h
.eh_frame:00000000000074F2                 db  42h ; B
.eh_frame:00000000000074F3                 db  0Eh
.eh_frame:00000000000074F4                 db    8
.eh_frame:00000000000074F5                 db    0
.eh_frame:00000000000074F6                 db    0
.eh_frame:00000000000074F7                 db    0
.eh_frame:00000000000074F8                 db  1Ch
.eh_frame:00000000000074F9                 db    0
.eh_frame:00000000000074FA                 db    0
.eh_frame:00000000000074FB                 db    0
.eh_frame:00000000000074FC                 db 0B4h
.eh_frame:00000000000074FD                 db  0Bh
.eh_frame:00000000000074FE                 db    0
.eh_frame:00000000000074FF                 db    0
.eh_frame:0000000000007500                 db 0B0h
.eh_frame:0000000000007501                 db 0DFh
.eh_frame:0000000000007502                 db 0FFh
.eh_frame:0000000000007503                 db 0FFh
.eh_frame:0000000000007504                 db  60h ; `
.eh_frame:0000000000007505                 db    0
.eh_frame:0000000000007506                 db    0
.eh_frame:0000000000007507                 db    0
.eh_frame:0000000000007508                 db    0
.eh_frame:0000000000007509                 db  44h ; D
.eh_frame:000000000000750A                 db  0Eh
.eh_frame:000000000000750B                 db  10h
.eh_frame:000000000000750C                 db  75h ; u
.eh_frame:000000000000750D                 db  0Ah
.eh_frame:000000000000750E                 db  0Eh
.eh_frame:000000000000750F                 db    8
.eh_frame:0000000000007510                 db  47h ; G
.eh_frame:0000000000007511                 db  0Bh
.eh_frame:0000000000007512                 db  5Fh ; _
.eh_frame:0000000000007513                 db  0Eh
.eh_frame:0000000000007514                 db    8
.eh_frame:0000000000007515                 db    0
.eh_frame:0000000000007516                 db    0
.eh_frame:0000000000007517                 db    0
.eh_frame:0000000000007518                 db  1Ch
.eh_frame:0000000000007519                 db    0
.eh_frame:000000000000751A                 db    0
.eh_frame:000000000000751B                 db    0
.eh_frame:000000000000751C                 db 0D4h
.eh_frame:000000000000751D                 db  0Bh
.eh_frame:000000000000751E                 db    0
.eh_frame:000000000000751F                 db    0
.eh_frame:0000000000007520                 db 0F0h
.eh_frame:0000000000007521                 db 0DFh
.eh_frame:0000000000007522                 db 0FFh
.eh_frame:0000000000007523                 db 0FFh
.eh_frame:0000000000007524                 db  3Ch ; <
.eh_frame:0000000000007525                 db    0
.eh_frame:0000000000007526                 db    0
.eh_frame:0000000000007527                 db    0
.eh_frame:0000000000007528                 db    0
.eh_frame:0000000000007529                 db  44h ; D
.eh_frame:000000000000752A                 db  0Eh
.eh_frame:000000000000752B                 db  10h
.eh_frame:000000000000752C                 db  61h ; a
.eh_frame:000000000000752D                 db  0Ah
.eh_frame:000000000000752E                 db  0Eh
.eh_frame:000000000000752F                 db    8
.eh_frame:0000000000007530                 db  4Bh ; K
.eh_frame:0000000000007531                 db  0Bh
.eh_frame:0000000000007532                 db  4Bh ; K
.eh_frame:0000000000007533                 db  0Eh
.eh_frame:0000000000007534                 db    8
.eh_frame:0000000000007535                 db    0
.eh_frame:0000000000007536                 db    0
.eh_frame:0000000000007537                 db    0
.eh_frame:0000000000007538                 db  44h ; D
.eh_frame:0000000000007539                 db    0
.eh_frame:000000000000753A                 db    0
.eh_frame:000000000000753B                 db    0
.eh_frame:000000000000753C                 db 0F4h
.eh_frame:000000000000753D                 db  0Bh
.eh_frame:000000000000753E                 db    0
.eh_frame:000000000000753F                 db    0
.eh_frame:0000000000007540                 db  10h
.eh_frame:0000000000007541                 db 0E0h
.eh_frame:0000000000007542                 db 0FFh
.eh_frame:0000000000007543                 db 0FFh
.eh_frame:0000000000007544                 db  65h ; e
.eh_frame:0000000000007545                 db    0
.eh_frame:0000000000007546                 db    0
.eh_frame:0000000000007547                 db    0
.eh_frame:0000000000007548                 db    0
.eh_frame:0000000000007549                 db  42h ; B
.eh_frame:000000000000754A                 db  0Eh
.eh_frame:000000000000754B                 db  10h
.eh_frame:000000000000754C                 db  8Fh
.eh_frame:000000000000754D                 db    2
.eh_frame:000000000000754E                 db  42h ; B
.eh_frame:000000000000754F                 db  0Eh
.eh_frame:0000000000007550                 db  18h
.eh_frame:0000000000007551                 db  8Eh
.eh_frame:0000000000007552                 db    3
.eh_frame:0000000000007553                 db  45h ; E
.eh_frame:0000000000007554                 db  0Eh
.eh_frame:0000000000007555                 db  20h
.eh_frame:0000000000007556                 db  8Dh
.eh_frame:0000000000007557                 db    4
.eh_frame:0000000000007558                 db  42h ; B
.eh_frame:0000000000007559                 db  0Eh
.eh_frame:000000000000755A                 db  28h ; (
.eh_frame:000000000000755B                 db  8Ch
.eh_frame:000000000000755C                 db    5
.eh_frame:000000000000755D                 db  48h ; H
.eh_frame:000000000000755E                 db  0Eh
.eh_frame:000000000000755F                 db  30h ; 0
.eh_frame:0000000000007560                 db  86h
.eh_frame:0000000000007561                 db    6
.eh_frame:0000000000007562                 db  48h ; H
.eh_frame:0000000000007563                 db  0Eh
.eh_frame:0000000000007564                 db  38h ; 8
.eh_frame:0000000000007565                 db  83h
.eh_frame:0000000000007566                 db    7
.eh_frame:0000000000007567                 db  4Dh ; M
.eh_frame:0000000000007568                 db  0Eh
.eh_frame:0000000000007569                 db  40h ; @
.eh_frame:000000000000756A                 db  72h ; r
.eh_frame:000000000000756B                 db  0Eh
.eh_frame:000000000000756C                 db  38h ; 8
.eh_frame:000000000000756D                 db  41h ; A
.eh_frame:000000000000756E                 db  0Eh
.eh_frame:000000000000756F                 db  30h ; 0
.eh_frame:0000000000007570                 db  41h ; A
.eh_frame:0000000000007571                 db  0Eh
.eh_frame:0000000000007572                 db  28h ; (
.eh_frame:0000000000007573                 db  42h ; B
.eh_frame:0000000000007574                 db  0Eh
.eh_frame:0000000000007575                 db  20h
.eh_frame:0000000000007576                 db  42h ; B
.eh_frame:0000000000007577                 db  0Eh
.eh_frame:0000000000007578                 db  18h
.eh_frame:0000000000007579                 db  42h ; B
.eh_frame:000000000000757A                 db  0Eh
.eh_frame:000000000000757B                 db  10h
.eh_frame:000000000000757C                 db  42h ; B
.eh_frame:000000000000757D                 db  0Eh
.eh_frame:000000000000757E                 db    8
.eh_frame:000000000000757F                 db    0
.eh_frame:0000000000007580                 db  14h
.eh_frame:0000000000007581                 db    0
.eh_frame:0000000000007582                 db    0
.eh_frame:0000000000007583                 db    0
.eh_frame:0000000000007584                 db  3Ch ; <
.eh_frame:0000000000007585                 db  0Ch
.eh_frame:0000000000007586                 db    0
.eh_frame:0000000000007587                 db    0
.eh_frame:0000000000007588                 db  38h ; 8
.eh_frame:0000000000007589                 db 0E0h
.eh_frame:000000000000758A                 db 0FFh
.eh_frame:000000000000758B                 db 0FFh
.eh_frame:000000000000758C                 db    2
.eh_frame:000000000000758D                 db    0
.eh_frame:000000000000758E                 db    0
.eh_frame:000000000000758F                 db    0
.eh_frame:0000000000007590                 db    0
.eh_frame:0000000000007591                 db    0
.eh_frame:0000000000007592                 db    0
.eh_frame:0000000000007593                 db    0
.eh_frame:0000000000007594                 db    0
.eh_frame:0000000000007595                 db    0
.eh_frame:0000000000007596                 db    0
.eh_frame:0000000000007597                 db    0
.eh_frame:0000000000007598                 db  10h
.eh_frame:0000000000007599                 db    0
.eh_frame:000000000000759A                 db    0
.eh_frame:000000000000759B                 db    0
.eh_frame:000000000000759C                 db  54h ; T
.eh_frame:000000000000759D                 db  0Ch
.eh_frame:000000000000759E                 db    0
.eh_frame:000000000000759F                 db    0
.eh_frame:00000000000075A0                 db  30h ; 0
.eh_frame:00000000000075A1                 db 0E0h
.eh_frame:00000000000075A2                 db 0FFh
.eh_frame:00000000000075A3                 db 0FFh
.eh_frame:00000000000075A4                 db  0Eh
.eh_frame:00000000000075A5                 db    0
.eh_frame:00000000000075A6                 db    0
.eh_frame:00000000000075A7                 db    0
.eh_frame:00000000000075A8                 db    0
.eh_frame:00000000000075A9                 db    0
.eh_frame:00000000000075AA                 db    0
.eh_frame:00000000000075AB                 db    0
.eh_frame:00000000000075AC __FRAME_END__   db    0
.eh_frame:00000000000075AD                 db    0
.eh_frame:00000000000075AE                 db    0
.eh_frame:00000000000075AF                 db    0
.eh_frame:00000000000075AF _eh_frame       ends
.eh_frame:00000000000075AF
.init_array:0000000000207B10 ; ELF Initialization Function Table
.init_array:0000000000207B10 ; ===========================================================================
.init_array:0000000000207B10
.init_array:0000000000207B10 ; Segment type: Pure data
.init_array:0000000000207B10 ; Segment permissions: Read/Write
.init_array:0000000000207B10 _init_array     segment qword public 'DATA' use64
.init_array:0000000000207B10                 assume cs:_init_array
.init_array:0000000000207B10                 ;org 207B10h
.init_array:0000000000207B10 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000207B10                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000207B10                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000207B10 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000207B10
.fini_array:0000000000207B18 ; ELF Termination Function Table
.fini_array:0000000000207B18 ; ===========================================================================
.fini_array:0000000000207B18
.fini_array:0000000000207B18 ; Segment type: Pure data
.fini_array:0000000000207B18 ; Segment permissions: Read/Write
.fini_array:0000000000207B18 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000207B18                 assume cs:_fini_array
.fini_array:0000000000207B18                 ;org 207B18h
.fini_array:0000000000207B18 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000207B18                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000207B18 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000207B18
.data.rel.ro:0000000000207B20 ; ===========================================================================
.data.rel.ro:0000000000207B20
.data.rel.ro:0000000000207B20 ; Segment type: Pure data
.data.rel.ro:0000000000207B20 ; Segment permissions: Read/Write
.data.rel.ro:0000000000207B20 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000207B20                 assume cs:_data_rel_ro
.data.rel.ro:0000000000207B20                 ;org 207B20h
.data.rel.ro:0000000000207B20 ; struct option longopts
.data.rel.ro:0000000000207B20 longopts        dq offset aTabs         ; name
.data.rel.ro:0000000000207B20                                         ; DATA XREF: main+E↑o
.data.rel.ro:0000000000207B20                 dd 1                    ; has_arg ; "tabs"
.data.rel.ro:0000000000207B20                 db 4 dup(0)
.data.rel.ro:0000000000207B20                 dq 0                    ; flag
.data.rel.ro:0000000000207B20                 dd 74h                  ; val
.data.rel.ro:0000000000207B20                 db 4 dup(0)
.data.rel.ro:0000000000207B40                 dq offset aAll          ; "all"
.data.rel.ro:0000000000207B48                 db    0
.data.rel.ro:0000000000207B49                 db    0
.data.rel.ro:0000000000207B4A                 db    0
.data.rel.ro:0000000000207B4B                 db    0
.data.rel.ro:0000000000207B4C                 db    0
.data.rel.ro:0000000000207B4D                 db    0
.data.rel.ro:0000000000207B4E                 db    0
.data.rel.ro:0000000000207B4F                 db    0
.data.rel.ro:0000000000207B50                 db    0
.data.rel.ro:0000000000207B51                 db    0
.data.rel.ro:0000000000207B52                 db    0
.data.rel.ro:0000000000207B53                 db    0
.data.rel.ro:0000000000207B54                 db    0
.data.rel.ro:0000000000207B55                 db    0
.data.rel.ro:0000000000207B56                 db    0
.data.rel.ro:0000000000207B57                 db    0
.data.rel.ro:0000000000207B58                 db  61h ; a
.data.rel.ro:0000000000207B59                 db    0
.data.rel.ro:0000000000207B5A                 db    0
.data.rel.ro:0000000000207B5B                 db    0
.data.rel.ro:0000000000207B5C                 db    0
.data.rel.ro:0000000000207B5D                 db    0
.data.rel.ro:0000000000207B5E                 db    0
.data.rel.ro:0000000000207B5F                 db    0
.data.rel.ro:0000000000207B60                 dq offset aFirstOnly    ; "first-only"
.data.rel.ro:0000000000207B68                 db    0
.data.rel.ro:0000000000207B69                 db    0
.data.rel.ro:0000000000207B6A                 db    0
.data.rel.ro:0000000000207B6B                 db    0
.data.rel.ro:0000000000207B6C                 db    0
.data.rel.ro:0000000000207B6D                 db    0
.data.rel.ro:0000000000207B6E                 db    0
.data.rel.ro:0000000000207B6F                 db    0
.data.rel.ro:0000000000207B70                 db    0
.data.rel.ro:0000000000207B71                 db    0
.data.rel.ro:0000000000207B72                 db    0
.data.rel.ro:0000000000207B73                 db    0
.data.rel.ro:0000000000207B74                 db    0
.data.rel.ro:0000000000207B75                 db    0
.data.rel.ro:0000000000207B76                 db    0
.data.rel.ro:0000000000207B77                 db    0
.data.rel.ro:0000000000207B78                 db  80h
.data.rel.ro:0000000000207B79                 db    0
.data.rel.ro:0000000000207B7A                 db    0
.data.rel.ro:0000000000207B7B                 db    0
.data.rel.ro:0000000000207B7C                 db    0
.data.rel.ro:0000000000207B7D                 db    0
.data.rel.ro:0000000000207B7E                 db    0
.data.rel.ro:0000000000207B7F                 db    0
.data.rel.ro:0000000000207B80                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000207B88                 db    0
.data.rel.ro:0000000000207B89                 db    0
.data.rel.ro:0000000000207B8A                 db    0
.data.rel.ro:0000000000207B8B                 db    0
.data.rel.ro:0000000000207B8C                 db    0
.data.rel.ro:0000000000207B8D                 db    0
.data.rel.ro:0000000000207B8E                 db    0
.data.rel.ro:0000000000207B8F                 db    0
.data.rel.ro:0000000000207B90                 db    0
.data.rel.ro:0000000000207B91                 db    0
.data.rel.ro:0000000000207B92                 db    0
.data.rel.ro:0000000000207B93                 db    0
.data.rel.ro:0000000000207B94                 db    0
.data.rel.ro:0000000000207B95                 db    0
.data.rel.ro:0000000000207B96                 db    0
.data.rel.ro:0000000000207B97                 db    0
.data.rel.ro:0000000000207B98                 db  7Eh ; ~
.data.rel.ro:0000000000207B99                 db 0FFh
.data.rel.ro:0000000000207B9A                 db 0FFh
.data.rel.ro:0000000000207B9B                 db 0FFh
.data.rel.ro:0000000000207B9C                 db    0
.data.rel.ro:0000000000207B9D                 db    0
.data.rel.ro:0000000000207B9E                 db    0
.data.rel.ro:0000000000207B9F                 db    0
.data.rel.ro:0000000000207BA0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000207BA8                 db    0
.data.rel.ro:0000000000207BA9                 db    0
.data.rel.ro:0000000000207BAA                 db    0
.data.rel.ro:0000000000207BAB                 db    0
.data.rel.ro:0000000000207BAC                 db    0
.data.rel.ro:0000000000207BAD                 db    0
.data.rel.ro:0000000000207BAE                 db    0
.data.rel.ro:0000000000207BAF                 db    0
.data.rel.ro:0000000000207BB0                 db    0
.data.rel.ro:0000000000207BB1                 db    0
.data.rel.ro:0000000000207BB2                 db    0
.data.rel.ro:0000000000207BB3                 db    0
.data.rel.ro:0000000000207BB4                 db    0
.data.rel.ro:0000000000207BB5                 db    0
.data.rel.ro:0000000000207BB6                 db    0
.data.rel.ro:0000000000207BB7                 db    0
.data.rel.ro:0000000000207BB8                 db  7Dh ; }
.data.rel.ro:0000000000207BB9                 db 0FFh
.data.rel.ro:0000000000207BBA                 db 0FFh
.data.rel.ro:0000000000207BBB                 db 0FFh
.data.rel.ro:0000000000207BBC                 db    0
.data.rel.ro:0000000000207BBD                 db    0
.data.rel.ro:0000000000207BBE                 db    0
.data.rel.ro:0000000000207BBF                 db    0
.data.rel.ro:0000000000207BC0                 db    0
.data.rel.ro:0000000000207BC1                 db    0
.data.rel.ro:0000000000207BC2                 db    0
.data.rel.ro:0000000000207BC3                 db    0
.data.rel.ro:0000000000207BC4                 db    0
.data.rel.ro:0000000000207BC5                 db    0
.data.rel.ro:0000000000207BC6                 db    0
.data.rel.ro:0000000000207BC7                 db    0
.data.rel.ro:0000000000207BC8                 db    0
.data.rel.ro:0000000000207BC9                 db    0
.data.rel.ro:0000000000207BCA                 db    0
.data.rel.ro:0000000000207BCB                 db    0
.data.rel.ro:0000000000207BCC                 db    0
.data.rel.ro:0000000000207BCD                 db    0
.data.rel.ro:0000000000207BCE                 db    0
.data.rel.ro:0000000000207BCF                 db    0
.data.rel.ro:0000000000207BD0                 db    0
.data.rel.ro:0000000000207BD1                 db    0
.data.rel.ro:0000000000207BD2                 db    0
.data.rel.ro:0000000000207BD3                 db    0
.data.rel.ro:0000000000207BD4                 db    0
.data.rel.ro:0000000000207BD5                 db    0
.data.rel.ro:0000000000207BD6                 db    0
.data.rel.ro:0000000000207BD7                 db    0
.data.rel.ro:0000000000207BD8                 db    0
.data.rel.ro:0000000000207BD9                 db    0
.data.rel.ro:0000000000207BDA                 db    0
.data.rel.ro:0000000000207BDB                 db    0
.data.rel.ro:0000000000207BDC                 db    0
.data.rel.ro:0000000000207BDD                 db    0
.data.rel.ro:0000000000207BDE                 db    0
.data.rel.ro:0000000000207BDF                 db    0
.data.rel.ro:0000000000207BE0                 public quoting_style_args
.data.rel.ro:0000000000207BE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000207BE8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000207BF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000207BF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000207C00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000207C08                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000207C10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000207C18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000207C20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000207C28                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000207C30                 db    0
.data.rel.ro:0000000000207C31                 db    0
.data.rel.ro:0000000000207C32                 db    0
.data.rel.ro:0000000000207C33                 db    0
.data.rel.ro:0000000000207C34                 db    0
.data.rel.ro:0000000000207C35                 db    0
.data.rel.ro:0000000000207C36                 db    0
.data.rel.ro:0000000000207C37                 db    0
.data.rel.ro:0000000000207C37 _data_rel_ro    ends
.data.rel.ro:0000000000207C37
LOAD:0000000000207C38 ; ELF Dynamic Information
LOAD:0000000000207C38 ; ===========================================================================
LOAD:0000000000207C38
LOAD:0000000000207C38 ; Segment type: Pure data
LOAD:0000000000207C38 ; Segment permissions: Read/Write
LOAD:0000000000207C38 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207C38                 assume cs:LOAD
LOAD:0000000000207C38                 ;org 207C38h
LOAD:0000000000207C38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000207C38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000207C38                                         ; DT_NEEDED libc.so.6
LOAD:0000000000207C48                 Elf64_Dyn <0Ch, 1448h>  ; DT_INIT
LOAD:0000000000207C58                 Elf64_Dyn <0Dh, 55E0h>  ; DT_FINI
LOAD:0000000000207C68                 Elf64_Dyn <19h, 207B10h> ; DT_INIT_ARRAY
LOAD:0000000000207C78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000207C88                 Elf64_Dyn <1Ah, 207B18h> ; DT_FINI_ARRAY
LOAD:0000000000207C98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000207CA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000207CB8                 Elf64_Dyn <5, 8C8h>     ; DT_STRTAB
LOAD:0000000000207CC8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000207CD8                 Elf64_Dyn <0Ah, 2EBh>   ; DT_STRSZ
LOAD:0000000000207CE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000207CF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000207D08                 Elf64_Dyn <3, 207E28h>  ; DT_PLTGOT
LOAD:0000000000207D18                 Elf64_Dyn <2, 480h>     ; DT_PLTRELSZ
LOAD:0000000000207D28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000207D38                 Elf64_Dyn <17h, 0FC8h>  ; DT_JMPREL
LOAD:0000000000207D48                 Elf64_Dyn <7, 0C98h>    ; DT_RELA
LOAD:0000000000207D58                 Elf64_Dyn <8, 330h>     ; DT_RELASZ
LOAD:0000000000207D68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000207D78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000207D88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000207D98                 Elf64_Dyn <6FFFFFFEh, 0C38h> ; DT_VERNEED
LOAD:0000000000207DA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000207DB8                 Elf64_Dyn <6FFFFFF0h, 0BB4h> ; DT_VERSYM
LOAD:0000000000207DC8                 Elf64_Dyn <6FFFFFF9h, 16h> ; DT_RELACOUNT
LOAD:0000000000207DD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000207DE8                 db    0
LOAD:0000000000207DE9                 db    0
LOAD:0000000000207DEA                 db    0
LOAD:0000000000207DEB                 db    0
LOAD:0000000000207DEC                 db    0
LOAD:0000000000207DED                 db    0
LOAD:0000000000207DEE                 db    0
LOAD:0000000000207DEF                 db    0
LOAD:0000000000207DF0                 db    0
LOAD:0000000000207DF1                 db    0
LOAD:0000000000207DF2                 db    0
LOAD:0000000000207DF3                 db    0
LOAD:0000000000207DF4                 db    0
LOAD:0000000000207DF5                 db    0
LOAD:0000000000207DF6                 db    0
LOAD:0000000000207DF7                 db    0
LOAD:0000000000207DF8                 db    0
LOAD:0000000000207DF9                 db    0
LOAD:0000000000207DFA                 db    0
LOAD:0000000000207DFB                 db    0
LOAD:0000000000207DFC                 db    0
LOAD:0000000000207DFD                 db    0
LOAD:0000000000207DFE                 db    0
LOAD:0000000000207DFF                 db    0
LOAD:0000000000207E00                 db    0
LOAD:0000000000207E01                 db    0
LOAD:0000000000207E02                 db    0
LOAD:0000000000207E03                 db    0
LOAD:0000000000207E04                 db    0
LOAD:0000000000207E05                 db    0
LOAD:0000000000207E06                 db    0
LOAD:0000000000207E07                 db    0
LOAD:0000000000207E08                 db    0
LOAD:0000000000207E09                 db    0
LOAD:0000000000207E0A                 db    0
LOAD:0000000000207E0B                 db    0
LOAD:0000000000207E0C                 db    0
LOAD:0000000000207E0D                 db    0
LOAD:0000000000207E0E                 db    0
LOAD:0000000000207E0F                 db    0
LOAD:0000000000207E10                 db    0
LOAD:0000000000207E11                 db    0
LOAD:0000000000207E12                 db    0
LOAD:0000000000207E13                 db    0
LOAD:0000000000207E14                 db    0
LOAD:0000000000207E15                 db    0
LOAD:0000000000207E16                 db    0
LOAD:0000000000207E17                 db    0
LOAD:0000000000207E18                 db    0
LOAD:0000000000207E19                 db    0
LOAD:0000000000207E1A                 db    0
LOAD:0000000000207E1B                 db    0
LOAD:0000000000207E1C                 db    0
LOAD:0000000000207E1D                 db    0
LOAD:0000000000207E1E                 db    0
LOAD:0000000000207E1F                 db    0
LOAD:0000000000207E20                 db    0
LOAD:0000000000207E21                 db    0
LOAD:0000000000207E22                 db    0
LOAD:0000000000207E23                 db    0
LOAD:0000000000207E24                 db    0
LOAD:0000000000207E25                 db    0
LOAD:0000000000207E26                 db    0
LOAD:0000000000207E27                 db    0
LOAD:0000000000207E27 LOAD            ends
LOAD:0000000000207E27
.got:0000000000207E28 ; ===========================================================================
.got:0000000000207E28
.got:0000000000207E28 ; Segment type: Pure data
.got:0000000000207E28 ; Segment permissions: Read/Write
.got:0000000000207E28 _got            segment qword public 'DATA' use64
.got:0000000000207E28                 assume cs:_got
.got:0000000000207E28                 ;org 207E28h
.got:0000000000207E28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000207E30 qword_207E30    dq 0                    ; DATA XREF: sub_1460↑r
.got:0000000000207E38 qword_207E38    dq 0                    ; DATA XREF: sub_1460+6↑r
.got:0000000000207E40 __uflow_ptr     dq offset __uflow       ; DATA XREF: ___uflow↑r
.got:0000000000207E48 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000207E50 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000207E58 __errno_location_ptr dq offset __errno_location
.got:0000000000207E58                                         ; DATA XREF: ___errno_location↑r
.got:0000000000207E60 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000207E68 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000207E70 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000207E78 clearerr_unlocked_ptr dq offset clearerr_unlocked
.got:0000000000207E78                                         ; DATA XREF: _clearerr_unlocked↑r
.got:0000000000207E80 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000207E88 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000207E90 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000207E90                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000207E98 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000207EA0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000207EA0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000207EA8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000207EB0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000207EB0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000207EB8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000207EC0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000207EC8 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000207ED0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000207ED8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000207EE0 __assert_fail_ptr dq offset __assert_fail
.got:0000000000207EE0                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000207EE8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000207EF0 strspn_ptr      dq offset strspn        ; DATA XREF: _strspn↑r
.got:0000000000207EF8 posix_fadvise_ptr dq offset posix_fadvise
.got:0000000000207EF8                                         ; DATA XREF: _posix_fadvise↑r
.got:0000000000207F00 strndup_ptr     dq offset strndup       ; DATA XREF: _strndup↑r
.got:0000000000207F08 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000207F10 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000207F10                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000207F18 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000207F20 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000207F28 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000207F30 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000207F38 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000207F40 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000207F48 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000207F50 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:0000000000207F50                                         ; DATA XREF: _fwrite_unlocked↑r
.got:0000000000207F58 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000207F60 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000207F68 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000207F70 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000207F78 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000207F80 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000207F88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000207F90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000207F98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000207FA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000207FA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000207FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000207FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000207FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000207FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000207FC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000207FC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000207FC8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000207FC8                                         ; DATA XREF: start+24↑r
.got:0000000000207FD0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000207FD0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000207FD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000207FD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000207FE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000207FE0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000207FE0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000207FE0 _got            ends
.got:0000000000207FE0
LOAD:0000000000207FE8 ; ===========================================================================
LOAD:0000000000207FE8
LOAD:0000000000207FE8 ; Segment type: Pure data
LOAD:0000000000207FE8 ; Segment permissions: Read/Write
LOAD:0000000000207FE8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207FE8                 assume cs:LOAD
LOAD:0000000000207FE8                 ;org 207FE8h
LOAD:0000000000207FE8                 align 20h
LOAD:0000000000207FE8 LOAD            ends
LOAD:0000000000207FE8
.data:0000000000208000 ; ===========================================================================
.data:0000000000208000
.data:0000000000208000 ; Segment type: Pure data
.data:0000000000208000 ; Segment permissions: Read/Write
.data:0000000000208000 _data           segment align_32 public 'DATA' use64
.data:0000000000208000                 assume cs:_data
.data:0000000000208000                 ;org 208000h
.data:0000000000208000                 public __data_start ; weak
.data:0000000000208000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000208000                                         ; data_start
.data:0000000000208001                 db    0
.data:0000000000208002                 db    0
.data:0000000000208003                 db    0
.data:0000000000208004                 db    0
.data:0000000000208005                 db    0
.data:0000000000208006                 db    0
.data:0000000000208007                 db    0
.data:0000000000208008                 public __dso_handle
.data:0000000000208008 ; void *_dso_handle
.data:0000000000208008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000208008                                         ; atexit↑r ...
.data:0000000000208010 stdin_argv      dq offset aLt+2         ; DATA XREF: set_file_list↑o
.data:0000000000208010                                         ; "-"
.data:0000000000208018                 align 20h
.data:0000000000208020                 public Version
.data:0000000000208020 Version         dq offset a831          ; DATA XREF: main+11E↑r
.data:0000000000208020                                         ; "8.31"
.data:0000000000208028                 public exit_failure
.data:0000000000208028 ; int exit_failure
.data:0000000000208028 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2C12↑r
.data:0000000000208028                                         ; xalloc_die+17↑r
.data:000000000020802C                 align 20h
.data:0000000000208040                 public quote_quoting_options
.data:0000000000208040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000208040                                         ; quote_mem↑o ...
.data:0000000000208041                 db    0
.data:0000000000208042                 db    0
.data:0000000000208043                 db    0
.data:0000000000208044                 db    0
.data:0000000000208045                 db    0
.data:0000000000208046                 db    0
.data:0000000000208047                 db    0
.data:0000000000208048                 db    0
.data:0000000000208049                 db    0
.data:000000000020804A                 db    0
.data:000000000020804B                 db    0
.data:000000000020804C                 db    0
.data:000000000020804D                 db    0
.data:000000000020804E                 db    0
.data:000000000020804F                 db    0
.data:0000000000208050                 db    0
.data:0000000000208051                 db    0
.data:0000000000208052                 db    0
.data:0000000000208053                 db    0
.data:0000000000208054                 db    0
.data:0000000000208055                 db    0
.data:0000000000208056                 db    0
.data:0000000000208057                 db    0
.data:0000000000208058                 db    0
.data:0000000000208059                 db    0
.data:000000000020805A                 db    0
.data:000000000020805B                 db    0
.data:000000000020805C                 db    0
.data:000000000020805D                 db    0
.data:000000000020805E                 db    0
.data:000000000020805F                 db    0
.data:0000000000208060                 db    0
.data:0000000000208061                 db    0
.data:0000000000208062                 db    0
.data:0000000000208063                 db    0
.data:0000000000208064                 db    0
.data:0000000000208065                 db    0
.data:0000000000208066                 db    0
.data:0000000000208067                 db    0
.data:0000000000208068                 db    0
.data:0000000000208069                 db    0
.data:000000000020806A                 db    0
.data:000000000020806B                 db    0
.data:000000000020806C                 db    0
.data:000000000020806D                 db    0
.data:000000000020806E                 db    0
.data:000000000020806F                 db    0
.data:0000000000208070                 db    0
.data:0000000000208071                 db    0
.data:0000000000208072                 db    0
.data:0000000000208073                 db    0
.data:0000000000208074                 db    0
.data:0000000000208075                 db    0
.data:0000000000208076                 db    0
.data:0000000000208077                 db    0
.data:0000000000208078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000208078                                         ; quotearg_n_options:loc_40CD↑r ...
.data:000000000020807C                 align 20h
.data:0000000000208080 ; void *slotvec
.data:0000000000208080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000208080                                         ; quotearg_n_options+76↑w ...
.data:0000000000208088                 align 10h
.data:0000000000208090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000208090                                         ; quotearg_n_options+187↑r ...
.data:0000000000208098 off_208098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000208098 _data           ends
.data:0000000000208098
.bss:00000000002080A0 ; ===========================================================================
.bss:00000000002080A0
.bss:00000000002080A0 ; Segment type: Uninitialized
.bss:00000000002080A0 ; Segment permissions: Read/Write
.bss:00000000002080A0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002080A0                 assume cs:_bss
.bss:00000000002080A0                 ;org 2080A0h
.bss:00000000002080A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002080A0                 public __bss_start ; weak
.bss:00000000002080A0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000808↑o
.bss:00000000002080A0                                         ; LOAD:0000000000000868↑o ...
.bss:00000000002080A0                                         ; Alternative name is '__TMC_END__'
.bss:00000000002080A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:00000000002080A0                                         ; _edata
.bss:00000000002080A0                                         ; Copy of shared data
.bss:00000000002080A8                 public stdout@@GLIBC_2_2_5
.bss:00000000002080A8 ; FILE *stdout
.bss:00000000002080A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007F0↑o
.bss:00000000002080A8                                         ; main+117↑r ...
.bss:00000000002080A8                                         ; Alternative name is 'stdout'
.bss:00000000002080A8                                         ; Copy of shared data
.bss:00000000002080B0                 public stdin@@GLIBC_2_2_5
.bss:00000000002080B0 ; FILE *stdin
.bss:00000000002080B0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000820↑o
.bss:00000000002080B0                                         ; next_file:loc_2940↑r ...
.bss:00000000002080B0                                         ; Alternative name is 'stdin'
.bss:00000000002080B0                                         ; Copy of shared data
.bss:00000000002080B8                 public optind@@GLIBC_2_2_5
.bss:00000000002080B8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000898↑o
.bss:00000000002080B8                                         ; main+1D5↑r
.bss:00000000002080B8                                         ; Alternative name is 'optind'
.bss:00000000002080B8                                         ; Copy of shared data
.bss:00000000002080BC                 align 20h
.bss:00000000002080C0                 public optarg@@GLIBC_2_2_5
.bss:00000000002080C0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008B0↑o
.bss:00000000002080C0                                         ; main:loc_1910↑r
.bss:00000000002080C0                                         ; Alternative name is 'optarg'
.bss:00000000002080C0                                         ; Copy of shared data
.bss:00000000002080C8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002080C8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002080C8                                         ; DATA XREF: LOAD:0000000000000838↑o
.bss:00000000002080C8                                         ; LOAD:0000000000000850↑o ...
.bss:00000000002080C8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002080C8                                         ; Copy of shared data
.bss:00000000002080D0                 align 20h
.bss:00000000002080E0                 public stderr@@GLIBC_2_2_5
.bss:00000000002080E0 ; FILE *stderr
.bss:00000000002080E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000880↑o
.bss:00000000002080E0                                         ; usage+3D↑r ...
.bss:00000000002080E0                                         ; Alternative name is 'stderr'
.bss:00000000002080E0                                         ; Copy of shared data
.bss:00000000002080E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002080E8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002080E9                 align 10h
.bss:00000000002080F0                 public exit_status
.bss:00000000002080F0 exit_status     dd ?                    ; DATA XREF: main+446↑r
.bss:00000000002080F0                                         ; next_file+C3↑w ...
.bss:00000000002080F4                 public convert_entire_line
.bss:00000000002080F4 convert_entire_line db ?                ; DATA XREF: main:loc_18D0↑w
.bss:00000000002080F4                                         ; main+197↑w ...
.bss:00000000002080F5                 align 8
.bss:00000000002080F8 prev_file_6959  dq ?                    ; DATA XREF: next_file+D↑r
.bss:00000000002080F8                                         ; next_file+11D↑w ...
.bss:0000000000208100 have_read_stdin db ?                    ; DATA XREF: set_file_list+A↑w
.bss:0000000000208100                                         ; next_file+87↑w ...
.bss:0000000000208101                 align 8
.bss:0000000000208108 file_list       dq ?                    ; DATA XREF: set_file_list+15↑w
.bss:0000000000208108                                         ; next_file:loc_290F↑r ...
.bss:0000000000208110 first_free_tab  dq ?                    ; DATA XREF: add_tab_stop+9↑r
.bss:0000000000208110                                         ; add_tab_stop+46↑w ...
.bss:0000000000208118 n_tabs_allocated dq ?                   ; DATA XREF: add_tab_stop+17↑r
.bss:0000000000208118                                         ; add_tab_stop:loc_22E1↑w
.bss:0000000000208120 tab_list        dq ?                    ; DATA XREF: add_tab_stop+10↑r
.bss:0000000000208120                                         ; add_tab_stop+C4↑w ...
.bss:0000000000208128 increment_size  dq ?                    ; DATA XREF: set_increment_size↑r
.bss:0000000000208128                                         ; set_increment_size:loc_2226↑w ...
.bss:0000000000208130 extend_size     dq ?                    ; DATA XREF: set_extend_size↑r
.bss:0000000000208130                                         ; set_extend_size:loc_21E6↑w ...
.bss:0000000000208138 tab_size        dq ?                    ; DATA XREF: finalize_tab_stops:loc_2722↑w
.bss:0000000000208138                                         ; finalize_tab_stops+8B↑w ...
.bss:0000000000208140 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:0000000000208140                                         ; close_stdout+1B↑r
.bss:0000000000208141                 align 8
.bss:0000000000208148 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:0000000000208148                                         ; close_stdout+56↑r
.bss:0000000000208150                 public program_name
.bss:0000000000208150 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:0000000000208150                                         ; set_program_name:loc_2CED↑w
.bss:0000000000208158                 align 20h
.bss:0000000000208160 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000208160                                         ; quotearg_free+46↑o ...
.bss:0000000000208161                 db    ? ;
.bss:0000000000208162                 db    ? ;
.bss:0000000000208163                 db    ? ;
.bss:0000000000208164                 db    ? ;
.bss:0000000000208165                 db    ? ;
.bss:0000000000208166                 db    ? ;
.bss:0000000000208167                 db    ? ;
.bss:0000000000208168                 db    ? ;
.bss:0000000000208169                 db    ? ;
.bss:000000000020816A                 db    ? ;
.bss:000000000020816B                 db    ? ;
.bss:000000000020816C                 db    ? ;
.bss:000000000020816D                 db    ? ;
.bss:000000000020816E                 db    ? ;
.bss:000000000020816F                 db    ? ;
.bss:0000000000208170                 db    ? ;
.bss:0000000000208171                 db    ? ;
.bss:0000000000208172                 db    ? ;
.bss:0000000000208173                 db    ? ;
.bss:0000000000208174                 db    ? ;
.bss:0000000000208175                 db    ? ;
.bss:0000000000208176                 db    ? ;
.bss:0000000000208177                 db    ? ;
.bss:0000000000208178                 db    ? ;
.bss:0000000000208179                 db    ? ;
.bss:000000000020817A                 db    ? ;
.bss:000000000020817B                 db    ? ;
.bss:000000000020817C                 db    ? ;
.bss:000000000020817D                 db    ? ;
.bss:000000000020817E                 db    ? ;
.bss:000000000020817F                 db    ? ;
.bss:0000000000208180                 db    ? ;
.bss:0000000000208181                 db    ? ;
.bss:0000000000208182                 db    ? ;
.bss:0000000000208183                 db    ? ;
.bss:0000000000208184                 db    ? ;
.bss:0000000000208185                 db    ? ;
.bss:0000000000208186                 db    ? ;
.bss:0000000000208187                 db    ? ;
.bss:0000000000208188                 db    ? ;
.bss:0000000000208189                 db    ? ;
.bss:000000000020818A                 db    ? ;
.bss:000000000020818B                 db    ? ;
.bss:000000000020818C                 db    ? ;
.bss:000000000020818D                 db    ? ;
.bss:000000000020818E                 db    ? ;
.bss:000000000020818F                 db    ? ;
.bss:0000000000208190                 db    ? ;
.bss:0000000000208191                 db    ? ;
.bss:0000000000208192                 db    ? ;
.bss:0000000000208193                 db    ? ;
.bss:0000000000208194                 db    ? ;
.bss:0000000000208195                 db    ? ;
.bss:0000000000208196                 db    ? ;
.bss:0000000000208197                 db    ? ;
.bss:0000000000208198                 db    ? ;
.bss:0000000000208199                 db    ? ;
.bss:000000000020819A                 db    ? ;
.bss:000000000020819B                 db    ? ;
.bss:000000000020819C                 db    ? ;
.bss:000000000020819D                 db    ? ;
.bss:000000000020819E                 db    ? ;
.bss:000000000020819F                 db    ? ;
.bss:00000000002081A0                 db    ? ;
.bss:00000000002081A1                 db    ? ;
.bss:00000000002081A2                 db    ? ;
.bss:00000000002081A3                 db    ? ;
.bss:00000000002081A4                 db    ? ;
.bss:00000000002081A5                 db    ? ;
.bss:00000000002081A6                 db    ? ;
.bss:00000000002081A7                 db    ? ;
.bss:00000000002081A8                 db    ? ;
.bss:00000000002081A9                 db    ? ;
.bss:00000000002081AA                 db    ? ;
.bss:00000000002081AB                 db    ? ;
.bss:00000000002081AC                 db    ? ;
.bss:00000000002081AD                 db    ? ;
.bss:00000000002081AE                 db    ? ;
.bss:00000000002081AF                 db    ? ;
.bss:00000000002081B0                 db    ? ;
.bss:00000000002081B1                 db    ? ;
.bss:00000000002081B2                 db    ? ;
.bss:00000000002081B3                 db    ? ;
.bss:00000000002081B4                 db    ? ;
.bss:00000000002081B5                 db    ? ;
.bss:00000000002081B6                 db    ? ;
.bss:00000000002081B7                 db    ? ;
.bss:00000000002081B8                 db    ? ;
.bss:00000000002081B9                 db    ? ;
.bss:00000000002081BA                 db    ? ;
.bss:00000000002081BB                 db    ? ;
.bss:00000000002081BC                 db    ? ;
.bss:00000000002081BD                 db    ? ;
.bss:00000000002081BE                 db    ? ;
.bss:00000000002081BF                 db    ? ;
.bss:00000000002081C0                 db    ? ;
.bss:00000000002081C1                 db    ? ;
.bss:00000000002081C2                 db    ? ;
.bss:00000000002081C3                 db    ? ;
.bss:00000000002081C4                 db    ? ;
.bss:00000000002081C5                 db    ? ;
.bss:00000000002081C6                 db    ? ;
.bss:00000000002081C7                 db    ? ;
.bss:00000000002081C8                 db    ? ;
.bss:00000000002081C9                 db    ? ;
.bss:00000000002081CA                 db    ? ;
.bss:00000000002081CB                 db    ? ;
.bss:00000000002081CC                 db    ? ;
.bss:00000000002081CD                 db    ? ;
.bss:00000000002081CE                 db    ? ;
.bss:00000000002081CF                 db    ? ;
.bss:00000000002081D0                 db    ? ;
.bss:00000000002081D1                 db    ? ;
.bss:00000000002081D2                 db    ? ;
.bss:00000000002081D3                 db    ? ;
.bss:00000000002081D4                 db    ? ;
.bss:00000000002081D5                 db    ? ;
.bss:00000000002081D6                 db    ? ;
.bss:00000000002081D7                 db    ? ;
.bss:00000000002081D8                 db    ? ;
.bss:00000000002081D9                 db    ? ;
.bss:00000000002081DA                 db    ? ;
.bss:00000000002081DB                 db    ? ;
.bss:00000000002081DC                 db    ? ;
.bss:00000000002081DD                 db    ? ;
.bss:00000000002081DE                 db    ? ;
.bss:00000000002081DF                 db    ? ;
.bss:00000000002081E0                 db    ? ;
.bss:00000000002081E1                 db    ? ;
.bss:00000000002081E2                 db    ? ;
.bss:00000000002081E3                 db    ? ;
.bss:00000000002081E4                 db    ? ;
.bss:00000000002081E5                 db    ? ;
.bss:00000000002081E6                 db    ? ;
.bss:00000000002081E7                 db    ? ;
.bss:00000000002081E8                 db    ? ;
.bss:00000000002081E9                 db    ? ;
.bss:00000000002081EA                 db    ? ;
.bss:00000000002081EB                 db    ? ;
.bss:00000000002081EC                 db    ? ;
.bss:00000000002081ED                 db    ? ;
.bss:00000000002081EE                 db    ? ;
.bss:00000000002081EF                 db    ? ;
.bss:00000000002081F0                 db    ? ;
.bss:00000000002081F1                 db    ? ;
.bss:00000000002081F2                 db    ? ;
.bss:00000000002081F3                 db    ? ;
.bss:00000000002081F4                 db    ? ;
.bss:00000000002081F5                 db    ? ;
.bss:00000000002081F6                 db    ? ;
.bss:00000000002081F7                 db    ? ;
.bss:00000000002081F8                 db    ? ;
.bss:00000000002081F9                 db    ? ;
.bss:00000000002081FA                 db    ? ;
.bss:00000000002081FB                 db    ? ;
.bss:00000000002081FC                 db    ? ;
.bss:00000000002081FD                 db    ? ;
.bss:00000000002081FE                 db    ? ;
.bss:00000000002081FF                 db    ? ;
.bss:0000000000208200                 db    ? ;
.bss:0000000000208201                 db    ? ;
.bss:0000000000208202                 db    ? ;
.bss:0000000000208203                 db    ? ;
.bss:0000000000208204                 db    ? ;
.bss:0000000000208205                 db    ? ;
.bss:0000000000208206                 db    ? ;
.bss:0000000000208207                 db    ? ;
.bss:0000000000208208                 db    ? ;
.bss:0000000000208209                 db    ? ;
.bss:000000000020820A                 db    ? ;
.bss:000000000020820B                 db    ? ;
.bss:000000000020820C                 db    ? ;
.bss:000000000020820D                 db    ? ;
.bss:000000000020820E                 db    ? ;
.bss:000000000020820F                 db    ? ;
.bss:0000000000208210                 db    ? ;
.bss:0000000000208211                 db    ? ;
.bss:0000000000208212                 db    ? ;
.bss:0000000000208213                 db    ? ;
.bss:0000000000208214                 db    ? ;
.bss:0000000000208215                 db    ? ;
.bss:0000000000208216                 db    ? ;
.bss:0000000000208217                 db    ? ;
.bss:0000000000208218                 db    ? ;
.bss:0000000000208219                 db    ? ;
.bss:000000000020821A                 db    ? ;
.bss:000000000020821B                 db    ? ;
.bss:000000000020821C                 db    ? ;
.bss:000000000020821D                 db    ? ;
.bss:000000000020821E                 db    ? ;
.bss:000000000020821F                 db    ? ;
.bss:0000000000208220                 db    ? ;
.bss:0000000000208221                 db    ? ;
.bss:0000000000208222                 db    ? ;
.bss:0000000000208223                 db    ? ;
.bss:0000000000208224                 db    ? ;
.bss:0000000000208225                 db    ? ;
.bss:0000000000208226                 db    ? ;
.bss:0000000000208227                 db    ? ;
.bss:0000000000208228                 db    ? ;
.bss:0000000000208229                 db    ? ;
.bss:000000000020822A                 db    ? ;
.bss:000000000020822B                 db    ? ;
.bss:000000000020822C                 db    ? ;
.bss:000000000020822D                 db    ? ;
.bss:000000000020822E                 db    ? ;
.bss:000000000020822F                 db    ? ;
.bss:0000000000208230                 db    ? ;
.bss:0000000000208231                 db    ? ;
.bss:0000000000208232                 db    ? ;
.bss:0000000000208233                 db    ? ;
.bss:0000000000208234                 db    ? ;
.bss:0000000000208235                 db    ? ;
.bss:0000000000208236                 db    ? ;
.bss:0000000000208237                 db    ? ;
.bss:0000000000208238                 db    ? ;
.bss:0000000000208239                 db    ? ;
.bss:000000000020823A                 db    ? ;
.bss:000000000020823B                 db    ? ;
.bss:000000000020823C                 db    ? ;
.bss:000000000020823D                 db    ? ;
.bss:000000000020823E                 db    ? ;
.bss:000000000020823F                 db    ? ;
.bss:0000000000208240                 db    ? ;
.bss:0000000000208241                 db    ? ;
.bss:0000000000208242                 db    ? ;
.bss:0000000000208243                 db    ? ;
.bss:0000000000208244                 db    ? ;
.bss:0000000000208245                 db    ? ;
.bss:0000000000208246                 db    ? ;
.bss:0000000000208247                 db    ? ;
.bss:0000000000208248                 db    ? ;
.bss:0000000000208249                 db    ? ;
.bss:000000000020824A                 db    ? ;
.bss:000000000020824B                 db    ? ;
.bss:000000000020824C                 db    ? ;
.bss:000000000020824D                 db    ? ;
.bss:000000000020824E                 db    ? ;
.bss:000000000020824F                 db    ? ;
.bss:0000000000208250                 db    ? ;
.bss:0000000000208251                 db    ? ;
.bss:0000000000208252                 db    ? ;
.bss:0000000000208253                 db    ? ;
.bss:0000000000208254                 db    ? ;
.bss:0000000000208255                 db    ? ;
.bss:0000000000208256                 db    ? ;
.bss:0000000000208257                 db    ? ;
.bss:0000000000208258                 db    ? ;
.bss:0000000000208259                 db    ? ;
.bss:000000000020825A                 db    ? ;
.bss:000000000020825B                 db    ? ;
.bss:000000000020825C                 db    ? ;
.bss:000000000020825D                 db    ? ;
.bss:000000000020825E                 db    ? ;
.bss:000000000020825F                 db    ? ;
.bss:0000000000208260 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000208260                                         ; get_quoting_style↑o ...
.bss:0000000000208270 xmmword_208270  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000208270                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000208280 xmmword_208280  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000208280                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000208290 qword_208290    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000208290                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000208298                 public max_column_width
.bss:0000000000208298 max_column_width dq ?                   ; DATA XREF: main+1FE↑r
.bss:0000000000208298                                         ; add_tab_stop+64↑r ...
.bss:0000000000208298 _bss            ends
.bss:0000000000208298
.prgend:00000000002082A0 ; ===========================================================================
.prgend:00000000002082A0
.prgend:00000000002082A0 ; Segment type: Zero-length
.prgend:00000000002082A0 _prgend         segment byte public '' use64
.prgend:00000000002082A0 _end            label byte
.prgend:00000000002082A0 _prgend         ends
.prgend:00000000002082A0
extern:00000000002082A8 ; ===========================================================================
extern:00000000002082A8
extern:00000000002082A8 ; Segment type: Externs
extern:00000000002082A8 ; extern
extern:00000000002082A8 ; int _uflow(_IO_FILE *)
extern:00000000002082A8                 extrn __uflow:near      ; CODE XREF: ___uflow↑j
extern:00000000002082A8                                         ; DATA XREF: .got:__uflow_ptr↑o
extern:00000000002082B0 ; void free(void *ptr)
extern:00000000002082B0                 extrn free:near         ; CODE XREF: _free↑j
extern:00000000002082B0                                         ; DATA XREF: .got:free_ptr↑o
extern:00000000002082B8 ; void __noreturn abort(void)
extern:00000000002082B8                 extrn abort:near        ; CODE XREF: _abort↑j
extern:00000000002082B8                                         ; DATA XREF: .got:abort_ptr↑o
extern:00000000002082C0 ; int *_errno_location(void)
extern:00000000002082C0                 extrn __errno_location:near
extern:00000000002082C0                                         ; CODE XREF: ___errno_location↑j
extern:00000000002082C0                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:00000000002082C8 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:00000000002082C8                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:00000000002082C8                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:00000000002082D0 ; void __noreturn exit(int status)
extern:00000000002082D0                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:00000000002082D0                                         ; DATA XREF: .got:_exit_ptr↑o
extern:00000000002082D8 ; size_t _fpending(FILE *fp)
extern:00000000002082D8                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:00000000002082D8                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:00000000002082E0 ; void clearerr_unlocked(FILE *stream)
extern:00000000002082E0                 extrn clearerr_unlocked:near
extern:00000000002082E0                                         ; CODE XREF: _clearerr_unlocked↑j
extern:00000000002082E0                                         ; DATA XREF: .got:clearerr_unlocked_ptr↑o
extern:00000000002082E8 ; char *textdomain(const char *domainname)
extern:00000000002082E8                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:00000000002082E8                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:00000000002082F0 ; int fclose(FILE *stream)
extern:00000000002082F0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:00000000002082F0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:00000000002082F8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:00000000002082F8                 extrn bindtextdomain:near
extern:00000000002082F8                                         ; CODE XREF: _bindtextdomain↑j
extern:00000000002082F8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000208300 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000208300                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000208300                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000208308 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000208308                 extrn __ctype_get_mb_cur_max:near
extern:0000000000208308                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000208308                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000208310 ; size_t strlen(const char *s)
extern:0000000000208310                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000208310                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000208318                 extrn __stack_chk_fail:near
extern:0000000000208318                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000208318                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000208320 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:0000000000208320                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:0000000000208320                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:0000000000208328 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000208328                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000208328                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000208330 ; int _overflow(_IO_FILE *, int)
extern:0000000000208330                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:0000000000208330                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:0000000000208338 ; char *strrchr(const char *s, int c)
extern:0000000000208338                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000208338                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:0000000000208340 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:0000000000208340                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:0000000000208340                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000208348 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:0000000000208348                 extrn __assert_fail:near
extern:0000000000208348                                         ; CODE XREF: ___assert_fail↑j
extern:0000000000208348                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:0000000000208350 ; void *memset(void *s, int c, size_t n)
extern:0000000000208350                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000000000208350                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000208358 ; size_t strspn(const char *s, const char *accept)
extern:0000000000208358                 extrn strspn:near       ; CODE XREF: _strspn↑j
extern:0000000000208358                                         ; DATA XREF: .got:strspn_ptr↑o
extern:0000000000208360 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:0000000000208360                 extrn posix_fadvise:near
extern:0000000000208360                                         ; CODE XREF: _posix_fadvise↑j
extern:0000000000208360                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:0000000000208368 ; char *strndup(const char *string, size_t n)
extern:0000000000208368                 extrn strndup:near      ; CODE XREF: _strndup↑j
extern:0000000000208368                                         ; DATA XREF: .got:strndup_ptr↑o
extern:0000000000208370 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000208370                 extrn __libc_start_main:near
extern:0000000000208370                                         ; CODE XREF: start+24↑p
extern:0000000000208370                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000208378 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000208378                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000208378                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000208380 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000208380                 extrn fputs_unlocked:near
extern:0000000000208380                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000208380                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000208388 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000208388                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000208388                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000208390 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000208390                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000208390                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000208398 ; int fileno(FILE *stream)
extern:0000000000208398                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000208398                                         ; DATA XREF: .got:fileno_ptr↑o
extern:00000000002083A0 ; void *malloc(size_t size)
extern:00000000002083A0                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:00000000002083A0                                         ; DATA XREF: .got:malloc_ptr↑o
extern:00000000002083A8 ; int fflush(FILE *stream)
extern:00000000002083A8                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:00000000002083A8                                         ; DATA XREF: .got:fflush_ptr↑o
extern:00000000002083B0 ; char *nl_langinfo(nl_item item)
extern:00000000002083B0                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:00000000002083B0                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:00000000002083B8 ; int _freading(FILE *fp)
extern:00000000002083B8                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:00000000002083B8                                         ; DATA XREF: .got:__freading_ptr↑o
extern:00000000002083C0 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:00000000002083C0                 extrn fwrite_unlocked:near
extern:00000000002083C0                                         ; CODE XREF: _fwrite_unlocked↑j
extern:00000000002083C0                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:00000000002083C8 ; void *realloc(void *ptr, size_t size)
extern:00000000002083C8                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:00000000002083C8                                         ; DATA XREF: .got:realloc_ptr↑o
extern:00000000002083D0 ; char *setlocale(int category, const char *locale)
extern:00000000002083D0                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:00000000002083D0                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:00000000002083D8                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:00000000002083D8                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:00000000002083E0 ; void error(int status, int errnum, const char *format, ...)
extern:00000000002083E0                 extrn error:near        ; CODE XREF: _error↑j
extern:00000000002083E0                                         ; DATA XREF: .got:error_ptr↑o
extern:00000000002083E8 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:00000000002083E8                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:00000000002083E8                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:00000000002083F0 ; FILE *fopen(const char *filename, const char *modes)
extern:00000000002083F0                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:00000000002083F0                                         ; DATA XREF: .got:fopen_ptr↑o
extern:00000000002083F8 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:00000000002083F8                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:00000000002083F8                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000208400 ; void __noreturn exit(int status)
extern:0000000000208400                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000208400                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000208408 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000208408                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000208408                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000208410                 extrn __fprintf_chk:near
extern:0000000000208410                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000208410                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000208418 ; int mbsinit(const mbstate_t *ps)
extern:0000000000208418                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000208418                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000208420 ; int iswprint(wint_t wc)
extern:0000000000208420                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000208420                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000208428 ; int __fastcall __cxa_finalize(void *)
extern:0000000000208428                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000208428                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000208428                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000208430 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000208430                 extrn __ctype_b_loc:near
extern:0000000000208430                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000208430                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000208438                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000208438                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000208440                 extrn __gmon_start__:near ; weak
extern:0000000000208440                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000208440                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000208448                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000208448                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000208448
extern:0000000000208448
extern:0000000000208448                 end start
