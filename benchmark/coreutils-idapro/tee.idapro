LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : BA15E30C78EA456E27A35D3413A2DFCEF1BA8A648AE71F84AA3AD8EAC21E6587
LOAD:0000000000000000 ; Input MD5    : A7E4CA65CD8ECFEF9F52ECBB233A6206
LOAD:0000000000000000 ; Input CRC32  : FE92A8B1
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/tee
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'tee.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'fopen-safer.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 283E0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 7358h                ; Size in file image
LOAD:00000000000000D8                 dq 7358h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 7AD0h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 207AD0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 5D0h                 ; Size in file image
LOAD:0000000000000110                 dq 790h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 7C38h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 207C38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 63B0h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 63B0h                ; Physical address
LOAD:00000000000001B0                 dq 29Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 29Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 7AD0h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 207AD0h              ; Physical address
LOAD:0000000000000220                 dq 530h                 ; Size in file image
LOAD:0000000000000228                 dq 530h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0E7h, 75h, 61h, 0CEh, 0E1h, 6, 53h, 0F8h, 0D1h, 37h ; Desc
LOAD:0000000000000284                 db 33h, 39h, 24h, 44h, 0BDh, 77h, 4, 57h, 48h, 0CBh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 38h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 38h, 39h, 3Fh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_8F8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_8F8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_8F8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_8F8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_8F8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_8F8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aFpending - offset byte_8F8, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFcntl - offset byte_8F8, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:00000000000003A0                            0>
LOAD:00000000000003B8                 Elf64_Sym <offset aClearerrUnlock - offset byte_8F8, 12h, 0, 0, \ ; "clearerr_unlocked"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_8F8, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aFclose - offset byte_8F8, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aBindtextdomain - offset byte_8F8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aDcgettext - offset byte_8F8, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_8F8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStrlen - offset byte_8F8, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStackChkFail - offset byte_8F8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aGetoptLong - offset byte_8F8, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aMbrtowc - offset byte_8F8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aOverflow - offset byte_8F8, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrrchr - offset byte_8F8, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aLseek - offset byte_8F8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004D8                            0>
LOAD:00000000000004F0                 Elf64_Sym <offset aMemset - offset byte_8F8, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aFclose+1 - offset byte_8F8, 12h, 0, 0, \ ; "close"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aPosixFadvise - offset byte_8F8, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aRead - offset byte_8F8, 12h, 0, 0, offset dword_0, \ ; "read"
LOAD:0000000000000538                            0>
LOAD:0000000000000550                 Elf64_Sym <offset aLibcStartMain - offset byte_8F8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aMemcmp - offset byte_8F8, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aFputsUnlocked - offset byte_8F8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aCalloc - offset byte_8F8, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aSignal - offset byte_8F8, 12h, 0, 0, \ ; "signal"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aGmonStart - offset byte_8F8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aMemcpy - offset byte_8F8, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aFileno - offset byte_8F8, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aMalloc - offset byte_8F8, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aFflush - offset byte_8F8, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aNlLanginfo - offset byte_8F8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aFreading - offset byte_8F8, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aFwriteUnlocked - offset byte_8F8, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aRealloc - offset byte_8F8, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aFdopen - offset byte_8F8, 12h, 0, 0, \ ; "fdopen"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aSetlocale - offset byte_8F8, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aPrintfChk - offset byte_8F8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aSetvbuf - offset byte_8F8, 12h, 0, 0, \ ; "setvbuf"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aError - offset byte_8F8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000700                            0>
LOAD:0000000000000718                 Elf64_Sym <offset aFseeko - offset byte_8F8, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aFopen - offset byte_8F8, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000730                            0>
LOAD:0000000000000748                 Elf64_Sym <offset aCxaAtexit - offset byte_8F8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aExit+1 - offset byte_8F8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aFwrite - offset byte_8F8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aFprintfChk - offset byte_8F8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aItmRegistertmc - offset byte_8F8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aMbsinit - offset byte_8F8, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aIswprint - offset byte_8F8, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aCxaFinalize - offset byte_8F8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aCtypeBLoc - offset byte_8F8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aStdout - offset byte_8F8, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000820                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000838                 Elf64_Sym <offset aProgname - offset byte_8F8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000838                            offset __bss_start, 8>
LOAD:0000000000000850                 Elf64_Sym <offset aStdin - offset byte_8F8, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000850                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000868                 Elf64_Sym <offset aProgramInvocat - offset byte_8F8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000868                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000880                 Elf64_Sym <offset aPrognameFull - offset byte_8F8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000880                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000898                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_8F8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000898                            offset __bss_start, 8>
LOAD:00000000000008B0                 Elf64_Sym <offset aStderr - offset byte_8F8, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000008B0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000008C8                 Elf64_Sym <offset aOptind - offset byte_8F8, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000008C8                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000008E0                 Elf64_Sym <offset aOptarg - offset byte_8F8, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000008E0                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:00000000000008F8 ; ELF String Table
LOAD:00000000000008F8 byte_8F8        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000008F8                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000008F9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000C68↓o
LOAD:0000000000000903 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:000000000000090A aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000917 aClearerrUnlock db 'clearerr_unlocked',0
LOAD:0000000000000917                                         ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000929 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000933 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000490↑o
LOAD:000000000000093B aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000941 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000949 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000950 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000958 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000962 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000968 aSignal         db 'signal',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:000000000000096F aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000980 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000989 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000991 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000997 aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000850↑o
LOAD:000000000000099D aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:000000000000099D                                         ; LOAD:0000000000000760↑o
LOAD:00000000000009A3 aProgramInvocat db 'program_invocation_name',0
LOAD:00000000000009A3                                         ; DATA XREF: LOAD:0000000000000868↑o
LOAD:00000000000009BB aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:00000000000009BB                                         ; DATA XREF: LOAD:0000000000000430↑o
LOAD:00000000000009D2 aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000520↑o
LOAD:00000000000009E0 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:00000000000009E7 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000448↑o
LOAD:00000000000009EE aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:00000000000009F5 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000A06 aRead           db 'read',0             ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000A0B aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000A12 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000A20 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000A27 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000A2D aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000A34 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000A34                                         ; LOAD:0000000000000508↑o
LOAD:0000000000000A3B aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000A42 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A4A aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000A56 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000A64 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000A6B aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000A76 aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000A7D aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000A89 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000A90 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000A97 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000AA2 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000AA2                                         ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000AC0 aFdopen         db 'fdopen',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000AC7 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000AD6 aSetvbuf        db 'setvbuf',0          ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000ADE aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000AE4 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000AE4                                         ; LOAD:00000000000003D0↑o
LOAD:0000000000000AF3 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000B03 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000B03                                         ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000B15 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000B1C aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000B27 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000B36 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000B3B aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000B46 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000B56 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000B63 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000C78↓o
LOAD:0000000000000B6D aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000C88↓o
LOAD:0000000000000B79 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000C98↓o
LOAD:0000000000000B84 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000CA8↓o
LOAD:0000000000000B8E aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000CB8↓o
LOAD:0000000000000B9A aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B9A                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000BB6 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000BC5 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000BC5                                         ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000BDF                 align 20h
LOAD:0000000000000BE0 ; ELF GNU Symbol Version Table
LOAD:0000000000000BE0                 dw 0
LOAD:0000000000000BE2                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000BE4                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000BE6                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000BE8                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000BEA                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000BEC                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000BEE                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000BF0                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000BF2                 dw 2                    ; clearerr_unlocked@@GLIBC_2.2.5
LOAD:0000000000000BF4                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000BF6                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000BF8                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000BFA                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000BFC                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000BFE                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000C00                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000C02                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000C04                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000C06                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000C08                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000C0A                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000C0C                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000C0E                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000C10                 dw 2                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000C12                 dw 2                    ; read@@GLIBC_2.2.5
LOAD:0000000000000C14                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000C16                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000C18                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C1A                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000C1C                 dw 2                    ; signal@@GLIBC_2.2.5
LOAD:0000000000000C1E                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000C20                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000C22                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000C24                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000C26                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000C28                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000C2A                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000C2C                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C2E                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000C30                 dw 2                    ; fdopen@@GLIBC_2.2.5
LOAD:0000000000000C32                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000C34                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000C36                 dw 2                    ; setvbuf@@GLIBC_2.2.5
LOAD:0000000000000C38                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000C3A                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000C3C                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000C3E                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000C40                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000C42                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000C44                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000C46                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000C48                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000C4A                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000C4C                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000C4E                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000C50                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000C52                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000C54                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000C56                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000C58                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000C5A                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000C5C                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000C5E                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000C60                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000C62                 dw 0
LOAD:0000000000000C64                 dw 0
LOAD:0000000000000C66                 dw 0
LOAD:0000000000000C68 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000C68                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_8F8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000C78                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_8F8, \ ; "GLIBC_2.3"
LOAD:0000000000000C78                                10h>
LOAD:0000000000000C88                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_8F8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000C88                                10h>
LOAD:0000000000000C98                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_8F8, \ ; "GLIBC_2.14"
LOAD:0000000000000C98                                10h>
LOAD:0000000000000CA8                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_8F8, \ ; "GLIBC_2.4"
LOAD:0000000000000CA8                                10h>
LOAD:0000000000000CB8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_8F8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000CC8 ; ELF RELA Relocation Table
LOAD:0000000000000CC8                 Elf64_Rela <207AD0h, 8, 1B80h> ; R_X86_64_RELATIVE +1B80h
LOAD:0000000000000CE0                 Elf64_Rela <207AD8h, 8, 1B40h> ; R_X86_64_RELATIVE +1B40h
LOAD:0000000000000CF8                 Elf64_Rela <207AE0h, 8, 5594h> ; R_X86_64_RELATIVE +5594h
LOAD:0000000000000D10                 Elf64_Rela <207AE8h, 8, 5599h> ; R_X86_64_RELATIVE +5599h
LOAD:0000000000000D28                 Elf64_Rela <207AF0h, 8, 55A5h> ; R_X86_64_RELATIVE +55A5h
LOAD:0000000000000D40                 Elf64_Rela <207AF8h, 8, 55AAh> ; R_X86_64_RELATIVE +55AAh
LOAD:0000000000000D58                 Elf64_Rela <207B20h, 8, 55B6h> ; R_X86_64_RELATIVE +55B6h
LOAD:0000000000000D70                 Elf64_Rela <207B40h, 8, 55BDh> ; R_X86_64_RELATIVE +55BDh
LOAD:0000000000000D88                 Elf64_Rela <207B60h, 8, 5544h> ; R_X86_64_RELATIVE +5544h
LOAD:0000000000000DA0                 Elf64_Rela <207B80h, 8, 55CFh> ; R_X86_64_RELATIVE +55CFh
LOAD:0000000000000DB8                 Elf64_Rela <207BA0h, 8, 55D4h> ; R_X86_64_RELATIVE +55D4h
LOAD:0000000000000DD0                 Elf64_Rela <207BE0h, 8, 5B71h> ; R_X86_64_RELATIVE +5B71h
LOAD:0000000000000DE8                 Elf64_Rela <207BE8h, 8, 5B79h> ; R_X86_64_RELATIVE +5B79h
LOAD:0000000000000E00                 Elf64_Rela <207BF0h, 8, 5B7Fh> ; R_X86_64_RELATIVE +5B7Fh
LOAD:0000000000000E18                 Elf64_Rela <207BF8h, 8, 5B8Ch> ; R_X86_64_RELATIVE +5B8Ch
LOAD:0000000000000E30                 Elf64_Rela <207C00h, 8, 5B99h> ; R_X86_64_RELATIVE +5B99h
LOAD:0000000000000E48                 Elf64_Rela <207C08h, 8, 5BADh> ; R_X86_64_RELATIVE +5BADh
LOAD:0000000000000E60                 Elf64_Rela <207C10h, 8, 5BAFh> ; R_X86_64_RELATIVE +5BAFh
LOAD:0000000000000E78                 Elf64_Rela <207C18h, 8, 5B92h> ; R_X86_64_RELATIVE +5B92h
LOAD:0000000000000E90                 Elf64_Rela <207C20h, 8, 553Bh> ; R_X86_64_RELATIVE +553Bh
LOAD:0000000000000EA8                 Elf64_Rela <207C28h, 8, 5BB7h> ; R_X86_64_RELATIVE +5BB7h
LOAD:0000000000000EC0                 Elf64_Rela <208008h, 8, 208008h> ; R_X86_64_RELATIVE +208008h
LOAD:0000000000000ED8                 Elf64_Rela <208010h, 8, 5AA0h> ; R_X86_64_RELATIVE +5AA0h
LOAD:0000000000000EF0                 Elf64_Rela <208018h, 8, 2330h> ; R_X86_64_RELATIVE +2330h
LOAD:0000000000000F08                 Elf64_Rela <208080h, 8, 208090h> ; R_X86_64_RELATIVE +208090h
LOAD:0000000000000F20                 Elf64_Rela <208098h, 8, 208120h> ; R_X86_64_RELATIVE +208120h
LOAD:0000000000000F38                 Elf64_Rela <207FD0h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000F50                 Elf64_Rela <207FD8h, 1A00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000F68                 Elf64_Rela <207FE0h, 1F00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000F80                 Elf64_Rela <207FE8h, 3300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000F98                 Elf64_Rela <207FF0h, 3600000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000FB0                 Elf64_Rela <2080A0h, 3900000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000FC8                 Elf64_Rela <2080A8h, 3800000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000FE0                 Elf64_Rela <2080B0h, 3A00000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000000FF8                 Elf64_Rela <2080B8h, 3F00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001010                 Elf64_Rela <2080C0h, 4000000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001028                 Elf64_Rela <2080C8h, 3C00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001040                 Elf64_Rela <2080E0h, 3E00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001058 ; ELF JMPREL Relocation Table
LOAD:0000000000001058                 Elf64_Rela <207E40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001070                 Elf64_Rela <207E48h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001088                 Elf64_Rela <207E50h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:00000000000010A0                 Elf64_Rela <207E58h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:00000000000010B8                 Elf64_Rela <207E60h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000010D0                 Elf64_Rela <207E68h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000010E8                 Elf64_Rela <207E70h, 800000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001100                 Elf64_Rela <207E78h, 900000007h, 0> ; R_X86_64_JUMP_SLOT clearerr_unlocked
LOAD:0000000000001118                 Elf64_Rela <207E80h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001130                 Elf64_Rela <207E88h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001148                 Elf64_Rela <207E90h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001160                 Elf64_Rela <207E98h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001178                 Elf64_Rela <207EA0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001190                 Elf64_Rela <207EA8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000011A8                 Elf64_Rela <207EB0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000011C0                 Elf64_Rela <207EB8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000011D8                 Elf64_Rela <207EC0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000011F0                 Elf64_Rela <207EC8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001208                 Elf64_Rela <207ED0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001220                 Elf64_Rela <207ED8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001238                 Elf64_Rela <207EE0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001250                 Elf64_Rela <207EE8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001268                 Elf64_Rela <207EF0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:0000000000001280                 Elf64_Rela <207EF8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT read
LOAD:0000000000001298                 Elf64_Rela <207F00h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000012B0                 Elf64_Rela <207F08h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000012C8                 Elf64_Rela <207F10h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000012E0                 Elf64_Rela <207F18h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT signal
LOAD:00000000000012F8                 Elf64_Rela <207F20h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001310                 Elf64_Rela <207F28h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001328                 Elf64_Rela <207F30h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001340                 Elf64_Rela <207F38h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001358                 Elf64_Rela <207F40h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001370                 Elf64_Rela <207F48h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001388                 Elf64_Rela <207F50h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:00000000000013A0                 Elf64_Rela <207F58h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000013B8                 Elf64_Rela <207F60h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fdopen
LOAD:00000000000013D0                 Elf64_Rela <207F68h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000013E8                 Elf64_Rela <207F70h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001400                 Elf64_Rela <207F78h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT setvbuf
LOAD:0000000000001418                 Elf64_Rela <207F80h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001430                 Elf64_Rela <207F88h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001448                 Elf64_Rela <207F90h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000001460                 Elf64_Rela <207F98h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001478                 Elf64_Rela <207FA0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001490                 Elf64_Rela <207FA8h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000014A8                 Elf64_Rela <207FB0h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000014C0                 Elf64_Rela <207FB8h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000014D8                 Elf64_Rela <207FC0h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000014F0                 Elf64_Rela <207FC8h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000014F0 LOAD            ends
LOAD:00000000000014F0
.init:0000000000001508 ; ===========================================================================
.init:0000000000001508
.init:0000000000001508 ; Segment type: Pure code
.init:0000000000001508 ; Segment permissions: Read/Execute
.init:0000000000001508 _init           segment dword public 'CODE' use64
.init:0000000000001508                 assume cs:_init
.init:0000000000001508                 ;org 1508h
.init:0000000000001508                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001508
.init:0000000000001508 ; =============== S U B R O U T I N E =======================================
.init:0000000000001508
.init:0000000000001508
.init:0000000000001508                 public _init_proc
.init:0000000000001508 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001508                 sub     rsp, 8          ; _init
.init:000000000000150C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001513                 test    rax, rax
.init:0000000000001516                 jz      short loc_151A
.init:0000000000001518                 call    rax ; __gmon_start__
.init:000000000000151A
.init:000000000000151A loc_151A:                               ; CODE XREF: _init_proc+E↑j
.init:000000000000151A                 add     rsp, 8
.init:000000000000151E                 retn
.init:000000000000151E _init_proc      endp
.init:000000000000151E
.init:000000000000151E _init           ends
.init:000000000000151E
LOAD:000000000000151F ; ===========================================================================
LOAD:000000000000151F
LOAD:000000000000151F ; Segment type: Pure code
LOAD:000000000000151F ; Segment permissions: Read/Execute
LOAD:000000000000151F LOAD            segment byte public 'CODE' use64
LOAD:000000000000151F                 assume cs:LOAD
LOAD:000000000000151F                 ;org 151Fh
LOAD:000000000000151F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000151F                 align 20h
LOAD:000000000000151F LOAD            ends
LOAD:000000000000151F
.plt:0000000000001520 ; ===========================================================================
.plt:0000000000001520
.plt:0000000000001520 ; Segment type: Pure code
.plt:0000000000001520 ; Segment permissions: Read/Execute
.plt:0000000000001520 _plt            segment para public 'CODE' use64
.plt:0000000000001520                 assume cs:_plt
.plt:0000000000001520                 ;org 1520h
.plt:0000000000001520                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520
.plt:0000000000001520 sub_1520        proc near               ; CODE XREF: .plt:000000000000153B↓j
.plt:0000000000001520                                         ; .plt:000000000000154B↓j ...
.plt:0000000000001520 ; __unwind {
.plt:0000000000001520                 push    cs:qword_207E30
.plt:0000000000001526                 jmp     cs:qword_207E38
.plt:0000000000001526 sub_1520        endp
.plt:0000000000001526
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:000000000000152C                 align 10h
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; void free(void *ptr)
.plt:0000000000001530 _free           proc near               ; CODE XREF: tee_files+253↓p
.plt:0000000000001530                                         ; quotearg_n_options+115↓p ...
.plt:0000000000001530                 jmp     cs:free_ptr
.plt:0000000000001530 _free           endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    0
.plt:000000000000153B                 jmp     sub_1520
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: noreturn thunk
.plt:0000000000001540
.plt:0000000000001540 ; void __noreturn abort(void)
.plt:0000000000001540 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001540                                         ; quotearg_buffer_restyled:def_2A91↓p ...
.plt:0000000000001540                 jmp     cs:abort_ptr
.plt:0000000000001540 _abort          endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    1
.plt:000000000000154B                 jmp     sub_1520
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; int *__errno_location(void)
.plt:0000000000001550 ___errno_location proc near             ; CODE XREF: main+1F9↓p
.plt:0000000000001550                                         ; tee_files+139↓p ...
.plt:0000000000001550                 jmp     cs:__errno_location_ptr
.plt:0000000000001550 ___errno_location endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    2
.plt:000000000000155B                 jmp     sub_1520
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001560 _strncmp        proc near               ; CODE XREF: usage+24C↓p
.plt:0000000000001560                                         ; usage+30D↓p ...
.plt:0000000000001560                 jmp     cs:strncmp_ptr
.plt:0000000000001560 _strncmp        endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    3
.plt:000000000000156B                 jmp     sub_1520
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: noreturn thunk
.plt:0000000000001570
.plt:0000000000001570 ; void __noreturn _exit(int status)
.plt:0000000000001570 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001570                 jmp     cs:_exit_ptr
.plt:0000000000001570 __exit          endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    4
.plt:000000000000157B                 jmp     sub_1520
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; size_t __fpending(FILE *fp)
.plt:0000000000001580 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001580                 jmp     cs:__fpending_ptr
.plt:0000000000001580 ___fpending     endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    5
.plt:000000000000158B                 jmp     sub_1520
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001590 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001590                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001590                 jmp     cs:fcntl_ptr
.plt:0000000000001590 _fcntl          endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    6
.plt:000000000000159B                 jmp     sub_1520
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; void clearerr_unlocked(FILE *stream)
.plt:00000000000015A0 _clearerr_unlocked proc near            ; CODE XREF: tee_files+2FA↓p
.plt:00000000000015A0                                         ; tee_files+39C↓p
.plt:00000000000015A0                 jmp     cs:clearerr_unlocked_ptr
.plt:00000000000015A0 _clearerr_unlocked endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    7
.plt:00000000000015AB                 jmp     sub_1520
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; char *textdomain(const char *domainname)
.plt:00000000000015B0 _textdomain     proc near               ; CODE XREF: main+43↓p
.plt:00000000000015B0                 jmp     cs:textdomain_ptr
.plt:00000000000015B0 _textdomain     endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    8
.plt:00000000000015BB                 jmp     sub_1520
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; int fclose(FILE *stream)
.plt:00000000000015C0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000015C0                                         ; rpl_fclose+6B↓j
.plt:00000000000015C0                 jmp     cs:fclose_ptr
.plt:00000000000015C0 _fclose         endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    9
.plt:00000000000015CB                 jmp     sub_1520
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000015D0 _bindtextdomain proc near               ; CODE XREF: main+37↓p
.plt:00000000000015D0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000015D0 _bindtextdomain endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    0Ah
.plt:00000000000015DB                 jmp     sub_1520
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000015E0 _dcgettext      proc near               ; CODE XREF: main+1F1↓p
.plt:00000000000015E0                                         ; tee_files+A6↓p ...
.plt:00000000000015E0                 jmp     cs:dcgettext_ptr
.plt:00000000000015E0 _dcgettext      endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    0Bh
.plt:00000000000015EB                 jmp     sub_1520
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000015F0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000015F0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000015F0 ___ctype_get_mb_cur_max endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    0Ch
.plt:00000000000015FB                 jmp     sub_1520
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; size_t strlen(const char *s)
.plt:0000000000001600 _strlen         proc near               ; CODE XREF: argmatch+21↓p
.plt:0000000000001600                                         ; argmatch+AE↓p ...
.plt:0000000000001600                 jmp     cs:strlen_ptr
.plt:0000000000001600 _strlen         endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    0Dh
.plt:000000000000160B                 jmp     sub_1520
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: noreturn thunk
.plt:0000000000001610
.plt:0000000000001610 ___stack_chk_fail proc near             ; CODE XREF: tee_files:loc_1F7D↓p
.plt:0000000000001610                                         ; quotearg_buffer_restyled:loc_3BF3↓p ...
.plt:0000000000001610                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001610 ___stack_chk_fail endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    0Eh
.plt:000000000000161B                 jmp     sub_1520
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001620 _getopt_long    proc near               ; CODE XREF: main+74↓p
.plt:0000000000001620                 jmp     cs:getopt_long_ptr
.plt:0000000000001620 _getopt_long    endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    0Fh
.plt:000000000000162B                 jmp     sub_1520
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001630 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001630                 jmp     cs:mbrtowc_ptr
.plt:0000000000001630 _mbrtowc        endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    10h
.plt:000000000000163B                 jmp     sub_1520
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001640 ___overflow     proc near               ; CODE XREF: argmatch_valid+11B↓j
.plt:0000000000001640                 jmp     cs:__overflow_ptr
.plt:0000000000001640 ___overflow     endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    11h
.plt:000000000000164B                 jmp     sub_1520
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; char *strrchr(const char *s, int c)
.plt:0000000000001650 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001650                 jmp     cs:strrchr_ptr
.plt:0000000000001650 _strrchr        endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    12h
.plt:000000000000165B                 jmp     sub_1520
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001660 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001660                                         ; rpl_fseeko+3B↓p
.plt:0000000000001660                 jmp     cs:lseek_ptr
.plt:0000000000001660 _lseek          endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    13h
.plt:000000000000166B                 jmp     sub_1520
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001670 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001670                                         ; xzalloc+12↓j
.plt:0000000000001670                 jmp     cs:memset_ptr
.plt:0000000000001670 _memset         endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    14h
.plt:000000000000167B                 jmp     sub_1520
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; int close(int fd)
.plt:0000000000001680 _close          proc near               ; CODE XREF: main+195↓p
.plt:0000000000001680                                         ; fopen_safer+6A↓p ...
.plt:0000000000001680                 jmp     cs:close_ptr
.plt:0000000000001680 _close          endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    15h
.plt:000000000000168B                 jmp     sub_1520
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:0000000000001690 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:0000000000001690                                         ; fadvise+16↓j
.plt:0000000000001690                 jmp     cs:posix_fadvise_ptr
.plt:0000000000001690 _posix_fadvise  endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    16h
.plt:000000000000169B                 jmp     sub_1520
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; ssize_t read(int fd, void *buf, size_t nbytes)
.plt:00000000000016A0 _read           proc near               ; CODE XREF: tee_files+1A4↓p
.plt:00000000000016A0                 jmp     cs:read_ptr
.plt:00000000000016A0 _read           endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    17h
.plt:00000000000016AB                 jmp     sub_1520
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000016B0 _memcmp         proc near               ; CODE XREF: argmatch+6F↓p
.plt:00000000000016B0                                         ; argmatch_valid+96↓p ...
.plt:00000000000016B0                 jmp     cs:memcmp_ptr
.plt:00000000000016B0 _memcmp         endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    18h
.plt:00000000000016BB                 jmp     sub_1520
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000016C0 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:00000000000016C0                                         ; usage+C2↓p ...
.plt:00000000000016C0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000016C0 _fputs_unlocked endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    19h
.plt:00000000000016CB                 jmp     sub_1520
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000016D0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000016D0                 jmp     cs:calloc_ptr
.plt:00000000000016D0 _calloc         endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    1Ah
.plt:00000000000016DB                 jmp     sub_1520
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; __sighandler_t signal(int sig, __sighandler_t handler)
.plt:00000000000016E0 _signal         proc near               ; CODE XREF: main+1B3↓p
.plt:00000000000016E0                                         ; main+1C4↓p
.plt:00000000000016E0                 jmp     cs:signal_ptr
.plt:00000000000016E0 _signal         endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    1Bh
.plt:00000000000016EB                 jmp     sub_1520
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000016F0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:00000000000016F0                 jmp     cs:memcpy_ptr
.plt:00000000000016F0 _memcpy         endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    1Ch
.plt:00000000000016FB                 jmp     sub_1520
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ; int fileno(FILE *stream)
.plt:0000000000001700 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:0000000000001700                                         ; fopen_safer+17↓p ...
.plt:0000000000001700                 jmp     cs:fileno_ptr
.plt:0000000000001700 _fileno         endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    1Dh
.plt:000000000000170B                 jmp     sub_1520
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; void *malloc(size_t size)
.plt:0000000000001710 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001710                 jmp     cs:malloc_ptr
.plt:0000000000001710 _malloc         endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    1Eh
.plt:000000000000171B                 jmp     sub_1520
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ; int fflush(FILE *stream)
.plt:0000000000001720 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001720                                         ; rpl_fflush+3B↓j
.plt:0000000000001720                 jmp     cs:fflush_ptr
.plt:0000000000001720 _fflush         endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    1Fh
.plt:000000000000172B                 jmp     sub_1520
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ; char *nl_langinfo(nl_item item)
.plt:0000000000001730 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001730                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001730 _nl_langinfo    endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    20h ; ' '
.plt:000000000000173B                 jmp     sub_1520
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; int __freading(FILE *fp)
.plt:0000000000001740 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001740                                         ; rpl_fflush+9↓p
.plt:0000000000001740                 jmp     cs:__freading_ptr
.plt:0000000000001740 ___freading     endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    21h ; '!'
.plt:000000000000174B                 jmp     sub_1520
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001750 _fwrite_unlocked proc near              ; CODE XREF: tee_files+2C5↓p
.plt:0000000000001750                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000001750 _fwrite_unlocked endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    22h ; '"'
.plt:000000000000175B                 jmp     sub_1520
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001760 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001760                 jmp     cs:realloc_ptr
.plt:0000000000001760 _realloc        endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    23h ; '#'
.plt:000000000000176B                 jmp     sub_1520
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: thunk
.plt:0000000000001770
.plt:0000000000001770 ; FILE *fdopen(int fd, const char *modes)
.plt:0000000000001770 _fdopen         proc near               ; CODE XREF: fopen_safer+50↓p
.plt:0000000000001770                 jmp     cs:fdopen_ptr
.plt:0000000000001770 _fdopen         endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    24h ; '$'
.plt:000000000000177B                 jmp     sub_1520
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: thunk
.plt:0000000000001780
.plt:0000000000001780 ; char *setlocale(int category, const char *locale)
.plt:0000000000001780 _setlocale      proc near               ; CODE XREF: main+24↓p
.plt:0000000000001780                                         ; usage+233↓p ...
.plt:0000000000001780                 jmp     cs:setlocale_ptr
.plt:0000000000001780 _setlocale      endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    25h ; '%'
.plt:000000000000178B                 jmp     sub_1520
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: thunk
.plt:0000000000001790
.plt:0000000000001790 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001790                                         ; usage+227↓p ...
.plt:0000000000001790                 jmp     cs:__printf_chk_ptr
.plt:0000000000001790 ___printf_chk   endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    26h ; '&'
.plt:000000000000179B                 jmp     sub_1520
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
.plt:00000000000017A0 _setvbuf        proc near               ; CODE XREF: tee_files+BF↓p
.plt:00000000000017A0                                         ; tee_files+104↓p
.plt:00000000000017A0                 jmp     cs:setvbuf_ptr
.plt:00000000000017A0 _setvbuf        endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    27h ; '''
.plt:00000000000017AB                 jmp     sub_1520
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Attributes: thunk
.plt:00000000000017B0
.plt:00000000000017B0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000017B0 _error          proc near               ; CODE XREF: main+211↓p
.plt:00000000000017B0                                         ; tee_files+164↓p ...
.plt:00000000000017B0                 jmp     cs:error_ptr
.plt:00000000000017B0 _error          endp
.plt:00000000000017B0
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017B6                 push    28h ; '('
.plt:00000000000017BB                 jmp     sub_1520
.plt:00000000000017C0
.plt:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017C0
.plt:00000000000017C0 ; Attributes: thunk
.plt:00000000000017C0
.plt:00000000000017C0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000017C0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_51AA↓j
.plt:00000000000017C0                 jmp     cs:fseeko_ptr
.plt:00000000000017C0 _fseeko         endp
.plt:00000000000017C0
.plt:00000000000017C6 ; ---------------------------------------------------------------------------
.plt:00000000000017C6                 push    29h ; ')'
.plt:00000000000017CB                 jmp     sub_1520
.plt:00000000000017D0
.plt:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017D0
.plt:00000000000017D0 ; Attributes: thunk
.plt:00000000000017D0
.plt:00000000000017D0 ; FILE *fopen(const char *filename, const char *modes)
.plt:00000000000017D0 _fopen          proc near               ; CODE XREF: fopen_safer+7↓p
.plt:00000000000017D0                 jmp     cs:fopen_ptr
.plt:00000000000017D0 _fopen          endp
.plt:00000000000017D0
.plt:00000000000017D6 ; ---------------------------------------------------------------------------
.plt:00000000000017D6                 push    2Ah ; '*'
.plt:00000000000017DB                 jmp     sub_1520
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Attributes: thunk
.plt:00000000000017E0
.plt:00000000000017E0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:00000000000017E0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:00000000000017E0                 jmp     cs:__cxa_atexit_ptr
.plt:00000000000017E0 ___cxa_atexit   endp
.plt:00000000000017E0
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017E6                 push    2Bh ; '+'
.plt:00000000000017EB                 jmp     sub_1520
.plt:00000000000017F0
.plt:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017F0
.plt:00000000000017F0 ; Attributes: noreturn thunk
.plt:00000000000017F0
.plt:00000000000017F0 ; void __noreturn exit(int status)
.plt:00000000000017F0 _exit           proc near               ; CODE XREF: main+138↓p
.plt:00000000000017F0                                         ; usage+58↓p
.plt:00000000000017F0                 jmp     cs:exit_ptr
.plt:00000000000017F0 _exit           endp
.plt:00000000000017F0
.plt:00000000000017F6 ; ---------------------------------------------------------------------------
.plt:00000000000017F6                 push    2Ch ; ','
.plt:00000000000017FB                 jmp     sub_1520
.plt:0000000000001800
.plt:0000000000001800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001800
.plt:0000000000001800 ; Attributes: thunk
.plt:0000000000001800
.plt:0000000000001800 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001800 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001800                 jmp     cs:fwrite_ptr
.plt:0000000000001800 _fwrite         endp
.plt:0000000000001800
.plt:0000000000001806 ; ---------------------------------------------------------------------------
.plt:0000000000001806                 push    2Dh ; '-'
.plt:000000000000180B                 jmp     sub_1520
.plt:0000000000001810
.plt:0000000000001810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001810
.plt:0000000000001810 ; Attributes: thunk
.plt:0000000000001810
.plt:0000000000001810 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001810                                         ; argmatch_valid+7A↓p ...
.plt:0000000000001810                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001810 ___fprintf_chk  endp
.plt:0000000000001810
.plt:0000000000001816 ; ---------------------------------------------------------------------------
.plt:0000000000001816                 push    2Eh ; '.'
.plt:000000000000181B                 jmp     sub_1520
.plt:0000000000001820
.plt:0000000000001820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001820
.plt:0000000000001820 ; Attributes: thunk
.plt:0000000000001820
.plt:0000000000001820 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001820 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001820                 jmp     cs:mbsinit_ptr
.plt:0000000000001820 _mbsinit        endp
.plt:0000000000001820
.plt:0000000000001826 ; ---------------------------------------------------------------------------
.plt:0000000000001826                 push    2Fh ; '/'
.plt:000000000000182B                 jmp     sub_1520
.plt:0000000000001830
.plt:0000000000001830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001830
.plt:0000000000001830 ; Attributes: thunk
.plt:0000000000001830
.plt:0000000000001830 ; int iswprint(wint_t wc)
.plt:0000000000001830 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001830                 jmp     cs:iswprint_ptr
.plt:0000000000001830 _iswprint       endp
.plt:0000000000001830
.plt:0000000000001836 ; ---------------------------------------------------------------------------
.plt:0000000000001836                 push    30h ; '0'
.plt:000000000000183B                 jmp     sub_1520
.plt:0000000000001840
.plt:0000000000001840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001840
.plt:0000000000001840 ; Attributes: thunk
.plt:0000000000001840
.plt:0000000000001840 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001840 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001840                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001840 ___ctype_b_loc  endp
.plt:0000000000001840
.plt:0000000000001846 ; ---------------------------------------------------------------------------
.plt:0000000000001846                 push    31h ; '1'
.plt:000000000000184B                 jmp     sub_1520
.plt:000000000000184B ; } // starts at 1520
.plt:000000000000184B _plt            ends
.plt:000000000000184B
.plt.got:0000000000001850 ; ===========================================================================
.plt.got:0000000000001850
.plt.got:0000000000001850 ; Segment type: Pure code
.plt.got:0000000000001850 ; Segment permissions: Read/Execute
.plt.got:0000000000001850 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001850                 assume cs:_plt_got
.plt.got:0000000000001850                 ;org 1850h
.plt.got:0000000000001850                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001850
.plt.got:0000000000001850 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001850
.plt.got:0000000000001850 ; Attributes: thunk
.plt.got:0000000000001850
.plt.got:0000000000001850 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001850 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001850 ; __unwind {
.plt.got:0000000000001850                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001850 __cxa_finalize  endp
.plt.got:0000000000001850
.plt.got:0000000000001850 ; ---------------------------------------------------------------------------
.plt.got:0000000000001856                 align 8
.plt.got:0000000000001856 ; } // starts at 1850
.plt.got:0000000000001856 _plt_got        ends
.plt.got:0000000000001856
LOAD:0000000000001858 ; ===========================================================================
LOAD:0000000000001858
LOAD:0000000000001858 ; Segment type: Pure code
LOAD:0000000000001858 ; Segment permissions: Read/Execute
LOAD:0000000000001858 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001858                 assume cs:LOAD
LOAD:0000000000001858                 ;org 1858h
LOAD:0000000000001858                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001858                 align 20h
LOAD:0000000000001858 LOAD            ends
LOAD:0000000000001858
.text:0000000000001860 ; ===========================================================================
.text:0000000000001860
.text:0000000000001860 ; Segment type: Pure code
.text:0000000000001860 ; Segment permissions: Read/Execute
.text:0000000000001860 _text           segment para public 'CODE' use64
.text:0000000000001860                 assume cs:_text
.text:0000000000001860                 ;org 1860h
.text:0000000000001860                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001860
.text:0000000000001860 ; =============== S U B R O U T I N E =======================================
.text:0000000000001860
.text:0000000000001860
.text:0000000000001860 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001860                 public main
.text:0000000000001860 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001860 ; __unwind {
.text:0000000000001860                 push    r12
.text:0000000000001862                 push    rbp
.text:0000000000001863                 mov     ebp, edi
.text:0000000000001865                 push    rbx
.text:0000000000001866                 mov     rdi, [rsi]
.text:0000000000001869                 mov     rbx, rsi
.text:000000000000186C                 lea     r12, long_options
.text:0000000000001873                 call    set_program_name
.text:0000000000001878                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:000000000000187F                 mov     edi, 6          ; category
.text:0000000000001884                 call    _setlocale
.text:0000000000001889                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001890                 lea     rdi, domainname ; "coreutils"
.text:0000000000001897                 call    _bindtextdomain
.text:000000000000189C                 lea     rdi, domainname ; "coreutils"
.text:00000000000018A3                 call    _textdomain
.text:00000000000018A8                 lea     rdi, close_stdout
.text:00000000000018AF                 call    atexit
.text:00000000000018B4                 mov     cs:append, 0
.text:00000000000018BB                 mov     cs:ignore_interrupts, 0
.text:00000000000018C2
.text:00000000000018C2 loc_18C2:                               ; CODE XREF: main+E6↓j
.text:00000000000018C2                                         ; main+147↓j ...
.text:00000000000018C2                 lea     rdx, shortopts  ; "aip"
.text:00000000000018C9                 xor     r8d, r8d        ; longind
.text:00000000000018CC                 mov     rcx, r12        ; longopts
.text:00000000000018CF                 mov     rsi, rbx        ; argv
.text:00000000000018D2                 mov     edi, ebp        ; argc
.text:00000000000018D4                 call    _getopt_long
.text:00000000000018D9                 cmp     eax, 0FFFFFFFFh
.text:00000000000018DC                 jz      loc_19CB
.text:00000000000018E2                 cmp     eax, 61h ; 'a'
.text:00000000000018E5                 jz      loc_19A0
.text:00000000000018EB                 jle     short loc_1950
.text:00000000000018ED                 cmp     eax, 69h ; 'i'
.text:00000000000018F0                 jz      loc_19B0
.text:00000000000018F6                 cmp     eax, 70h ; 'p'
.text:00000000000018F9                 jnz     loc_1A39
.text:00000000000018FF                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001906                 test    rsi, rsi
.text:0000000000001909                 jz      loc_19BC
.text:000000000000190F                 mov     r9, cs:argmatch_die
.text:0000000000001916                 lea     rdx, output_error_args
.text:000000000000191D                 lea     rcx, output_error_types
.text:0000000000001924                 lea     rdi, aOutputError ; "--output-error"
.text:000000000000192B                 mov     r8d, 4
.text:0000000000001931                 call    __xargmatch_internal
.text:0000000000001936                 lea     rdx, output_error_types
.text:000000000000193D                 mov     eax, [rdx+rax*4]
.text:0000000000001940                 mov     cs:output_error, eax
.text:0000000000001946                 jmp     loc_18C2
.text:0000000000001946 ; ---------------------------------------------------------------------------
.text:000000000000194B                 align 10h
.text:0000000000001950
.text:0000000000001950 loc_1950:                               ; CODE XREF: main+8B↑j
.text:0000000000001950                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001955                 jnz     loc_1A2B
.text:000000000000195B                 lea     rax, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001962                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001969                 mov     rcx, cs:Version
.text:0000000000001970                 push    0
.text:0000000000001972                 lea     r9, aRichardMStallm ; "Richard M. Stallman"
.text:0000000000001979                 lea     r8, aMikeParker ; "Mike Parker"
.text:0000000000001980                 push    rax
.text:0000000000001981                 lea     rdx, unk_54FD
.text:0000000000001988                 lea     rsi, aTee       ; "tee"
.text:000000000000198F                 xor     eax, eax
.text:0000000000001991                 call    version_etc
.text:0000000000001996                 xor     edi, edi        ; status
.text:0000000000001998                 call    _exit
.text:0000000000001998 ; ---------------------------------------------------------------------------
.text:000000000000199D                 align 20h
.text:00000000000019A0
.text:00000000000019A0 loc_19A0:                               ; CODE XREF: main+85↑j
.text:00000000000019A0                 mov     cs:append, 1
.text:00000000000019A7                 jmp     loc_18C2
.text:00000000000019A7 ; ---------------------------------------------------------------------------
.text:00000000000019AC                 align 10h
.text:00000000000019B0
.text:00000000000019B0 loc_19B0:                               ; CODE XREF: main+90↑j
.text:00000000000019B0                 mov     cs:ignore_interrupts, 1
.text:00000000000019B7                 jmp     loc_18C2
.text:00000000000019BC ; ---------------------------------------------------------------------------
.text:00000000000019BC
.text:00000000000019BC loc_19BC:                               ; CODE XREF: main+A9↑j
.text:00000000000019BC                 mov     cs:output_error, 2
.text:00000000000019C6                 jmp     loc_18C2
.text:00000000000019CB ; ---------------------------------------------------------------------------
.text:00000000000019CB
.text:00000000000019CB loc_19CB:                               ; CODE XREF: main+7C↑j
.text:00000000000019CB                 cmp     cs:ignore_interrupts, 0
.text:00000000000019D2                 jnz     short loc_1A09
.text:00000000000019D4
.text:00000000000019D4 loc_19D4:                               ; CODE XREF: main+1B8↓j
.text:00000000000019D4                 cmp     cs:output_error, 0
.text:00000000000019DB                 jnz     short loc_1A1A
.text:00000000000019DD
.text:00000000000019DD loc_19DD:                               ; CODE XREF: main+1C9↓j
.text:00000000000019DD                 movsxd  rdx, cs:optind@@GLIBC_2_2_5
.text:00000000000019E4                 mov     edi, ebp
.text:00000000000019E6                 lea     rsi, [rbx+rdx*8]
.text:00000000000019EA                 sub     edi, edx
.text:00000000000019EC                 call    tee_files
.text:00000000000019F1                 xor     edi, edi        ; fd
.text:00000000000019F3                 mov     ebx, eax
.text:00000000000019F5                 call    _close
.text:00000000000019FA                 test    eax, eax
.text:00000000000019FC                 jnz     short loc_1A43
.text:00000000000019FE                 xor     ebx, 1
.text:0000000000001A01                 movzx   eax, bl
.text:0000000000001A04                 pop     rbx
.text:0000000000001A05                 pop     rbp
.text:0000000000001A06                 pop     r12
.text:0000000000001A08                 retn
.text:0000000000001A09 ; ---------------------------------------------------------------------------
.text:0000000000001A09
.text:0000000000001A09 loc_1A09:                               ; CODE XREF: main+172↑j
.text:0000000000001A09                 mov     esi, (offset dword_0+1) ; handler
.text:0000000000001A0E                 mov     edi, 2          ; sig
.text:0000000000001A13                 call    _signal
.text:0000000000001A18                 jmp     short loc_19D4
.text:0000000000001A1A ; ---------------------------------------------------------------------------
.text:0000000000001A1A
.text:0000000000001A1A loc_1A1A:                               ; CODE XREF: main+17B↑j
.text:0000000000001A1A                 mov     esi, (offset dword_0+1) ; handler
.text:0000000000001A1F                 mov     edi, 0Dh        ; sig
.text:0000000000001A24                 call    _signal
.text:0000000000001A29                 jmp     short loc_19DD
.text:0000000000001A2B ; ---------------------------------------------------------------------------
.text:0000000000001A2B
.text:0000000000001A2B loc_1A2B:                               ; CODE XREF: main+F5↑j
.text:0000000000001A2B                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001A30                 jnz     short loc_1A39
.text:0000000000001A32                 xor     edi, edi        ; status
.text:0000000000001A34                 call    usage
.text:0000000000001A39 ; ---------------------------------------------------------------------------
.text:0000000000001A39
.text:0000000000001A39 loc_1A39:                               ; CODE XREF: main+99↑j
.text:0000000000001A39                                         ; main+1D0↑j
.text:0000000000001A39                 mov     edi, 1          ; status
.text:0000000000001A3E                 call    usage
.text:0000000000001A43 ; ---------------------------------------------------------------------------
.text:0000000000001A43
.text:0000000000001A43 loc_1A43:                               ; CODE XREF: main+19C↑j
.text:0000000000001A43                 lea     rsi, msgid      ; "standard input"
.text:0000000000001A4A                 mov     edx, 5          ; category
.text:0000000000001A4F                 xor     edi, edi        ; domainname
.text:0000000000001A51                 call    _dcgettext
.text:0000000000001A56                 mov     rbx, rax
.text:0000000000001A59                 call    ___errno_location
.text:0000000000001A5E                 mov     esi, [rax]      ; errnum
.text:0000000000001A60                 lea     rdx, aS_0+2     ; format
.text:0000000000001A67                 mov     rcx, rbx
.text:0000000000001A6A                 mov     edi, 1          ; status
.text:0000000000001A6F                 xor     eax, eax
.text:0000000000001A71                 call    _error
.text:0000000000001A71 ; } // starts at 1860
.text:0000000000001A76                 db      2Eh
.text:0000000000001A76                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001A76 main            endp ; sp-analysis failed
.text:0000000000001A76
.text:0000000000001A80
.text:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A80
.text:0000000000001A80 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001A80
.text:0000000000001A80 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001A80                 public start
.text:0000000000001A80 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001A80 ; __unwind {
.text:0000000000001A80                 xor     ebp, ebp
.text:0000000000001A82                 mov     r9, rdx         ; rtld_fini
.text:0000000000001A85                 pop     rsi             ; argc
.text:0000000000001A86                 mov     rdx, rsp        ; ubp_av
.text:0000000000001A89                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001A8D                 push    rax
.text:0000000000001A8E                 push    rsp             ; stack_end
.text:0000000000001A8F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001A96                 lea     rcx, __libc_csu_init ; init
.text:0000000000001A9D                 lea     rdi, main       ; main
.text:0000000000001AA4                 call    cs:__libc_start_main_ptr
.text:0000000000001AAA                 hlt
.text:0000000000001AAA ; } // starts at 1A80
.text:0000000000001AAA start           endp
.text:0000000000001AAA
.text:0000000000001AAA ; ---------------------------------------------------------------------------
.text:0000000000001AAB                 align 10h
.text:0000000000001AB0
.text:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AB0
.text:0000000000001AB0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001AB0
.text:0000000000001AB0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1B63↓p
.text:0000000000001AB0                 lea     rdi, __bss_start
.text:0000000000001AB7                 push    rbp
.text:0000000000001AB8                 lea     rax, __bss_start
.text:0000000000001ABF                 cmp     rax, rdi
.text:0000000000001AC2                 mov     rbp, rsp
.text:0000000000001AC5                 jz      short loc_1AE0
.text:0000000000001AC7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001ACE                 test    rax, rax
.text:0000000000001AD1                 jz      short loc_1AE0
.text:0000000000001AD3                 pop     rbp
.text:0000000000001AD4                 jmp     rax
.text:0000000000001AD4 ; ---------------------------------------------------------------------------
.text:0000000000001AD6                 align 20h
.text:0000000000001AE0
.text:0000000000001AE0 loc_1AE0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001AE0                                         ; deregister_tm_clones+21↑j
.text:0000000000001AE0                 pop     rbp
.text:0000000000001AE1                 retn
.text:0000000000001AE1 deregister_tm_clones endp
.text:0000000000001AE1
.text:0000000000001AE1 ; ---------------------------------------------------------------------------
.text:0000000000001AE2                 align 10h
.text:0000000000001AF0
.text:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AF0
.text:0000000000001AF0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001AF0
.text:0000000000001AF0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001AF0                 lea     rdi, __bss_start
.text:0000000000001AF7                 lea     rsi, __bss_start
.text:0000000000001AFE                 push    rbp
.text:0000000000001AFF                 sub     rsi, rdi
.text:0000000000001B02                 mov     rbp, rsp
.text:0000000000001B05                 sar     rsi, 3
.text:0000000000001B09                 mov     rax, rsi
.text:0000000000001B0C                 shr     rax, 3Fh
.text:0000000000001B10                 add     rsi, rax
.text:0000000000001B13                 sar     rsi, 1
.text:0000000000001B16                 jz      short loc_1B30
.text:0000000000001B18                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001B1F                 test    rax, rax
.text:0000000000001B22                 jz      short loc_1B30
.text:0000000000001B24                 pop     rbp
.text:0000000000001B25                 jmp     rax
.text:0000000000001B25 ; ---------------------------------------------------------------------------
.text:0000000000001B27                 align 10h
.text:0000000000001B30
.text:0000000000001B30 loc_1B30:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001B30                                         ; register_tm_clones+32↑j
.text:0000000000001B30                 pop     rbp
.text:0000000000001B31                 retn
.text:0000000000001B31 register_tm_clones endp
.text:0000000000001B31
.text:0000000000001B31 ; ---------------------------------------------------------------------------
.text:0000000000001B32                 align 20h
.text:0000000000001B40
.text:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B40
.text:0000000000001B40 ; Attributes: info_from_lumina
.text:0000000000001B40
.text:0000000000001B40 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001B40                 cmp     cs:completed_7697, 0
.text:0000000000001B47                 jnz     short locret_1B78
.text:0000000000001B49                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001B51                 push    rbp
.text:0000000000001B52                 mov     rbp, rsp
.text:0000000000001B55                 jz      short loc_1B63
.text:0000000000001B57                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001B5E                 call    __cxa_finalize
.text:0000000000001B63
.text:0000000000001B63 loc_1B63:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001B63                 call    deregister_tm_clones
.text:0000000000001B68                 mov     cs:completed_7697, 1
.text:0000000000001B6F                 pop     rbp
.text:0000000000001B70                 retn
.text:0000000000001B70 ; ---------------------------------------------------------------------------
.text:0000000000001B71                 align 8
.text:0000000000001B78
.text:0000000000001B78 locret_1B78:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001B78                 rep retn
.text:0000000000001B78 __do_global_dtors_aux endp
.text:0000000000001B78
.text:0000000000001B78 ; ---------------------------------------------------------------------------
.text:0000000000001B7A                 align 20h
.text:0000000000001B80
.text:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B80
.text:0000000000001B80 ; Attributes: bp-based frame
.text:0000000000001B80
.text:0000000000001B80 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001B80                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001B80                 push    rbp
.text:0000000000001B81                 mov     rbp, rsp
.text:0000000000001B84                 pop     rbp
.text:0000000000001B85                 jmp     register_tm_clones
.text:0000000000001B85 frame_dummy     endp
.text:0000000000001B85
.text:0000000000001B85 ; ---------------------------------------------------------------------------
.text:0000000000001B8A                 align 10h
.text:0000000000001B90
.text:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B90
.text:0000000000001B90
.text:0000000000001B90 tee_files       proc near               ; CODE XREF: main+18C↑p
.text:0000000000001B90
.text:0000000000001B90 var_2060        = qword ptr -2060h
.text:0000000000001B90 buf             = qword ptr -2058h
.text:0000000000001B90 errnum          = dword ptr -2050h
.text:0000000000001B90 var_204C        = dword ptr -204Ch
.text:0000000000001B90 var_2048        = byte ptr -2048h
.text:0000000000001B90 var_40          = qword ptr -40h
.text:0000000000001B90
.text:0000000000001B90 ; __unwind {
.text:0000000000001B90                 push    r15
.text:0000000000001B92                 push    r14
.text:0000000000001B94                 mov     r15, rsi
.text:0000000000001B97                 push    r13
.text:0000000000001B99                 push    r12
.text:0000000000001B9B                 lea     r12, unk_5466
.text:0000000000001BA2                 push    rbp
.text:0000000000001BA3                 push    rbx
.text:0000000000001BA4                 mov     ebx, edi
.text:0000000000001BA6                 mov     esi, 2
.text:0000000000001BAB                 sub     rsp, 2038h
.text:0000000000001BB2                 mov     rax, fs:28h
.text:0000000000001BBB                 mov     [rsp+2068h+var_40], rax
.text:0000000000001BC3                 xor     eax, eax
.text:0000000000001BC5                 cmp     cs:append, 0
.text:0000000000001BCC                 mov     [rsp+2068h+var_204C], edi
.text:0000000000001BD0                 lea     rax, unk_5464
.text:0000000000001BD7                 mov     rdi, cs:stdin@@GLIBC_2_2_5
.text:0000000000001BDE                 cmovnz  r12, rax
.text:0000000000001BE2                 call    fadvise
.text:0000000000001BE7                 lea     edi, [rbx+1]
.text:0000000000001BEA                 mov     edx, 8
.text:0000000000001BEF                 mov     rax, rdx
.text:0000000000001BF2                 movsxd  rdi, edi
.text:0000000000001BF5                 mul     rdi
.text:0000000000001BF8                 jo      loc_1F87
.text:0000000000001BFE                 xor     ecx, ecx
.text:0000000000001C00
.text:0000000000001C00 loc_1C00:                               ; CODE XREF: tee_files+3FC↓j
.text:0000000000001C00                 test    rax, rax
.text:0000000000001C03                 js      loc_1F82
.text:0000000000001C09                 test    rcx, rcx
.text:0000000000001C0C                 jnz     loc_1F82
.text:0000000000001C12                 shl     rdi, 3
.text:0000000000001C16                 call    xmalloc
.text:0000000000001C1B                 mov     rbx, rax
.text:0000000000001C1E                 mov     rax, cs:stdout@@GLIBC_2_2_5
.text:0000000000001C25                 lea     rsi, aStandardOutput ; "standard output"
.text:0000000000001C2C                 xor     edi, edi        ; domainname
.text:0000000000001C2E                 mov     edx, 5          ; category
.text:0000000000001C33                 mov     [rbx], rax
.text:0000000000001C36                 call    _dcgettext
.text:0000000000001C3B                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001C42                 xor     ecx, ecx        ; n
.text:0000000000001C44                 xor     esi, esi        ; buf
.text:0000000000001C46                 mov     [r15-8], rax
.text:0000000000001C4A                 mov     edx, 2          ; modes
.text:0000000000001C4F                 call    _setvbuf
.text:0000000000001C54                 mov     eax, [rsp+2068h+var_204C]
.text:0000000000001C58                 test    eax, eax
.text:0000000000001C5A                 jle     loc_1F6E
.text:0000000000001C60                 sub     eax, 1
.text:0000000000001C63                 xor     r14d, r14d
.text:0000000000001C66                 mov     byte ptr [rsp+2068h+errnum], 1
.text:0000000000001C6B                 mov     dword ptr [rsp+2068h+buf], eax
.text:0000000000001C6F                 lea     r13, ds:8[rax*8]
.text:0000000000001C77                 mov     ebp, 1
.text:0000000000001C7C                 jmp     short loc_1C9E
.text:0000000000001C7C ; ---------------------------------------------------------------------------
.text:0000000000001C7E                 align 20h
.text:0000000000001C80
.text:0000000000001C80 loc_1C80:                               ; CODE XREF: tee_files+122↓j
.text:0000000000001C80                 xor     ecx, ecx        ; n
.text:0000000000001C82                 xor     esi, esi        ; buf
.text:0000000000001C84                 mov     edx, 2          ; modes
.text:0000000000001C89                 mov     rdi, rax        ; stream
.text:0000000000001C8C                 add     r14, 8
.text:0000000000001C90                 add     rbp, 1
.text:0000000000001C94                 call    _setvbuf
.text:0000000000001C99                 cmp     r14, r13
.text:0000000000001C9C                 jz      short loc_1D03
.text:0000000000001C9E
.text:0000000000001C9E loc_1C9E:                               ; CODE XREF: tee_files+EC↑j
.text:0000000000001C9E                                         ; tee_files+171↓j
.text:0000000000001C9E                 mov     rdi, [r15+r14]
.text:0000000000001CA2                 mov     rsi, r12
.text:0000000000001CA5                 call    fopen_safer
.text:0000000000001CAA                 test    rax, rax
.text:0000000000001CAD                 mov     [rbx+r14+8], rax
.text:0000000000001CB2                 jnz     short loc_1C80
.text:0000000000001CB4                 mov     rdx, [r15+r14]
.text:0000000000001CB8                 xor     edi, edi
.text:0000000000001CBA                 mov     esi, 3
.text:0000000000001CBF                 call    quotearg_n_style_colon
.text:0000000000001CC4                 mov     [rsp+2068h+var_2060], rax
.text:0000000000001CC9                 call    ___errno_location
.text:0000000000001CCE                 mov     ecx, cs:output_error
.text:0000000000001CD4                 mov     esi, [rax]      ; errnum
.text:0000000000001CD6                 xor     edi, edi
.text:0000000000001CD8                 lea     edx, [rcx-3]
.text:0000000000001CDB                 mov     rcx, [rsp+2068h+var_2060]
.text:0000000000001CE0                 cmp     edx, 1
.text:0000000000001CE3                 lea     rdx, aS_0+2     ; format
.text:0000000000001CEA                 setbe   dil             ; status
.text:0000000000001CEE                 xor     eax, eax
.text:0000000000001CF0                 add     r14, 8
.text:0000000000001CF4                 call    _error
.text:0000000000001CF9                 cmp     r14, r13
.text:0000000000001CFC                 mov     byte ptr [rsp+2068h+errnum], 0
.text:0000000000001D01                 jnz     short loc_1C9E
.text:0000000000001D03
.text:0000000000001D03 loc_1D03:                               ; CODE XREF: tee_files+10C↑j
.text:0000000000001D03                 test    rbp, rbp
.text:0000000000001D06                 jz      short loc_1D6C
.text:0000000000001D08
.text:0000000000001D08 loc_1D08:                               ; CODE XREF: tee_files+3E8↓j
.text:0000000000001D08                 mov     eax, [rsp+2068h+var_204C]
.text:0000000000001D0C                 lea     rax, ds:8[rax*8]
.text:0000000000001D14                 mov     [rsp+2068h+var_2060], rax
.text:0000000000001D19                 lea     rax, [rsp+2068h+var_2048]
.text:0000000000001D1E                 mov     [rsp+2068h+buf], rax
.text:0000000000001D23                 nop     dword ptr [rax+rax+00h]
.text:0000000000001D28
.text:0000000000001D28 loc_1D28:                               ; CODE XREF: tee_files+368↓j
.text:0000000000001D28                 mov     rsi, [rsp+2068h+buf] ; buf
.text:0000000000001D2D                 xor     edi, edi        ; fd
.text:0000000000001D2F                 mov     edx, 2000h      ; nbytes
.text:0000000000001D34                 call    _read
.text:0000000000001D39                 test    rax, rax
.text:0000000000001D3C                 mov     r12, rax
.text:0000000000001D3F                 jns     loc_1E20
.text:0000000000001D45                 call    ___errno_location
.text:0000000000001D4A                 cmp     dword ptr [rax], 4
.text:0000000000001D4D                 jz      loc_1EF5
.text:0000000000001D53
.text:0000000000001D53 loc_1D53:                               ; CODE XREF: tee_files+36E↓j
.text:0000000000001D53                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000001D57                 jz      loc_1F3B
.text:0000000000001D5D
.text:0000000000001D5D loc_1D5D:                               ; CODE XREF: tee_files:loc_1E20↓j
.text:0000000000001D5D                                         ; tee_files+3D9↓j
.text:0000000000001D5D                 mov     eax, [rsp+2068h+var_204C]
.text:0000000000001D61                 test    eax, eax
.text:0000000000001D63                 jle     short loc_1DE0
.text:0000000000001D65                 sub     eax, 1
.text:0000000000001D68                 mov     dword ptr [rsp+2068h+buf], eax
.text:0000000000001D6C
.text:0000000000001D6C loc_1D6C:                               ; CODE XREF: tee_files+176↑j
.text:0000000000001D6C                 mov     r14d, dword ptr [rsp+2068h+buf]
.text:0000000000001D71                 xor     ebp, ebp
.text:0000000000001D73                 lea     r13, aS_0+2     ; "%s"
.text:0000000000001D7A                 lea     r12, ds:8[r14*8]
.text:0000000000001D82                 jmp     short loc_1D91
.text:0000000000001D82 ; ---------------------------------------------------------------------------
.text:0000000000001D84                 align 8
.text:0000000000001D88
.text:0000000000001D88 loc_1D88:                               ; CODE XREF: tee_files+209↓j
.text:0000000000001D88                                         ; tee_files+212↓j
.text:0000000000001D88                 add     rbp, 8
.text:0000000000001D8C                 cmp     rbp, r12
.text:0000000000001D8F                 jz      short loc_1DE0
.text:0000000000001D91
.text:0000000000001D91 loc_1D91:                               ; CODE XREF: tee_files+1F2↑j
.text:0000000000001D91                                         ; tee_files+249↓j
.text:0000000000001D91                 mov     rdi, [rbx+rbp+8] ; stream
.text:0000000000001D96                 test    rdi, rdi
.text:0000000000001D99                 jz      short loc_1D88
.text:0000000000001D9B                 call    rpl_fclose
.text:0000000000001DA0                 test    eax, eax
.text:0000000000001DA2                 jz      short loc_1D88
.text:0000000000001DA4                 mov     rdx, [r15+rbp]
.text:0000000000001DA8                 xor     edi, edi
.text:0000000000001DAA                 mov     esi, 3
.text:0000000000001DAF                 add     rbp, 8
.text:0000000000001DB3                 call    quotearg_n_style_colon
.text:0000000000001DB8                 mov     r14, rax
.text:0000000000001DBB                 call    ___errno_location
.text:0000000000001DC0                 mov     esi, [rax]      ; errnum
.text:0000000000001DC2                 xor     edi, edi        ; status
.text:0000000000001DC4                 xor     eax, eax
.text:0000000000001DC6                 mov     rcx, r14
.text:0000000000001DC9                 mov     rdx, r13        ; format
.text:0000000000001DCC                 call    _error
.text:0000000000001DD1                 cmp     rbp, r12
.text:0000000000001DD4                 mov     byte ptr [rsp+2068h+errnum], 0
.text:0000000000001DD9                 jnz     short loc_1D91
.text:0000000000001DDB                 nop     dword ptr [rax+rax+00h]
.text:0000000000001DE0
.text:0000000000001DE0 loc_1DE0:                               ; CODE XREF: tee_files+1D3↑j
.text:0000000000001DE0                                         ; tee_files+1FF↑j
.text:0000000000001DE0                 mov     rdi, rbx        ; ptr
.text:0000000000001DE3                 call    _free
.text:0000000000001DE8                 mov     rcx, [rsp+2068h+var_40]
.text:0000000000001DF0                 xor     rcx, fs:28h
.text:0000000000001DF9                 movzx   eax, byte ptr [rsp+2068h+errnum]
.text:0000000000001DFE                 jnz     loc_1F7D
.text:0000000000001E04                 add     rsp, 2038h
.text:0000000000001E0B                 pop     rbx
.text:0000000000001E0C                 pop     rbp
.text:0000000000001E0D                 pop     r12
.text:0000000000001E0F                 pop     r13
.text:0000000000001E11                 pop     r14
.text:0000000000001E13                 pop     r15
.text:0000000000001E15                 retn
.text:0000000000001E15 ; ---------------------------------------------------------------------------
.text:0000000000001E16                 align 20h
.text:0000000000001E20
.text:0000000000001E20 loc_1E20:                               ; CODE XREF: tee_files+1AF↑j
.text:0000000000001E20                 jz      loc_1D5D
.text:0000000000001E26                 mov     eax, [rsp+2068h+var_204C]
.text:0000000000001E2A                 test    eax, eax
.text:0000000000001E2C                 js      loc_1EF5
.text:0000000000001E32                 xor     r14d, r14d
.text:0000000000001E35                 nop     dword ptr [rax]
.text:0000000000001E38
.text:0000000000001E38 loc_1E38:                               ; CODE XREF: tee_files+35F↓j
.text:0000000000001E38                 mov     r13, [rbx+r14]
.text:0000000000001E3C                 test    r13, r13
.text:0000000000001E3F                 jz      loc_1EE6
.text:0000000000001E45                 mov     rdi, [rsp+2068h+buf] ; ptr
.text:0000000000001E4A                 mov     rcx, r13        ; stream
.text:0000000000001E4D                 mov     edx, 1          ; n
.text:0000000000001E52                 mov     rsi, r12        ; size
.text:0000000000001E55                 call    _fwrite_unlocked
.text:0000000000001E5A                 cmp     rax, 1
.text:0000000000001E5E                 jz      loc_1EE6
.text:0000000000001E64                 call    ___errno_location
.text:0000000000001E69                 mov     r10d, [rax]
.text:0000000000001E6C                 mov     rax, cs:stdout@@GLIBC_2_2_5
.text:0000000000001E73                 cmp     r10d, 20h ; ' '
.text:0000000000001E77                 jz      loc_1F08
.text:0000000000001E7D
.text:0000000000001E7D loc_1E7D:                               ; CODE XREF: tee_files+384↓j
.text:0000000000001E7D                 cmp     r13, rax
.text:0000000000001E80                 jnz     short loc_1E94
.text:0000000000001E82                 mov     rdi, r13        ; stream
.text:0000000000001E85                 mov     [rsp+2068h+errnum], r10d
.text:0000000000001E8A                 call    _clearerr_unlocked
.text:0000000000001E8F                 mov     r10d, [rsp+2068h+errnum]
.text:0000000000001E94
.text:0000000000001E94 loc_1E94:                               ; CODE XREF: tee_files+2F0↑j
.text:0000000000001E94                 mov     rdx, [r15+r14-8]
.text:0000000000001E99                 xor     edi, edi
.text:0000000000001E9B                 mov     esi, 3
.text:0000000000001EA0                 mov     [rsp+2068h+errnum], r10d
.text:0000000000001EA5                 call    quotearg_n_style_colon
.text:0000000000001EAA                 mov     ecx, cs:output_error
.text:0000000000001EB0                 mov     r10d, [rsp+2068h+errnum]
.text:0000000000001EB5                 xor     edi, edi
.text:0000000000001EB7                 lea     edx, [rcx-3]
.text:0000000000001EBA                 mov     esi, r10d       ; errnum
.text:0000000000001EBD                 mov     rcx, rax
.text:0000000000001EC0                 cmp     edx, 1
.text:0000000000001EC3                 lea     rdx, aS_0+2     ; format
.text:0000000000001ECA                 setbe   dil             ; status
.text:0000000000001ECE                 xor     eax, eax
.text:0000000000001ED0                 call    _error
.text:0000000000001ED5                 mov     qword ptr [rbx+r14], 0
.text:0000000000001EDD                 mov     byte ptr [rsp+2068h+errnum], 0
.text:0000000000001EE2
.text:0000000000001EE2 loc_1EE2:                               ; CODE XREF: tee_files+397↓j
.text:0000000000001EE2                                         ; tee_files+3A9↓j
.text:0000000000001EE2                 sub     rbp, 1
.text:0000000000001EE6
.text:0000000000001EE6 loc_1EE6:                               ; CODE XREF: tee_files+2AF↑j
.text:0000000000001EE6                                         ; tee_files+2CE↑j
.text:0000000000001EE6                 add     r14, 8
.text:0000000000001EEA                 cmp     [rsp+2068h+var_2060], r14
.text:0000000000001EEF                 jnz     loc_1E38
.text:0000000000001EF5
.text:0000000000001EF5 loc_1EF5:                               ; CODE XREF: tee_files+1BD↑j
.text:0000000000001EF5                                         ; tee_files+29C↑j
.text:0000000000001EF5                 test    rbp, rbp
.text:0000000000001EF8                 jnz     loc_1D28
.text:0000000000001EFE                 jmp     loc_1D53
.text:0000000000001EFE ; ---------------------------------------------------------------------------
.text:0000000000001F03                 align 8
.text:0000000000001F08
.text:0000000000001F08 loc_1F08:                               ; CODE XREF: tee_files+2E7↑j
.text:0000000000001F08                 mov     edx, cs:output_error
.text:0000000000001F0E                 and     edx, 0FFFFFFFDh
.text:0000000000001F11                 cmp     edx, 1
.text:0000000000001F14                 jz      loc_1E7D
.text:0000000000001F1A                 cmp     r13, rax
.text:0000000000001F1D                 jz      short loc_1F29
.text:0000000000001F1F                 mov     qword ptr [rbx+r14], 0
.text:0000000000001F27                 jmp     short loc_1EE2
.text:0000000000001F29 ; ---------------------------------------------------------------------------
.text:0000000000001F29
.text:0000000000001F29 loc_1F29:                               ; CODE XREF: tee_files+38D↑j
.text:0000000000001F29                 mov     rdi, r13        ; stream
.text:0000000000001F2C                 call    _clearerr_unlocked
.text:0000000000001F31                 mov     qword ptr [rbx+r14], 0
.text:0000000000001F39                 jmp     short loc_1EE2
.text:0000000000001F3B ; ---------------------------------------------------------------------------
.text:0000000000001F3B
.text:0000000000001F3B loc_1F3B:                               ; CODE XREF: tee_files+1C7↑j
.text:0000000000001F3B                 lea     rsi, aReadError ; "read error"
.text:0000000000001F42                 mov     edx, 5          ; category
.text:0000000000001F47                 xor     edi, edi        ; domainname
.text:0000000000001F49                 call    _dcgettext
.text:0000000000001F4E                 mov     rbp, rax
.text:0000000000001F51                 call    ___errno_location
.text:0000000000001F56                 mov     esi, [rax]      ; errnum
.text:0000000000001F58                 mov     rdx, rbp        ; format
.text:0000000000001F5B                 xor     edi, edi        ; status
.text:0000000000001F5D                 xor     eax, eax
.text:0000000000001F5F                 call    _error
.text:0000000000001F64                 mov     byte ptr [rsp+2068h+errnum], 0
.text:0000000000001F69                 jmp     loc_1D5D
.text:0000000000001F6E ; ---------------------------------------------------------------------------
.text:0000000000001F6E
.text:0000000000001F6E loc_1F6E:                               ; CODE XREF: tee_files+CA↑j
.text:0000000000001F6E                 mov     byte ptr [rsp+2068h+errnum], 1
.text:0000000000001F73                 mov     ebp, 1
.text:0000000000001F78                 jmp     loc_1D08
.text:0000000000001F7D ; ---------------------------------------------------------------------------
.text:0000000000001F7D
.text:0000000000001F7D loc_1F7D:                               ; CODE XREF: tee_files+26E↑j
.text:0000000000001F7D                 call    ___stack_chk_fail
.text:0000000000001F82 ; ---------------------------------------------------------------------------
.text:0000000000001F82
.text:0000000000001F82 loc_1F82:                               ; CODE XREF: tee_files+73↑j
.text:0000000000001F82                                         ; tee_files+7C↑j
.text:0000000000001F82                 call    xalloc_die
.text:0000000000001F87 ; ---------------------------------------------------------------------------
.text:0000000000001F87
.text:0000000000001F87 loc_1F87:                               ; CODE XREF: tee_files+68↑j
.text:0000000000001F87                 mov     ecx, 1
.text:0000000000001F8C                 jmp     loc_1C00
.text:0000000000001F8C ; } // starts at 1B90
.text:0000000000001F8C tee_files       endp
.text:0000000000001F8C
.text:0000000000001F8C ; ---------------------------------------------------------------------------
.text:0000000000001F91                 align 20h
.text:0000000000001FA0
.text:0000000000001FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001FA0
.text:0000000000001FA0 ; Attributes: noreturn
.text:0000000000001FA0
.text:0000000000001FA0 ; void __fastcall __noreturn usage(int status)
.text:0000000000001FA0                 public usage
.text:0000000000001FA0 usage           proc near               ; CODE XREF: main+1D4↑p
.text:0000000000001FA0                                         ; main+1DE↑p ...
.text:0000000000001FA0
.text:0000000000001FA0 var_A8          = qword ptr -0A8h
.text:0000000000001FA0 var_A0          = qword ptr -0A0h
.text:0000000000001FA0 var_98          = qword ptr -98h
.text:0000000000001FA0 var_90          = qword ptr -90h
.text:0000000000001FA0 var_88          = qword ptr -88h
.text:0000000000001FA0 var_80          = qword ptr -80h
.text:0000000000001FA0 var_78          = qword ptr -78h
.text:0000000000001FA0 var_70          = qword ptr -70h
.text:0000000000001FA0 var_68          = qword ptr -68h
.text:0000000000001FA0 var_60          = qword ptr -60h
.text:0000000000001FA0 var_58          = qword ptr -58h
.text:0000000000001FA0 var_50          = qword ptr -50h
.text:0000000000001FA0 var_48          = qword ptr -48h
.text:0000000000001FA0 var_40          = qword ptr -40h
.text:0000000000001FA0 var_30          = qword ptr -30h
.text:0000000000001FA0
.text:0000000000001FA0 ; __unwind {
.text:0000000000001FA0                 push    r13
.text:0000000000001FA2                 push    r12
.text:0000000000001FA4                 mov     edx, 5          ; category
.text:0000000000001FA9                 push    rbp
.text:0000000000001FAA                 push    rbx
.text:0000000000001FAB                 mov     ebp, edi
.text:0000000000001FAD                 sub     rsp, 88h
.text:0000000000001FB4                 mov     rbx, cs:program_name
.text:0000000000001FBB                 mov     rax, fs:28h
.text:0000000000001FC4                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001FC9                 xor     eax, eax
.text:0000000000001FCB                 test    edi, edi
.text:0000000000001FCD                 jz      short loc_1FFD
.text:0000000000001FCF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001FD6                 xor     edi, edi        ; domainname
.text:0000000000001FD8                 call    _dcgettext
.text:0000000000001FDD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001FE4                 mov     rdx, rax
.text:0000000000001FE7                 mov     rcx, rbx
.text:0000000000001FEA                 mov     esi, 1
.text:0000000000001FEF                 xor     eax, eax
.text:0000000000001FF1                 call    ___fprintf_chk
.text:0000000000001FF6
.text:0000000000001FF6 loc_1FF6:                               ; CODE XREF: usage+2C6↓j
.text:0000000000001FF6                 mov     edi, ebp        ; status
.text:0000000000001FF8                 call    _exit
.text:0000000000001FFD ; ---------------------------------------------------------------------------
.text:0000000000001FFD
.text:0000000000001FFD loc_1FFD:                               ; CODE XREF: usage+2D↑j
.text:0000000000001FFD                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:0000000000002004                 xor     edi, edi        ; domainname
.text:0000000000002006                 call    _dcgettext
.text:000000000000200B                 mov     rdx, rbx
.text:000000000000200E                 mov     rsi, rax
.text:0000000000002011                 mov     edi, 1
.text:0000000000002016                 xor     eax, eax
.text:0000000000002018                 call    ___printf_chk
.text:000000000000201D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002024                 lea     rsi, aCopyStandardIn ; "Copy standard input to each FILE, and a"...
.text:000000000000202B                 mov     edx, 5          ; category
.text:0000000000002030                 xor     edi, edi        ; domainname
.text:0000000000002032                 call    _dcgettext
.text:0000000000002037                 mov     rsi, rbx        ; stream
.text:000000000000203A                 mov     rdi, rax        ; s
.text:000000000000203D                 call    _fputs_unlocked
.text:0000000000002042                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002049                 lea     rsi, aPDiagnoseError ; "  -p                        diagnose er"...
.text:0000000000002050                 mov     edx, 5          ; category
.text:0000000000002055                 xor     edi, edi        ; domainname
.text:0000000000002057                 call    _dcgettext
.text:000000000000205C                 mov     rsi, rbx        ; stream
.text:000000000000205F                 mov     rdi, rax        ; s
.text:0000000000002062                 call    _fputs_unlocked
.text:0000000000002067                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000206E                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002075                 mov     edx, 5          ; category
.text:000000000000207A                 xor     edi, edi        ; domainname
.text:000000000000207C                 call    _dcgettext
.text:0000000000002081                 mov     rsi, rbx        ; stream
.text:0000000000002084                 mov     rdi, rax        ; s
.text:0000000000002087                 call    _fputs_unlocked
.text:000000000000208C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002093                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:000000000000209A                 mov     edx, 5          ; category
.text:000000000000209F                 xor     edi, edi        ; domainname
.text:00000000000020A1                 call    _dcgettext
.text:00000000000020A6                 mov     rsi, rbx        ; stream
.text:00000000000020A9                 mov     rdi, rax        ; s
.text:00000000000020AC                 call    _fputs_unlocked
.text:00000000000020B1                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000020B8                 lea     rsi, aModeDetermines ; "\nMODE determines behavior with write e"...
.text:00000000000020BF                 mov     edx, 5          ; category
.text:00000000000020C4                 xor     edi, edi        ; domainname
.text:00000000000020C6                 call    _dcgettext
.text:00000000000020CB                 mov     rsi, rbx        ; stream
.text:00000000000020CE                 mov     rdi, rax        ; s
.text:00000000000020D1                 lea     rbx, aTee       ; "tee"
.text:00000000000020D8                 call    _fputs_unlocked
.text:00000000000020DD                 lea     rax, asc_5487   ; "["
.text:00000000000020E4                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000020EB                 mov     [rsp+0A8h+var_48], 0
.text:00000000000020F4                 mov     [rsp+0A8h+var_40], 0
.text:00000000000020FD                 mov     rdx, rsp
.text:0000000000002100                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000002104                 lea     rax, aTestInvocation ; "test invocation"
.text:000000000000210B                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002110                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000002117                 mov     [rsp+0A8h+var_A0], rax
.text:000000000000211C                 lea     rax, domainname ; "coreutils"
.text:0000000000002123                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002128                 lea     rcx, aSha512sum ; "sha512sum"
.text:000000000000212F                 mov     [rsp+0A8h+var_98], rax
.text:0000000000002134                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:000000000000213B                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002140                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002145                 lea     rax, aSha224sum ; "sha224sum"
.text:000000000000214C                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002151                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000002158                 mov     [rsp+0A8h+var_80], rax
.text:000000000000215D                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002162                 mov     [rsp+0A8h+var_60], rax
.text:0000000000002167                 mov     [rsp+0A8h+var_50], rax
.text:000000000000216C                 nop     dword ptr [rax+00h]
.text:0000000000002170
.text:0000000000002170 loc_2170:                               ; CODE XREF: usage+1ED↓j
.text:0000000000002170                 add     rdx, 10h
.text:0000000000002174                 mov     rdi, [rdx]
.text:0000000000002177                 test    rdi, rdi
.text:000000000000217A                 jz      short loc_218F
.text:000000000000217C                 mov     ecx, 4
.text:0000000000002181                 mov     rsi, rbx
.text:0000000000002184                 repe cmpsb
.text:0000000000002186                 setnbe  al
.text:0000000000002189                 sbb     al, 0
.text:000000000000218B                 test    al, al
.text:000000000000218D                 jnz     short loc_2170
.text:000000000000218F
.text:000000000000218F loc_218F:                               ; CODE XREF: usage+1DA↑j
.text:000000000000218F                 mov     r12, [rdx+8]
.text:0000000000002193                 xor     edi, edi        ; domainname
.text:0000000000002195                 mov     edx, 5          ; category
.text:000000000000219A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:00000000000021A1                 test    r12, r12
.text:00000000000021A4                 jz      loc_226B
.text:00000000000021AA                 call    _dcgettext
.text:00000000000021AF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000021B6                 lea     rdx, unk_54FD
.text:00000000000021BD                 mov     rsi, rax
.text:00000000000021C0                 mov     edi, 1
.text:00000000000021C5                 xor     eax, eax
.text:00000000000021C7                 call    ___printf_chk
.text:00000000000021CC                 xor     esi, esi        ; locale
.text:00000000000021CE                 mov     edi, 5          ; category
.text:00000000000021D3                 call    _setlocale
.text:00000000000021D8                 test    rax, rax
.text:00000000000021DB                 jz      short loc_21F9
.text:00000000000021DD                 lea     rsi, s2         ; "en_"
.text:00000000000021E4                 mov     edx, 3          ; n
.text:00000000000021E9                 mov     rdi, rax        ; s1
.text:00000000000021EC                 call    _strncmp
.text:00000000000021F1                 test    eax, eax
.text:00000000000021F3                 jnz     loc_2300
.text:00000000000021F9
.text:00000000000021F9 loc_21F9:                               ; CODE XREF: usage+23B↑j
.text:00000000000021F9                                         ; usage+385↓j
.text:00000000000021F9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002200                 xor     edi, edi        ; domainname
.text:0000000000002202                 mov     edx, 5          ; category
.text:0000000000002207                 call    _dcgettext
.text:000000000000220C                 lea     rcx, aTee       ; "tee"
.text:0000000000002213                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000221A                 mov     rsi, rax
.text:000000000000221D                 mov     edi, 1
.text:0000000000002222                 xor     eax, eax
.text:0000000000002224                 call    ___printf_chk
.text:0000000000002229                 cmp     r12, rbx
.text:000000000000222C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002233                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:000000000000223A                 cmovz   rbx, rcx
.text:000000000000223E
.text:000000000000223E loc_223E:                               ; CODE XREF: usage+354↓j
.text:000000000000223E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002245                 xor     edi, edi        ; domainname
.text:0000000000002247                 mov     edx, 5          ; category
.text:000000000000224C                 call    _dcgettext
.text:0000000000002251                 mov     rcx, rbx
.text:0000000000002254                 mov     rsi, rax
.text:0000000000002257                 mov     rdx, r12
.text:000000000000225A                 mov     edi, 1
.text:000000000000225F                 xor     eax, eax
.text:0000000000002261                 call    ___printf_chk
.text:0000000000002266                 jmp     loc_1FF6
.text:000000000000226B ; ---------------------------------------------------------------------------
.text:000000000000226B
.text:000000000000226B loc_226B:                               ; CODE XREF: usage+204↑j
.text:000000000000226B                 call    _dcgettext
.text:0000000000002270                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002277                 lea     rdx, unk_54FD
.text:000000000000227E                 mov     rsi, rax
.text:0000000000002281                 mov     edi, 1
.text:0000000000002286                 xor     eax, eax
.text:0000000000002288                 call    ___printf_chk
.text:000000000000228D                 xor     esi, esi        ; locale
.text:000000000000228F                 mov     edi, 5          ; category
.text:0000000000002294                 call    _setlocale
.text:0000000000002299                 test    rax, rax
.text:000000000000229C                 jz      short loc_22B6
.text:000000000000229E                 lea     rsi, s2         ; "en_"
.text:00000000000022A5                 mov     edx, 3          ; n
.text:00000000000022AA                 mov     rdi, rax        ; s1
.text:00000000000022AD                 call    _strncmp
.text:00000000000022B2                 test    eax, eax
.text:00000000000022B4                 jnz     short loc_22F9
.text:00000000000022B6
.text:00000000000022B6 loc_22B6:                               ; CODE XREF: usage+2FC↑j
.text:00000000000022B6                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000022BD                 mov     edx, 5          ; category
.text:00000000000022C2                 xor     edi, edi        ; domainname
.text:00000000000022C4                 lea     r12, aTee       ; "tee"
.text:00000000000022CB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000022D2                 call    _dcgettext
.text:00000000000022D7                 lea     rcx, aTee       ; "tee"
.text:00000000000022DE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000022E5                 mov     rsi, rax
.text:00000000000022E8                 mov     edi, 1
.text:00000000000022ED                 xor     eax, eax
.text:00000000000022EF                 call    ___printf_chk
.text:00000000000022F4                 jmp     loc_223E
.text:00000000000022F9 ; ---------------------------------------------------------------------------
.text:00000000000022F9
.text:00000000000022F9 loc_22F9:                               ; CODE XREF: usage+314↑j
.text:00000000000022F9                 lea     r12, aTee       ; "tee"
.text:0000000000002300
.text:0000000000002300 loc_2300:                               ; CODE XREF: usage+253↑j
.text:0000000000002300                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000002307                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000230E                 xor     edi, edi        ; domainname
.text:0000000000002310                 mov     edx, 5          ; category
.text:0000000000002315                 call    _dcgettext
.text:000000000000231A                 mov     rsi, r13        ; stream
.text:000000000000231D                 mov     rdi, rax        ; s
.text:0000000000002320                 call    _fputs_unlocked
.text:0000000000002325                 jmp     loc_21F9
.text:0000000000002325 ; } // starts at 1FA0
.text:0000000000002325 usage           endp
.text:0000000000002325
.text:0000000000002325 ; ---------------------------------------------------------------------------
.text:000000000000232A                 align 10h
.text:0000000000002330
.text:0000000000002330 ; =============== S U B R O U T I N E =======================================
.text:0000000000002330
.text:0000000000002330 ; Attributes: noreturn
.text:0000000000002330
.text:0000000000002330 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:0000000000002330 ; __unwind {
.text:0000000000002330                 mov     edi, 1          ; status
.text:0000000000002335                 jmp     usage
.text:0000000000002335 ; } // starts at 2330
.text:0000000000002335 __argmatch_die  endp
.text:0000000000002335
.text:0000000000002335 ; ---------------------------------------------------------------------------
.text:000000000000233A                 align 20h
.text:0000000000002340
.text:0000000000002340 ; =============== S U B R O U T I N E =======================================
.text:0000000000002340
.text:0000000000002340 ; Attributes: info_from_lumina
.text:0000000000002340
.text:0000000000002340 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000002340                 public argmatch
.text:0000000000002340 argmatch        proc near               ; CODE XREF: __xargmatch_internal+2C↓p
.text:0000000000002340
.text:0000000000002340 var_58          = qword ptr -58h
.text:0000000000002340 s2              = qword ptr -50h
.text:0000000000002340 var_41          = byte ptr -41h
.text:0000000000002340 var_40          = qword ptr -40h
.text:0000000000002340
.text:0000000000002340 ; __unwind {
.text:0000000000002340                 push    r15
.text:0000000000002342                 push    r14
.text:0000000000002344                 mov     r15, rsi
.text:0000000000002347                 push    r13
.text:0000000000002349                 push    r12
.text:000000000000234B                 mov     r13, rcx
.text:000000000000234E                 push    rbp
.text:000000000000234F                 push    rbx
.text:0000000000002350                 mov     rbp, rdx
.text:0000000000002353                 sub     rsp, 28h
.text:0000000000002357                 mov     [rsp+58h+s2], rdi
.text:000000000000235C                 mov     [rsp+58h+var_40], rdx
.text:0000000000002361                 call    _strlen
.text:0000000000002366                 mov     r14, [r15]
.text:0000000000002369                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:0000000000002371                 test    r14, r14
.text:0000000000002374                 jz      loc_242D
.text:000000000000237A                 mov     r12, rax
.text:000000000000237D                 mov     [rsp+58h+var_41], 0
.text:0000000000002382                 xor     ebx, ebx
.text:0000000000002384                 jmp     short loc_23D7
.text:0000000000002384 ; ---------------------------------------------------------------------------
.text:0000000000002386                 align 10h
.text:0000000000002390
.text:0000000000002390 loc_2390:                               ; CODE XREF: argmatch+BD↓j
.text:0000000000002390                 mov     rax, [rsp+58h+var_40]
.text:0000000000002395                 test    rax, rax
.text:0000000000002398                 jz      loc_2440
.text:000000000000239E                 mov     rdi, [rsp+58h+var_58]
.text:00000000000023A2                 mov     rdx, r13        ; n
.text:00000000000023A5                 mov     rsi, rbp        ; s2
.text:00000000000023A8                 imul    rdi, r13
.text:00000000000023AC                 add     rdi, rax        ; s1
.text:00000000000023AF                 call    _memcmp
.text:00000000000023B4                 test    eax, eax
.text:00000000000023B6                 movzx   eax, [rsp+58h+var_41]
.text:00000000000023BB                 mov     ecx, 1
.text:00000000000023C0                 cmovnz  eax, ecx
.text:00000000000023C3                 mov     [rsp+58h+var_41], al
.text:00000000000023C7
.text:00000000000023C7 loc_23C7:                               ; CODE XREF: argmatch+A9↓j
.text:00000000000023C7                                         ; argmatch+105↓j
.text:00000000000023C7                 add     rbx, 1
.text:00000000000023CB                 add     rbp, r13
.text:00000000000023CE                 mov     r14, [r15+rbx*8]
.text:00000000000023D2                 test    r14, r14
.text:00000000000023D5                 jz      short loc_2418
.text:00000000000023D7
.text:00000000000023D7 loc_23D7:                               ; CODE XREF: argmatch+44↑j
.text:00000000000023D7                                         ; argmatch+D1↓j
.text:00000000000023D7                 mov     rsi, [rsp+58h+s2] ; s2
.text:00000000000023DC                 mov     rdx, r12        ; n
.text:00000000000023DF                 mov     rdi, r14        ; s1
.text:00000000000023E2                 call    _strncmp
.text:00000000000023E7                 test    eax, eax
.text:00000000000023E9                 jnz     short loc_23C7
.text:00000000000023EB                 mov     rdi, r14        ; s
.text:00000000000023EE                 call    _strlen
.text:00000000000023F3                 cmp     rax, r12
.text:00000000000023F6                 jz      short loc_2450
.text:00000000000023F8                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:00000000000023FD                 jnz     short loc_2390
.text:00000000000023FF                 mov     [rsp+58h+var_58], rbx
.text:0000000000002403                 add     rbx, 1
.text:0000000000002407                 add     rbp, r13
.text:000000000000240A                 mov     r14, [r15+rbx*8]
.text:000000000000240E                 test    r14, r14
.text:0000000000002411                 jnz     short loc_23D7
.text:0000000000002413                 nop     dword ptr [rax+rax+00h]
.text:0000000000002418
.text:0000000000002418 loc_2418:                               ; CODE XREF: argmatch+95↑j
.text:0000000000002418                 cmp     [rsp+58h+var_41], 0
.text:000000000000241D                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002424                 cmovz   rax, [rsp+58h+var_58]
.text:0000000000002429                 mov     [rsp+58h+var_58], rax
.text:000000000000242D
.text:000000000000242D loc_242D:                               ; CODE XREF: argmatch+34↑j
.text:000000000000242D                                         ; argmatch+114↓j
.text:000000000000242D                 mov     rax, [rsp+58h+var_58]
.text:0000000000002431                 add     rsp, 28h
.text:0000000000002435                 pop     rbx
.text:0000000000002436                 pop     rbp
.text:0000000000002437                 pop     r12
.text:0000000000002439                 pop     r13
.text:000000000000243B                 pop     r14
.text:000000000000243D                 pop     r15
.text:000000000000243F                 retn
.text:0000000000002440 ; ---------------------------------------------------------------------------
.text:0000000000002440
.text:0000000000002440 loc_2440:                               ; CODE XREF: argmatch+58↑j
.text:0000000000002440                 mov     [rsp+58h+var_41], 1
.text:0000000000002445                 jmp     short loc_23C7
.text:0000000000002445 ; ---------------------------------------------------------------------------
.text:0000000000002447                 align 10h
.text:0000000000002450
.text:0000000000002450 loc_2450:                               ; CODE XREF: argmatch+B6↑j
.text:0000000000002450                 mov     [rsp+58h+var_58], rbx
.text:0000000000002454                 jmp     short loc_242D
.text:0000000000002454 ; } // starts at 2340
.text:0000000000002454 argmatch        endp
.text:0000000000002454
.text:0000000000002454 ; ---------------------------------------------------------------------------
.text:0000000000002456                 align 20h
.text:0000000000002460
.text:0000000000002460 ; =============== S U B R O U T I N E =======================================
.text:0000000000002460
.text:0000000000002460 ; Attributes: info_from_lumina
.text:0000000000002460
.text:0000000000002460 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:0000000000002460                 public argmatch_invalid
.text:0000000000002460 argmatch_invalid proc near              ; CODE XREF: __xargmatch_internal+4E↓p
.text:0000000000002460 ; __unwind {
.text:0000000000002460                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002464                 push    r12
.text:0000000000002466                 mov     edx, 5          ; category
.text:000000000000246B                 push    rbp
.text:000000000000246C                 mov     r12, rsi
.text:000000000000246F                 push    rbx
.text:0000000000002470                 mov     rbp, rdi
.text:0000000000002473                 jz      short loc_24C0
.text:0000000000002475                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:000000000000247C                 xor     edi, edi        ; domainname
.text:000000000000247E                 call    _dcgettext
.text:0000000000002483                 mov     rbx, rax
.text:0000000000002486
.text:0000000000002486 loc_2486:                               ; CODE XREF: argmatch_invalid+71↓j
.text:0000000000002486                 mov     rsi, rbp
.text:0000000000002489                 mov     edi, 1
.text:000000000000248E                 call    quote_n
.text:0000000000002493                 mov     rdx, r12
.text:0000000000002496                 mov     rbp, rax
.text:0000000000002499                 mov     esi, 8
.text:000000000000249E                 xor     edi, edi
.text:00000000000024A0                 call    quotearg_n_style
.text:00000000000024A5                 mov     r8, rbp
.text:00000000000024A8                 mov     rdx, rbx        ; format
.text:00000000000024AB                 mov     rcx, rax
.text:00000000000024AE                 pop     rbx
.text:00000000000024AF                 pop     rbp
.text:00000000000024B0                 pop     r12
.text:00000000000024B2                 xor     esi, esi        ; errnum
.text:00000000000024B4                 xor     edi, edi        ; status
.text:00000000000024B6                 xor     eax, eax
.text:00000000000024B8                 jmp     _error
.text:00000000000024B8 ; ---------------------------------------------------------------------------
.text:00000000000024BD                 align 20h
.text:00000000000024C0
.text:00000000000024C0 loc_24C0:                               ; CODE XREF: argmatch_invalid+13↑j
.text:00000000000024C0                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:00000000000024C7                 xor     edi, edi        ; domainname
.text:00000000000024C9                 call    _dcgettext
.text:00000000000024CE                 mov     rbx, rax
.text:00000000000024D1                 jmp     short loc_2486
.text:00000000000024D1 ; } // starts at 2460
.text:00000000000024D1 argmatch_invalid endp
.text:00000000000024D1
.text:00000000000024D1 ; ---------------------------------------------------------------------------
.text:00000000000024D3                 align 20h
.text:00000000000024E0
.text:00000000000024E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000024E0
.text:00000000000024E0 ; Attributes: info_from_lumina
.text:00000000000024E0
.text:00000000000024E0 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:00000000000024E0                 public argmatch_valid
.text:00000000000024E0 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:00000000000024E0 ; __unwind {
.text:00000000000024E0                 push    r15
.text:00000000000024E2                 push    r14
.text:00000000000024E4                 mov     r14, rdi
.text:00000000000024E7                 push    r13
.text:00000000000024E9                 push    r12
.text:00000000000024EB                 xor     edi, edi        ; domainname
.text:00000000000024ED                 push    rbp
.text:00000000000024EE                 push    rbx
.text:00000000000024EF                 mov     rbp, rsi
.text:00000000000024F2                 lea     rsi, aValidArguments ; "Valid arguments are:"
.text:00000000000024F9                 mov     r12, rdx
.text:00000000000024FC                 mov     edx, 5          ; category
.text:0000000000002501                 sub     rsp, 8
.text:0000000000002505                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:000000000000250C                 call    _dcgettext
.text:0000000000002511                 mov     rdi, rax        ; s
.text:0000000000002514                 mov     rsi, rbx        ; stream
.text:0000000000002517                 call    _fputs_unlocked
.text:000000000000251C                 mov     r15, [r14]
.text:000000000000251F                 test    r15, r15
.text:0000000000002522                 jz      loc_25B8
.text:0000000000002528                 xor     r13d, r13d
.text:000000000000252B                 xor     ebx, ebx
.text:000000000000252D                 jmp     short loc_2568
.text:000000000000252D ; ---------------------------------------------------------------------------
.text:000000000000252F                 align 10h
.text:0000000000002530
.text:0000000000002530 loc_2530:                               ; CODE XREF: argmatch_valid+8B↓j
.text:0000000000002530                                         ; argmatch_valid+9D↓j
.text:0000000000002530                 mov     rdi, r15
.text:0000000000002533                 add     rbx, 1
.text:0000000000002537                 mov     r13, rbp
.text:000000000000253A                 call    quote
.text:000000000000253F                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002546                 lea     rdx, aS         ; "\n  - %s"
.text:000000000000254D                 mov     rcx, rax
.text:0000000000002550                 mov     esi, 1
.text:0000000000002555                 xor     eax, eax
.text:0000000000002557                 add     rbp, r12
.text:000000000000255A                 call    ___fprintf_chk
.text:000000000000255F                 mov     r15, [r14+rbx*8]
.text:0000000000002563                 test    r15, r15
.text:0000000000002566                 jz      short loc_25B8
.text:0000000000002568
.text:0000000000002568 loc_2568:                               ; CODE XREF: argmatch_valid+4D↑j
.text:0000000000002568                                         ; argmatch_valid+D2↓j
.text:0000000000002568                 test    rbx, rbx
.text:000000000000256B                 jz      short loc_2530
.text:000000000000256D                 mov     rdx, r12        ; n
.text:0000000000002570                 mov     rsi, rbp        ; s2
.text:0000000000002573                 mov     rdi, r13        ; s1
.text:0000000000002576                 call    _memcmp
.text:000000000000257B                 test    eax, eax
.text:000000000000257D                 jnz     short loc_2530
.text:000000000000257F                 mov     rdi, r15
.text:0000000000002582                 add     rbx, 1
.text:0000000000002586                 add     rbp, r12
.text:0000000000002589                 call    quote
.text:000000000000258E                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002595                 lea     rdx, aS_0       ; ", %s"
.text:000000000000259C                 mov     rcx, rax
.text:000000000000259F                 mov     esi, 1
.text:00000000000025A4                 xor     eax, eax
.text:00000000000025A6                 call    ___fprintf_chk
.text:00000000000025AB                 mov     r15, [r14+rbx*8]
.text:00000000000025AF                 test    r15, r15
.text:00000000000025B2                 jnz     short loc_2568
.text:00000000000025B4                 nop     dword ptr [rax+00h]
.text:00000000000025B8
.text:00000000000025B8 loc_25B8:                               ; CODE XREF: argmatch_valid+42↑j
.text:00000000000025B8                                         ; argmatch_valid+86↑j
.text:00000000000025B8                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000025BF                 mov     rax, [rdi+28h]
.text:00000000000025C3                 cmp     rax, [rdi+30h]
.text:00000000000025C7                 jnb     short loc_25E8
.text:00000000000025C9                 lea     rdx, [rax+1]
.text:00000000000025CD                 mov     [rdi+28h], rdx
.text:00000000000025D1                 mov     byte ptr [rax], 0Ah
.text:00000000000025D4                 add     rsp, 8
.text:00000000000025D8                 pop     rbx
.text:00000000000025D9                 pop     rbp
.text:00000000000025DA                 pop     r12
.text:00000000000025DC                 pop     r13
.text:00000000000025DE                 pop     r14
.text:00000000000025E0                 pop     r15
.text:00000000000025E2                 retn
.text:00000000000025E2 ; ---------------------------------------------------------------------------
.text:00000000000025E3                 align 8
.text:00000000000025E8
.text:00000000000025E8 loc_25E8:                               ; CODE XREF: argmatch_valid+E7↑j
.text:00000000000025E8                 add     rsp, 8
.text:00000000000025EC                 mov     esi, 0Ah        ; int
.text:00000000000025F1                 pop     rbx
.text:00000000000025F2                 pop     rbp
.text:00000000000025F3                 pop     r12
.text:00000000000025F5                 pop     r13
.text:00000000000025F7                 pop     r14
.text:00000000000025F9                 pop     r15
.text:00000000000025FB                 jmp     ___overflow
.text:00000000000025FB ; } // starts at 24E0
.text:00000000000025FB argmatch_valid  endp
.text:00000000000025FB
.text:0000000000002600
.text:0000000000002600 ; =============== S U B R O U T I N E =======================================
.text:0000000000002600
.text:0000000000002600 ; Attributes: info_from_lumina
.text:0000000000002600
.text:0000000000002600 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:0000000000002600                 public __xargmatch_internal
.text:0000000000002600 __xargmatch_internal proc near          ; CODE XREF: main+D1↑p
.text:0000000000002600 ; __unwind {
.text:0000000000002600                 push    r15
.text:0000000000002602                 push    r14
.text:0000000000002604                 mov     r14, rdi
.text:0000000000002607                 push    r13
.text:0000000000002609                 push    r12
.text:000000000000260B                 mov     r12, rsi
.text:000000000000260E                 push    rbp
.text:000000000000260F                 push    rbx
.text:0000000000002610                 mov     rbp, rcx
.text:0000000000002613                 mov     rbx, rdx
.text:0000000000002616                 mov     rcx, r8
.text:0000000000002619                 mov     rdx, rbp
.text:000000000000261C                 sub     rsp, 8
.text:0000000000002620                 mov     rsi, rbx
.text:0000000000002623                 mov     rdi, r12
.text:0000000000002626                 mov     r15, r8
.text:0000000000002629                 mov     r13, r9
.text:000000000000262C                 call    argmatch
.text:0000000000002631                 test    rax, rax
.text:0000000000002634                 js      short loc_2645
.text:0000000000002636
.text:0000000000002636 loc_2636:                               ; CODE XREF: __xargmatch_internal+6B↓j
.text:0000000000002636                 add     rsp, 8
.text:000000000000263A                 pop     rbx
.text:000000000000263B                 pop     rbp
.text:000000000000263C                 pop     r12
.text:000000000000263E                 pop     r13
.text:0000000000002640                 pop     r14
.text:0000000000002642                 pop     r15
.text:0000000000002644                 retn
.text:0000000000002645 ; ---------------------------------------------------------------------------
.text:0000000000002645
.text:0000000000002645 loc_2645:                               ; CODE XREF: __xargmatch_internal+34↑j
.text:0000000000002645                 mov     rdx, rax
.text:0000000000002648                 mov     rsi, r12
.text:000000000000264B                 mov     rdi, r14
.text:000000000000264E                 call    argmatch_invalid
.text:0000000000002653                 mov     rdx, r15
.text:0000000000002656                 mov     rsi, rbp
.text:0000000000002659                 mov     rdi, rbx
.text:000000000000265C                 call    argmatch_valid
.text:0000000000002661                 call    r13
.text:0000000000002664                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000266B                 jmp     short loc_2636
.text:000000000000266B ; } // starts at 2600
.text:000000000000266B __xargmatch_internal endp
.text:000000000000266B
.text:000000000000266B ; ---------------------------------------------------------------------------
.text:000000000000266D                 align 10h
.text:0000000000002670
.text:0000000000002670 ; =============== S U B R O U T I N E =======================================
.text:0000000000002670
.text:0000000000002670 ; Attributes: info_from_lumina
.text:0000000000002670
.text:0000000000002670 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000002670                 public argmatch_to_argument
.text:0000000000002670 argmatch_to_argument proc near
.text:0000000000002670 ; __unwind {
.text:0000000000002670                 push    r14
.text:0000000000002672                 push    r13
.text:0000000000002674                 push    r12
.text:0000000000002676                 push    rbp
.text:0000000000002677                 push    rbx
.text:0000000000002678                 mov     r14, [rsi]
.text:000000000000267B                 test    r14, r14
.text:000000000000267E                 jz      short loc_26B1
.text:0000000000002680                 mov     r12, rcx
.text:0000000000002683                 mov     r13, rdi
.text:0000000000002686                 mov     rbp, rdx
.text:0000000000002689                 lea     rbx, [rsi+8]
.text:000000000000268D                 jmp     short loc_269F
.text:000000000000268D ; ---------------------------------------------------------------------------
.text:000000000000268F                 align 10h
.text:0000000000002690
.text:0000000000002690 loc_2690:                               ; CODE XREF: argmatch_to_argument+3F↓j
.text:0000000000002690                 mov     r14, [rbx]
.text:0000000000002693                 add     rbp, r12
.text:0000000000002696                 add     rbx, 8
.text:000000000000269A                 test    r14, r14
.text:000000000000269D                 jz      short loc_26B1
.text:000000000000269F
.text:000000000000269F loc_269F:                               ; CODE XREF: argmatch_to_argument+1D↑j
.text:000000000000269F                 mov     rdx, r12        ; n
.text:00000000000026A2                 mov     rsi, rbp        ; s2
.text:00000000000026A5                 mov     rdi, r13        ; s1
.text:00000000000026A8                 call    _memcmp
.text:00000000000026AD                 test    eax, eax
.text:00000000000026AF                 jnz     short loc_2690
.text:00000000000026B1
.text:00000000000026B1 loc_26B1:                               ; CODE XREF: argmatch_to_argument+E↑j
.text:00000000000026B1                                         ; argmatch_to_argument+2D↑j
.text:00000000000026B1                 pop     rbx
.text:00000000000026B2                 mov     rax, r14
.text:00000000000026B5                 pop     rbp
.text:00000000000026B6                 pop     r12
.text:00000000000026B8                 pop     r13
.text:00000000000026BA                 pop     r14
.text:00000000000026BC                 retn
.text:00000000000026BC ; } // starts at 2670
.text:00000000000026BC argmatch_to_argument endp
.text:00000000000026BC
.text:00000000000026BC ; ---------------------------------------------------------------------------
.text:00000000000026BD                 align 20h
.text:00000000000026C0
.text:00000000000026C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000026C0
.text:00000000000026C0
.text:00000000000026C0                 public close_stdout_set_file_name
.text:00000000000026C0 close_stdout_set_file_name proc near
.text:00000000000026C0 ; __unwind {
.text:00000000000026C0                 mov     cs:file_name, rdi
.text:00000000000026C7                 retn
.text:00000000000026C7 ; } // starts at 26C0
.text:00000000000026C7 close_stdout_set_file_name endp
.text:00000000000026C7
.text:00000000000026C7 ; ---------------------------------------------------------------------------
.text:00000000000026C8                 align 10h
.text:00000000000026D0
.text:00000000000026D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000026D0
.text:00000000000026D0
.text:00000000000026D0                 public close_stdout_set_ignore_EPIPE
.text:00000000000026D0 close_stdout_set_ignore_EPIPE proc near
.text:00000000000026D0 ; __unwind {
.text:00000000000026D0                 mov     cs:ignore_EPIPE, dil
.text:00000000000026D7                 retn
.text:00000000000026D7 ; } // starts at 26D0
.text:00000000000026D7 close_stdout_set_ignore_EPIPE endp
.text:00000000000026D7
.text:00000000000026D7 ; ---------------------------------------------------------------------------
.text:00000000000026D8                 align 20h
.text:00000000000026E0
.text:00000000000026E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000026E0
.text:00000000000026E0 ; Attributes: info_from_lumina
.text:00000000000026E0
.text:00000000000026E0 ; void __cdecl close_stdout()
.text:00000000000026E0                 public close_stdout
.text:00000000000026E0 close_stdout    proc near               ; DATA XREF: main+48↑o
.text:00000000000026E0 ; __unwind {
.text:00000000000026E0                 push    rbp
.text:00000000000026E1                 push    rbx
.text:00000000000026E2                 sub     rsp, 8
.text:00000000000026E6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000026ED                 call    close_stream
.text:00000000000026F2                 test    eax, eax
.text:00000000000026F4                 jz      short loc_270C
.text:00000000000026F6                 call    ___errno_location
.text:00000000000026FB                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002702                 mov     rbx, rax
.text:0000000000002705                 jz      short loc_2723
.text:0000000000002707                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000270A                 jnz     short loc_2723
.text:000000000000270C
.text:000000000000270C loc_270C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000270C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002713                 call    close_stream
.text:0000000000002718                 test    eax, eax
.text:000000000000271A                 jnz     short loc_2762
.text:000000000000271C                 add     rsp, 8
.text:0000000000002720                 pop     rbx
.text:0000000000002721                 pop     rbp
.text:0000000000002722                 retn
.text:0000000000002723 ; ---------------------------------------------------------------------------
.text:0000000000002723
.text:0000000000002723 loc_2723:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000002723                                         ; close_stdout+2A↑j
.text:0000000000002723                 lea     rsi, aWriteError ; "write error"
.text:000000000000272A                 xor     edi, edi        ; domainname
.text:000000000000272C                 mov     edx, 5          ; category
.text:0000000000002731                 call    _dcgettext
.text:0000000000002736                 mov     rdi, cs:file_name
.text:000000000000273D                 mov     rbp, rax
.text:0000000000002740                 test    rdi, rdi
.text:0000000000002743                 jz      short loc_276D
.text:0000000000002745                 call    quotearg_colon
.text:000000000000274A                 mov     esi, [rbx]      ; errnum
.text:000000000000274C                 lea     rdx, format     ; "%s: %s"
.text:0000000000002753                 mov     rcx, rax
.text:0000000000002756                 mov     r8, rbp
.text:0000000000002759                 xor     edi, edi        ; status
.text:000000000000275B                 xor     eax, eax
.text:000000000000275D                 call    _error
.text:0000000000002762
.text:0000000000002762 loc_2762:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002762                                         ; close_stdout+A2↓j
.text:0000000000002762                 mov     edi, cs:exit_failure ; status
.text:0000000000002768                 call    __exit
.text:000000000000276D ; ---------------------------------------------------------------------------
.text:000000000000276D
.text:000000000000276D loc_276D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000276D                 mov     esi, [rbx]      ; errnum
.text:000000000000276F                 lea     rdx, aS_0+2     ; format
.text:0000000000002776                 mov     rcx, rax
.text:0000000000002779                 xor     edi, edi        ; status
.text:000000000000277B                 xor     eax, eax
.text:000000000000277D                 call    _error
.text:0000000000002782                 jmp     short loc_2762
.text:0000000000002782 ; } // starts at 26E0
.text:0000000000002782 close_stdout    endp
.text:0000000000002782
.text:0000000000002782 ; ---------------------------------------------------------------------------
.text:0000000000002784                 align 10h
.text:0000000000002790
.text:0000000000002790 ; =============== S U B R O U T I N E =======================================
.text:0000000000002790
.text:0000000000002790
.text:0000000000002790 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:0000000000002790                 public fdadvise
.text:0000000000002790 fdadvise        proc near
.text:0000000000002790 ; __unwind {
.text:0000000000002790                 jmp     _posix_fadvise
.text:0000000000002790 ; } // starts at 2790
.text:0000000000002790 fdadvise        endp
.text:0000000000002790
.text:0000000000002790 ; ---------------------------------------------------------------------------
.text:0000000000002795                 align 20h
.text:00000000000027A0
.text:00000000000027A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000027A0
.text:00000000000027A0
.text:00000000000027A0                 public fadvise
.text:00000000000027A0 fadvise         proc near               ; CODE XREF: tee_files+52↑p
.text:00000000000027A0 ; __unwind {
.text:00000000000027A0                 test    rdi, rdi
.text:00000000000027A3                 jz      short locret_27C0
.text:00000000000027A5                 push    rbx
.text:00000000000027A6                 mov     ebx, esi
.text:00000000000027A8                 call    _fileno
.text:00000000000027AD                 mov     ecx, ebx        ; advise
.text:00000000000027AF                 xor     edx, edx        ; len
.text:00000000000027B1                 xor     esi, esi        ; offset
.text:00000000000027B3                 pop     rbx
.text:00000000000027B4                 mov     edi, eax        ; fd
.text:00000000000027B6                 jmp     _posix_fadvise
.text:00000000000027B6 ; ---------------------------------------------------------------------------
.text:00000000000027BB                 align 20h
.text:00000000000027C0
.text:00000000000027C0 locret_27C0:                            ; CODE XREF: fadvise+3↑j
.text:00000000000027C0                 rep retn
.text:00000000000027C0 ; } // starts at 27A0
.text:00000000000027C0 fadvise         endp
.text:00000000000027C0
.text:00000000000027C0 ; ---------------------------------------------------------------------------
.text:00000000000027C2                 align 10h
.text:00000000000027D0
.text:00000000000027D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000027D0
.text:00000000000027D0
.text:00000000000027D0                 public fopen_safer
.text:00000000000027D0 fopen_safer     proc near               ; CODE XREF: tee_files+115↑p
.text:00000000000027D0 ; __unwind {
.text:00000000000027D0                 push    r12
.text:00000000000027D2                 push    rbp
.text:00000000000027D3                 mov     rbp, rsi
.text:00000000000027D6                 push    rbx
.text:00000000000027D7                 call    _fopen
.text:00000000000027DC                 test    rax, rax
.text:00000000000027DF                 mov     rbx, rax
.text:00000000000027E2                 jz      short loc_27F1
.text:00000000000027E4                 mov     rdi, rax        ; stream
.text:00000000000027E7                 call    _fileno
.text:00000000000027EC                 cmp     eax, 2
.text:00000000000027EF                 jbe     short loc_2800
.text:00000000000027F1
.text:00000000000027F1 loc_27F1:                               ; CODE XREF: fopen_safer+12↑j
.text:00000000000027F1                                         ; fopen_safer+5B↓j ...
.text:00000000000027F1                 mov     rax, rbx
.text:00000000000027F4                 pop     rbx
.text:00000000000027F5                 pop     rbp
.text:00000000000027F6                 pop     r12
.text:00000000000027F8                 retn
.text:00000000000027F8 ; ---------------------------------------------------------------------------
.text:00000000000027F9                 align 20h
.text:0000000000002800
.text:0000000000002800 loc_2800:                               ; CODE XREF: fopen_safer+1F↑j
.text:0000000000002800                 mov     edi, eax
.text:0000000000002802                 call    dup_safer
.text:0000000000002807                 test    eax, eax
.text:0000000000002809                 mov     r12d, eax
.text:000000000000280C                 js      short loc_2848
.text:000000000000280E                 mov     rdi, rbx        ; stream
.text:0000000000002811                 call    rpl_fclose
.text:0000000000002816                 test    eax, eax
.text:0000000000002818                 jnz     short loc_282D
.text:000000000000281A                 mov     rsi, rbp        ; modes
.text:000000000000281D                 mov     edi, r12d       ; fd
.text:0000000000002820                 call    _fdopen
.text:0000000000002825                 test    rax, rax
.text:0000000000002828                 mov     rbx, rax
.text:000000000000282B                 jnz     short loc_27F1
.text:000000000000282D
.text:000000000000282D loc_282D:                               ; CODE XREF: fopen_safer+48↑j
.text:000000000000282D                 call    ___errno_location
.text:0000000000002832                 mov     ebp, [rax]
.text:0000000000002834                 mov     rbx, rax
.text:0000000000002837                 mov     edi, r12d       ; fd
.text:000000000000283A                 call    _close
.text:000000000000283F                 mov     [rbx], ebp
.text:0000000000002841                 xor     ebx, ebx
.text:0000000000002843                 jmp     short loc_27F1
.text:0000000000002843 ; ---------------------------------------------------------------------------
.text:0000000000002845                 align 8
.text:0000000000002848
.text:0000000000002848 loc_2848:                               ; CODE XREF: fopen_safer+3C↑j
.text:0000000000002848                 call    ___errno_location
.text:000000000000284D                 mov     r12d, [rax]
.text:0000000000002850                 mov     rbp, rax
.text:0000000000002853                 mov     rdi, rbx        ; stream
.text:0000000000002856                 call    rpl_fclose
.text:000000000000285B                 xor     ebx, ebx
.text:000000000000285D                 mov     [rbp+0], r12d
.text:0000000000002861                 jmp     short loc_27F1
.text:0000000000002861 ; } // starts at 27D0
.text:0000000000002861 fopen_safer     endp
.text:0000000000002861
.text:0000000000002861 ; ---------------------------------------------------------------------------
.text:0000000000002863                 align 10h
.text:0000000000002870
.text:0000000000002870 ; =============== S U B R O U T I N E =======================================
.text:0000000000002870
.text:0000000000002870
.text:0000000000002870                 public set_program_name
.text:0000000000002870 set_program_name proc near              ; CODE XREF: main+13↑p
.text:0000000000002870 ; __unwind {
.text:0000000000002870                 test    rdi, rdi
.text:0000000000002873                 push    rbx
.text:0000000000002874                 jz      short loc_28ED
.text:0000000000002876                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000287B                 mov     rbx, rdi
.text:000000000000287E                 call    _strrchr
.text:0000000000002883                 test    rax, rax
.text:0000000000002886                 jz      short loc_28DD
.text:0000000000002888                 lea     r8, [rax+1]
.text:000000000000288C                 mov     rdx, r8
.text:000000000000288F                 sub     rdx, rbx
.text:0000000000002892                 cmp     rdx, 6
.text:0000000000002896                 jle     short loc_28DD
.text:0000000000002898                 lea     rsi, [rax-6]
.text:000000000000289C                 lea     rdi, aLibs      ; "/.libs/"
.text:00000000000028A3                 mov     ecx, 7
.text:00000000000028A8                 repe cmpsb
.text:00000000000028AA                 setnbe  dl
.text:00000000000028AD                 sbb     dl, 0
.text:00000000000028B0                 test    dl, dl
.text:00000000000028B2                 jnz     short loc_28DD
.text:00000000000028B4                 lea     rdi, aLt        ; "lt-"
.text:00000000000028BB                 mov     ecx, 3
.text:00000000000028C0                 mov     rsi, r8
.text:00000000000028C3                 mov     rbx, r8
.text:00000000000028C6                 repe cmpsb
.text:00000000000028C8                 setnbe  dl
.text:00000000000028CB                 sbb     dl, 0
.text:00000000000028CE                 test    dl, dl
.text:00000000000028D0                 jnz     short loc_28DD
.text:00000000000028D2                 lea     rbx, [rax+4]
.text:00000000000028D6                 mov     cs:__bss_start, rbx
.text:00000000000028DD
.text:00000000000028DD loc_28DD:                               ; CODE XREF: set_program_name+16↑j
.text:00000000000028DD                                         ; set_program_name+26↑j ...
.text:00000000000028DD                 mov     cs:program_name, rbx
.text:00000000000028E4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000028EB                 pop     rbx
.text:00000000000028EC                 retn
.text:00000000000028ED ; ---------------------------------------------------------------------------
.text:00000000000028ED
.text:00000000000028ED loc_28ED:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000028ED                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000028F4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000028FB                 mov     edx, 37h ; '7'  ; n
.text:0000000000002900                 mov     esi, 1          ; size
.text:0000000000002905                 call    _fwrite
.text:000000000000290A                 call    _abort
.text:000000000000290A ; } // starts at 2870
.text:000000000000290A set_program_name endp
.text:000000000000290A
.text:000000000000290A ; ---------------------------------------------------------------------------
.text:000000000000290F                 align 10h
.text:0000000000002910
.text:0000000000002910 ; =============== S U B R O U T I N E =======================================
.text:0000000000002910
.text:0000000000002910 ; Attributes: info_from_lumina
.text:0000000000002910
.text:0000000000002910 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002910 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002910                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002910 ; __unwind {
.text:0000000000002910                 push    rbp
.text:0000000000002911                 push    rbx
.text:0000000000002912                 mov     rbp, rdi
.text:0000000000002915                 mov     ebx, esi
.text:0000000000002917                 sub     rsp, 8
.text:000000000000291B                 call    locale_charset
.text:0000000000002920                 movzx   edx, byte ptr [rax]
.text:0000000000002923                 and     edx, 0FFFFFFDFh
.text:0000000000002926                 cmp     dl, 55h ; 'U'
.text:0000000000002929                 jz      short loc_29A0
.text:000000000000292B                 cmp     dl, 47h ; 'G'
.text:000000000000292E                 jz      short loc_2950
.text:0000000000002930
.text:0000000000002930 loc_2930:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002930                                         ; gettext_quote+50↓j ...
.text:0000000000002930                 lea     rax, unk_5B6B
.text:0000000000002937                 lea     rdx, asc_5B6D   ; "'"
.text:000000000000293E                 cmp     ebx, 9
.text:0000000000002941                 cmovnz  rax, rdx
.text:0000000000002945                 add     rsp, 8
.text:0000000000002949                 pop     rbx
.text:000000000000294A                 pop     rbp
.text:000000000000294B                 retn
.text:000000000000294B ; ---------------------------------------------------------------------------
.text:000000000000294C                 align 10h
.text:0000000000002950
.text:0000000000002950 loc_2950:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002950                 movzx   edx, byte ptr [rax+1]
.text:0000000000002954                 and     edx, 0FFFFFFDFh
.text:0000000000002957                 cmp     dl, 42h ; 'B'
.text:000000000000295A                 jnz     short loc_2930
.text:000000000000295C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002960                 jnz     short loc_2930
.text:0000000000002962                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002966                 jnz     short loc_2930
.text:0000000000002968                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000296C                 jnz     short loc_2930
.text:000000000000296E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002972                 jnz     short loc_2930
.text:0000000000002974                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002978                 jnz     short loc_2930
.text:000000000000297A                 cmp     byte ptr [rax+7], 0
.text:000000000000297E                 jnz     short loc_2930
.text:0000000000002980                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002984                 lea     rax, unk_5B64
.text:000000000000298B                 lea     rdx, unk_5B68
.text:0000000000002992                 cmovnz  rax, rdx
.text:0000000000002996                 add     rsp, 8
.text:000000000000299A                 pop     rbx
.text:000000000000299B                 pop     rbp
.text:000000000000299C                 retn
.text:000000000000299C ; ---------------------------------------------------------------------------
.text:000000000000299D                 align 20h
.text:00000000000029A0
.text:00000000000029A0 loc_29A0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000029A0                 movzx   edx, byte ptr [rax+1]
.text:00000000000029A4                 and     edx, 0FFFFFFDFh
.text:00000000000029A7                 cmp     dl, 54h ; 'T'
.text:00000000000029AA                 jnz     short loc_2930
.text:00000000000029AC                 movzx   edx, byte ptr [rax+2]
.text:00000000000029B0                 and     edx, 0FFFFFFDFh
.text:00000000000029B3                 cmp     dl, 46h ; 'F'
.text:00000000000029B6                 jnz     loc_2930
.text:00000000000029BC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000029C0                 jnz     loc_2930
.text:00000000000029C6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000029CA                 jnz     loc_2930
.text:00000000000029D0                 cmp     byte ptr [rax+5], 0
.text:00000000000029D4                 jnz     loc_2930
.text:00000000000029DA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000029DE                 lea     rax, unk_5B5C
.text:00000000000029E5                 lea     rdx, unk_5B60
.text:00000000000029EC                 cmovnz  rax, rdx
.text:00000000000029F0                 add     rsp, 8
.text:00000000000029F4                 pop     rbx
.text:00000000000029F5                 pop     rbp
.text:00000000000029F6                 retn
.text:00000000000029F6 ; } // starts at 2910
.text:00000000000029F6 gettext_quote   endp
.text:00000000000029F6
.text:00000000000029F6 ; ---------------------------------------------------------------------------
.text:00000000000029F7                 align 20h
.text:0000000000002A00
.text:0000000000002A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A00
.text:0000000000002A00 ; Attributes: info_from_lumina
.text:0000000000002A00
.text:0000000000002A00 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002A00 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002A00                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002A00
.text:0000000000002A00 var_E0          = dword ptr -0E0h
.text:0000000000002A00 var_DB          = byte ptr -0DBh
.text:0000000000002A00 var_DA          = byte ptr -0DAh
.text:0000000000002A00 var_D9          = byte ptr -0D9h
.text:0000000000002A00 s               = qword ptr -0D8h
.text:0000000000002A00 n               = qword ptr -0D0h
.text:0000000000002A00 var_C8          = qword ptr -0C8h
.text:0000000000002A00 ps              = qword ptr -0C0h
.text:0000000000002A00 var_B8          = qword ptr -0B8h
.text:0000000000002A00 var_B0          = qword ptr -0B0h
.text:0000000000002A00 var_A8          = qword ptr -0A8h
.text:0000000000002A00 s2              = qword ptr -0A0h
.text:0000000000002A00 var_98          = qword ptr -98h
.text:0000000000002A00 var_90          = qword ptr -90h
.text:0000000000002A00 var_88          = qword ptr -88h
.text:0000000000002A00 var_80          = qword ptr -80h
.text:0000000000002A00 var_78          = qword ptr -78h
.text:0000000000002A00 var_70          = dword ptr -70h
.text:0000000000002A00 var_6C          = byte ptr -6Ch
.text:0000000000002A00 var_6B          = byte ptr -6Bh
.text:0000000000002A00 var_6A          = byte ptr -6Ah
.text:0000000000002A00 var_69          = byte ptr -69h
.text:0000000000002A00 var_68          = qword ptr -68h
.text:0000000000002A00 var_60          = qword ptr -60h
.text:0000000000002A00 wc              = dword ptr -4Ch
.text:0000000000002A00 var_48          = qword ptr -48h
.text:0000000000002A00 var_40          = qword ptr -40h
.text:0000000000002A00 arg_0           = qword ptr  8
.text:0000000000002A00 arg_8           = qword ptr  10h
.text:0000000000002A00 arg_10          = qword ptr  18h
.text:0000000000002A00
.text:0000000000002A00 ; __unwind {
.text:0000000000002A00                 push    r15
.text:0000000000002A02                 push    r14
.text:0000000000002A04                 mov     r15d, r8d
.text:0000000000002A07                 push    r13
.text:0000000000002A09                 push    r12
.text:0000000000002A0B                 mov     r14, rdi
.text:0000000000002A0E                 push    rbp
.text:0000000000002A0F                 push    rbx
.text:0000000000002A10                 mov     ebx, r9d
.text:0000000000002A13                 mov     r13, rsi
.text:0000000000002A16                 mov     rbp, rcx
.text:0000000000002A19                 and     ebx, 2
.text:0000000000002A1C                 sub     rsp, 0B8h
.text:0000000000002A23                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000002A2B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002A30                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002A35                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000002A3A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000002A3F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002A47                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002A4C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002A54                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002A59                 mov     rax, fs:28h
.text:0000000000002A62                 mov     [rsp+0E8h+var_40], rax
.text:0000000000002A6A                 xor     eax, eax
.text:0000000000002A6C                 call    ___ctype_get_mb_cur_max
.text:0000000000002A71                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002A75                 mov     [rsp+0E8h+var_90], rax
.text:0000000000002A7A                 ja      def_2A91        ; jumptable 00000000000121F1 default case
.text:0000000000002A80                 lea     rcx, jpt_2A91
.text:0000000000002A87                 mov     edx, r15d
.text:0000000000002A8A                 movsxd  rax, ds:(jpt_2A91 - 5BC0h)[rcx+rdx*4]
.text:0000000000002A8E                 add     rax, rcx
.text:0000000000002A91                 jmp     rax             ; switch jump
.text:0000000000002A93 ; ---------------------------------------------------------------------------
.text:0000000000002A93
.text:0000000000002A93 loc_2A93:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002A93                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002A93                                         ; DATA XREF: ...
.text:0000000000002A93                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002A98                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002A9D                 xor     r12d, r12d
.text:0000000000002AA0                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002AA9                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002AAE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002AB3
.text:0000000000002AB3 loc_2AB3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002AB3                 lea     rax, asc_5B6D   ; "'"
.text:0000000000002ABA                 mov     [rsp+0E8h+n], 1
.text:0000000000002AC3                 xor     r15d, r15d
.text:0000000000002AC6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002ACE                 mov     [rsp+0E8h+s2], rax
.text:0000000000002AD3
.text:0000000000002AD3 loc_2AD3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002AD3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002AD3                 xor     r11d, r11d
.text:0000000000002AD6                 mov     rax, rbp
.text:0000000000002AD9                 mov     r8d, r12d
.text:0000000000002ADC                 mov     rbp, r11
.text:0000000000002ADF                 mov     r11, rax
.text:0000000000002AE2                 nop     word ptr [rax+rax+00h]
.text:0000000000002AE8
.text:0000000000002AE8 loc_2AE8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002AE8                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002AE8                 cmp     r11, rbp
.text:0000000000002AEB                 setnz   r12b
.text:0000000000002AEF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002AF3                 jnz     short loc_2B02
.text:0000000000002AF5                 mov     rax, [rsp+0E8h+s]
.text:0000000000002AFA                 cmp     byte ptr [rax+rbp], 0
.text:0000000000002AFE                 setnz   r12b
.text:0000000000002B02
.text:0000000000002B02 loc_2B02:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002B02                 test    r12b, r12b
.text:0000000000002B05                 jz      loc_3160
.text:0000000000002B0B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002B10                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002B15                 lea     r9, [rdi+rbp]
.text:0000000000002B19                 setnz   al
.text:0000000000002B1C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002B20                 mov     r10d, eax
.text:0000000000002B23                 jz      loc_2BD0
.text:0000000000002B29                 mov     rax, [rsp+0E8h+n]
.text:0000000000002B2E                 test    rax, rax
.text:0000000000002B31                 jz      loc_2F60
.text:0000000000002B37                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002B3B                 lea     rbx, [rbp+rax+0]
.text:0000000000002B40                 jnz     short loc_2B70
.text:0000000000002B42                 cmp     rax, 1
.text:0000000000002B46                 jbe     short loc_2B70
.text:0000000000002B48                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002B4D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002B52                 mov     [rsp+0E8h+ps], r9
.text:0000000000002B57                 call    _strlen
.text:0000000000002B5C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002B62                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002B68                 mov     r11, rax
.text:0000000000002B6B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002B70
.text:0000000000002B70 loc_2B70:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002B70                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002B70                 cmp     rbx, r11
.text:0000000000002B73                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002B78                 ja      loc_3130
.text:0000000000002B7E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002B83                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002B88                 mov     rdi, r9         ; s1
.text:0000000000002B8B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002B90                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002B95                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002B9A                 call    _memcmp
.text:0000000000002B9F                 test    eax, eax
.text:0000000000002BA1                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002BA6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002BAC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002BB1                 jnz     loc_3130
.text:0000000000002BB7                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002BBC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002BC2                 jnz     loc_3B45
.text:0000000000002BC8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002BD0
.text:0000000000002BD0 loc_2BD0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002BD0                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002BD0                 movzx   ebx, byte ptr [r9]
.text:0000000000002BD4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002BD7                 ja      def_2BEE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002BDD                 lea     rcx, jpt_2BEE
.text:0000000000002BE4                 movzx   edx, bl
.text:0000000000002BE7                 movsxd  rax, ds:(jpt_2BEE - 5BECh)[rcx+rdx*4]
.text:0000000000002BEB                 add     rax, rcx
.text:0000000000002BEE                 jmp     rax             ; switch jump
.text:0000000000002BF0 ; ---------------------------------------------------------------------------
.text:0000000000002BF0
.text:0000000000002BF0 loc_2BF0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002BF0                                         ; DATA XREF: .rodata:jpt_2F7A↓o
.text:0000000000002BF0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002BF3
.text:0000000000002BF3 loc_2BF3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002BF3                                         ; DATA XREF: .rodata:jpt_2BEE↓o
.text:0000000000002BF3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002BF7                 setnz   al
.text:0000000000002BFA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002BFE                 jnz     short loc_2C0C
.text:0000000000002C00                 mov     rax, [rsp+0E8h+s]
.text:0000000000002C05                 cmp     byte ptr [rax+1], 0
.text:0000000000002C09                 setnz   al
.text:0000000000002C0C
.text:0000000000002C0C loc_2C0C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000002C0C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002C11                 setz    dl
.text:0000000000002C14                 test    al, al
.text:0000000000002C16                 jz      loc_2E68
.text:0000000000002C1C
.text:0000000000002C1C loc_2C1C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000002C1C                 xor     r12d, r12d
.text:0000000000002C1F                 xor     eax, eax
.text:0000000000002C21                 nop     dword ptr [rax+00000000h]
.text:0000000000002C28
.text:0000000000002C28 loc_2C28:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002C28                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002C28                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000002C2D                 jnz     loc_2D42
.text:0000000000002C33                 test    dl, dl
.text:0000000000002C35                 jnz     loc_2D42
.text:0000000000002C3B
.text:0000000000002C3B loc_2C3B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000002C3B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002C40                 test    rsi, rsi
.text:0000000000002C43                 jz      short loc_2C59
.text:0000000000002C45                 mov     edx, ebx
.text:0000000000002C47                 shr     dl, 5
.text:0000000000002C4A                 movzx   edx, dl
.text:0000000000002C4D                 mov     edx, [rsi+rdx*4]
.text:0000000000002C50                 bt      edx, ebx
.text:0000000000002C53                 jb      loc_2DA3
.text:0000000000002C59
.text:0000000000002C59 loc_2C59:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002C59                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002C59                 test    r10b, r10b
.text:0000000000002C5C                 jnz     loc_2DA3
.text:0000000000002C62                 xor     eax, 1
.text:0000000000002C65                 add     rbp, 1
.text:0000000000002C69                 and     eax, r8d
.text:0000000000002C6C
.text:0000000000002C6C loc_2C6C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000002C6C                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000002C6C                 test    al, al
.text:0000000000002C6E                 jz      short loc_2C90
.text:0000000000002C70                 cmp     r13, r15
.text:0000000000002C73                 jbe     short loc_2C7A
.text:0000000000002C75                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002C7A
.text:0000000000002C7A loc_2C7A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000002C7A                 lea     rax, [r15+1]
.text:0000000000002C7E                 cmp     r13, rax
.text:0000000000002C81                 jbe     short loc_2C89
.text:0000000000002C83                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002C89
.text:0000000000002C89 loc_2C89:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002C89                 add     r15, 2
.text:0000000000002C8D                 xor     r8d, r8d
.text:0000000000002C90
.text:0000000000002C90 loc_2C90:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002C90                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002C90                 cmp     r15, r13
.text:0000000000002C93                 jnb     short loc_2C99
.text:0000000000002C95                 mov     [r14+r15], bl
.text:0000000000002C99
.text:0000000000002C99 loc_2C99:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002C99                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000002C9E                 add     r15, 1
.text:0000000000002CA2                 mov     eax, 0
.text:0000000000002CA7                 test    r12b, r12b
.text:0000000000002CAA                 cmovz   edi, eax
.text:0000000000002CAD                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002CB2                 jmp     loc_2AE8
.text:0000000000002CB2 ; ---------------------------------------------------------------------------
.text:0000000000002CB7                 align 20h
.text:0000000000002CC0
.text:0000000000002CC0 loc_2CC0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002CC0                                         ; DATA XREF: .rodata:jpt_2F7A↓o
.text:0000000000002CC0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002CC3
.text:0000000000002CC3 loc_2CC3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002CC3                                         ; DATA XREF: .rodata:jpt_2BEE↓o
.text:0000000000002CC3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002CC7                 cmp     eax, 2
.text:0000000000002CCA                 jz      loc_3288
.text:0000000000002CD0                 cmp     eax, 5
.text:0000000000002CD3                 jz      loc_3248
.text:0000000000002CD9                 cmp     eax, 2
.text:0000000000002CDC                 mov     ebx, 3Fh ; '?'
.text:0000000000002CE1                 setz    dl
.text:0000000000002CE4                 xor     r12d, r12d
.text:0000000000002CE7                 xor     eax, eax
.text:0000000000002CE9                 jmp     loc_2C28
.text:0000000000002CE9 ; ---------------------------------------------------------------------------
.text:0000000000002CEE                 align 10h
.text:0000000000002CF0
.text:0000000000002CF0 loc_2CF0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002CF0                                         ; DATA XREF: .rodata:jpt_2F7A↓o
.text:0000000000002CF0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002CF3
.text:0000000000002CF3 loc_2CF3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002CF3                                         ; DATA XREF: .rodata:jpt_2BEE↓o
.text:0000000000002CF3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002CF8                 jz      loc_3200
.text:0000000000002CFE                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002D03                 xor     edx, edx
.text:0000000000002D05                 xor     eax, eax
.text:0000000000002D07                 mov     ebx, 27h ; '''
.text:0000000000002D0C                 jmp     loc_2C28
.text:0000000000002D0C ; ---------------------------------------------------------------------------
.text:0000000000002D11                 align 8
.text:0000000000002D18
.text:0000000000002D18 loc_2D18:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D18                                         ; DATA XREF: .rodata:jpt_2BEE↓o
.text:0000000000002D18                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000002D1D                 mov     ebx, 74h ; 't'
.text:0000000000002D22
.text:0000000000002D22 loc_2D22:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002D22                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002D22                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002D27                 setz    al
.text:0000000000002D2A                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002D2E                 jnz     loc_2E7E
.text:0000000000002D34
.text:0000000000002D34 loc_2D34:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002D34                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002D34                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002D39                 jnz     short loc_2DA0
.text:0000000000002D3B
.text:0000000000002D3B loc_2D3B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000002D3B                 mov     ebx, edx
.text:0000000000002D3D                 xor     r12d, r12d
.text:0000000000002D40                 xor     eax, eax
.text:0000000000002D42
.text:0000000000002D42 loc_2D42:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002D42                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002D42                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002D47                 jnz     loc_2C3B
.text:0000000000002D4D                 jmp     loc_2C59
.text:0000000000002D4D ; ---------------------------------------------------------------------------
.text:0000000000002D52                 align 8
.text:0000000000002D58
.text:0000000000002D58 loc_2D58:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D58                                         ; DATA XREF: .rodata:jpt_2BEE↓o
.text:0000000000002D58                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000002D5D                 mov     ebx, 62h ; 'b'
.text:0000000000002D62                 jmp     short loc_2D34
.text:0000000000002D62 ; ---------------------------------------------------------------------------
.text:0000000000002D64                 align 8
.text:0000000000002D68
.text:0000000000002D68 loc_2D68:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D68                                         ; DATA XREF: .rodata:jpt_2BEE↓o
.text:0000000000002D68                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000002D6D                 jz      loc_3140
.text:0000000000002D73                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002D78                 jz      loc_2F90
.text:0000000000002D7E
.text:0000000000002D7E loc_2D7E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000002D7E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002D83                 jz      loc_2F90
.text:0000000000002D89                 cmp     [rsp+0E8h+n], 0
.text:0000000000002D8F                 jnz     loc_314B
.text:0000000000002D95                 mov     ebx, 5Ch ; '\'
.text:0000000000002D9A                 nop     word ptr [rax+rax+00h]
.text:0000000000002DA0
.text:0000000000002DA0 loc_2DA0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002DA0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002DA0                 xor     r12d, r12d
.text:0000000000002DA3
.text:0000000000002DA3 loc_2DA3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002DA3                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002DA3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002DA8                 setz    dl
.text:0000000000002DAB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002DB0                 mov     eax, edx
.text:0000000000002DB2                 jnz     loc_3608
.text:0000000000002DB8                 mov     eax, r8d
.text:0000000000002DBB                 xor     eax, 1
.text:0000000000002DBE                 and     al, dl
.text:0000000000002DC0                 jz      short loc_2DF1
.text:0000000000002DC2                 cmp     r13, r15
.text:0000000000002DC5                 jbe     short loc_2DCC
.text:0000000000002DC7                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002DCC
.text:0000000000002DCC loc_2DCC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000002DCC                 lea     rdx, [r15+1]
.text:0000000000002DD0                 cmp     r13, rdx
.text:0000000000002DD3                 jbe     short loc_2DDB
.text:0000000000002DD5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002DDB
.text:0000000000002DDB loc_2DDB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000002DDB                 lea     rdx, [r15+2]
.text:0000000000002DDF                 cmp     r13, rdx
.text:0000000000002DE2                 jbe     short loc_2DEA
.text:0000000000002DE4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002DEA
.text:0000000000002DEA loc_2DEA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000002DEA                 add     r15, 3
.text:0000000000002DEE                 mov     r8d, eax
.text:0000000000002DF1
.text:0000000000002DF1 loc_2DF1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002DF1                 cmp     r13, r15
.text:0000000000002DF4                 jbe     short loc_2DFB
.text:0000000000002DF6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002DFB
.text:0000000000002DFB loc_2DFB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000002DFB                 add     r15, 1
.text:0000000000002DFF                 add     rbp, 1
.text:0000000000002E03                 jmp     loc_2C90
.text:0000000000002E03 ; ---------------------------------------------------------------------------
.text:0000000000002E08                 align 10h
.text:0000000000002E10
.text:0000000000002E10 loc_2E10:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002E10                                         ; DATA XREF: .rodata:jpt_2BEE↓o
.text:0000000000002E10                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002E15                 jnz     loc_2FE3
.text:0000000000002E1B                 xor     edx, edx
.text:0000000000002E1D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002E22                 jz      loc_2D3B
.text:0000000000002E28                 add     rbp, 1
.text:0000000000002E2C                 jmp     loc_2AE8
.text:0000000000002E2C ; ---------------------------------------------------------------------------
.text:0000000000002E31                 align 8
.text:0000000000002E38
.text:0000000000002E38 loc_2E38:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002E38                                         ; DATA XREF: .rodata:jpt_2BEE↓o
.text:0000000000002E38                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000002E3D                 setz    dl
.text:0000000000002E40                 xor     eax, eax
.text:0000000000002E42                 jmp     loc_2C28
.text:0000000000002E42 ; ---------------------------------------------------------------------------
.text:0000000000002E47                 align 10h
.text:0000000000002E50
.text:0000000000002E50 loc_2E50:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002E50                                         ; DATA XREF: .rodata:jpt_2BEE↓o
.text:0000000000002E50                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000002E55                 mov     ebx, 61h ; 'a'
.text:0000000000002E5A                 jmp     loc_2D34
.text:0000000000002E5A ; ---------------------------------------------------------------------------
.text:0000000000002E5F                 align 20h
.text:0000000000002E60
.text:0000000000002E60 loc_2E60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002E60                                         ; DATA XREF: .rodata:jpt_2BEE↓o
.text:0000000000002E60                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000002E65                 setz    dl
.text:0000000000002E68
.text:0000000000002E68 loc_2E68:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000002E68                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000002E68                 test    rbp, rbp
.text:0000000000002E6B                 jnz     loc_2C1C
.text:0000000000002E71
.text:0000000000002E71 loc_2E71:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000002E71                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000002E71                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002E76                 and     al, dl
.text:0000000000002E78                 jz      loc_2C28
.text:0000000000002E7E
.text:0000000000002E7E loc_2E7E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000002E7E                 mov     rbp, r11
.text:0000000000002E81                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002E89                 jmp     loc_3589
.text:0000000000002E89 ; ---------------------------------------------------------------------------
.text:0000000000002E8E                 align 10h
.text:0000000000002E90
.text:0000000000002E90 loc_2E90:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002E90                                         ; DATA XREF: .rodata:jpt_2BEE↓o
.text:0000000000002E90                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002E95                 setz    dl
.text:0000000000002E98                 xor     r12d, r12d
.text:0000000000002E9B                 jmp     short loc_2E71
.text:0000000000002E9B ; ---------------------------------------------------------------------------
.text:0000000000002E9D                 align 20h
.text:0000000000002EA0
.text:0000000000002EA0 loc_2EA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002EA0                                         ; DATA XREF: .rodata:jpt_2BEE↓o
.text:0000000000002EA0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002EA5                 mov     ebx, 20h ; ' '
.text:0000000000002EAA                 setz    dl
.text:0000000000002EAD                 jmp     short loc_2E71
.text:0000000000002EAD ; ---------------------------------------------------------------------------
.text:0000000000002EAF                 align 10h
.text:0000000000002EB0
.text:0000000000002EB0 loc_2EB0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002EB0                                         ; DATA XREF: .rodata:jpt_2BEE↓o
.text:0000000000002EB0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002EB5                 mov     ebx, 72h ; 'r'
.text:0000000000002EBA                 jmp     loc_2D22
.text:0000000000002EBA ; ---------------------------------------------------------------------------
.text:0000000000002EBF                 align 20h
.text:0000000000002EC0
.text:0000000000002EC0 loc_2EC0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002EC0                                         ; DATA XREF: .rodata:jpt_2BEE↓o
.text:0000000000002EC0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002EC5                 mov     ebx, 66h ; 'f'
.text:0000000000002ECA                 jmp     loc_2D34
.text:0000000000002ECA ; ---------------------------------------------------------------------------
.text:0000000000002ECF                 align 10h
.text:0000000000002ED0
.text:0000000000002ED0 loc_2ED0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002ED0                                         ; DATA XREF: .rodata:jpt_2BEE↓o
.text:0000000000002ED0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002ED5                 mov     ebx, 76h ; 'v'
.text:0000000000002EDA                 jmp     loc_2D34
.text:0000000000002EDA ; ---------------------------------------------------------------------------
.text:0000000000002EDF                 align 20h
.text:0000000000002EE0
.text:0000000000002EE0 loc_2EE0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002EE0                                         ; DATA XREF: .rodata:jpt_2BEE↓o
.text:0000000000002EE0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002EE5                 mov     ebx, 6Eh ; 'n'
.text:0000000000002EEA                 jmp     loc_2D22
.text:0000000000002EEA ; ---------------------------------------------------------------------------
.text:0000000000002EEF                 align 10h
.text:0000000000002EF0
.text:0000000000002EF0 def_2F7A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002EF0                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002EF0                                         ; DATA XREF: ...
.text:0000000000002EF0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002EF3                 nop     dword ptr [rax+rax+00h]
.text:0000000000002EF8
.text:0000000000002EF8 def_2BEE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002EF8                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002EF8                                         ; DATA XREF: ...
.text:0000000000002EF8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002EFE                 jnz     loc_32A8
.text:0000000000002F04                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002F09                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000002F0E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002F13                 call    ___ctype_b_loc
.text:0000000000002F18                 mov     rcx, [rax]
.text:0000000000002F1B                 movzx   edx, bl
.text:0000000000002F1E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002F24                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002F2A                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000002F2F                 mov     edi, 1
.text:0000000000002F34                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000002F38                 and     ax, 4000h
.text:0000000000002F3C                 setnz   r12b
.text:0000000000002F40                 setz    al
.text:0000000000002F43                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002F47
.text:0000000000002F47 loc_2F47:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002F47                 test    al, al
.text:0000000000002F49                 jnz     loc_38E1
.text:0000000000002F4F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002F54                 setz    dl
.text:0000000000002F57                 jmp     loc_2C28
.text:0000000000002F57 ; ---------------------------------------------------------------------------
.text:0000000000002F5C                 align 20h
.text:0000000000002F60
.text:0000000000002F60 loc_2F60:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000002F60                 movzx   ebx, byte ptr [r9]
.text:0000000000002F64                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002F67                 ja      short def_2F7A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002F69                 lea     rcx, jpt_2F7A
.text:0000000000002F70                 movzx   edx, bl
.text:0000000000002F73                 movsxd  rax, ds:(jpt_2F7A - 5DE8h)[rcx+rdx*4]
.text:0000000000002F77                 add     rax, rcx
.text:0000000000002F7A                 jmp     rax             ; switch jump
.text:0000000000002F7A ; ---------------------------------------------------------------------------
.text:0000000000002F7C                 align 20h
.text:0000000000002F80
.text:0000000000002F80 loc_2F80:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002F80                                         ; DATA XREF: .rodata:jpt_2F7A↓o
.text:0000000000002F80                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000002F83                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002F88                 jnz     loc_2D7E
.text:0000000000002F8E                 xchg    ax, ax
.text:0000000000002F90
.text:0000000000002F90 loc_2F90:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002F90                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002F90                 mov     edx, 5Ch ; '\'
.text:0000000000002F95                 mov     ebx, 5Ch ; '\'
.text:0000000000002F9A                 jmp     loc_2D34
.text:0000000000002F9A ; ---------------------------------------------------------------------------
.text:0000000000002F9F                 align 20h
.text:0000000000002FA0
.text:0000000000002FA0 loc_2FA0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002FA0                                         ; DATA XREF: .rodata:jpt_2F7A↓o
.text:0000000000002FA0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002FA5                 xor     r10d, r10d
.text:0000000000002FA8                 mov     ebx, 66h ; 'f'
.text:0000000000002FAD                 jmp     loc_2D34
.text:0000000000002FAD ; ---------------------------------------------------------------------------
.text:0000000000002FB2                 align 8
.text:0000000000002FB8
.text:0000000000002FB8 loc_2FB8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002FB8                                         ; DATA XREF: .rodata:jpt_2F7A↓o
.text:0000000000002FB8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000002FBD                 xor     r10d, r10d
.text:0000000000002FC0                 mov     ebx, 6Eh ; 'n'
.text:0000000000002FC5                 jmp     loc_2D22
.text:0000000000002FC5 ; ---------------------------------------------------------------------------
.text:0000000000002FCA                 align 10h
.text:0000000000002FD0
.text:0000000000002FD0 loc_2FD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002FD0                                         ; DATA XREF: .rodata:jpt_2F7A↓o
.text:0000000000002FD0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002FD5                 jmp     loc_2DA0
.text:0000000000002FD5 ; ---------------------------------------------------------------------------
.text:0000000000002FDA                 align 20h
.text:0000000000002FE0
.text:0000000000002FE0 loc_2FE0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002FE0                                         ; DATA XREF: .rodata:jpt_2F7A↓o
.text:0000000000002FE0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002FE3
.text:0000000000002FE3 loc_2FE3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002FE3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002FE8                 setz    dl
.text:0000000000002FEB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002FF0                 jnz     loc_3B8A
.text:0000000000002FF6                 mov     eax, r8d
.text:0000000000002FF9                 mov     rcx, r15
.text:0000000000002FFC                 xor     eax, 1
.text:0000000000002FFF                 and     al, dl
.text:0000000000003001                 jz      short loc_3030
.text:0000000000003003                 cmp     r13, r15
.text:0000000000003006                 jbe     short loc_300D
.text:0000000000003008                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000300D
.text:000000000000300D loc_300D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000300D                 lea     rcx, [r15+1]
.text:0000000000003011                 cmp     r13, rcx
.text:0000000000003014                 jbe     short loc_301C
.text:0000000000003016                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000301C
.text:000000000000301C loc_301C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000301C                 lea     rcx, [r15+2]
.text:0000000000003020                 cmp     r13, rcx
.text:0000000000003023                 ja      loc_3659
.text:0000000000003029
.text:0000000000003029 loc_3029:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003029                 lea     rcx, [r15+3]
.text:000000000000302D                 mov     r8d, eax
.text:0000000000003030
.text:0000000000003030 loc_3030:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003030                 cmp     r13, rcx
.text:0000000000003033                 jbe     short loc_303A
.text:0000000000003035                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000303A
.text:000000000000303A loc_303A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000303A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000303F                 lea     r15, [rcx+1]
.text:0000000000003043                 jz      loc_3649
.text:0000000000003049                 lea     rax, [rbp+1]
.text:000000000000304D                 cmp     rax, r11
.text:0000000000003050                 jnb     short loc_306B
.text:0000000000003052                 mov     rax, [rsp+0E8h+s]
.text:0000000000003057                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000305C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003060                 sub     eax, 30h ; '0'
.text:0000000000003063                 cmp     al, 9
.text:0000000000003065                 jbe     loc_3899
.text:000000000000306B
.text:000000000000306B loc_306B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000306B                 mov     eax, r12d
.text:000000000000306E                 mov     ebx, 30h ; '0'
.text:0000000000003073                 xor     r12d, r12d
.text:0000000000003076                 jmp     loc_2C28
.text:0000000000003076 ; ---------------------------------------------------------------------------
.text:000000000000307B                 align 20h
.text:0000000000003080
.text:0000000000003080 loc_3080:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003080                                         ; DATA XREF: .rodata:jpt_2F7A↓o
.text:0000000000003080                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003085                 mov     r12d, r10d
.text:0000000000003088                 setz    dl
.text:000000000000308B                 xor     r10d, r10d
.text:000000000000308E                 xor     eax, eax
.text:0000000000003090                 jmp     loc_2C28
.text:0000000000003090 ; ---------------------------------------------------------------------------
.text:0000000000003095                 align 8
.text:0000000000003098
.text:0000000000003098 loc_3098:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003098                                         ; DATA XREF: .rodata:jpt_2F7A↓o
.text:0000000000003098                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000309D                 setz    dl
.text:00000000000030A0                 xor     r10d, r10d
.text:00000000000030A3                 jmp     loc_2E68
.text:00000000000030A3 ; ---------------------------------------------------------------------------
.text:00000000000030A8                 align 10h
.text:00000000000030B0
.text:00000000000030B0 loc_30B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000030B0                                         ; DATA XREF: .rodata:jpt_2F7A↓o
.text:00000000000030B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000030B5                 setz    dl
.text:00000000000030B8                 xor     r10d, r10d
.text:00000000000030BB                 xor     r12d, r12d
.text:00000000000030BE                 jmp     loc_2E71
.text:00000000000030BE ; ---------------------------------------------------------------------------
.text:00000000000030C3                 align 8
.text:00000000000030C8
.text:00000000000030C8 loc_30C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000030C8                                         ; DATA XREF: .rodata:jpt_2F7A↓o
.text:00000000000030C8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000030CD                 mov     r12d, r10d
.text:00000000000030D0                 mov     ebx, 20h ; ' '
.text:00000000000030D5                 setz    dl
.text:00000000000030D8                 xor     r10d, r10d
.text:00000000000030DB                 jmp     loc_2E71
.text:00000000000030E0 ; ---------------------------------------------------------------------------
.text:00000000000030E0
.text:00000000000030E0 loc_30E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000030E0                                         ; DATA XREF: .rodata:jpt_2F7A↓o
.text:00000000000030E0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000030E5                 xor     r10d, r10d
.text:00000000000030E8                 mov     ebx, 72h ; 'r'
.text:00000000000030ED                 jmp     loc_2D22
.text:00000000000030ED ; ---------------------------------------------------------------------------
.text:00000000000030F2                 align 8
.text:00000000000030F8
.text:00000000000030F8 loc_30F8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000030F8                                         ; DATA XREF: .rodata:jpt_2F7A↓o
.text:00000000000030F8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000030FD                 jmp     loc_2DA0
.text:00000000000030FD ; ---------------------------------------------------------------------------
.text:0000000000003102                 align 8
.text:0000000000003108
.text:0000000000003108 loc_3108:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003108                                         ; DATA XREF: .rodata:jpt_2F7A↓o
.text:0000000000003108                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000310D                 xor     r10d, r10d
.text:0000000000003110                 mov     ebx, 74h ; 't'
.text:0000000000003115                 jmp     loc_2D22
.text:0000000000003115 ; ---------------------------------------------------------------------------
.text:000000000000311A                 align 20h
.text:0000000000003120
.text:0000000000003120 loc_3120:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003120                                         ; DATA XREF: .rodata:jpt_2F7A↓o
.text:0000000000003120                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003125                 jmp     loc_2DA0
.text:0000000000003125 ; ---------------------------------------------------------------------------
.text:000000000000312A                 align 10h
.text:0000000000003130
.text:0000000000003130 loc_3130:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003130                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003130                 xor     r10d, r10d
.text:0000000000003133                 jmp     loc_2BD0
.text:0000000000003133 ; ---------------------------------------------------------------------------
.text:0000000000003138                 align 20h
.text:0000000000003140
.text:0000000000003140 loc_3140:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003140                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003145                 jnz     loc_3AB0
.text:000000000000314B
.text:000000000000314B loc_314B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000314B                 add     rbp, 1
.text:000000000000314F                 mov     eax, r8d
.text:0000000000003152                 xor     r12d, r12d
.text:0000000000003155                 mov     ebx, 5Ch ; '\'
.text:000000000000315A                 jmp     loc_2C6C
.text:000000000000315A ; ---------------------------------------------------------------------------
.text:000000000000315F                 align 20h
.text:0000000000003160
.text:0000000000003160 loc_3160:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003160                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003165                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000316A                 mov     r12d, r8d
.text:000000000000316D                 mov     rbp, r11
.text:0000000000003170                 setz    dl
.text:0000000000003173                 mov     eax, ebx
.text:0000000000003175                 test    r15, r15
.text:0000000000003178                 setz    cl
.text:000000000000317B                 and     eax, edx
.text:000000000000317D                 and     al, cl
.text:000000000000317F                 jnz     loc_3BE6
.text:0000000000003185                 mov     eax, ebx
.text:0000000000003187                 xor     eax, 1
.text:000000000000318A                 and     dl, al
.text:000000000000318C                 jz      loc_3AFC
.text:0000000000003192                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003197                 jz      loc_3AFA
.text:000000000000319D                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000031A2                 jnz     loc_3B9D
.text:00000000000031A8                 test    r13, r13
.text:00000000000031AB                 setz    al
.text:00000000000031AE                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000031B4                 setnz   dl
.text:00000000000031B7                 and     al, dl
.text:00000000000031B9                 jz      loc_3BDC
.text:00000000000031BF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000031C4
.text:00000000000031C4 loc_31C4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000031C4                 lea     rbx, asc_5B6D   ; "'"
.text:00000000000031CB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000031CF                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000031D7                 mov     r15d, 1
.text:00000000000031DD                 mov     [rsp+0E8h+n], 1
.text:00000000000031E6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000031EB                 mov     [rsp+0E8h+s2], rbx
.text:00000000000031F0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000031F4                 jmp     loc_2AD3
.text:00000000000031F4 ; ---------------------------------------------------------------------------
.text:00000000000031F9                 align 20h
.text:0000000000003200
.text:0000000000003200 loc_3200:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003200                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003205                 jnz     loc_3AB0
.text:000000000000320B                 test    r13, r13
.text:000000000000320E                 jz      loc_3610
.text:0000000000003214                 xor     edx, edx
.text:0000000000003216                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000321C                 jnz     loc_3610
.text:0000000000003222
.text:0000000000003222 loc_3222:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003222                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003222                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003227                 add     r15, 3
.text:000000000000322B                 xor     eax, eax
.text:000000000000322D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003232                 xor     r8d, r8d
.text:0000000000003235                 mov     r13, rdx
.text:0000000000003238                 mov     ebx, 27h ; '''
.text:000000000000323D                 jmp     loc_2C59
.text:000000000000323D ; ---------------------------------------------------------------------------
.text:0000000000003242                 align 8
.text:0000000000003248
.text:0000000000003248 loc_3248:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003248                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000324D                 jz      short loc_3270
.text:000000000000324F                 lea     rcx, [rbp+2]
.text:0000000000003253                 cmp     rcx, r11
.text:0000000000003256                 jnb     short loc_3270
.text:0000000000003258                 mov     rax, [rsp+0E8h+s]
.text:000000000000325D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000003262                 jz      loc_39F2
.text:0000000000003268                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003270
.text:0000000000003270 loc_3270:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003270                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003270                 xor     edx, edx
.text:0000000000003272                 xor     r12d, r12d
.text:0000000000003275                 xor     eax, eax
.text:0000000000003277                 mov     ebx, 3Fh ; '?'
.text:000000000000327C                 jmp     loc_2C28
.text:000000000000327C ; ---------------------------------------------------------------------------
.text:0000000000003281                 align 8
.text:0000000000003288
.text:0000000000003288 loc_3288:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000003288                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000328D                 jnz     loc_3AB0
.text:0000000000003293                 xor     r12d, r12d
.text:0000000000003296                 xor     eax, eax
.text:0000000000003298                 mov     ebx, 3Fh ; '?'
.text:000000000000329D                 jmp     loc_2C59
.text:000000000000329D ; ---------------------------------------------------------------------------
.text:00000000000032A2                 align 8
.text:00000000000032A8
.text:00000000000032A8 loc_32A8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000032A8                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000032B0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000032B4                 mov     [rsp+0E8h+var_48], 0
.text:00000000000032C0                 mov     [rsp+0E8h+ps], rax
.text:00000000000032C5                 jnz     short loc_32F4
.text:00000000000032C7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000032CC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:00000000000032D1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:00000000000032D6                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000032DB                 call    _strlen
.text:00000000000032E0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:00000000000032E6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000032EC                 mov     r11, rax
.text:00000000000032EF                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000032F4
.text:00000000000032F4 loc_32F4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:00000000000032F4                 lea     rax, [rsp+0E8h+wc]
.text:00000000000032FC                 xor     ecx, ecx
.text:00000000000032FE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003302                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003307                 mov     rbx, rcx
.text:000000000000330A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003312                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003317                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000331C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003324                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003329                 mov     [rsp+0E8h+var_78], r13
.text:000000000000332E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003333
.text:0000000000003333 loc_3333:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003333                 mov     rax, [rsp+0E8h+s]
.text:0000000000003338                 lea     r14, [rbp+rbx+0]
.text:000000000000333D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003342                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003347                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000334C                 lea     r13, [rax+r14]
.text:0000000000003350                 sub     rdx, r14
.text:0000000000003353                 mov     rsi, r13
.text:0000000000003356                 call    rpl_mbrtowc
.text:000000000000335B                 test    rax, rax
.text:000000000000335E                 mov     r15, rax
.text:0000000000003361                 jz      short loc_33B1
.text:0000000000003363                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003367                 jz      loc_3985
.text:000000000000336D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003371                 jz      loc_3911
.text:0000000000003377                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000337C                 setz    al
.text:000000000000337F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003383                 jnz     loc_3520
.text:0000000000003389
.text:0000000000003389 loc_3389:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000003389                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000003389                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003390                 call    _iswprint
.text:0000000000003395                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000339A                 test    eax, eax
.text:000000000000339C                 mov     eax, 0
.text:00000000000033A1                 cmovz   r12d, eax
.text:00000000000033A5                 add     rbx, r15
.text:00000000000033A8                 call    _mbsinit
.text:00000000000033AD                 test    eax, eax
.text:00000000000033AF                 jz      short loc_3333
.text:00000000000033B1
.text:00000000000033B1 loc_33B1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:00000000000033B1                 mov     edx, r12d
.text:00000000000033B4                 mov     rdi, rbx
.text:00000000000033B7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000033BD                 xor     edx, 1
.text:00000000000033C0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000033C5                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000033CB                 and     dl, [rsp+0E8h+var_DB]
.text:00000000000033CF                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000033D7                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000033DC                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000033E1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000033E6
.text:00000000000033E6 loc_33E6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:00000000000033E6                                         ; quotearg_buffer_restyled+FB8↓j
.text:00000000000033E6                 cmp     rdi, 1
.text:00000000000033EA                 jbe     loc_39EB
.text:00000000000033F0
.text:00000000000033F0 loc_33F0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:00000000000033F0                 mov     rcx, rdi
.text:00000000000033F3                 xor     esi, esi
.text:00000000000033F5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:00000000000033FB                 add     rcx, rbp
.text:00000000000033FE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003403                 jmp     loc_34BE
.text:0000000000003403 ; ---------------------------------------------------------------------------
.text:0000000000003408                 align 10h
.text:0000000000003410
.text:0000000000003410 loc_3410:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003410                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003415                 setz    al
.text:0000000000003418                 test    r9b, r9b
.text:000000000000341B                 jnz     loc_38D0
.text:0000000000003421                 mov     esi, r8d
.text:0000000000003424                 xor     esi, 1
.text:0000000000003427                 and     al, sil
.text:000000000000342A                 jz      short loc_345B
.text:000000000000342C                 cmp     r13, r15
.text:000000000000342F                 jbe     short loc_3436
.text:0000000000003431                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003436
.text:0000000000003436 loc_3436:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003436                 lea     rsi, [r15+1]
.text:000000000000343A                 cmp     r13, rsi
.text:000000000000343D                 jbe     short loc_3445
.text:000000000000343F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003445
.text:0000000000003445 loc_3445:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003445                 lea     rsi, [r15+2]
.text:0000000000003449                 cmp     r13, rsi
.text:000000000000344C                 jbe     short loc_3454
.text:000000000000344E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003454
.text:0000000000003454 loc_3454:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000003454                 add     r15, 3
.text:0000000000003458                 mov     r8d, eax
.text:000000000000345B
.text:000000000000345B loc_345B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000345B                 cmp     r13, r15
.text:000000000000345E                 jbe     short loc_3465
.text:0000000000003460                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003465
.text:0000000000003465 loc_3465:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000003465                 lea     rax, [r15+1]
.text:0000000000003469                 cmp     r13, rax
.text:000000000000346C                 jbe     short loc_347B
.text:000000000000346E                 mov     eax, ebx
.text:0000000000003470                 shr     al, 6
.text:0000000000003473                 add     eax, 30h ; '0'
.text:0000000000003476                 mov     [r14+r15+1], al
.text:000000000000347B
.text:000000000000347B loc_347B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000347B                 lea     rax, [r15+2]
.text:000000000000347F                 cmp     r13, rax
.text:0000000000003482                 jbe     short loc_3494
.text:0000000000003484                 mov     eax, ebx
.text:0000000000003486                 shr     al, 3
.text:0000000000003489                 and     eax, 7
.text:000000000000348C                 add     eax, 30h ; '0'
.text:000000000000348F                 mov     [r14+r15+2], al
.text:0000000000003494
.text:0000000000003494 loc_3494:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000003494                 and     ebx, 7
.text:0000000000003497                 add     rbp, 1
.text:000000000000349B                 add     r15, 3
.text:000000000000349F                 add     ebx, 30h ; '0'
.text:00000000000034A2                 cmp     rbp, rcx
.text:00000000000034A5                 jnb     loc_2C90
.text:00000000000034AB                 mov     esi, edx
.text:00000000000034AD
.text:00000000000034AD loc_34AD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000034AD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000034AD                 cmp     r13, r15
.text:00000000000034B0                 jbe     short loc_34B6
.text:00000000000034B2                 mov     [r14+r15], bl
.text:00000000000034B6
.text:00000000000034B6 loc_34B6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:00000000000034B6                 movzx   ebx, byte ptr [rdi+rbp]
.text:00000000000034BA                 add     r15, 1
.text:00000000000034BE
.text:00000000000034BE loc_34BE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:00000000000034BE                 test    dl, dl
.text:00000000000034C0                 jnz     loc_3410
.text:00000000000034C6                 mov     eax, esi
.text:00000000000034C8                 xor     eax, 1
.text:00000000000034CB                 and     eax, r8d
.text:00000000000034CE                 test    r10b, r10b
.text:00000000000034D1                 jz      short loc_34E1
.text:00000000000034D3                 cmp     r13, r15
.text:00000000000034D6                 jbe     short loc_34DD
.text:00000000000034D8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000034DD
.text:00000000000034DD loc_34DD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000034DD                 add     r15, 1
.text:00000000000034E1
.text:00000000000034E1 loc_34E1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:00000000000034E1                 add     rbp, 1
.text:00000000000034E5                 cmp     rbp, rcx
.text:00000000000034E8                 jnb     loc_2C6C
.text:00000000000034EE                 test    al, al
.text:00000000000034F0                 jz      loc_38EE
.text:00000000000034F6                 cmp     r13, r15
.text:00000000000034F9                 jbe     short loc_3500
.text:00000000000034FB                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003500
.text:0000000000003500 loc_3500:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003500                 lea     rax, [r15+1]
.text:0000000000003504                 cmp     r13, rax
.text:0000000000003507                 jbe     short loc_350F
.text:0000000000003509                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000350F
.text:000000000000350F loc_350F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000350F                 add     r15, 2
.text:0000000000003513                 xor     r10d, r10d
.text:0000000000003516                 xor     r8d, r8d
.text:0000000000003519                 jmp     short loc_34AD
.text:0000000000003519 ; ---------------------------------------------------------------------------
.text:000000000000351B                 align 20h
.text:0000000000003520
.text:0000000000003520 loc_3520:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003520                 cmp     r15, 1
.text:0000000000003524                 jz      loc_3389
.text:000000000000352A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000352F                 lea     rcx, [rdi+r15]
.text:0000000000003533                 lea     rdx, [rdi+r14+1]
.text:0000000000003538                 lea     r8, [rcx+r14]
.text:000000000000353C                 jmp     short loc_354D
.text:000000000000353C ; ---------------------------------------------------------------------------
.text:000000000000353E                 align 20h
.text:0000000000003540
.text:0000000000003540 loc_3540:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003540                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003540                 add     rdx, 1
.text:0000000000003544                 cmp     r8, rdx
.text:0000000000003547                 jz      loc_3389
.text:000000000000354D
.text:000000000000354D loc_354D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000354D                 movzx   ecx, byte ptr [rdx]
.text:0000000000003550                 sub     ecx, 5Bh ; '['
.text:0000000000003553                 cmp     cl, 21h ; '!'
.text:0000000000003556                 ja      short loc_3540
.text:0000000000003558                 mov     esi, 1
.text:000000000000355D                 shl     rsi, cl
.text:0000000000003560                 mov     rcx, rsi
.text:0000000000003563                 mov     rsi, 20000002Bh
.text:000000000000356D                 test    rcx, rsi
.text:0000000000003570                 jz      short loc_3540
.text:0000000000003572                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003577                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000357C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000003581                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003589
.text:0000000000003589 loc_3589:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000003589                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000003589                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000358E                 jz      short loc_35A0
.text:0000000000003590                 test    al, al
.text:0000000000003592                 mov     eax, 4
.text:0000000000003597                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000359C                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000035A0
.text:00000000000035A0 loc_35A0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000035A0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000035A0                 sub     rsp, 8
.text:00000000000035A4                 mov     rcx, rbp
.text:00000000000035A7                 mov     rsi, r13
.text:00000000000035AA                 push    [rsp+0F0h+var_88]
.text:00000000000035AE                 push    [rsp+0F8h+var_80]
.text:00000000000035B2                 mov     rdi, r14
.text:00000000000035B5                 push    0
.text:00000000000035B7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000035BF                 mov     r8d, [rsp+108h+var_E0]
.text:00000000000035C4                 mov     rdx, [rsp+108h+s]
.text:00000000000035C9                 and     r9d, 0FFFFFFFDh
.text:00000000000035CD                 call    quotearg_buffer_restyled
.text:00000000000035D2                 add     rsp, 20h
.text:00000000000035D6                 mov     r15, rax
.text:00000000000035D9
.text:00000000000035D9 loc_35D9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:00000000000035D9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:00000000000035D9                 mov     rbx, [rsp+0E8h+var_40]
.text:00000000000035E1                 xor     rbx, fs:28h
.text:00000000000035EA                 mov     rax, r15
.text:00000000000035ED                 jnz     loc_3BF3
.text:00000000000035F3                 add     rsp, 0B8h
.text:00000000000035FA                 pop     rbx
.text:00000000000035FB                 pop     rbp
.text:00000000000035FC                 pop     r12
.text:00000000000035FE                 pop     r13
.text:0000000000003600                 pop     r14
.text:0000000000003602                 pop     r15
.text:0000000000003604                 retn
.text:0000000000003604 ; ---------------------------------------------------------------------------
.text:0000000000003605                 align 8
.text:0000000000003608
.text:0000000000003608 loc_3608:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003608                 mov     rbp, r11
.text:000000000000360B                 jmp     loc_3589
.text:0000000000003610 ; ---------------------------------------------------------------------------
.text:0000000000003610
.text:0000000000003610 loc_3610:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003610                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003610                 cmp     r13, r15
.text:0000000000003613                 jbe     short loc_361A
.text:0000000000003615                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000361A
.text:000000000000361A loc_361A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000361A                 lea     rax, [r15+1]
.text:000000000000361E                 cmp     r13, rax
.text:0000000000003621                 jbe     short loc_3629
.text:0000000000003623                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003629
.text:0000000000003629 loc_3629:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003629                 lea     rax, [r15+2]
.text:000000000000362D                 cmp     r13, rax
.text:0000000000003630                 jbe     loc_3C22
.text:0000000000003636                 mov     rdx, r13
.text:0000000000003639                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000363F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003644                 jmp     loc_3222
.text:0000000000003649 ; ---------------------------------------------------------------------------
.text:0000000000003649
.text:0000000000003649 loc_3649:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003649                 mov     eax, r12d
.text:000000000000364C                 mov     ebx, 30h ; '0'
.text:0000000000003651                 xor     r12d, r12d
.text:0000000000003654                 jmp     loc_2C59
.text:0000000000003659 ; ---------------------------------------------------------------------------
.text:0000000000003659
.text:0000000000003659 loc_3659:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000003659                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000365F                 jmp     loc_3029
.text:0000000000003664 ; ---------------------------------------------------------------------------
.text:0000000000003664
.text:0000000000003664 loc_3664:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003664                                         ; DATA XREF: .rodata:jpt_2A91↓o
.text:0000000000003664                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000003666                 jnz     loc_2A93        ; jumptable 00000000000121F1 case 1
.text:000000000000366C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003671
.text:0000000000003671 loc_3671:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000003671                 test    r13, r13
.text:0000000000003674                 jnz     loc_3C0A
.text:000000000000367A                 lea     rax, asc_5B6D   ; "'"
.text:0000000000003681                 mov     [rsp+0E8h+var_98], 0
.text:000000000000368A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000368F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003694                 xor     r12d, r12d
.text:0000000000003697                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000369C                 mov     [rsp+0E8h+n], 1
.text:00000000000036A5                 mov     [rsp+0E8h+s2], rax
.text:00000000000036AA                 mov     r15d, 1
.text:00000000000036B0                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000036B8                 jmp     loc_2AD3
.text:00000000000036B8 ; ---------------------------------------------------------------------------
.text:00000000000036BD                 align 20h
.text:00000000000036C0
.text:00000000000036C0 loc_36C0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000036C0                                         ; DATA XREF: .rodata:jpt_2A91↓o
.text:00000000000036C0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:00000000000036C2                 jnz     loc_3ABD
.text:00000000000036C8                 test    r13, r13
.text:00000000000036CB                 jz      loc_38F6
.text:00000000000036D1                 mov     byte ptr [r14], 22h ; '"'
.text:00000000000036D5                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000036DA                 xor     r12d, r12d
.text:00000000000036DD                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000036E2                 mov     [rsp+0E8h+var_98], 0
.text:00000000000036EB
.text:00000000000036EB loc_36EB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:00000000000036EB                 lea     rax, unk_5B6B
.text:00000000000036F2                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000036F7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000036FC                 mov     [rsp+0E8h+n], 1
.text:0000000000003705                 mov     r15d, 1
.text:000000000000370B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003710                 jmp     loc_2AD3
.text:0000000000003715 ; ---------------------------------------------------------------------------
.text:0000000000003715
.text:0000000000003715 loc_3715:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003715                                         ; DATA XREF: .rodata:jpt_2A91↓o
.text:0000000000003715                 lea     rax, unk_5B6B   ; jumptable 00000000000121F1 case 6
.text:000000000000371C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003721                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003726                 xor     r12d, r12d
.text:0000000000003729                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003732                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003737                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000373C                 mov     [rsp+0E8h+n], 1
.text:0000000000003745                 xor     r15d, r15d
.text:0000000000003748                 mov     [rsp+0E8h+s2], rax
.text:000000000000374D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000003755                 jmp     loc_2AD3
.text:000000000000375A ; ---------------------------------------------------------------------------
.text:000000000000375A
.text:000000000000375A loc_375A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000375A                                         ; DATA XREF: .rodata:jpt_2A91↓o
.text:000000000000375A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000375F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003764                 xor     r12d, r12d
.text:0000000000003767                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003770                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003775                 xor     r15d, r15d
.text:0000000000003778                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000377D                 mov     [rsp+0E8h+n], 0
.text:0000000000003786                 mov     [rsp+0E8h+s2], 0
.text:000000000000378F                 jmp     loc_2AD3
.text:0000000000003794 ; ---------------------------------------------------------------------------
.text:0000000000003794
.text:0000000000003794 loc_3794:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003794                                         ; DATA XREF: .rodata:jpt_2A91↓o
.text:0000000000003794                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000003799                 jz      short loc_37F1
.text:000000000000379B                 lea     rsi, asc_5B6F   ; "`"
.text:00000000000037A2                 xor     edi, edi        ; domainname
.text:00000000000037A4                 mov     edx, 5          ; category
.text:00000000000037A9                 call    _dcgettext
.text:00000000000037AE                 mov     rcx, rax
.text:00000000000037B1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000037B6                 lea     rax, asc_5B6F   ; "`"
.text:00000000000037BD                 cmp     rcx, rax
.text:00000000000037C0                 jz      loc_3B5E
.text:00000000000037C6
.text:00000000000037C6 loc_37C6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:00000000000037C6                 lea     rsi, asc_5B6D   ; "'"
.text:00000000000037CD                 xor     edi, edi        ; domainname
.text:00000000000037CF                 mov     edx, 5          ; category
.text:00000000000037D4                 call    _dcgettext
.text:00000000000037D9                 mov     rcx, rax
.text:00000000000037DC                 mov     [rsp+0E8h+var_88], rax
.text:00000000000037E1                 lea     rax, asc_5B6D   ; "'"
.text:00000000000037E8                 cmp     rcx, rax
.text:00000000000037EB                 jz      loc_3B74
.text:00000000000037F1
.text:00000000000037F1 loc_37F1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000037F1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000037F1                 xor     r15d, r15d
.text:00000000000037F4                 test    ebx, ebx
.text:00000000000037F6                 jz      loc_39BD
.text:00000000000037FC
.text:00000000000037FC loc_37FC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000037FC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000037FC                 test    ebx, ebx
.text:00000000000037FE                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003803                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003808                 xor     r12d, r12d
.text:000000000000380B                 mov     rdi, rbx        ; s
.text:000000000000380E                 call    _strlen
.text:0000000000003813                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003818                 mov     [rsp+0E8h+n], rax
.text:000000000000381D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003822                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003827                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003830                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003835                 jmp     loc_2AD3
.text:000000000000383A ; ---------------------------------------------------------------------------
.text:000000000000383A
.text:000000000000383A loc_383A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000383A                                         ; DATA XREF: .rodata:jpt_2A91↓o
.text:000000000000383A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000383F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003844                 xor     r12d, r12d
.text:0000000000003847                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003850                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003855                 xor     r15d, r15d
.text:0000000000003858                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000385D                 mov     [rsp+0E8h+n], 0
.text:0000000000003866                 mov     [rsp+0E8h+s2], 0
.text:000000000000386F                 jmp     loc_2AD3
.text:0000000000003874 ; ---------------------------------------------------------------------------
.text:0000000000003874
.text:0000000000003874 loc_3874:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003874                                         ; DATA XREF: .rodata:jpt_2A91↓o
.text:0000000000003874                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003879                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000387E                 xor     r12d, r12d
.text:0000000000003881                 mov     [rsp+0E8h+var_98], 0
.text:000000000000388A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000388F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003894                 jmp     loc_2AB3
.text:0000000000003899 ; ---------------------------------------------------------------------------
.text:0000000000003899
.text:0000000000003899 loc_3899:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003899                 cmp     r13, r15
.text:000000000000389C                 jbe     short loc_38A3
.text:000000000000389E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:00000000000038A3
.text:00000000000038A3 loc_38A3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:00000000000038A3                 lea     rax, [rcx+2]
.text:00000000000038A7                 cmp     r13, rax
.text:00000000000038AA                 jbe     short loc_38B2
.text:00000000000038AC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:00000000000038B2
.text:00000000000038B2 loc_38B2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:00000000000038B2                 mov     eax, r12d
.text:00000000000038B5                 lea     r15, [rcx+3]
.text:00000000000038B9                 xor     r12d, r12d
.text:00000000000038BC                 mov     ebx, 30h ; '0'
.text:00000000000038C1                 jmp     loc_2C28
.text:00000000000038C1 ; ---------------------------------------------------------------------------
.text:00000000000038C6                 align 10h
.text:00000000000038D0
.text:00000000000038D0 loc_38D0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:00000000000038D0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000038D5                 mov     rbp, r11
.text:00000000000038D8                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000038DC                 jmp     loc_3589
.text:00000000000038E1 ; ---------------------------------------------------------------------------
.text:00000000000038E1
.text:00000000000038E1 loc_38E1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000038E1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000038E6                 xor     r12d, r12d
.text:00000000000038E9                 jmp     loc_33F0
.text:00000000000038EE ; ---------------------------------------------------------------------------
.text:00000000000038EE
.text:00000000000038EE loc_38EE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000038EE                 xor     r10d, r10d
.text:00000000000038F1                 jmp     loc_34AD
.text:00000000000038F6 ; ---------------------------------------------------------------------------
.text:00000000000038F6
.text:00000000000038F6 loc_38F6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000038F6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000038FF                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003904                 xor     r12d, r12d
.text:0000000000003907                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000390C                 jmp     loc_36EB
.text:0000000000003911 ; ---------------------------------------------------------------------------
.text:0000000000003911
.text:0000000000003911 loc_3911:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003911                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003916                 mov     rsi, r14
.text:0000000000003919                 mov     rcx, r13
.text:000000000000391C                 mov     rax, rbx
.text:000000000000391F                 mov     rdi, rbx
.text:0000000000003922                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003928                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000392D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003935                 cmp     rsi, r11
.text:0000000000003938                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000393E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003946                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000394B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003950                 jnb     short loc_3978
.text:0000000000003952                 cmp     byte ptr [rcx], 0
.text:0000000000003955                 jnz     short loc_3967
.text:0000000000003957                 jmp     short loc_3978
.text:0000000000003957 ; ---------------------------------------------------------------------------
.text:0000000000003959                 align 20h
.text:0000000000003960
.text:0000000000003960 loc_3960:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003960                 cmp     byte ptr [r9+rax], 0
.text:0000000000003965                 jz      short loc_3975
.text:0000000000003967
.text:0000000000003967 loc_3967:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003967                 add     rax, 1
.text:000000000000396B                 lea     rdx, [rbp+rax+0]
.text:0000000000003970                 cmp     r11, rdx
.text:0000000000003973                 ja      short loc_3960
.text:0000000000003975
.text:0000000000003975 loc_3975:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003975                 mov     rdi, rax
.text:0000000000003978
.text:0000000000003978 loc_3978:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003978                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003978                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000397D                 xor     r12d, r12d
.text:0000000000003980                 jmp     loc_33E6
.text:0000000000003985 ; ---------------------------------------------------------------------------
.text:0000000000003985
.text:0000000000003985 loc_3985:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003985                 mov     rdi, rbx
.text:0000000000003988                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000398E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003993                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003999                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000039A1                 xor     r12d, r12d
.text:00000000000039A4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000039A9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000039AE                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000039B3                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000039B8                 jmp     loc_33E6
.text:00000000000039BD ; ---------------------------------------------------------------------------
.text:00000000000039BD
.text:00000000000039BD loc_39BD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:00000000000039BD                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000039C2                 movzx   eax, byte ptr [rdx]
.text:00000000000039C5                 test    al, al
.text:00000000000039C7                 jz      loc_37FC
.text:00000000000039CD                 nop     dword ptr [rax]
.text:00000000000039D0
.text:00000000000039D0 loc_39D0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000039D0                 cmp     r13, r15
.text:00000000000039D3                 jbe     short loc_39D9
.text:00000000000039D5                 mov     [r14+r15], al
.text:00000000000039D9
.text:00000000000039D9 loc_39D9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000039D9                 add     r15, 1
.text:00000000000039DD                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000039E2                 test    al, al
.text:00000000000039E4                 jnz     short loc_39D0
.text:00000000000039E6                 jmp     loc_37FC
.text:00000000000039EB ; ---------------------------------------------------------------------------
.text:00000000000039EB
.text:00000000000039EB loc_39EB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000039EB                 mov     eax, edx
.text:00000000000039ED                 jmp     loc_2F47
.text:00000000000039F2 ; ---------------------------------------------------------------------------
.text:00000000000039F2
.text:00000000000039F2 loc_39F2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000039F2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000039F6                 cmp     bl, 3Eh ; '>'
.text:00000000000039F9                 ja      loc_3270
.text:00000000000039FF                 mov     rax, 7000A38200000000h
.text:0000000000003A09                 bt      rax, rbx
.text:0000000000003A0D                 jnb     loc_3270
.text:0000000000003A13                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003A18                 jnz     loc_3C02
.text:0000000000003A1E                 cmp     r13, r15
.text:0000000000003A21                 jbe     short loc_3A28
.text:0000000000003A23                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003A28
.text:0000000000003A28 loc_3A28:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003A28                 lea     rax, [r15+1]
.text:0000000000003A2C                 cmp     r13, rax
.text:0000000000003A2F                 jbe     short loc_3A37
.text:0000000000003A31                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003A37
.text:0000000000003A37 loc_3A37:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003A37                 lea     rax, [r15+2]
.text:0000000000003A3B                 cmp     r13, rax
.text:0000000000003A3E                 jbe     short loc_3A46
.text:0000000000003A40                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003A46
.text:0000000000003A46 loc_3A46:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003A46                 lea     rax, [r15+3]
.text:0000000000003A4A                 cmp     r13, rax
.text:0000000000003A4D                 jbe     short loc_3A55
.text:0000000000003A4F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003A55
.text:0000000000003A55 loc_3A55:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003A55                 add     r15, 4
.text:0000000000003A59                 xor     edx, edx
.text:0000000000003A5B                 xor     r12d, r12d
.text:0000000000003A5E                 xor     eax, eax
.text:0000000000003A60                 mov     rbp, rcx
.text:0000000000003A63                 jmp     loc_2C28
.text:0000000000003A68 ; ---------------------------------------------------------------------------
.text:0000000000003A68
.text:0000000000003A68 loc_3A68:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003A68                                         ; DATA XREF: .rodata:jpt_2A91↓o
.text:0000000000003A68                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000003A6A                 jz      loc_3BF8
.text:0000000000003A70                 lea     rax, asc_5B6D   ; "'"
.text:0000000000003A77                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003A7C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003A81                 xor     r12d, r12d
.text:0000000000003A84                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003A8D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003A92                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003A97                 mov     [rsp+0E8h+n], 1
.text:0000000000003AA0                 xor     r15d, r15d
.text:0000000000003AA3                 mov     [rsp+0E8h+s2], rax
.text:0000000000003AA8                 jmp     loc_2AD3
.text:0000000000003AA8 ; ---------------------------------------------------------------------------
.text:0000000000003AAD                 align 10h
.text:0000000000003AB0
.text:0000000000003AB0 loc_3AB0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003AB0                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003AB0                 mov     rbp, r11
.text:0000000000003AB3                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003AB8                 jmp     loc_3589
.text:0000000000003ABD ; ---------------------------------------------------------------------------
.text:0000000000003ABD
.text:0000000000003ABD loc_3ABD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000003ABD                 lea     rax, unk_5B6B
.text:0000000000003AC4                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003AC9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003ACE                 xor     r12d, r12d
.text:0000000000003AD1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003ADA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003ADF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003AE4                 mov     [rsp+0E8h+n], 1
.text:0000000000003AED                 xor     r15d, r15d
.text:0000000000003AF0                 mov     [rsp+0E8h+s2], rax
.text:0000000000003AF5                 jmp     loc_2AD3
.text:0000000000003AFA ; ---------------------------------------------------------------------------
.text:0000000000003AFA
.text:0000000000003AFA loc_3AFA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000003AFA                 mov     eax, edx
.text:0000000000003AFC
.text:0000000000003AFC loc_3AFC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000003AFC                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000003AFC                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003B01                 test    rbx, rbx
.text:0000000000003B04                 jz      short loc_3B32
.text:0000000000003B06                 test    al, al
.text:0000000000003B08                 jz      short loc_3B32
.text:0000000000003B0A                 movzx   ecx, byte ptr [rbx]
.text:0000000000003B0D                 mov     rax, rbx
.text:0000000000003B10                 test    cl, cl
.text:0000000000003B12                 jz      short loc_3B32
.text:0000000000003B14                 mov     rdx, r15
.text:0000000000003B17                 sub     rax, r15
.text:0000000000003B1A
.text:0000000000003B1A loc_3B1A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000003B1A                 cmp     r13, rdx
.text:0000000000003B1D                 jbe     short loc_3B23
.text:0000000000003B1F                 mov     [r14+rdx], cl
.text:0000000000003B23
.text:0000000000003B23 loc_3B23:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003B23                 add     rdx, 1
.text:0000000000003B27                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000003B2B                 test    cl, cl
.text:0000000000003B2D                 jnz     short loc_3B1A
.text:0000000000003B2F                 mov     r15, rdx
.text:0000000000003B32
.text:0000000000003B32 loc_3B32:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003B32                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003B32                 cmp     r13, r15
.text:0000000000003B35                 jbe     loc_35D9
.text:0000000000003B3B                 mov     byte ptr [r14+r15], 0
.text:0000000000003B40                 jmp     loc_35D9
.text:0000000000003B45 ; ---------------------------------------------------------------------------
.text:0000000000003B45
.text:0000000000003B45 loc_3B45:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003B45                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003B4A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003B4F                 mov     rbp, r11
.text:0000000000003B52                 setz    al
.text:0000000000003B55                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003B59                 jmp     loc_3589
.text:0000000000003B5E ; ---------------------------------------------------------------------------
.text:0000000000003B5E
.text:0000000000003B5E loc_3B5E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000003B5E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003B62                 mov     rdi, rcx
.text:0000000000003B65                 call    gettext_quote
.text:0000000000003B6A                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003B6F                 jmp     loc_37C6
.text:0000000000003B74 ; ---------------------------------------------------------------------------
.text:0000000000003B74
.text:0000000000003B74 loc_3B74:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003B74                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003B78                 mov     rdi, rcx
.text:0000000000003B7B                 call    gettext_quote
.text:0000000000003B80                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003B85                 jmp     loc_37F1
.text:0000000000003B8A ; ---------------------------------------------------------------------------
.text:0000000000003B8A
.text:0000000000003B8A loc_3B8A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000003B8A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003B8F                 mov     rbp, r11
.text:0000000000003B92                 mov     eax, edx
.text:0000000000003B94                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003B98                 jmp     loc_3589
.text:0000000000003B9D ; ---------------------------------------------------------------------------
.text:0000000000003B9D
.text:0000000000003B9D loc_3B9D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000003B9D                 sub     rsp, 8
.text:0000000000003BA1                 mov     r8d, 5
.text:0000000000003BA7                 mov     rcx, r11
.text:0000000000003BAA                 push    [rsp+0F0h+var_88]
.text:0000000000003BAE                 push    [rsp+0F8h+var_80]
.text:0000000000003BB2                 mov     rdi, r14
.text:0000000000003BB5                 push    [rsp+100h+var_C8]
.text:0000000000003BB9                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003BC1                 mov     rdx, [rsp+108h+s]
.text:0000000000003BC6                 mov     rsi, [rsp+108h+var_98]
.text:0000000000003BCB                 call    quotearg_buffer_restyled
.text:0000000000003BD0                 add     rsp, 20h
.text:0000000000003BD4                 mov     r15, rax
.text:0000000000003BD7                 jmp     loc_35D9
.text:0000000000003BDC ; ---------------------------------------------------------------------------
.text:0000000000003BDC
.text:0000000000003BDC loc_3BDC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000003BDC                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003BE1                 jmp     loc_3AFC
.text:0000000000003BE6 ; ---------------------------------------------------------------------------
.text:0000000000003BE6
.text:0000000000003BE6 loc_3BE6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003BE6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003BEE                 jmp     loc_3589
.text:0000000000003BF3 ; ---------------------------------------------------------------------------
.text:0000000000003BF3
.text:0000000000003BF3 loc_3BF3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003BF3                 call    ___stack_chk_fail
.text:0000000000003BF8 ; ---------------------------------------------------------------------------
.text:0000000000003BF8
.text:0000000000003BF8 loc_3BF8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003BF8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003BFD                 jmp     loc_3671
.text:0000000000003C02 ; ---------------------------------------------------------------------------
.text:0000000000003C02
.text:0000000000003C02 loc_3C02:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003C02                 mov     rbp, r11
.text:0000000000003C05                 jmp     loc_35A0
.text:0000000000003C0A ; ---------------------------------------------------------------------------
.text:0000000000003C0A
.text:0000000000003C0A loc_3C0A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000003C0A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003C0F                 xor     eax, eax
.text:0000000000003C11                 xor     r12d, r12d
.text:0000000000003C14                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003C1D                 jmp     loc_31C4
.text:0000000000003C22 ; ---------------------------------------------------------------------------
.text:0000000000003C22
.text:0000000000003C22 loc_3C22:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003C22                 mov     rdx, r13
.text:0000000000003C25                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003C2A                 jmp     loc_3222
.text:0000000000003C2F ; ---------------------------------------------------------------------------
.text:0000000000003C2F
.text:0000000000003C2F def_2A91:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000003C2F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000003C2F ; } // starts at 2A00
.text:0000000000003C2F quotearg_buffer_restyled endp
.text:0000000000003C2F
.text:0000000000003C2F ; ---------------------------------------------------------------------------
.text:0000000000003C34                 align 20h
.text:0000000000003C40
.text:0000000000003C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C40
.text:0000000000003C40
.text:0000000000003C40 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003C40                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003C40
.text:0000000000003C40 var_50          = qword ptr -50h
.text:0000000000003C40 var_48          = qword ptr -48h
.text:0000000000003C40 var_40          = dword ptr -40h
.text:0000000000003C40 var_3C          = dword ptr -3Ch
.text:0000000000003C40
.text:0000000000003C40 ; __unwind {
.text:0000000000003C40                 push    r15
.text:0000000000003C42                 push    r14
.text:0000000000003C44                 movsxd  r15, edi
.text:0000000000003C47                 push    r13
.text:0000000000003C49                 push    r12
.text:0000000000003C4B                 mov     r14, rdx
.text:0000000000003C4E                 push    rbp
.text:0000000000003C4F                 push    rbx
.text:0000000000003C50                 mov     rbp, rcx
.text:0000000000003C53                 sub     rsp, 28h
.text:0000000000003C57                 mov     [rsp+58h+var_50], rsi
.text:0000000000003C5C                 call    ___errno_location
.text:0000000000003C61                 mov     r13, rax
.text:0000000000003C64                 mov     eax, [rax]
.text:0000000000003C66                 test    r15d, r15d
.text:0000000000003C69                 mov     rbx, cs:slotvec
.text:0000000000003C70                 mov     [rsp+58h+var_40], eax
.text:0000000000003C74                 js      loc_3DE1
.text:0000000000003C7A                 cmp     cs:nslots, r15d
.text:0000000000003C81                 jg      short loc_3CE5
.text:0000000000003C83                 cmp     r15d, 7FFFFFFFh
.text:0000000000003C8A                 jz      loc_3DE6
.text:0000000000003C90                 lea     r12d, [r15+1]
.text:0000000000003C94                 lea     rax, slotvec0
.text:0000000000003C9B                 movsxd  rsi, r12d
.text:0000000000003C9E                 shl     rsi, 4
.text:0000000000003CA2                 cmp     rbx, rax
.text:0000000000003CA5                 jz      loc_3DC0
.text:0000000000003CAB                 mov     rdi, rbx
.text:0000000000003CAE                 call    xrealloc
.text:0000000000003CB3                 mov     rbx, rax
.text:0000000000003CB6                 mov     cs:slotvec, rax
.text:0000000000003CBD
.text:0000000000003CBD loc_3CBD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000003CBD                 movsxd  rdi, cs:nslots
.text:0000000000003CC4                 mov     edx, r12d
.text:0000000000003CC7                 xor     esi, esi        ; c
.text:0000000000003CC9                 sub     edx, edi
.text:0000000000003CCB                 shl     rdi, 4
.text:0000000000003CCF                 movsxd  rdx, edx
.text:0000000000003CD2                 add     rdi, rbx        ; s
.text:0000000000003CD5                 shl     rdx, 4          ; n
.text:0000000000003CD9                 call    _memset
.text:0000000000003CDE                 mov     cs:nslots, r12d
.text:0000000000003CE5
.text:0000000000003CE5 loc_3CE5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003CE5                 mov     eax, [rbp+4]
.text:0000000000003CE8                 shl     r15, 4
.text:0000000000003CEC                 sub     rsp, 8
.text:0000000000003CF0                 add     rbx, r15
.text:0000000000003CF3                 lea     r15, [rbp+8]
.text:0000000000003CF7                 mov     r8d, [rbp+0]
.text:0000000000003CFB                 mov     r11, [rbx]
.text:0000000000003CFE                 mov     r12, [rbx+8]
.text:0000000000003D02                 mov     rcx, r14
.text:0000000000003D05                 or      eax, 1
.text:0000000000003D08                 mov     [rsp+60h+var_3C], eax
.text:0000000000003D0C                 push    qword ptr [rbp+30h]
.text:0000000000003D0F                 mov     r9d, eax
.text:0000000000003D12                 push    qword ptr [rbp+28h]
.text:0000000000003D15                 push    r15
.text:0000000000003D17                 mov     rsi, r11
.text:0000000000003D1A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003D1F                 mov     rdi, r12
.text:0000000000003D22                 mov     [rsp+78h+var_48], r11
.text:0000000000003D27                 call    quotearg_buffer_restyled
.text:0000000000003D2C                 add     rsp, 20h
.text:0000000000003D30                 mov     r11, [rsp+58h+var_48]
.text:0000000000003D35                 cmp     r11, rax
.text:0000000000003D38                 ja      short loc_3DA1
.text:0000000000003D3A                 lea     rsi, [rax+1]
.text:0000000000003D3E                 lea     rax, slot0
.text:0000000000003D45                 cmp     r12, rax
.text:0000000000003D48                 mov     [rbx], rsi
.text:0000000000003D4B                 jz      short loc_3D5F
.text:0000000000003D4D                 mov     rdi, r12        ; ptr
.text:0000000000003D50                 mov     [rsp+58h+var_48], rsi
.text:0000000000003D55                 call    _free
.text:0000000000003D5A                 mov     rsi, [rsp+58h+var_48]
.text:0000000000003D5F
.text:0000000000003D5F loc_3D5F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000003D5F                 mov     rdi, rsi
.text:0000000000003D62                 mov     [rsp+58h+var_48], rsi
.text:0000000000003D67                 call    xmalloc
.text:0000000000003D6C                 sub     rsp, 8
.text:0000000000003D70                 mov     [rbx+8], rax
.text:0000000000003D74                 mov     r8d, [rbp+0]
.text:0000000000003D78                 push    qword ptr [rbp+30h]
.text:0000000000003D7B                 push    qword ptr [rbp+28h]
.text:0000000000003D7E                 mov     rcx, r14
.text:0000000000003D81                 push    r15
.text:0000000000003D83                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003D88                 mov     rdi, rax
.text:0000000000003D8B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003D90                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003D95                 mov     r12, rax
.text:0000000000003D98                 call    quotearg_buffer_restyled
.text:0000000000003D9D                 add     rsp, 20h
.text:0000000000003DA1
.text:0000000000003DA1 loc_3DA1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003DA1                 mov     eax, [rsp+58h+var_40]
.text:0000000000003DA5                 mov     [r13+0], eax
.text:0000000000003DA9                 add     rsp, 28h
.text:0000000000003DAD                 mov     rax, r12
.text:0000000000003DB0                 pop     rbx
.text:0000000000003DB1                 pop     rbp
.text:0000000000003DB2                 pop     r12
.text:0000000000003DB4                 pop     r13
.text:0000000000003DB6                 pop     r14
.text:0000000000003DB8                 pop     r15
.text:0000000000003DBA                 retn
.text:0000000000003DBA ; ---------------------------------------------------------------------------
.text:0000000000003DBB                 align 20h
.text:0000000000003DC0
.text:0000000000003DC0 loc_3DC0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003DC0                 xor     edi, edi
.text:0000000000003DC2                 call    xrealloc
.text:0000000000003DC7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000003DCF                 mov     rbx, rax
.text:0000000000003DD2                 mov     cs:slotvec, rax
.text:0000000000003DD9                 movups  xmmword ptr [rax], xmm0
.text:0000000000003DDC                 jmp     loc_3CBD
.text:0000000000003DE1 ; ---------------------------------------------------------------------------
.text:0000000000003DE1
.text:0000000000003DE1 loc_3DE1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003DE1                 call    _abort
.text:0000000000003DE6 ; ---------------------------------------------------------------------------
.text:0000000000003DE6
.text:0000000000003DE6 loc_3DE6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003DE6                 call    xalloc_die
.text:0000000000003DE6 ; } // starts at 3C40
.text:0000000000003DE6 quotearg_n_options endp
.text:0000000000003DE6
.text:0000000000003DE6 ; ---------------------------------------------------------------------------
.text:0000000000003DEB                 align 10h
.text:0000000000003DF0
.text:0000000000003DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DF0
.text:0000000000003DF0 ; Attributes: info_from_lumina
.text:0000000000003DF0
.text:0000000000003DF0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003DF0                 public clone_quoting_options
.text:0000000000003DF0 clone_quoting_options proc near
.text:0000000000003DF0 ; __unwind {
.text:0000000000003DF0                 push    r12
.text:0000000000003DF2                 push    rbp
.text:0000000000003DF3                 push    rbx
.text:0000000000003DF4                 mov     rbx, rdi
.text:0000000000003DF7                 call    ___errno_location
.text:0000000000003DFC                 mov     r12d, [rax]
.text:0000000000003DFF                 mov     rbp, rax
.text:0000000000003E02                 lea     rax, default_quoting_options
.text:0000000000003E09                 test    rbx, rbx
.text:0000000000003E0C                 mov     esi, 38h ; '8'  ; n
.text:0000000000003E11                 cmovz   rbx, rax
.text:0000000000003E15                 mov     rdi, rbx        ; src
.text:0000000000003E18                 call    xmemdup
.text:0000000000003E1D                 mov     [rbp+0], r12d
.text:0000000000003E21                 pop     rbx
.text:0000000000003E22                 pop     rbp
.text:0000000000003E23                 pop     r12
.text:0000000000003E25                 retn
.text:0000000000003E25 ; } // starts at 3DF0
.text:0000000000003E25 clone_quoting_options endp
.text:0000000000003E25
.text:0000000000003E25 ; ---------------------------------------------------------------------------
.text:0000000000003E26                 align 10h
.text:0000000000003E30
.text:0000000000003E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E30
.text:0000000000003E30
.text:0000000000003E30                 public get_quoting_style
.text:0000000000003E30 get_quoting_style proc near
.text:0000000000003E30 ; __unwind {
.text:0000000000003E30                 lea     rax, default_quoting_options
.text:0000000000003E37                 test    rdi, rdi
.text:0000000000003E3A                 cmovz   rdi, rax
.text:0000000000003E3E                 mov     eax, [rdi]
.text:0000000000003E40                 retn
.text:0000000000003E40 ; } // starts at 3E30
.text:0000000000003E40 get_quoting_style endp
.text:0000000000003E40
.text:0000000000003E40 ; ---------------------------------------------------------------------------
.text:0000000000003E41                 align 10h
.text:0000000000003E50
.text:0000000000003E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E50
.text:0000000000003E50
.text:0000000000003E50                 public set_quoting_style
.text:0000000000003E50 set_quoting_style proc near
.text:0000000000003E50 ; __unwind {
.text:0000000000003E50                 lea     rax, default_quoting_options
.text:0000000000003E57                 test    rdi, rdi
.text:0000000000003E5A                 cmovz   rdi, rax
.text:0000000000003E5E                 mov     [rdi], esi
.text:0000000000003E60                 retn
.text:0000000000003E60 ; } // starts at 3E50
.text:0000000000003E60 set_quoting_style endp
.text:0000000000003E60
.text:0000000000003E60 ; ---------------------------------------------------------------------------
.text:0000000000003E61                 align 10h
.text:0000000000003E70
.text:0000000000003E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E70
.text:0000000000003E70 ; Attributes: info_from_lumina
.text:0000000000003E70
.text:0000000000003E70 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000003E70                 public set_char_quoting
.text:0000000000003E70 set_char_quoting proc near
.text:0000000000003E70 ; __unwind {
.text:0000000000003E70                 lea     rax, default_quoting_options
.text:0000000000003E77                 test    rdi, rdi
.text:0000000000003E7A                 mov     ecx, esi
.text:0000000000003E7C                 cmovz   rdi, rax
.text:0000000000003E80                 mov     eax, esi
.text:0000000000003E82                 and     ecx, 1Fh
.text:0000000000003E85                 shr     al, 5
.text:0000000000003E88                 movzx   eax, al
.text:0000000000003E8B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003E90                 mov     esi, [rdi]
.text:0000000000003E92                 mov     eax, esi
.text:0000000000003E94                 shr     eax, cl
.text:0000000000003E96                 xor     edx, eax
.text:0000000000003E98                 and     eax, 1
.text:0000000000003E9B                 and     edx, 1
.text:0000000000003E9E                 shl     edx, cl
.text:0000000000003EA0                 xor     edx, esi
.text:0000000000003EA2                 mov     [rdi], edx
.text:0000000000003EA4                 retn
.text:0000000000003EA4 ; } // starts at 3E70
.text:0000000000003EA4 set_char_quoting endp
.text:0000000000003EA4
.text:0000000000003EA4 ; ---------------------------------------------------------------------------
.text:0000000000003EA5                 align 10h
.text:0000000000003EB0
.text:0000000000003EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EB0
.text:0000000000003EB0
.text:0000000000003EB0                 public set_quoting_flags
.text:0000000000003EB0 set_quoting_flags proc near
.text:0000000000003EB0 ; __unwind {
.text:0000000000003EB0                 lea     rax, default_quoting_options
.text:0000000000003EB7                 test    rdi, rdi
.text:0000000000003EBA                 cmovz   rdi, rax
.text:0000000000003EBE                 mov     eax, [rdi+4]
.text:0000000000003EC1                 mov     [rdi+4], esi
.text:0000000000003EC4                 retn
.text:0000000000003EC4 ; } // starts at 3EB0
.text:0000000000003EC4 set_quoting_flags endp
.text:0000000000003EC4
.text:0000000000003EC4 ; ---------------------------------------------------------------------------
.text:0000000000003EC5                 align 10h
.text:0000000000003ED0
.text:0000000000003ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003ED0
.text:0000000000003ED0 ; Attributes: info_from_lumina
.text:0000000000003ED0
.text:0000000000003ED0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003ED0                 public set_custom_quoting
.text:0000000000003ED0 set_custom_quoting proc near
.text:0000000000003ED0 ; __unwind {
.text:0000000000003ED0                 lea     rax, default_quoting_options
.text:0000000000003ED7                 test    rdi, rdi
.text:0000000000003EDA                 cmovz   rdi, rax
.text:0000000000003EDE                 test    rsi, rsi
.text:0000000000003EE1                 mov     dword ptr [rdi], 0Ah
.text:0000000000003EE7                 jz      short loc_3EF7
.text:0000000000003EE9                 test    rdx, rdx
.text:0000000000003EEC                 jz      short loc_3EF7
.text:0000000000003EEE                 mov     [rdi+28h], rsi
.text:0000000000003EF2                 mov     [rdi+30h], rdx
.text:0000000000003EF6                 retn
.text:0000000000003EF7 ; ---------------------------------------------------------------------------
.text:0000000000003EF7
.text:0000000000003EF7 loc_3EF7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003EF7                                         ; set_custom_quoting+1C↑j
.text:0000000000003EF7                 sub     rsp, 8
.text:0000000000003EFB                 call    _abort
.text:0000000000003EFB ; } // starts at 3ED0
.text:0000000000003EFB set_custom_quoting endp
.text:0000000000003EFB
.text:0000000000003F00
.text:0000000000003F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F00
.text:0000000000003F00 ; Attributes: info_from_lumina
.text:0000000000003F00
.text:0000000000003F00 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003F00                 public quotearg_buffer
.text:0000000000003F00 quotearg_buffer proc near
.text:0000000000003F00
.text:0000000000003F00 var_40          = qword ptr -40h
.text:0000000000003F00
.text:0000000000003F00 ; __unwind {
.text:0000000000003F00                 push    r15
.text:0000000000003F02                 push    r14
.text:0000000000003F04                 lea     rax, default_quoting_options
.text:0000000000003F0B                 push    r13
.text:0000000000003F0D                 push    r12
.text:0000000000003F0F                 mov     r13, rdi
.text:0000000000003F12                 push    rbp
.text:0000000000003F13                 push    rbx
.text:0000000000003F14                 mov     rbx, r8
.text:0000000000003F17                 mov     r14, rsi
.text:0000000000003F1A                 mov     r15, rdx
.text:0000000000003F1D                 sub     rsp, 18h
.text:0000000000003F21                 test    r8, r8
.text:0000000000003F24                 cmovz   rbx, rax
.text:0000000000003F28                 mov     [rsp+48h+var_40], rcx
.text:0000000000003F2D                 call    ___errno_location
.text:0000000000003F32                 mov     r12d, [rax]
.text:0000000000003F35                 mov     rbp, rax
.text:0000000000003F38                 lea     rax, [rbx+8]
.text:0000000000003F3C                 sub     rsp, 8
.text:0000000000003F40                 mov     r9d, [rbx+4]
.text:0000000000003F44                 push    qword ptr [rbx+30h]
.text:0000000000003F47                 mov     r8d, [rbx]
.text:0000000000003F4A                 push    qword ptr [rbx+28h]
.text:0000000000003F4D                 mov     rdx, r15
.text:0000000000003F50                 push    rax
.text:0000000000003F51                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003F56                 mov     rsi, r14
.text:0000000000003F59                 mov     rdi, r13
.text:0000000000003F5C                 call    quotearg_buffer_restyled
.text:0000000000003F61                 mov     [rbp+0], r12d
.text:0000000000003F65                 add     rsp, 38h
.text:0000000000003F69                 pop     rbx
.text:0000000000003F6A                 pop     rbp
.text:0000000000003F6B                 pop     r12
.text:0000000000003F6D                 pop     r13
.text:0000000000003F6F                 pop     r14
.text:0000000000003F71                 pop     r15
.text:0000000000003F73                 retn
.text:0000000000003F73 ; } // starts at 3F00
.text:0000000000003F73 quotearg_buffer endp
.text:0000000000003F73
.text:0000000000003F73 ; ---------------------------------------------------------------------------
.text:0000000000003F74                 align 20h
.text:0000000000003F80
.text:0000000000003F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F80
.text:0000000000003F80 ; Attributes: info_from_lumina
.text:0000000000003F80
.text:0000000000003F80 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000003F80                 public quotearg_alloc_mem
.text:0000000000003F80 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000003F80
.text:0000000000003F80 var_5C          = dword ptr -5Ch
.text:0000000000003F80 var_58          = qword ptr -58h
.text:0000000000003F80 var_50          = qword ptr -50h
.text:0000000000003F80 var_48          = qword ptr -48h
.text:0000000000003F80 var_40          = qword ptr -40h
.text:0000000000003F80
.text:0000000000003F80 ; __unwind {
.text:0000000000003F80                 push    r15
.text:0000000000003F82                 push    r14
.text:0000000000003F84                 lea     rax, default_quoting_options
.text:0000000000003F8B                 push    r13
.text:0000000000003F8D                 push    r12
.text:0000000000003F8F                 mov     r12, rdx
.text:0000000000003F92                 push    rbp
.text:0000000000003F93                 push    rbx
.text:0000000000003F94                 mov     rbx, rcx
.text:0000000000003F97                 mov     r14, rdi
.text:0000000000003F9A                 mov     r15, rsi
.text:0000000000003F9D                 sub     rsp, 38h
.text:0000000000003FA1                 test    rcx, rcx
.text:0000000000003FA4                 cmovz   rbx, rax
.text:0000000000003FA8                 xor     ebp, ebp
.text:0000000000003FAA                 call    ___errno_location
.text:0000000000003FAF                 test    r12, r12
.text:0000000000003FB2                 mov     r13, rax
.text:0000000000003FB5                 mov     eax, [rax]
.text:0000000000003FB7                 setz    bpl
.text:0000000000003FBB                 or      ebp, [rbx+4]
.text:0000000000003FBE                 lea     r10, [rbx+8]
.text:0000000000003FC2                 sub     rsp, 8
.text:0000000000003FC6                 mov     r8d, [rbx]
.text:0000000000003FC9                 mov     rcx, r15
.text:0000000000003FCC                 mov     [rsp+70h+var_5C], eax
.text:0000000000003FD0                 push    qword ptr [rbx+30h]
.text:0000000000003FD3                 mov     rdx, r14
.text:0000000000003FD6                 push    qword ptr [rbx+28h]
.text:0000000000003FD9                 push    r10
.text:0000000000003FDB                 xor     esi, esi
.text:0000000000003FDD                 mov     r9d, ebp
.text:0000000000003FE0                 xor     edi, edi
.text:0000000000003FE2                 mov     [rsp+88h+var_48], r10
.text:0000000000003FE7                 call    quotearg_buffer_restyled
.text:0000000000003FEC                 lea     rsi, [rax+1]
.text:0000000000003FF0                 mov     [rsp+88h+var_40], rax
.text:0000000000003FF5                 add     rsp, 20h
.text:0000000000003FF9                 mov     rdi, rsi
.text:0000000000003FFC                 mov     [rsp+68h+var_50], rsi
.text:0000000000004001                 call    xmalloc
.text:0000000000004006                 mov     [rsp+68h+var_58], rax
.text:000000000000400B                 sub     rsp, 8
.text:000000000000400F                 push    qword ptr [rbx+30h]
.text:0000000000004012                 push    qword ptr [rbx+28h]
.text:0000000000004015                 mov     r10, [rsp+80h+var_48]
.text:000000000000401A                 mov     r9d, ebp
.text:000000000000401D                 mov     r8d, [rbx]
.text:0000000000004020                 mov     rcx, r15
.text:0000000000004023                 mov     rdx, r14
.text:0000000000004026                 mov     rdi, rax
.text:0000000000004029                 push    r10
.text:000000000000402B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004030                 call    quotearg_buffer_restyled
.text:0000000000004035                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004039                 add     rsp, 20h
.text:000000000000403D                 test    r12, r12
.text:0000000000004040                 mov     [r13+0], eax
.text:0000000000004044                 jz      short loc_404F
.text:0000000000004046                 mov     r11, [rsp+68h+var_40]
.text:000000000000404B                 mov     [r12], r11
.text:000000000000404F
.text:000000000000404F loc_404F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000404F                 mov     rax, [rsp+68h+var_58]
.text:0000000000004054                 add     rsp, 38h
.text:0000000000004058                 pop     rbx
.text:0000000000004059                 pop     rbp
.text:000000000000405A                 pop     r12
.text:000000000000405C                 pop     r13
.text:000000000000405E                 pop     r14
.text:0000000000004060                 pop     r15
.text:0000000000004062                 retn
.text:0000000000004062 ; } // starts at 3F80
.text:0000000000004062 quotearg_alloc_mem endp
.text:0000000000004062
.text:0000000000004062 ; ---------------------------------------------------------------------------
.text:0000000000004063                 align 10h
.text:0000000000004070
.text:0000000000004070 ; =============== S U B R O U T I N E =======================================
.text:0000000000004070
.text:0000000000004070
.text:0000000000004070                 public quotearg_alloc
.text:0000000000004070 quotearg_alloc  proc near
.text:0000000000004070 ; __unwind {
.text:0000000000004070                 mov     rcx, rdx
.text:0000000000004073                 xor     edx, edx
.text:0000000000004075                 jmp     quotearg_alloc_mem
.text:0000000000004075 ; } // starts at 4070
.text:0000000000004075 quotearg_alloc  endp
.text:0000000000004075
.text:0000000000004075 ; ---------------------------------------------------------------------------
.text:000000000000407A                 align 20h
.text:0000000000004080
.text:0000000000004080 ; =============== S U B R O U T I N E =======================================
.text:0000000000004080
.text:0000000000004080 ; Attributes: info_from_lumina
.text:0000000000004080
.text:0000000000004080 ; void __cdecl quotearg_free()
.text:0000000000004080                 public quotearg_free
.text:0000000000004080 quotearg_free   proc near
.text:0000000000004080 ; __unwind {
.text:0000000000004080                 mov     eax, cs:nslots
.text:0000000000004086                 push    r12
.text:0000000000004088                 mov     r12, cs:slotvec
.text:000000000000408F                 push    rbp
.text:0000000000004090                 push    rbx
.text:0000000000004091                 cmp     eax, 1
.text:0000000000004094                 jle     short loc_40C1
.text:0000000000004096                 sub     eax, 2
.text:0000000000004099                 lea     rbx, [r12+18h]
.text:000000000000409E                 shl     rax, 4
.text:00000000000040A2                 lea     rbp, [r12+rax+28h]
.text:00000000000040A7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000040B0
.text:00000000000040B0 loc_40B0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000040B0                 mov     rdi, [rbx]      ; ptr
.text:00000000000040B3                 add     rbx, 10h
.text:00000000000040B7                 call    _free
.text:00000000000040BC                 cmp     rbx, rbp
.text:00000000000040BF                 jnz     short loc_40B0
.text:00000000000040C1
.text:00000000000040C1 loc_40C1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000040C1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000040C6                 lea     rbx, slot0
.text:00000000000040CD                 cmp     rdi, rbx
.text:00000000000040D0                 jz      short loc_40E9
.text:00000000000040D2                 call    _free
.text:00000000000040D7                 mov     cs:slotvec0, 100h
.text:00000000000040E2                 mov     cs:off_208098, rbx
.text:00000000000040E9
.text:00000000000040E9 loc_40E9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000040E9                 lea     rbx, slotvec0
.text:00000000000040F0                 cmp     r12, rbx
.text:00000000000040F3                 jz      short loc_4104
.text:00000000000040F5                 mov     rdi, r12        ; ptr
.text:00000000000040F8                 call    _free
.text:00000000000040FD                 mov     cs:slotvec, rbx
.text:0000000000004104
.text:0000000000004104 loc_4104:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004104                 pop     rbx
.text:0000000000004105                 mov     cs:nslots, 1
.text:000000000000410F                 pop     rbp
.text:0000000000004110                 pop     r12
.text:0000000000004112                 retn
.text:0000000000004112 ; } // starts at 4080
.text:0000000000004112 quotearg_free   endp
.text:0000000000004112
.text:0000000000004112 ; ---------------------------------------------------------------------------
.text:0000000000004113                 align 20h
.text:0000000000004120
.text:0000000000004120 ; =============== S U B R O U T I N E =======================================
.text:0000000000004120
.text:0000000000004120
.text:0000000000004120                 public quotearg_n
.text:0000000000004120 quotearg_n      proc near
.text:0000000000004120 ; __unwind {
.text:0000000000004120                 lea     rcx, default_quoting_options
.text:0000000000004127                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000412E                 jmp     quotearg_n_options
.text:000000000000412E ; } // starts at 4120
.text:000000000000412E quotearg_n      endp
.text:000000000000412E
.text:000000000000412E ; ---------------------------------------------------------------------------
.text:0000000000004133                 align 20h
.text:0000000000004140
.text:0000000000004140 ; =============== S U B R O U T I N E =======================================
.text:0000000000004140
.text:0000000000004140
.text:0000000000004140                 public quotearg_n_mem
.text:0000000000004140 quotearg_n_mem  proc near
.text:0000000000004140 ; __unwind {
.text:0000000000004140                 lea     rcx, default_quoting_options
.text:0000000000004147                 jmp     quotearg_n_options
.text:0000000000004147 ; } // starts at 4140
.text:0000000000004147 quotearg_n_mem  endp
.text:0000000000004147
.text:0000000000004147 ; ---------------------------------------------------------------------------
.text:000000000000414C                 align 10h
.text:0000000000004150
.text:0000000000004150 ; =============== S U B R O U T I N E =======================================
.text:0000000000004150
.text:0000000000004150
.text:0000000000004150                 public quotearg
.text:0000000000004150 quotearg        proc near
.text:0000000000004150 ; __unwind {
.text:0000000000004150                 lea     rcx, default_quoting_options
.text:0000000000004157                 mov     rsi, rdi
.text:000000000000415A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004161                 xor     edi, edi
.text:0000000000004163                 jmp     quotearg_n_options
.text:0000000000004163 ; } // starts at 4150
.text:0000000000004163 quotearg        endp
.text:0000000000004163
.text:0000000000004163 ; ---------------------------------------------------------------------------
.text:0000000000004168                 align 10h
.text:0000000000004170
.text:0000000000004170 ; =============== S U B R O U T I N E =======================================
.text:0000000000004170
.text:0000000000004170
.text:0000000000004170                 public quotearg_mem
.text:0000000000004170 quotearg_mem    proc near
.text:0000000000004170 ; __unwind {
.text:0000000000004170                 lea     rcx, default_quoting_options
.text:0000000000004177                 mov     rdx, rsi
.text:000000000000417A                 mov     rsi, rdi
.text:000000000000417D                 xor     edi, edi
.text:000000000000417F                 jmp     quotearg_n_options
.text:000000000000417F ; } // starts at 4170
.text:000000000000417F quotearg_mem    endp
.text:000000000000417F
.text:000000000000417F ; ---------------------------------------------------------------------------
.text:0000000000004184                 align 10h
.text:0000000000004190
.text:0000000000004190 ; =============== S U B R O U T I N E =======================================
.text:0000000000004190
.text:0000000000004190 ; Attributes: info_from_lumina
.text:0000000000004190
.text:0000000000004190 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004190                 public quotearg_n_style
.text:0000000000004190 quotearg_n_style proc near              ; CODE XREF: argmatch_invalid+40↑p
.text:0000000000004190                                         ; quotearg_style+7↓j
.text:0000000000004190
.text:0000000000004190 var_48          = dword ptr -48h
.text:0000000000004190 var_44          = qword ptr -44h
.text:0000000000004190 var_3C          = qword ptr -3Ch
.text:0000000000004190 var_34          = qword ptr -34h
.text:0000000000004190 var_2C          = qword ptr -2Ch
.text:0000000000004190 var_24          = qword ptr -24h
.text:0000000000004190 var_1C          = qword ptr -1Ch
.text:0000000000004190 var_14          = dword ptr -14h
.text:0000000000004190 var_10          = qword ptr -10h
.text:0000000000004190
.text:0000000000004190 ; __unwind {
.text:0000000000004190                 sub     rsp, 48h
.text:0000000000004194                 mov     rax, rdx
.text:0000000000004197                 mov     rdx, fs:28h
.text:00000000000041A0                 mov     [rsp+48h+var_10], rdx
.text:00000000000041A5                 xor     edx, edx
.text:00000000000041A7                 cmp     esi, 0Ah
.text:00000000000041AA                 jz      short loc_4214
.text:00000000000041AC                 mov     [rsp+48h+var_48], esi
.text:00000000000041AF                 mov     rcx, rsp
.text:00000000000041B2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000041B9                 mov     rsi, rax
.text:00000000000041BC                 mov     [rsp+48h+var_44], 0
.text:00000000000041C5                 mov     [rsp+48h+var_3C], 0
.text:00000000000041CE                 mov     [rsp+48h+var_34], 0
.text:00000000000041D7                 mov     [rsp+48h+var_2C], 0
.text:00000000000041E0                 mov     [rsp+48h+var_24], 0
.text:00000000000041E9                 mov     [rsp+48h+var_1C], 0
.text:00000000000041F2                 mov     [rsp+48h+var_14], 0
.text:00000000000041FA                 call    quotearg_n_options
.text:00000000000041FF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004204                 xor     rcx, fs:28h
.text:000000000000420D                 jnz     short loc_4219
.text:000000000000420F                 add     rsp, 48h
.text:0000000000004213                 retn
.text:0000000000004214 ; ---------------------------------------------------------------------------
.text:0000000000004214
.text:0000000000004214 loc_4214:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004214                 call    _abort
.text:0000000000004219 ; ---------------------------------------------------------------------------
.text:0000000000004219
.text:0000000000004219 loc_4219:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004219                 call    ___stack_chk_fail
.text:0000000000004219 ; } // starts at 4190
.text:0000000000004219 quotearg_n_style endp
.text:0000000000004219
.text:0000000000004219 ; ---------------------------------------------------------------------------
.text:000000000000421E                 align 20h
.text:0000000000004220
.text:0000000000004220 ; =============== S U B R O U T I N E =======================================
.text:0000000000004220
.text:0000000000004220 ; Attributes: info_from_lumina
.text:0000000000004220
.text:0000000000004220 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004220                 public quotearg_n_style_mem
.text:0000000000004220 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004220
.text:0000000000004220 var_48          = dword ptr -48h
.text:0000000000004220 var_44          = qword ptr -44h
.text:0000000000004220 var_3C          = qword ptr -3Ch
.text:0000000000004220 var_34          = qword ptr -34h
.text:0000000000004220 var_2C          = qword ptr -2Ch
.text:0000000000004220 var_24          = qword ptr -24h
.text:0000000000004220 var_1C          = qword ptr -1Ch
.text:0000000000004220 var_14          = dword ptr -14h
.text:0000000000004220 var_10          = qword ptr -10h
.text:0000000000004220
.text:0000000000004220 ; __unwind {
.text:0000000000004220                 sub     rsp, 48h
.text:0000000000004224                 mov     rax, rdx
.text:0000000000004227                 mov     rdx, rcx
.text:000000000000422A                 mov     rcx, fs:28h
.text:0000000000004233                 mov     [rsp+48h+var_10], rcx
.text:0000000000004238                 xor     ecx, ecx
.text:000000000000423A                 cmp     esi, 0Ah
.text:000000000000423D                 jz      short loc_42A0
.text:000000000000423F                 mov     [rsp+48h+var_48], esi
.text:0000000000004242                 mov     rcx, rsp
.text:0000000000004245                 mov     rsi, rax
.text:0000000000004248                 mov     [rsp+48h+var_44], 0
.text:0000000000004251                 mov     [rsp+48h+var_3C], 0
.text:000000000000425A                 mov     [rsp+48h+var_34], 0
.text:0000000000004263                 mov     [rsp+48h+var_2C], 0
.text:000000000000426C                 mov     [rsp+48h+var_24], 0
.text:0000000000004275                 mov     [rsp+48h+var_1C], 0
.text:000000000000427E                 mov     [rsp+48h+var_14], 0
.text:0000000000004286                 call    quotearg_n_options
.text:000000000000428B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004290                 xor     rdx, fs:28h
.text:0000000000004299                 jnz     short loc_42A5
.text:000000000000429B                 add     rsp, 48h
.text:000000000000429F                 retn
.text:00000000000042A0 ; ---------------------------------------------------------------------------
.text:00000000000042A0
.text:00000000000042A0 loc_42A0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000042A0                 call    _abort
.text:00000000000042A5 ; ---------------------------------------------------------------------------
.text:00000000000042A5
.text:00000000000042A5 loc_42A5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000042A5                 call    ___stack_chk_fail
.text:00000000000042A5 ; } // starts at 4220
.text:00000000000042A5 quotearg_n_style_mem endp
.text:00000000000042A5
.text:00000000000042A5 ; ---------------------------------------------------------------------------
.text:00000000000042AA                 align 10h
.text:00000000000042B0
.text:00000000000042B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042B0
.text:00000000000042B0
.text:00000000000042B0                 public quotearg_style
.text:00000000000042B0 quotearg_style  proc near
.text:00000000000042B0 ; __unwind {
.text:00000000000042B0                 mov     rdx, rsi
.text:00000000000042B3                 mov     esi, edi
.text:00000000000042B5                 xor     edi, edi
.text:00000000000042B7                 jmp     quotearg_n_style
.text:00000000000042B7 ; } // starts at 42B0
.text:00000000000042B7 quotearg_style  endp
.text:00000000000042B7
.text:00000000000042B7 ; ---------------------------------------------------------------------------
.text:00000000000042BC                 align 20h
.text:00000000000042C0
.text:00000000000042C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042C0
.text:00000000000042C0
.text:00000000000042C0                 public quotearg_style_mem
.text:00000000000042C0 quotearg_style_mem proc near
.text:00000000000042C0 ; __unwind {
.text:00000000000042C0                 mov     rcx, rdx
.text:00000000000042C3                 mov     rdx, rsi
.text:00000000000042C6                 mov     esi, edi
.text:00000000000042C8                 xor     edi, edi
.text:00000000000042CA                 jmp     quotearg_n_style_mem
.text:00000000000042CA ; } // starts at 42C0
.text:00000000000042CA quotearg_style_mem endp
.text:00000000000042CA
.text:00000000000042CA ; ---------------------------------------------------------------------------
.text:00000000000042CF                 align 10h
.text:00000000000042D0
.text:00000000000042D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042D0
.text:00000000000042D0 ; Attributes: info_from_lumina
.text:00000000000042D0
.text:00000000000042D0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:00000000000042D0                 public quotearg_char_mem
.text:00000000000042D0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:00000000000042D0                                         ; quotearg_colon+C↓j ...
.text:00000000000042D0
.text:00000000000042D0 var_48          = xmmword ptr -48h
.text:00000000000042D0 var_38          = xmmword ptr -38h
.text:00000000000042D0 var_28          = xmmword ptr -28h
.text:00000000000042D0 var_18          = qword ptr -18h
.text:00000000000042D0 var_10          = qword ptr -10h
.text:00000000000042D0
.text:00000000000042D0 ; __unwind {
.text:00000000000042D0                 sub     rsp, 48h
.text:00000000000042D4                 mov     ecx, edx
.text:00000000000042D6                 mov     rax, fs:28h
.text:00000000000042DF                 mov     [rsp+48h+var_10], rax
.text:00000000000042E4                 xor     eax, eax
.text:00000000000042E6                 mov     rax, cs:qword_208250
.text:00000000000042ED                 mov     r8, rsp
.text:00000000000042F0                 and     ecx, 1Fh
.text:00000000000042F3                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000042FB                 mov     [rsp+48h+var_18], rax
.text:0000000000004300                 mov     eax, edx
.text:0000000000004302                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004306                 shr     al, 5
.text:0000000000004309                 movzx   eax, al
.text:000000000000430C                 lea     r9, [r8+rax*4+8]
.text:0000000000004311                 movdqa  xmm0, cs:xmmword_208230
.text:0000000000004319                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000431E                 movdqa  xmm0, cs:xmmword_208240
.text:0000000000004326                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000432B                 mov     edx, [r9]
.text:000000000000432E                 mov     eax, edx
.text:0000000000004330                 shr     eax, cl
.text:0000000000004332                 not     eax
.text:0000000000004334                 and     eax, 1
.text:0000000000004337                 shl     eax, cl
.text:0000000000004339                 mov     rcx, r8
.text:000000000000433C                 xor     eax, edx
.text:000000000000433E                 mov     rdx, rsi
.text:0000000000004341                 mov     rsi, rdi
.text:0000000000004344                 mov     [r9], eax
.text:0000000000004347                 xor     edi, edi
.text:0000000000004349                 call    quotearg_n_options
.text:000000000000434E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000004353                 xor     rsi, fs:28h
.text:000000000000435C                 jnz     short loc_4363
.text:000000000000435E                 add     rsp, 48h
.text:0000000000004362                 retn
.text:0000000000004363 ; ---------------------------------------------------------------------------
.text:0000000000004363
.text:0000000000004363 loc_4363:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000004363                 call    ___stack_chk_fail
.text:0000000000004363 ; } // starts at 42D0
.text:0000000000004363 quotearg_char_mem endp
.text:0000000000004363
.text:0000000000004363 ; ---------------------------------------------------------------------------
.text:0000000000004368                 align 10h
.text:0000000000004370
.text:0000000000004370 ; =============== S U B R O U T I N E =======================================
.text:0000000000004370
.text:0000000000004370
.text:0000000000004370                 public quotearg_char
.text:0000000000004370 quotearg_char   proc near
.text:0000000000004370 ; __unwind {
.text:0000000000004370                 movsx   edx, sil
.text:0000000000004374                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000437B                 jmp     quotearg_char_mem
.text:000000000000437B ; } // starts at 4370
.text:000000000000437B quotearg_char   endp
.text:000000000000437B
.text:0000000000004380
.text:0000000000004380 ; =============== S U B R O U T I N E =======================================
.text:0000000000004380
.text:0000000000004380
.text:0000000000004380                 public quotearg_colon
.text:0000000000004380 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000004380 ; __unwind {
.text:0000000000004380                 mov     edx, 3Ah ; ':'
.text:0000000000004385                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000438C                 jmp     quotearg_char_mem
.text:000000000000438C ; } // starts at 4380
.text:000000000000438C quotearg_colon  endp
.text:000000000000438C
.text:000000000000438C ; ---------------------------------------------------------------------------
.text:0000000000004391                 align 20h
.text:00000000000043A0
.text:00000000000043A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043A0
.text:00000000000043A0
.text:00000000000043A0                 public quotearg_colon_mem
.text:00000000000043A0 quotearg_colon_mem proc near
.text:00000000000043A0 ; __unwind {
.text:00000000000043A0                 mov     edx, 3Ah ; ':'
.text:00000000000043A5                 jmp     quotearg_char_mem
.text:00000000000043A5 ; } // starts at 43A0
.text:00000000000043A5 quotearg_colon_mem endp
.text:00000000000043A5
.text:00000000000043A5 ; ---------------------------------------------------------------------------
.text:00000000000043AA                 align 10h
.text:00000000000043B0
.text:00000000000043B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043B0
.text:00000000000043B0 ; Attributes: info_from_lumina
.text:00000000000043B0
.text:00000000000043B0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:00000000000043B0                 public quotearg_n_style_colon
.text:00000000000043B0 quotearg_n_style_colon proc near        ; CODE XREF: tee_files+12F↑p
.text:00000000000043B0                                         ; tee_files+223↑p ...
.text:00000000000043B0
.text:00000000000043B0 var_48          = dword ptr -48h
.text:00000000000043B0 var_44          = qword ptr -44h
.text:00000000000043B0 var_3C          = qword ptr -3Ch
.text:00000000000043B0 var_34          = qword ptr -34h
.text:00000000000043B0 var_2C          = qword ptr -2Ch
.text:00000000000043B0 var_24          = qword ptr -24h
.text:00000000000043B0 var_1C          = qword ptr -1Ch
.text:00000000000043B0 var_14          = dword ptr -14h
.text:00000000000043B0 var_10          = qword ptr -10h
.text:00000000000043B0
.text:00000000000043B0 ; __unwind {
.text:00000000000043B0                 sub     rsp, 48h
.text:00000000000043B4                 mov     rax, rdx
.text:00000000000043B7                 mov     rdx, fs:28h
.text:00000000000043C0                 mov     [rsp+48h+var_10], rdx
.text:00000000000043C5                 xor     edx, edx
.text:00000000000043C7                 cmp     esi, 0Ah
.text:00000000000043CA                 jz      short loc_4434
.text:00000000000043CC                 mov     [rsp+48h+var_48], esi
.text:00000000000043CF                 mov     rcx, rsp
.text:00000000000043D2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000043D9                 mov     rsi, rax
.text:00000000000043DC                 mov     [rsp+48h+var_44], 0
.text:00000000000043E5                 mov     [rsp+48h+var_3C], 4000000h
.text:00000000000043EE                 mov     [rsp+48h+var_34], 0
.text:00000000000043F7                 mov     [rsp+48h+var_2C], 0
.text:0000000000004400                 mov     [rsp+48h+var_24], 0
.text:0000000000004409                 mov     [rsp+48h+var_1C], 0
.text:0000000000004412                 mov     [rsp+48h+var_14], 0
.text:000000000000441A                 call    quotearg_n_options
.text:000000000000441F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004424                 xor     rcx, fs:28h
.text:000000000000442D                 jnz     short loc_4439
.text:000000000000442F                 add     rsp, 48h
.text:0000000000004433                 retn
.text:0000000000004434 ; ---------------------------------------------------------------------------
.text:0000000000004434
.text:0000000000004434 loc_4434:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004434                 call    _abort
.text:0000000000004439 ; ---------------------------------------------------------------------------
.text:0000000000004439
.text:0000000000004439 loc_4439:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004439                 call    ___stack_chk_fail
.text:0000000000004439 ; } // starts at 43B0
.text:0000000000004439 quotearg_n_style_colon endp
.text:0000000000004439
.text:0000000000004439 ; ---------------------------------------------------------------------------
.text:000000000000443E                 align 20h
.text:0000000000004440
.text:0000000000004440 ; =============== S U B R O U T I N E =======================================
.text:0000000000004440
.text:0000000000004440 ; Attributes: info_from_lumina
.text:0000000000004440
.text:0000000000004440 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004440                 public quotearg_n_custom_mem
.text:0000000000004440 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004440                                         ; quotearg_custom+12↓j ...
.text:0000000000004440
.text:0000000000004440 var_48          = xmmword ptr -48h
.text:0000000000004440 var_38          = xmmword ptr -38h
.text:0000000000004440 var_28          = xmmword ptr -28h
.text:0000000000004440 var_18          = qword ptr -18h
.text:0000000000004440 var_10          = qword ptr -10h
.text:0000000000004440
.text:0000000000004440 ; __unwind {
.text:0000000000004440                 sub     rsp, 48h
.text:0000000000004444                 mov     r9, rcx
.text:0000000000004447                 mov     rcx, cs:qword_208250
.text:000000000000444E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004456                 mov     rax, fs:28h
.text:000000000000445F                 mov     [rsp+48h+var_10], rax
.text:0000000000004464                 xor     eax, eax
.text:0000000000004466                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000446A                 test    rsi, rsi
.text:000000000000446D                 mov     [rsp+48h+var_18], rcx
.text:0000000000004472                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000004479                 movdqa  xmm0, cs:xmmword_208230
.text:0000000000004481                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004486                 movdqa  xmm0, cs:xmmword_208240
.text:000000000000448E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004493                 jz      short loc_44C7
.text:0000000000004495                 test    rdx, rdx
.text:0000000000004498                 jz      short loc_44C7
.text:000000000000449A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000449F                 mov     [rsp+48h+var_18], rdx
.text:00000000000044A4                 mov     rcx, rsp
.text:00000000000044A7                 mov     rdx, r8
.text:00000000000044AA                 mov     rsi, r9
.text:00000000000044AD                 call    quotearg_n_options
.text:00000000000044B2                 mov     rdi, [rsp+48h+var_10]
.text:00000000000044B7                 xor     rdi, fs:28h
.text:00000000000044C0                 jnz     short loc_44CC
.text:00000000000044C2                 add     rsp, 48h
.text:00000000000044C6                 retn
.text:00000000000044C7 ; ---------------------------------------------------------------------------
.text:00000000000044C7
.text:00000000000044C7 loc_44C7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:00000000000044C7                                         ; quotearg_n_custom_mem+58↑j
.text:00000000000044C7                 call    _abort
.text:00000000000044CC ; ---------------------------------------------------------------------------
.text:00000000000044CC
.text:00000000000044CC loc_44CC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:00000000000044CC                 call    ___stack_chk_fail
.text:00000000000044CC ; } // starts at 4440
.text:00000000000044CC quotearg_n_custom_mem endp
.text:00000000000044CC
.text:00000000000044CC ; ---------------------------------------------------------------------------
.text:00000000000044D1                 align 20h
.text:00000000000044E0
.text:00000000000044E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044E0
.text:00000000000044E0
.text:00000000000044E0                 public quotearg_n_custom
.text:00000000000044E0 quotearg_n_custom proc near
.text:00000000000044E0 ; __unwind {
.text:00000000000044E0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000044E7                 jmp     quotearg_n_custom_mem
.text:00000000000044E7 ; } // starts at 44E0
.text:00000000000044E7 quotearg_n_custom endp
.text:00000000000044E7
.text:00000000000044E7 ; ---------------------------------------------------------------------------
.text:00000000000044EC                 align 10h
.text:00000000000044F0
.text:00000000000044F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044F0
.text:00000000000044F0
.text:00000000000044F0                 public quotearg_custom
.text:00000000000044F0 quotearg_custom proc near
.text:00000000000044F0 ; __unwind {
.text:00000000000044F0                 mov     rcx, rdx
.text:00000000000044F3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000044FA                 mov     rdx, rsi
.text:00000000000044FD                 mov     rsi, rdi
.text:0000000000004500                 xor     edi, edi
.text:0000000000004502                 jmp     quotearg_n_custom_mem
.text:0000000000004502 ; } // starts at 44F0
.text:0000000000004502 quotearg_custom endp
.text:0000000000004502
.text:0000000000004502 ; ---------------------------------------------------------------------------
.text:0000000000004507                 align 10h
.text:0000000000004510
.text:0000000000004510 ; =============== S U B R O U T I N E =======================================
.text:0000000000004510
.text:0000000000004510
.text:0000000000004510                 public quotearg_custom_mem
.text:0000000000004510 quotearg_custom_mem proc near
.text:0000000000004510 ; __unwind {
.text:0000000000004510                 mov     r8, rcx
.text:0000000000004513                 mov     rcx, rdx
.text:0000000000004516                 mov     rdx, rsi
.text:0000000000004519                 mov     rsi, rdi
.text:000000000000451C                 xor     edi, edi
.text:000000000000451E                 jmp     quotearg_n_custom_mem
.text:000000000000451E ; } // starts at 4510
.text:000000000000451E quotearg_custom_mem endp
.text:000000000000451E
.text:000000000000451E ; ---------------------------------------------------------------------------
.text:0000000000004523                 align 10h
.text:0000000000004530
.text:0000000000004530 ; =============== S U B R O U T I N E =======================================
.text:0000000000004530
.text:0000000000004530
.text:0000000000004530                 public quote_n_mem
.text:0000000000004530 quote_n_mem     proc near
.text:0000000000004530 ; __unwind {
.text:0000000000004530                 lea     rcx, quote_quoting_options
.text:0000000000004537                 jmp     quotearg_n_options
.text:0000000000004537 ; } // starts at 4530
.text:0000000000004537 quote_n_mem     endp
.text:0000000000004537
.text:0000000000004537 ; ---------------------------------------------------------------------------
.text:000000000000453C                 align 20h
.text:0000000000004540
.text:0000000000004540 ; =============== S U B R O U T I N E =======================================
.text:0000000000004540
.text:0000000000004540
.text:0000000000004540                 public quote_mem
.text:0000000000004540 quote_mem       proc near
.text:0000000000004540 ; __unwind {
.text:0000000000004540                 lea     rcx, quote_quoting_options
.text:0000000000004547                 mov     rdx, rsi
.text:000000000000454A                 mov     rsi, rdi
.text:000000000000454D                 xor     edi, edi
.text:000000000000454F                 jmp     quotearg_n_options
.text:000000000000454F ; } // starts at 4540
.text:000000000000454F quote_mem       endp
.text:000000000000454F
.text:000000000000454F ; ---------------------------------------------------------------------------
.text:0000000000004554                 align 20h
.text:0000000000004560
.text:0000000000004560 ; =============== S U B R O U T I N E =======================================
.text:0000000000004560
.text:0000000000004560
.text:0000000000004560                 public quote_n
.text:0000000000004560 quote_n         proc near               ; CODE XREF: argmatch_invalid+2E↑p
.text:0000000000004560 ; __unwind {
.text:0000000000004560                 lea     rcx, quote_quoting_options
.text:0000000000004567                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000456E                 jmp     quotearg_n_options
.text:000000000000456E ; } // starts at 4560
.text:000000000000456E quote_n         endp
.text:000000000000456E
.text:000000000000456E ; ---------------------------------------------------------------------------
.text:0000000000004573                 align 20h
.text:0000000000004580
.text:0000000000004580 ; =============== S U B R O U T I N E =======================================
.text:0000000000004580
.text:0000000000004580
.text:0000000000004580                 public quote
.text:0000000000004580 quote           proc near               ; CODE XREF: argmatch_valid+5A↑p
.text:0000000000004580                                         ; argmatch_valid+A9↑p
.text:0000000000004580 ; __unwind {
.text:0000000000004580                 lea     rcx, quote_quoting_options
.text:0000000000004587                 mov     rsi, rdi
.text:000000000000458A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004591                 xor     edi, edi
.text:0000000000004593                 jmp     quotearg_n_options
.text:0000000000004593 ; } // starts at 4580
.text:0000000000004593 quote           endp
.text:0000000000004593
.text:0000000000004593 ; ---------------------------------------------------------------------------
.text:0000000000004598                 align 20h
.text:00000000000045A0
.text:00000000000045A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045A0
.text:00000000000045A0
.text:00000000000045A0                 public dup_safer
.text:00000000000045A0 dup_safer       proc near               ; CODE XREF: fopen_safer+32↑p
.text:00000000000045A0 ; __unwind {
.text:00000000000045A0                 mov     edx, 3
.text:00000000000045A5                 xor     esi, esi
.text:00000000000045A7                 xor     eax, eax
.text:00000000000045A9                 jmp     rpl_fcntl
.text:00000000000045A9 ; } // starts at 45A0
.text:00000000000045A9 dup_safer       endp
.text:00000000000045A9
.text:00000000000045A9 ; ---------------------------------------------------------------------------
.text:00000000000045AE                 align 10h
.text:00000000000045B0
.text:00000000000045B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045B0
.text:00000000000045B0
.text:00000000000045B0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000045B0                 public version_etc_arn
.text:00000000000045B0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_49EB↓j
.text:00000000000045B0                                         ; version_etc_va:loc_4A3B↓p ...
.text:00000000000045B0
.text:00000000000045B0 var_58          = qword ptr -58h
.text:00000000000045B0 var_50          = qword ptr -50h
.text:00000000000045B0 var_48          = qword ptr -48h
.text:00000000000045B0 var_40          = qword ptr -40h
.text:00000000000045B0
.text:00000000000045B0 ; __unwind {
.text:00000000000045B0                 push    r15
.text:00000000000045B2                 push    r14
.text:00000000000045B4                 push    r13
.text:00000000000045B6                 push    r12
.text:00000000000045B8                 mov     r12, r9
.text:00000000000045BB                 push    rbp
.text:00000000000045BC                 push    rbx
.text:00000000000045BD                 mov     rbp, rdi
.text:00000000000045C0                 mov     rbx, r8
.text:00000000000045C3                 sub     rsp, 28h
.text:00000000000045C7                 test    rsi, rsi
.text:00000000000045CA                 jz      loc_46E8
.text:00000000000045D0                 mov     r8, rdx
.text:00000000000045D3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:00000000000045DA                 mov     r9, rcx
.text:00000000000045DD                 xor     eax, eax
.text:00000000000045DF                 mov     rcx, rsi
.text:00000000000045E2                 mov     esi, 1
.text:00000000000045E7                 call    ___fprintf_chk
.text:00000000000045EC
.text:00000000000045EC loc_45EC:                               ; CODE XREF: version_etc_arn+151↓j
.text:00000000000045EC                 lea     rsi, aC_0       ; "(C)"
.text:00000000000045F3                 xor     edi, edi        ; domainname
.text:00000000000045F5                 mov     edx, 5          ; category
.text:00000000000045FA                 call    _dcgettext
.text:00000000000045FF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004606                 mov     rcx, rax
.text:0000000000004609                 mov     r8d, 7E3h
.text:000000000000460F                 mov     esi, 1
.text:0000000000004614                 mov     rdi, rbp
.text:0000000000004617                 xor     eax, eax
.text:0000000000004619                 call    ___fprintf_chk
.text:000000000000461E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004625                 xor     edi, edi        ; domainname
.text:0000000000004627                 mov     edx, 5          ; category
.text:000000000000462C                 call    _dcgettext
.text:0000000000004631                 mov     rsi, rbp        ; stream
.text:0000000000004634                 mov     rdi, rax        ; s
.text:0000000000004637                 call    _fputs_unlocked
.text:000000000000463C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004640                 ja      def_4654        ; jumptable 0000000000004654 default case
.text:0000000000004646                 lea     rdx, jpt_4654
.text:000000000000464D                 movsxd  rax, ds:(jpt_4654 - 6328h)[rdx+r12*4]
.text:0000000000004651                 add     rax, rdx
.text:0000000000004654                 jmp     rax             ; switch jump
.text:0000000000004654 ; ---------------------------------------------------------------------------
.text:0000000000004656                 align 20h
.text:0000000000004660
.text:0000000000004660 loc_4660:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004660                                         ; DATA XREF: .rodata:jpt_4654↓o
.text:0000000000004660                 mov     r9, [rbx+38h]   ; jumptable 0000000000004654 case 8
.text:0000000000004664                 mov     rax, [rbx+10h]
.text:0000000000004668                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000466F                 mov     r8, [rbx+8]
.text:0000000000004673                 mov     edx, 5          ; category
.text:0000000000004678                 xor     edi, edi        ; domainname
.text:000000000000467A                 mov     r13, [rbx+30h]
.text:000000000000467E                 mov     r12, [rbx+28h]
.text:0000000000004682                 mov     [rsp+58h+var_48], r9
.text:0000000000004687                 mov     r15, [rbx+20h]
.text:000000000000468B                 mov     r14, [rbx+18h]
.text:000000000000468F                 mov     [rsp+58h+var_58], rax
.text:0000000000004693                 mov     [rsp+58h+var_50], r8
.text:0000000000004698                 mov     rbx, [rbx]
.text:000000000000469B                 call    _dcgettext
.text:00000000000046A0                 sub     rsp, 8
.text:00000000000046A4
.text:00000000000046A4 loc_46A4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:00000000000046A4                 mov     r9, [rsp+60h+var_48]
.text:00000000000046A9                 mov     rdx, rax
.text:00000000000046AC                 mov     rcx, rbx
.text:00000000000046AF                 mov     esi, 1
.text:00000000000046B4                 mov     rdi, rbp
.text:00000000000046B7                 xor     eax, eax
.text:00000000000046B9                 push    r9
.text:00000000000046BB                 push    r13
.text:00000000000046BD                 push    r12
.text:00000000000046BF                 push    r15
.text:00000000000046C1                 push    r14
.text:00000000000046C3                 mov     r9, [rsp+88h+var_58]
.text:00000000000046C8                 mov     r8, [rsp+88h+var_50]
.text:00000000000046CD                 call    ___fprintf_chk
.text:00000000000046D2                 add     rsp, 30h
.text:00000000000046D6
.text:00000000000046D6 loc_46D6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000046D6                                         ; DATA XREF: .rodata:jpt_4654↓o
.text:00000000000046D6                 add     rsp, 28h        ; jumptable 0000000000004654 case 0
.text:00000000000046DA                 pop     rbx
.text:00000000000046DB                 pop     rbp
.text:00000000000046DC                 pop     r12
.text:00000000000046DE                 pop     r13
.text:00000000000046E0                 pop     r14
.text:00000000000046E2                 pop     r15
.text:00000000000046E4                 retn
.text:00000000000046E4 ; ---------------------------------------------------------------------------
.text:00000000000046E5                 align 8
.text:00000000000046E8
.text:00000000000046E8 loc_46E8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:00000000000046E8                 mov     r8, rcx
.text:00000000000046EB                 mov     rcx, rdx
.text:00000000000046EE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:00000000000046F5                 mov     esi, 1
.text:00000000000046FA                 xor     eax, eax
.text:00000000000046FC                 call    ___fprintf_chk
.text:0000000000004701                 jmp     loc_45EC
.text:0000000000004701 ; ---------------------------------------------------------------------------
.text:0000000000004706                 align 10h
.text:0000000000004710
.text:0000000000004710 loc_4710:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004710                                         ; DATA XREF: .rodata:jpt_4654↓o
.text:0000000000004710                 mov     r10, [rbx+40h]  ; jumptable 0000000000004654 case 9
.text:0000000000004714                 mov     r9, [rbx+38h]
.text:0000000000004718                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000471F                 mov     rax, [rbx+10h]
.text:0000000000004723                 mov     r8, [rbx+8]
.text:0000000000004727                 mov     edx, 5          ; category
.text:000000000000472C                 mov     r13, [rbx+30h]
.text:0000000000004730                 mov     r12, [rbx+28h]
.text:0000000000004734                 mov     r15, [rbx+20h]
.text:0000000000004738                 mov     r14, [rbx+18h]
.text:000000000000473C                 mov     rbx, [rbx]
.text:000000000000473F                 mov     [rsp+58h+var_40], r10
.text:0000000000004744                 mov     [rsp+58h+var_48], r9
.text:0000000000004749                 mov     [rsp+58h+var_58], rax
.text:000000000000474D                 mov     [rsp+58h+var_50], r8
.text:0000000000004752
.text:0000000000004752 loc_4752:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004752                 xor     edi, edi        ; domainname
.text:0000000000004754                 call    _dcgettext
.text:0000000000004759                 mov     r10, [rsp+58h+var_40]
.text:000000000000475E                 push    r10
.text:0000000000004760                 jmp     loc_46A4
.text:0000000000004760 ; ---------------------------------------------------------------------------
.text:0000000000004765                 align 8
.text:0000000000004768
.text:0000000000004768 loc_4768:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004768                                         ; DATA XREF: .rodata:jpt_4654↓o
.text:0000000000004768                 mov     rbx, [rbx]      ; jumptable 0000000000004654 case 1
.text:000000000000476B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000004772                 mov     edx, 5          ; category
.text:0000000000004777                 xor     edi, edi        ; domainname
.text:0000000000004779                 call    _dcgettext
.text:000000000000477E                 add     rsp, 28h
.text:0000000000004782                 mov     rcx, rbx
.text:0000000000004785                 mov     rdi, rbp
.text:0000000000004788                 pop     rbx
.text:0000000000004789                 pop     rbp
.text:000000000000478A                 pop     r12
.text:000000000000478C                 pop     r13
.text:000000000000478E                 pop     r14
.text:0000000000004790                 pop     r15
.text:0000000000004792                 mov     rdx, rax
.text:0000000000004795                 mov     esi, 1
.text:000000000000479A                 xor     eax, eax
.text:000000000000479C                 jmp     ___fprintf_chk
.text:000000000000479C ; ---------------------------------------------------------------------------
.text:00000000000047A1                 align 8
.text:00000000000047A8
.text:00000000000047A8 loc_47A8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000047A8                                         ; DATA XREF: .rodata:jpt_4654↓o
.text:00000000000047A8                 mov     r12, [rbx+8]    ; jumptable 0000000000004654 case 2
.text:00000000000047AC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000047B3                 mov     rbx, [rbx]
.text:00000000000047B6                 mov     edx, 5          ; category
.text:00000000000047BB                 xor     edi, edi        ; domainname
.text:00000000000047BD                 call    _dcgettext
.text:00000000000047C2                 add     rsp, 28h
.text:00000000000047C6                 mov     r8, r12
.text:00000000000047C9                 mov     rcx, rbx
.text:00000000000047CC                 mov     rdi, rbp
.text:00000000000047CF                 mov     rdx, rax
.text:00000000000047D2                 mov     esi, 1
.text:00000000000047D7                 pop     rbx
.text:00000000000047D8                 pop     rbp
.text:00000000000047D9                 pop     r12
.text:00000000000047DB                 pop     r13
.text:00000000000047DD                 pop     r14
.text:00000000000047DF                 pop     r15
.text:00000000000047E1                 xor     eax, eax
.text:00000000000047E3                 jmp     ___fprintf_chk
.text:00000000000047E3 ; ---------------------------------------------------------------------------
.text:00000000000047E8                 align 10h
.text:00000000000047F0
.text:00000000000047F0 loc_47F0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000047F0                                         ; DATA XREF: .rodata:jpt_4654↓o
.text:00000000000047F0                 mov     r13, [rbx+10h]  ; jumptable 0000000000004654 case 3
.text:00000000000047F4                 mov     r12, [rbx+8]
.text:00000000000047F8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000047FF                 mov     rbx, [rbx]
.text:0000000000004802                 mov     edx, 5          ; category
.text:0000000000004807                 xor     edi, edi        ; domainname
.text:0000000000004809                 call    _dcgettext
.text:000000000000480E                 add     rsp, 28h
.text:0000000000004812                 mov     r9, r13
.text:0000000000004815                 mov     r8, r12
.text:0000000000004818                 mov     rcx, rbx
.text:000000000000481B                 mov     rdi, rbp
.text:000000000000481E                 mov     rdx, rax
.text:0000000000004821                 pop     rbx
.text:0000000000004822                 pop     rbp
.text:0000000000004823                 pop     r12
.text:0000000000004825                 pop     r13
.text:0000000000004827                 pop     r14
.text:0000000000004829                 pop     r15
.text:000000000000482B                 mov     esi, 1
.text:0000000000004830                 xor     eax, eax
.text:0000000000004832                 jmp     ___fprintf_chk
.text:0000000000004832 ; ---------------------------------------------------------------------------
.text:0000000000004837                 align 20h
.text:0000000000004840
.text:0000000000004840 loc_4840:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004840                                         ; DATA XREF: .rodata:jpt_4654↓o
.text:0000000000004840                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004654 case 4
.text:0000000000004847                 mov     edx, 5          ; category
.text:000000000000484C                 xor     edi, edi        ; domainname
.text:000000000000484E                 mov     r14, [rbx+18h]
.text:0000000000004852                 mov     r13, [rbx+10h]
.text:0000000000004856                 mov     r12, [rbx+8]
.text:000000000000485A                 mov     rbx, [rbx]
.text:000000000000485D                 call    _dcgettext
.text:0000000000004862                 sub     rsp, 8
.text:0000000000004866
.text:0000000000004866 loc_4866:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000004866                 push    r14
.text:0000000000004868                 mov     rdx, rax
.text:000000000000486B                 mov     r9, r13
.text:000000000000486E                 mov     r8, r12
.text:0000000000004871                 mov     rcx, rbx
.text:0000000000004874                 mov     rdi, rbp
.text:0000000000004877                 mov     esi, 1
.text:000000000000487C                 xor     eax, eax
.text:000000000000487E                 call    ___fprintf_chk
.text:0000000000004883                 pop     rax
.text:0000000000004884                 pop     rdx
.text:0000000000004885                 add     rsp, 28h
.text:0000000000004889                 pop     rbx
.text:000000000000488A                 pop     rbp
.text:000000000000488B                 pop     r12
.text:000000000000488D                 pop     r13
.text:000000000000488F                 pop     r14
.text:0000000000004891                 pop     r15
.text:0000000000004893                 retn
.text:0000000000004893 ; ---------------------------------------------------------------------------
.text:0000000000004894                 align 8
.text:0000000000004898
.text:0000000000004898 loc_4898:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004898                                         ; DATA XREF: .rodata:jpt_4654↓o
.text:0000000000004898                 mov     r15, [rbx+20h]  ; jumptable 0000000000004654 case 5
.text:000000000000489C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:00000000000048A3                 mov     edx, 5          ; category
.text:00000000000048A8                 xor     edi, edi        ; domainname
.text:00000000000048AA                 mov     r14, [rbx+18h]
.text:00000000000048AE                 mov     r13, [rbx+10h]
.text:00000000000048B2                 mov     r12, [rbx+8]
.text:00000000000048B6                 mov     rbx, [rbx]
.text:00000000000048B9                 call    _dcgettext
.text:00000000000048BE                 push    r15
.text:00000000000048C0                 jmp     short loc_4866
.text:00000000000048C0 ; ---------------------------------------------------------------------------
.text:00000000000048C2                 align 8
.text:00000000000048C8
.text:00000000000048C8 loc_48C8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000048C8                                         ; DATA XREF: .rodata:jpt_4654↓o
.text:00000000000048C8                 mov     r8, [rbx+8]     ; jumptable 0000000000004654 case 6
.text:00000000000048CC                 mov     r12, [rbx+28h]
.text:00000000000048D0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:00000000000048D7                 mov     r15, [rbx+20h]
.text:00000000000048DB                 mov     r14, [rbx+18h]
.text:00000000000048DF                 mov     edx, 5          ; category
.text:00000000000048E4                 mov     r13, [rbx+10h]
.text:00000000000048E8                 xor     edi, edi        ; domainname
.text:00000000000048EA                 mov     rbx, [rbx]
.text:00000000000048ED                 mov     [rsp+58h+var_58], r8
.text:00000000000048F1                 call    _dcgettext
.text:00000000000048F6                 sub     rsp, 8
.text:00000000000048FA                 mov     r9, r13
.text:00000000000048FD                 push    r12
.text:00000000000048FF                 push    r15
.text:0000000000004901                 push    r14
.text:0000000000004903
.text:0000000000004903 loc_4903:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004903                 mov     r8, [rsp+78h+var_58]
.text:0000000000004908                 mov     rcx, rbx
.text:000000000000490B                 mov     rdx, rax
.text:000000000000490E                 mov     rdi, rbp
.text:0000000000004911                 mov     esi, 1
.text:0000000000004916                 xor     eax, eax
.text:0000000000004918                 call    ___fprintf_chk
.text:000000000000491D                 add     rsp, 20h
.text:0000000000004921                 add     rsp, 28h
.text:0000000000004925                 pop     rbx
.text:0000000000004926                 pop     rbp
.text:0000000000004927                 pop     r12
.text:0000000000004929                 pop     r13
.text:000000000000492B                 pop     r14
.text:000000000000492D                 pop     r15
.text:000000000000492F                 retn
.text:0000000000004930 ; ---------------------------------------------------------------------------
.text:0000000000004930
.text:0000000000004930 loc_4930:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004930                                         ; DATA XREF: .rodata:jpt_4654↓o
.text:0000000000004930                 mov     r9, [rbx+10h]   ; jumptable 0000000000004654 case 7
.text:0000000000004934                 mov     r13, [rbx+30h]
.text:0000000000004938                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000493F                 mov     r12, [rbx+28h]
.text:0000000000004943                 mov     r15, [rbx+20h]
.text:0000000000004947                 mov     edx, 5          ; category
.text:000000000000494C                 mov     r14, [rbx+18h]
.text:0000000000004950                 mov     r8, [rbx+8]
.text:0000000000004954                 xor     edi, edi        ; domainname
.text:0000000000004956                 mov     [rsp+58h+var_50], r9
.text:000000000000495B                 mov     rbx, [rbx]
.text:000000000000495E                 mov     [rsp+58h+var_58], r8
.text:0000000000004962                 call    _dcgettext
.text:0000000000004967                 push    r13
.text:0000000000004969                 push    r12
.text:000000000000496B                 push    r15
.text:000000000000496D                 push    r14
.text:000000000000496F                 mov     r9, [rsp+78h+var_50]
.text:0000000000004974                 jmp     short loc_4903
.text:0000000000004974 ; ---------------------------------------------------------------------------
.text:0000000000004976                 align 20h
.text:0000000000004980
.text:0000000000004980 def_4654:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004980                 mov     r10, [rbx+40h]  ; jumptable 0000000000004654 default case
.text:0000000000004984                 mov     r9, [rbx+38h]
.text:0000000000004988                 mov     edx, 5
.text:000000000000498D                 mov     rax, [rbx+10h]
.text:0000000000004991                 mov     r8, [rbx+8]
.text:0000000000004995                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000499C                 mov     r13, [rbx+30h]
.text:00000000000049A0                 mov     r12, [rbx+28h]
.text:00000000000049A4                 mov     r15, [rbx+20h]
.text:00000000000049A8                 mov     r14, [rbx+18h]
.text:00000000000049AC                 mov     [rsp+58h+var_40], r10
.text:00000000000049B1                 mov     [rsp+58h+var_48], r9
.text:00000000000049B6                 mov     [rsp+58h+var_58], rax
.text:00000000000049BA                 mov     [rsp+58h+var_50], r8
.text:00000000000049BF                 mov     rbx, [rbx]
.text:00000000000049C2                 jmp     loc_4752
.text:00000000000049C2 ; } // starts at 45B0
.text:00000000000049C2 version_etc_arn endp
.text:00000000000049C2
.text:00000000000049C2 ; ---------------------------------------------------------------------------
.text:00000000000049C7                 align 10h
.text:00000000000049D0
.text:00000000000049D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049D0
.text:00000000000049D0 ; Attributes: info_from_lumina
.text:00000000000049D0
.text:00000000000049D0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:00000000000049D0                 public version_etc_ar
.text:00000000000049D0 version_etc_ar  proc near
.text:00000000000049D0 ; __unwind {
.text:00000000000049D0                 xor     r9d, r9d
.text:00000000000049D3                 cmp     qword ptr [r8], 0
.text:00000000000049D7                 jz      short loc_49EB
.text:00000000000049D9                 nop     dword ptr [rax+00000000h]
.text:00000000000049E0
.text:00000000000049E0 loc_49E0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000049E0                 add     r9, 1
.text:00000000000049E4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000049E9                 jnz     short loc_49E0
.text:00000000000049EB
.text:00000000000049EB loc_49EB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000049EB                 jmp     version_etc_arn
.text:00000000000049EB ; } // starts at 49D0
.text:00000000000049EB version_etc_ar  endp
.text:00000000000049EB
.text:00000000000049F0
.text:00000000000049F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049F0
.text:00000000000049F0 ; Attributes: info_from_lumina
.text:00000000000049F0
.text:00000000000049F0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000049F0                 public version_etc_va
.text:00000000000049F0 version_etc_va  proc near
.text:00000000000049F0
.text:00000000000049F0 authtab         = qword ptr -68h
.text:00000000000049F0 var_10          = qword ptr -10h
.text:00000000000049F0
.text:00000000000049F0 ; __unwind {
.text:00000000000049F0                 sub     rsp, 68h
.text:00000000000049F4                 mov     r10, r8
.text:00000000000049F7                 xor     r9d, r9d
.text:00000000000049FA                 mov     rax, fs:28h
.text:0000000000004A03                 mov     [rsp+68h+var_10], rax
.text:0000000000004A08                 xor     eax, eax
.text:0000000000004A0A                 mov     r8, rsp
.text:0000000000004A0D                 nop     dword ptr [rax]
.text:0000000000004A10
.text:0000000000004A10 loc_4A10:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004A10                 mov     eax, [r10]
.text:0000000000004A13                 cmp     eax, 2Fh ; '/'
.text:0000000000004A16                 ja      short loc_4A5A
.text:0000000000004A18                 mov     r11d, eax
.text:0000000000004A1B                 add     r11, [r10+10h]
.text:0000000000004A1F                 add     eax, 8
.text:0000000000004A22                 mov     [r10], eax
.text:0000000000004A25
.text:0000000000004A25 loc_4A25:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004A25                 mov     rax, [r11]
.text:0000000000004A28                 test    rax, rax
.text:0000000000004A2B                 mov     [r8+r9*8], rax
.text:0000000000004A2F                 jz      short loc_4A3B
.text:0000000000004A31                 add     r9, 1
.text:0000000000004A35                 cmp     r9, 0Ah
.text:0000000000004A39                 jnz     short loc_4A10
.text:0000000000004A3B
.text:0000000000004A3B loc_4A3B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000004A3B                 call    version_etc_arn
.text:0000000000004A40                 mov     rax, [rsp+68h+var_10]
.text:0000000000004A45                 xor     rax, fs:28h
.text:0000000000004A4E                 jnz     short loc_4A55
.text:0000000000004A50                 add     rsp, 68h
.text:0000000000004A54                 retn
.text:0000000000004A55 ; ---------------------------------------------------------------------------
.text:0000000000004A55
.text:0000000000004A55 loc_4A55:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004A55                 call    ___stack_chk_fail
.text:0000000000004A5A ; ---------------------------------------------------------------------------
.text:0000000000004A5A
.text:0000000000004A5A loc_4A5A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000004A5A                 mov     r11, [r10+8]
.text:0000000000004A5E                 lea     rax, [r11+8]
.text:0000000000004A62                 mov     [r10+8], rax
.text:0000000000004A66                 jmp     short loc_4A25
.text:0000000000004A66 ; } // starts at 49F0
.text:0000000000004A66 version_etc_va  endp
.text:0000000000004A66
.text:0000000000004A66 ; ---------------------------------------------------------------------------
.text:0000000000004A68                 align 10h
.text:0000000000004A70
.text:0000000000004A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A70
.text:0000000000004A70 ; Attributes: info_from_lumina
.text:0000000000004A70
.text:0000000000004A70 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000004A70                 public version_etc
.text:0000000000004A70 version_etc     proc near               ; CODE XREF: main+131↑p
.text:0000000000004A70
.text:0000000000004A70 var_C0          = dword ptr -0C0h
.text:0000000000004A70 var_B8          = qword ptr -0B8h
.text:0000000000004A70 var_B0          = qword ptr -0B0h
.text:0000000000004A70 var_A8          = byte ptr -0A8h
.text:0000000000004A70 var_50          = qword ptr -50h
.text:0000000000004A70 var_48          = byte ptr -48h
.text:0000000000004A70 var_28          = qword ptr -28h
.text:0000000000004A70 var_20          = qword ptr -20h
.text:0000000000004A70 arg_0           = byte ptr  8
.text:0000000000004A70
.text:0000000000004A70 ; __unwind {
.text:0000000000004A70                 push    rbp
.text:0000000000004A71                 push    rbx
.text:0000000000004A72                 mov     r10d, 20h ; ' '
.text:0000000000004A78                 xor     r11d, r11d
.text:0000000000004A7B                 sub     rsp, 0B8h
.text:0000000000004A82                 mov     rax, fs:28h
.text:0000000000004A8B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000004A90                 xor     eax, eax
.text:0000000000004A92                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000004A9A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004AA2                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000004AAA                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000004AAF                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004AB7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000004ABF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004AC4                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000004ACC                 xor     r9d, r9d
.text:0000000000004ACF                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004AD4                 mov     rbp, rax
.text:0000000000004AD7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004AE0
.text:0000000000004AE0 loc_4AE0:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004AE0                 cmp     r10d, 2Fh ; '/'
.text:0000000000004AE4                 ja      short loc_4B3C
.text:0000000000004AE6                 mov     eax, r10d
.text:0000000000004AE9                 mov     r11d, 1
.text:0000000000004AEF                 add     r10d, 8
.text:0000000000004AF3                 add     rax, rbp
.text:0000000000004AF6
.text:0000000000004AF6 loc_4AF6:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004AF6                 mov     rax, [rax]
.text:0000000000004AF9                 test    rax, rax
.text:0000000000004AFC                 mov     [r8+r9*8], rax
.text:0000000000004B00                 jz      short loc_4B0C
.text:0000000000004B02                 add     r9, 1
.text:0000000000004B06                 cmp     r9, 0Ah
.text:0000000000004B0A                 jnz     short loc_4AE0
.text:0000000000004B0C
.text:0000000000004B0C loc_4B0C:                               ; CODE XREF: version_etc+90↑j
.text:0000000000004B0C                 test    r11b, r11b
.text:0000000000004B0F                 jnz     short loc_4B35
.text:0000000000004B11
.text:0000000000004B11 loc_4B11:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004B11                 call    version_etc_arn
.text:0000000000004B16                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000004B1B                 xor     rax, fs:28h
.text:0000000000004B24                 jnz     short loc_4B30
.text:0000000000004B26                 add     rsp, 0B8h
.text:0000000000004B2D                 pop     rbx
.text:0000000000004B2E                 pop     rbp
.text:0000000000004B2F                 retn
.text:0000000000004B30 ; ---------------------------------------------------------------------------
.text:0000000000004B30
.text:0000000000004B30 loc_4B30:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004B30                 call    ___stack_chk_fail
.text:0000000000004B35 ; ---------------------------------------------------------------------------
.text:0000000000004B35
.text:0000000000004B35 loc_4B35:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004B35                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000004B3A                 jmp     short loc_4B11
.text:0000000000004B3C ; ---------------------------------------------------------------------------
.text:0000000000004B3C
.text:0000000000004B3C loc_4B3C:                               ; CODE XREF: version_etc+74↑j
.text:0000000000004B3C                 mov     rax, rbx
.text:0000000000004B3F                 add     rbx, 8
.text:0000000000004B43                 jmp     short loc_4AF6
.text:0000000000004B43 ; } // starts at 4A70
.text:0000000000004B43 version_etc     endp
.text:0000000000004B43
.text:0000000000004B43 ; ---------------------------------------------------------------------------
.text:0000000000004B45                 align 10h
.text:0000000000004B50
.text:0000000000004B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B50
.text:0000000000004B50 ; Attributes: info_from_lumina
.text:0000000000004B50
.text:0000000000004B50 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004B50                 public emit_bug_reporting_address
.text:0000000000004B50 emit_bug_reporting_address proc near
.text:0000000000004B50 ; __unwind {
.text:0000000000004B50                 push    rbx
.text:0000000000004B51                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004B58                 mov     edx, 5          ; category
.text:0000000000004B5D                 xor     edi, edi        ; domainname
.text:0000000000004B5F                 call    _dcgettext
.text:0000000000004B64                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000004B6B                 mov     rsi, rax
.text:0000000000004B6E                 mov     edi, 1
.text:0000000000004B73                 xor     eax, eax
.text:0000000000004B75                 call    ___printf_chk
.text:0000000000004B7A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004B81                 mov     edx, 5          ; category
.text:0000000000004B86                 xor     edi, edi        ; domainname
.text:0000000000004B88                 call    _dcgettext
.text:0000000000004B8D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004B94                 lea     rdx, unk_54FD
.text:0000000000004B9B                 mov     rsi, rax
.text:0000000000004B9E                 mov     edi, 1
.text:0000000000004BA3                 xor     eax, eax
.text:0000000000004BA5                 call    ___printf_chk
.text:0000000000004BAA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004BB1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004BB8                 xor     edi, edi        ; domainname
.text:0000000000004BBA                 mov     edx, 5          ; category
.text:0000000000004BBF                 call    _dcgettext
.text:0000000000004BC4                 mov     rsi, rbx        ; stream
.text:0000000000004BC7                 mov     rdi, rax        ; s
.text:0000000000004BCA                 pop     rbx
.text:0000000000004BCB                 jmp     _fputs_unlocked
.text:0000000000004BCB ; } // starts at 4B50
.text:0000000000004BCB emit_bug_reporting_address endp
.text:0000000000004BCB
.text:0000000000004BD0
.text:0000000000004BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BD0
.text:0000000000004BD0
.text:0000000000004BD0                 public xmalloc
.text:0000000000004BD0 xmalloc         proc near               ; CODE XREF: tee_files+86↑p
.text:0000000000004BD0                                         ; quotearg_n_options+127↑p ...
.text:0000000000004BD0 ; __unwind {
.text:0000000000004BD0                 push    rbx
.text:0000000000004BD1                 mov     rbx, rdi
.text:0000000000004BD4                 call    _malloc
.text:0000000000004BD9                 test    rax, rax
.text:0000000000004BDC                 jnz     short loc_4BE3
.text:0000000000004BDE                 test    rbx, rbx
.text:0000000000004BE1                 jnz     short loc_4BE5
.text:0000000000004BE3
.text:0000000000004BE3 loc_4BE3:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004BE3                 pop     rbx
.text:0000000000004BE4                 retn
.text:0000000000004BE5 ; ---------------------------------------------------------------------------
.text:0000000000004BE5
.text:0000000000004BE5 loc_4BE5:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004BE5                 call    xalloc_die
.text:0000000000004BE5 ; } // starts at 4BD0
.text:0000000000004BE5 xmalloc         endp
.text:0000000000004BE5
.text:0000000000004BE5 ; ---------------------------------------------------------------------------
.text:0000000000004BEA                 align 10h
.text:0000000000004BF0
.text:0000000000004BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BF0
.text:0000000000004BF0 ; Attributes: info_from_lumina
.text:0000000000004BF0
.text:0000000000004BF0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004BF0                 public xnmalloc
.text:0000000000004BF0 xnmalloc        proc near
.text:0000000000004BF0 ; __unwind {
.text:0000000000004BF0                 mov     rax, rdi
.text:0000000000004BF3                 mul     rsi
.text:0000000000004BF6                 mov     rdi, rax
.text:0000000000004BF9                 seto    al
.text:0000000000004BFC                 test    rdi, rdi
.text:0000000000004BFF                 js      short loc_4C0B
.text:0000000000004C01                 movzx   eax, al
.text:0000000000004C04                 test    rax, rax
.text:0000000000004C07                 jnz     short loc_4C0B
.text:0000000000004C09                 jmp     short xmalloc
.text:0000000000004C0B ; ---------------------------------------------------------------------------
.text:0000000000004C0B
.text:0000000000004C0B loc_4C0B:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000004C0B                                         ; xnmalloc+17↑j
.text:0000000000004C0B                 sub     rsp, 8
.text:0000000000004C0F                 call    xalloc_die
.text:0000000000004C0F ; } // starts at 4BF0
.text:0000000000004C0F xnmalloc        endp
.text:0000000000004C0F
.text:0000000000004C0F ; ---------------------------------------------------------------------------
.text:0000000000004C14                 align 20h
.text:0000000000004C20
.text:0000000000004C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C20
.text:0000000000004C20
.text:0000000000004C20                 public xcharalloc
.text:0000000000004C20 xcharalloc      proc near
.text:0000000000004C20 ; __unwind {
.text:0000000000004C20                 jmp     short xmalloc
.text:0000000000004C20 ; } // starts at 4C20
.text:0000000000004C20 xcharalloc      endp
.text:0000000000004C20
.text:0000000000004C20 ; ---------------------------------------------------------------------------
.text:0000000000004C22                 align 10h
.text:0000000000004C30
.text:0000000000004C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C30
.text:0000000000004C30 ; Attributes: info_from_lumina
.text:0000000000004C30
.text:0000000000004C30 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004C30                 public xrealloc
.text:0000000000004C30 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004C30                                         ; quotearg_n_options+182↑p ...
.text:0000000000004C30 ; __unwind {
.text:0000000000004C30                 test    rsi, rsi
.text:0000000000004C33                 push    rbx
.text:0000000000004C34                 mov     rbx, rsi
.text:0000000000004C37                 jnz     short loc_4C3E
.text:0000000000004C39                 test    rdi, rdi
.text:0000000000004C3C                 jnz     short loc_4C58
.text:0000000000004C3E
.text:0000000000004C3E loc_4C3E:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000004C3E                 mov     rsi, rbx        ; size
.text:0000000000004C41                 call    _realloc
.text:0000000000004C46                 test    rax, rax
.text:0000000000004C49                 jnz     short loc_4C50
.text:0000000000004C4B                 test    rbx, rbx
.text:0000000000004C4E                 jnz     short loc_4C61
.text:0000000000004C50
.text:0000000000004C50 loc_4C50:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004C50                 pop     rbx
.text:0000000000004C51                 retn
.text:0000000000004C51 ; ---------------------------------------------------------------------------
.text:0000000000004C52                 align 8
.text:0000000000004C58
.text:0000000000004C58 loc_4C58:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004C58                 call    _free
.text:0000000000004C5D                 xor     eax, eax
.text:0000000000004C5F                 pop     rbx
.text:0000000000004C60                 retn
.text:0000000000004C61 ; ---------------------------------------------------------------------------
.text:0000000000004C61
.text:0000000000004C61 loc_4C61:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004C61                 call    xalloc_die
.text:0000000000004C61 ; } // starts at 4C30
.text:0000000000004C61 xrealloc        endp
.text:0000000000004C61
.text:0000000000004C61 ; ---------------------------------------------------------------------------
.text:0000000000004C66                 align 10h
.text:0000000000004C70
.text:0000000000004C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C70
.text:0000000000004C70 ; Attributes: info_from_lumina
.text:0000000000004C70
.text:0000000000004C70 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004C70                 public xnrealloc
.text:0000000000004C70 xnrealloc       proc near
.text:0000000000004C70 ; __unwind {
.text:0000000000004C70                 mov     rax, rsi
.text:0000000000004C73                 mul     rdx
.text:0000000000004C76                 mov     rsi, rax
.text:0000000000004C79                 seto    al
.text:0000000000004C7C                 test    rsi, rsi
.text:0000000000004C7F                 js      short loc_4C8B
.text:0000000000004C81                 movzx   eax, al
.text:0000000000004C84                 test    rax, rax
.text:0000000000004C87                 jnz     short loc_4C8B
.text:0000000000004C89                 jmp     short xrealloc
.text:0000000000004C8B ; ---------------------------------------------------------------------------
.text:0000000000004C8B
.text:0000000000004C8B loc_4C8B:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000004C8B                                         ; xnrealloc+17↑j
.text:0000000000004C8B                 sub     rsp, 8
.text:0000000000004C8F                 call    xalloc_die
.text:0000000000004C8F ; } // starts at 4C70
.text:0000000000004C8F xnrealloc       endp
.text:0000000000004C8F
.text:0000000000004C8F ; ---------------------------------------------------------------------------
.text:0000000000004C94                 align 20h
.text:0000000000004CA0
.text:0000000000004CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CA0
.text:0000000000004CA0 ; Attributes: info_from_lumina
.text:0000000000004CA0
.text:0000000000004CA0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004CA0                 public x2nrealloc
.text:0000000000004CA0 x2nrealloc      proc near
.text:0000000000004CA0 ; __unwind {
.text:0000000000004CA0                 test    rdi, rdi
.text:0000000000004CA3                 mov     r9, rdx
.text:0000000000004CA6                 mov     rcx, [rsi]
.text:0000000000004CA9                 jz      short loc_4CE0
.text:0000000000004CAB                 xor     edx, edx
.text:0000000000004CAD                 mov     rax, 5555555555555554h
.text:0000000000004CB7                 div     r9
.text:0000000000004CBA                 cmp     rax, rcx
.text:0000000000004CBD                 jbe     short loc_4CFB
.text:0000000000004CBF                 mov     rax, rcx
.text:0000000000004CC2                 shr     rax, 1
.text:0000000000004CC5                 lea     rcx, [rax+rcx+1]
.text:0000000000004CCA
.text:0000000000004CCA loc_4CCA:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000004CCA                 mov     [rsi], rcx
.text:0000000000004CCD                 imul    rcx, r9
.text:0000000000004CD1                 mov     rsi, rcx
.text:0000000000004CD4                 jmp     xrealloc
.text:0000000000004CD4 ; ---------------------------------------------------------------------------
.text:0000000000004CD9                 align 20h
.text:0000000000004CE0
.text:0000000000004CE0 loc_4CE0:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004CE0                 test    rcx, rcx
.text:0000000000004CE3                 jz      short loc_4D08
.text:0000000000004CE5
.text:0000000000004CE5 loc_4CE5:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004CE5                 mov     rax, rcx
.text:0000000000004CE8                 mul     r9
.text:0000000000004CEB                 seto    dl
.text:0000000000004CEE                 test    rax, rax
.text:0000000000004CF1                 movzx   edx, dl
.text:0000000000004CF4                 js      short loc_4CFB
.text:0000000000004CF6                 test    rdx, rdx
.text:0000000000004CF9                 jz      short loc_4CCA
.text:0000000000004CFB
.text:0000000000004CFB loc_4CFB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000004CFB                                         ; x2nrealloc+54↑j
.text:0000000000004CFB                 sub     rsp, 8
.text:0000000000004CFF                 call    xalloc_die
.text:0000000000004CFF ; ---------------------------------------------------------------------------
.text:0000000000004D04                 align 8
.text:0000000000004D08
.text:0000000000004D08 loc_4D08:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004D08                 xor     edx, edx
.text:0000000000004D0A                 mov     eax, 80h
.text:0000000000004D0F                 xor     r8d, r8d
.text:0000000000004D12                 div     r9
.text:0000000000004D15                 test    rax, rax
.text:0000000000004D18                 setz    r8b
.text:0000000000004D1C                 lea     rcx, [r8+rax]
.text:0000000000004D20                 jmp     short loc_4CE5
.text:0000000000004D20 ; } // starts at 4CA0
.text:0000000000004D20 x2nrealloc      endp
.text:0000000000004D20
.text:0000000000004D20 ; ---------------------------------------------------------------------------
.text:0000000000004D22                 align 10h
.text:0000000000004D30
.text:0000000000004D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D30
.text:0000000000004D30 ; Attributes: info_from_lumina
.text:0000000000004D30
.text:0000000000004D30 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004D30                 public x2realloc
.text:0000000000004D30 x2realloc       proc near
.text:0000000000004D30 ; __unwind {
.text:0000000000004D30                 test    rdi, rdi
.text:0000000000004D33                 mov     rax, [rsi]
.text:0000000000004D36                 jz      short loc_4D60
.text:0000000000004D38                 mov     rdx, 5555555555555553h
.text:0000000000004D42                 cmp     rax, rdx
.text:0000000000004D45                 ja      short loc_4D71
.text:0000000000004D47                 mov     rdx, rax
.text:0000000000004D4A                 shr     rdx, 1
.text:0000000000004D4D                 lea     rax, [rdx+rax+1]
.text:0000000000004D52
.text:0000000000004D52 loc_4D52:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004D52                 mov     [rsi], rax
.text:0000000000004D55                 mov     rsi, rax
.text:0000000000004D58                 jmp     xrealloc
.text:0000000000004D58 ; ---------------------------------------------------------------------------
.text:0000000000004D5D                 align 20h
.text:0000000000004D60
.text:0000000000004D60 loc_4D60:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000004D60                 test    rax, rax
.text:0000000000004D63                 mov     edx, 80h
.text:0000000000004D68                 cmovz   rax, rdx
.text:0000000000004D6C                 test    rax, rax
.text:0000000000004D6F                 jns     short loc_4D52
.text:0000000000004D71
.text:0000000000004D71 loc_4D71:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000004D71                 sub     rsp, 8
.text:0000000000004D75                 call    xalloc_die
.text:0000000000004D75 ; } // starts at 4D30
.text:0000000000004D75 x2realloc       endp
.text:0000000000004D75
.text:0000000000004D75 ; ---------------------------------------------------------------------------
.text:0000000000004D7A                 align 20h
.text:0000000000004D80
.text:0000000000004D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D80
.text:0000000000004D80
.text:0000000000004D80 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004D80                 public xzalloc
.text:0000000000004D80 xzalloc         proc near
.text:0000000000004D80 ; __unwind {
.text:0000000000004D80                 push    rbx
.text:0000000000004D81                 mov     rbx, rdi
.text:0000000000004D84                 call    xmalloc
.text:0000000000004D89                 mov     rdx, rbx        ; n
.text:0000000000004D8C                 xor     esi, esi        ; c
.text:0000000000004D8E                 mov     rdi, rax        ; s
.text:0000000000004D91                 pop     rbx
.text:0000000000004D92                 jmp     _memset
.text:0000000000004D92 ; } // starts at 4D80
.text:0000000000004D92 xzalloc         endp
.text:0000000000004D92
.text:0000000000004D92 ; ---------------------------------------------------------------------------
.text:0000000000004D97                 align 20h
.text:0000000000004DA0
.text:0000000000004DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DA0
.text:0000000000004DA0 ; Attributes: info_from_lumina
.text:0000000000004DA0
.text:0000000000004DA0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004DA0                 public xcalloc
.text:0000000000004DA0 xcalloc         proc near
.text:0000000000004DA0 ; __unwind {
.text:0000000000004DA0                 mov     rax, rdi
.text:0000000000004DA3                 sub     rsp, 8
.text:0000000000004DA7                 mul     rsi
.text:0000000000004DAA                 seto    dl
.text:0000000000004DAD                 test    rax, rax
.text:0000000000004DB0                 js      short loc_4DC9
.text:0000000000004DB2                 movzx   edx, dl
.text:0000000000004DB5                 test    rdx, rdx
.text:0000000000004DB8                 jnz     short loc_4DC9
.text:0000000000004DBA                 call    _calloc
.text:0000000000004DBF                 test    rax, rax
.text:0000000000004DC2                 jz      short loc_4DC9
.text:0000000000004DC4                 add     rsp, 8
.text:0000000000004DC8                 retn
.text:0000000000004DC9 ; ---------------------------------------------------------------------------
.text:0000000000004DC9
.text:0000000000004DC9 loc_4DC9:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004DC9                                         ; xcalloc+18↑j ...
.text:0000000000004DC9                 call    xalloc_die
.text:0000000000004DC9 ; } // starts at 4DA0
.text:0000000000004DC9 xcalloc         endp
.text:0000000000004DC9
.text:0000000000004DC9 ; ---------------------------------------------------------------------------
.text:0000000000004DCE                 align 10h
.text:0000000000004DD0
.text:0000000000004DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DD0
.text:0000000000004DD0 ; Attributes: info_from_lumina
.text:0000000000004DD0
.text:0000000000004DD0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004DD0                 public xmemdup
.text:0000000000004DD0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004DD0                                         ; xstrdup+11↓j
.text:0000000000004DD0 ; __unwind {
.text:0000000000004DD0                 push    rbp
.text:0000000000004DD1                 push    rbx
.text:0000000000004DD2                 mov     rbp, rdi
.text:0000000000004DD5                 mov     rdi, rsi
.text:0000000000004DD8                 mov     rbx, rsi
.text:0000000000004DDB                 sub     rsp, 8
.text:0000000000004DDF                 call    xmalloc
.text:0000000000004DE4                 add     rsp, 8
.text:0000000000004DE8                 mov     rdx, rbx        ; n
.text:0000000000004DEB                 mov     rsi, rbp        ; src
.text:0000000000004DEE                 pop     rbx
.text:0000000000004DEF                 pop     rbp
.text:0000000000004DF0                 mov     rdi, rax        ; dest
.text:0000000000004DF3                 jmp     _memcpy
.text:0000000000004DF3 ; } // starts at 4DD0
.text:0000000000004DF3 xmemdup         endp
.text:0000000000004DF3
.text:0000000000004DF3 ; ---------------------------------------------------------------------------
.text:0000000000004DF8                 align 20h
.text:0000000000004E00
.text:0000000000004E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E00
.text:0000000000004E00
.text:0000000000004E00 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004E00                 public xstrdup
.text:0000000000004E00 xstrdup         proc near
.text:0000000000004E00 ; __unwind {
.text:0000000000004E00                 push    rbx
.text:0000000000004E01                 mov     rbx, rdi
.text:0000000000004E04                 call    _strlen
.text:0000000000004E09                 mov     rdi, rbx        ; src
.text:0000000000004E0C                 lea     rsi, [rax+1]    ; n
.text:0000000000004E10                 pop     rbx
.text:0000000000004E11                 jmp     short xmemdup
.text:0000000000004E11 ; } // starts at 4E00
.text:0000000000004E11 xstrdup         endp
.text:0000000000004E11
.text:0000000000004E11 ; ---------------------------------------------------------------------------
.text:0000000000004E13                 align 20h
.text:0000000000004E20
.text:0000000000004E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E20
.text:0000000000004E20 ; Attributes: noreturn info_from_lumina
.text:0000000000004E20
.text:0000000000004E20 ; void __cdecl xalloc_die()
.text:0000000000004E20                 public xalloc_die
.text:0000000000004E20 xalloc_die      proc near               ; CODE XREF: tee_files:loc_1F82↑p
.text:0000000000004E20                                         ; quotearg_n_options:loc_3DE6↑p ...
.text:0000000000004E20 ; __unwind {
.text:0000000000004E20                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004E27                 sub     rsp, 8
.text:0000000000004E2B                 mov     edx, 5          ; category
.text:0000000000004E30                 xor     edi, edi        ; domainname
.text:0000000000004E32                 call    _dcgettext
.text:0000000000004E37                 mov     edi, cs:exit_failure ; status
.text:0000000000004E3D                 lea     rdx, aS_0+2     ; format
.text:0000000000004E44                 mov     rcx, rax
.text:0000000000004E47                 xor     esi, esi        ; errnum
.text:0000000000004E49                 xor     eax, eax
.text:0000000000004E4B                 call    _error
.text:0000000000004E50                 call    _abort
.text:0000000000004E50 ; } // starts at 4E20
.text:0000000000004E50 xalloc_die      endp
.text:0000000000004E50
.text:0000000000004E50 ; ---------------------------------------------------------------------------
.text:0000000000004E55                 align 20h
.text:0000000000004E60
.text:0000000000004E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E60
.text:0000000000004E60 ; Attributes: info_from_lumina
.text:0000000000004E60
.text:0000000000004E60 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004E60                 public rpl_fclose
.text:0000000000004E60 rpl_fclose      proc near               ; CODE XREF: tee_files+20B↑p
.text:0000000000004E60                                         ; fopen_safer+41↑p ...
.text:0000000000004E60 ; __unwind {
.text:0000000000004E60                 push    r12
.text:0000000000004E62                 push    rbp
.text:0000000000004E63                 push    rbx
.text:0000000000004E64                 mov     rbx, rdi
.text:0000000000004E67                 call    _fileno
.text:0000000000004E6C                 test    eax, eax
.text:0000000000004E6E                 mov     rdi, rbx        ; fp
.text:0000000000004E71                 js      short loc_4EC7
.text:0000000000004E73                 call    ___freading
.text:0000000000004E78                 test    eax, eax
.text:0000000000004E7A                 jnz     short loc_4EA8
.text:0000000000004E7C
.text:0000000000004E7C loc_4E7C:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000004E7C                 mov     rdi, rbx        ; stream
.text:0000000000004E7F                 call    rpl_fflush
.text:0000000000004E84                 test    eax, eax
.text:0000000000004E86                 jz      short loc_4EC4
.text:0000000000004E88                 call    ___errno_location
.text:0000000000004E8D                 mov     r12d, [rax]
.text:0000000000004E90                 mov     rdi, rbx        ; stream
.text:0000000000004E93                 mov     rbp, rax
.text:0000000000004E96                 call    _fclose
.text:0000000000004E9B                 test    r12d, r12d
.text:0000000000004E9E                 jnz     short loc_4ED0
.text:0000000000004EA0
.text:0000000000004EA0 loc_4EA0:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004EA0                 pop     rbx
.text:0000000000004EA1                 pop     rbp
.text:0000000000004EA2                 pop     r12
.text:0000000000004EA4                 retn
.text:0000000000004EA4 ; ---------------------------------------------------------------------------
.text:0000000000004EA5                 align 8
.text:0000000000004EA8
.text:0000000000004EA8 loc_4EA8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004EA8                 mov     rdi, rbx        ; stream
.text:0000000000004EAB                 call    _fileno
.text:0000000000004EB0                 xor     esi, esi        ; offset
.text:0000000000004EB2                 mov     edx, 1          ; whence
.text:0000000000004EB7                 mov     edi, eax        ; fd
.text:0000000000004EB9                 call    _lseek
.text:0000000000004EBE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004EC2                 jnz     short loc_4E7C
.text:0000000000004EC4
.text:0000000000004EC4 loc_4EC4:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000004EC4                 mov     rdi, rbx        ; stream
.text:0000000000004EC7
.text:0000000000004EC7 loc_4EC7:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000004EC7                 pop     rbx
.text:0000000000004EC8                 pop     rbp
.text:0000000000004EC9                 pop     r12
.text:0000000000004ECB                 jmp     _fclose
.text:0000000000004ED0 ; ---------------------------------------------------------------------------
.text:0000000000004ED0
.text:0000000000004ED0 loc_4ED0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004ED0                 mov     [rbp+0], r12d
.text:0000000000004ED4                 mov     eax, 0FFFFFFFFh
.text:0000000000004ED9                 jmp     short loc_4EA0
.text:0000000000004ED9 ; } // starts at 4E60
.text:0000000000004ED9 rpl_fclose      endp
.text:0000000000004ED9
.text:0000000000004ED9 ; ---------------------------------------------------------------------------
.text:0000000000004EDB                 align 20h
.text:0000000000004EE0
.text:0000000000004EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EE0
.text:0000000000004EE0
.text:0000000000004EE0 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:0000000000004EE0                 public rpl_fcntl
.text:0000000000004EE0 rpl_fcntl       proc near               ; CODE XREF: dup_safer+9↑j
.text:0000000000004EE0
.text:0000000000004EE0 var_68          = dword ptr -68h
.text:0000000000004EE0 var_60          = qword ptr -60h
.text:0000000000004EE0 var_58          = qword ptr -58h
.text:0000000000004EE0 var_50          = qword ptr -50h
.text:0000000000004EE0 var_48          = byte ptr -48h
.text:0000000000004EE0 var_38          = qword ptr -38h
.text:0000000000004EE0 var_30          = qword ptr -30h
.text:0000000000004EE0 var_28          = qword ptr -28h
.text:0000000000004EE0 var_20          = qword ptr -20h
.text:0000000000004EE0 arg_0           = byte ptr  8
.text:0000000000004EE0
.text:0000000000004EE0 ; __unwind {
.text:0000000000004EE0                 push    r12
.text:0000000000004EE2                 push    rbp
.text:0000000000004EE3                 mov     ebp, edi
.text:0000000000004EE5                 push    rbx
.text:0000000000004EE6                 sub     rsp, 50h
.text:0000000000004EEA                 mov     rax, fs:28h
.text:0000000000004EF3                 mov     [rsp+68h+var_50], rax
.text:0000000000004EF8                 xor     eax, eax
.text:0000000000004EFA                 lea     rax, [rsp+68h+arg_0]
.text:0000000000004EFF                 test    esi, esi
.text:0000000000004F01                 mov     [rsp+68h+var_38], rdx
.text:0000000000004F06                 mov     [rsp+68h+var_30], rcx
.text:0000000000004F0B                 mov     [rsp+68h+var_28], r8
.text:0000000000004F10                 mov     [rsp+68h+var_60], rax
.text:0000000000004F15                 lea     rax, [rsp+68h+var_48]
.text:0000000000004F1A                 mov     [rsp+68h+var_20], r9
.text:0000000000004F1F                 mov     [rsp+68h+var_68], 10h
.text:0000000000004F26                 mov     [rsp+68h+var_58], rax
.text:0000000000004F2B                 jz      loc_5132
.text:0000000000004F31                 cmp     esi, 406h
.text:0000000000004F37                 jnz     short loc_4F80
.text:0000000000004F39                 mov     rax, [rsp+68h+var_58]
.text:0000000000004F3E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:0000000000004F45                 mov     [rsp+68h+var_68], 18h
.text:0000000000004F4C                 mov     r12d, [rax+10h]
.text:0000000000004F50                 mov     edx, r12d
.text:0000000000004F53                 js      loc_5083
.text:0000000000004F59                 xor     eax, eax
.text:0000000000004F5B                 mov     esi, 406h       ; cmd
.text:0000000000004F60                 call    _fcntl
.text:0000000000004F65                 test    eax, eax
.text:0000000000004F67                 mov     ebx, eax
.text:0000000000004F69                 js      loc_50F8
.text:0000000000004F6F
.text:0000000000004F6F loc_4F6F:                               ; CODE XREF: rpl_fcntl+220↓j
.text:0000000000004F6F                 mov     cs:have_dupfd_cloexec_3326, 1
.text:0000000000004F79                 jmp     short loc_4FC0
.text:0000000000004F79 ; ---------------------------------------------------------------------------
.text:0000000000004F7B                 align 20h
.text:0000000000004F80
.text:0000000000004F80 loc_4F80:                               ; CODE XREF: rpl_fcntl+57↑j
.text:0000000000004F80                 cmp     esi, 0Bh
.text:0000000000004F83                 jz      short loc_4FB0
.text:0000000000004F85                 jg      short loc_4FE0
.text:0000000000004F87                 cmp     esi, 4
.text:0000000000004F8A                 jz      loc_5060
.text:0000000000004F90                 jg      loc_5050
.text:0000000000004F96                 cmp     esi, 2
.text:0000000000004F99                 jz      loc_5060
.text:0000000000004F9F                 jg      short loc_4FB0
.text:0000000000004FA1                 cmp     esi, 1
.text:0000000000004FA4                 jnz     short loc_5008
.text:0000000000004FA6                 db      2Eh
.text:0000000000004FA6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004FB0
.text:0000000000004FB0 loc_4FB0:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:0000000000004FB0                                         ; rpl_fcntl+BF↑j ...
.text:0000000000004FB0                 mov     edi, ebp        ; fd
.text:0000000000004FB2                 xor     eax, eax
.text:0000000000004FB4                 call    _fcntl
.text:0000000000004FB9                 mov     ebx, eax
.text:0000000000004FBB                 nop     dword ptr [rax+rax+00h]
.text:0000000000004FC0
.text:0000000000004FC0 loc_4FC0:                               ; CODE XREF: rpl_fcntl+99↑j
.text:0000000000004FC0                                         ; rpl_fcntl+147↓j ...
.text:0000000000004FC0                 mov     rcx, [rsp+68h+var_50]
.text:0000000000004FC5                 xor     rcx, fs:28h
.text:0000000000004FCE                 mov     eax, ebx
.text:0000000000004FD0                 jnz     loc_512D
.text:0000000000004FD6                 add     rsp, 50h
.text:0000000000004FDA                 pop     rbx
.text:0000000000004FDB                 pop     rbp
.text:0000000000004FDC                 pop     r12
.text:0000000000004FDE                 retn
.text:0000000000004FDE ; ---------------------------------------------------------------------------
.text:0000000000004FDF                 align 20h
.text:0000000000004FE0
.text:0000000000004FE0 loc_4FE0:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:0000000000004FE0                 cmp     esi, 407h
.text:0000000000004FE6                 jg      short loc_5030
.text:0000000000004FE8                 cmp     esi, 406h
.text:0000000000004FEE                 jge     short loc_5060
.text:0000000000004FF0                 cmp     esi, 401h
.text:0000000000004FF6                 jz      short loc_4FB0
.text:0000000000004FF8                 cmp     esi, 402h
.text:0000000000004FFE                 jz      short loc_5060
.text:0000000000005000                 cmp     esi, 400h
.text:0000000000005006                 jz      short loc_5060
.text:0000000000005008
.text:0000000000005008 loc_5008:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:0000000000005008                                         ; rpl_fcntl+164↓j ...
.text:0000000000005008                 mov     eax, [rsp+68h+var_68]
.text:000000000000500B                 cmp     eax, 2Fh ; '/'
.text:000000000000500E                 ja      loc_514A
.text:0000000000005014                 add     rax, [rsp+68h+var_58]
.text:0000000000005019
.text:0000000000005019 loc_5019:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:0000000000005019                 mov     rdx, [rax]
.text:000000000000501C                 mov     edi, ebp        ; fd
.text:000000000000501E                 xor     eax, eax
.text:0000000000005020                 call    _fcntl
.text:0000000000005025                 mov     ebx, eax
.text:0000000000005027                 jmp     short loc_4FC0
.text:0000000000005027 ; ---------------------------------------------------------------------------
.text:0000000000005029                 align 10h
.text:0000000000005030
.text:0000000000005030 loc_5030:                               ; CODE XREF: rpl_fcntl+106↑j
.text:0000000000005030                 cmp     esi, 409h
.text:0000000000005036                 jz      short loc_5060
.text:0000000000005038                 jl      loc_4FB0
.text:000000000000503E                 cmp     esi, 40Ah
.text:0000000000005044                 jnz     short loc_5008
.text:0000000000005046                 jmp     loc_4FB0
.text:0000000000005046 ; ---------------------------------------------------------------------------
.text:000000000000504B                 align 10h
.text:0000000000005050
.text:0000000000005050 loc_5050:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:0000000000005050                 cmp     esi, 9
.text:0000000000005053                 jz      loc_4FB0
.text:0000000000005059                 jg      short loc_5060
.text:000000000000505B                 cmp     esi, 8
.text:000000000000505E                 jnz     short loc_5008
.text:0000000000005060
.text:0000000000005060 loc_5060:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:0000000000005060                                         ; rpl_fcntl+B9↑j ...
.text:0000000000005060                 mov     eax, [rsp+68h+var_68]
.text:0000000000005063                 cmp     eax, 2Fh ; '/'
.text:0000000000005066                 ja      loc_5154
.text:000000000000506C                 add     rax, [rsp+68h+var_58]
.text:0000000000005071
.text:0000000000005071 loc_5071:                               ; CODE XREF: rpl_fcntl+279↓j
.text:0000000000005071                 mov     edx, [rax]
.text:0000000000005073                 mov     edi, ebp        ; fd
.text:0000000000005075                 xor     eax, eax
.text:0000000000005077                 call    _fcntl
.text:000000000000507C                 mov     ebx, eax
.text:000000000000507E                 jmp     loc_4FC0
.text:0000000000005083 ; ---------------------------------------------------------------------------
.text:0000000000005083
.text:0000000000005083 loc_5083:                               ; CODE XREF: rpl_fcntl+73↑j
.text:0000000000005083                 xor     esi, esi        ; cmd
.text:0000000000005085                 xor     eax, eax
.text:0000000000005087                 call    _fcntl
.text:000000000000508C                 test    eax, eax
.text:000000000000508E                 mov     ebx, eax
.text:0000000000005090                 js      loc_4FC0
.text:0000000000005096                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000509D                 jnz     loc_4FC0
.text:00000000000050A3
.text:00000000000050A3 loc_50A3:                               ; CODE XREF: rpl_fcntl+248↓j
.text:00000000000050A3                 xor     eax, eax
.text:00000000000050A5                 mov     esi, 1          ; cmd
.text:00000000000050AA                 mov     edi, ebx        ; fd
.text:00000000000050AC                 call    _fcntl
.text:00000000000050B1                 test    eax, eax
.text:00000000000050B3                 js      short loc_50D1
.text:00000000000050B5                 or      eax, 1
.text:00000000000050B8                 mov     esi, 2          ; cmd
.text:00000000000050BD                 mov     edi, ebx        ; fd
.text:00000000000050BF                 mov     edx, eax
.text:00000000000050C1                 xor     eax, eax
.text:00000000000050C3                 call    _fcntl
.text:00000000000050C8                 cmp     eax, 0FFFFFFFFh
.text:00000000000050CB                 jnz     loc_4FC0
.text:00000000000050D1
.text:00000000000050D1 loc_50D1:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:00000000000050D1                 call    ___errno_location
.text:00000000000050D6                 mov     r12d, [rax]
.text:00000000000050D9                 mov     rbp, rax
.text:00000000000050DC                 mov     edi, ebx        ; fd
.text:00000000000050DE                 call    _close
.text:00000000000050E3                 mov     ebx, 0FFFFFFFFh
.text:00000000000050E8                 mov     [rbp+0], r12d
.text:00000000000050EC                 jmp     loc_4FC0
.text:00000000000050EC ; ---------------------------------------------------------------------------
.text:00000000000050F1                 align 8
.text:00000000000050F8
.text:00000000000050F8 loc_50F8:                               ; CODE XREF: rpl_fcntl+89↑j
.text:00000000000050F8                 call    ___errno_location
.text:00000000000050FD                 cmp     dword ptr [rax], 16h
.text:0000000000005100                 jnz     loc_4F6F
.text:0000000000005106                 xor     esi, esi        ; cmd
.text:0000000000005108                 xor     eax, eax
.text:000000000000510A                 mov     edx, r12d
.text:000000000000510D                 mov     edi, ebp        ; fd
.text:000000000000510F                 call    _fcntl
.text:0000000000005114                 test    eax, eax
.text:0000000000005116                 mov     ebx, eax
.text:0000000000005118                 js      loc_4FC0
.text:000000000000511E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000005128                 jmp     loc_50A3
.text:000000000000512D ; ---------------------------------------------------------------------------
.text:000000000000512D
.text:000000000000512D loc_512D:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:000000000000512D                 call    ___stack_chk_fail
.text:0000000000005132 ; ---------------------------------------------------------------------------
.text:0000000000005132
.text:0000000000005132 loc_5132:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:0000000000005132                 mov     rax, [rsp+68h+var_58]
.text:0000000000005137                 xor     esi, esi        ; cmd
.text:0000000000005139                 mov     edx, [rax+10h]
.text:000000000000513C                 xor     eax, eax
.text:000000000000513E                 call    _fcntl
.text:0000000000005143                 mov     ebx, eax
.text:0000000000005145                 jmp     loc_4FC0
.text:000000000000514A ; ---------------------------------------------------------------------------
.text:000000000000514A
.text:000000000000514A loc_514A:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:000000000000514A                 mov     rax, [rsp+68h+var_60]
.text:000000000000514F                 jmp     loc_5019
.text:0000000000005154 ; ---------------------------------------------------------------------------
.text:0000000000005154
.text:0000000000005154 loc_5154:                               ; CODE XREF: rpl_fcntl+186↑j
.text:0000000000005154                 mov     rax, [rsp+68h+var_60]
.text:0000000000005159                 jmp     loc_5071
.text:0000000000005159 ; } // starts at 4EE0
.text:0000000000005159 rpl_fcntl       endp
.text:0000000000005159
.text:0000000000005159 ; ---------------------------------------------------------------------------
.text:000000000000515E                 align 20h
.text:0000000000005160
.text:0000000000005160 ; =============== S U B R O U T I N E =======================================
.text:0000000000005160
.text:0000000000005160 ; Attributes: info_from_lumina
.text:0000000000005160
.text:0000000000005160 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000005160                 public rpl_fflush
.text:0000000000005160 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000005160 ; __unwind {
.text:0000000000005160                 test    rdi, rdi
.text:0000000000005163                 push    rbx
.text:0000000000005164                 mov     rbx, rdi
.text:0000000000005167                 jz      short loc_517A
.text:0000000000005169                 call    ___freading
.text:000000000000516E                 test    eax, eax
.text:0000000000005170                 jz      short loc_517A
.text:0000000000005172                 test    dword ptr [rbx], 100h
.text:0000000000005178                 jnz     short loc_5188
.text:000000000000517A
.text:000000000000517A loc_517A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000517A                                         ; rpl_fflush+10↑j
.text:000000000000517A                 mov     rdi, rbx        ; stream
.text:000000000000517D                 pop     rbx
.text:000000000000517E                 jmp     _fflush
.text:000000000000517E ; ---------------------------------------------------------------------------
.text:0000000000005183                 align 8
.text:0000000000005188
.text:0000000000005188 loc_5188:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000005188                 mov     rdi, rbx
.text:000000000000518B                 mov     edx, 1
.text:0000000000005190                 xor     esi, esi
.text:0000000000005192                 call    rpl_fseeko
.text:0000000000005197                 mov     rdi, rbx        ; stream
.text:000000000000519A                 pop     rbx
.text:000000000000519B                 jmp     _fflush
.text:000000000000519B ; } // starts at 5160
.text:000000000000519B rpl_fflush      endp
.text:000000000000519B
.text:00000000000051A0
.text:00000000000051A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051A0
.text:00000000000051A0 ; Attributes: info_from_lumina
.text:00000000000051A0
.text:00000000000051A0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:00000000000051A0                 public rpl_fseeko
.text:00000000000051A0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:00000000000051A0 ; __unwind {
.text:00000000000051A0                 mov     rax, [rdi+8]
.text:00000000000051A4                 cmp     [rdi+10h], rax
.text:00000000000051A8                 jz      short loc_51B0
.text:00000000000051AA
.text:00000000000051AA loc_51AA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:00000000000051AA                                         ; rpl_fseeko+1F↓j
.text:00000000000051AA                 jmp     _fseeko
.text:00000000000051AA ; ---------------------------------------------------------------------------
.text:00000000000051AF                 align 10h
.text:00000000000051B0
.text:00000000000051B0 loc_51B0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:00000000000051B0                 mov     rax, [rdi+20h]
.text:00000000000051B4                 cmp     [rdi+28h], rax
.text:00000000000051B8                 jnz     short loc_51AA
.text:00000000000051BA                 cmp     qword ptr [rdi+48h], 0
.text:00000000000051BF                 jnz     short loc_51AA
.text:00000000000051C1                 push    r12
.text:00000000000051C3                 push    rbp
.text:00000000000051C4                 mov     r12d, edx
.text:00000000000051C7                 push    rbx
.text:00000000000051C8                 mov     rbp, rsi
.text:00000000000051CB                 mov     rbx, rdi
.text:00000000000051CE                 call    _fileno
.text:00000000000051D3                 mov     edx, r12d       ; whence
.text:00000000000051D6                 mov     rsi, rbp        ; offset
.text:00000000000051D9                 mov     edi, eax        ; fd
.text:00000000000051DB                 call    _lseek
.text:00000000000051E0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000051E4                 jz      short loc_51F2
.text:00000000000051E6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:00000000000051E9                 mov     [rbx+90h], rax
.text:00000000000051F0                 xor     eax, eax
.text:00000000000051F2
.text:00000000000051F2 loc_51F2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:00000000000051F2                 pop     rbx
.text:00000000000051F3                 pop     rbp
.text:00000000000051F4                 pop     r12
.text:00000000000051F6                 retn
.text:00000000000051F6 ; } // starts at 51A0
.text:00000000000051F6 rpl_fseeko      endp
.text:00000000000051F6
.text:00000000000051F6 ; ---------------------------------------------------------------------------
.text:00000000000051F7                 align 20h
.text:0000000000005200
.text:0000000000005200 ; =============== S U B R O U T I N E =======================================
.text:0000000000005200
.text:0000000000005200 ; Attributes: info_from_lumina
.text:0000000000005200
.text:0000000000005200 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005200                 public rpl_mbrtowc
.text:0000000000005200 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005200
.text:0000000000005200 pwc             = dword ptr -34h
.text:0000000000005200 var_30          = qword ptr -30h
.text:0000000000005200
.text:0000000000005200 ; __unwind {
.text:0000000000005200                 push    r13
.text:0000000000005202                 push    r12
.text:0000000000005204                 mov     r13, rsi
.text:0000000000005207                 push    rbp
.text:0000000000005208                 push    rbx
.text:0000000000005209                 mov     rbx, rdi
.text:000000000000520C                 mov     r12, rdx
.text:000000000000520F                 sub     rsp, 18h
.text:0000000000005213                 mov     rax, fs:28h
.text:000000000000521C                 mov     [rsp+38h+var_30], rax
.text:0000000000005221                 xor     eax, eax
.text:0000000000005223                 lea     rax, [rsp+38h+pwc]
.text:0000000000005228                 test    rdi, rdi
.text:000000000000522B                 cmovz   rbx, rax
.text:000000000000522F                 mov     rdi, rbx        ; pwc
.text:0000000000005232                 call    _mbrtowc
.text:0000000000005237                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000523B                 mov     rbp, rax
.text:000000000000523E                 jbe     short loc_5260
.text:0000000000005240                 test    r12, r12
.text:0000000000005243                 jz      short loc_5260
.text:0000000000005245                 xor     edi, edi
.text:0000000000005247                 call    hard_locale
.text:000000000000524C                 test    al, al
.text:000000000000524E                 jnz     short loc_5260
.text:0000000000005250                 movzx   eax, byte ptr [r13+0]
.text:0000000000005255                 mov     ebp, 1
.text:000000000000525A                 mov     [rbx], eax
.text:000000000000525C                 nop     dword ptr [rax+00h]
.text:0000000000005260
.text:0000000000005260 loc_5260:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005260                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005260                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005265                 xor     rdx, fs:28h
.text:000000000000526E                 mov     rax, rbp
.text:0000000000005271                 jnz     short loc_527E
.text:0000000000005273                 add     rsp, 18h
.text:0000000000005277                 pop     rbx
.text:0000000000005278                 pop     rbp
.text:0000000000005279                 pop     r12
.text:000000000000527B                 pop     r13
.text:000000000000527D                 retn
.text:000000000000527E ; ---------------------------------------------------------------------------
.text:000000000000527E
.text:000000000000527E loc_527E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000527E                 call    ___stack_chk_fail
.text:000000000000527E ; } // starts at 5200
.text:000000000000527E rpl_mbrtowc     endp
.text:000000000000527E
.text:000000000000527E ; ---------------------------------------------------------------------------
.text:0000000000005283                 align 10h
.text:0000000000005290
.text:0000000000005290 ; =============== S U B R O U T I N E =======================================
.text:0000000000005290
.text:0000000000005290 ; Attributes: info_from_lumina
.text:0000000000005290
.text:0000000000005290 ; int __fastcall close_stream(FILE *stream)
.text:0000000000005290                 public close_stream
.text:0000000000005290 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000005290                                         ; close_stdout+33↑p
.text:0000000000005290 ; __unwind {
.text:0000000000005290                 push    r12
.text:0000000000005292                 push    rbp
.text:0000000000005293                 mov     rbp, rdi
.text:0000000000005296                 push    rbx
.text:0000000000005297                 call    ___fpending
.text:000000000000529C                 mov     ebx, [rbp+0]
.text:000000000000529F                 mov     rdi, rbp        ; stream
.text:00000000000052A2                 mov     r12, rax
.text:00000000000052A5                 call    rpl_fclose
.text:00000000000052AA                 and     ebx, 20h
.text:00000000000052AD                 test    ebx, ebx
.text:00000000000052AF                 jnz     short loc_52C8
.text:00000000000052B1                 test    eax, eax
.text:00000000000052B3                 jz      short loc_52BF
.text:00000000000052B5                 test    r12, r12
.text:00000000000052B8                 mov     eax, 0FFFFFFFFh
.text:00000000000052BD                 jz      short loc_52F8
.text:00000000000052BF
.text:00000000000052BF loc_52BF:                               ; CODE XREF: close_stream+23↑j
.text:00000000000052BF                 pop     rbx
.text:00000000000052C0                 pop     rbp
.text:00000000000052C1                 pop     r12
.text:00000000000052C3                 retn
.text:00000000000052C3 ; ---------------------------------------------------------------------------
.text:00000000000052C4                 align 8
.text:00000000000052C8
.text:00000000000052C8 loc_52C8:                               ; CODE XREF: close_stream+1F↑j
.text:00000000000052C8                 test    eax, eax
.text:00000000000052CA                 jnz     short loc_52E8
.text:00000000000052CC                 call    ___errno_location
.text:00000000000052D1                 mov     dword ptr [rax], 0
.text:00000000000052D7                 mov     eax, 0FFFFFFFFh
.text:00000000000052DC                 pop     rbx
.text:00000000000052DD                 pop     rbp
.text:00000000000052DE                 pop     r12
.text:00000000000052E0                 retn
.text:00000000000052E0 ; ---------------------------------------------------------------------------
.text:00000000000052E1                 align 8
.text:00000000000052E8
.text:00000000000052E8 loc_52E8:                               ; CODE XREF: close_stream+3A↑j
.text:00000000000052E8                 pop     rbx
.text:00000000000052E9                 mov     eax, 0FFFFFFFFh
.text:00000000000052EE                 pop     rbp
.text:00000000000052EF                 pop     r12
.text:00000000000052F1                 retn
.text:00000000000052F1 ; ---------------------------------------------------------------------------
.text:00000000000052F2                 align 8
.text:00000000000052F8
.text:00000000000052F8 loc_52F8:                               ; CODE XREF: close_stream+2D↑j
.text:00000000000052F8                 call    ___errno_location
.text:00000000000052FD                 cmp     dword ptr [rax], 9
.text:0000000000005300                 pop     rbx
.text:0000000000005301                 pop     rbp
.text:0000000000005302                 pop     r12
.text:0000000000005304                 setnz   al
.text:0000000000005307                 movzx   eax, al
.text:000000000000530A                 neg     eax
.text:000000000000530C                 retn
.text:000000000000530C ; } // starts at 5290
.text:000000000000530C close_stream    endp
.text:000000000000530C
.text:000000000000530C ; ---------------------------------------------------------------------------
.text:000000000000530D                 align 10h
.text:0000000000005310
.text:0000000000005310 ; =============== S U B R O U T I N E =======================================
.text:0000000000005310
.text:0000000000005310
.text:0000000000005310                 public hard_locale
.text:0000000000005310 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000005310 ; __unwind {
.text:0000000000005310                 sub     rsp, 8
.text:0000000000005314                 xor     esi, esi        ; locale
.text:0000000000005316                 call    _setlocale
.text:000000000000531B                 mov     rdx, rax
.text:000000000000531E                 mov     eax, 1
.text:0000000000005323                 test    rdx, rdx
.text:0000000000005326                 jz      short loc_5345
.text:0000000000005328                 lea     rdi, aC         ; "C"
.text:000000000000532F                 mov     ecx, 2
.text:0000000000005334                 mov     rsi, rdx
.text:0000000000005337                 repe cmpsb
.text:0000000000005339                 setnbe  cl
.text:000000000000533C                 sbb     cl, 0
.text:000000000000533F                 xor     eax, eax
.text:0000000000005341                 test    cl, cl
.text:0000000000005343                 jnz     short loc_5350
.text:0000000000005345
.text:0000000000005345 loc_5345:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000005345                 add     rsp, 8
.text:0000000000005349                 retn
.text:0000000000005349 ; ---------------------------------------------------------------------------
.text:000000000000534A                 align 10h
.text:0000000000005350
.text:0000000000005350 loc_5350:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000005350                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000005357                 mov     ecx, 6
.text:000000000000535C                 mov     rsi, rdx
.text:000000000000535F                 repe cmpsb
.text:0000000000005361                 setnbe  al
.text:0000000000005364                 sbb     al, 0
.text:0000000000005366                 test    al, al
.text:0000000000005368                 setnz   al
.text:000000000000536B                 add     rsp, 8
.text:000000000000536F                 retn
.text:000000000000536F ; } // starts at 5310
.text:000000000000536F hard_locale     endp
.text:000000000000536F
.text:0000000000005370
.text:0000000000005370 ; =============== S U B R O U T I N E =======================================
.text:0000000000005370
.text:0000000000005370
.text:0000000000005370                 public locale_charset
.text:0000000000005370 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005370 ; __unwind {
.text:0000000000005370                 sub     rsp, 8
.text:0000000000005374                 mov     edi, 0Eh        ; item
.text:0000000000005379                 call    _nl_langinfo
.text:000000000000537E                 test    rax, rax
.text:0000000000005381                 jz      short loc_53A0
.text:0000000000005383                 cmp     byte ptr [rax], 0
.text:0000000000005386                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000538D                 cmovz   rax, rdx
.text:0000000000005391                 add     rsp, 8
.text:0000000000005395                 retn
.text:0000000000005395 ; ---------------------------------------------------------------------------
.text:0000000000005396                 align 20h
.text:00000000000053A0
.text:00000000000053A0 loc_53A0:                               ; CODE XREF: locale_charset+11↑j
.text:00000000000053A0                 lea     rax, aAscii     ; "ASCII"
.text:00000000000053A7                 add     rsp, 8
.text:00000000000053AB                 retn
.text:00000000000053AB ; } // starts at 5370
.text:00000000000053AB locale_charset  endp
.text:00000000000053AB
.text:00000000000053AB ; ---------------------------------------------------------------------------
.text:00000000000053AC                 align 10h
.text:00000000000053B0
.text:00000000000053B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053B0
.text:00000000000053B0 ; Attributes: info_from_lumina
.text:00000000000053B0
.text:00000000000053B0 ; void _libc_csu_init(void)
.text:00000000000053B0                 public __libc_csu_init
.text:00000000000053B0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000053B0 ; __unwind {
.text:00000000000053B0                 push    r15
.text:00000000000053B2                 push    r14
.text:00000000000053B4                 mov     r15, rdx
.text:00000000000053B7                 push    r13
.text:00000000000053B9                 push    r12
.text:00000000000053BB                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000053C2                 push    rbp
.text:00000000000053C3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000053CA                 push    rbx
.text:00000000000053CB                 mov     r13d, edi
.text:00000000000053CE                 mov     r14, rsi
.text:00000000000053D1                 sub     rbp, r12
.text:00000000000053D4                 sub     rsp, 8
.text:00000000000053D8                 sar     rbp, 3
.text:00000000000053DC                 call    _init_proc
.text:00000000000053E1                 test    rbp, rbp
.text:00000000000053E4                 jz      short loc_5406
.text:00000000000053E6                 xor     ebx, ebx
.text:00000000000053E8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000053F0
.text:00000000000053F0 loc_53F0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000053F0                 mov     rdx, r15
.text:00000000000053F3                 mov     rsi, r14
.text:00000000000053F6                 mov     edi, r13d
.text:00000000000053F9                 call    ds:(__frame_dummy_init_array_entry - 207AD0h)[r12+rbx*8]
.text:00000000000053FD                 add     rbx, 1
.text:0000000000005401                 cmp     rbp, rbx
.text:0000000000005404                 jnz     short loc_53F0
.text:0000000000005406
.text:0000000000005406 loc_5406:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000005406                 add     rsp, 8
.text:000000000000540A                 pop     rbx
.text:000000000000540B                 pop     rbp
.text:000000000000540C                 pop     r12
.text:000000000000540E                 pop     r13
.text:0000000000005410                 pop     r14
.text:0000000000005412                 pop     r15
.text:0000000000005414                 retn
.text:0000000000005414 ; } // starts at 53B0
.text:0000000000005414 __libc_csu_init endp
.text:0000000000005414
.text:0000000000005414 ; ---------------------------------------------------------------------------
.text:0000000000005415                 align 20h
.text:0000000000005420
.text:0000000000005420 ; =============== S U B R O U T I N E =======================================
.text:0000000000005420
.text:0000000000005420
.text:0000000000005420 ; void _libc_csu_fini(void)
.text:0000000000005420                 public __libc_csu_fini
.text:0000000000005420 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000005420 ; __unwind {
.text:0000000000005420                 rep retn
.text:0000000000005420 ; } // starts at 5420
.text:0000000000005420 __libc_csu_fini endp
.text:0000000000005420
.text:0000000000005420 ; ---------------------------------------------------------------------------
.text:0000000000005422                 align 10h
.text:0000000000005430
.text:0000000000005430 ; =============== S U B R O U T I N E =======================================
.text:0000000000005430
.text:0000000000005430
.text:0000000000005430 atexit          proc near               ; CODE XREF: main+4F↑p
.text:0000000000005430 ; __unwind {
.text:0000000000005430                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000005437                 xor     esi, esi        ; obj
.text:0000000000005439                 jmp     ___cxa_atexit
.text:0000000000005439 ; } // starts at 5430
.text:0000000000005439 atexit          endp
.text:0000000000005439
.text:0000000000005439 _text           ends
.text:0000000000005439
LOAD:000000000000543E ; ===========================================================================
LOAD:000000000000543E
LOAD:000000000000543E ; Segment type: Pure code
LOAD:000000000000543E ; Segment permissions: Read/Execute
LOAD:000000000000543E LOAD            segment byte public 'CODE' use64
LOAD:000000000000543E                 assume cs:LOAD
LOAD:000000000000543E                 ;org 543Eh
LOAD:000000000000543E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000543E                 align 20h
LOAD:000000000000543E LOAD            ends
LOAD:000000000000543E
.fini:0000000000005440 ; ===========================================================================
.fini:0000000000005440
.fini:0000000000005440 ; Segment type: Pure code
.fini:0000000000005440 ; Segment permissions: Read/Execute
.fini:0000000000005440 _fini           segment dword public 'CODE' use64
.fini:0000000000005440                 assume cs:_fini
.fini:0000000000005440                 ;org 5440h
.fini:0000000000005440                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000005440
.fini:0000000000005440 ; =============== S U B R O U T I N E =======================================
.fini:0000000000005440
.fini:0000000000005440
.fini:0000000000005440                 public _term_proc
.fini:0000000000005440 _term_proc      proc near
.fini:0000000000005440                 sub     rsp, 8          ; _fini
.fini:0000000000005444                 add     rsp, 8
.fini:0000000000005448                 retn
.fini:0000000000005448 _term_proc      endp
.fini:0000000000005448
.fini:0000000000005448 _fini           ends
.fini:0000000000005448
LOAD:0000000000005449 ; ===========================================================================
LOAD:0000000000005449
LOAD:0000000000005449 ; Segment type: Pure code
LOAD:0000000000005449 ; Segment permissions: Read/Execute
LOAD:0000000000005449 LOAD            segment byte public 'CODE' use64
LOAD:0000000000005449                 assume cs:LOAD
LOAD:0000000000005449                 ;org 5449h
LOAD:0000000000005449                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005449                 align 20h
LOAD:0000000000005449 LOAD            ends
LOAD:0000000000005449
.rodata:0000000000005460 ; ===========================================================================
.rodata:0000000000005460
.rodata:0000000000005460 ; Segment type: Pure data
.rodata:0000000000005460 ; Segment permissions: Read
.rodata:0000000000005460 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000005460                 assume cs:_rodata
.rodata:0000000000005460                 ;org 5460h
.rodata:0000000000005460                 public _IO_stdin_used
.rodata:0000000000005460 _IO_stdin_used  db    1
.rodata:0000000000005461                 db    0
.rodata:0000000000005462                 db    2
.rodata:0000000000005463                 db    0
.rodata:0000000000005464 unk_5464        db  61h ; a             ; DATA XREF: tee_files+40↑o
.rodata:0000000000005465                 db    0
.rodata:0000000000005466 unk_5466        db  77h ; w             ; DATA XREF: tee_files+B↑o
.rodata:0000000000005467                 db    0
.rodata:0000000000005468 ; const char aStandardOutput[]
.rodata:0000000000005468 aStandardOutput db 'standard output',0  ; DATA XREF: tee_files+95↑o
.rodata:0000000000005478 ; const char aReadError[]
.rodata:0000000000005478 aReadError      db 'read error',0       ; DATA XREF: tee_files:loc_1F3B↑o
.rodata:0000000000005483 aTee            db 'tee',0              ; DATA XREF: main+128↑o
.rodata:0000000000005483                                         ; usage+131↑o ...
.rodata:0000000000005487 asc_5487        db '[',0                ; DATA XREF: usage+13D↑o
.rodata:0000000000005489 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+164↑o
.rodata:0000000000005499 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000005499                                         ; DATA XREF: usage+194↑o
.rodata:0000000000005499                                         ; usage+28C↑o ...
.rodata:00000000000054AF aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1A5↑o
.rodata:00000000000054B9 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1B1↑o
.rodata:00000000000054C8 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+144↑o
.rodata:00000000000054D2 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+170↑o
.rodata:00000000000054DC aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+188↑o
.rodata:00000000000054E6 ; const char aSOnlineHelpS[]
.rodata:00000000000054E6 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1FA↑o
.rodata:00000000000054E6                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000054FD unk_54FD        db  47h ; G             ; DATA XREF: main+121↑o
.rodata:00000000000054FD                                         ; usage+216↑o ...
.rodata:00000000000054FE                 db  4Eh ; N
.rodata:00000000000054FF                 db  55h ; U
.rodata:0000000000005500                 db  20h
.rodata:0000000000005501 ; const char domainname[]
.rodata:0000000000005501 domainname      db 'coreutils',0        ; DATA XREF: main+30↑o
.rodata:0000000000005501                                         ; main+3C↑o ...
.rodata:000000000000550B ; const char s2[]
.rodata:000000000000550B s2              db 'en_',0              ; DATA XREF: usage+23D↑o
.rodata:000000000000550B                                         ; usage+2FE↑o
.rodata:000000000000550F ; const char aFullDocumentat[]
.rodata:000000000000550F aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000550F                                         ; DATA XREF: usage:loc_21F9↑o
.rodata:000000000000550F                                         ; usage:loc_22B6↑o
.rodata:000000000000552A ; const char dirname[]
.rodata:000000000000552A dirname         db '/usr/local/share/locale',0
.rodata:000000000000552A                                         ; DATA XREF: main+29↑o
.rodata:0000000000005542 aOutputError    db '--output-error',0   ; DATA XREF: main+C4↑o
.rodata:0000000000005542                                         ; .data.rel.ro:0000000000207B60↓o
.rodata:0000000000005551 aRichardMStallm db 'Richard M. Stallman',0
.rodata:0000000000005551                                         ; DATA XREF: main+112↑o
.rodata:0000000000005565 aMikeParker     db 'Mike Parker',0      ; DATA XREF: main+119↑o
.rodata:0000000000005571 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+FB↑o
.rodata:0000000000005581 ; const char shortopts[]
.rodata:0000000000005581 shortopts       db 'aip',0              ; DATA XREF: main:loc_18C2↑o
.rodata:0000000000005585 ; const char msgid[]
.rodata:0000000000005585 msgid           db 'standard input',0   ; DATA XREF: main:loc_1A43↑o
.rodata:0000000000005594 aWarn           db 'warn',0             ; DATA XREF: .data.rel.ro:output_error_args↓o
.rodata:0000000000005599 aWarnNopipe     db 'warn-nopipe',0      ; DATA XREF: .data.rel.ro:0000000000207AE8↓o
.rodata:00000000000055A5 aExit_0         db 'exit',0             ; DATA XREF: .data.rel.ro:0000000000207AF0↓o
.rodata:00000000000055AA aExitNopipe     db 'exit-nopipe',0      ; DATA XREF: .data.rel.ro:0000000000207AF8↓o
.rodata:00000000000055B6 aAppend         db 'append',0           ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:00000000000055BD aIgnoreInterrup db 'ignore-interrupts',0
.rodata:00000000000055BD                                         ; DATA XREF: .data.rel.ro:0000000000207B40↓o
.rodata:00000000000055CF aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000207B80↓o
.rodata:00000000000055D4 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000207BA0↓o
.rodata:00000000000055DC                 align 20h
.rodata:00000000000055E0 ; const char aTrySHelpForMor[]
.rodata:00000000000055E0 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:00000000000055E0                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000005607                 align 8
.rodata:0000000000005608 ; const char aUsageSOptionFi[]
.rodata:0000000000005608 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.rodata:0000000000005608                                         ; DATA XREF: usage:loc_1FFD↑o
.rodata:0000000000005629                 align 10h
.rodata:0000000000005630 ; const char aCopyStandardIn[]
.rodata:0000000000005630 aCopyStandardIn db 'Copy standard input to each FILE, and also to standard output.',0Ah
.rodata:0000000000005630                                         ; DATA XREF: usage+84↑o
.rodata:0000000000005630                 db 0Ah
.rodata:0000000000005630                 db '  -a, --append              append to the given FILEs, do not ove'
.rodata:0000000000005630                 db 'rwrite',0Ah
.rodata:0000000000005630                 db '  -i, --ignore-interrupts   ignore interrupt signals',0Ah,0
.rodata:00000000000056EE                 align 10h
.rodata:00000000000056F0 ; const char aPDiagnoseError[]
.rodata:00000000000056F0 aPDiagnoseError db '  -p                        diagnose errors writing to non pipes',0Ah
.rodata:00000000000056F0                                         ; DATA XREF: usage+A9↑o
.rodata:00000000000056F0                 db '      --output-error[=MODE]   set behavior on write error.  See M'
.rodata:00000000000056F0                 db 'ODE below',0Ah,0
.rodata:000000000000577D                 align 20h
.rodata:0000000000005780 ; const char aHelpDisplayThi[]
.rodata:0000000000005780 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000005780                                         ; DATA XREF: usage+CE↑o
.rodata:00000000000057AD                 align 10h
.rodata:00000000000057B0 ; const char aVersionOutputV[]
.rodata:00000000000057B0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:00000000000057B0                                         ; DATA XREF: usage+F3↑o
.rodata:00000000000057E6                 align 8
.rodata:00000000000057E8 ; const char aModeDetermines[]
.rodata:00000000000057E8 aModeDetermines db 0Ah                  ; DATA XREF: usage+118↑o
.rodata:00000000000057E8                 db 'MODE determines behavior with write errors on the outputs:',0Ah
.rodata:00000000000057E8                 db '  ',27h,'warn',27h,'         diagnose errors writing to any outpu'
.rodata:00000000000057E8                 db 't',0Ah
.rodata:00000000000057E8                 db '  ',27h,'warn-nopipe',27h,'  diagnose errors writing to any outpu'
.rodata:00000000000057E8                 db 't not a pipe',0Ah
.rodata:00000000000057E8                 db '  ',27h,'exit',27h,'         exit on error writing to any output',0Ah
.rodata:00000000000057E8                 db '  ',27h,'exit-nopipe',27h,'  exit on error writing to any output '
.rodata:00000000000057E8                 db 'not a pipe',0Ah
.rodata:00000000000057E8                 db 'The default MODE for the -p option is ',27h,'warn-nopipe',27h,'.',0Ah
.rodata:00000000000057E8                 db 'The default operation when --output-error is not specified, is to'
.rodata:00000000000057E8                 db 0Ah
.rodata:00000000000057E8                 db 'exit immediately on error writing to a pipe, and diagnose errors',0Ah
.rodata:00000000000057E8                 db 'writing to non pipe outputs.',0Ah,0
.rodata:00000000000059E8 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:00000000000059E8                                         ; DATA XREF: usage+20F↑o
.rodata:00000000000059E8                                         ; usage+273↑o ...
.rodata:0000000000005A10 ; const char aReportAnyTrans[]
.rodata:0000000000005A10 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000005A10                                         ; DATA XREF: usage+367↑o
.rodata:0000000000005A10                 db 'am/>',0Ah,0
.rodata:0000000000005A57                 align 8
.rodata:0000000000005A58 ; const char aOrAvailableLoc[]
.rodata:0000000000005A58 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000005A58                                         ; DATA XREF: usage:loc_223E↑o
.rodata:0000000000005A8B                 align 10h
.rodata:0000000000005A90 output_error_types db    1              ; DATA XREF: main+BD↑o
.rodata:0000000000005A90                                         ; main+D6↑o
.rodata:0000000000005A91                 db    0
.rodata:0000000000005A92                 db    0
.rodata:0000000000005A93                 db    0
.rodata:0000000000005A94                 db    2
.rodata:0000000000005A95                 db    0
.rodata:0000000000005A96                 db    0
.rodata:0000000000005A97                 db    0
.rodata:0000000000005A98                 db    3
.rodata:0000000000005A99                 db    0
.rodata:0000000000005A9A                 db    0
.rodata:0000000000005A9B                 db    0
.rodata:0000000000005A9C                 db    4
.rodata:0000000000005A9D                 db    0
.rodata:0000000000005A9E                 db    0
.rodata:0000000000005A9F                 db    0
.rodata:0000000000005AA0 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000005AA5 ; const char aInvalidArgumen[]
.rodata:0000000000005AA5 aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:0000000000005AA5                                         ; DATA XREF: argmatch_invalid:loc_24C0↑o
.rodata:0000000000005AC0 ; const char aAmbiguousArgum[]
.rodata:0000000000005AC0 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:0000000000005AC0                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:0000000000005ADD ; const char aValidArguments[]
.rodata:0000000000005ADD aValidArguments db 'Valid arguments are:',0
.rodata:0000000000005ADD                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:0000000000005AF2 aS              db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:0000000000005AF2                 db '  - %s',0
.rodata:0000000000005AFA aS_0            db ', %s',0             ; DATA XREF: argmatch_valid+B5↑o
.rodata:0000000000005AFA                                         ; main+200↑o ...
.rodata:0000000000005AFF ; const char aWriteError[]
.rodata:0000000000005AFF aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_2723↑o
.rodata:0000000000005B0B ; const char format[]
.rodata:0000000000005B0B format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000005B12                 align 8
.rodata:0000000000005B18 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000005B18                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000005B50 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000005B58 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000005B5C unk_5B5C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000005B5D                 db  80h
.rodata:0000000000005B5E                 db  98h
.rodata:0000000000005B5F                 db    0
.rodata:0000000000005B60 unk_5B60        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000005B61                 db  80h
.rodata:0000000000005B62                 db  99h
.rodata:0000000000005B63                 db    0
.rodata:0000000000005B64 unk_5B64        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000005B65                 db    7
.rodata:0000000000005B66                 db  65h ; e
.rodata:0000000000005B67                 db    0
.rodata:0000000000005B68 unk_5B68        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000005B69                 db 0AFh
.rodata:0000000000005B6A                 db    0
.rodata:0000000000005B6B unk_5B6B        db  22h ; "             ; DATA XREF: gettext_quote:loc_2930↑o
.rodata:0000000000005B6B                                         ; quotearg_buffer_restyled:loc_36EB↑o ...
.rodata:0000000000005B6C                 db    0
.rodata:0000000000005B6D ; const char asc_5B6D[2]
.rodata:0000000000005B6D asc_5B6D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000005B6D                                         ; quotearg_buffer_restyled:loc_2AB3↑o ...
.rodata:0000000000005B6F ; const char asc_5B6F[2]
.rodata:0000000000005B6F asc_5B6F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000005B6F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000005B71 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000005B79 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000207BE8↓o
.rodata:0000000000005B7F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000207BF0↓o
.rodata:0000000000005B8C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000207BF8↓o
.rodata:0000000000005B8C                                         ; .data.rel.ro:0000000000207C18↓o
.rodata:0000000000005B99 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000005B99                                         ; DATA XREF: .data.rel.ro:0000000000207C00↓o
.rodata:0000000000005BAD aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000207C08↓o
.rodata:0000000000005BAF aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000207C10↓o
.rodata:0000000000005BB7 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000207C28↓o
.rodata:0000000000005BBF                 align 20h
.rodata:0000000000005BC0 jpt_2A91        dd offset loc_383A - 5BC0h
.rodata:0000000000005BC0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000005BC0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000005BC0                 dd offset loc_2A93 - 5BC0h ; jump table for switch statement
.rodata:0000000000005BC0                 dd offset loc_3A68 - 5BC0h
.rodata:0000000000005BC0                 dd offset loc_3874 - 5BC0h
.rodata:0000000000005BC0                 dd offset loc_3664 - 5BC0h
.rodata:0000000000005BC0                 dd offset loc_36C0 - 5BC0h
.rodata:0000000000005BC0                 dd offset loc_3715 - 5BC0h
.rodata:0000000000005BC0                 dd offset loc_375A - 5BC0h
.rodata:0000000000005BC0                 dd offset loc_3794 - 5BC0h
.rodata:0000000000005BC0                 dd offset loc_3794 - 5BC0h
.rodata:0000000000005BC0                 dd offset loc_3794 - 5BC0h
.rodata:0000000000005BEC jpt_2BEE        dd offset loc_2E10 - 5BECh, offset def_2BEE - 5BECh, offset def_2BEE - 5BECh
.rodata:0000000000005BEC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000005BEC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000005BEC                 dd offset def_2BEE - 5BECh, offset def_2BEE - 5BECh, offset def_2BEE - 5BECh ; jump table for switch statement
.rodata:0000000000005BEC                 dd offset def_2BEE - 5BECh, offset loc_2E50 - 5BECh, offset loc_2D58 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2D18 - 5BECh, offset loc_2EE0 - 5BECh, offset loc_2ED0 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2EC0 - 5BECh, offset loc_2EB0 - 5BECh, offset def_2BEE - 5BECh
.rodata:0000000000005BEC                 dd offset def_2BEE - 5BECh, offset def_2BEE - 5BECh, offset def_2BEE - 5BECh
.rodata:0000000000005BEC                 dd offset def_2BEE - 5BECh, offset def_2BEE - 5BECh, offset def_2BEE - 5BECh
.rodata:0000000000005BEC                 dd offset def_2BEE - 5BECh, offset def_2BEE - 5BECh, offset def_2BEE - 5BECh
.rodata:0000000000005BEC                 dd offset def_2BEE - 5BECh, offset def_2BEE - 5BECh, offset def_2BEE - 5BECh
.rodata:0000000000005BEC                 dd offset def_2BEE - 5BECh, offset def_2BEE - 5BECh, offset def_2BEE - 5BECh
.rodata:0000000000005BEC                 dd offset def_2BEE - 5BECh, offset def_2BEE - 5BECh, offset loc_2EA0 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E90 - 5BECh, offset loc_2E90 - 5BECh, offset loc_2E60 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E90 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E90 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2CF3 - 5BECh, offset loc_2E90 - 5BECh, offset loc_2E90 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E90 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E90 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E90 - 5BECh, offset loc_2E90 - 5BECh, offset loc_2E90 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2CC3 - 5BECh, offset def_2BEE - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E90 - 5BECh, offset loc_2D68 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E90 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E90 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh, offset loc_2E38 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2BF3 - 5BECh, offset loc_2E90 - 5BECh, offset loc_2BF3 - 5BECh
.rodata:0000000000005BEC                 dd offset loc_2E60 - 5BECh
.rodata:0000000000005DE8 jpt_2F7A        dd offset loc_2FE0 - 5DE8h, offset def_2F7A - 5DE8h, offset def_2F7A - 5DE8h
.rodata:0000000000005DE8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000005DE8                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000005DE8                 dd offset def_2F7A - 5DE8h, offset def_2F7A - 5DE8h, offset def_2F7A - 5DE8h ; jump table for switch statement
.rodata:0000000000005DE8                 dd offset def_2F7A - 5DE8h, offset loc_2FD0 - 5DE8h, offset loc_3120 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3108 - 5DE8h, offset loc_2FB8 - 5DE8h, offset loc_30F8 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_2FA0 - 5DE8h, offset loc_30E0 - 5DE8h, offset def_2F7A - 5DE8h
.rodata:0000000000005DE8                 dd offset def_2F7A - 5DE8h, offset def_2F7A - 5DE8h, offset def_2F7A - 5DE8h
.rodata:0000000000005DE8                 dd offset def_2F7A - 5DE8h, offset def_2F7A - 5DE8h, offset def_2F7A - 5DE8h
.rodata:0000000000005DE8                 dd offset def_2F7A - 5DE8h, offset def_2F7A - 5DE8h, offset def_2F7A - 5DE8h
.rodata:0000000000005DE8                 dd offset def_2F7A - 5DE8h, offset def_2F7A - 5DE8h, offset def_2F7A - 5DE8h
.rodata:0000000000005DE8                 dd offset def_2F7A - 5DE8h, offset def_2F7A - 5DE8h, offset def_2F7A - 5DE8h
.rodata:0000000000005DE8                 dd offset def_2F7A - 5DE8h, offset def_2F7A - 5DE8h, offset loc_30C8 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_30B0 - 5DE8h, offset loc_30B0 - 5DE8h, offset loc_3098 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_30B0 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_30B0 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_2CF0 - 5DE8h, offset loc_30B0 - 5DE8h, offset loc_30B0 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_30B0 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_30B0 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_30B0 - 5DE8h, offset loc_30B0 - 5DE8h, offset loc_30B0 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_2CC0 - 5DE8h, offset def_2F7A - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_30B0 - 5DE8h, offset loc_2F80 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_30B0 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_30B0 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h, offset loc_3080 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_2BF0 - 5DE8h, offset loc_30B0 - 5DE8h, offset loc_2BF0 - 5DE8h
.rodata:0000000000005DE8                 dd offset loc_3098 - 5DE8h
.rodata:0000000000005FE4                 align 20h
.rodata:0000000000006000                 public quoting_style_vals
.rodata:0000000000006000 quoting_style_vals db    0
.rodata:0000000000006001                 db    0
.rodata:0000000000006002                 db    0
.rodata:0000000000006003                 db    0
.rodata:0000000000006004                 db    1
.rodata:0000000000006005                 db    0
.rodata:0000000000006006                 db    0
.rodata:0000000000006007                 db    0
.rodata:0000000000006008                 db    2
.rodata:0000000000006009                 db    0
.rodata:000000000000600A                 db    0
.rodata:000000000000600B                 db    0
.rodata:000000000000600C                 db    3
.rodata:000000000000600D                 db    0
.rodata:000000000000600E                 db    0
.rodata:000000000000600F                 db    0
.rodata:0000000000006010                 db    4
.rodata:0000000000006011                 db    0
.rodata:0000000000006012                 db    0
.rodata:0000000000006013                 db    0
.rodata:0000000000006014                 db    5
.rodata:0000000000006015                 db    0
.rodata:0000000000006016                 db    0
.rodata:0000000000006017                 db    0
.rodata:0000000000006018                 db    6
.rodata:0000000000006019                 db    0
.rodata:000000000000601A                 db    0
.rodata:000000000000601B                 db    0
.rodata:000000000000601C                 db    7
.rodata:000000000000601D                 db    0
.rodata:000000000000601E                 db    0
.rodata:000000000000601F                 db    0
.rodata:0000000000006020                 db    8
.rodata:0000000000006021                 db    0
.rodata:0000000000006022                 db    0
.rodata:0000000000006023                 db    0
.rodata:0000000000006024                 db    9
.rodata:0000000000006025                 db    0
.rodata:0000000000006026                 db    0
.rodata:0000000000006027                 db    0
.rodata:0000000000006028 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000006034 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000603B ; const char aC_0[]
.rodata:000000000000603B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_45EC↑o
.rodata:000000000000603F ; const char aWrittenByS[]
.rodata:000000000000603F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000603F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000604F ; const char aWrittenBySAndS[]
.rodata:000000000000604F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000604F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000006066 ; const char aWrittenBySSAnd[]
.rodata:0000000000006066 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000006066                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000006082 ; const char aReportBugsToS[]
.rodata:0000000000006082 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000006082                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000006097 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000006097                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:00000000000060AD ; const char aSHomePageS[]
.rodata:00000000000060AD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:00000000000060AD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:00000000000060C1                 align 8
.rodata:00000000000060C8 ; const char aLicenseGplv3Gn[]
.rodata:00000000000060C8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:00000000000060C8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:00000000000060C8                 db 'ses/gpl.html>.',0Ah
.rodata:00000000000060C8                 db 'This is free software: you are free to change and redistribute it'
.rodata:00000000000060C8                 db '.',0Ah
.rodata:00000000000060C8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:00000000000060C8                 db 0Ah,0
.rodata:0000000000006194                 align 8
.rodata:0000000000006198 ; const char aWrittenBySSSAn[]
.rodata:0000000000006198 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006198                                         ; DATA XREF: version_etc_arn:loc_4840↑o
.rodata:0000000000006198                 db 'and %s.',0Ah,0
.rodata:00000000000061B8 ; const char aWrittenBySSSSA[]
.rodata:00000000000061B8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000061B8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:00000000000061B8                 db '%s, and %s.',0Ah,0
.rodata:00000000000061DC                 align 20h
.rodata:00000000000061E0 ; const char aWrittenBySSSSS_1[]
.rodata:00000000000061E0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000061E0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:00000000000061E0                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000006208 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000006208 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006208                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000006208                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000006234                 align 8
.rodata:0000000000006238 ; const char aWrittenBySSSSS[]
.rodata:0000000000006238 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006238                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000006238                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006238                 db 'and %s.',0Ah,0
.rodata:0000000000006268 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000006268 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006268                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000006268                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006268                 db '%s, and %s.',0Ah,0
.rodata:000000000000629C                 align 20h
.rodata:00000000000062A0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000062A0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:00000000000062A0                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000062A0                 db '%s, %s, and others.',0Ah,0
.rodata:00000000000062DC                 align 20h
.rodata:00000000000062E0 ; const char aGeneralHelpUsi[]
.rodata:00000000000062E0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:00000000000062E0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:00000000000062E0                 db 0
.rodata:0000000000006321                 align 8
.rodata:0000000000006328 jpt_4654        dd offset loc_46D6 - 6328h
.rodata:0000000000006328                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000006328                                         ; version_etc_arn+9D↑r
.rodata:0000000000006328                 dd offset loc_4768 - 6328h ; jump table for switch statement
.rodata:0000000000006328                 dd offset loc_47A8 - 6328h
.rodata:0000000000006328                 dd offset loc_47F0 - 6328h
.rodata:0000000000006328                 dd offset loc_4840 - 6328h
.rodata:0000000000006328                 dd offset loc_4898 - 6328h
.rodata:0000000000006328                 dd offset loc_48C8 - 6328h
.rodata:0000000000006328                 dd offset loc_4930 - 6328h
.rodata:0000000000006328                 dd offset loc_4660 - 6328h
.rodata:0000000000006328                 dd offset loc_4710 - 6328h
.rodata:0000000000006350                 align 20h
.rodata:0000000000006360                 public version_etc_copyright
.rodata:0000000000006360 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000006360                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000638F ; const char aMemoryExhauste[]
.rodata:000000000000638F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:00000000000063A0 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:00000000000063A2 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_5350↑o
.rodata:00000000000063A8 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000063A8                                         ; locale_charset:loc_53A0↑o
.rodata:00000000000063A8 _rodata         ends
.rodata:00000000000063A8
LOAD:00000000000063AE ; ===========================================================================
LOAD:00000000000063AE
LOAD:00000000000063AE ; Segment type: Pure code
LOAD:00000000000063AE ; Segment permissions: Read/Execute
LOAD:00000000000063AE LOAD            segment byte public 'CODE' use64
LOAD:00000000000063AE                 assume cs:LOAD
LOAD:00000000000063AE                 ;org 63AEh
LOAD:00000000000063AE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000063AE                 align 10h
LOAD:00000000000063AE LOAD            ends
LOAD:00000000000063AE
.eh_frame_hdr:00000000000063B0 ; ===========================================================================
.eh_frame_hdr:00000000000063B0
.eh_frame_hdr:00000000000063B0 ; Segment type: Pure data
.eh_frame_hdr:00000000000063B0 ; Segment permissions: Read
.eh_frame_hdr:00000000000063B0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000063B0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000063B0                 ;org 63B0h
.eh_frame_hdr:00000000000063B0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000063B1                 db  1Bh
.eh_frame_hdr:00000000000063B2                 db    3
.eh_frame_hdr:00000000000063B3                 db  3Bh ; ;
.eh_frame_hdr:00000000000063B4                 db  9Ch
.eh_frame_hdr:00000000000063B5                 db    2
.eh_frame_hdr:00000000000063B6                 db    0
.eh_frame_hdr:00000000000063B7                 db    0
.eh_frame_hdr:00000000000063B8                 db  52h ; R
.eh_frame_hdr:00000000000063B9                 db    0
.eh_frame_hdr:00000000000063BA                 db    0
.eh_frame_hdr:00000000000063BB                 db    0
.eh_frame_hdr:00000000000063BC                 db  70h ; p
.eh_frame_hdr:00000000000063BD                 db 0B1h
.eh_frame_hdr:00000000000063BE                 db 0FFh
.eh_frame_hdr:00000000000063BF                 db 0FFh
.eh_frame_hdr:00000000000063C0                 db 0E8h
.eh_frame_hdr:00000000000063C1                 db    2
.eh_frame_hdr:00000000000063C2                 db    0
.eh_frame_hdr:00000000000063C3                 db    0
.eh_frame_hdr:00000000000063C4                 db 0A0h
.eh_frame_hdr:00000000000063C5                 db 0B4h
.eh_frame_hdr:00000000000063C6                 db 0FFh
.eh_frame_hdr:00000000000063C7                 db 0FFh
.eh_frame_hdr:00000000000063C8                 db  10h
.eh_frame_hdr:00000000000063C9                 db    3
.eh_frame_hdr:00000000000063CA                 db    0
.eh_frame_hdr:00000000000063CB                 db    0
.eh_frame_hdr:00000000000063CC                 db 0B0h
.eh_frame_hdr:00000000000063CD                 db 0B4h
.eh_frame_hdr:00000000000063CE                 db 0FFh
.eh_frame_hdr:00000000000063CF                 db 0FFh
.eh_frame_hdr:00000000000063D0                 db 0A4h
.eh_frame_hdr:00000000000063D1                 db    3
.eh_frame_hdr:00000000000063D2                 db    0
.eh_frame_hdr:00000000000063D3                 db    0
.eh_frame_hdr:00000000000063D4                 db 0D0h
.eh_frame_hdr:00000000000063D5                 db 0B6h
.eh_frame_hdr:00000000000063D6                 db 0FFh
.eh_frame_hdr:00000000000063D7                 db 0FFh
.eh_frame_hdr:00000000000063D8                 db 0B8h
.eh_frame_hdr:00000000000063D9                 db    2
.eh_frame_hdr:00000000000063DA                 db    0
.eh_frame_hdr:00000000000063DB                 db    0
.eh_frame_hdr:00000000000063DC                 db 0E0h
.eh_frame_hdr:00000000000063DD                 db 0B7h
.eh_frame_hdr:00000000000063DE                 db 0FFh
.eh_frame_hdr:00000000000063DF                 db 0FFh
.eh_frame_hdr:00000000000063E0                 db  28h ; (
.eh_frame_hdr:00000000000063E1                 db    3
.eh_frame_hdr:00000000000063E2                 db    0
.eh_frame_hdr:00000000000063E3                 db    0
.eh_frame_hdr:00000000000063E4                 db 0F0h
.eh_frame_hdr:00000000000063E5                 db 0BBh
.eh_frame_hdr:00000000000063E6                 db 0FFh
.eh_frame_hdr:00000000000063E7                 db 0FFh
.eh_frame_hdr:00000000000063E8                 db  78h ; x
.eh_frame_hdr:00000000000063E9                 db    3
.eh_frame_hdr:00000000000063EA                 db    0
.eh_frame_hdr:00000000000063EB                 db    0
.eh_frame_hdr:00000000000063EC                 db  80h
.eh_frame_hdr:00000000000063ED                 db 0BFh
.eh_frame_hdr:00000000000063EE                 db 0FFh
.eh_frame_hdr:00000000000063EF                 db 0FFh
.eh_frame_hdr:00000000000063F0                 db 0E0h
.eh_frame_hdr:00000000000063F1                 db    3
.eh_frame_hdr:00000000000063F2                 db    0
.eh_frame_hdr:00000000000063F3                 db    0
.eh_frame_hdr:00000000000063F4                 db  90h
.eh_frame_hdr:00000000000063F5                 db 0BFh
.eh_frame_hdr:00000000000063F6                 db 0FFh
.eh_frame_hdr:00000000000063F7                 db 0FFh
.eh_frame_hdr:00000000000063F8                 db 0F4h
.eh_frame_hdr:00000000000063F9                 db    3
.eh_frame_hdr:00000000000063FA                 db    0
.eh_frame_hdr:00000000000063FB                 db    0
.eh_frame_hdr:00000000000063FC                 db 0B0h
.eh_frame_hdr:00000000000063FD                 db 0C0h
.eh_frame_hdr:00000000000063FE                 db 0FFh
.eh_frame_hdr:00000000000063FF                 db 0FFh
.eh_frame_hdr:0000000000006400                 db  40h ; @
.eh_frame_hdr:0000000000006401                 db    4
.eh_frame_hdr:0000000000006402                 db    0
.eh_frame_hdr:0000000000006403                 db    0
.eh_frame_hdr:0000000000006404                 db  30h ; 0
.eh_frame_hdr:0000000000006405                 db 0C1h
.eh_frame_hdr:0000000000006406                 db 0FFh
.eh_frame_hdr:0000000000006407                 db 0FFh
.eh_frame_hdr:0000000000006408                 db  6Ch ; l
.eh_frame_hdr:0000000000006409                 db    4
.eh_frame_hdr:000000000000640A                 db    0
.eh_frame_hdr:000000000000640B                 db    0
.eh_frame_hdr:000000000000640C                 db  50h ; P
.eh_frame_hdr:000000000000640D                 db 0C2h
.eh_frame_hdr:000000000000640E                 db 0FFh
.eh_frame_hdr:000000000000640F                 db 0FFh
.eh_frame_hdr:0000000000006410                 db 0CCh
.eh_frame_hdr:0000000000006411                 db    4
.eh_frame_hdr:0000000000006412                 db    0
.eh_frame_hdr:0000000000006413                 db    0
.eh_frame_hdr:0000000000006414                 db 0C0h
.eh_frame_hdr:0000000000006415                 db 0C2h
.eh_frame_hdr:0000000000006416                 db 0FFh
.eh_frame_hdr:0000000000006417                 db 0FFh
.eh_frame_hdr:0000000000006418                 db  18h
.eh_frame_hdr:0000000000006419                 db    5
.eh_frame_hdr:000000000000641A                 db    0
.eh_frame_hdr:000000000000641B                 db    0
.eh_frame_hdr:000000000000641C                 db  10h
.eh_frame_hdr:000000000000641D                 db 0C3h
.eh_frame_hdr:000000000000641E                 db 0FFh
.eh_frame_hdr:000000000000641F                 db 0FFh
.eh_frame_hdr:0000000000006420                 db  58h ; X
.eh_frame_hdr:0000000000006421                 db    5
.eh_frame_hdr:0000000000006422                 db    0
.eh_frame_hdr:0000000000006423                 db    0
.eh_frame_hdr:0000000000006424                 db  20h
.eh_frame_hdr:0000000000006425                 db 0C3h
.eh_frame_hdr:0000000000006426                 db 0FFh
.eh_frame_hdr:0000000000006427                 db 0FFh
.eh_frame_hdr:0000000000006428                 db  6Ch ; l
.eh_frame_hdr:0000000000006429                 db    5
.eh_frame_hdr:000000000000642A                 db    0
.eh_frame_hdr:000000000000642B                 db    0
.eh_frame_hdr:000000000000642C                 db  30h ; 0
.eh_frame_hdr:000000000000642D                 db 0C3h
.eh_frame_hdr:000000000000642E                 db 0FFh
.eh_frame_hdr:000000000000642F                 db 0FFh
.eh_frame_hdr:0000000000006430                 db  80h
.eh_frame_hdr:0000000000006431                 db    5
.eh_frame_hdr:0000000000006432                 db    0
.eh_frame_hdr:0000000000006433                 db    0
.eh_frame_hdr:0000000000006434                 db 0E0h
.eh_frame_hdr:0000000000006435                 db 0C3h
.eh_frame_hdr:0000000000006436                 db 0FFh
.eh_frame_hdr:0000000000006437                 db 0FFh
.eh_frame_hdr:0000000000006438                 db 0B0h
.eh_frame_hdr:0000000000006439                 db    5
.eh_frame_hdr:000000000000643A                 db    0
.eh_frame_hdr:000000000000643B                 db    0
.eh_frame_hdr:000000000000643C                 db 0F0h
.eh_frame_hdr:000000000000643D                 db 0C3h
.eh_frame_hdr:000000000000643E                 db 0FFh
.eh_frame_hdr:000000000000643F                 db 0FFh
.eh_frame_hdr:0000000000006440                 db 0C4h
.eh_frame_hdr:0000000000006441                 db    5
.eh_frame_hdr:0000000000006442                 db    0
.eh_frame_hdr:0000000000006443                 db    0
.eh_frame_hdr:0000000000006444                 db  20h
.eh_frame_hdr:0000000000006445                 db 0C4h
.eh_frame_hdr:0000000000006446                 db 0FFh
.eh_frame_hdr:0000000000006447                 db 0FFh
.eh_frame_hdr:0000000000006448                 db 0E0h
.eh_frame_hdr:0000000000006449                 db    5
.eh_frame_hdr:000000000000644A                 db    0
.eh_frame_hdr:000000000000644B                 db    0
.eh_frame_hdr:000000000000644C                 db 0C0h
.eh_frame_hdr:000000000000644D                 db 0C4h
.eh_frame_hdr:000000000000644E                 db 0FFh
.eh_frame_hdr:000000000000644F                 db 0FFh
.eh_frame_hdr:0000000000006450                 db  10h
.eh_frame_hdr:0000000000006451                 db    6
.eh_frame_hdr:0000000000006452                 db    0
.eh_frame_hdr:0000000000006453                 db    0
.eh_frame_hdr:0000000000006454                 db  60h ; `
.eh_frame_hdr:0000000000006455                 db 0C5h
.eh_frame_hdr:0000000000006456                 db 0FFh
.eh_frame_hdr:0000000000006457                 db 0FFh
.eh_frame_hdr:0000000000006458                 db  30h ; 0
.eh_frame_hdr:0000000000006459                 db    6
.eh_frame_hdr:000000000000645A                 db    0
.eh_frame_hdr:000000000000645B                 db    0
.eh_frame_hdr:000000000000645C                 db  50h ; P
.eh_frame_hdr:000000000000645D                 db 0C6h
.eh_frame_hdr:000000000000645E                 db 0FFh
.eh_frame_hdr:000000000000645F                 db 0FFh
.eh_frame_hdr:0000000000006460                 db  74h ; t
.eh_frame_hdr:0000000000006461                 db    6
.eh_frame_hdr:0000000000006462                 db    0
.eh_frame_hdr:0000000000006463                 db    0
.eh_frame_hdr:0000000000006464                 db  90h
.eh_frame_hdr:0000000000006465                 db 0D8h
.eh_frame_hdr:0000000000006466                 db 0FFh
.eh_frame_hdr:0000000000006467                 db 0FFh
.eh_frame_hdr:0000000000006468                 db 0ECh
.eh_frame_hdr:0000000000006469                 db    6
.eh_frame_hdr:000000000000646A                 db    0
.eh_frame_hdr:000000000000646B                 db    0
.eh_frame_hdr:000000000000646C                 db  40h ; @
.eh_frame_hdr:000000000000646D                 db 0DAh
.eh_frame_hdr:000000000000646E                 db 0FFh
.eh_frame_hdr:000000000000646F                 db 0FFh
.eh_frame_hdr:0000000000006470                 db  58h ; X
.eh_frame_hdr:0000000000006471                 db    7
.eh_frame_hdr:0000000000006472                 db    0
.eh_frame_hdr:0000000000006473                 db    0
.eh_frame_hdr:0000000000006474                 db  80h
.eh_frame_hdr:0000000000006475                 db 0DAh
.eh_frame_hdr:0000000000006476                 db 0FFh
.eh_frame_hdr:0000000000006477                 db 0FFh
.eh_frame_hdr:0000000000006478                 db  84h
.eh_frame_hdr:0000000000006479                 db    7
.eh_frame_hdr:000000000000647A                 db    0
.eh_frame_hdr:000000000000647B                 db    0
.eh_frame_hdr:000000000000647C                 db 0A0h
.eh_frame_hdr:000000000000647D                 db 0DAh
.eh_frame_hdr:000000000000647E                 db 0FFh
.eh_frame_hdr:000000000000647F                 db 0FFh
.eh_frame_hdr:0000000000006480                 db  98h
.eh_frame_hdr:0000000000006481                 db    7
.eh_frame_hdr:0000000000006482                 db    0
.eh_frame_hdr:0000000000006483                 db    0
.eh_frame_hdr:0000000000006484                 db 0C0h
.eh_frame_hdr:0000000000006485                 db 0DAh
.eh_frame_hdr:0000000000006486                 db 0FFh
.eh_frame_hdr:0000000000006487                 db 0FFh
.eh_frame_hdr:0000000000006488                 db 0ACh
.eh_frame_hdr:0000000000006489                 db    7
.eh_frame_hdr:000000000000648A                 db    0
.eh_frame_hdr:000000000000648B                 db    0
.eh_frame_hdr:000000000000648C                 db    0
.eh_frame_hdr:000000000000648D                 db 0DBh
.eh_frame_hdr:000000000000648E                 db 0FFh
.eh_frame_hdr:000000000000648F                 db 0FFh
.eh_frame_hdr:0000000000006490                 db 0C0h
.eh_frame_hdr:0000000000006491                 db    7
.eh_frame_hdr:0000000000006492                 db    0
.eh_frame_hdr:0000000000006493                 db    0
.eh_frame_hdr:0000000000006494                 db  20h
.eh_frame_hdr:0000000000006495                 db 0DBh
.eh_frame_hdr:0000000000006496                 db 0FFh
.eh_frame_hdr:0000000000006497                 db 0FFh
.eh_frame_hdr:0000000000006498                 db 0D4h
.eh_frame_hdr:0000000000006499                 db    7
.eh_frame_hdr:000000000000649A                 db    0
.eh_frame_hdr:000000000000649B                 db    0
.eh_frame_hdr:000000000000649C                 db  50h ; P
.eh_frame_hdr:000000000000649D                 db 0DBh
.eh_frame_hdr:000000000000649E                 db 0FFh
.eh_frame_hdr:000000000000649F                 db 0FFh
.eh_frame_hdr:00000000000064A0                 db 0E8h
.eh_frame_hdr:00000000000064A1                 db    7
.eh_frame_hdr:00000000000064A2                 db    0
.eh_frame_hdr:00000000000064A3                 db    0
.eh_frame_hdr:00000000000064A4                 db 0D0h
.eh_frame_hdr:00000000000064A5                 db 0DBh
.eh_frame_hdr:00000000000064A6                 db 0FFh
.eh_frame_hdr:00000000000064A7                 db 0FFh
.eh_frame_hdr:00000000000064A8                 db  3Ch ; <
.eh_frame_hdr:00000000000064A9                 db    8
.eh_frame_hdr:00000000000064AA                 db    0
.eh_frame_hdr:00000000000064AB                 db    0
.eh_frame_hdr:00000000000064AC                 db 0C0h
.eh_frame_hdr:00000000000064AD                 db 0DCh
.eh_frame_hdr:00000000000064AE                 db 0FFh
.eh_frame_hdr:00000000000064AF                 db 0FFh
.eh_frame_hdr:00000000000064B0                 db 0A8h
.eh_frame_hdr:00000000000064B1                 db    8
.eh_frame_hdr:00000000000064B2                 db    0
.eh_frame_hdr:00000000000064B3                 db    0
.eh_frame_hdr:00000000000064B4                 db 0D0h
.eh_frame_hdr:00000000000064B5                 db 0DCh
.eh_frame_hdr:00000000000064B6                 db 0FFh
.eh_frame_hdr:00000000000064B7                 db 0FFh
.eh_frame_hdr:00000000000064B8                 db 0BCh
.eh_frame_hdr:00000000000064B9                 db    8
.eh_frame_hdr:00000000000064BA                 db    0
.eh_frame_hdr:00000000000064BB                 db    0
.eh_frame_hdr:00000000000064BC                 db  70h ; p
.eh_frame_hdr:00000000000064BD                 db 0DDh
.eh_frame_hdr:00000000000064BE                 db 0FFh
.eh_frame_hdr:00000000000064BF                 db 0FFh
.eh_frame_hdr:00000000000064C0                 db 0E8h
.eh_frame_hdr:00000000000064C1                 db    8
.eh_frame_hdr:00000000000064C2                 db    0
.eh_frame_hdr:00000000000064C3                 db    0
.eh_frame_hdr:00000000000064C4                 db  90h
.eh_frame_hdr:00000000000064C5                 db 0DDh
.eh_frame_hdr:00000000000064C6                 db 0FFh
.eh_frame_hdr:00000000000064C7                 db 0FFh
.eh_frame_hdr:00000000000064C8                 db 0FCh
.eh_frame_hdr:00000000000064C9                 db    8
.eh_frame_hdr:00000000000064CA                 db    0
.eh_frame_hdr:00000000000064CB                 db    0
.eh_frame_hdr:00000000000064CC                 db 0A0h
.eh_frame_hdr:00000000000064CD                 db 0DDh
.eh_frame_hdr:00000000000064CE                 db 0FFh
.eh_frame_hdr:00000000000064CF                 db 0FFh
.eh_frame_hdr:00000000000064D0                 db  10h
.eh_frame_hdr:00000000000064D1                 db    9
.eh_frame_hdr:00000000000064D2                 db    0
.eh_frame_hdr:00000000000064D3                 db    0
.eh_frame_hdr:00000000000064D4                 db 0C0h
.eh_frame_hdr:00000000000064D5                 db 0DDh
.eh_frame_hdr:00000000000064D6                 db 0FFh
.eh_frame_hdr:00000000000064D7                 db 0FFh
.eh_frame_hdr:00000000000064D8                 db  24h ; $
.eh_frame_hdr:00000000000064D9                 db    9
.eh_frame_hdr:00000000000064DA                 db    0
.eh_frame_hdr:00000000000064DB                 db    0
.eh_frame_hdr:00000000000064DC                 db 0E0h
.eh_frame_hdr:00000000000064DD                 db 0DDh
.eh_frame_hdr:00000000000064DE                 db 0FFh
.eh_frame_hdr:00000000000064DF                 db 0FFh
.eh_frame_hdr:00000000000064E0                 db  38h ; 8
.eh_frame_hdr:00000000000064E1                 db    9
.eh_frame_hdr:00000000000064E2                 db    0
.eh_frame_hdr:00000000000064E3                 db    0
.eh_frame_hdr:00000000000064E4                 db  70h ; p
.eh_frame_hdr:00000000000064E5                 db 0DEh
.eh_frame_hdr:00000000000064E6                 db 0FFh
.eh_frame_hdr:00000000000064E7                 db 0FFh
.eh_frame_hdr:00000000000064E8                 db  54h ; T
.eh_frame_hdr:00000000000064E9                 db    9
.eh_frame_hdr:00000000000064EA                 db    0
.eh_frame_hdr:00000000000064EB                 db    0
.eh_frame_hdr:00000000000064EC                 db    0
.eh_frame_hdr:00000000000064ED                 db 0DFh
.eh_frame_hdr:00000000000064EE                 db 0FFh
.eh_frame_hdr:00000000000064EF                 db 0FFh
.eh_frame_hdr:00000000000064F0                 db  70h ; p
.eh_frame_hdr:00000000000064F1                 db    9
.eh_frame_hdr:00000000000064F2                 db    0
.eh_frame_hdr:00000000000064F3                 db    0
.eh_frame_hdr:00000000000064F4                 db  10h
.eh_frame_hdr:00000000000064F5                 db 0DFh
.eh_frame_hdr:00000000000064F6                 db 0FFh
.eh_frame_hdr:00000000000064F7                 db 0FFh
.eh_frame_hdr:00000000000064F8                 db  84h
.eh_frame_hdr:00000000000064F9                 db    9
.eh_frame_hdr:00000000000064FA                 db    0
.eh_frame_hdr:00000000000064FB                 db    0
.eh_frame_hdr:00000000000064FC                 db  20h
.eh_frame_hdr:00000000000064FD                 db 0DFh
.eh_frame_hdr:00000000000064FE                 db 0FFh
.eh_frame_hdr:00000000000064FF                 db 0FFh
.eh_frame_hdr:0000000000006500                 db  98h
.eh_frame_hdr:0000000000006501                 db    9
.eh_frame_hdr:0000000000006502                 db    0
.eh_frame_hdr:0000000000006503                 db    0
.eh_frame_hdr:0000000000006504                 db 0C0h
.eh_frame_hdr:0000000000006505                 db 0DFh
.eh_frame_hdr:0000000000006506                 db 0FFh
.eh_frame_hdr:0000000000006507                 db 0FFh
.eh_frame_hdr:0000000000006508                 db 0B4h
.eh_frame_hdr:0000000000006509                 db    9
.eh_frame_hdr:000000000000650A                 db    0
.eh_frame_hdr:000000000000650B                 db    0
.eh_frame_hdr:000000000000650C                 db 0D0h
.eh_frame_hdr:000000000000650D                 db 0DFh
.eh_frame_hdr:000000000000650E                 db 0FFh
.eh_frame_hdr:000000000000650F                 db 0FFh
.eh_frame_hdr:0000000000006510                 db 0C8h
.eh_frame_hdr:0000000000006511                 db    9
.eh_frame_hdr:0000000000006512                 db    0
.eh_frame_hdr:0000000000006513                 db    0
.eh_frame_hdr:0000000000006514                 db 0F0h
.eh_frame_hdr:0000000000006515                 db 0DFh
.eh_frame_hdr:0000000000006516                 db 0FFh
.eh_frame_hdr:0000000000006517                 db 0FFh
.eh_frame_hdr:0000000000006518                 db 0DCh
.eh_frame_hdr:0000000000006519                 db    9
.eh_frame_hdr:000000000000651A                 db    0
.eh_frame_hdr:000000000000651B                 db    0
.eh_frame_hdr:000000000000651C                 db    0
.eh_frame_hdr:000000000000651D                 db 0E0h
.eh_frame_hdr:000000000000651E                 db 0FFh
.eh_frame_hdr:000000000000651F                 db 0FFh
.eh_frame_hdr:0000000000006520                 db 0F0h
.eh_frame_hdr:0000000000006521                 db    9
.eh_frame_hdr:0000000000006522                 db    0
.eh_frame_hdr:0000000000006523                 db    0
.eh_frame_hdr:0000000000006524                 db  90h
.eh_frame_hdr:0000000000006525                 db 0E0h
.eh_frame_hdr:0000000000006526                 db 0FFh
.eh_frame_hdr:0000000000006527                 db 0FFh
.eh_frame_hdr:0000000000006528                 db  0Ch
.eh_frame_hdr:0000000000006529                 db  0Ah
.eh_frame_hdr:000000000000652A                 db    0
.eh_frame_hdr:000000000000652B                 db    0
.eh_frame_hdr:000000000000652C                 db  30h ; 0
.eh_frame_hdr:000000000000652D                 db 0E1h
.eh_frame_hdr:000000000000652E                 db 0FFh
.eh_frame_hdr:000000000000652F                 db 0FFh
.eh_frame_hdr:0000000000006530                 db  28h ; (
.eh_frame_hdr:0000000000006531                 db  0Ah
.eh_frame_hdr:0000000000006532                 db    0
.eh_frame_hdr:0000000000006533                 db    0
.eh_frame_hdr:0000000000006534                 db  40h ; @
.eh_frame_hdr:0000000000006535                 db 0E1h
.eh_frame_hdr:0000000000006536                 db 0FFh
.eh_frame_hdr:0000000000006537                 db 0FFh
.eh_frame_hdr:0000000000006538                 db  3Ch ; <
.eh_frame_hdr:0000000000006539                 db  0Ah
.eh_frame_hdr:000000000000653A                 db    0
.eh_frame_hdr:000000000000653B                 db    0
.eh_frame_hdr:000000000000653C                 db  60h ; `
.eh_frame_hdr:000000000000653D                 db 0E1h
.eh_frame_hdr:000000000000653E                 db 0FFh
.eh_frame_hdr:000000000000653F                 db 0FFh
.eh_frame_hdr:0000000000006540                 db  50h ; P
.eh_frame_hdr:0000000000006541                 db  0Ah
.eh_frame_hdr:0000000000006542                 db    0
.eh_frame_hdr:0000000000006543                 db    0
.eh_frame_hdr:0000000000006544                 db  80h
.eh_frame_hdr:0000000000006545                 db 0E1h
.eh_frame_hdr:0000000000006546                 db 0FFh
.eh_frame_hdr:0000000000006547                 db 0FFh
.eh_frame_hdr:0000000000006548                 db  64h ; d
.eh_frame_hdr:0000000000006549                 db  0Ah
.eh_frame_hdr:000000000000654A                 db    0
.eh_frame_hdr:000000000000654B                 db    0
.eh_frame_hdr:000000000000654C                 db  90h
.eh_frame_hdr:000000000000654D                 db 0E1h
.eh_frame_hdr:000000000000654E                 db 0FFh
.eh_frame_hdr:000000000000654F                 db 0FFh
.eh_frame_hdr:0000000000006550                 db  78h ; x
.eh_frame_hdr:0000000000006551                 db  0Ah
.eh_frame_hdr:0000000000006552                 db    0
.eh_frame_hdr:0000000000006553                 db    0
.eh_frame_hdr:0000000000006554                 db 0B0h
.eh_frame_hdr:0000000000006555                 db 0E1h
.eh_frame_hdr:0000000000006556                 db 0FFh
.eh_frame_hdr:0000000000006557                 db 0FFh
.eh_frame_hdr:0000000000006558                 db  8Ch
.eh_frame_hdr:0000000000006559                 db  0Ah
.eh_frame_hdr:000000000000655A                 db    0
.eh_frame_hdr:000000000000655B                 db    0
.eh_frame_hdr:000000000000655C                 db 0D0h
.eh_frame_hdr:000000000000655D                 db 0E1h
.eh_frame_hdr:000000000000655E                 db 0FFh
.eh_frame_hdr:000000000000655F                 db 0FFh
.eh_frame_hdr:0000000000006560                 db 0A0h
.eh_frame_hdr:0000000000006561                 db  0Ah
.eh_frame_hdr:0000000000006562                 db    0
.eh_frame_hdr:0000000000006563                 db    0
.eh_frame_hdr:0000000000006564                 db 0F0h
.eh_frame_hdr:0000000000006565                 db 0E1h
.eh_frame_hdr:0000000000006566                 db 0FFh
.eh_frame_hdr:0000000000006567                 db 0FFh
.eh_frame_hdr:0000000000006568                 db 0B8h
.eh_frame_hdr:0000000000006569                 db  0Ah
.eh_frame_hdr:000000000000656A                 db    0
.eh_frame_hdr:000000000000656B                 db    0
.eh_frame_hdr:000000000000656C                 db    0
.eh_frame_hdr:000000000000656D                 db 0E2h
.eh_frame_hdr:000000000000656E                 db 0FFh
.eh_frame_hdr:000000000000656F                 db 0FFh
.eh_frame_hdr:0000000000006570                 db 0D0h
.eh_frame_hdr:0000000000006571                 db  0Ah
.eh_frame_hdr:0000000000006572                 db    0
.eh_frame_hdr:0000000000006573                 db    0
.eh_frame_hdr:0000000000006574                 db  20h
.eh_frame_hdr:0000000000006575                 db 0E6h
.eh_frame_hdr:0000000000006576                 db 0FFh
.eh_frame_hdr:0000000000006577                 db 0FFh
.eh_frame_hdr:0000000000006578                 db 0E4h
.eh_frame_hdr:0000000000006579                 db  0Bh
.eh_frame_hdr:000000000000657A                 db    0
.eh_frame_hdr:000000000000657B                 db    0
.eh_frame_hdr:000000000000657C                 db  40h ; @
.eh_frame_hdr:000000000000657D                 db 0E6h
.eh_frame_hdr:000000000000657E                 db 0FFh
.eh_frame_hdr:000000000000657F                 db 0FFh
.eh_frame_hdr:0000000000006580                 db 0F8h
.eh_frame_hdr:0000000000006581                 db  0Bh
.eh_frame_hdr:0000000000006582                 db    0
.eh_frame_hdr:0000000000006583                 db    0
.eh_frame_hdr:0000000000006584                 db 0C0h
.eh_frame_hdr:0000000000006585                 db 0E6h
.eh_frame_hdr:0000000000006586                 db 0FFh
.eh_frame_hdr:0000000000006587                 db 0FFh
.eh_frame_hdr:0000000000006588                 db  14h
.eh_frame_hdr:0000000000006589                 db  0Ch
.eh_frame_hdr:000000000000658A                 db    0
.eh_frame_hdr:000000000000658B                 db    0
.eh_frame_hdr:000000000000658C                 db 0A0h
.eh_frame_hdr:000000000000658D                 db 0E7h
.eh_frame_hdr:000000000000658E                 db 0FFh
.eh_frame_hdr:000000000000658F                 db 0FFh
.eh_frame_hdr:0000000000006590                 db  40h ; @
.eh_frame_hdr:0000000000006591                 db  0Ch
.eh_frame_hdr:0000000000006592                 db    0
.eh_frame_hdr:0000000000006593                 db    0
.eh_frame_hdr:0000000000006594                 db  20h
.eh_frame_hdr:0000000000006595                 db 0E8h
.eh_frame_hdr:0000000000006596                 db 0FFh
.eh_frame_hdr:0000000000006597                 db 0FFh
.eh_frame_hdr:0000000000006598                 db  60h ; `
.eh_frame_hdr:0000000000006599                 db  0Ch
.eh_frame_hdr:000000000000659A                 db    0
.eh_frame_hdr:000000000000659B                 db    0
.eh_frame_hdr:000000000000659C                 db  40h ; @
.eh_frame_hdr:000000000000659D                 db 0E8h
.eh_frame_hdr:000000000000659E                 db 0FFh
.eh_frame_hdr:000000000000659F                 db 0FFh
.eh_frame_hdr:00000000000065A0                 db  7Ch ; |
.eh_frame_hdr:00000000000065A1                 db  0Ch
.eh_frame_hdr:00000000000065A2                 db    0
.eh_frame_hdr:00000000000065A3                 db    0
.eh_frame_hdr:00000000000065A4                 db  70h ; p
.eh_frame_hdr:00000000000065A5                 db 0E8h
.eh_frame_hdr:00000000000065A6                 db 0FFh
.eh_frame_hdr:00000000000065A7                 db 0FFh
.eh_frame_hdr:00000000000065A8                 db  90h
.eh_frame_hdr:00000000000065A9                 db  0Ch
.eh_frame_hdr:00000000000065AA                 db    0
.eh_frame_hdr:00000000000065AB                 db    0
.eh_frame_hdr:00000000000065AC                 db  80h
.eh_frame_hdr:00000000000065AD                 db 0E8h
.eh_frame_hdr:00000000000065AE                 db 0FFh
.eh_frame_hdr:00000000000065AF                 db 0FFh
.eh_frame_hdr:00000000000065B0                 db 0A4h
.eh_frame_hdr:00000000000065B1                 db  0Ch
.eh_frame_hdr:00000000000065B2                 db    0
.eh_frame_hdr:00000000000065B3                 db    0
.eh_frame_hdr:00000000000065B4                 db 0C0h
.eh_frame_hdr:00000000000065B5                 db 0E8h
.eh_frame_hdr:00000000000065B6                 db 0FFh
.eh_frame_hdr:00000000000065B7                 db 0FFh
.eh_frame_hdr:00000000000065B8                 db 0C8h
.eh_frame_hdr:00000000000065B9                 db  0Ch
.eh_frame_hdr:00000000000065BA                 db    0
.eh_frame_hdr:00000000000065BB                 db    0
.eh_frame_hdr:00000000000065BC                 db 0F0h
.eh_frame_hdr:00000000000065BD                 db 0E8h
.eh_frame_hdr:00000000000065BE                 db 0FFh
.eh_frame_hdr:00000000000065BF                 db 0FFh
.eh_frame_hdr:00000000000065C0                 db 0DCh
.eh_frame_hdr:00000000000065C1                 db  0Ch
.eh_frame_hdr:00000000000065C2                 db    0
.eh_frame_hdr:00000000000065C3                 db    0
.eh_frame_hdr:00000000000065C4                 db  80h
.eh_frame_hdr:00000000000065C5                 db 0E9h
.eh_frame_hdr:00000000000065C6                 db 0FFh
.eh_frame_hdr:00000000000065C7                 db 0FFh
.eh_frame_hdr:00000000000065C8                 db 0F4h
.eh_frame_hdr:00000000000065C9                 db  0Ch
.eh_frame_hdr:00000000000065CA                 db    0
.eh_frame_hdr:00000000000065CB                 db    0
.eh_frame_hdr:00000000000065CC                 db 0D0h
.eh_frame_hdr:00000000000065CD                 db 0E9h
.eh_frame_hdr:00000000000065CE                 db 0FFh
.eh_frame_hdr:00000000000065CF                 db 0FFh
.eh_frame_hdr:00000000000065D0                 db  0Ch
.eh_frame_hdr:00000000000065D1                 db  0Dh
.eh_frame_hdr:00000000000065D2                 db    0
.eh_frame_hdr:00000000000065D3                 db    0
.eh_frame_hdr:00000000000065D4                 db 0F0h
.eh_frame_hdr:00000000000065D5                 db 0E9h
.eh_frame_hdr:00000000000065D6                 db 0FFh
.eh_frame_hdr:00000000000065D7                 db 0FFh
.eh_frame_hdr:00000000000065D8                 db  28h ; (
.eh_frame_hdr:00000000000065D9                 db  0Dh
.eh_frame_hdr:00000000000065DA                 db    0
.eh_frame_hdr:00000000000065DB                 db    0
.eh_frame_hdr:00000000000065DC                 db  20h
.eh_frame_hdr:00000000000065DD                 db 0EAh
.eh_frame_hdr:00000000000065DE                 db 0FFh
.eh_frame_hdr:00000000000065DF                 db 0FFh
.eh_frame_hdr:00000000000065E0                 db  44h ; D
.eh_frame_hdr:00000000000065E1                 db  0Dh
.eh_frame_hdr:00000000000065E2                 db    0
.eh_frame_hdr:00000000000065E3                 db    0
.eh_frame_hdr:00000000000065E4                 db  50h ; P
.eh_frame_hdr:00000000000065E5                 db 0EAh
.eh_frame_hdr:00000000000065E6                 db 0FFh
.eh_frame_hdr:00000000000065E7                 db 0FFh
.eh_frame_hdr:00000000000065E8                 db  6Ch ; l
.eh_frame_hdr:00000000000065E9                 db  0Dh
.eh_frame_hdr:00000000000065EA                 db    0
.eh_frame_hdr:00000000000065EB                 db    0
.eh_frame_hdr:00000000000065EC                 db  70h ; p
.eh_frame_hdr:00000000000065ED                 db 0EAh
.eh_frame_hdr:00000000000065EE                 db 0FFh
.eh_frame_hdr:00000000000065EF                 db 0FFh
.eh_frame_hdr:00000000000065F0                 db  88h
.eh_frame_hdr:00000000000065F1                 db  0Dh
.eh_frame_hdr:00000000000065F2                 db    0
.eh_frame_hdr:00000000000065F3                 db    0
.eh_frame_hdr:00000000000065F4                 db 0B0h
.eh_frame_hdr:00000000000065F5                 db 0EAh
.eh_frame_hdr:00000000000065F6                 db 0FFh
.eh_frame_hdr:00000000000065F7                 db 0FFh
.eh_frame_hdr:00000000000065F8                 db 0A0h
.eh_frame_hdr:00000000000065F9                 db  0Dh
.eh_frame_hdr:00000000000065FA                 db    0
.eh_frame_hdr:00000000000065FB                 db    0
.eh_frame_hdr:00000000000065FC                 db  30h ; 0
.eh_frame_hdr:00000000000065FD                 db 0EBh
.eh_frame_hdr:00000000000065FE                 db 0FFh
.eh_frame_hdr:00000000000065FF                 db 0FFh
.eh_frame_hdr:0000000000006600                 db 0D8h
.eh_frame_hdr:0000000000006601                 db  0Dh
.eh_frame_hdr:0000000000006602                 db    0
.eh_frame_hdr:0000000000006603                 db    0
.eh_frame_hdr:0000000000006604                 db 0B0h
.eh_frame_hdr:0000000000006605                 db 0EDh
.eh_frame_hdr:0000000000006606                 db 0FFh
.eh_frame_hdr:0000000000006607                 db 0FFh
.eh_frame_hdr:0000000000006608                 db  10h
.eh_frame_hdr:0000000000006609                 db  0Eh
.eh_frame_hdr:000000000000660A                 db    0
.eh_frame_hdr:000000000000660B                 db    0
.eh_frame_hdr:000000000000660C                 db 0F0h
.eh_frame_hdr:000000000000660D                 db 0EDh
.eh_frame_hdr:000000000000660E                 db 0FFh
.eh_frame_hdr:000000000000660F                 db 0FFh
.eh_frame_hdr:0000000000006610                 db  30h ; 0
.eh_frame_hdr:0000000000006611                 db  0Eh
.eh_frame_hdr:0000000000006612                 db    0
.eh_frame_hdr:0000000000006613                 db    0
.eh_frame_hdr:0000000000006614                 db  50h ; P
.eh_frame_hdr:0000000000006615                 db 0EEh
.eh_frame_hdr:0000000000006616                 db 0FFh
.eh_frame_hdr:0000000000006617                 db 0FFh
.eh_frame_hdr:0000000000006618                 db  60h ; `
.eh_frame_hdr:0000000000006619                 db  0Eh
.eh_frame_hdr:000000000000661A                 db    0
.eh_frame_hdr:000000000000661B                 db    0
.eh_frame_hdr:000000000000661C                 db 0E0h
.eh_frame_hdr:000000000000661D                 db 0EEh
.eh_frame_hdr:000000000000661E                 db 0FFh
.eh_frame_hdr:000000000000661F                 db 0FFh
.eh_frame_hdr:0000000000006620                 db 0A0h
.eh_frame_hdr:0000000000006621                 db  0Eh
.eh_frame_hdr:0000000000006622                 db    0
.eh_frame_hdr:0000000000006623                 db    0
.eh_frame_hdr:0000000000006624                 db  60h ; `
.eh_frame_hdr:0000000000006625                 db 0EFh
.eh_frame_hdr:0000000000006626                 db 0FFh
.eh_frame_hdr:0000000000006627                 db 0FFh
.eh_frame_hdr:0000000000006628                 db 0F0h
.eh_frame_hdr:0000000000006629                 db  0Eh
.eh_frame_hdr:000000000000662A                 db    0
.eh_frame_hdr:000000000000662B                 db    0
.eh_frame_hdr:000000000000662C                 db 0C0h
.eh_frame_hdr:000000000000662D                 db 0EFh
.eh_frame_hdr:000000000000662E                 db 0FFh
.eh_frame_hdr:000000000000662F                 db 0FFh
.eh_frame_hdr:0000000000006630                 db  10h
.eh_frame_hdr:0000000000006631                 db  0Fh
.eh_frame_hdr:0000000000006632                 db    0
.eh_frame_hdr:0000000000006633                 db    0
.eh_frame_hdr:0000000000006634                 db    0
.eh_frame_hdr:0000000000006635                 db 0F0h
.eh_frame_hdr:0000000000006636                 db 0FFh
.eh_frame_hdr:0000000000006637                 db 0FFh
.eh_frame_hdr:0000000000006638                 db  30h ; 0
.eh_frame_hdr:0000000000006639                 db  0Fh
.eh_frame_hdr:000000000000663A                 db    0
.eh_frame_hdr:000000000000663B                 db    0
.eh_frame_hdr:000000000000663C                 db  70h ; p
.eh_frame_hdr:000000000000663D                 db 0F0h
.eh_frame_hdr:000000000000663E                 db 0FFh
.eh_frame_hdr:000000000000663F                 db 0FFh
.eh_frame_hdr:0000000000006640                 db  78h ; x
.eh_frame_hdr:0000000000006641                 db  0Fh
.eh_frame_hdr:0000000000006642                 db    0
.eh_frame_hdr:0000000000006643                 db    0
.eh_frame_hdr:0000000000006644                 db  80h
.eh_frame_hdr:0000000000006645                 db 0F0h
.eh_frame_hdr:0000000000006646                 db 0FFh
.eh_frame_hdr:0000000000006647                 db 0FFh
.eh_frame_hdr:0000000000006648                 db  90h
.eh_frame_hdr:0000000000006649                 db  0Fh
.eh_frame_hdr:000000000000664A                 db    0
.eh_frame_hdr:000000000000664B                 db    0
.eh_frame_hdr:000000000000664B _eh_frame_hdr   ends
.eh_frame_hdr:000000000000664B
LOAD:000000000000664C ; ===========================================================================
LOAD:000000000000664C
LOAD:000000000000664C ; Segment type: Pure code
LOAD:000000000000664C ; Segment permissions: Read/Execute
LOAD:000000000000664C LOAD            segment byte public 'CODE' use64
LOAD:000000000000664C                 assume cs:LOAD
LOAD:000000000000664C                 ;org 664Ch
LOAD:000000000000664C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000664C                 align 10h
LOAD:000000000000664C LOAD            ends
LOAD:000000000000664C
.eh_frame:0000000000006650 ; ===========================================================================
.eh_frame:0000000000006650
.eh_frame:0000000000006650 ; Segment type: Pure data
.eh_frame:0000000000006650 ; Segment permissions: Read
.eh_frame:0000000000006650 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000006650                 assume cs:_eh_frame
.eh_frame:0000000000006650                 ;org 6650h
.eh_frame:0000000000006650                 db  14h
.eh_frame:0000000000006651                 db    0
.eh_frame:0000000000006652                 db    0
.eh_frame:0000000000006653                 db    0
.eh_frame:0000000000006654                 db    0
.eh_frame:0000000000006655                 db    0
.eh_frame:0000000000006656                 db    0
.eh_frame:0000000000006657                 db    0
.eh_frame:0000000000006658                 db    1
.eh_frame:0000000000006659                 db  7Ah ; z
.eh_frame:000000000000665A                 db  52h ; R
.eh_frame:000000000000665B                 db    0
.eh_frame:000000000000665C                 db    1
.eh_frame:000000000000665D                 db  78h ; x
.eh_frame:000000000000665E                 db  10h
.eh_frame:000000000000665F                 db    1
.eh_frame:0000000000006660                 db  1Bh
.eh_frame:0000000000006661                 db  0Ch
.eh_frame:0000000000006662                 db    7
.eh_frame:0000000000006663                 db    8
.eh_frame:0000000000006664                 db  90h
.eh_frame:0000000000006665                 db    1
.eh_frame:0000000000006666                 db    7
.eh_frame:0000000000006667                 db  10h
.eh_frame:0000000000006668                 db  14h
.eh_frame:0000000000006669                 db    0
.eh_frame:000000000000666A                 db    0
.eh_frame:000000000000666B                 db    0
.eh_frame:000000000000666C                 db  1Ch
.eh_frame:000000000000666D                 db    0
.eh_frame:000000000000666E                 db    0
.eh_frame:000000000000666F                 db    0
.eh_frame:0000000000006670                 db  10h
.eh_frame:0000000000006671                 db 0B4h
.eh_frame:0000000000006672                 db 0FFh
.eh_frame:0000000000006673                 db 0FFh
.eh_frame:0000000000006674                 db  2Bh ; +
.eh_frame:0000000000006675                 db    0
.eh_frame:0000000000006676                 db    0
.eh_frame:0000000000006677                 db    0
.eh_frame:0000000000006678                 db    0
.eh_frame:0000000000006679                 db    0
.eh_frame:000000000000667A                 db    0
.eh_frame:000000000000667B                 db    0
.eh_frame:000000000000667C                 db    0
.eh_frame:000000000000667D                 db    0
.eh_frame:000000000000667E                 db    0
.eh_frame:000000000000667F                 db    0
.eh_frame:0000000000006680                 db  14h
.eh_frame:0000000000006681                 db    0
.eh_frame:0000000000006682                 db    0
.eh_frame:0000000000006683                 db    0
.eh_frame:0000000000006684                 db    0
.eh_frame:0000000000006685                 db    0
.eh_frame:0000000000006686                 db    0
.eh_frame:0000000000006687                 db    0
.eh_frame:0000000000006688                 db    1
.eh_frame:0000000000006689                 db  7Ah ; z
.eh_frame:000000000000668A                 db  52h ; R
.eh_frame:000000000000668B                 db    0
.eh_frame:000000000000668C                 db    1
.eh_frame:000000000000668D                 db  78h ; x
.eh_frame:000000000000668E                 db  10h
.eh_frame:000000000000668F                 db    1
.eh_frame:0000000000006690                 db  1Bh
.eh_frame:0000000000006691                 db  0Ch
.eh_frame:0000000000006692                 db    7
.eh_frame:0000000000006693                 db    8
.eh_frame:0000000000006694                 db  90h
.eh_frame:0000000000006695                 db    1
.eh_frame:0000000000006696                 db    0
.eh_frame:0000000000006697                 db    0
.eh_frame:0000000000006698                 db  24h ; $
.eh_frame:0000000000006699                 db    0
.eh_frame:000000000000669A                 db    0
.eh_frame:000000000000669B                 db    0
.eh_frame:000000000000669C                 db  1Ch
.eh_frame:000000000000669D                 db    0
.eh_frame:000000000000669E                 db    0
.eh_frame:000000000000669F                 db    0
.eh_frame:00000000000066A0                 db  80h
.eh_frame:00000000000066A1                 db 0AEh
.eh_frame:00000000000066A2                 db 0FFh
.eh_frame:00000000000066A3                 db 0FFh
.eh_frame:00000000000066A4                 db  30h ; 0
.eh_frame:00000000000066A5                 db    3
.eh_frame:00000000000066A6                 db    0
.eh_frame:00000000000066A7                 db    0
.eh_frame:00000000000066A8                 db    0
.eh_frame:00000000000066A9                 db  0Eh
.eh_frame:00000000000066AA                 db  10h
.eh_frame:00000000000066AB                 db  46h ; F
.eh_frame:00000000000066AC                 db  0Eh
.eh_frame:00000000000066AD                 db  18h
.eh_frame:00000000000066AE                 db  4Ah ; J
.eh_frame:00000000000066AF                 db  0Fh
.eh_frame:00000000000066B0                 db  0Bh
.eh_frame:00000000000066B1                 db  77h ; w
.eh_frame:00000000000066B2                 db    8
.eh_frame:00000000000066B3                 db  80h
.eh_frame:00000000000066B4                 db    0
.eh_frame:00000000000066B5                 db  3Fh ; ?
.eh_frame:00000000000066B6                 db  1Ah
.eh_frame:00000000000066B7                 db  3Bh ; ;
.eh_frame:00000000000066B8                 db  2Ah ; *
.eh_frame:00000000000066B9                 db  33h ; 3
.eh_frame:00000000000066BA                 db  24h ; $
.eh_frame:00000000000066BB                 db  22h ; "
.eh_frame:00000000000066BC                 db    0
.eh_frame:00000000000066BD                 db    0
.eh_frame:00000000000066BE                 db    0
.eh_frame:00000000000066BF                 db    0
.eh_frame:00000000000066C0                 db  14h
.eh_frame:00000000000066C1                 db    0
.eh_frame:00000000000066C2                 db    0
.eh_frame:00000000000066C3                 db    0
.eh_frame:00000000000066C4                 db  44h ; D
.eh_frame:00000000000066C5                 db    0
.eh_frame:00000000000066C6                 db    0
.eh_frame:00000000000066C7                 db    0
.eh_frame:00000000000066C8                 db  88h
.eh_frame:00000000000066C9                 db 0B1h
.eh_frame:00000000000066CA                 db 0FFh
.eh_frame:00000000000066CB                 db 0FFh
.eh_frame:00000000000066CC                 db    8
.eh_frame:00000000000066CD                 db    0
.eh_frame:00000000000066CE                 db    0
.eh_frame:00000000000066CF                 db    0
.eh_frame:00000000000066D0                 db    0
.eh_frame:00000000000066D1                 db    0
.eh_frame:00000000000066D2                 db    0
.eh_frame:00000000000066D3                 db    0
.eh_frame:00000000000066D4                 db    0
.eh_frame:00000000000066D5                 db    0
.eh_frame:00000000000066D6                 db    0
.eh_frame:00000000000066D7                 db    0
.eh_frame:00000000000066D8                 db  4Ch ; L
.eh_frame:00000000000066D9                 db    0
.eh_frame:00000000000066DA                 db    0
.eh_frame:00000000000066DB                 db    0
.eh_frame:00000000000066DC                 db  5Ch ; \
.eh_frame:00000000000066DD                 db    0
.eh_frame:00000000000066DE                 db    0
.eh_frame:00000000000066DF                 db    0
.eh_frame:00000000000066E0                 db 0B0h
.eh_frame:00000000000066E1                 db 0B4h
.eh_frame:00000000000066E2                 db 0FFh
.eh_frame:00000000000066E3                 db 0FFh
.eh_frame:00000000000066E4                 db    1
.eh_frame:00000000000066E5                 db    4
.eh_frame:00000000000066E6                 db    0
.eh_frame:00000000000066E7                 db    0
.eh_frame:00000000000066E8                 db    0
.eh_frame:00000000000066E9                 db  42h ; B
.eh_frame:00000000000066EA                 db  0Eh
.eh_frame:00000000000066EB                 db  10h
.eh_frame:00000000000066EC                 db  8Fh
.eh_frame:00000000000066ED                 db    2
.eh_frame:00000000000066EE                 db  42h ; B
.eh_frame:00000000000066EF                 db  0Eh
.eh_frame:00000000000066F0                 db  18h
.eh_frame:00000000000066F1                 db  8Eh
.eh_frame:00000000000066F2                 db    3
.eh_frame:00000000000066F3                 db  45h ; E
.eh_frame:00000000000066F4                 db  0Eh
.eh_frame:00000000000066F5                 db  20h
.eh_frame:00000000000066F6                 db  8Dh
.eh_frame:00000000000066F7                 db    4
.eh_frame:00000000000066F8                 db  42h ; B
.eh_frame:00000000000066F9                 db  0Eh
.eh_frame:00000000000066FA                 db  28h ; (
.eh_frame:00000000000066FB                 db  8Ch
.eh_frame:00000000000066FC                 db    5
.eh_frame:00000000000066FD                 db  48h ; H
.eh_frame:00000000000066FE                 db  0Eh
.eh_frame:00000000000066FF                 db  30h ; 0
.eh_frame:0000000000006700                 db  86h
.eh_frame:0000000000006701                 db    6
.eh_frame:0000000000006702                 db  41h ; A
.eh_frame:0000000000006703                 db  0Eh
.eh_frame:0000000000006704                 db  38h ; 8
.eh_frame:0000000000006705                 db  83h
.eh_frame:0000000000006706                 db    7
.eh_frame:0000000000006707                 db  4Eh ; N
.eh_frame:0000000000006708                 db  0Eh
.eh_frame:0000000000006709                 db 0F0h
.eh_frame:000000000000670A                 db  40h ; @
.eh_frame:000000000000670B                 db    3
.eh_frame:000000000000670C                 db  59h ; Y
.eh_frame:000000000000670D                 db    2
.eh_frame:000000000000670E                 db  0Ah
.eh_frame:000000000000670F                 db  0Eh
.eh_frame:0000000000006710                 db  38h ; 8
.eh_frame:0000000000006711                 db  41h ; A
.eh_frame:0000000000006712                 db  0Eh
.eh_frame:0000000000006713                 db  30h ; 0
.eh_frame:0000000000006714                 db  41h ; A
.eh_frame:0000000000006715                 db  0Eh
.eh_frame:0000000000006716                 db  28h ; (
.eh_frame:0000000000006717                 db  42h ; B
.eh_frame:0000000000006718                 db  0Eh
.eh_frame:0000000000006719                 db  20h
.eh_frame:000000000000671A                 db  42h ; B
.eh_frame:000000000000671B                 db  0Eh
.eh_frame:000000000000671C                 db  18h
.eh_frame:000000000000671D                 db  42h ; B
.eh_frame:000000000000671E                 db  0Eh
.eh_frame:000000000000671F                 db  10h
.eh_frame:0000000000006720                 db  42h ; B
.eh_frame:0000000000006721                 db  0Eh
.eh_frame:0000000000006722                 db    8
.eh_frame:0000000000006723                 db  4Bh ; K
.eh_frame:0000000000006724                 db  0Bh
.eh_frame:0000000000006725                 db    0
.eh_frame:0000000000006726                 db    0
.eh_frame:0000000000006727                 db    0
.eh_frame:0000000000006728                 db  28h ; (
.eh_frame:0000000000006729                 db    0
.eh_frame:000000000000672A                 db    0
.eh_frame:000000000000672B                 db    0
.eh_frame:000000000000672C                 db 0ACh
.eh_frame:000000000000672D                 db    0
.eh_frame:000000000000672E                 db    0
.eh_frame:000000000000672F                 db    0
.eh_frame:0000000000006730                 db  70h ; p
.eh_frame:0000000000006731                 db 0B8h
.eh_frame:0000000000006732                 db 0FFh
.eh_frame:0000000000006733                 db 0FFh
.eh_frame:0000000000006734                 db  8Ah
.eh_frame:0000000000006735                 db    3
.eh_frame:0000000000006736                 db    0
.eh_frame:0000000000006737                 db    0
.eh_frame:0000000000006738                 db    0
.eh_frame:0000000000006739                 db  42h ; B
.eh_frame:000000000000673A                 db  0Eh
.eh_frame:000000000000673B                 db  10h
.eh_frame:000000000000673C                 db  8Dh
.eh_frame:000000000000673D                 db    2
.eh_frame:000000000000673E                 db  42h ; B
.eh_frame:000000000000673F                 db  0Eh
.eh_frame:0000000000006740                 db  18h
.eh_frame:0000000000006741                 db  8Ch
.eh_frame:0000000000006742                 db    3
.eh_frame:0000000000006743                 db  46h ; F
.eh_frame:0000000000006744                 db  0Eh
.eh_frame:0000000000006745                 db  20h
.eh_frame:0000000000006746                 db  86h
.eh_frame:0000000000006747                 db    4
.eh_frame:0000000000006748                 db  41h ; A
.eh_frame:0000000000006749                 db  0Eh
.eh_frame:000000000000674A                 db  28h ; (
.eh_frame:000000000000674B                 db  83h
.eh_frame:000000000000674C                 db    5
.eh_frame:000000000000674D                 db  49h ; I
.eh_frame:000000000000674E                 db  0Eh
.eh_frame:000000000000674F                 db 0B0h
.eh_frame:0000000000006750                 db    1
.eh_frame:0000000000006751                 db    0
.eh_frame:0000000000006752                 db    0
.eh_frame:0000000000006753                 db    0
.eh_frame:0000000000006754                 db  38h ; 8
.eh_frame:0000000000006755                 db    0
.eh_frame:0000000000006756                 db    0
.eh_frame:0000000000006757                 db    0
.eh_frame:0000000000006758                 db 0D8h
.eh_frame:0000000000006759                 db    0
.eh_frame:000000000000675A                 db    0
.eh_frame:000000000000675B                 db    0
.eh_frame:000000000000675C                 db    4
.eh_frame:000000000000675D                 db 0B1h
.eh_frame:000000000000675E                 db 0FFh
.eh_frame:000000000000675F                 db 0FFh
.eh_frame:0000000000006760                 db  16h
.eh_frame:0000000000006761                 db    2
.eh_frame:0000000000006762                 db    0
.eh_frame:0000000000006763                 db    0
.eh_frame:0000000000006764                 db    0
.eh_frame:0000000000006765                 db  42h ; B
.eh_frame:0000000000006766                 db  0Eh
.eh_frame:0000000000006767                 db  10h
.eh_frame:0000000000006768                 db  8Ch
.eh_frame:0000000000006769                 db    2
.eh_frame:000000000000676A                 db  41h ; A
.eh_frame:000000000000676B                 db  0Eh
.eh_frame:000000000000676C                 db  18h
.eh_frame:000000000000676D                 db  86h
.eh_frame:000000000000676E                 db    3
.eh_frame:000000000000676F                 db  43h ; C
.eh_frame:0000000000006770                 db  0Eh
.eh_frame:0000000000006771                 db  20h
.eh_frame:0000000000006772                 db  83h
.eh_frame:0000000000006773                 db    4
.eh_frame:0000000000006774                 db    3
.eh_frame:0000000000006775                 db  0Ch
.eh_frame:0000000000006776                 db    1
.eh_frame:0000000000006777                 db  0Ah
.eh_frame:0000000000006778                 db  0Eh
.eh_frame:0000000000006779                 db  28h ; (
.eh_frame:000000000000677A                 db  4Fh ; O
.eh_frame:000000000000677B                 db  0Eh
.eh_frame:000000000000677C                 db  30h ; 0
.eh_frame:000000000000677D                 db  5Fh ; _
.eh_frame:000000000000677E                 db  0Bh
.eh_frame:000000000000677F                 db    2
.eh_frame:0000000000006780                 db  65h ; e
.eh_frame:0000000000006781                 db  0Ah
.eh_frame:0000000000006782                 db  0Eh
.eh_frame:0000000000006783                 db  18h
.eh_frame:0000000000006784                 db  41h ; A
.eh_frame:0000000000006785                 db  0Eh
.eh_frame:0000000000006786                 db  10h
.eh_frame:0000000000006787                 db  42h ; B
.eh_frame:0000000000006788                 db  0Eh
.eh_frame:0000000000006789                 db    8
.eh_frame:000000000000678A                 db  41h ; A
.eh_frame:000000000000678B                 db  0Bh
.eh_frame:000000000000678C                 db    0
.eh_frame:000000000000678D                 db    0
.eh_frame:000000000000678E                 db    0
.eh_frame:000000000000678F                 db    0
.eh_frame:0000000000006790                 db  10h
.eh_frame:0000000000006791                 db    0
.eh_frame:0000000000006792                 db    0
.eh_frame:0000000000006793                 db    0
.eh_frame:0000000000006794                 db  14h
.eh_frame:0000000000006795                 db    1
.eh_frame:0000000000006796                 db    0
.eh_frame:0000000000006797                 db    0
.eh_frame:0000000000006798                 db  98h
.eh_frame:0000000000006799                 db 0BBh
.eh_frame:000000000000679A                 db 0FFh
.eh_frame:000000000000679B                 db 0FFh
.eh_frame:000000000000679C                 db  0Ah
.eh_frame:000000000000679D                 db    0
.eh_frame:000000000000679E                 db    0
.eh_frame:000000000000679F                 db    0
.eh_frame:00000000000067A0                 db    0
.eh_frame:00000000000067A1                 db    0
.eh_frame:00000000000067A2                 db    0
.eh_frame:00000000000067A3                 db    0
.eh_frame:00000000000067A4                 db  48h ; H
.eh_frame:00000000000067A5                 db    0
.eh_frame:00000000000067A6                 db    0
.eh_frame:00000000000067A7                 db    0
.eh_frame:00000000000067A8                 db  28h ; (
.eh_frame:00000000000067A9                 db    1
.eh_frame:00000000000067AA                 db    0
.eh_frame:00000000000067AB                 db    0
.eh_frame:00000000000067AC                 db  94h
.eh_frame:00000000000067AD                 db 0BBh
.eh_frame:00000000000067AE                 db 0FFh
.eh_frame:00000000000067AF                 db 0FFh
.eh_frame:00000000000067B0                 db  16h
.eh_frame:00000000000067B1                 db    1
.eh_frame:00000000000067B2                 db    0
.eh_frame:00000000000067B3                 db    0
.eh_frame:00000000000067B4                 db    0
.eh_frame:00000000000067B5                 db  42h ; B
.eh_frame:00000000000067B6                 db  0Eh
.eh_frame:00000000000067B7                 db  10h
.eh_frame:00000000000067B8                 db  8Fh
.eh_frame:00000000000067B9                 db    2
.eh_frame:00000000000067BA                 db  42h ; B
.eh_frame:00000000000067BB                 db  0Eh
.eh_frame:00000000000067BC                 db  18h
.eh_frame:00000000000067BD                 db  8Eh
.eh_frame:00000000000067BE                 db    3
.eh_frame:00000000000067BF                 db  45h ; E
.eh_frame:00000000000067C0                 db  0Eh
.eh_frame:00000000000067C1                 db  20h
.eh_frame:00000000000067C2                 db  8Dh
.eh_frame:00000000000067C3                 db    4
.eh_frame:00000000000067C4                 db  42h ; B
.eh_frame:00000000000067C5                 db  0Eh
.eh_frame:00000000000067C6                 db  28h ; (
.eh_frame:00000000000067C7                 db  8Ch
.eh_frame:00000000000067C8                 db    5
.eh_frame:00000000000067C9                 db  44h ; D
.eh_frame:00000000000067CA                 db  0Eh
.eh_frame:00000000000067CB                 db  30h ; 0
.eh_frame:00000000000067CC                 db  86h
.eh_frame:00000000000067CD                 db    6
.eh_frame:00000000000067CE                 db  41h ; A
.eh_frame:00000000000067CF                 db  0Eh
.eh_frame:00000000000067D0                 db  38h ; 8
.eh_frame:00000000000067D1                 db  83h
.eh_frame:00000000000067D2                 db    7
.eh_frame:00000000000067D3                 db  47h ; G
.eh_frame:00000000000067D4                 db  0Eh
.eh_frame:00000000000067D5                 db  60h ; `
.eh_frame:00000000000067D6                 db    2
.eh_frame:00000000000067D7                 db 0DEh
.eh_frame:00000000000067D8                 db  0Ah
.eh_frame:00000000000067D9                 db  0Eh
.eh_frame:00000000000067DA                 db  38h ; 8
.eh_frame:00000000000067DB                 db  41h ; A
.eh_frame:00000000000067DC                 db  0Eh
.eh_frame:00000000000067DD                 db  30h ; 0
.eh_frame:00000000000067DE                 db  41h ; A
.eh_frame:00000000000067DF                 db  0Eh
.eh_frame:00000000000067E0                 db  28h ; (
.eh_frame:00000000000067E1                 db  42h ; B
.eh_frame:00000000000067E2                 db  0Eh
.eh_frame:00000000000067E3                 db  20h
.eh_frame:00000000000067E4                 db  42h ; B
.eh_frame:00000000000067E5                 db  0Eh
.eh_frame:00000000000067E6                 db  18h
.eh_frame:00000000000067E7                 db  42h ; B
.eh_frame:00000000000067E8                 db  0Eh
.eh_frame:00000000000067E9                 db  10h
.eh_frame:00000000000067EA                 db  42h ; B
.eh_frame:00000000000067EB                 db  0Eh
.eh_frame:00000000000067EC                 db    8
.eh_frame:00000000000067ED                 db  41h ; A
.eh_frame:00000000000067EE                 db  0Bh
.eh_frame:00000000000067EF                 db    0
.eh_frame:00000000000067F0                 db  28h ; (
.eh_frame:00000000000067F1                 db    0
.eh_frame:00000000000067F2                 db    0
.eh_frame:00000000000067F3                 db    0
.eh_frame:00000000000067F4                 db  74h ; t
.eh_frame:00000000000067F5                 db    1
.eh_frame:00000000000067F6                 db    0
.eh_frame:00000000000067F7                 db    0
.eh_frame:00000000000067F8                 db  68h ; h
.eh_frame:00000000000067F9                 db 0BCh
.eh_frame:00000000000067FA                 db 0FFh
.eh_frame:00000000000067FB                 db 0FFh
.eh_frame:00000000000067FC                 db  73h ; s
.eh_frame:00000000000067FD                 db    0
.eh_frame:00000000000067FE                 db    0
.eh_frame:00000000000067FF                 db    0
.eh_frame:0000000000006800                 db    0
.eh_frame:0000000000006801                 db  46h ; F
.eh_frame:0000000000006802                 db  0Eh
.eh_frame:0000000000006803                 db  10h
.eh_frame:0000000000006804                 db  8Ch
.eh_frame:0000000000006805                 db    2
.eh_frame:0000000000006806                 db  46h ; F
.eh_frame:0000000000006807                 db  0Eh
.eh_frame:0000000000006808                 db  18h
.eh_frame:0000000000006809                 db  86h
.eh_frame:000000000000680A                 db    3
.eh_frame:000000000000680B                 db  44h ; D
.eh_frame:000000000000680C                 db  0Eh
.eh_frame:000000000000680D                 db  20h
.eh_frame:000000000000680E                 db  83h
.eh_frame:000000000000680F                 db    4
.eh_frame:0000000000006810                 db  7Fh ; 
.eh_frame:0000000000006811                 db  0Ah
.eh_frame:0000000000006812                 db  0Eh
.eh_frame:0000000000006813                 db  18h
.eh_frame:0000000000006814                 db  41h ; A
.eh_frame:0000000000006815                 db  0Eh
.eh_frame:0000000000006816                 db  10h
.eh_frame:0000000000006817                 db  42h ; B
.eh_frame:0000000000006818                 db  0Eh
.eh_frame:0000000000006819                 db    8
.eh_frame:000000000000681A                 db  4Eh ; N
.eh_frame:000000000000681B                 db  0Bh
.eh_frame:000000000000681C                 db  5Ch ; \
.eh_frame:000000000000681D                 db    0
.eh_frame:000000000000681E                 db    0
.eh_frame:000000000000681F                 db    0
.eh_frame:0000000000006820                 db 0A0h
.eh_frame:0000000000006821                 db    1
.eh_frame:0000000000006822                 db    0
.eh_frame:0000000000006823                 db    0
.eh_frame:0000000000006824                 db 0BCh
.eh_frame:0000000000006825                 db 0BCh
.eh_frame:0000000000006826                 db 0FFh
.eh_frame:0000000000006827                 db 0FFh
.eh_frame:0000000000006828                 db  20h
.eh_frame:0000000000006829                 db    1
.eh_frame:000000000000682A                 db    0
.eh_frame:000000000000682B                 db    0
.eh_frame:000000000000682C                 db    0
.eh_frame:000000000000682D                 db  42h ; B
.eh_frame:000000000000682E                 db  0Eh
.eh_frame:000000000000682F                 db  10h
.eh_frame:0000000000006830                 db  8Fh
.eh_frame:0000000000006831                 db    2
.eh_frame:0000000000006832                 db  42h ; B
.eh_frame:0000000000006833                 db  0Eh
.eh_frame:0000000000006834                 db  18h
.eh_frame:0000000000006835                 db  8Eh
.eh_frame:0000000000006836                 db    3
.eh_frame:0000000000006837                 db  45h ; E
.eh_frame:0000000000006838                 db  0Eh
.eh_frame:0000000000006839                 db  20h
.eh_frame:000000000000683A                 db  8Dh
.eh_frame:000000000000683B                 db    4
.eh_frame:000000000000683C                 db  42h ; B
.eh_frame:000000000000683D                 db  0Eh
.eh_frame:000000000000683E                 db  28h ; (
.eh_frame:000000000000683F                 db  8Ch
.eh_frame:0000000000006840                 db    5
.eh_frame:0000000000006841                 db  43h ; C
.eh_frame:0000000000006842                 db  0Eh
.eh_frame:0000000000006843                 db  30h ; 0
.eh_frame:0000000000006844                 db  86h
.eh_frame:0000000000006845                 db    6
.eh_frame:0000000000006846                 db  41h ; A
.eh_frame:0000000000006847                 db  0Eh
.eh_frame:0000000000006848                 db  38h ; 8
.eh_frame:0000000000006849                 db  83h
.eh_frame:000000000000684A                 db    7
.eh_frame:000000000000684B                 db  56h ; V
.eh_frame:000000000000684C                 db  0Eh
.eh_frame:000000000000684D                 db  40h ; @
.eh_frame:000000000000684E                 db    2
.eh_frame:000000000000684F                 db 0D3h
.eh_frame:0000000000006850                 db  0Ah
.eh_frame:0000000000006851                 db  0Eh
.eh_frame:0000000000006852                 db  38h ; 8
.eh_frame:0000000000006853                 db  41h ; A
.eh_frame:0000000000006854                 db  0Eh
.eh_frame:0000000000006855                 db  30h ; 0
.eh_frame:0000000000006856                 db  41h ; A
.eh_frame:0000000000006857                 db  0Eh
.eh_frame:0000000000006858                 db  28h ; (
.eh_frame:0000000000006859                 db  42h ; B
.eh_frame:000000000000685A                 db  0Eh
.eh_frame:000000000000685B                 db  20h
.eh_frame:000000000000685C                 db  42h ; B
.eh_frame:000000000000685D                 db  0Eh
.eh_frame:000000000000685E                 db  18h
.eh_frame:000000000000685F                 db  42h ; B
.eh_frame:0000000000006860                 db  0Eh
.eh_frame:0000000000006861                 db  10h
.eh_frame:0000000000006862                 db  42h ; B
.eh_frame:0000000000006863                 db  0Eh
.eh_frame:0000000000006864                 db    8
.eh_frame:0000000000006865                 db  46h ; F
.eh_frame:0000000000006866                 db  0Bh
.eh_frame:0000000000006867                 db  44h ; D
.eh_frame:0000000000006868                 db  0Eh
.eh_frame:0000000000006869                 db  38h ; 8
.eh_frame:000000000000686A                 db  46h ; F
.eh_frame:000000000000686B                 db  0Eh
.eh_frame:000000000000686C                 db  30h ; 0
.eh_frame:000000000000686D                 db  41h ; A
.eh_frame:000000000000686E                 db  0Eh
.eh_frame:000000000000686F                 db  28h ; (
.eh_frame:0000000000006870                 db  42h ; B
.eh_frame:0000000000006871                 db  0Eh
.eh_frame:0000000000006872                 db  20h
.eh_frame:0000000000006873                 db  42h ; B
.eh_frame:0000000000006874                 db  0Eh
.eh_frame:0000000000006875                 db  18h
.eh_frame:0000000000006876                 db  42h ; B
.eh_frame:0000000000006877                 db  0Eh
.eh_frame:0000000000006878                 db  10h
.eh_frame:0000000000006879                 db  42h ; B
.eh_frame:000000000000687A                 db  0Eh
.eh_frame:000000000000687B                 db    8
.eh_frame:000000000000687C                 db  48h ; H
.eh_frame:000000000000687D                 db    0
.eh_frame:000000000000687E                 db    0
.eh_frame:000000000000687F                 db    0
.eh_frame:0000000000006880                 db    0
.eh_frame:0000000000006881                 db    2
.eh_frame:0000000000006882                 db    0
.eh_frame:0000000000006883                 db    0
.eh_frame:0000000000006884                 db  7Ch ; |
.eh_frame:0000000000006885                 db 0BDh
.eh_frame:0000000000006886                 db 0FFh
.eh_frame:0000000000006887                 db 0FFh
.eh_frame:0000000000006888                 db  6Dh ; m
.eh_frame:0000000000006889                 db    0
.eh_frame:000000000000688A                 db    0
.eh_frame:000000000000688B                 db    0
.eh_frame:000000000000688C                 db    0
.eh_frame:000000000000688D                 db  42h ; B
.eh_frame:000000000000688E                 db  0Eh
.eh_frame:000000000000688F                 db  10h
.eh_frame:0000000000006890                 db  8Fh
.eh_frame:0000000000006891                 db    2
.eh_frame:0000000000006892                 db  42h ; B
.eh_frame:0000000000006893                 db  0Eh
.eh_frame:0000000000006894                 db  18h
.eh_frame:0000000000006895                 db  8Eh
.eh_frame:0000000000006896                 db    3
.eh_frame:0000000000006897                 db  45h ; E
.eh_frame:0000000000006898                 db  0Eh
.eh_frame:0000000000006899                 db  20h
.eh_frame:000000000000689A                 db  8Dh
.eh_frame:000000000000689B                 db    4
.eh_frame:000000000000689C                 db  42h ; B
.eh_frame:000000000000689D                 db  0Eh
.eh_frame:000000000000689E                 db  28h ; (
.eh_frame:000000000000689F                 db  8Ch
.eh_frame:00000000000068A0                 db    5
.eh_frame:00000000000068A1                 db  44h ; D
.eh_frame:00000000000068A2                 db  0Eh
.eh_frame:00000000000068A3                 db  30h ; 0
.eh_frame:00000000000068A4                 db  86h
.eh_frame:00000000000068A5                 db    6
.eh_frame:00000000000068A6                 db  41h ; A
.eh_frame:00000000000068A7                 db  0Eh
.eh_frame:00000000000068A8                 db  38h ; 8
.eh_frame:00000000000068A9                 db  83h
.eh_frame:00000000000068AA                 db    7
.eh_frame:00000000000068AB                 db  50h ; P
.eh_frame:00000000000068AC                 db  0Eh
.eh_frame:00000000000068AD                 db  40h ; @
.eh_frame:00000000000068AE                 db  5Ah ; Z
.eh_frame:00000000000068AF                 db  0Ah
.eh_frame:00000000000068B0                 db  0Eh
.eh_frame:00000000000068B1                 db  38h ; 8
.eh_frame:00000000000068B2                 db  41h ; A
.eh_frame:00000000000068B3                 db  0Eh
.eh_frame:00000000000068B4                 db  30h ; 0
.eh_frame:00000000000068B5                 db  41h ; A
.eh_frame:00000000000068B6                 db  0Eh
.eh_frame:00000000000068B7                 db  28h ; (
.eh_frame:00000000000068B8                 db  42h ; B
.eh_frame:00000000000068B9                 db  0Eh
.eh_frame:00000000000068BA                 db  20h
.eh_frame:00000000000068BB                 db  42h ; B
.eh_frame:00000000000068BC                 db  0Eh
.eh_frame:00000000000068BD                 db  18h
.eh_frame:00000000000068BE                 db  42h ; B
.eh_frame:00000000000068BF                 db  0Eh
.eh_frame:00000000000068C0                 db  10h
.eh_frame:00000000000068C1                 db  42h ; B
.eh_frame:00000000000068C2                 db  0Eh
.eh_frame:00000000000068C3                 db    8
.eh_frame:00000000000068C4                 db  41h ; A
.eh_frame:00000000000068C5                 db  0Bh
.eh_frame:00000000000068C6                 db    0
.eh_frame:00000000000068C7                 db    0
.eh_frame:00000000000068C8                 db  3Ch ; <
.eh_frame:00000000000068C9                 db    0
.eh_frame:00000000000068CA                 db    0
.eh_frame:00000000000068CB                 db    0
.eh_frame:00000000000068CC                 db  4Ch ; L
.eh_frame:00000000000068CD                 db    2
.eh_frame:00000000000068CE                 db    0
.eh_frame:00000000000068CF                 db    0
.eh_frame:00000000000068D0                 db 0A0h
.eh_frame:00000000000068D1                 db 0BDh
.eh_frame:00000000000068D2                 db 0FFh
.eh_frame:00000000000068D3                 db 0FFh
.eh_frame:00000000000068D4                 db  4Dh ; M
.eh_frame:00000000000068D5                 db    0
.eh_frame:00000000000068D6                 db    0
.eh_frame:00000000000068D7                 db    0
.eh_frame:00000000000068D8                 db    0
.eh_frame:00000000000068D9                 db  42h ; B
.eh_frame:00000000000068DA                 db  0Eh
.eh_frame:00000000000068DB                 db  10h
.eh_frame:00000000000068DC                 db  8Eh
.eh_frame:00000000000068DD                 db    2
.eh_frame:00000000000068DE                 db  42h ; B
.eh_frame:00000000000068DF                 db  0Eh
.eh_frame:00000000000068E0                 db  18h
.eh_frame:00000000000068E1                 db  8Dh
.eh_frame:00000000000068E2                 db    3
.eh_frame:00000000000068E3                 db  42h ; B
.eh_frame:00000000000068E4                 db  0Eh
.eh_frame:00000000000068E5                 db  20h
.eh_frame:00000000000068E6                 db  8Ch
.eh_frame:00000000000068E7                 db    4
.eh_frame:00000000000068E8                 db  41h ; A
.eh_frame:00000000000068E9                 db  0Eh
.eh_frame:00000000000068EA                 db  28h ; (
.eh_frame:00000000000068EB                 db  86h
.eh_frame:00000000000068EC                 db    5
.eh_frame:00000000000068ED                 db  41h ; A
.eh_frame:00000000000068EE                 db  0Eh
.eh_frame:00000000000068EF                 db  30h ; 0
.eh_frame:00000000000068F0                 db  83h
.eh_frame:00000000000068F1                 db    6
.eh_frame:00000000000068F2                 db  7Ah ; z
.eh_frame:00000000000068F3                 db  0Eh
.eh_frame:00000000000068F4                 db  28h ; (
.eh_frame:00000000000068F5                 db  44h ; D
.eh_frame:00000000000068F6                 db  0Eh
.eh_frame:00000000000068F7                 db  20h
.eh_frame:00000000000068F8                 db  42h ; B
.eh_frame:00000000000068F9                 db  0Eh
.eh_frame:00000000000068FA                 db  18h
.eh_frame:00000000000068FB                 db  42h ; B
.eh_frame:00000000000068FC                 db  0Eh
.eh_frame:00000000000068FD                 db  10h
.eh_frame:00000000000068FE                 db  42h ; B
.eh_frame:00000000000068FF                 db  0Eh
.eh_frame:0000000000006900                 db    8
.eh_frame:0000000000006901                 db    0
.eh_frame:0000000000006902                 db    0
.eh_frame:0000000000006903                 db    0
.eh_frame:0000000000006904                 db    0
.eh_frame:0000000000006905                 db    0
.eh_frame:0000000000006906                 db    0
.eh_frame:0000000000006907                 db    0
.eh_frame:0000000000006908                 db  10h
.eh_frame:0000000000006909                 db    0
.eh_frame:000000000000690A                 db    0
.eh_frame:000000000000690B                 db    0
.eh_frame:000000000000690C                 db  8Ch
.eh_frame:000000000000690D                 db    2
.eh_frame:000000000000690E                 db    0
.eh_frame:000000000000690F                 db    0
.eh_frame:0000000000006910                 db 0B0h
.eh_frame:0000000000006911                 db 0BDh
.eh_frame:0000000000006912                 db 0FFh
.eh_frame:0000000000006913                 db 0FFh
.eh_frame:0000000000006914                 db    8
.eh_frame:0000000000006915                 db    0
.eh_frame:0000000000006916                 db    0
.eh_frame:0000000000006917                 db    0
.eh_frame:0000000000006918                 db    0
.eh_frame:0000000000006919                 db    0
.eh_frame:000000000000691A                 db    0
.eh_frame:000000000000691B                 db    0
.eh_frame:000000000000691C                 db  10h
.eh_frame:000000000000691D                 db    0
.eh_frame:000000000000691E                 db    0
.eh_frame:000000000000691F                 db    0
.eh_frame:0000000000006920                 db 0A0h
.eh_frame:0000000000006921                 db    2
.eh_frame:0000000000006922                 db    0
.eh_frame:0000000000006923                 db    0
.eh_frame:0000000000006924                 db 0ACh
.eh_frame:0000000000006925                 db 0BDh
.eh_frame:0000000000006926                 db 0FFh
.eh_frame:0000000000006927                 db 0FFh
.eh_frame:0000000000006928                 db    8
.eh_frame:0000000000006929                 db    0
.eh_frame:000000000000692A                 db    0
.eh_frame:000000000000692B                 db    0
.eh_frame:000000000000692C                 db    0
.eh_frame:000000000000692D                 db    0
.eh_frame:000000000000692E                 db    0
.eh_frame:000000000000692F                 db    0
.eh_frame:0000000000006930                 db  2Ch ; ,
.eh_frame:0000000000006931                 db    0
.eh_frame:0000000000006932                 db    0
.eh_frame:0000000000006933                 db    0
.eh_frame:0000000000006934                 db 0B4h
.eh_frame:0000000000006935                 db    2
.eh_frame:0000000000006936                 db    0
.eh_frame:0000000000006937                 db    0
.eh_frame:0000000000006938                 db 0A8h
.eh_frame:0000000000006939                 db 0BDh
.eh_frame:000000000000693A                 db 0FFh
.eh_frame:000000000000693B                 db 0FFh
.eh_frame:000000000000693C                 db 0A4h
.eh_frame:000000000000693D                 db    0
.eh_frame:000000000000693E                 db    0
.eh_frame:000000000000693F                 db    0
.eh_frame:0000000000006940                 db    0
.eh_frame:0000000000006941                 db  41h ; A
.eh_frame:0000000000006942                 db  0Eh
.eh_frame:0000000000006943                 db  10h
.eh_frame:0000000000006944                 db  86h
.eh_frame:0000000000006945                 db    2
.eh_frame:0000000000006946                 db  41h ; A
.eh_frame:0000000000006947                 db  0Eh
.eh_frame:0000000000006948                 db  18h
.eh_frame:0000000000006949                 db  83h
.eh_frame:000000000000694A                 db    3
.eh_frame:000000000000694B                 db  44h ; D
.eh_frame:000000000000694C                 db  0Eh
.eh_frame:000000000000694D                 db  20h
.eh_frame:000000000000694E                 db  7Ah ; z
.eh_frame:000000000000694F                 db  0Ah
.eh_frame:0000000000006950                 db  0Eh
.eh_frame:0000000000006951                 db  18h
.eh_frame:0000000000006952                 db  41h ; A
.eh_frame:0000000000006953                 db  0Eh
.eh_frame:0000000000006954                 db  10h
.eh_frame:0000000000006955                 db  41h ; A
.eh_frame:0000000000006956                 db  0Eh
.eh_frame:0000000000006957                 db    8
.eh_frame:0000000000006958                 db  41h ; A
.eh_frame:0000000000006959                 db  0Bh
.eh_frame:000000000000695A                 db    0
.eh_frame:000000000000695B                 db    0
.eh_frame:000000000000695C                 db    0
.eh_frame:000000000000695D                 db    0
.eh_frame:000000000000695E                 db    0
.eh_frame:000000000000695F                 db    0
.eh_frame:0000000000006960                 db  10h
.eh_frame:0000000000006961                 db    0
.eh_frame:0000000000006962                 db    0
.eh_frame:0000000000006963                 db    0
.eh_frame:0000000000006964                 db 0E4h
.eh_frame:0000000000006965                 db    2
.eh_frame:0000000000006966                 db    0
.eh_frame:0000000000006967                 db    0
.eh_frame:0000000000006968                 db  28h ; (
.eh_frame:0000000000006969                 db 0BEh
.eh_frame:000000000000696A                 db 0FFh
.eh_frame:000000000000696B                 db 0FFh
.eh_frame:000000000000696C                 db    5
.eh_frame:000000000000696D                 db    0
.eh_frame:000000000000696E                 db    0
.eh_frame:000000000000696F                 db    0
.eh_frame:0000000000006970                 db    0
.eh_frame:0000000000006971                 db    0
.eh_frame:0000000000006972                 db    0
.eh_frame:0000000000006973                 db    0
.eh_frame:0000000000006974                 db  18h
.eh_frame:0000000000006975                 db    0
.eh_frame:0000000000006976                 db    0
.eh_frame:0000000000006977                 db    0
.eh_frame:0000000000006978                 db 0F8h
.eh_frame:0000000000006979                 db    2
.eh_frame:000000000000697A                 db    0
.eh_frame:000000000000697B                 db    0
.eh_frame:000000000000697C                 db  24h ; $
.eh_frame:000000000000697D                 db 0BEh
.eh_frame:000000000000697E                 db 0FFh
.eh_frame:000000000000697F                 db 0FFh
.eh_frame:0000000000006980                 db  22h ; "
.eh_frame:0000000000006981                 db    0
.eh_frame:0000000000006982                 db    0
.eh_frame:0000000000006983                 db    0
.eh_frame:0000000000006984                 db    0
.eh_frame:0000000000006985                 db  46h ; F
.eh_frame:0000000000006986                 db  0Eh
.eh_frame:0000000000006987                 db  10h
.eh_frame:0000000000006988                 db  83h
.eh_frame:0000000000006989                 db    2
.eh_frame:000000000000698A                 db  4Eh ; N
.eh_frame:000000000000698B                 db 0C3h
.eh_frame:000000000000698C                 db  0Eh
.eh_frame:000000000000698D                 db    8
.eh_frame:000000000000698E                 db    0
.eh_frame:000000000000698F                 db    0
.eh_frame:0000000000006990                 db  2Ch ; ,
.eh_frame:0000000000006991                 db    0
.eh_frame:0000000000006992                 db    0
.eh_frame:0000000000006993                 db    0
.eh_frame:0000000000006994                 db  14h
.eh_frame:0000000000006995                 db    3
.eh_frame:0000000000006996                 db    0
.eh_frame:0000000000006997                 db    0
.eh_frame:0000000000006998                 db  38h ; 8
.eh_frame:0000000000006999                 db 0BEh
.eh_frame:000000000000699A                 db 0FFh
.eh_frame:000000000000699B                 db 0FFh
.eh_frame:000000000000699C                 db  93h
.eh_frame:000000000000699D                 db    0
.eh_frame:000000000000699E                 db    0
.eh_frame:000000000000699F                 db    0
.eh_frame:00000000000069A0                 db    0
.eh_frame:00000000000069A1                 db  42h ; B
.eh_frame:00000000000069A2                 db  0Eh
.eh_frame:00000000000069A3                 db  10h
.eh_frame:00000000000069A4                 db  8Ch
.eh_frame:00000000000069A5                 db    2
.eh_frame:00000000000069A6                 db  41h ; A
.eh_frame:00000000000069A7                 db  0Eh
.eh_frame:00000000000069A8                 db  18h
.eh_frame:00000000000069A9                 db  86h
.eh_frame:00000000000069AA                 db    3
.eh_frame:00000000000069AB                 db  44h ; D
.eh_frame:00000000000069AC                 db  0Eh
.eh_frame:00000000000069AD                 db  20h
.eh_frame:00000000000069AE                 db  83h
.eh_frame:00000000000069AF                 db    4
.eh_frame:00000000000069B0                 db  5Eh ; ^
.eh_frame:00000000000069B1                 db  0Ah
.eh_frame:00000000000069B2                 db  0Eh
.eh_frame:00000000000069B3                 db  18h
.eh_frame:00000000000069B4                 db  41h ; A
.eh_frame:00000000000069B5                 db  0Eh
.eh_frame:00000000000069B6                 db  10h
.eh_frame:00000000000069B7                 db  42h ; B
.eh_frame:00000000000069B8                 db  0Eh
.eh_frame:00000000000069B9                 db    8
.eh_frame:00000000000069BA                 db  48h ; H
.eh_frame:00000000000069BB                 db  0Bh
.eh_frame:00000000000069BC                 db    0
.eh_frame:00000000000069BD                 db    0
.eh_frame:00000000000069BE                 db    0
.eh_frame:00000000000069BF                 db    0
.eh_frame:00000000000069C0                 db  1Ch
.eh_frame:00000000000069C1                 db    0
.eh_frame:00000000000069C2                 db    0
.eh_frame:00000000000069C3                 db    0
.eh_frame:00000000000069C4                 db  44h ; D
.eh_frame:00000000000069C5                 db    3
.eh_frame:00000000000069C6                 db    0
.eh_frame:00000000000069C7                 db    0
.eh_frame:00000000000069C8                 db 0A8h
.eh_frame:00000000000069C9                 db 0BEh
.eh_frame:00000000000069CA                 db 0FFh
.eh_frame:00000000000069CB                 db 0FFh
.eh_frame:00000000000069CC                 db  9Fh
.eh_frame:00000000000069CD                 db    0
.eh_frame:00000000000069CE                 db    0
.eh_frame:00000000000069CF                 db    0
.eh_frame:00000000000069D0                 db    0
.eh_frame:00000000000069D1                 db  44h ; D
.eh_frame:00000000000069D2                 db  0Eh
.eh_frame:00000000000069D3                 db  10h
.eh_frame:00000000000069D4                 db  83h
.eh_frame:00000000000069D5                 db    2
.eh_frame:00000000000069D6                 db    2
.eh_frame:00000000000069D7                 db  78h ; x
.eh_frame:00000000000069D8                 db  0Ah
.eh_frame:00000000000069D9                 db  0Eh
.eh_frame:00000000000069DA                 db    8
.eh_frame:00000000000069DB                 db  41h ; A
.eh_frame:00000000000069DC                 db  0Bh
.eh_frame:00000000000069DD                 db    0
.eh_frame:00000000000069DE                 db    0
.eh_frame:00000000000069DF                 db    0
.eh_frame:00000000000069E0                 db  40h ; @
.eh_frame:00000000000069E1                 db    0
.eh_frame:00000000000069E2                 db    0
.eh_frame:00000000000069E3                 db    0
.eh_frame:00000000000069E4                 db  64h ; d
.eh_frame:00000000000069E5                 db    3
.eh_frame:00000000000069E6                 db    0
.eh_frame:00000000000069E7                 db    0
.eh_frame:00000000000069E8                 db  28h ; (
.eh_frame:00000000000069E9                 db 0BFh
.eh_frame:00000000000069EA                 db 0FFh
.eh_frame:00000000000069EB                 db 0FFh
.eh_frame:00000000000069EC                 db 0E7h
.eh_frame:00000000000069ED                 db    0
.eh_frame:00000000000069EE                 db    0
.eh_frame:00000000000069EF                 db    0
.eh_frame:00000000000069F0                 db    0
.eh_frame:00000000000069F1                 db  41h ; A
.eh_frame:00000000000069F2                 db  0Eh
.eh_frame:00000000000069F3                 db  10h
.eh_frame:00000000000069F4                 db  86h
.eh_frame:00000000000069F5                 db    2
.eh_frame:00000000000069F6                 db  41h ; A
.eh_frame:00000000000069F7                 db  0Eh
.eh_frame:00000000000069F8                 db  18h
.eh_frame:00000000000069F9                 db  83h
.eh_frame:00000000000069FA                 db    3
.eh_frame:00000000000069FB                 db  49h ; I
.eh_frame:00000000000069FC                 db  0Eh
.eh_frame:00000000000069FD                 db  20h
.eh_frame:00000000000069FE                 db  6Eh ; n
.eh_frame:00000000000069FF                 db  0Ah
.eh_frame:0000000000006A00                 db  0Eh
.eh_frame:0000000000006A01                 db  18h
.eh_frame:0000000000006A02                 db  41h ; A
.eh_frame:0000000000006A03                 db  0Eh
.eh_frame:0000000000006A04                 db  10h
.eh_frame:0000000000006A05                 db  41h ; A
.eh_frame:0000000000006A06                 db  0Eh
.eh_frame:0000000000006A07                 db    8
.eh_frame:0000000000006A08                 db  45h ; E
.eh_frame:0000000000006A09                 db  0Bh
.eh_frame:0000000000006A0A                 db    2
.eh_frame:0000000000006A0B                 db  4Ah ; J
.eh_frame:0000000000006A0C                 db  0Ah
.eh_frame:0000000000006A0D                 db  0Eh
.eh_frame:0000000000006A0E                 db  18h
.eh_frame:0000000000006A0F                 db  41h ; A
.eh_frame:0000000000006A10                 db  0Eh
.eh_frame:0000000000006A11                 db  10h
.eh_frame:0000000000006A12                 db  41h ; A
.eh_frame:0000000000006A13                 db  0Eh
.eh_frame:0000000000006A14                 db    8
.eh_frame:0000000000006A15                 db  44h ; D
.eh_frame:0000000000006A16                 db  0Bh
.eh_frame:0000000000006A17                 db    2
.eh_frame:0000000000006A18                 db  54h ; T
.eh_frame:0000000000006A19                 db  0Eh
.eh_frame:0000000000006A1A                 db  18h
.eh_frame:0000000000006A1B                 db  41h ; A
.eh_frame:0000000000006A1C                 db  0Eh
.eh_frame:0000000000006A1D                 db  10h
.eh_frame:0000000000006A1E                 db  41h ; A
.eh_frame:0000000000006A1F                 db  0Eh
.eh_frame:0000000000006A20                 db    8
.eh_frame:0000000000006A21                 db    0
.eh_frame:0000000000006A22                 db    0
.eh_frame:0000000000006A23                 db    0
.eh_frame:0000000000006A24                 db  74h ; t
.eh_frame:0000000000006A25                 db    0
.eh_frame:0000000000006A26                 db    0
.eh_frame:0000000000006A27                 db    0
.eh_frame:0000000000006A28                 db 0A8h
.eh_frame:0000000000006A29                 db    3
.eh_frame:0000000000006A2A                 db    0
.eh_frame:0000000000006A2B                 db    0
.eh_frame:0000000000006A2C                 db 0D4h
.eh_frame:0000000000006A2D                 db 0BFh
.eh_frame:0000000000006A2E                 db 0FFh
.eh_frame:0000000000006A2F                 db 0FFh
.eh_frame:0000000000006A30                 db  34h ; 4
.eh_frame:0000000000006A31                 db  12h
.eh_frame:0000000000006A32                 db    0
.eh_frame:0000000000006A33                 db    0
.eh_frame:0000000000006A34                 db    0
.eh_frame:0000000000006A35                 db  42h ; B
.eh_frame:0000000000006A36                 db  0Eh
.eh_frame:0000000000006A37                 db  10h
.eh_frame:0000000000006A38                 db  8Fh
.eh_frame:0000000000006A39                 db    2
.eh_frame:0000000000006A3A                 db  42h ; B
.eh_frame:0000000000006A3B                 db  0Eh
.eh_frame:0000000000006A3C                 db  18h
.eh_frame:0000000000006A3D                 db  8Eh
.eh_frame:0000000000006A3E                 db    3
.eh_frame:0000000000006A3F                 db  45h ; E
.eh_frame:0000000000006A40                 db  0Eh
.eh_frame:0000000000006A41                 db  20h
.eh_frame:0000000000006A42                 db  8Dh
.eh_frame:0000000000006A43                 db    4
.eh_frame:0000000000006A44                 db  42h ; B
.eh_frame:0000000000006A45                 db  0Eh
.eh_frame:0000000000006A46                 db  28h ; (
.eh_frame:0000000000006A47                 db  8Ch
.eh_frame:0000000000006A48                 db    5
.eh_frame:0000000000006A49                 db  44h ; D
.eh_frame:0000000000006A4A                 db  0Eh
.eh_frame:0000000000006A4B                 db  30h ; 0
.eh_frame:0000000000006A4C                 db  86h
.eh_frame:0000000000006A4D                 db    6
.eh_frame:0000000000006A4E                 db  41h ; A
.eh_frame:0000000000006A4F                 db  0Eh
.eh_frame:0000000000006A50                 db  38h ; 8
.eh_frame:0000000000006A51                 db  83h
.eh_frame:0000000000006A52                 db    7
.eh_frame:0000000000006A53                 db  53h ; S
.eh_frame:0000000000006A54                 db  0Eh
.eh_frame:0000000000006A55                 db 0F0h
.eh_frame:0000000000006A56                 db    1
.eh_frame:0000000000006A57                 db    3
.eh_frame:0000000000006A58                 db  81h
.eh_frame:0000000000006A59                 db  0Bh
.eh_frame:0000000000006A5A                 db  0Eh
.eh_frame:0000000000006A5B                 db 0F8h
.eh_frame:0000000000006A5C                 db    1
.eh_frame:0000000000006A5D                 db  4Ah ; J
.eh_frame:0000000000006A5E                 db  0Eh
.eh_frame:0000000000006A5F                 db  80h
.eh_frame:0000000000006A60                 db    2
.eh_frame:0000000000006A61                 db  44h ; D
.eh_frame:0000000000006A62                 db  0Eh
.eh_frame:0000000000006A63                 db  88h
.eh_frame:0000000000006A64                 db    2
.eh_frame:0000000000006A65                 db  45h ; E
.eh_frame:0000000000006A66                 db  0Eh
.eh_frame:0000000000006A67                 db  90h
.eh_frame:0000000000006A68                 db    2
.eh_frame:0000000000006A69                 db  5Fh ; _
.eh_frame:0000000000006A6A                 db  0Eh
.eh_frame:0000000000006A6B                 db 0F0h
.eh_frame:0000000000006A6C                 db    1
.eh_frame:0000000000006A6D                 db  64h ; d
.eh_frame:0000000000006A6E                 db  0Ah
.eh_frame:0000000000006A6F                 db  0Eh
.eh_frame:0000000000006A70                 db  38h ; 8
.eh_frame:0000000000006A71                 db  41h ; A
.eh_frame:0000000000006A72                 db  0Eh
.eh_frame:0000000000006A73                 db  30h ; 0
.eh_frame:0000000000006A74                 db  41h ; A
.eh_frame:0000000000006A75                 db  0Eh
.eh_frame:0000000000006A76                 db  28h ; (
.eh_frame:0000000000006A77                 db  42h ; B
.eh_frame:0000000000006A78                 db  0Eh
.eh_frame:0000000000006A79                 db  20h
.eh_frame:0000000000006A7A                 db  42h ; B
.eh_frame:0000000000006A7B                 db  0Eh
.eh_frame:0000000000006A7C                 db  18h
.eh_frame:0000000000006A7D                 db  42h ; B
.eh_frame:0000000000006A7E                 db  0Eh
.eh_frame:0000000000006A7F                 db  10h
.eh_frame:0000000000006A80                 db  42h ; B
.eh_frame:0000000000006A81                 db  0Eh
.eh_frame:0000000000006A82                 db    8
.eh_frame:0000000000006A83                 db  44h ; D
.eh_frame:0000000000006A84                 db  0Bh
.eh_frame:0000000000006A85                 db    3
.eh_frame:0000000000006A86                 db  99h
.eh_frame:0000000000006A87                 db    5
.eh_frame:0000000000006A88                 db  0Eh
.eh_frame:0000000000006A89                 db 0F8h
.eh_frame:0000000000006A8A                 db    1
.eh_frame:0000000000006A8B                 db  4Dh ; M
.eh_frame:0000000000006A8C                 db  0Eh
.eh_frame:0000000000006A8D                 db  80h
.eh_frame:0000000000006A8E                 db    2
.eh_frame:0000000000006A8F                 db  44h ; D
.eh_frame:0000000000006A90                 db  0Eh
.eh_frame:0000000000006A91                 db  88h
.eh_frame:0000000000006A92                 db    2
.eh_frame:0000000000006A93                 db  47h ; G
.eh_frame:0000000000006A94                 db  0Eh
.eh_frame:0000000000006A95                 db  90h
.eh_frame:0000000000006A96                 db    2
.eh_frame:0000000000006A97                 db  5Bh ; [
.eh_frame:0000000000006A98                 db  0Eh
.eh_frame:0000000000006A99                 db 0F0h
.eh_frame:0000000000006A9A                 db    1
.eh_frame:0000000000006A9B                 db    0
.eh_frame:0000000000006A9C                 db  68h ; h
.eh_frame:0000000000006A9D                 db    0
.eh_frame:0000000000006A9E                 db    0
.eh_frame:0000000000006A9F                 db    0
.eh_frame:0000000000006AA0                 db  20h
.eh_frame:0000000000006AA1                 db    4
.eh_frame:0000000000006AA2                 db    0
.eh_frame:0000000000006AA3                 db    0
.eh_frame:0000000000006AA4                 db  9Ch
.eh_frame:0000000000006AA5                 db 0D1h
.eh_frame:0000000000006AA6                 db 0FFh
.eh_frame:0000000000006AA7                 db 0FFh
.eh_frame:0000000000006AA8                 db 0ABh
.eh_frame:0000000000006AA9                 db    1
.eh_frame:0000000000006AAA                 db    0
.eh_frame:0000000000006AAB                 db    0
.eh_frame:0000000000006AAC                 db    0
.eh_frame:0000000000006AAD                 db  42h ; B
.eh_frame:0000000000006AAE                 db  0Eh
.eh_frame:0000000000006AAF                 db  10h
.eh_frame:0000000000006AB0                 db  8Fh
.eh_frame:0000000000006AB1                 db    2
.eh_frame:0000000000006AB2                 db  42h ; B
.eh_frame:0000000000006AB3                 db  0Eh
.eh_frame:0000000000006AB4                 db  18h
.eh_frame:0000000000006AB5                 db  8Eh
.eh_frame:0000000000006AB6                 db    3
.eh_frame:0000000000006AB7                 db  45h ; E
.eh_frame:0000000000006AB8                 db  0Eh
.eh_frame:0000000000006AB9                 db  20h
.eh_frame:0000000000006ABA                 db  8Dh
.eh_frame:0000000000006ABB                 db    4
.eh_frame:0000000000006ABC                 db  42h ; B
.eh_frame:0000000000006ABD                 db  0Eh
.eh_frame:0000000000006ABE                 db  28h ; (
.eh_frame:0000000000006ABF                 db  8Ch
.eh_frame:0000000000006AC0                 db    5
.eh_frame:0000000000006AC1                 db  44h ; D
.eh_frame:0000000000006AC2                 db  0Eh
.eh_frame:0000000000006AC3                 db  30h ; 0
.eh_frame:0000000000006AC4                 db  86h
.eh_frame:0000000000006AC5                 db    6
.eh_frame:0000000000006AC6                 db  41h ; A
.eh_frame:0000000000006AC7                 db  0Eh
.eh_frame:0000000000006AC8                 db  38h ; 8
.eh_frame:0000000000006AC9                 db  83h
.eh_frame:0000000000006ACA                 db    7
.eh_frame:0000000000006ACB                 db  47h ; G
.eh_frame:0000000000006ACC                 db  0Eh
.eh_frame:0000000000006ACD                 db  60h ; `
.eh_frame:0000000000006ACE                 db    2
.eh_frame:0000000000006ACF                 db  99h
.eh_frame:0000000000006AD0                 db  0Eh
.eh_frame:0000000000006AD1                 db  68h ; h
.eh_frame:0000000000006AD2                 db  5Fh ; _
.eh_frame:0000000000006AD3                 db  0Eh
.eh_frame:0000000000006AD4                 db  70h ; p
.eh_frame:0000000000006AD5                 db  46h ; F
.eh_frame:0000000000006AD6                 db  0Eh
.eh_frame:0000000000006AD7                 db  78h ; x
.eh_frame:0000000000006AD8                 db  42h ; B
.eh_frame:0000000000006AD9                 db  0Eh
.eh_frame:0000000000006ADA                 db  80h
.eh_frame:0000000000006ADB                 db    1
.eh_frame:0000000000006ADC                 db  59h ; Y
.eh_frame:0000000000006ADD                 db  0Eh
.eh_frame:0000000000006ADE                 db  60h ; `
.eh_frame:0000000000006ADF                 db    2
.eh_frame:0000000000006AE0                 db  40h ; @
.eh_frame:0000000000006AE1                 db  0Eh
.eh_frame:0000000000006AE2                 db  68h ; h
.eh_frame:0000000000006AE3                 db  4Bh ; K
.eh_frame:0000000000006AE4                 db  0Eh
.eh_frame:0000000000006AE5                 db  70h ; p
.eh_frame:0000000000006AE6                 db  43h ; C
.eh_frame:0000000000006AE7                 db  0Eh
.eh_frame:0000000000006AE8                 db  78h ; x
.eh_frame:0000000000006AE9                 db  45h ; E
.eh_frame:0000000000006AEA                 db  0Eh
.eh_frame:0000000000006AEB                 db  80h
.eh_frame:0000000000006AEC                 db    1
.eh_frame:0000000000006AED                 db  5Eh ; ^
.eh_frame:0000000000006AEE                 db  0Eh
.eh_frame:0000000000006AEF                 db  60h ; `
.eh_frame:0000000000006AF0                 db  4Ch ; L
.eh_frame:0000000000006AF1                 db  0Ah
.eh_frame:0000000000006AF2                 db  0Eh
.eh_frame:0000000000006AF3                 db  38h ; 8
.eh_frame:0000000000006AF4                 db  44h ; D
.eh_frame:0000000000006AF5                 db  0Eh
.eh_frame:0000000000006AF6                 db  30h ; 0
.eh_frame:0000000000006AF7                 db  41h ; A
.eh_frame:0000000000006AF8                 db  0Eh
.eh_frame:0000000000006AF9                 db  28h ; (
.eh_frame:0000000000006AFA                 db  42h ; B
.eh_frame:0000000000006AFB                 db  0Eh
.eh_frame:0000000000006AFC                 db  20h
.eh_frame:0000000000006AFD                 db  42h ; B
.eh_frame:0000000000006AFE                 db  0Eh
.eh_frame:0000000000006AFF                 db  18h
.eh_frame:0000000000006B00                 db  42h ; B
.eh_frame:0000000000006B01                 db  0Eh
.eh_frame:0000000000006B02                 db  10h
.eh_frame:0000000000006B03                 db  42h ; B
.eh_frame:0000000000006B04                 db  0Eh
.eh_frame:0000000000006B05                 db    8
.eh_frame:0000000000006B06                 db  46h ; F
.eh_frame:0000000000006B07                 db  0Bh
.eh_frame:0000000000006B08                 db  28h ; (
.eh_frame:0000000000006B09                 db    0
.eh_frame:0000000000006B0A                 db    0
.eh_frame:0000000000006B0B                 db    0
.eh_frame:0000000000006B0C                 db  8Ch
.eh_frame:0000000000006B0D                 db    4
.eh_frame:0000000000006B0E                 db    0
.eh_frame:0000000000006B0F                 db    0
.eh_frame:0000000000006B10                 db 0E0h
.eh_frame:0000000000006B11                 db 0D2h
.eh_frame:0000000000006B12                 db 0FFh
.eh_frame:0000000000006B13                 db 0FFh
.eh_frame:0000000000006B14                 db  36h ; 6
.eh_frame:0000000000006B15                 db    0
.eh_frame:0000000000006B16                 db    0
.eh_frame:0000000000006B17                 db    0
.eh_frame:0000000000006B18                 db    0
.eh_frame:0000000000006B19                 db  42h ; B
.eh_frame:0000000000006B1A                 db  0Eh
.eh_frame:0000000000006B1B                 db  10h
.eh_frame:0000000000006B1C                 db  8Ch
.eh_frame:0000000000006B1D                 db    2
.eh_frame:0000000000006B1E                 db  41h ; A
.eh_frame:0000000000006B1F                 db  0Eh
.eh_frame:0000000000006B20                 db  18h
.eh_frame:0000000000006B21                 db  86h
.eh_frame:0000000000006B22                 db    3
.eh_frame:0000000000006B23                 db  41h ; A
.eh_frame:0000000000006B24                 db  0Eh
.eh_frame:0000000000006B25                 db  20h
.eh_frame:0000000000006B26                 db  83h
.eh_frame:0000000000006B27                 db    4
.eh_frame:0000000000006B28                 db  6Eh ; n
.eh_frame:0000000000006B29                 db  0Eh
.eh_frame:0000000000006B2A                 db  18h
.eh_frame:0000000000006B2B                 db  41h ; A
.eh_frame:0000000000006B2C                 db  0Eh
.eh_frame:0000000000006B2D                 db  10h
.eh_frame:0000000000006B2E                 db  42h ; B
.eh_frame:0000000000006B2F                 db  0Eh
.eh_frame:0000000000006B30                 db    8
.eh_frame:0000000000006B31                 db    0
.eh_frame:0000000000006B32                 db    0
.eh_frame:0000000000006B33                 db    0
.eh_frame:0000000000006B34                 db  10h
.eh_frame:0000000000006B35                 db    0
.eh_frame:0000000000006B36                 db    0
.eh_frame:0000000000006B37                 db    0
.eh_frame:0000000000006B38                 db 0B8h
.eh_frame:0000000000006B39                 db    4
.eh_frame:0000000000006B3A                 db    0
.eh_frame:0000000000006B3B                 db    0
.eh_frame:0000000000006B3C                 db 0F4h
.eh_frame:0000000000006B3D                 db 0D2h
.eh_frame:0000000000006B3E                 db 0FFh
.eh_frame:0000000000006B3F                 db 0FFh
.eh_frame:0000000000006B40                 db  11h
.eh_frame:0000000000006B41                 db    0
.eh_frame:0000000000006B42                 db    0
.eh_frame:0000000000006B43                 db    0
.eh_frame:0000000000006B44                 db    0
.eh_frame:0000000000006B45                 db    0
.eh_frame:0000000000006B46                 db    0
.eh_frame:0000000000006B47                 db    0
.eh_frame:0000000000006B48                 db  10h
.eh_frame:0000000000006B49                 db    0
.eh_frame:0000000000006B4A                 db    0
.eh_frame:0000000000006B4B                 db    0
.eh_frame:0000000000006B4C                 db 0CCh
.eh_frame:0000000000006B4D                 db    4
.eh_frame:0000000000006B4E                 db    0
.eh_frame:0000000000006B4F                 db    0
.eh_frame:0000000000006B50                 db    0
.eh_frame:0000000000006B51                 db 0D3h
.eh_frame:0000000000006B52                 db 0FFh
.eh_frame:0000000000006B53                 db 0FFh
.eh_frame:0000000000006B54                 db  11h
.eh_frame:0000000000006B55                 db    0
.eh_frame:0000000000006B56                 db    0
.eh_frame:0000000000006B57                 db    0
.eh_frame:0000000000006B58                 db    0
.eh_frame:0000000000006B59                 db    0
.eh_frame:0000000000006B5A                 db    0
.eh_frame:0000000000006B5B                 db    0
.eh_frame:0000000000006B5C                 db  10h
.eh_frame:0000000000006B5D                 db    0
.eh_frame:0000000000006B5E                 db    0
.eh_frame:0000000000006B5F                 db    0
.eh_frame:0000000000006B60                 db 0E0h
.eh_frame:0000000000006B61                 db    4
.eh_frame:0000000000006B62                 db    0
.eh_frame:0000000000006B63                 db    0
.eh_frame:0000000000006B64                 db  0Ch
.eh_frame:0000000000006B65                 db 0D3h
.eh_frame:0000000000006B66                 db 0FFh
.eh_frame:0000000000006B67                 db 0FFh
.eh_frame:0000000000006B68                 db  35h ; 5
.eh_frame:0000000000006B69                 db    0
.eh_frame:0000000000006B6A                 db    0
.eh_frame:0000000000006B6B                 db    0
.eh_frame:0000000000006B6C                 db    0
.eh_frame:0000000000006B6D                 db    0
.eh_frame:0000000000006B6E                 db    0
.eh_frame:0000000000006B6F                 db    0
.eh_frame:0000000000006B70                 db  10h
.eh_frame:0000000000006B71                 db    0
.eh_frame:0000000000006B72                 db    0
.eh_frame:0000000000006B73                 db    0
.eh_frame:0000000000006B74                 db 0F4h
.eh_frame:0000000000006B75                 db    4
.eh_frame:0000000000006B76                 db    0
.eh_frame:0000000000006B77                 db    0
.eh_frame:0000000000006B78                 db  38h ; 8
.eh_frame:0000000000006B79                 db 0D3h
.eh_frame:0000000000006B7A                 db 0FFh
.eh_frame:0000000000006B7B                 db 0FFh
.eh_frame:0000000000006B7C                 db  15h
.eh_frame:0000000000006B7D                 db    0
.eh_frame:0000000000006B7E                 db    0
.eh_frame:0000000000006B7F                 db    0
.eh_frame:0000000000006B80                 db    0
.eh_frame:0000000000006B81                 db    0
.eh_frame:0000000000006B82                 db    0
.eh_frame:0000000000006B83                 db    0
.eh_frame:0000000000006B84                 db  10h
.eh_frame:0000000000006B85                 db    0
.eh_frame:0000000000006B86                 db    0
.eh_frame:0000000000006B87                 db    0
.eh_frame:0000000000006B88                 db    8
.eh_frame:0000000000006B89                 db    5
.eh_frame:0000000000006B8A                 db    0
.eh_frame:0000000000006B8B                 db    0
.eh_frame:0000000000006B8C                 db  44h ; D
.eh_frame:0000000000006B8D                 db 0D3h
.eh_frame:0000000000006B8E                 db 0FFh
.eh_frame:0000000000006B8F                 db 0FFh
.eh_frame:0000000000006B90                 db  30h ; 0
.eh_frame:0000000000006B91                 db    0
.eh_frame:0000000000006B92                 db    0
.eh_frame:0000000000006B93                 db    0
.eh_frame:0000000000006B94                 db    0
.eh_frame:0000000000006B95                 db  6Bh ; k
.eh_frame:0000000000006B96                 db  0Eh
.eh_frame:0000000000006B97                 db  10h
.eh_frame:0000000000006B98                 db  50h ; P
.eh_frame:0000000000006B99                 db    0
.eh_frame:0000000000006B9A                 db    0
.eh_frame:0000000000006B9B                 db    0
.eh_frame:0000000000006B9C                 db  1Ch
.eh_frame:0000000000006B9D                 db    5
.eh_frame:0000000000006B9E                 db    0
.eh_frame:0000000000006B9F                 db    0
.eh_frame:0000000000006BA0                 db  60h ; `
.eh_frame:0000000000006BA1                 db 0D3h
.eh_frame:0000000000006BA2                 db 0FFh
.eh_frame:0000000000006BA3                 db 0FFh
.eh_frame:0000000000006BA4                 db  74h ; t
.eh_frame:0000000000006BA5                 db    0
.eh_frame:0000000000006BA6                 db    0
.eh_frame:0000000000006BA7                 db    0
.eh_frame:0000000000006BA8                 db    0
.eh_frame:0000000000006BA9                 db  42h ; B
.eh_frame:0000000000006BAA                 db  0Eh
.eh_frame:0000000000006BAB                 db  10h
.eh_frame:0000000000006BAC                 db  8Fh
.eh_frame:0000000000006BAD                 db    2
.eh_frame:0000000000006BAE                 db  42h ; B
.eh_frame:0000000000006BAF                 db  0Eh
.eh_frame:0000000000006BB0                 db  18h
.eh_frame:0000000000006BB1                 db  8Eh
.eh_frame:0000000000006BB2                 db    3
.eh_frame:0000000000006BB3                 db  49h ; I
.eh_frame:0000000000006BB4                 db  0Eh
.eh_frame:0000000000006BB5                 db  20h
.eh_frame:0000000000006BB6                 db  8Dh
.eh_frame:0000000000006BB7                 db    4
.eh_frame:0000000000006BB8                 db  42h ; B
.eh_frame:0000000000006BB9                 db  0Eh
.eh_frame:0000000000006BBA                 db  28h ; (
.eh_frame:0000000000006BBB                 db  8Ch
.eh_frame:0000000000006BBC                 db    5
.eh_frame:0000000000006BBD                 db  44h ; D
.eh_frame:0000000000006BBE                 db  0Eh
.eh_frame:0000000000006BBF                 db  30h ; 0
.eh_frame:0000000000006BC0                 db  86h
.eh_frame:0000000000006BC1                 db    6
.eh_frame:0000000000006BC2                 db  41h ; A
.eh_frame:0000000000006BC3                 db  0Eh
.eh_frame:0000000000006BC4                 db  38h ; 8
.eh_frame:0000000000006BC5                 db  83h
.eh_frame:0000000000006BC6                 db    7
.eh_frame:0000000000006BC7                 db  4Dh ; M
.eh_frame:0000000000006BC8                 db  0Eh
.eh_frame:0000000000006BC9                 db  50h ; P
.eh_frame:0000000000006BCA                 db  5Fh ; _
.eh_frame:0000000000006BCB                 db  0Eh
.eh_frame:0000000000006BCC                 db  58h ; X
.eh_frame:0000000000006BCD                 db  47h ; G
.eh_frame:0000000000006BCE                 db  0Eh
.eh_frame:0000000000006BCF                 db  60h ; `
.eh_frame:0000000000006BD0                 db  46h ; F
.eh_frame:0000000000006BD1                 db  0Eh
.eh_frame:0000000000006BD2                 db  68h ; h
.eh_frame:0000000000006BD3                 db  44h ; D
.eh_frame:0000000000006BD4                 db  0Eh
.eh_frame:0000000000006BD5                 db  70h ; p
.eh_frame:0000000000006BD6                 db  58h ; X
.eh_frame:0000000000006BD7                 db  0Eh
.eh_frame:0000000000006BD8                 db  38h ; 8
.eh_frame:0000000000006BD9                 db  41h ; A
.eh_frame:0000000000006BDA                 db  0Eh
.eh_frame:0000000000006BDB                 db  30h ; 0
.eh_frame:0000000000006BDC                 db  41h ; A
.eh_frame:0000000000006BDD                 db  0Eh
.eh_frame:0000000000006BDE                 db  28h ; (
.eh_frame:0000000000006BDF                 db  42h ; B
.eh_frame:0000000000006BE0                 db  0Eh
.eh_frame:0000000000006BE1                 db  20h
.eh_frame:0000000000006BE2                 db  42h ; B
.eh_frame:0000000000006BE3                 db  0Eh
.eh_frame:0000000000006BE4                 db  18h
.eh_frame:0000000000006BE5                 db  42h ; B
.eh_frame:0000000000006BE6                 db  0Eh
.eh_frame:0000000000006BE7                 db  10h
.eh_frame:0000000000006BE8                 db  42h ; B
.eh_frame:0000000000006BE9                 db  0Eh
.eh_frame:0000000000006BEA                 db    8
.eh_frame:0000000000006BEB                 db    0
.eh_frame:0000000000006BEC                 db  68h ; h
.eh_frame:0000000000006BED                 db    0
.eh_frame:0000000000006BEE                 db    0
.eh_frame:0000000000006BEF                 db    0
.eh_frame:0000000000006BF0                 db  70h ; p
.eh_frame:0000000000006BF1                 db    5
.eh_frame:0000000000006BF2                 db    0
.eh_frame:0000000000006BF3                 db    0
.eh_frame:0000000000006BF4                 db  8Ch
.eh_frame:0000000000006BF5                 db 0D3h
.eh_frame:0000000000006BF6                 db 0FFh
.eh_frame:0000000000006BF7                 db 0FFh
.eh_frame:0000000000006BF8                 db 0E3h
.eh_frame:0000000000006BF9                 db    0
.eh_frame:0000000000006BFA                 db    0
.eh_frame:0000000000006BFB                 db    0
.eh_frame:0000000000006BFC                 db    0
.eh_frame:0000000000006BFD                 db  42h ; B
.eh_frame:0000000000006BFE                 db  0Eh
.eh_frame:0000000000006BFF                 db  10h
.eh_frame:0000000000006C00                 db  8Fh
.eh_frame:0000000000006C01                 db    2
.eh_frame:0000000000006C02                 db  42h ; B
.eh_frame:0000000000006C03                 db  0Eh
.eh_frame:0000000000006C04                 db  18h
.eh_frame:0000000000006C05                 db  8Eh
.eh_frame:0000000000006C06                 db    3
.eh_frame:0000000000006C07                 db  49h ; I
.eh_frame:0000000000006C08                 db  0Eh
.eh_frame:0000000000006C09                 db  20h
.eh_frame:0000000000006C0A                 db  8Dh
.eh_frame:0000000000006C0B                 db    4
.eh_frame:0000000000006C0C                 db  42h ; B
.eh_frame:0000000000006C0D                 db  0Eh
.eh_frame:0000000000006C0E                 db  28h ; (
.eh_frame:0000000000006C0F                 db  8Ch
.eh_frame:0000000000006C10                 db    5
.eh_frame:0000000000006C11                 db  44h ; D
.eh_frame:0000000000006C12                 db  0Eh
.eh_frame:0000000000006C13                 db  30h ; 0
.eh_frame:0000000000006C14                 db  86h
.eh_frame:0000000000006C15                 db    6
.eh_frame:0000000000006C16                 db  41h ; A
.eh_frame:0000000000006C17                 db  0Eh
.eh_frame:0000000000006C18                 db  38h ; 8
.eh_frame:0000000000006C19                 db  83h
.eh_frame:0000000000006C1A                 db    7
.eh_frame:0000000000006C1B                 db  4Dh ; M
.eh_frame:0000000000006C1C                 db  0Eh
.eh_frame:0000000000006C1D                 db  70h ; p
.eh_frame:0000000000006C1E                 db  65h ; e
.eh_frame:0000000000006C1F                 db  0Eh
.eh_frame:0000000000006C20                 db  78h ; x
.eh_frame:0000000000006C21                 db  4Dh ; M
.eh_frame:0000000000006C22                 db  0Eh
.eh_frame:0000000000006C23                 db  80h
.eh_frame:0000000000006C24                 db    1
.eh_frame:0000000000006C25                 db  46h ; F
.eh_frame:0000000000006C26                 db  0Eh
.eh_frame:0000000000006C27                 db  88h
.eh_frame:0000000000006C28                 db    1
.eh_frame:0000000000006C29                 db  42h ; B
.eh_frame:0000000000006C2A                 db  0Eh
.eh_frame:0000000000006C2B                 db  90h
.eh_frame:0000000000006C2C                 db    1
.eh_frame:0000000000006C2D                 db  5Eh ; ^
.eh_frame:0000000000006C2E                 db  0Eh
.eh_frame:0000000000006C2F                 db  70h ; p
.eh_frame:0000000000006C30                 db  56h ; V
.eh_frame:0000000000006C31                 db  0Eh
.eh_frame:0000000000006C32                 db  78h ; x
.eh_frame:0000000000006C33                 db  43h ; C
.eh_frame:0000000000006C34                 db  0Eh
.eh_frame:0000000000006C35                 db  80h
.eh_frame:0000000000006C36                 db    1
.eh_frame:0000000000006C37                 db  43h ; C
.eh_frame:0000000000006C38                 db  0Eh
.eh_frame:0000000000006C39                 db  88h
.eh_frame:0000000000006C3A                 db    1
.eh_frame:0000000000006C3B                 db  56h ; V
.eh_frame:0000000000006C3C                 db  0Eh
.eh_frame:0000000000006C3D                 db  90h
.eh_frame:0000000000006C3E                 db    1
.eh_frame:0000000000006C3F                 db  52h ; R
.eh_frame:0000000000006C40                 db  0Eh
.eh_frame:0000000000006C41                 db  70h ; p
.eh_frame:0000000000006C42                 db  5Bh ; [
.eh_frame:0000000000006C43                 db  0Eh
.eh_frame:0000000000006C44                 db  38h ; 8
.eh_frame:0000000000006C45                 db  41h ; A
.eh_frame:0000000000006C46                 db  0Eh
.eh_frame:0000000000006C47                 db  30h ; 0
.eh_frame:0000000000006C48                 db  41h ; A
.eh_frame:0000000000006C49                 db  0Eh
.eh_frame:0000000000006C4A                 db  28h ; (
.eh_frame:0000000000006C4B                 db  42h ; B
.eh_frame:0000000000006C4C                 db  0Eh
.eh_frame:0000000000006C4D                 db  20h
.eh_frame:0000000000006C4E                 db  42h ; B
.eh_frame:0000000000006C4F                 db  0Eh
.eh_frame:0000000000006C50                 db  18h
.eh_frame:0000000000006C51                 db  42h ; B
.eh_frame:0000000000006C52                 db  0Eh
.eh_frame:0000000000006C53                 db  10h
.eh_frame:0000000000006C54                 db  42h ; B
.eh_frame:0000000000006C55                 db  0Eh
.eh_frame:0000000000006C56                 db    8
.eh_frame:0000000000006C57                 db    0
.eh_frame:0000000000006C58                 db  10h
.eh_frame:0000000000006C59                 db    0
.eh_frame:0000000000006C5A                 db    0
.eh_frame:0000000000006C5B                 db    0
.eh_frame:0000000000006C5C                 db 0DCh
.eh_frame:0000000000006C5D                 db    5
.eh_frame:0000000000006C5E                 db    0
.eh_frame:0000000000006C5F                 db    0
.eh_frame:0000000000006C60                 db  10h
.eh_frame:0000000000006C61                 db 0D4h
.eh_frame:0000000000006C62                 db 0FFh
.eh_frame:0000000000006C63                 db 0FFh
.eh_frame:0000000000006C64                 db  0Ah
.eh_frame:0000000000006C65                 db    0
.eh_frame:0000000000006C66                 db    0
.eh_frame:0000000000006C67                 db    0
.eh_frame:0000000000006C68                 db    0
.eh_frame:0000000000006C69                 db    0
.eh_frame:0000000000006C6A                 db    0
.eh_frame:0000000000006C6B                 db    0
.eh_frame:0000000000006C6C                 db  28h ; (
.eh_frame:0000000000006C6D                 db    0
.eh_frame:0000000000006C6E                 db    0
.eh_frame:0000000000006C6F                 db    0
.eh_frame:0000000000006C70                 db 0F0h
.eh_frame:0000000000006C71                 db    5
.eh_frame:0000000000006C72                 db    0
.eh_frame:0000000000006C73                 db    0
.eh_frame:0000000000006C74                 db  0Ch
.eh_frame:0000000000006C75                 db 0D4h
.eh_frame:0000000000006C76                 db 0FFh
.eh_frame:0000000000006C77                 db 0FFh
.eh_frame:0000000000006C78                 db  93h
.eh_frame:0000000000006C79                 db    0
.eh_frame:0000000000006C7A                 db    0
.eh_frame:0000000000006C7B                 db    0
.eh_frame:0000000000006C7C                 db    0
.eh_frame:0000000000006C7D                 db  48h ; H
.eh_frame:0000000000006C7E                 db  0Eh
.eh_frame:0000000000006C7F                 db  10h
.eh_frame:0000000000006C80                 db  8Ch
.eh_frame:0000000000006C81                 db    2
.eh_frame:0000000000006C82                 db  48h ; H
.eh_frame:0000000000006C83                 db  0Eh
.eh_frame:0000000000006C84                 db  18h
.eh_frame:0000000000006C85                 db  86h
.eh_frame:0000000000006C86                 db    3
.eh_frame:0000000000006C87                 db  41h ; A
.eh_frame:0000000000006C88                 db  0Eh
.eh_frame:0000000000006C89                 db  20h
.eh_frame:0000000000006C8A                 db  83h
.eh_frame:0000000000006C8B                 db    4
.eh_frame:0000000000006C8C                 db    2
.eh_frame:0000000000006C8D                 db  74h ; t
.eh_frame:0000000000006C8E                 db  0Eh
.eh_frame:0000000000006C8F                 db  18h
.eh_frame:0000000000006C90                 db  4Bh ; K
.eh_frame:0000000000006C91                 db  0Eh
.eh_frame:0000000000006C92                 db  10h
.eh_frame:0000000000006C93                 db  42h ; B
.eh_frame:0000000000006C94                 db  0Eh
.eh_frame:0000000000006C95                 db    8
.eh_frame:0000000000006C96                 db    0
.eh_frame:0000000000006C97                 db    0
.eh_frame:0000000000006C98                 db  10h
.eh_frame:0000000000006C99                 db    0
.eh_frame:0000000000006C9A                 db    0
.eh_frame:0000000000006C9B                 db    0
.eh_frame:0000000000006C9C                 db  1Ch
.eh_frame:0000000000006C9D                 db    6
.eh_frame:0000000000006C9E                 db    0
.eh_frame:0000000000006C9F                 db    0
.eh_frame:0000000000006CA0                 db  80h
.eh_frame:0000000000006CA1                 db 0D4h
.eh_frame:0000000000006CA2                 db 0FFh
.eh_frame:0000000000006CA3                 db 0FFh
.eh_frame:0000000000006CA4                 db  13h
.eh_frame:0000000000006CA5                 db    0
.eh_frame:0000000000006CA6                 db    0
.eh_frame:0000000000006CA7                 db    0
.eh_frame:0000000000006CA8                 db    0
.eh_frame:0000000000006CA9                 db    0
.eh_frame:0000000000006CAA                 db    0
.eh_frame:0000000000006CAB                 db    0
.eh_frame:0000000000006CAC                 db  10h
.eh_frame:0000000000006CAD                 db    0
.eh_frame:0000000000006CAE                 db    0
.eh_frame:0000000000006CAF                 db    0
.eh_frame:0000000000006CB0                 db  30h ; 0
.eh_frame:0000000000006CB1                 db    6
.eh_frame:0000000000006CB2                 db    0
.eh_frame:0000000000006CB3                 db    0
.eh_frame:0000000000006CB4                 db  8Ch
.eh_frame:0000000000006CB5                 db 0D4h
.eh_frame:0000000000006CB6                 db 0FFh
.eh_frame:0000000000006CB7                 db 0FFh
.eh_frame:0000000000006CB8                 db  0Ch
.eh_frame:0000000000006CB9                 db    0
.eh_frame:0000000000006CBA                 db    0
.eh_frame:0000000000006CBB                 db    0
.eh_frame:0000000000006CBC                 db    0
.eh_frame:0000000000006CBD                 db    0
.eh_frame:0000000000006CBE                 db    0
.eh_frame:0000000000006CBF                 db    0
.eh_frame:0000000000006CC0                 db  10h
.eh_frame:0000000000006CC1                 db    0
.eh_frame:0000000000006CC2                 db    0
.eh_frame:0000000000006CC3                 db    0
.eh_frame:0000000000006CC4                 db  44h ; D
.eh_frame:0000000000006CC5                 db    6
.eh_frame:0000000000006CC6                 db    0
.eh_frame:0000000000006CC7                 db    0
.eh_frame:0000000000006CC8                 db  88h
.eh_frame:0000000000006CC9                 db 0D4h
.eh_frame:0000000000006CCA                 db 0FFh
.eh_frame:0000000000006CCB                 db 0FFh
.eh_frame:0000000000006CCC                 db  18h
.eh_frame:0000000000006CCD                 db    0
.eh_frame:0000000000006CCE                 db    0
.eh_frame:0000000000006CCF                 db    0
.eh_frame:0000000000006CD0                 db    0
.eh_frame:0000000000006CD1                 db    0
.eh_frame:0000000000006CD2                 db    0
.eh_frame:0000000000006CD3                 db    0
.eh_frame:0000000000006CD4                 db  10h
.eh_frame:0000000000006CD5                 db    0
.eh_frame:0000000000006CD6                 db    0
.eh_frame:0000000000006CD7                 db    0
.eh_frame:0000000000006CD8                 db  58h ; X
.eh_frame:0000000000006CD9                 db    6
.eh_frame:0000000000006CDA                 db    0
.eh_frame:0000000000006CDB                 db    0
.eh_frame:0000000000006CDC                 db  94h
.eh_frame:0000000000006CDD                 db 0D4h
.eh_frame:0000000000006CDE                 db 0FFh
.eh_frame:0000000000006CDF                 db 0FFh
.eh_frame:0000000000006CE0                 db  14h
.eh_frame:0000000000006CE1                 db    0
.eh_frame:0000000000006CE2                 db    0
.eh_frame:0000000000006CE3                 db    0
.eh_frame:0000000000006CE4                 db    0
.eh_frame:0000000000006CE5                 db    0
.eh_frame:0000000000006CE6                 db    0
.eh_frame:0000000000006CE7                 db    0
.eh_frame:0000000000006CE8                 db  18h
.eh_frame:0000000000006CE9                 db    0
.eh_frame:0000000000006CEA                 db    0
.eh_frame:0000000000006CEB                 db    0
.eh_frame:0000000000006CEC                 db  6Ch ; l
.eh_frame:0000000000006CED                 db    6
.eh_frame:0000000000006CEE                 db    0
.eh_frame:0000000000006CEF                 db    0
.eh_frame:0000000000006CF0                 db 0A0h
.eh_frame:0000000000006CF1                 db 0D4h
.eh_frame:0000000000006CF2                 db 0FFh
.eh_frame:0000000000006CF3                 db 0FFh
.eh_frame:0000000000006CF4                 db  8Eh
.eh_frame:0000000000006CF5                 db    0
.eh_frame:0000000000006CF6                 db    0
.eh_frame:0000000000006CF7                 db    0
.eh_frame:0000000000006CF8                 db    0
.eh_frame:0000000000006CF9                 db  44h ; D
.eh_frame:0000000000006CFA                 db  0Eh
.eh_frame:0000000000006CFB                 db  50h ; P
.eh_frame:0000000000006CFC                 db    2
.eh_frame:0000000000006CFD                 db  7Fh ; 
.eh_frame:0000000000006CFE                 db  0Ah
.eh_frame:0000000000006CFF                 db  0Eh
.eh_frame:0000000000006D00                 db    8
.eh_frame:0000000000006D01                 db  41h ; A
.eh_frame:0000000000006D02                 db  0Bh
.eh_frame:0000000000006D03                 db    0
.eh_frame:0000000000006D04                 db  18h
.eh_frame:0000000000006D05                 db    0
.eh_frame:0000000000006D06                 db    0
.eh_frame:0000000000006D07                 db    0
.eh_frame:0000000000006D08                 db  88h
.eh_frame:0000000000006D09                 db    6
.eh_frame:0000000000006D0A                 db    0
.eh_frame:0000000000006D0B                 db    0
.eh_frame:0000000000006D0C                 db  14h
.eh_frame:0000000000006D0D                 db 0D5h
.eh_frame:0000000000006D0E                 db 0FFh
.eh_frame:0000000000006D0F                 db 0FFh
.eh_frame:0000000000006D10                 db  8Ah
.eh_frame:0000000000006D11                 db    0
.eh_frame:0000000000006D12                 db    0
.eh_frame:0000000000006D13                 db    0
.eh_frame:0000000000006D14                 db    0
.eh_frame:0000000000006D15                 db  44h ; D
.eh_frame:0000000000006D16                 db  0Eh
.eh_frame:0000000000006D17                 db  50h ; P
.eh_frame:0000000000006D18                 db    2
.eh_frame:0000000000006D19                 db  7Bh ; {
.eh_frame:0000000000006D1A                 db  0Ah
.eh_frame:0000000000006D1B                 db  0Eh
.eh_frame:0000000000006D1C                 db    8
.eh_frame:0000000000006D1D                 db  41h ; A
.eh_frame:0000000000006D1E                 db  0Bh
.eh_frame:0000000000006D1F                 db    0
.eh_frame:0000000000006D20                 db  10h
.eh_frame:0000000000006D21                 db    0
.eh_frame:0000000000006D22                 db    0
.eh_frame:0000000000006D23                 db    0
.eh_frame:0000000000006D24                 db 0A4h
.eh_frame:0000000000006D25                 db    6
.eh_frame:0000000000006D26                 db    0
.eh_frame:0000000000006D27                 db    0
.eh_frame:0000000000006D28                 db  88h
.eh_frame:0000000000006D29                 db 0D5h
.eh_frame:0000000000006D2A                 db 0FFh
.eh_frame:0000000000006D2B                 db 0FFh
.eh_frame:0000000000006D2C                 db  0Ch
.eh_frame:0000000000006D2D                 db    0
.eh_frame:0000000000006D2E                 db    0
.eh_frame:0000000000006D2F                 db    0
.eh_frame:0000000000006D30                 db    0
.eh_frame:0000000000006D31                 db    0
.eh_frame:0000000000006D32                 db    0
.eh_frame:0000000000006D33                 db    0
.eh_frame:0000000000006D34                 db  10h
.eh_frame:0000000000006D35                 db    0
.eh_frame:0000000000006D36                 db    0
.eh_frame:0000000000006D37                 db    0
.eh_frame:0000000000006D38                 db 0B8h
.eh_frame:0000000000006D39                 db    6
.eh_frame:0000000000006D3A                 db    0
.eh_frame:0000000000006D3B                 db    0
.eh_frame:0000000000006D3C                 db  84h
.eh_frame:0000000000006D3D                 db 0D5h
.eh_frame:0000000000006D3E                 db 0FFh
.eh_frame:0000000000006D3F                 db 0FFh
.eh_frame:0000000000006D40                 db  0Fh
.eh_frame:0000000000006D41                 db    0
.eh_frame:0000000000006D42                 db    0
.eh_frame:0000000000006D43                 db    0
.eh_frame:0000000000006D44                 db    0
.eh_frame:0000000000006D45                 db    0
.eh_frame:0000000000006D46                 db    0
.eh_frame:0000000000006D47                 db    0
.eh_frame:0000000000006D48                 db  18h
.eh_frame:0000000000006D49                 db    0
.eh_frame:0000000000006D4A                 db    0
.eh_frame:0000000000006D4B                 db    0
.eh_frame:0000000000006D4C                 db 0CCh
.eh_frame:0000000000006D4D                 db    6
.eh_frame:0000000000006D4E                 db    0
.eh_frame:0000000000006D4F                 db    0
.eh_frame:0000000000006D50                 db  80h
.eh_frame:0000000000006D51                 db 0D5h
.eh_frame:0000000000006D52                 db 0FFh
.eh_frame:0000000000006D53                 db 0FFh
.eh_frame:0000000000006D54                 db  98h
.eh_frame:0000000000006D55                 db    0
.eh_frame:0000000000006D56                 db    0
.eh_frame:0000000000006D57                 db    0
.eh_frame:0000000000006D58                 db    0
.eh_frame:0000000000006D59                 db  44h ; D
.eh_frame:0000000000006D5A                 db  0Eh
.eh_frame:0000000000006D5B                 db  50h ; P
.eh_frame:0000000000006D5C                 db    2
.eh_frame:0000000000006D5D                 db  8Eh
.eh_frame:0000000000006D5E                 db  0Ah
.eh_frame:0000000000006D5F                 db  0Eh
.eh_frame:0000000000006D60                 db    8
.eh_frame:0000000000006D61                 db  41h ; A
.eh_frame:0000000000006D62                 db  0Bh
.eh_frame:0000000000006D63                 db    0
.eh_frame:0000000000006D64                 db  10h
.eh_frame:0000000000006D65                 db    0
.eh_frame:0000000000006D66                 db    0
.eh_frame:0000000000006D67                 db    0
.eh_frame:0000000000006D68                 db 0E8h
.eh_frame:0000000000006D69                 db    6
.eh_frame:0000000000006D6A                 db    0
.eh_frame:0000000000006D6B                 db    0
.eh_frame:0000000000006D6C                 db    4
.eh_frame:0000000000006D6D                 db 0D6h
.eh_frame:0000000000006D6E                 db 0FFh
.eh_frame:0000000000006D6F                 db 0FFh
.eh_frame:0000000000006D70                 db  10h
.eh_frame:0000000000006D71                 db    0
.eh_frame:0000000000006D72                 db    0
.eh_frame:0000000000006D73                 db    0
.eh_frame:0000000000006D74                 db    0
.eh_frame:0000000000006D75                 db    0
.eh_frame:0000000000006D76                 db    0
.eh_frame:0000000000006D77                 db    0
.eh_frame:0000000000006D78                 db  10h
.eh_frame:0000000000006D79                 db    0
.eh_frame:0000000000006D7A                 db    0
.eh_frame:0000000000006D7B                 db    0
.eh_frame:0000000000006D7C                 db 0FCh
.eh_frame:0000000000006D7D                 db    6
.eh_frame:0000000000006D7E                 db    0
.eh_frame:0000000000006D7F                 db    0
.eh_frame:0000000000006D80                 db    0
.eh_frame:0000000000006D81                 db 0D6h
.eh_frame:0000000000006D82                 db 0FFh
.eh_frame:0000000000006D83                 db 0FFh
.eh_frame:0000000000006D84                 db  11h
.eh_frame:0000000000006D85                 db    0
.eh_frame:0000000000006D86                 db    0
.eh_frame:0000000000006D87                 db    0
.eh_frame:0000000000006D88                 db    0
.eh_frame:0000000000006D89                 db    0
.eh_frame:0000000000006D8A                 db    0
.eh_frame:0000000000006D8B                 db    0
.eh_frame:0000000000006D8C                 db  10h
.eh_frame:0000000000006D8D                 db    0
.eh_frame:0000000000006D8E                 db    0
.eh_frame:0000000000006D8F                 db    0
.eh_frame:0000000000006D90                 db  10h
.eh_frame:0000000000006D91                 db    7
.eh_frame:0000000000006D92                 db    0
.eh_frame:0000000000006D93                 db    0
.eh_frame:0000000000006D94                 db  0Ch
.eh_frame:0000000000006D95                 db 0D6h
.eh_frame:0000000000006D96                 db 0FFh
.eh_frame:0000000000006D97                 db 0FFh
.eh_frame:0000000000006D98                 db  0Ah
.eh_frame:0000000000006D99                 db    0
.eh_frame:0000000000006D9A                 db    0
.eh_frame:0000000000006D9B                 db    0
.eh_frame:0000000000006D9C                 db    0
.eh_frame:0000000000006D9D                 db    0
.eh_frame:0000000000006D9E                 db    0
.eh_frame:0000000000006D9F                 db    0
.eh_frame:0000000000006DA0                 db  18h
.eh_frame:0000000000006DA1                 db    0
.eh_frame:0000000000006DA2                 db    0
.eh_frame:0000000000006DA3                 db    0
.eh_frame:0000000000006DA4                 db  24h ; $
.eh_frame:0000000000006DA5                 db    7
.eh_frame:0000000000006DA6                 db    0
.eh_frame:0000000000006DA7                 db    0
.eh_frame:0000000000006DA8                 db    8
.eh_frame:0000000000006DA9                 db 0D6h
.eh_frame:0000000000006DAA                 db 0FFh
.eh_frame:0000000000006DAB                 db 0FFh
.eh_frame:0000000000006DAC                 db  8Eh
.eh_frame:0000000000006DAD                 db    0
.eh_frame:0000000000006DAE                 db    0
.eh_frame:0000000000006DAF                 db    0
.eh_frame:0000000000006DB0                 db    0
.eh_frame:0000000000006DB1                 db  44h ; D
.eh_frame:0000000000006DB2                 db  0Eh
.eh_frame:0000000000006DB3                 db  50h ; P
.eh_frame:0000000000006DB4                 db    2
.eh_frame:0000000000006DB5                 db  7Fh ; 
.eh_frame:0000000000006DB6                 db  0Ah
.eh_frame:0000000000006DB7                 db  0Eh
.eh_frame:0000000000006DB8                 db    8
.eh_frame:0000000000006DB9                 db  41h ; A
.eh_frame:0000000000006DBA                 db  0Bh
.eh_frame:0000000000006DBB                 db    0
.eh_frame:0000000000006DBC                 db  18h
.eh_frame:0000000000006DBD                 db    0
.eh_frame:0000000000006DBE                 db    0
.eh_frame:0000000000006DBF                 db    0
.eh_frame:0000000000006DC0                 db  40h ; @
.eh_frame:0000000000006DC1                 db    7
.eh_frame:0000000000006DC2                 db    0
.eh_frame:0000000000006DC3                 db    0
.eh_frame:0000000000006DC4                 db  7Ch ; |
.eh_frame:0000000000006DC5                 db 0D6h
.eh_frame:0000000000006DC6                 db 0FFh
.eh_frame:0000000000006DC7                 db 0FFh
.eh_frame:0000000000006DC8                 db  91h
.eh_frame:0000000000006DC9                 db    0
.eh_frame:0000000000006DCA                 db    0
.eh_frame:0000000000006DCB                 db    0
.eh_frame:0000000000006DCC                 db    0
.eh_frame:0000000000006DCD                 db  44h ; D
.eh_frame:0000000000006DCE                 db  0Eh
.eh_frame:0000000000006DCF                 db  50h ; P
.eh_frame:0000000000006DD0                 db    2
.eh_frame:0000000000006DD1                 db  82h
.eh_frame:0000000000006DD2                 db  0Ah
.eh_frame:0000000000006DD3                 db  0Eh
.eh_frame:0000000000006DD4                 db    8
.eh_frame:0000000000006DD5                 db  41h ; A
.eh_frame:0000000000006DD6                 db  0Bh
.eh_frame:0000000000006DD7                 db    0
.eh_frame:0000000000006DD8                 db  10h
.eh_frame:0000000000006DD9                 db    0
.eh_frame:0000000000006DDA                 db    0
.eh_frame:0000000000006DDB                 db    0
.eh_frame:0000000000006DDC                 db  5Ch ; \
.eh_frame:0000000000006DDD                 db    7
.eh_frame:0000000000006DDE                 db    0
.eh_frame:0000000000006DDF                 db    0
.eh_frame:0000000000006DE0                 db    0
.eh_frame:0000000000006DE1                 db 0D7h
.eh_frame:0000000000006DE2                 db 0FFh
.eh_frame:0000000000006DE3                 db 0FFh
.eh_frame:0000000000006DE4                 db  0Ch
.eh_frame:0000000000006DE5                 db    0
.eh_frame:0000000000006DE6                 db    0
.eh_frame:0000000000006DE7                 db    0
.eh_frame:0000000000006DE8                 db    0
.eh_frame:0000000000006DE9                 db    0
.eh_frame:0000000000006DEA                 db    0
.eh_frame:0000000000006DEB                 db    0
.eh_frame:0000000000006DEC                 db  10h
.eh_frame:0000000000006DED                 db    0
.eh_frame:0000000000006DEE                 db    0
.eh_frame:0000000000006DEF                 db    0
.eh_frame:0000000000006DF0                 db  70h ; p
.eh_frame:0000000000006DF1                 db    7
.eh_frame:0000000000006DF2                 db    0
.eh_frame:0000000000006DF3                 db    0
.eh_frame:0000000000006DF4                 db 0FCh
.eh_frame:0000000000006DF5                 db 0D6h
.eh_frame:0000000000006DF6                 db 0FFh
.eh_frame:0000000000006DF7                 db 0FFh
.eh_frame:0000000000006DF8                 db  17h
.eh_frame:0000000000006DF9                 db    0
.eh_frame:0000000000006DFA                 db    0
.eh_frame:0000000000006DFB                 db    0
.eh_frame:0000000000006DFC                 db    0
.eh_frame:0000000000006DFD                 db    0
.eh_frame:0000000000006DFE                 db    0
.eh_frame:0000000000006DFF                 db    0
.eh_frame:0000000000006E00                 db  10h
.eh_frame:0000000000006E01                 db    0
.eh_frame:0000000000006E02                 db    0
.eh_frame:0000000000006E03                 db    0
.eh_frame:0000000000006E04                 db  84h
.eh_frame:0000000000006E05                 db    7
.eh_frame:0000000000006E06                 db    0
.eh_frame:0000000000006E07                 db    0
.eh_frame:0000000000006E08                 db    8
.eh_frame:0000000000006E09                 db 0D7h
.eh_frame:0000000000006E0A                 db 0FFh
.eh_frame:0000000000006E0B                 db 0FFh
.eh_frame:0000000000006E0C                 db  13h
.eh_frame:0000000000006E0D                 db    0
.eh_frame:0000000000006E0E                 db    0
.eh_frame:0000000000006E0F                 db    0
.eh_frame:0000000000006E10                 db    0
.eh_frame:0000000000006E11                 db    0
.eh_frame:0000000000006E12                 db    0
.eh_frame:0000000000006E13                 db    0
.eh_frame:0000000000006E14                 db  10h
.eh_frame:0000000000006E15                 db    0
.eh_frame:0000000000006E16                 db    0
.eh_frame:0000000000006E17                 db    0
.eh_frame:0000000000006E18                 db  98h
.eh_frame:0000000000006E19                 db    7
.eh_frame:0000000000006E1A                 db    0
.eh_frame:0000000000006E1B                 db    0
.eh_frame:0000000000006E1C                 db  14h
.eh_frame:0000000000006E1D                 db 0D7h
.eh_frame:0000000000006E1E                 db 0FFh
.eh_frame:0000000000006E1F                 db 0FFh
.eh_frame:0000000000006E20                 db  0Ch
.eh_frame:0000000000006E21                 db    0
.eh_frame:0000000000006E22                 db    0
.eh_frame:0000000000006E23                 db    0
.eh_frame:0000000000006E24                 db    0
.eh_frame:0000000000006E25                 db    0
.eh_frame:0000000000006E26                 db    0
.eh_frame:0000000000006E27                 db    0
.eh_frame:0000000000006E28                 db  10h
.eh_frame:0000000000006E29                 db    0
.eh_frame:0000000000006E2A                 db    0
.eh_frame:0000000000006E2B                 db    0
.eh_frame:0000000000006E2C                 db 0ACh
.eh_frame:0000000000006E2D                 db    7
.eh_frame:0000000000006E2E                 db    0
.eh_frame:0000000000006E2F                 db    0
.eh_frame:0000000000006E30                 db  10h
.eh_frame:0000000000006E31                 db 0D7h
.eh_frame:0000000000006E32                 db 0FFh
.eh_frame:0000000000006E33                 db 0FFh
.eh_frame:0000000000006E34                 db  14h
.eh_frame:0000000000006E35                 db    0
.eh_frame:0000000000006E36                 db    0
.eh_frame:0000000000006E37                 db    0
.eh_frame:0000000000006E38                 db    0
.eh_frame:0000000000006E39                 db    0
.eh_frame:0000000000006E3A                 db    0
.eh_frame:0000000000006E3B                 db    0
.eh_frame:0000000000006E3C                 db  10h
.eh_frame:0000000000006E3D                 db    0
.eh_frame:0000000000006E3E                 db    0
.eh_frame:0000000000006E3F                 db    0
.eh_frame:0000000000006E40                 db 0C0h
.eh_frame:0000000000006E41                 db    7
.eh_frame:0000000000006E42                 db    0
.eh_frame:0000000000006E43                 db    0
.eh_frame:0000000000006E44                 db  1Ch
.eh_frame:0000000000006E45                 db 0D7h
.eh_frame:0000000000006E46                 db 0FFh
.eh_frame:0000000000006E47                 db 0FFh
.eh_frame:0000000000006E48                 db  13h
.eh_frame:0000000000006E49                 db    0
.eh_frame:0000000000006E4A                 db    0
.eh_frame:0000000000006E4B                 db    0
.eh_frame:0000000000006E4C                 db    0
.eh_frame:0000000000006E4D                 db    0
.eh_frame:0000000000006E4E                 db    0
.eh_frame:0000000000006E4F                 db    0
.eh_frame:0000000000006E50                 db  14h
.eh_frame:0000000000006E51                 db    0
.eh_frame:0000000000006E52                 db    0
.eh_frame:0000000000006E53                 db    0
.eh_frame:0000000000006E54                 db 0D4h
.eh_frame:0000000000006E55                 db    7
.eh_frame:0000000000006E56                 db    0
.eh_frame:0000000000006E57                 db    0
.eh_frame:0000000000006E58                 db  28h ; (
.eh_frame:0000000000006E59                 db 0D7h
.eh_frame:0000000000006E5A                 db 0FFh
.eh_frame:0000000000006E5B                 db 0FFh
.eh_frame:0000000000006E5C                 db  18h
.eh_frame:0000000000006E5D                 db    0
.eh_frame:0000000000006E5E                 db    0
.eh_frame:0000000000006E5F                 db    0
.eh_frame:0000000000006E60                 db    0
.eh_frame:0000000000006E61                 db    0
.eh_frame:0000000000006E62                 db    0
.eh_frame:0000000000006E63                 db    0
.eh_frame:0000000000006E64                 db    0
.eh_frame:0000000000006E65                 db    0
.eh_frame:0000000000006E66                 db    0
.eh_frame:0000000000006E67                 db    0
.eh_frame:0000000000006E68                 db  14h
.eh_frame:0000000000006E69                 db    0
.eh_frame:0000000000006E6A                 db    0
.eh_frame:0000000000006E6B                 db    0
.eh_frame:0000000000006E6C                 db 0ECh
.eh_frame:0000000000006E6D                 db    7
.eh_frame:0000000000006E6E                 db    0
.eh_frame:0000000000006E6F                 db    0
.eh_frame:0000000000006E70                 db  30h ; 0
.eh_frame:0000000000006E71                 db 0D7h
.eh_frame:0000000000006E72                 db 0FFh
.eh_frame:0000000000006E73                 db 0FFh
.eh_frame:0000000000006E74                 db  0Eh
.eh_frame:0000000000006E75                 db    0
.eh_frame:0000000000006E76                 db    0
.eh_frame:0000000000006E77                 db    0
.eh_frame:0000000000006E78                 db    0
.eh_frame:0000000000006E79                 db    0
.eh_frame:0000000000006E7A                 db    0
.eh_frame:0000000000006E7B                 db    0
.eh_frame:0000000000006E7C                 db    0
.eh_frame:0000000000006E7D                 db    0
.eh_frame:0000000000006E7E                 db    0
.eh_frame:0000000000006E7F                 db    0
.eh_frame:0000000000006E80                 db  10h
.eh_frame:0000000000006E81                 db    1
.eh_frame:0000000000006E82                 db    0
.eh_frame:0000000000006E83                 db    0
.eh_frame:0000000000006E84                 db    4
.eh_frame:0000000000006E85                 db    8
.eh_frame:0000000000006E86                 db    0
.eh_frame:0000000000006E87                 db    0
.eh_frame:0000000000006E88                 db  28h ; (
.eh_frame:0000000000006E89                 db 0D7h
.eh_frame:0000000000006E8A                 db 0FFh
.eh_frame:0000000000006E8B                 db 0FFh
.eh_frame:0000000000006E8C                 db  17h
.eh_frame:0000000000006E8D                 db    4
.eh_frame:0000000000006E8E                 db    0
.eh_frame:0000000000006E8F                 db    0
.eh_frame:0000000000006E90                 db    0
.eh_frame:0000000000006E91                 db  42h ; B
.eh_frame:0000000000006E92                 db  0Eh
.eh_frame:0000000000006E93                 db  10h
.eh_frame:0000000000006E94                 db  8Fh
.eh_frame:0000000000006E95                 db    2
.eh_frame:0000000000006E96                 db  42h ; B
.eh_frame:0000000000006E97                 db  0Eh
.eh_frame:0000000000006E98                 db  18h
.eh_frame:0000000000006E99                 db  8Eh
.eh_frame:0000000000006E9A                 db    3
.eh_frame:0000000000006E9B                 db  42h ; B
.eh_frame:0000000000006E9C                 db  0Eh
.eh_frame:0000000000006E9D                 db  20h
.eh_frame:0000000000006E9E                 db  8Dh
.eh_frame:0000000000006E9F                 db    4
.eh_frame:0000000000006EA0                 db  42h ; B
.eh_frame:0000000000006EA1                 db  0Eh
.eh_frame:0000000000006EA2                 db  28h ; (
.eh_frame:0000000000006EA3                 db  8Ch
.eh_frame:0000000000006EA4                 db    5
.eh_frame:0000000000006EA5                 db  44h ; D
.eh_frame:0000000000006EA6                 db  0Eh
.eh_frame:0000000000006EA7                 db  30h ; 0
.eh_frame:0000000000006EA8                 db  86h
.eh_frame:0000000000006EA9                 db    6
.eh_frame:0000000000006EAA                 db  41h ; A
.eh_frame:0000000000006EAB                 db  0Eh
.eh_frame:0000000000006EAC                 db  38h ; 8
.eh_frame:0000000000006EAD                 db  83h
.eh_frame:0000000000006EAE                 db    7
.eh_frame:0000000000006EAF                 db  4Ah ; J
.eh_frame:0000000000006EB0                 db  0Eh
.eh_frame:0000000000006EB1                 db  60h ; `
.eh_frame:0000000000006EB2                 db    2
.eh_frame:0000000000006EB3                 db 0DDh
.eh_frame:0000000000006EB4                 db  0Eh
.eh_frame:0000000000006EB5                 db  68h ; h
.eh_frame:0000000000006EB6                 db  57h ; W
.eh_frame:0000000000006EB7                 db  0Eh
.eh_frame:0000000000006EB8                 db  70h ; p
.eh_frame:0000000000006EB9                 db  42h ; B
.eh_frame:0000000000006EBA                 db  0Eh
.eh_frame:0000000000006EBB                 db  78h ; x
.eh_frame:0000000000006EBC                 db  42h ; B
.eh_frame:0000000000006EBD                 db  0Eh
.eh_frame:0000000000006EBE                 db  80h
.eh_frame:0000000000006EBF                 db    1
.eh_frame:0000000000006EC0                 db  42h ; B
.eh_frame:0000000000006EC1                 db  0Eh
.eh_frame:0000000000006EC2                 db  88h
.eh_frame:0000000000006EC3                 db    1
.eh_frame:0000000000006EC4                 db  42h ; B
.eh_frame:0000000000006EC5                 db  0Eh
.eh_frame:0000000000006EC6                 db  90h
.eh_frame:0000000000006EC7                 db    1
.eh_frame:0000000000006EC8                 db  53h ; S
.eh_frame:0000000000006EC9                 db  0Eh
.eh_frame:0000000000006ECA                 db  60h ; `
.eh_frame:0000000000006ECB                 db  44h ; D
.eh_frame:0000000000006ECC                 db  0Ah
.eh_frame:0000000000006ECD                 db  0Eh
.eh_frame:0000000000006ECE                 db  38h ; 8
.eh_frame:0000000000006ECF                 db  41h ; A
.eh_frame:0000000000006ED0                 db  0Eh
.eh_frame:0000000000006ED1                 db  30h ; 0
.eh_frame:0000000000006ED2                 db  41h ; A
.eh_frame:0000000000006ED3                 db  0Eh
.eh_frame:0000000000006ED4                 db  28h ; (
.eh_frame:0000000000006ED5                 db  42h ; B
.eh_frame:0000000000006ED6                 db  0Eh
.eh_frame:0000000000006ED7                 db  20h
.eh_frame:0000000000006ED8                 db  42h ; B
.eh_frame:0000000000006ED9                 db  0Eh
.eh_frame:0000000000006EDA                 db  18h
.eh_frame:0000000000006EDB                 db  42h ; B
.eh_frame:0000000000006EDC                 db  0Eh
.eh_frame:0000000000006EDD                 db  10h
.eh_frame:0000000000006EDE                 db  42h ; B
.eh_frame:0000000000006EDF                 db  0Eh
.eh_frame:0000000000006EE0                 db    8
.eh_frame:0000000000006EE1                 db  44h ; D
.eh_frame:0000000000006EE2                 db  0Bh
.eh_frame:0000000000006EE3                 db    2
.eh_frame:0000000000006EE4                 db  78h ; x
.eh_frame:0000000000006EE5                 db  0Ah
.eh_frame:0000000000006EE6                 db  0Eh
.eh_frame:0000000000006EE7                 db  68h ; h
.eh_frame:0000000000006EE8                 db  48h ; H
.eh_frame:0000000000006EE9                 db  0Bh
.eh_frame:0000000000006EEA                 db  5Ah ; Z
.eh_frame:0000000000006EEB                 db  0Ah
.eh_frame:0000000000006EEC                 db  0Eh
.eh_frame:0000000000006EED                 db  38h ; 8
.eh_frame:0000000000006EEE                 db  47h ; G
.eh_frame:0000000000006EEF                 db  0Eh
.eh_frame:0000000000006EF0                 db  30h ; 0
.eh_frame:0000000000006EF1                 db  41h ; A
.eh_frame:0000000000006EF2                 db  0Eh
.eh_frame:0000000000006EF3                 db  28h ; (
.eh_frame:0000000000006EF4                 db  42h ; B
.eh_frame:0000000000006EF5                 db  0Eh
.eh_frame:0000000000006EF6                 db  20h
.eh_frame:0000000000006EF7                 db  42h ; B
.eh_frame:0000000000006EF8                 db  0Eh
.eh_frame:0000000000006EF9                 db  18h
.eh_frame:0000000000006EFA                 db  42h ; B
.eh_frame:0000000000006EFB                 db  0Eh
.eh_frame:0000000000006EFC                 db  10h
.eh_frame:0000000000006EFD                 db  42h ; B
.eh_frame:0000000000006EFE                 db  0Eh
.eh_frame:0000000000006EFF                 db    8
.eh_frame:0000000000006F00                 db  56h ; V
.eh_frame:0000000000006F01                 db  0Bh
.eh_frame:0000000000006F02                 db  5Eh ; ^
.eh_frame:0000000000006F03                 db  0Ah
.eh_frame:0000000000006F04                 db  0Eh
.eh_frame:0000000000006F05                 db  38h ; 8
.eh_frame:0000000000006F06                 db  52h ; R
.eh_frame:0000000000006F07                 db  0Eh
.eh_frame:0000000000006F08                 db  30h ; 0
.eh_frame:0000000000006F09                 db  41h ; A
.eh_frame:0000000000006F0A                 db  0Eh
.eh_frame:0000000000006F0B                 db  28h ; (
.eh_frame:0000000000006F0C                 db  42h ; B
.eh_frame:0000000000006F0D                 db  0Eh
.eh_frame:0000000000006F0E                 db  20h
.eh_frame:0000000000006F0F                 db  42h ; B
.eh_frame:0000000000006F10                 db  0Eh
.eh_frame:0000000000006F11                 db  18h
.eh_frame:0000000000006F12                 db  42h ; B
.eh_frame:0000000000006F13                 db  0Eh
.eh_frame:0000000000006F14                 db  10h
.eh_frame:0000000000006F15                 db  42h ; B
.eh_frame:0000000000006F16                 db  0Eh
.eh_frame:0000000000006F17                 db    8
.eh_frame:0000000000006F18                 db  4Fh ; O
.eh_frame:0000000000006F19                 db  0Bh
.eh_frame:0000000000006F1A                 db  62h ; b
.eh_frame:0000000000006F1B                 db  0Ah
.eh_frame:0000000000006F1C                 db  0Eh
.eh_frame:0000000000006F1D                 db  38h ; 8
.eh_frame:0000000000006F1E                 db  50h ; P
.eh_frame:0000000000006F1F                 db  0Eh
.eh_frame:0000000000006F20                 db  30h ; 0
.eh_frame:0000000000006F21                 db  41h ; A
.eh_frame:0000000000006F22                 db  0Eh
.eh_frame:0000000000006F23                 db  28h ; (
.eh_frame:0000000000006F24                 db  42h ; B
.eh_frame:0000000000006F25                 db  0Eh
.eh_frame:0000000000006F26                 db  20h
.eh_frame:0000000000006F27                 db  42h ; B
.eh_frame:0000000000006F28                 db  0Eh
.eh_frame:0000000000006F29                 db  18h
.eh_frame:0000000000006F2A                 db  42h ; B
.eh_frame:0000000000006F2B                 db  0Eh
.eh_frame:0000000000006F2C                 db  10h
.eh_frame:0000000000006F2D                 db  42h ; B
.eh_frame:0000000000006F2E                 db  0Eh
.eh_frame:0000000000006F2F                 db    8
.eh_frame:0000000000006F30                 db  55h ; U
.eh_frame:0000000000006F31                 db  0Bh
.eh_frame:0000000000006F32                 db  66h ; f
.eh_frame:0000000000006F33                 db  0Eh
.eh_frame:0000000000006F34                 db  68h ; h
.eh_frame:0000000000006F35                 db  42h ; B
.eh_frame:0000000000006F36                 db  0Eh
.eh_frame:0000000000006F37                 db  70h ; p
.eh_frame:0000000000006F38                 db  5Ch ; \
.eh_frame:0000000000006F39                 db  0Eh
.eh_frame:0000000000006F3A                 db  68h ; h
.eh_frame:0000000000006F3B                 db  41h ; A
.eh_frame:0000000000006F3C                 db  0Eh
.eh_frame:0000000000006F3D                 db  60h ; `
.eh_frame:0000000000006F3E                 db  44h ; D
.eh_frame:0000000000006F3F                 db  0Ah
.eh_frame:0000000000006F40                 db  0Eh
.eh_frame:0000000000006F41                 db  38h ; 8
.eh_frame:0000000000006F42                 db  41h ; A
.eh_frame:0000000000006F43                 db  0Eh
.eh_frame:0000000000006F44                 db  30h ; 0
.eh_frame:0000000000006F45                 db  41h ; A
.eh_frame:0000000000006F46                 db  0Eh
.eh_frame:0000000000006F47                 db  28h ; (
.eh_frame:0000000000006F48                 db  42h ; B
.eh_frame:0000000000006F49                 db  0Eh
.eh_frame:0000000000006F4A                 db  20h
.eh_frame:0000000000006F4B                 db  42h ; B
.eh_frame:0000000000006F4C                 db  0Eh
.eh_frame:0000000000006F4D                 db  18h
.eh_frame:0000000000006F4E                 db  42h ; B
.eh_frame:0000000000006F4F                 db  0Eh
.eh_frame:0000000000006F50                 db  10h
.eh_frame:0000000000006F51                 db  42h ; B
.eh_frame:0000000000006F52                 db  0Eh
.eh_frame:0000000000006F53                 db    8
.eh_frame:0000000000006F54                 db  45h ; E
.eh_frame:0000000000006F55                 db  0Bh
.eh_frame:0000000000006F56                 db  68h ; h
.eh_frame:0000000000006F57                 db  0Ah
.eh_frame:0000000000006F58                 db  0Eh
.eh_frame:0000000000006F59                 db  68h ; h
.eh_frame:0000000000006F5A                 db  48h ; H
.eh_frame:0000000000006F5B                 db  0Bh
.eh_frame:0000000000006F5C                 db  72h ; r
.eh_frame:0000000000006F5D                 db  0Eh
.eh_frame:0000000000006F5E                 db  68h ; h
.eh_frame:0000000000006F5F                 db  45h ; E
.eh_frame:0000000000006F60                 db  0Eh
.eh_frame:0000000000006F61                 db  70h ; p
.eh_frame:0000000000006F62                 db  42h ; B
.eh_frame:0000000000006F63                 db  0Eh
.eh_frame:0000000000006F64                 db  78h ; x
.eh_frame:0000000000006F65                 db  42h ; B
.eh_frame:0000000000006F66                 db  0Eh
.eh_frame:0000000000006F67                 db  80h
.eh_frame:0000000000006F68                 db    1
.eh_frame:0000000000006F69                 db  5Eh ; ^
.eh_frame:0000000000006F6A                 db  0Eh
.eh_frame:0000000000006F6B                 db  60h ; `
.eh_frame:0000000000006F6C                 db  44h ; D
.eh_frame:0000000000006F6D                 db  0Ah
.eh_frame:0000000000006F6E                 db  0Eh
.eh_frame:0000000000006F6F                 db  38h ; 8
.eh_frame:0000000000006F70                 db  41h ; A
.eh_frame:0000000000006F71                 db  0Eh
.eh_frame:0000000000006F72                 db  30h ; 0
.eh_frame:0000000000006F73                 db  41h ; A
.eh_frame:0000000000006F74                 db  0Eh
.eh_frame:0000000000006F75                 db  28h ; (
.eh_frame:0000000000006F76                 db  42h ; B
.eh_frame:0000000000006F77                 db  0Eh
.eh_frame:0000000000006F78                 db  20h
.eh_frame:0000000000006F79                 db  42h ; B
.eh_frame:0000000000006F7A                 db  0Eh
.eh_frame:0000000000006F7B                 db  18h
.eh_frame:0000000000006F7C                 db  42h ; B
.eh_frame:0000000000006F7D                 db  0Eh
.eh_frame:0000000000006F7E                 db  10h
.eh_frame:0000000000006F7F                 db  42h ; B
.eh_frame:0000000000006F80                 db  0Eh
.eh_frame:0000000000006F81                 db    8
.eh_frame:0000000000006F82                 db  41h ; A
.eh_frame:0000000000006F83                 db  0Bh
.eh_frame:0000000000006F84                 db  79h ; y
.eh_frame:0000000000006F85                 db  0Ah
.eh_frame:0000000000006F86                 db  0Eh
.eh_frame:0000000000006F87                 db  68h ; h
.eh_frame:0000000000006F88                 db  42h ; B
.eh_frame:0000000000006F89                 db  0Eh
.eh_frame:0000000000006F8A                 db  70h ; p
.eh_frame:0000000000006F8B                 db  42h ; B
.eh_frame:0000000000006F8C                 db  0Eh
.eh_frame:0000000000006F8D                 db  78h ; x
.eh_frame:0000000000006F8E                 db  42h ; B
.eh_frame:0000000000006F8F                 db  0Eh
.eh_frame:0000000000006F90                 db  80h
.eh_frame:0000000000006F91                 db    1
.eh_frame:0000000000006F92                 db  51h ; Q
.eh_frame:0000000000006F93                 db  0Bh
.eh_frame:0000000000006F94                 db  10h
.eh_frame:0000000000006F95                 db    0
.eh_frame:0000000000006F96                 db    0
.eh_frame:0000000000006F97                 db    0
.eh_frame:0000000000006F98                 db  18h
.eh_frame:0000000000006F99                 db    9
.eh_frame:0000000000006F9A                 db    0
.eh_frame:0000000000006F9B                 db    0
.eh_frame:0000000000006F9C                 db  34h ; 4
.eh_frame:0000000000006F9D                 db 0DAh
.eh_frame:0000000000006F9E                 db 0FFh
.eh_frame:0000000000006F9F                 db 0FFh
.eh_frame:0000000000006FA0                 db  20h
.eh_frame:0000000000006FA1                 db    0
.eh_frame:0000000000006FA2                 db    0
.eh_frame:0000000000006FA3                 db    0
.eh_frame:0000000000006FA4                 db    0
.eh_frame:0000000000006FA5                 db    0
.eh_frame:0000000000006FA6                 db    0
.eh_frame:0000000000006FA7                 db    0
.eh_frame:0000000000006FA8                 db  18h
.eh_frame:0000000000006FA9                 db    0
.eh_frame:0000000000006FAA                 db    0
.eh_frame:0000000000006FAB                 db    0
.eh_frame:0000000000006FAC                 db  2Ch ; ,
.eh_frame:0000000000006FAD                 db    9
.eh_frame:0000000000006FAE                 db    0
.eh_frame:0000000000006FAF                 db    0
.eh_frame:0000000000006FB0                 db  40h ; @
.eh_frame:0000000000006FB1                 db 0DAh
.eh_frame:0000000000006FB2                 db 0FFh
.eh_frame:0000000000006FB3                 db 0FFh
.eh_frame:0000000000006FB4                 db  78h ; x
.eh_frame:0000000000006FB5                 db    0
.eh_frame:0000000000006FB6                 db    0
.eh_frame:0000000000006FB7                 db    0
.eh_frame:0000000000006FB8                 db    0
.eh_frame:0000000000006FB9                 db  44h ; D
.eh_frame:0000000000006FBA                 db  0Eh
.eh_frame:0000000000006FBB                 db  70h ; p
.eh_frame:0000000000006FBC                 db    2
.eh_frame:0000000000006FBD                 db  60h ; `
.eh_frame:0000000000006FBE                 db  0Ah
.eh_frame:0000000000006FBF                 db  0Eh
.eh_frame:0000000000006FC0                 db    8
.eh_frame:0000000000006FC1                 db  41h ; A
.eh_frame:0000000000006FC2                 db  0Bh
.eh_frame:0000000000006FC3                 db    0
.eh_frame:0000000000006FC4                 db  28h ; (
.eh_frame:0000000000006FC5                 db    0
.eh_frame:0000000000006FC6                 db    0
.eh_frame:0000000000006FC7                 db    0
.eh_frame:0000000000006FC8                 db  48h ; H
.eh_frame:0000000000006FC9                 db    9
.eh_frame:0000000000006FCA                 db    0
.eh_frame:0000000000006FCB                 db    0
.eh_frame:0000000000006FCC                 db 0A4h
.eh_frame:0000000000006FCD                 db 0DAh
.eh_frame:0000000000006FCE                 db 0FFh
.eh_frame:0000000000006FCF                 db 0FFh
.eh_frame:0000000000006FD0                 db 0D5h
.eh_frame:0000000000006FD1                 db    0
.eh_frame:0000000000006FD2                 db    0
.eh_frame:0000000000006FD3                 db    0
.eh_frame:0000000000006FD4                 db    0
.eh_frame:0000000000006FD5                 db  41h ; A
.eh_frame:0000000000006FD6                 db  0Eh
.eh_frame:0000000000006FD7                 db  10h
.eh_frame:0000000000006FD8                 db  86h
.eh_frame:0000000000006FD9                 db    2
.eh_frame:0000000000006FDA                 db  41h ; A
.eh_frame:0000000000006FDB                 db  0Eh
.eh_frame:0000000000006FDC                 db  18h
.eh_frame:0000000000006FDD                 db  83h
.eh_frame:0000000000006FDE                 db    3
.eh_frame:0000000000006FDF                 db  50h ; P
.eh_frame:0000000000006FE0                 db  0Eh
.eh_frame:0000000000006FE1                 db 0D0h
.eh_frame:0000000000006FE2                 db    1
.eh_frame:0000000000006FE3                 db    2
.eh_frame:0000000000006FE4                 db 0ABh
.eh_frame:0000000000006FE5                 db  0Ah
.eh_frame:0000000000006FE6                 db  0Eh
.eh_frame:0000000000006FE7                 db  18h
.eh_frame:0000000000006FE8                 db  41h ; A
.eh_frame:0000000000006FE9                 db  0Eh
.eh_frame:0000000000006FEA                 db  10h
.eh_frame:0000000000006FEB                 db  41h ; A
.eh_frame:0000000000006FEC                 db  0Eh
.eh_frame:0000000000006FED                 db    8
.eh_frame:0000000000006FEE                 db  41h ; A
.eh_frame:0000000000006FEF                 db  0Bh
.eh_frame:0000000000006FF0                 db  1Ch
.eh_frame:0000000000006FF1                 db    0
.eh_frame:0000000000006FF2                 db    0
.eh_frame:0000000000006FF3                 db    0
.eh_frame:0000000000006FF4                 db  74h ; t
.eh_frame:0000000000006FF5                 db    9
.eh_frame:0000000000006FF6                 db    0
.eh_frame:0000000000006FF7                 db    0
.eh_frame:0000000000006FF8                 db  58h ; X
.eh_frame:0000000000006FF9                 db 0DBh
.eh_frame:0000000000006FFA                 db 0FFh
.eh_frame:0000000000006FFB                 db 0FFh
.eh_frame:0000000000006FFC                 db  80h
.eh_frame:0000000000006FFD                 db    0
.eh_frame:0000000000006FFE                 db    0
.eh_frame:0000000000006FFF                 db    0
.eh_frame:0000000000007000                 db    0
.eh_frame:0000000000007001                 db  41h ; A
.eh_frame:0000000000007002                 db  0Eh
.eh_frame:0000000000007003                 db  10h
.eh_frame:0000000000007004                 db  83h
.eh_frame:0000000000007005                 db    2
.eh_frame:0000000000007006                 db    2
.eh_frame:0000000000007007                 db  7Ah ; z
.eh_frame:0000000000007008                 db  0Eh
.eh_frame:0000000000007009                 db    8
.eh_frame:000000000000700A                 db    0
.eh_frame:000000000000700B                 db    0
.eh_frame:000000000000700C                 db    0
.eh_frame:000000000000700D                 db    0
.eh_frame:000000000000700E                 db    0
.eh_frame:000000000000700F                 db    0
.eh_frame:0000000000007010                 db  18h
.eh_frame:0000000000007011                 db    0
.eh_frame:0000000000007012                 db    0
.eh_frame:0000000000007013                 db    0
.eh_frame:0000000000007014                 db  94h
.eh_frame:0000000000007015                 db    9
.eh_frame:0000000000007016                 db    0
.eh_frame:0000000000007017                 db    0
.eh_frame:0000000000007018                 db 0B8h
.eh_frame:0000000000007019                 db 0DBh
.eh_frame:000000000000701A                 db 0FFh
.eh_frame:000000000000701B                 db 0FFh
.eh_frame:000000000000701C                 db  1Ah
.eh_frame:000000000000701D                 db    0
.eh_frame:000000000000701E                 db    0
.eh_frame:000000000000701F                 db    0
.eh_frame:0000000000007020                 db    0
.eh_frame:0000000000007021                 db  41h ; A
.eh_frame:0000000000007022                 db  0Eh
.eh_frame:0000000000007023                 db  10h
.eh_frame:0000000000007024                 db  83h
.eh_frame:0000000000007025                 db    2
.eh_frame:0000000000007026                 db  53h ; S
.eh_frame:0000000000007027                 db  0Ah
.eh_frame:0000000000007028                 db  0Eh
.eh_frame:0000000000007029                 db    8
.eh_frame:000000000000702A                 db  41h ; A
.eh_frame:000000000000702B                 db  0Bh
.eh_frame:000000000000702C                 db  10h
.eh_frame:000000000000702D                 db    0
.eh_frame:000000000000702E                 db    0
.eh_frame:000000000000702F                 db    0
.eh_frame:0000000000007030                 db 0B0h
.eh_frame:0000000000007031                 db    9
.eh_frame:0000000000007032                 db    0
.eh_frame:0000000000007033                 db    0
.eh_frame:0000000000007034                 db 0BCh
.eh_frame:0000000000007035                 db 0DBh
.eh_frame:0000000000007036                 db 0FFh
.eh_frame:0000000000007037                 db 0FFh
.eh_frame:0000000000007038                 db  24h ; $
.eh_frame:0000000000007039                 db    0
.eh_frame:000000000000703A                 db    0
.eh_frame:000000000000703B                 db    0
.eh_frame:000000000000703C                 db    0
.eh_frame:000000000000703D                 db  5Fh ; _
.eh_frame:000000000000703E                 db  0Eh
.eh_frame:000000000000703F                 db  10h
.eh_frame:0000000000007040                 db  10h
.eh_frame:0000000000007041                 db    0
.eh_frame:0000000000007042                 db    0
.eh_frame:0000000000007043                 db    0
.eh_frame:0000000000007044                 db 0C4h
.eh_frame:0000000000007045                 db    9
.eh_frame:0000000000007046                 db    0
.eh_frame:0000000000007047                 db    0
.eh_frame:0000000000007048                 db 0D8h
.eh_frame:0000000000007049                 db 0DBh
.eh_frame:000000000000704A                 db 0FFh
.eh_frame:000000000000704B                 db 0FFh
.eh_frame:000000000000704C                 db    2
.eh_frame:000000000000704D                 db    0
.eh_frame:000000000000704E                 db    0
.eh_frame:000000000000704F                 db    0
.eh_frame:0000000000007050                 db    0
.eh_frame:0000000000007051                 db    0
.eh_frame:0000000000007052                 db    0
.eh_frame:0000000000007053                 db    0
.eh_frame:0000000000007054                 db  20h
.eh_frame:0000000000007055                 db    0
.eh_frame:0000000000007056                 db    0
.eh_frame:0000000000007057                 db    0
.eh_frame:0000000000007058                 db 0D8h
.eh_frame:0000000000007059                 db    9
.eh_frame:000000000000705A                 db    0
.eh_frame:000000000000705B                 db    0
.eh_frame:000000000000705C                 db 0D4h
.eh_frame:000000000000705D                 db 0DBh
.eh_frame:000000000000705E                 db 0FFh
.eh_frame:000000000000705F                 db 0FFh
.eh_frame:0000000000007060                 db  36h ; 6
.eh_frame:0000000000007061                 db    0
.eh_frame:0000000000007062                 db    0
.eh_frame:0000000000007063                 db    0
.eh_frame:0000000000007064                 db    0
.eh_frame:0000000000007065                 db  44h ; D
.eh_frame:0000000000007066                 db  0Eh
.eh_frame:0000000000007067                 db  10h
.eh_frame:0000000000007068                 db  83h
.eh_frame:0000000000007069                 db    2
.eh_frame:000000000000706A                 db  5Dh ; ]
.eh_frame:000000000000706B                 db  0Ah
.eh_frame:000000000000706C                 db  0Eh
.eh_frame:000000000000706D                 db    8
.eh_frame:000000000000706E                 db  47h ; G
.eh_frame:000000000000706F                 db  0Bh
.eh_frame:0000000000007070                 db  48h ; H
.eh_frame:0000000000007071                 db  0Ah
.eh_frame:0000000000007072                 db  0Eh
.eh_frame:0000000000007073                 db    8
.eh_frame:0000000000007074                 db  41h ; A
.eh_frame:0000000000007075                 db  0Bh
.eh_frame:0000000000007076                 db    0
.eh_frame:0000000000007077                 db    0
.eh_frame:0000000000007078                 db  10h
.eh_frame:0000000000007079                 db    0
.eh_frame:000000000000707A                 db    0
.eh_frame:000000000000707B                 db    0
.eh_frame:000000000000707C                 db 0FCh
.eh_frame:000000000000707D                 db    9
.eh_frame:000000000000707E                 db    0
.eh_frame:000000000000707F                 db    0
.eh_frame:0000000000007080                 db 0F0h
.eh_frame:0000000000007081                 db 0DBh
.eh_frame:0000000000007082                 db 0FFh
.eh_frame:0000000000007083                 db 0FFh
.eh_frame:0000000000007084                 db  24h ; $
.eh_frame:0000000000007085                 db    0
.eh_frame:0000000000007086                 db    0
.eh_frame:0000000000007087                 db    0
.eh_frame:0000000000007088                 db    0
.eh_frame:0000000000007089                 db  5Fh ; _
.eh_frame:000000000000708A                 db  0Eh
.eh_frame:000000000000708B                 db  10h
.eh_frame:000000000000708C                 db  14h
.eh_frame:000000000000708D                 db    0
.eh_frame:000000000000708E                 db    0
.eh_frame:000000000000708F                 db    0
.eh_frame:0000000000007090                 db  10h
.eh_frame:0000000000007091                 db  0Ah
.eh_frame:0000000000007092                 db    0
.eh_frame:0000000000007093                 db    0
.eh_frame:0000000000007094                 db  0Ch
.eh_frame:0000000000007095                 db 0DCh
.eh_frame:0000000000007096                 db 0FFh
.eh_frame:0000000000007097                 db 0FFh
.eh_frame:0000000000007098                 db  82h
.eh_frame:0000000000007099                 db    0
.eh_frame:000000000000709A                 db    0
.eh_frame:000000000000709B                 db    0
.eh_frame:000000000000709C                 db    0
.eh_frame:000000000000709D                 db    2
.eh_frame:000000000000709E                 db  5Fh ; _
.eh_frame:000000000000709F                 db  0Eh
.eh_frame:00000000000070A0                 db  10h
.eh_frame:00000000000070A1                 db  49h ; I
.eh_frame:00000000000070A2                 db  0Eh
.eh_frame:00000000000070A3                 db    8
.eh_frame:00000000000070A4                 db  14h
.eh_frame:00000000000070A5                 db    0
.eh_frame:00000000000070A6                 db    0
.eh_frame:00000000000070A7                 db    0
.eh_frame:00000000000070A8                 db  28h ; (
.eh_frame:00000000000070A9                 db  0Ah
.eh_frame:00000000000070AA                 db    0
.eh_frame:00000000000070AB                 db    0
.eh_frame:00000000000070AC                 db  84h
.eh_frame:00000000000070AD                 db 0DCh
.eh_frame:00000000000070AE                 db 0FFh
.eh_frame:00000000000070AF                 db 0FFh
.eh_frame:00000000000070B0                 db  4Ah ; J
.eh_frame:00000000000070B1                 db    0
.eh_frame:00000000000070B2                 db    0
.eh_frame:00000000000070B3                 db    0
.eh_frame:00000000000070B4                 db    0
.eh_frame:00000000000070B5                 db    2
.eh_frame:00000000000070B6                 db  45h ; E
.eh_frame:00000000000070B7                 db  0Eh
.eh_frame:00000000000070B8                 db  10h
.eh_frame:00000000000070B9                 db    0
.eh_frame:00000000000070BA                 db    0
.eh_frame:00000000000070BB                 db    0
.eh_frame:00000000000070BC                 db  18h
.eh_frame:00000000000070BD                 db    0
.eh_frame:00000000000070BE                 db    0
.eh_frame:00000000000070BF                 db    0
.eh_frame:00000000000070C0                 db  40h ; @
.eh_frame:00000000000070C1                 db  0Ah
.eh_frame:00000000000070C2                 db    0
.eh_frame:00000000000070C3                 db    0
.eh_frame:00000000000070C4                 db 0BCh
.eh_frame:00000000000070C5                 db 0DCh
.eh_frame:00000000000070C6                 db 0FFh
.eh_frame:00000000000070C7                 db 0FFh
.eh_frame:00000000000070C8                 db  17h
.eh_frame:00000000000070C9                 db    0
.eh_frame:00000000000070CA                 db    0
.eh_frame:00000000000070CB                 db    0
.eh_frame:00000000000070CC                 db    0
.eh_frame:00000000000070CD                 db  41h ; A
.eh_frame:00000000000070CE                 db  0Eh
.eh_frame:00000000000070CF                 db  10h
.eh_frame:00000000000070D0                 db  83h
.eh_frame:00000000000070D1                 db    2
.eh_frame:00000000000070D2                 db  51h ; Q
.eh_frame:00000000000070D3                 db  0Eh
.eh_frame:00000000000070D4                 db    8
.eh_frame:00000000000070D5                 db    0
.eh_frame:00000000000070D6                 db    0
.eh_frame:00000000000070D7                 db    0
.eh_frame:00000000000070D8                 db  18h
.eh_frame:00000000000070D9                 db    0
.eh_frame:00000000000070DA                 db    0
.eh_frame:00000000000070DB                 db    0
.eh_frame:00000000000070DC                 db  5Ch ; \
.eh_frame:00000000000070DD                 db  0Ah
.eh_frame:00000000000070DE                 db    0
.eh_frame:00000000000070DF                 db    0
.eh_frame:00000000000070E0                 db 0C0h
.eh_frame:00000000000070E1                 db 0DCh
.eh_frame:00000000000070E2                 db 0FFh
.eh_frame:00000000000070E3                 db 0FFh
.eh_frame:00000000000070E4                 db  2Eh ; .
.eh_frame:00000000000070E5                 db    0
.eh_frame:00000000000070E6                 db    0
.eh_frame:00000000000070E7                 db    0
.eh_frame:00000000000070E8                 db    0
.eh_frame:00000000000070E9                 db  47h ; G
.eh_frame:00000000000070EA                 db  0Eh
.eh_frame:00000000000070EB                 db  10h
.eh_frame:00000000000070EC                 db  61h ; a
.eh_frame:00000000000070ED                 db  0Ah
.eh_frame:00000000000070EE                 db  0Eh
.eh_frame:00000000000070EF                 db    8
.eh_frame:00000000000070F0                 db  41h ; A
.eh_frame:00000000000070F1                 db  0Bh
.eh_frame:00000000000070F2                 db    0
.eh_frame:00000000000070F3                 db    0
.eh_frame:00000000000070F4                 db  24h ; $
.eh_frame:00000000000070F5                 db    0
.eh_frame:00000000000070F6                 db    0
.eh_frame:00000000000070F7                 db    0
.eh_frame:00000000000070F8                 db  78h ; x
.eh_frame:00000000000070F9                 db  0Ah
.eh_frame:00000000000070FA                 db    0
.eh_frame:00000000000070FB                 db    0
.eh_frame:00000000000070FC                 db 0D4h
.eh_frame:00000000000070FD                 db 0DCh
.eh_frame:00000000000070FE                 db 0FFh
.eh_frame:00000000000070FF                 db 0FFh
.eh_frame:0000000000007100                 db  28h ; (
.eh_frame:0000000000007101                 db    0
.eh_frame:0000000000007102                 db    0
.eh_frame:0000000000007103                 db    0
.eh_frame:0000000000007104                 db    0
.eh_frame:0000000000007105                 db  41h ; A
.eh_frame:0000000000007106                 db  0Eh
.eh_frame:0000000000007107                 db  10h
.eh_frame:0000000000007108                 db  86h
.eh_frame:0000000000007109                 db    2
.eh_frame:000000000000710A                 db  41h ; A
.eh_frame:000000000000710B                 db  0Eh
.eh_frame:000000000000710C                 db  18h
.eh_frame:000000000000710D                 db  83h
.eh_frame:000000000000710E                 db    3
.eh_frame:000000000000710F                 db  4Dh ; M
.eh_frame:0000000000007110                 db  0Eh
.eh_frame:0000000000007111                 db  20h
.eh_frame:0000000000007112                 db  49h ; I
.eh_frame:0000000000007113                 db  0Eh
.eh_frame:0000000000007114                 db  18h
.eh_frame:0000000000007115                 db  47h ; G
.eh_frame:0000000000007116                 db  0Eh
.eh_frame:0000000000007117                 db  10h
.eh_frame:0000000000007118                 db  41h ; A
.eh_frame:0000000000007119                 db  0Eh
.eh_frame:000000000000711A                 db    8
.eh_frame:000000000000711B                 db    0
.eh_frame:000000000000711C                 db  18h
.eh_frame:000000000000711D                 db    0
.eh_frame:000000000000711E                 db    0
.eh_frame:000000000000711F                 db    0
.eh_frame:0000000000007120                 db 0A0h
.eh_frame:0000000000007121                 db  0Ah
.eh_frame:0000000000007122                 db    0
.eh_frame:0000000000007123                 db    0
.eh_frame:0000000000007124                 db 0DCh
.eh_frame:0000000000007125                 db 0DCh
.eh_frame:0000000000007126                 db 0FFh
.eh_frame:0000000000007127                 db 0FFh
.eh_frame:0000000000007128                 db  13h
.eh_frame:0000000000007129                 db    0
.eh_frame:000000000000712A                 db    0
.eh_frame:000000000000712B                 db    0
.eh_frame:000000000000712C                 db    0
.eh_frame:000000000000712D                 db  41h ; A
.eh_frame:000000000000712E                 db  0Eh
.eh_frame:000000000000712F                 db  10h
.eh_frame:0000000000007130                 db  83h
.eh_frame:0000000000007131                 db    2
.eh_frame:0000000000007132                 db  50h ; P
.eh_frame:0000000000007133                 db  0Eh
.eh_frame:0000000000007134                 db    8
.eh_frame:0000000000007135                 db    0
.eh_frame:0000000000007136                 db    0
.eh_frame:0000000000007137                 db    0
.eh_frame:0000000000007138                 db  14h
.eh_frame:0000000000007139                 db    0
.eh_frame:000000000000713A                 db    0
.eh_frame:000000000000713B                 db    0
.eh_frame:000000000000713C                 db 0BCh
.eh_frame:000000000000713D                 db  0Ah
.eh_frame:000000000000713E                 db    0
.eh_frame:000000000000713F                 db    0
.eh_frame:0000000000007140                 db 0E0h
.eh_frame:0000000000007141                 db 0DCh
.eh_frame:0000000000007142                 db 0FFh
.eh_frame:0000000000007143                 db 0FFh
.eh_frame:0000000000007144                 db  35h ; 5
.eh_frame:0000000000007145                 db    0
.eh_frame:0000000000007146                 db    0
.eh_frame:0000000000007147                 db    0
.eh_frame:0000000000007148                 db    0
.eh_frame:0000000000007149                 db  4Bh ; K
.eh_frame:000000000000714A                 db  0Eh
.eh_frame:000000000000714B                 db  10h
.eh_frame:000000000000714C                 db    0
.eh_frame:000000000000714D                 db    0
.eh_frame:000000000000714E                 db    0
.eh_frame:000000000000714F                 db    0
.eh_frame:0000000000007150                 db  34h ; 4
.eh_frame:0000000000007151                 db    0
.eh_frame:0000000000007152                 db    0
.eh_frame:0000000000007153                 db    0
.eh_frame:0000000000007154                 db 0D4h
.eh_frame:0000000000007155                 db  0Ah
.eh_frame:0000000000007156                 db    0
.eh_frame:0000000000007157                 db    0
.eh_frame:0000000000007158                 db    8
.eh_frame:0000000000007159                 db 0DDh
.eh_frame:000000000000715A                 db 0FFh
.eh_frame:000000000000715B                 db 0FFh
.eh_frame:000000000000715C                 db  7Bh ; {
.eh_frame:000000000000715D                 db    0
.eh_frame:000000000000715E                 db    0
.eh_frame:000000000000715F                 db    0
.eh_frame:0000000000007160                 db    0
.eh_frame:0000000000007161                 db  42h ; B
.eh_frame:0000000000007162                 db  0Eh
.eh_frame:0000000000007163                 db  10h
.eh_frame:0000000000007164                 db  8Ch
.eh_frame:0000000000007165                 db    2
.eh_frame:0000000000007166                 db  41h ; A
.eh_frame:0000000000007167                 db  0Eh
.eh_frame:0000000000007168                 db  18h
.eh_frame:0000000000007169                 db  86h
.eh_frame:000000000000716A                 db    3
.eh_frame:000000000000716B                 db  41h ; A
.eh_frame:000000000000716C                 db  0Eh
.eh_frame:000000000000716D                 db  20h
.eh_frame:000000000000716E                 db  83h
.eh_frame:000000000000716F                 db    4
.eh_frame:0000000000007170                 db  7Dh ; }
.eh_frame:0000000000007171                 db  0Ah
.eh_frame:0000000000007172                 db  0Eh
.eh_frame:0000000000007173                 db  18h
.eh_frame:0000000000007174                 db  41h ; A
.eh_frame:0000000000007175                 db  0Eh
.eh_frame:0000000000007176                 db  10h
.eh_frame:0000000000007177                 db  42h ; B
.eh_frame:0000000000007178                 db  0Eh
.eh_frame:0000000000007179                 db    8
.eh_frame:000000000000717A                 db  44h ; D
.eh_frame:000000000000717B                 db  0Bh
.eh_frame:000000000000717C                 db  60h ; `
.eh_frame:000000000000717D                 db  0Ah
.eh_frame:000000000000717E                 db  0Eh
.eh_frame:000000000000717F                 db  18h
.eh_frame:0000000000007180                 db  41h ; A
.eh_frame:0000000000007181                 db  0Eh
.eh_frame:0000000000007182                 db  10h
.eh_frame:0000000000007183                 db  42h ; B
.eh_frame:0000000000007184                 db  0Eh
.eh_frame:0000000000007185                 db    8
.eh_frame:0000000000007186                 db  45h ; E
.eh_frame:0000000000007187                 db  0Bh
.eh_frame:0000000000007188                 db  34h ; 4
.eh_frame:0000000000007189                 db    0
.eh_frame:000000000000718A                 db    0
.eh_frame:000000000000718B                 db    0
.eh_frame:000000000000718C                 db  0Ch
.eh_frame:000000000000718D                 db  0Bh
.eh_frame:000000000000718E                 db    0
.eh_frame:000000000000718F                 db    0
.eh_frame:0000000000007190                 db  50h ; P
.eh_frame:0000000000007191                 db 0DDh
.eh_frame:0000000000007192                 db 0FFh
.eh_frame:0000000000007193                 db 0FFh
.eh_frame:0000000000007194                 db  7Eh ; ~
.eh_frame:0000000000007195                 db    2
.eh_frame:0000000000007196                 db    0
.eh_frame:0000000000007197                 db    0
.eh_frame:0000000000007198                 db    0
.eh_frame:0000000000007199                 db  42h ; B
.eh_frame:000000000000719A                 db  0Eh
.eh_frame:000000000000719B                 db  10h
.eh_frame:000000000000719C                 db  8Ch
.eh_frame:000000000000719D                 db    2
.eh_frame:000000000000719E                 db  41h ; A
.eh_frame:000000000000719F                 db  0Eh
.eh_frame:00000000000071A0                 db  18h
.eh_frame:00000000000071A1                 db  86h
.eh_frame:00000000000071A2                 db    3
.eh_frame:00000000000071A3                 db  43h ; C
.eh_frame:00000000000071A4                 db  0Eh
.eh_frame:00000000000071A5                 db  20h
.eh_frame:00000000000071A6                 db  83h
.eh_frame:00000000000071A7                 db    4
.eh_frame:00000000000071A8                 db  44h ; D
.eh_frame:00000000000071A9                 db  0Eh
.eh_frame:00000000000071AA                 db  70h ; p
.eh_frame:00000000000071AB                 db    2
.eh_frame:00000000000071AC                 db 0F0h
.eh_frame:00000000000071AD                 db  0Ah
.eh_frame:00000000000071AE                 db  0Eh
.eh_frame:00000000000071AF                 db  20h
.eh_frame:00000000000071B0                 db  41h ; A
.eh_frame:00000000000071B1                 db  0Eh
.eh_frame:00000000000071B2                 db  18h
.eh_frame:00000000000071B3                 db  41h ; A
.eh_frame:00000000000071B4                 db  0Eh
.eh_frame:00000000000071B5                 db  10h
.eh_frame:00000000000071B6                 db  42h ; B
.eh_frame:00000000000071B7                 db  0Eh
.eh_frame:00000000000071B8                 db    8
.eh_frame:00000000000071B9                 db  42h ; B
.eh_frame:00000000000071BA                 db  0Bh
.eh_frame:00000000000071BB                 db    0
.eh_frame:00000000000071BC                 db    0
.eh_frame:00000000000071BD                 db    0
.eh_frame:00000000000071BE                 db    0
.eh_frame:00000000000071BF                 db    0
.eh_frame:00000000000071C0                 db  1Ch
.eh_frame:00000000000071C1                 db    0
.eh_frame:00000000000071C2                 db    0
.eh_frame:00000000000071C3                 db    0
.eh_frame:00000000000071C4                 db  44h ; D
.eh_frame:00000000000071C5                 db  0Bh
.eh_frame:00000000000071C6                 db    0
.eh_frame:00000000000071C7                 db    0
.eh_frame:00000000000071C8                 db  98h
.eh_frame:00000000000071C9                 db 0DFh
.eh_frame:00000000000071CA                 db 0FFh
.eh_frame:00000000000071CB                 db 0FFh
.eh_frame:00000000000071CC                 db  40h ; @
.eh_frame:00000000000071CD                 db    0
.eh_frame:00000000000071CE                 db    0
.eh_frame:00000000000071CF                 db    0
.eh_frame:00000000000071D0                 db    0
.eh_frame:00000000000071D1                 db  44h ; D
.eh_frame:00000000000071D2                 db  0Eh
.eh_frame:00000000000071D3                 db  10h
.eh_frame:00000000000071D4                 db  83h
.eh_frame:00000000000071D5                 db    2
.eh_frame:00000000000071D6                 db  5Ah ; Z
.eh_frame:00000000000071D7                 db  0Ah
.eh_frame:00000000000071D8                 db  0Eh
.eh_frame:00000000000071D9                 db    8
.eh_frame:00000000000071DA                 db  4Ah ; J
.eh_frame:00000000000071DB                 db  0Bh
.eh_frame:00000000000071DC                 db  53h ; S
.eh_frame:00000000000071DD                 db  0Eh
.eh_frame:00000000000071DE                 db    8
.eh_frame:00000000000071DF                 db    0
.eh_frame:00000000000071E0                 db  2Ch ; ,
.eh_frame:00000000000071E1                 db    0
.eh_frame:00000000000071E2                 db    0
.eh_frame:00000000000071E3                 db    0
.eh_frame:00000000000071E4                 db  64h ; d
.eh_frame:00000000000071E5                 db  0Bh
.eh_frame:00000000000071E6                 db    0
.eh_frame:00000000000071E7                 db    0
.eh_frame:00000000000071E8                 db 0B8h
.eh_frame:00000000000071E9                 db 0DFh
.eh_frame:00000000000071EA                 db 0FFh
.eh_frame:00000000000071EB                 db 0FFh
.eh_frame:00000000000071EC                 db  57h ; W
.eh_frame:00000000000071ED                 db    0
.eh_frame:00000000000071EE                 db    0
.eh_frame:00000000000071EF                 db    0
.eh_frame:00000000000071F0                 db    0
.eh_frame:00000000000071F1                 db  63h ; c
.eh_frame:00000000000071F2                 db  0Eh
.eh_frame:00000000000071F3                 db  10h
.eh_frame:00000000000071F4                 db  8Ch
.eh_frame:00000000000071F5                 db    2
.eh_frame:00000000000071F6                 db  41h ; A
.eh_frame:00000000000071F7                 db  0Eh
.eh_frame:00000000000071F8                 db  18h
.eh_frame:00000000000071F9                 db  86h
.eh_frame:00000000000071FA                 db    3
.eh_frame:00000000000071FB                 db  44h ; D
.eh_frame:00000000000071FC                 db  0Eh
.eh_frame:00000000000071FD                 db  20h
.eh_frame:00000000000071FE                 db  83h
.eh_frame:00000000000071FF                 db    4
.eh_frame:0000000000007200                 db  6Bh ; k
.eh_frame:0000000000007201                 db  0Eh
.eh_frame:0000000000007202                 db  18h
.eh_frame:0000000000007203                 db  41h ; A
.eh_frame:0000000000007204                 db  0Eh
.eh_frame:0000000000007205                 db  10h
.eh_frame:0000000000007206                 db  42h ; B
.eh_frame:0000000000007207                 db  0Eh
.eh_frame:0000000000007208                 db    8
.eh_frame:0000000000007209                 db    0
.eh_frame:000000000000720A                 db    0
.eh_frame:000000000000720B                 db    0
.eh_frame:000000000000720C                 db    0
.eh_frame:000000000000720D                 db    0
.eh_frame:000000000000720E                 db    0
.eh_frame:000000000000720F                 db    0
.eh_frame:0000000000007210                 db  3Ch ; <
.eh_frame:0000000000007211                 db    0
.eh_frame:0000000000007212                 db    0
.eh_frame:0000000000007213                 db    0
.eh_frame:0000000000007214                 db  94h
.eh_frame:0000000000007215                 db  0Bh
.eh_frame:0000000000007216                 db    0
.eh_frame:0000000000007217                 db    0
.eh_frame:0000000000007218                 db 0E8h
.eh_frame:0000000000007219                 db 0DFh
.eh_frame:000000000000721A                 db 0FFh
.eh_frame:000000000000721B                 db 0FFh
.eh_frame:000000000000721C                 db  83h
.eh_frame:000000000000721D                 db    0
.eh_frame:000000000000721E                 db    0
.eh_frame:000000000000721F                 db    0
.eh_frame:0000000000007220                 db    0
.eh_frame:0000000000007221                 db  42h ; B
.eh_frame:0000000000007222                 db  0Eh
.eh_frame:0000000000007223                 db  10h
.eh_frame:0000000000007224                 db  8Dh
.eh_frame:0000000000007225                 db    2
.eh_frame:0000000000007226                 db  42h ; B
.eh_frame:0000000000007227                 db  0Eh
.eh_frame:0000000000007228                 db  18h
.eh_frame:0000000000007229                 db  8Ch
.eh_frame:000000000000722A                 db    3
.eh_frame:000000000000722B                 db  44h ; D
.eh_frame:000000000000722C                 db  0Eh
.eh_frame:000000000000722D                 db  20h
.eh_frame:000000000000722E                 db  86h
.eh_frame:000000000000722F                 db    4
.eh_frame:0000000000007230                 db  41h ; A
.eh_frame:0000000000007231                 db  0Eh
.eh_frame:0000000000007232                 db  28h ; (
.eh_frame:0000000000007233                 db  83h
.eh_frame:0000000000007234                 db    5
.eh_frame:0000000000007235                 db  4Ah ; J
.eh_frame:0000000000007236                 db  0Eh
.eh_frame:0000000000007237                 db  40h ; @
.eh_frame:0000000000007238                 db    2
.eh_frame:0000000000007239                 db  64h ; d
.eh_frame:000000000000723A                 db  0Ah
.eh_frame:000000000000723B                 db  0Eh
.eh_frame:000000000000723C                 db  28h ; (
.eh_frame:000000000000723D                 db  41h ; A
.eh_frame:000000000000723E                 db  0Eh
.eh_frame:000000000000723F                 db  20h
.eh_frame:0000000000007240                 db  41h ; A
.eh_frame:0000000000007241                 db  0Eh
.eh_frame:0000000000007242                 db  18h
.eh_frame:0000000000007243                 db  42h ; B
.eh_frame:0000000000007244                 db  0Eh
.eh_frame:0000000000007245                 db  10h
.eh_frame:0000000000007246                 db  42h ; B
.eh_frame:0000000000007247                 db  0Eh
.eh_frame:0000000000007248                 db    8
.eh_frame:0000000000007249                 db  41h ; A
.eh_frame:000000000000724A                 db  0Bh
.eh_frame:000000000000724B                 db    0
.eh_frame:000000000000724C                 db    0
.eh_frame:000000000000724D                 db    0
.eh_frame:000000000000724E                 db    0
.eh_frame:000000000000724F                 db    0
.eh_frame:0000000000007250                 db  4Ch ; L
.eh_frame:0000000000007251                 db    0
.eh_frame:0000000000007252                 db    0
.eh_frame:0000000000007253                 db    0
.eh_frame:0000000000007254                 db 0D4h
.eh_frame:0000000000007255                 db  0Bh
.eh_frame:0000000000007256                 db    0
.eh_frame:0000000000007257                 db    0
.eh_frame:0000000000007258                 db  38h ; 8
.eh_frame:0000000000007259                 db 0E0h
.eh_frame:000000000000725A                 db 0FFh
.eh_frame:000000000000725B                 db 0FFh
.eh_frame:000000000000725C                 db  7Dh ; }
.eh_frame:000000000000725D                 db    0
.eh_frame:000000000000725E                 db    0
.eh_frame:000000000000725F                 db    0
.eh_frame:0000000000007260                 db    0
.eh_frame:0000000000007261                 db  42h ; B
.eh_frame:0000000000007262                 db  0Eh
.eh_frame:0000000000007263                 db  10h
.eh_frame:0000000000007264                 db  8Ch
.eh_frame:0000000000007265                 db    2
.eh_frame:0000000000007266                 db  41h ; A
.eh_frame:0000000000007267                 db  0Eh
.eh_frame:0000000000007268                 db  18h
.eh_frame:0000000000007269                 db  86h
.eh_frame:000000000000726A                 db    3
.eh_frame:000000000000726B                 db  44h ; D
.eh_frame:000000000000726C                 db  0Eh
.eh_frame:000000000000726D                 db  20h
.eh_frame:000000000000726E                 db  83h
.eh_frame:000000000000726F                 db    4
.eh_frame:0000000000007270                 db  69h ; i
.eh_frame:0000000000007271                 db  0Ah
.eh_frame:0000000000007272                 db  0Eh
.eh_frame:0000000000007273                 db  18h
.eh_frame:0000000000007274                 db  41h ; A
.eh_frame:0000000000007275                 db  0Eh
.eh_frame:0000000000007276                 db  10h
.eh_frame:0000000000007277                 db  42h ; B
.eh_frame:0000000000007278                 db  0Eh
.eh_frame:0000000000007279                 db    8
.eh_frame:000000000000727A                 db  45h ; E
.eh_frame:000000000000727B                 db  0Bh
.eh_frame:000000000000727C                 db  55h ; U
.eh_frame:000000000000727D                 db  0Ah
.eh_frame:000000000000727E                 db  0Eh
.eh_frame:000000000000727F                 db  18h
.eh_frame:0000000000007280                 db  41h ; A
.eh_frame:0000000000007281                 db  0Eh
.eh_frame:0000000000007282                 db  10h
.eh_frame:0000000000007283                 db  42h ; B
.eh_frame:0000000000007284                 db  0Eh
.eh_frame:0000000000007285                 db    8
.eh_frame:0000000000007286                 db  48h ; H
.eh_frame:0000000000007287                 db  0Bh
.eh_frame:0000000000007288                 db  41h ; A
.eh_frame:0000000000007289                 db  0Ah
.eh_frame:000000000000728A                 db  0Eh
.eh_frame:000000000000728B                 db  18h
.eh_frame:000000000000728C                 db  46h ; F
.eh_frame:000000000000728D                 db  0Eh
.eh_frame:000000000000728E                 db  10h
.eh_frame:000000000000728F                 db  42h ; B
.eh_frame:0000000000007290                 db  0Eh
.eh_frame:0000000000007291                 db    8
.eh_frame:0000000000007292                 db  47h ; G
.eh_frame:0000000000007293                 db  0Bh
.eh_frame:0000000000007294                 db  49h ; I
.eh_frame:0000000000007295                 db  0Eh
.eh_frame:0000000000007296                 db  18h
.eh_frame:0000000000007297                 db  41h ; A
.eh_frame:0000000000007298                 db  0Eh
.eh_frame:0000000000007299                 db  10h
.eh_frame:000000000000729A                 db  42h ; B
.eh_frame:000000000000729B                 db  0Eh
.eh_frame:000000000000729C                 db    8
.eh_frame:000000000000729D                 db    0
.eh_frame:000000000000729E                 db    0
.eh_frame:000000000000729F                 db    0
.eh_frame:00000000000072A0                 db  1Ch
.eh_frame:00000000000072A1                 db    0
.eh_frame:00000000000072A2                 db    0
.eh_frame:00000000000072A3                 db    0
.eh_frame:00000000000072A4                 db  24h ; $
.eh_frame:00000000000072A5                 db  0Ch
.eh_frame:00000000000072A6                 db    0
.eh_frame:00000000000072A7                 db    0
.eh_frame:00000000000072A8                 db  68h ; h
.eh_frame:00000000000072A9                 db 0E0h
.eh_frame:00000000000072AA                 db 0FFh
.eh_frame:00000000000072AB                 db 0FFh
.eh_frame:00000000000072AC                 db  60h ; `
.eh_frame:00000000000072AD                 db    0
.eh_frame:00000000000072AE                 db    0
.eh_frame:00000000000072AF                 db    0
.eh_frame:00000000000072B0                 db    0
.eh_frame:00000000000072B1                 db  44h ; D
.eh_frame:00000000000072B2                 db  0Eh
.eh_frame:00000000000072B3                 db  10h
.eh_frame:00000000000072B4                 db  75h ; u
.eh_frame:00000000000072B5                 db  0Ah
.eh_frame:00000000000072B6                 db  0Eh
.eh_frame:00000000000072B7                 db    8
.eh_frame:00000000000072B8                 db  47h ; G
.eh_frame:00000000000072B9                 db  0Bh
.eh_frame:00000000000072BA                 db  5Fh ; _
.eh_frame:00000000000072BB                 db  0Eh
.eh_frame:00000000000072BC                 db    8
.eh_frame:00000000000072BD                 db    0
.eh_frame:00000000000072BE                 db    0
.eh_frame:00000000000072BF                 db    0
.eh_frame:00000000000072C0                 db  1Ch
.eh_frame:00000000000072C1                 db    0
.eh_frame:00000000000072C2                 db    0
.eh_frame:00000000000072C3                 db    0
.eh_frame:00000000000072C4                 db  44h ; D
.eh_frame:00000000000072C5                 db  0Ch
.eh_frame:00000000000072C6                 db    0
.eh_frame:00000000000072C7                 db    0
.eh_frame:00000000000072C8                 db 0A8h
.eh_frame:00000000000072C9                 db 0E0h
.eh_frame:00000000000072CA                 db 0FFh
.eh_frame:00000000000072CB                 db 0FFh
.eh_frame:00000000000072CC                 db  3Ch ; <
.eh_frame:00000000000072CD                 db    0
.eh_frame:00000000000072CE                 db    0
.eh_frame:00000000000072CF                 db    0
.eh_frame:00000000000072D0                 db    0
.eh_frame:00000000000072D1                 db  44h ; D
.eh_frame:00000000000072D2                 db  0Eh
.eh_frame:00000000000072D3                 db  10h
.eh_frame:00000000000072D4                 db  61h ; a
.eh_frame:00000000000072D5                 db  0Ah
.eh_frame:00000000000072D6                 db  0Eh
.eh_frame:00000000000072D7                 db    8
.eh_frame:00000000000072D8                 db  4Bh ; K
.eh_frame:00000000000072D9                 db  0Bh
.eh_frame:00000000000072DA                 db  4Bh ; K
.eh_frame:00000000000072DB                 db  0Eh
.eh_frame:00000000000072DC                 db    8
.eh_frame:00000000000072DD                 db    0
.eh_frame:00000000000072DE                 db    0
.eh_frame:00000000000072DF                 db    0
.eh_frame:00000000000072E0                 db  44h ; D
.eh_frame:00000000000072E1                 db    0
.eh_frame:00000000000072E2                 db    0
.eh_frame:00000000000072E3                 db    0
.eh_frame:00000000000072E4                 db  64h ; d
.eh_frame:00000000000072E5                 db  0Ch
.eh_frame:00000000000072E6                 db    0
.eh_frame:00000000000072E7                 db    0
.eh_frame:00000000000072E8                 db 0C8h
.eh_frame:00000000000072E9                 db 0E0h
.eh_frame:00000000000072EA                 db 0FFh
.eh_frame:00000000000072EB                 db 0FFh
.eh_frame:00000000000072EC                 db  65h ; e
.eh_frame:00000000000072ED                 db    0
.eh_frame:00000000000072EE                 db    0
.eh_frame:00000000000072EF                 db    0
.eh_frame:00000000000072F0                 db    0
.eh_frame:00000000000072F1                 db  42h ; B
.eh_frame:00000000000072F2                 db  0Eh
.eh_frame:00000000000072F3                 db  10h
.eh_frame:00000000000072F4                 db  8Fh
.eh_frame:00000000000072F5                 db    2
.eh_frame:00000000000072F6                 db  42h ; B
.eh_frame:00000000000072F7                 db  0Eh
.eh_frame:00000000000072F8                 db  18h
.eh_frame:00000000000072F9                 db  8Eh
.eh_frame:00000000000072FA                 db    3
.eh_frame:00000000000072FB                 db  45h ; E
.eh_frame:00000000000072FC                 db  0Eh
.eh_frame:00000000000072FD                 db  20h
.eh_frame:00000000000072FE                 db  8Dh
.eh_frame:00000000000072FF                 db    4
.eh_frame:0000000000007300                 db  42h ; B
.eh_frame:0000000000007301                 db  0Eh
.eh_frame:0000000000007302                 db  28h ; (
.eh_frame:0000000000007303                 db  8Ch
.eh_frame:0000000000007304                 db    5
.eh_frame:0000000000007305                 db  48h ; H
.eh_frame:0000000000007306                 db  0Eh
.eh_frame:0000000000007307                 db  30h ; 0
.eh_frame:0000000000007308                 db  86h
.eh_frame:0000000000007309                 db    6
.eh_frame:000000000000730A                 db  48h ; H
.eh_frame:000000000000730B                 db  0Eh
.eh_frame:000000000000730C                 db  38h ; 8
.eh_frame:000000000000730D                 db  83h
.eh_frame:000000000000730E                 db    7
.eh_frame:000000000000730F                 db  4Dh ; M
.eh_frame:0000000000007310                 db  0Eh
.eh_frame:0000000000007311                 db  40h ; @
.eh_frame:0000000000007312                 db  72h ; r
.eh_frame:0000000000007313                 db  0Eh
.eh_frame:0000000000007314                 db  38h ; 8
.eh_frame:0000000000007315                 db  41h ; A
.eh_frame:0000000000007316                 db  0Eh
.eh_frame:0000000000007317                 db  30h ; 0
.eh_frame:0000000000007318                 db  41h ; A
.eh_frame:0000000000007319                 db  0Eh
.eh_frame:000000000000731A                 db  28h ; (
.eh_frame:000000000000731B                 db  42h ; B
.eh_frame:000000000000731C                 db  0Eh
.eh_frame:000000000000731D                 db  20h
.eh_frame:000000000000731E                 db  42h ; B
.eh_frame:000000000000731F                 db  0Eh
.eh_frame:0000000000007320                 db  18h
.eh_frame:0000000000007321                 db  42h ; B
.eh_frame:0000000000007322                 db  0Eh
.eh_frame:0000000000007323                 db  10h
.eh_frame:0000000000007324                 db  42h ; B
.eh_frame:0000000000007325                 db  0Eh
.eh_frame:0000000000007326                 db    8
.eh_frame:0000000000007327                 db    0
.eh_frame:0000000000007328                 db  14h
.eh_frame:0000000000007329                 db    0
.eh_frame:000000000000732A                 db    0
.eh_frame:000000000000732B                 db    0
.eh_frame:000000000000732C                 db 0ACh
.eh_frame:000000000000732D                 db  0Ch
.eh_frame:000000000000732E                 db    0
.eh_frame:000000000000732F                 db    0
.eh_frame:0000000000007330                 db 0F0h
.eh_frame:0000000000007331                 db 0E0h
.eh_frame:0000000000007332                 db 0FFh
.eh_frame:0000000000007333                 db 0FFh
.eh_frame:0000000000007334                 db    2
.eh_frame:0000000000007335                 db    0
.eh_frame:0000000000007336                 db    0
.eh_frame:0000000000007337                 db    0
.eh_frame:0000000000007338                 db    0
.eh_frame:0000000000007339                 db    0
.eh_frame:000000000000733A                 db    0
.eh_frame:000000000000733B                 db    0
.eh_frame:000000000000733C                 db    0
.eh_frame:000000000000733D                 db    0
.eh_frame:000000000000733E                 db    0
.eh_frame:000000000000733F                 db    0
.eh_frame:0000000000007340                 db  10h
.eh_frame:0000000000007341                 db    0
.eh_frame:0000000000007342                 db    0
.eh_frame:0000000000007343                 db    0
.eh_frame:0000000000007344                 db 0C4h
.eh_frame:0000000000007345                 db  0Ch
.eh_frame:0000000000007346                 db    0
.eh_frame:0000000000007347                 db    0
.eh_frame:0000000000007348                 db 0E8h
.eh_frame:0000000000007349                 db 0E0h
.eh_frame:000000000000734A                 db 0FFh
.eh_frame:000000000000734B                 db 0FFh
.eh_frame:000000000000734C                 db  0Eh
.eh_frame:000000000000734D                 db    0
.eh_frame:000000000000734E                 db    0
.eh_frame:000000000000734F                 db    0
.eh_frame:0000000000007350                 db    0
.eh_frame:0000000000007351                 db    0
.eh_frame:0000000000007352                 db    0
.eh_frame:0000000000007353                 db    0
.eh_frame:0000000000007354 __FRAME_END__   db    0
.eh_frame:0000000000007355                 db    0
.eh_frame:0000000000007356                 db    0
.eh_frame:0000000000007357                 db    0
.eh_frame:0000000000007357 _eh_frame       ends
.eh_frame:0000000000007357
.init_array:0000000000207AD0 ; ELF Initialization Function Table
.init_array:0000000000207AD0 ; ===========================================================================
.init_array:0000000000207AD0
.init_array:0000000000207AD0 ; Segment type: Pure data
.init_array:0000000000207AD0 ; Segment permissions: Read/Write
.init_array:0000000000207AD0 _init_array     segment qword public 'DATA' use64
.init_array:0000000000207AD0                 assume cs:_init_array
.init_array:0000000000207AD0                 ;org 207AD0h
.init_array:0000000000207AD0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000207AD0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000207AD0                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000207AD0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000207AD0
.fini_array:0000000000207AD8 ; ELF Termination Function Table
.fini_array:0000000000207AD8 ; ===========================================================================
.fini_array:0000000000207AD8
.fini_array:0000000000207AD8 ; Segment type: Pure data
.fini_array:0000000000207AD8 ; Segment permissions: Read/Write
.fini_array:0000000000207AD8 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000207AD8                 assume cs:_fini_array
.fini_array:0000000000207AD8                 ;org 207AD8h
.fini_array:0000000000207AD8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000207AD8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000207AD8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000207AD8
.data.rel.ro:0000000000207AE0 ; ===========================================================================
.data.rel.ro:0000000000207AE0
.data.rel.ro:0000000000207AE0 ; Segment type: Pure data
.data.rel.ro:0000000000207AE0 ; Segment permissions: Read/Write
.data.rel.ro:0000000000207AE0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000207AE0                 assume cs:_data_rel_ro
.data.rel.ro:0000000000207AE0                 ;org 207AE0h
.data.rel.ro:0000000000207AE0 output_error_args dq offset aWarn       ; DATA XREF: main+B6↑o
.data.rel.ro:0000000000207AE0                                         ; "warn"
.data.rel.ro:0000000000207AE8                 dq offset aWarnNopipe   ; "warn-nopipe"
.data.rel.ro:0000000000207AF0                 dq offset aExit_0       ; "exit"
.data.rel.ro:0000000000207AF8                 dq offset aExitNopipe   ; "exit-nopipe"
.data.rel.ro:0000000000207B00                 db    0
.data.rel.ro:0000000000207B01                 db    0
.data.rel.ro:0000000000207B02                 db    0
.data.rel.ro:0000000000207B03                 db    0
.data.rel.ro:0000000000207B04                 db    0
.data.rel.ro:0000000000207B05                 db    0
.data.rel.ro:0000000000207B06                 db    0
.data.rel.ro:0000000000207B07                 db    0
.data.rel.ro:0000000000207B08                 db    0
.data.rel.ro:0000000000207B09                 db    0
.data.rel.ro:0000000000207B0A                 db    0
.data.rel.ro:0000000000207B0B                 db    0
.data.rel.ro:0000000000207B0C                 db    0
.data.rel.ro:0000000000207B0D                 db    0
.data.rel.ro:0000000000207B0E                 db    0
.data.rel.ro:0000000000207B0F                 db    0
.data.rel.ro:0000000000207B10                 db    0
.data.rel.ro:0000000000207B11                 db    0
.data.rel.ro:0000000000207B12                 db    0
.data.rel.ro:0000000000207B13                 db    0
.data.rel.ro:0000000000207B14                 db    0
.data.rel.ro:0000000000207B15                 db    0
.data.rel.ro:0000000000207B16                 db    0
.data.rel.ro:0000000000207B17                 db    0
.data.rel.ro:0000000000207B18                 db    0
.data.rel.ro:0000000000207B19                 db    0
.data.rel.ro:0000000000207B1A                 db    0
.data.rel.ro:0000000000207B1B                 db    0
.data.rel.ro:0000000000207B1C                 db    0
.data.rel.ro:0000000000207B1D                 db    0
.data.rel.ro:0000000000207B1E                 db    0
.data.rel.ro:0000000000207B1F                 db    0
.data.rel.ro:0000000000207B20 ; struct option long_options
.data.rel.ro:0000000000207B20 long_options    dq offset aAppend       ; name
.data.rel.ro:0000000000207B20                                         ; DATA XREF: main+C↑o
.data.rel.ro:0000000000207B20                 dd 0                    ; has_arg ; "append"
.data.rel.ro:0000000000207B20                 db 4 dup(0)
.data.rel.ro:0000000000207B20                 dq 0                    ; flag
.data.rel.ro:0000000000207B20                 dd 61h                  ; val
.data.rel.ro:0000000000207B20                 db 4 dup(0)
.data.rel.ro:0000000000207B40                 dq offset aIgnoreInterrup ; "ignore-interrupts"
.data.rel.ro:0000000000207B48                 db    0
.data.rel.ro:0000000000207B49                 db    0
.data.rel.ro:0000000000207B4A                 db    0
.data.rel.ro:0000000000207B4B                 db    0
.data.rel.ro:0000000000207B4C                 db    0
.data.rel.ro:0000000000207B4D                 db    0
.data.rel.ro:0000000000207B4E                 db    0
.data.rel.ro:0000000000207B4F                 db    0
.data.rel.ro:0000000000207B50                 db    0
.data.rel.ro:0000000000207B51                 db    0
.data.rel.ro:0000000000207B52                 db    0
.data.rel.ro:0000000000207B53                 db    0
.data.rel.ro:0000000000207B54                 db    0
.data.rel.ro:0000000000207B55                 db    0
.data.rel.ro:0000000000207B56                 db    0
.data.rel.ro:0000000000207B57                 db    0
.data.rel.ro:0000000000207B58                 db  69h ; i
.data.rel.ro:0000000000207B59                 db    0
.data.rel.ro:0000000000207B5A                 db    0
.data.rel.ro:0000000000207B5B                 db    0
.data.rel.ro:0000000000207B5C                 db    0
.data.rel.ro:0000000000207B5D                 db    0
.data.rel.ro:0000000000207B5E                 db    0
.data.rel.ro:0000000000207B5F                 db    0
.data.rel.ro:0000000000207B60                 dq offset aOutputError+2 ; "output-error"
.data.rel.ro:0000000000207B68                 db    2
.data.rel.ro:0000000000207B69                 db    0
.data.rel.ro:0000000000207B6A                 db    0
.data.rel.ro:0000000000207B6B                 db    0
.data.rel.ro:0000000000207B6C                 db    0
.data.rel.ro:0000000000207B6D                 db    0
.data.rel.ro:0000000000207B6E                 db    0
.data.rel.ro:0000000000207B6F                 db    0
.data.rel.ro:0000000000207B70                 db    0
.data.rel.ro:0000000000207B71                 db    0
.data.rel.ro:0000000000207B72                 db    0
.data.rel.ro:0000000000207B73                 db    0
.data.rel.ro:0000000000207B74                 db    0
.data.rel.ro:0000000000207B75                 db    0
.data.rel.ro:0000000000207B76                 db    0
.data.rel.ro:0000000000207B77                 db    0
.data.rel.ro:0000000000207B78                 db  70h ; p
.data.rel.ro:0000000000207B79                 db    0
.data.rel.ro:0000000000207B7A                 db    0
.data.rel.ro:0000000000207B7B                 db    0
.data.rel.ro:0000000000207B7C                 db    0
.data.rel.ro:0000000000207B7D                 db    0
.data.rel.ro:0000000000207B7E                 db    0
.data.rel.ro:0000000000207B7F                 db    0
.data.rel.ro:0000000000207B80                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000207B88                 db    0
.data.rel.ro:0000000000207B89                 db    0
.data.rel.ro:0000000000207B8A                 db    0
.data.rel.ro:0000000000207B8B                 db    0
.data.rel.ro:0000000000207B8C                 db    0
.data.rel.ro:0000000000207B8D                 db    0
.data.rel.ro:0000000000207B8E                 db    0
.data.rel.ro:0000000000207B8F                 db    0
.data.rel.ro:0000000000207B90                 db    0
.data.rel.ro:0000000000207B91                 db    0
.data.rel.ro:0000000000207B92                 db    0
.data.rel.ro:0000000000207B93                 db    0
.data.rel.ro:0000000000207B94                 db    0
.data.rel.ro:0000000000207B95                 db    0
.data.rel.ro:0000000000207B96                 db    0
.data.rel.ro:0000000000207B97                 db    0
.data.rel.ro:0000000000207B98                 db  7Eh ; ~
.data.rel.ro:0000000000207B99                 db 0FFh
.data.rel.ro:0000000000207B9A                 db 0FFh
.data.rel.ro:0000000000207B9B                 db 0FFh
.data.rel.ro:0000000000207B9C                 db    0
.data.rel.ro:0000000000207B9D                 db    0
.data.rel.ro:0000000000207B9E                 db    0
.data.rel.ro:0000000000207B9F                 db    0
.data.rel.ro:0000000000207BA0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000207BA8                 db    0
.data.rel.ro:0000000000207BA9                 db    0
.data.rel.ro:0000000000207BAA                 db    0
.data.rel.ro:0000000000207BAB                 db    0
.data.rel.ro:0000000000207BAC                 db    0
.data.rel.ro:0000000000207BAD                 db    0
.data.rel.ro:0000000000207BAE                 db    0
.data.rel.ro:0000000000207BAF                 db    0
.data.rel.ro:0000000000207BB0                 db    0
.data.rel.ro:0000000000207BB1                 db    0
.data.rel.ro:0000000000207BB2                 db    0
.data.rel.ro:0000000000207BB3                 db    0
.data.rel.ro:0000000000207BB4                 db    0
.data.rel.ro:0000000000207BB5                 db    0
.data.rel.ro:0000000000207BB6                 db    0
.data.rel.ro:0000000000207BB7                 db    0
.data.rel.ro:0000000000207BB8                 db  7Dh ; }
.data.rel.ro:0000000000207BB9                 db 0FFh
.data.rel.ro:0000000000207BBA                 db 0FFh
.data.rel.ro:0000000000207BBB                 db 0FFh
.data.rel.ro:0000000000207BBC                 db    0
.data.rel.ro:0000000000207BBD                 db    0
.data.rel.ro:0000000000207BBE                 db    0
.data.rel.ro:0000000000207BBF                 db    0
.data.rel.ro:0000000000207BC0                 db    0
.data.rel.ro:0000000000207BC1                 db    0
.data.rel.ro:0000000000207BC2                 db    0
.data.rel.ro:0000000000207BC3                 db    0
.data.rel.ro:0000000000207BC4                 db    0
.data.rel.ro:0000000000207BC5                 db    0
.data.rel.ro:0000000000207BC6                 db    0
.data.rel.ro:0000000000207BC7                 db    0
.data.rel.ro:0000000000207BC8                 db    0
.data.rel.ro:0000000000207BC9                 db    0
.data.rel.ro:0000000000207BCA                 db    0
.data.rel.ro:0000000000207BCB                 db    0
.data.rel.ro:0000000000207BCC                 db    0
.data.rel.ro:0000000000207BCD                 db    0
.data.rel.ro:0000000000207BCE                 db    0
.data.rel.ro:0000000000207BCF                 db    0
.data.rel.ro:0000000000207BD0                 db    0
.data.rel.ro:0000000000207BD1                 db    0
.data.rel.ro:0000000000207BD2                 db    0
.data.rel.ro:0000000000207BD3                 db    0
.data.rel.ro:0000000000207BD4                 db    0
.data.rel.ro:0000000000207BD5                 db    0
.data.rel.ro:0000000000207BD6                 db    0
.data.rel.ro:0000000000207BD7                 db    0
.data.rel.ro:0000000000207BD8                 db    0
.data.rel.ro:0000000000207BD9                 db    0
.data.rel.ro:0000000000207BDA                 db    0
.data.rel.ro:0000000000207BDB                 db    0
.data.rel.ro:0000000000207BDC                 db    0
.data.rel.ro:0000000000207BDD                 db    0
.data.rel.ro:0000000000207BDE                 db    0
.data.rel.ro:0000000000207BDF                 db    0
.data.rel.ro:0000000000207BE0                 public quoting_style_args
.data.rel.ro:0000000000207BE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000207BE8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000207BF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000207BF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000207C00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000207C08                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000207C10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000207C18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000207C20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000207C28                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000207C30                 db    0
.data.rel.ro:0000000000207C31                 db    0
.data.rel.ro:0000000000207C32                 db    0
.data.rel.ro:0000000000207C33                 db    0
.data.rel.ro:0000000000207C34                 db    0
.data.rel.ro:0000000000207C35                 db    0
.data.rel.ro:0000000000207C36                 db    0
.data.rel.ro:0000000000207C37                 db    0
.data.rel.ro:0000000000207C37 _data_rel_ro    ends
.data.rel.ro:0000000000207C37
LOAD:0000000000207C38 ; ELF Dynamic Information
LOAD:0000000000207C38 ; ===========================================================================
LOAD:0000000000207C38
LOAD:0000000000207C38 ; Segment type: Pure data
LOAD:0000000000207C38 ; Segment permissions: Read/Write
LOAD:0000000000207C38 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207C38                 assume cs:LOAD
LOAD:0000000000207C38                 ;org 207C38h
LOAD:0000000000207C38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000207C38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000207C38                                         ; DT_NEEDED libc.so.6
LOAD:0000000000207C48                 Elf64_Dyn <0Ch, 1508h>  ; DT_INIT
LOAD:0000000000207C58                 Elf64_Dyn <0Dh, 5440h>  ; DT_FINI
LOAD:0000000000207C68                 Elf64_Dyn <19h, 207AD0h> ; DT_INIT_ARRAY
LOAD:0000000000207C78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000207C88                 Elf64_Dyn <1Ah, 207AD8h> ; DT_FINI_ARRAY
LOAD:0000000000207C98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000207CA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000207CB8                 Elf64_Dyn <5, 8F8h>     ; DT_STRTAB
LOAD:0000000000207CC8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000207CD8                 Elf64_Dyn <0Ah, 2E7h>   ; DT_STRSZ
LOAD:0000000000207CE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000207CF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000207D08                 Elf64_Dyn <3, 207E28h>  ; DT_PLTGOT
LOAD:0000000000207D18                 Elf64_Dyn <2, 4B0h>     ; DT_PLTRELSZ
LOAD:0000000000207D28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000207D38                 Elf64_Dyn <17h, 1058h>  ; DT_JMPREL
LOAD:0000000000207D48                 Elf64_Dyn <7, 0CC8h>    ; DT_RELA
LOAD:0000000000207D58                 Elf64_Dyn <8, 390h>     ; DT_RELASZ
LOAD:0000000000207D68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000207D78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000207D88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000207D98                 Elf64_Dyn <6FFFFFFEh, 0C68h> ; DT_VERNEED
LOAD:0000000000207DA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000207DB8                 Elf64_Dyn <6FFFFFF0h, 0BE0h> ; DT_VERSYM
LOAD:0000000000207DC8                 Elf64_Dyn <6FFFFFF9h, 1Ah> ; DT_RELACOUNT
LOAD:0000000000207DD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000207DE8                 db    0
LOAD:0000000000207DE9                 db    0
LOAD:0000000000207DEA                 db    0
LOAD:0000000000207DEB                 db    0
LOAD:0000000000207DEC                 db    0
LOAD:0000000000207DED                 db    0
LOAD:0000000000207DEE                 db    0
LOAD:0000000000207DEF                 db    0
LOAD:0000000000207DF0                 db    0
LOAD:0000000000207DF1                 db    0
LOAD:0000000000207DF2                 db    0
LOAD:0000000000207DF3                 db    0
LOAD:0000000000207DF4                 db    0
LOAD:0000000000207DF5                 db    0
LOAD:0000000000207DF6                 db    0
LOAD:0000000000207DF7                 db    0
LOAD:0000000000207DF8                 db    0
LOAD:0000000000207DF9                 db    0
LOAD:0000000000207DFA                 db    0
LOAD:0000000000207DFB                 db    0
LOAD:0000000000207DFC                 db    0
LOAD:0000000000207DFD                 db    0
LOAD:0000000000207DFE                 db    0
LOAD:0000000000207DFF                 db    0
LOAD:0000000000207E00                 db    0
LOAD:0000000000207E01                 db    0
LOAD:0000000000207E02                 db    0
LOAD:0000000000207E03                 db    0
LOAD:0000000000207E04                 db    0
LOAD:0000000000207E05                 db    0
LOAD:0000000000207E06                 db    0
LOAD:0000000000207E07                 db    0
LOAD:0000000000207E08                 db    0
LOAD:0000000000207E09                 db    0
LOAD:0000000000207E0A                 db    0
LOAD:0000000000207E0B                 db    0
LOAD:0000000000207E0C                 db    0
LOAD:0000000000207E0D                 db    0
LOAD:0000000000207E0E                 db    0
LOAD:0000000000207E0F                 db    0
LOAD:0000000000207E10                 db    0
LOAD:0000000000207E11                 db    0
LOAD:0000000000207E12                 db    0
LOAD:0000000000207E13                 db    0
LOAD:0000000000207E14                 db    0
LOAD:0000000000207E15                 db    0
LOAD:0000000000207E16                 db    0
LOAD:0000000000207E17                 db    0
LOAD:0000000000207E18                 db    0
LOAD:0000000000207E19                 db    0
LOAD:0000000000207E1A                 db    0
LOAD:0000000000207E1B                 db    0
LOAD:0000000000207E1C                 db    0
LOAD:0000000000207E1D                 db    0
LOAD:0000000000207E1E                 db    0
LOAD:0000000000207E1F                 db    0
LOAD:0000000000207E20                 db    0
LOAD:0000000000207E21                 db    0
LOAD:0000000000207E22                 db    0
LOAD:0000000000207E23                 db    0
LOAD:0000000000207E24                 db    0
LOAD:0000000000207E25                 db    0
LOAD:0000000000207E26                 db    0
LOAD:0000000000207E27                 db    0
LOAD:0000000000207E27 LOAD            ends
LOAD:0000000000207E27
.got:0000000000207E28 ; ===========================================================================
.got:0000000000207E28
.got:0000000000207E28 ; Segment type: Pure data
.got:0000000000207E28 ; Segment permissions: Read/Write
.got:0000000000207E28 _got            segment qword public 'DATA' use64
.got:0000000000207E28                 assume cs:_got
.got:0000000000207E28                 ;org 207E28h
.got:0000000000207E28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000207E30 qword_207E30    dq 0                    ; DATA XREF: sub_1520↑r
.got:0000000000207E38 qword_207E38    dq 0                    ; DATA XREF: sub_1520+6↑r
.got:0000000000207E40 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000207E48 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000207E50 __errno_location_ptr dq offset __errno_location
.got:0000000000207E50                                         ; DATA XREF: ___errno_location↑r
.got:0000000000207E58 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000207E60 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000207E68 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000207E70 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:0000000000207E78 clearerr_unlocked_ptr dq offset clearerr_unlocked
.got:0000000000207E78                                         ; DATA XREF: _clearerr_unlocked↑r
.got:0000000000207E80 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000207E88 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000207E90 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000207E90                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000207E98 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000207EA0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000207EA0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000207EA8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000207EB0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000207EB0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000207EB8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000207EC0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000207EC8 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000207ED0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000207ED8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000207EE0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000207EE8 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000207EF0 posix_fadvise_ptr dq offset posix_fadvise
.got:0000000000207EF0                                         ; DATA XREF: _posix_fadvise↑r
.got:0000000000207EF8 read_ptr        dq offset read          ; DATA XREF: _read↑r
.got:0000000000207F00 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000207F08 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000207F08                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000207F10 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000207F18 signal_ptr      dq offset signal        ; DATA XREF: _signal↑r
.got:0000000000207F20 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000207F28 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000207F30 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000207F38 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000207F40 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000207F48 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000207F50 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:0000000000207F50                                         ; DATA XREF: _fwrite_unlocked↑r
.got:0000000000207F58 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000207F60 fdopen_ptr      dq offset fdopen        ; DATA XREF: _fdopen↑r
.got:0000000000207F68 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000207F70 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000207F78 setvbuf_ptr     dq offset setvbuf       ; DATA XREF: _setvbuf↑r
.got:0000000000207F80 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000207F88 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000207F90 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000207F98 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000207FA0 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000207FA8 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000207FB0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000207FB0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000207FB8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000207FC0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000207FC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000207FC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000207FD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000207FD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000207FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000207FD8                                         ; DATA XREF: start+24↑r
.got:0000000000207FE0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000207FE0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000207FE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000207FE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000207FF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000207FF0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000207FF0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000207FF0 _got            ends
.got:0000000000207FF0
LOAD:0000000000207FF8 ; ===========================================================================
LOAD:0000000000207FF8
LOAD:0000000000207FF8 ; Segment type: Pure data
LOAD:0000000000207FF8 ; Segment permissions: Read/Write
LOAD:0000000000207FF8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207FF8                 assume cs:LOAD
LOAD:0000000000207FF8                 ;org 207FF8h
LOAD:0000000000207FF8                 align 20h
LOAD:0000000000207FF8 LOAD            ends
LOAD:0000000000207FF8
.data:0000000000208000 ; ===========================================================================
.data:0000000000208000
.data:0000000000208000 ; Segment type: Pure data
.data:0000000000208000 ; Segment permissions: Read/Write
.data:0000000000208000 _data           segment align_32 public 'DATA' use64
.data:0000000000208000                 assume cs:_data
.data:0000000000208000                 ;org 208000h
.data:0000000000208000                 public __data_start ; weak
.data:0000000000208000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000208000                                         ; data_start
.data:0000000000208001                 db    0
.data:0000000000208002                 db    0
.data:0000000000208003                 db    0
.data:0000000000208004                 db    0
.data:0000000000208005                 db    0
.data:0000000000208006                 db    0
.data:0000000000208007                 db    0
.data:0000000000208008                 public __dso_handle
.data:0000000000208008 ; void *_dso_handle
.data:0000000000208008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000208008                                         ; atexit↑r ...
.data:0000000000208010                 public Version
.data:0000000000208010 Version         dq offset a831          ; DATA XREF: main+109↑r
.data:0000000000208010                                         ; "8.31"
.data:0000000000208018                 public argmatch_die
.data:0000000000208018 argmatch_die    dq offset __argmatch_die
.data:0000000000208018                                         ; DATA XREF: main+AF↑r
.data:0000000000208020                 public exit_failure
.data:0000000000208020 ; int exit_failure
.data:0000000000208020 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2762↑r
.data:0000000000208020                                         ; xalloc_die+17↑r
.data:0000000000208024                 align 20h
.data:0000000000208040                 public quote_quoting_options
.data:0000000000208040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000208040                                         ; quote_mem↑o ...
.data:0000000000208041                 db    0
.data:0000000000208042                 db    0
.data:0000000000208043                 db    0
.data:0000000000208044                 db    0
.data:0000000000208045                 db    0
.data:0000000000208046                 db    0
.data:0000000000208047                 db    0
.data:0000000000208048                 db    0
.data:0000000000208049                 db    0
.data:000000000020804A                 db    0
.data:000000000020804B                 db    0
.data:000000000020804C                 db    0
.data:000000000020804D                 db    0
.data:000000000020804E                 db    0
.data:000000000020804F                 db    0
.data:0000000000208050                 db    0
.data:0000000000208051                 db    0
.data:0000000000208052                 db    0
.data:0000000000208053                 db    0
.data:0000000000208054                 db    0
.data:0000000000208055                 db    0
.data:0000000000208056                 db    0
.data:0000000000208057                 db    0
.data:0000000000208058                 db    0
.data:0000000000208059                 db    0
.data:000000000020805A                 db    0
.data:000000000020805B                 db    0
.data:000000000020805C                 db    0
.data:000000000020805D                 db    0
.data:000000000020805E                 db    0
.data:000000000020805F                 db    0
.data:0000000000208060                 db    0
.data:0000000000208061                 db    0
.data:0000000000208062                 db    0
.data:0000000000208063                 db    0
.data:0000000000208064                 db    0
.data:0000000000208065                 db    0
.data:0000000000208066                 db    0
.data:0000000000208067                 db    0
.data:0000000000208068                 db    0
.data:0000000000208069                 db    0
.data:000000000020806A                 db    0
.data:000000000020806B                 db    0
.data:000000000020806C                 db    0
.data:000000000020806D                 db    0
.data:000000000020806E                 db    0
.data:000000000020806F                 db    0
.data:0000000000208070                 db    0
.data:0000000000208071                 db    0
.data:0000000000208072                 db    0
.data:0000000000208073                 db    0
.data:0000000000208074                 db    0
.data:0000000000208075                 db    0
.data:0000000000208076                 db    0
.data:0000000000208077                 db    0
.data:0000000000208078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000208078                                         ; quotearg_n_options:loc_3CBD↑r ...
.data:000000000020807C                 align 20h
.data:0000000000208080 ; void *slotvec
.data:0000000000208080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000208080                                         ; quotearg_n_options+76↑w ...
.data:0000000000208088                 align 10h
.data:0000000000208090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000208090                                         ; quotearg_n_options+187↑r ...
.data:0000000000208098 off_208098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000208098 _data           ends
.data:0000000000208098
.bss:00000000002080A0 ; ===========================================================================
.bss:00000000002080A0
.bss:00000000002080A0 ; Segment type: Uninitialized
.bss:00000000002080A0 ; Segment permissions: Read/Write
.bss:00000000002080A0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002080A0                 assume cs:_bss
.bss:00000000002080A0                 ;org 2080A0h
.bss:00000000002080A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002080A0                 public __bss_start ; weak
.bss:00000000002080A0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000838↑o
.bss:00000000002080A0                                         ; LOAD:0000000000000898↑o ...
.bss:00000000002080A0                                         ; Alternative name is '__TMC_END__'
.bss:00000000002080A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:00000000002080A0                                         ; _edata
.bss:00000000002080A0                                         ; Copy of shared data
.bss:00000000002080A8                 public stdout@@GLIBC_2_2_5
.bss:00000000002080A8 ; FILE *stdout
.bss:00000000002080A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000820↑o
.bss:00000000002080A8                                         ; main+102↑r ...
.bss:00000000002080A8                                         ; Alternative name is 'stdout'
.bss:00000000002080A8                                         ; Copy of shared data
.bss:00000000002080B0                 public stdin@@GLIBC_2_2_5
.bss:00000000002080B0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000850↑o
.bss:00000000002080B0                                         ; tee_files+47↑r
.bss:00000000002080B0                                         ; Alternative name is 'stdin'
.bss:00000000002080B0                                         ; Copy of shared data
.bss:00000000002080B8                 public optind@@GLIBC_2_2_5
.bss:00000000002080B8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000008C8↑o
.bss:00000000002080B8                                         ; main:loc_19DD↑r
.bss:00000000002080B8                                         ; Alternative name is 'optind'
.bss:00000000002080B8                                         ; Copy of shared data
.bss:00000000002080BC                 align 20h
.bss:00000000002080C0                 public optarg@@GLIBC_2_2_5
.bss:00000000002080C0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008E0↑o
.bss:00000000002080C0                                         ; main+9F↑r
.bss:00000000002080C0                                         ; Alternative name is 'optarg'
.bss:00000000002080C0                                         ; Copy of shared data
.bss:00000000002080C8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002080C8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002080C8                                         ; DATA XREF: LOAD:0000000000000868↑o
.bss:00000000002080C8                                         ; LOAD:0000000000000880↑o ...
.bss:00000000002080C8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002080C8                                         ; Copy of shared data
.bss:00000000002080D0                 align 20h
.bss:00000000002080E0                 public stderr@@GLIBC_2_2_5
.bss:00000000002080E0 ; FILE *stderr
.bss:00000000002080E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008B0↑o
.bss:00000000002080E0                                         ; usage+3D↑r ...
.bss:00000000002080E0                                         ; Alternative name is 'stderr'
.bss:00000000002080E0                                         ; Copy of shared data
.bss:00000000002080E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002080E8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002080E9                 align 4
.bss:00000000002080EC output_error    dd ?                    ; DATA XREF: main+E0↑w
.bss:00000000002080EC                                         ; main:loc_19BC↑w ...
.bss:00000000002080F0 ignore_interrupts db ?                  ; DATA XREF: main+5B↑w
.bss:00000000002080F0                                         ; main:loc_19B0↑w ...
.bss:00000000002080F1 append          db ?                    ; DATA XREF: main+54↑w
.bss:00000000002080F1                                         ; main:loc_19A0↑w ...
.bss:00000000002080F2                 align 8
.bss:00000000002080F8 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002080F8                                         ; close_stdout+1B↑r
.bss:00000000002080F9                 align 20h
.bss:0000000000208100 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:0000000000208100                                         ; close_stdout+56↑r
.bss:0000000000208108                 public program_name
.bss:0000000000208108 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:0000000000208108                                         ; set_program_name:loc_28DD↑w
.bss:0000000000208110                 align 20h
.bss:0000000000208120 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000208120                                         ; quotearg_free+46↑o ...
.bss:0000000000208121                 db    ? ;
.bss:0000000000208122                 db    ? ;
.bss:0000000000208123                 db    ? ;
.bss:0000000000208124                 db    ? ;
.bss:0000000000208125                 db    ? ;
.bss:0000000000208126                 db    ? ;
.bss:0000000000208127                 db    ? ;
.bss:0000000000208128                 db    ? ;
.bss:0000000000208129                 db    ? ;
.bss:000000000020812A                 db    ? ;
.bss:000000000020812B                 db    ? ;
.bss:000000000020812C                 db    ? ;
.bss:000000000020812D                 db    ? ;
.bss:000000000020812E                 db    ? ;
.bss:000000000020812F                 db    ? ;
.bss:0000000000208130                 db    ? ;
.bss:0000000000208131                 db    ? ;
.bss:0000000000208132                 db    ? ;
.bss:0000000000208133                 db    ? ;
.bss:0000000000208134                 db    ? ;
.bss:0000000000208135                 db    ? ;
.bss:0000000000208136                 db    ? ;
.bss:0000000000208137                 db    ? ;
.bss:0000000000208138                 db    ? ;
.bss:0000000000208139                 db    ? ;
.bss:000000000020813A                 db    ? ;
.bss:000000000020813B                 db    ? ;
.bss:000000000020813C                 db    ? ;
.bss:000000000020813D                 db    ? ;
.bss:000000000020813E                 db    ? ;
.bss:000000000020813F                 db    ? ;
.bss:0000000000208140                 db    ? ;
.bss:0000000000208141                 db    ? ;
.bss:0000000000208142                 db    ? ;
.bss:0000000000208143                 db    ? ;
.bss:0000000000208144                 db    ? ;
.bss:0000000000208145                 db    ? ;
.bss:0000000000208146                 db    ? ;
.bss:0000000000208147                 db    ? ;
.bss:0000000000208148                 db    ? ;
.bss:0000000000208149                 db    ? ;
.bss:000000000020814A                 db    ? ;
.bss:000000000020814B                 db    ? ;
.bss:000000000020814C                 db    ? ;
.bss:000000000020814D                 db    ? ;
.bss:000000000020814E                 db    ? ;
.bss:000000000020814F                 db    ? ;
.bss:0000000000208150                 db    ? ;
.bss:0000000000208151                 db    ? ;
.bss:0000000000208152                 db    ? ;
.bss:0000000000208153                 db    ? ;
.bss:0000000000208154                 db    ? ;
.bss:0000000000208155                 db    ? ;
.bss:0000000000208156                 db    ? ;
.bss:0000000000208157                 db    ? ;
.bss:0000000000208158                 db    ? ;
.bss:0000000000208159                 db    ? ;
.bss:000000000020815A                 db    ? ;
.bss:000000000020815B                 db    ? ;
.bss:000000000020815C                 db    ? ;
.bss:000000000020815D                 db    ? ;
.bss:000000000020815E                 db    ? ;
.bss:000000000020815F                 db    ? ;
.bss:0000000000208160                 db    ? ;
.bss:0000000000208161                 db    ? ;
.bss:0000000000208162                 db    ? ;
.bss:0000000000208163                 db    ? ;
.bss:0000000000208164                 db    ? ;
.bss:0000000000208165                 db    ? ;
.bss:0000000000208166                 db    ? ;
.bss:0000000000208167                 db    ? ;
.bss:0000000000208168                 db    ? ;
.bss:0000000000208169                 db    ? ;
.bss:000000000020816A                 db    ? ;
.bss:000000000020816B                 db    ? ;
.bss:000000000020816C                 db    ? ;
.bss:000000000020816D                 db    ? ;
.bss:000000000020816E                 db    ? ;
.bss:000000000020816F                 db    ? ;
.bss:0000000000208170                 db    ? ;
.bss:0000000000208171                 db    ? ;
.bss:0000000000208172                 db    ? ;
.bss:0000000000208173                 db    ? ;
.bss:0000000000208174                 db    ? ;
.bss:0000000000208175                 db    ? ;
.bss:0000000000208176                 db    ? ;
.bss:0000000000208177                 db    ? ;
.bss:0000000000208178                 db    ? ;
.bss:0000000000208179                 db    ? ;
.bss:000000000020817A                 db    ? ;
.bss:000000000020817B                 db    ? ;
.bss:000000000020817C                 db    ? ;
.bss:000000000020817D                 db    ? ;
.bss:000000000020817E                 db    ? ;
.bss:000000000020817F                 db    ? ;
.bss:0000000000208180                 db    ? ;
.bss:0000000000208181                 db    ? ;
.bss:0000000000208182                 db    ? ;
.bss:0000000000208183                 db    ? ;
.bss:0000000000208184                 db    ? ;
.bss:0000000000208185                 db    ? ;
.bss:0000000000208186                 db    ? ;
.bss:0000000000208187                 db    ? ;
.bss:0000000000208188                 db    ? ;
.bss:0000000000208189                 db    ? ;
.bss:000000000020818A                 db    ? ;
.bss:000000000020818B                 db    ? ;
.bss:000000000020818C                 db    ? ;
.bss:000000000020818D                 db    ? ;
.bss:000000000020818E                 db    ? ;
.bss:000000000020818F                 db    ? ;
.bss:0000000000208190                 db    ? ;
.bss:0000000000208191                 db    ? ;
.bss:0000000000208192                 db    ? ;
.bss:0000000000208193                 db    ? ;
.bss:0000000000208194                 db    ? ;
.bss:0000000000208195                 db    ? ;
.bss:0000000000208196                 db    ? ;
.bss:0000000000208197                 db    ? ;
.bss:0000000000208198                 db    ? ;
.bss:0000000000208199                 db    ? ;
.bss:000000000020819A                 db    ? ;
.bss:000000000020819B                 db    ? ;
.bss:000000000020819C                 db    ? ;
.bss:000000000020819D                 db    ? ;
.bss:000000000020819E                 db    ? ;
.bss:000000000020819F                 db    ? ;
.bss:00000000002081A0                 db    ? ;
.bss:00000000002081A1                 db    ? ;
.bss:00000000002081A2                 db    ? ;
.bss:00000000002081A3                 db    ? ;
.bss:00000000002081A4                 db    ? ;
.bss:00000000002081A5                 db    ? ;
.bss:00000000002081A6                 db    ? ;
.bss:00000000002081A7                 db    ? ;
.bss:00000000002081A8                 db    ? ;
.bss:00000000002081A9                 db    ? ;
.bss:00000000002081AA                 db    ? ;
.bss:00000000002081AB                 db    ? ;
.bss:00000000002081AC                 db    ? ;
.bss:00000000002081AD                 db    ? ;
.bss:00000000002081AE                 db    ? ;
.bss:00000000002081AF                 db    ? ;
.bss:00000000002081B0                 db    ? ;
.bss:00000000002081B1                 db    ? ;
.bss:00000000002081B2                 db    ? ;
.bss:00000000002081B3                 db    ? ;
.bss:00000000002081B4                 db    ? ;
.bss:00000000002081B5                 db    ? ;
.bss:00000000002081B6                 db    ? ;
.bss:00000000002081B7                 db    ? ;
.bss:00000000002081B8                 db    ? ;
.bss:00000000002081B9                 db    ? ;
.bss:00000000002081BA                 db    ? ;
.bss:00000000002081BB                 db    ? ;
.bss:00000000002081BC                 db    ? ;
.bss:00000000002081BD                 db    ? ;
.bss:00000000002081BE                 db    ? ;
.bss:00000000002081BF                 db    ? ;
.bss:00000000002081C0                 db    ? ;
.bss:00000000002081C1                 db    ? ;
.bss:00000000002081C2                 db    ? ;
.bss:00000000002081C3                 db    ? ;
.bss:00000000002081C4                 db    ? ;
.bss:00000000002081C5                 db    ? ;
.bss:00000000002081C6                 db    ? ;
.bss:00000000002081C7                 db    ? ;
.bss:00000000002081C8                 db    ? ;
.bss:00000000002081C9                 db    ? ;
.bss:00000000002081CA                 db    ? ;
.bss:00000000002081CB                 db    ? ;
.bss:00000000002081CC                 db    ? ;
.bss:00000000002081CD                 db    ? ;
.bss:00000000002081CE                 db    ? ;
.bss:00000000002081CF                 db    ? ;
.bss:00000000002081D0                 db    ? ;
.bss:00000000002081D1                 db    ? ;
.bss:00000000002081D2                 db    ? ;
.bss:00000000002081D3                 db    ? ;
.bss:00000000002081D4                 db    ? ;
.bss:00000000002081D5                 db    ? ;
.bss:00000000002081D6                 db    ? ;
.bss:00000000002081D7                 db    ? ;
.bss:00000000002081D8                 db    ? ;
.bss:00000000002081D9                 db    ? ;
.bss:00000000002081DA                 db    ? ;
.bss:00000000002081DB                 db    ? ;
.bss:00000000002081DC                 db    ? ;
.bss:00000000002081DD                 db    ? ;
.bss:00000000002081DE                 db    ? ;
.bss:00000000002081DF                 db    ? ;
.bss:00000000002081E0                 db    ? ;
.bss:00000000002081E1                 db    ? ;
.bss:00000000002081E2                 db    ? ;
.bss:00000000002081E3                 db    ? ;
.bss:00000000002081E4                 db    ? ;
.bss:00000000002081E5                 db    ? ;
.bss:00000000002081E6                 db    ? ;
.bss:00000000002081E7                 db    ? ;
.bss:00000000002081E8                 db    ? ;
.bss:00000000002081E9                 db    ? ;
.bss:00000000002081EA                 db    ? ;
.bss:00000000002081EB                 db    ? ;
.bss:00000000002081EC                 db    ? ;
.bss:00000000002081ED                 db    ? ;
.bss:00000000002081EE                 db    ? ;
.bss:00000000002081EF                 db    ? ;
.bss:00000000002081F0                 db    ? ;
.bss:00000000002081F1                 db    ? ;
.bss:00000000002081F2                 db    ? ;
.bss:00000000002081F3                 db    ? ;
.bss:00000000002081F4                 db    ? ;
.bss:00000000002081F5                 db    ? ;
.bss:00000000002081F6                 db    ? ;
.bss:00000000002081F7                 db    ? ;
.bss:00000000002081F8                 db    ? ;
.bss:00000000002081F9                 db    ? ;
.bss:00000000002081FA                 db    ? ;
.bss:00000000002081FB                 db    ? ;
.bss:00000000002081FC                 db    ? ;
.bss:00000000002081FD                 db    ? ;
.bss:00000000002081FE                 db    ? ;
.bss:00000000002081FF                 db    ? ;
.bss:0000000000208200                 db    ? ;
.bss:0000000000208201                 db    ? ;
.bss:0000000000208202                 db    ? ;
.bss:0000000000208203                 db    ? ;
.bss:0000000000208204                 db    ? ;
.bss:0000000000208205                 db    ? ;
.bss:0000000000208206                 db    ? ;
.bss:0000000000208207                 db    ? ;
.bss:0000000000208208                 db    ? ;
.bss:0000000000208209                 db    ? ;
.bss:000000000020820A                 db    ? ;
.bss:000000000020820B                 db    ? ;
.bss:000000000020820C                 db    ? ;
.bss:000000000020820D                 db    ? ;
.bss:000000000020820E                 db    ? ;
.bss:000000000020820F                 db    ? ;
.bss:0000000000208210                 db    ? ;
.bss:0000000000208211                 db    ? ;
.bss:0000000000208212                 db    ? ;
.bss:0000000000208213                 db    ? ;
.bss:0000000000208214                 db    ? ;
.bss:0000000000208215                 db    ? ;
.bss:0000000000208216                 db    ? ;
.bss:0000000000208217                 db    ? ;
.bss:0000000000208218                 db    ? ;
.bss:0000000000208219                 db    ? ;
.bss:000000000020821A                 db    ? ;
.bss:000000000020821B                 db    ? ;
.bss:000000000020821C                 db    ? ;
.bss:000000000020821D                 db    ? ;
.bss:000000000020821E                 db    ? ;
.bss:000000000020821F                 db    ? ;
.bss:0000000000208220 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000208220                                         ; get_quoting_style↑o ...
.bss:0000000000208230 xmmword_208230  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000208230                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000208240 xmmword_208240  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000208240                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000208250 qword_208250    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000208250                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000208258 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:0000000000208258                                         ; rpl_fcntl:loc_4F6F↑w ...
.bss:000000000020825C                 align 20h
.bss:000000000020825C _bss            ends
.bss:000000000020825C
.prgend:0000000000208260 ; ===========================================================================
.prgend:0000000000208260
.prgend:0000000000208260 ; Segment type: Zero-length
.prgend:0000000000208260 _prgend         segment byte public '' use64
.prgend:0000000000208260 _end            label byte
.prgend:0000000000208260 _prgend         ends
.prgend:0000000000208260
extern:0000000000208268 ; ===========================================================================
extern:0000000000208268
extern:0000000000208268 ; Segment type: Externs
extern:0000000000208268 ; extern
extern:0000000000208268 ; void free(void *ptr)
extern:0000000000208268                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000208268                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000208270 ; void __noreturn abort(void)
extern:0000000000208270                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000208270                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000208278 ; int *_errno_location(void)
extern:0000000000208278                 extrn __errno_location:near
extern:0000000000208278                                         ; CODE XREF: ___errno_location↑j
extern:0000000000208278                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000208280 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000208280                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000208280                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000208288 ; void __noreturn exit(int status)
extern:0000000000208288                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000208288                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000208290 ; size_t _fpending(FILE *fp)
extern:0000000000208290                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000208290                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000208298 ; int fcntl(int fd, int cmd, ...)
extern:0000000000208298                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:0000000000208298                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:00000000002082A0 ; void clearerr_unlocked(FILE *stream)
extern:00000000002082A0                 extrn clearerr_unlocked:near
extern:00000000002082A0                                         ; CODE XREF: _clearerr_unlocked↑j
extern:00000000002082A0                                         ; DATA XREF: .got:clearerr_unlocked_ptr↑o
extern:00000000002082A8 ; char *textdomain(const char *domainname)
extern:00000000002082A8                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:00000000002082A8                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:00000000002082B0 ; int fclose(FILE *stream)
extern:00000000002082B0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:00000000002082B0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:00000000002082B8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:00000000002082B8                 extrn bindtextdomain:near
extern:00000000002082B8                                         ; CODE XREF: _bindtextdomain↑j
extern:00000000002082B8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:00000000002082C0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:00000000002082C0                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:00000000002082C0                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:00000000002082C8 ; size_t _ctype_get_mb_cur_max(void)
extern:00000000002082C8                 extrn __ctype_get_mb_cur_max:near
extern:00000000002082C8                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:00000000002082C8                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002082D0 ; size_t strlen(const char *s)
extern:00000000002082D0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002082D0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002082D8                 extrn __stack_chk_fail:near
extern:00000000002082D8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002082D8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002082E0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002082E0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002082E0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002082E8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002082E8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002082E8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002082F0 ; int _overflow(_IO_FILE *, int)
extern:00000000002082F0                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:00000000002082F0                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:00000000002082F8 ; char *strrchr(const char *s, int c)
extern:00000000002082F8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002082F8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:0000000000208300 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:0000000000208300                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:0000000000208300                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000208308 ; void *memset(void *s, int c, size_t n)
extern:0000000000208308                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000000000208308                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000208310 ; int close(int fd)
extern:0000000000208310                 extrn close:near        ; CODE XREF: _close↑j
extern:0000000000208310                                         ; DATA XREF: .got:close_ptr↑o
extern:0000000000208318 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:0000000000208318                 extrn posix_fadvise:near
extern:0000000000208318                                         ; CODE XREF: _posix_fadvise↑j
extern:0000000000208318                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:0000000000208320 ; ssize_t read(int fd, void *buf, size_t nbytes)
extern:0000000000208320                 extrn read:near         ; CODE XREF: _read↑j
extern:0000000000208320                                         ; DATA XREF: .got:read_ptr↑o
extern:0000000000208328 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000208328                 extrn __libc_start_main:near
extern:0000000000208328                                         ; CODE XREF: start+24↑p
extern:0000000000208328                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000208330 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000208330                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000208330                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000208338 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000208338                 extrn fputs_unlocked:near
extern:0000000000208338                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000208338                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000208340 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000208340                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000208340                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000208348 ; __sighandler_t signal(int sig, __sighandler_t handler)
extern:0000000000208348                 extrn signal:near       ; CODE XREF: _signal↑j
extern:0000000000208348                                         ; DATA XREF: .got:signal_ptr↑o
extern:0000000000208350 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000208350                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000208350                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000208358 ; int fileno(FILE *stream)
extern:0000000000208358                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000208358                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000208360 ; void *malloc(size_t size)
extern:0000000000208360                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000208360                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000208368 ; int fflush(FILE *stream)
extern:0000000000208368                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000208368                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000208370 ; char *nl_langinfo(nl_item item)
extern:0000000000208370                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000208370                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000208378 ; int _freading(FILE *fp)
extern:0000000000208378                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000208378                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000208380 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:0000000000208380                 extrn fwrite_unlocked:near
extern:0000000000208380                                         ; CODE XREF: _fwrite_unlocked↑j
extern:0000000000208380                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:0000000000208388 ; void *realloc(void *ptr, size_t size)
extern:0000000000208388                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000208388                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000208390 ; FILE *fdopen(int fd, const char *modes)
extern:0000000000208390                 extrn fdopen:near       ; CODE XREF: _fdopen↑j
extern:0000000000208390                                         ; DATA XREF: .got:fdopen_ptr↑o
extern:0000000000208398 ; char *setlocale(int category, const char *locale)
extern:0000000000208398                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000208398                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:00000000002083A0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:00000000002083A0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:00000000002083A8 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
extern:00000000002083A8                 extrn setvbuf:near      ; CODE XREF: _setvbuf↑j
extern:00000000002083A8                                         ; DATA XREF: .got:setvbuf_ptr↑o
extern:00000000002083B0 ; void error(int status, int errnum, const char *format, ...)
extern:00000000002083B0                 extrn error:near        ; CODE XREF: _error↑j
extern:00000000002083B0                                         ; DATA XREF: .got:error_ptr↑o
extern:00000000002083B8 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:00000000002083B8                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:00000000002083B8                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:00000000002083C0 ; FILE *fopen(const char *filename, const char *modes)
extern:00000000002083C0                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:00000000002083C0                                         ; DATA XREF: .got:fopen_ptr↑o
extern:00000000002083C8 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:00000000002083C8                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:00000000002083C8                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:00000000002083D0 ; void __noreturn exit(int status)
extern:00000000002083D0                 extrn exit:near         ; CODE XREF: _exit↑j
extern:00000000002083D0                                         ; DATA XREF: .got:exit_ptr↑o
extern:00000000002083D8 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:00000000002083D8                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:00000000002083D8                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:00000000002083E0                 extrn __fprintf_chk:near
extern:00000000002083E0                                         ; CODE XREF: ___fprintf_chk↑j
extern:00000000002083E0                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:00000000002083E8 ; int mbsinit(const mbstate_t *ps)
extern:00000000002083E8                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:00000000002083E8                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:00000000002083F0 ; int iswprint(wint_t wc)
extern:00000000002083F0                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:00000000002083F0                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002083F8 ; int __fastcall __cxa_finalize(void *)
extern:00000000002083F8                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002083F8                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002083F8                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000208400 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000208400                 extrn __ctype_b_loc:near
extern:0000000000208400                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000208400                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000208408                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000208408                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000208410                 extrn __gmon_start__:near ; weak
extern:0000000000208410                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000208410                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000208418                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000208418                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000208418
extern:0000000000208418
extern:0000000000208418                 end start
