LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 670B949A05917ACEE32694C868403E2E9CDF444FE595110D631E7171E3EF4535
LOAD:0000000000000000 ; Input MD5    : EE736BF9F971FA79D2976A2816624C1C
LOAD:0000000000000000 ; Input CRC32  : 5A4FC742
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/join
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'join.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'fopen-safer.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'linebuffer.c'
LOAD:0000000000000000 ; Source File : 'memcasecmp.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xmemcoll.c'
LOAD:0000000000000000 ; Source File : 'xstrtoul.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'memcoll.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 34D50h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 9E18h                ; Size in file image
LOAD:00000000000000D8                 dq 9E18h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0AAB0h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20AAB0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 5F0h                 ; Size in file image
LOAD:0000000000000110                 dq 890h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0AC18h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20AC18h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 89A8h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 89A8h                ; Physical address
LOAD:00000000000001B0                 dq 334h                 ; Size in file image
LOAD:00000000000001B8                 dq 334h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0AAB0h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20AAB0h              ; Physical address
LOAD:0000000000000220                 dq 550h                 ; Size in file image
LOAD:0000000000000228                 dq 550h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 9Ah, 6Dh, 49h, 0B1h, 0ABh, 32h, 0E7h, 0F3h, 76h, 0F4h ; Desc
LOAD:0000000000000284                 db 0E3h, 0Ah, 3Fh, 8, 0FEh, 6Bh, 40h, 62h, 0Ch, 13h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 3Dh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 3Dh, 3Eh, 44h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aCtypeToupperLo - offset byte_970, 12h, 0, 0, \ ; "__ctype_toupper_loc"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aUflow - offset byte_970, 12h, 0, 0, offset dword_0,\ ; "__uflow"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aFree - offset byte_970, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aAbort - offset byte_970, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aErrnoLocation - offset byte_970, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aStrncmp - offset byte_970, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aItmDeregistert - offset byte_970, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aExit - offset byte_970, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003A0                            0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFpending - offset byte_970, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFcntl - offset byte_970, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:00000000000003D0                            0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_970, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aFclose - offset byte_970, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aBindtextdomain - offset byte_970, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aDcgettext - offset byte_970, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_970, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStrlen - offset byte_970, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aStackChkFail - offset byte_970, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aGetoptLong - offset byte_970, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aMbrtowc - offset byte_970, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrchr - offset byte_970, 12h, 0, 0, \ ; "strchr"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aOverflow - offset byte_970, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aStrrchr - offset byte_970, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aLseek - offset byte_970, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000508                            0>
LOAD:0000000000000520                 Elf64_Sym <offset aAssertFail - offset byte_970, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aMemset - offset byte_970, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aFclose+1 - offset byte_970, 12h, 0, 0, \ ; "close"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aPosixFadvise - offset byte_970, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aMemchr - offset byte_970, 12h, 0, 0, \ ; "memchr"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aLibcStartMain - offset byte_970, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aMemcmp - offset byte_970, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aFputsUnlocked - offset byte_970, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aCalloc - offset byte_970, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aStrcmp - offset byte_970, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aGmonStart - offset byte_970, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aMemcpy - offset byte_970, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aFileno - offset byte_970, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aMalloc - offset byte_970, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aFflush - offset byte_970, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aNlLanginfo - offset byte_970, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aStrcoll - offset byte_970, 12h, 0, 0, \ ; "strcoll"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aStrpbrk - offset byte_970, 12h, 0, 0, \ ; "strpbrk"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aFreading - offset byte_970, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFwriteUnlocked - offset byte_970, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aRealloc - offset byte_970, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aFdopen - offset byte_970, 12h, 0, 0, \ ; "fdopen"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aSetlocale - offset byte_970, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aPrintfChk - offset byte_970, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aError - offset byte_970, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000760                            0>
LOAD:0000000000000778                 Elf64_Sym <offset aFseeko - offset byte_970, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aFopen - offset byte_970, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000790                            0>
LOAD:00000000000007A8                 Elf64_Sym <offset aStrtoul - offset byte_970, 12h, 0, 0, \ ; "strtoul"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aCxaAtexit - offset byte_970, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aExit+1 - offset byte_970, 12h, 0, 0, \ ; "exit"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aFwrite - offset byte_970, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aFprintfChk - offset byte_970, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aItmRegistertmc - offset byte_970, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aMbsinit - offset byte_970, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aIswprint - offset byte_970, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aCxaFinalize - offset byte_970, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aCtypeBLoc - offset byte_970, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aStdout - offset byte_970, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000898                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000008B0                 Elf64_Sym <offset aProgname - offset byte_970, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000008B0                            offset __bss_start, 8>
LOAD:00000000000008C8                 Elf64_Sym <offset aStdin - offset byte_970, 11h, 0, 19h, \ ; "stdin"
LOAD:00000000000008C8                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:00000000000008E0                 Elf64_Sym <offset aProgramInvocat - offset byte_970, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:00000000000008E0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000008F8                 Elf64_Sym <offset aPrognameFull - offset byte_970, 11h, 0, 19h, \ ; "__progname_full"
LOAD:00000000000008F8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000910                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_970, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000910                            offset __bss_start, 8>
LOAD:0000000000000928                 Elf64_Sym <offset aStderr - offset byte_970, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000928                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000940                 Elf64_Sym <offset aOptind - offset byte_970, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000940                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000958                 Elf64_Sym <offset aOptarg - offset byte_970, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000958                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000970 ; ELF String Table
LOAD:0000000000000970 byte_970        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000970                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000971 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000D18↓o
LOAD:000000000000097B aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000982 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000748↑o
LOAD:000000000000098F aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000999 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:00000000000009A1 aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000790↑o
LOAD:00000000000009A7 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000370↑o
LOAD:00000000000009AF aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000940↑o
LOAD:00000000000009B6 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:00000000000009BE aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000430↑o
LOAD:00000000000009C8 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000760↑o
LOAD:00000000000009CE aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000478↑o
LOAD:00000000000009DF aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000850↑o
LOAD:00000000000009E8 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000700↑o
LOAD:00000000000009F0 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000340↑o
LOAD:00000000000009F6 aStdin          db 'stdin',0            ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:00000000000009FC aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:00000000000009FC                                         ; LOAD:00000000000007D8↑o
LOAD:0000000000000A02 aMemchr         db 'memchr',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000A09 aStrpbrk        db 'strpbrk',0          ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000A11 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000A11                                         ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000A29 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A37 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000A37                                         ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000A4E aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000A5C aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000A63 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000A6A aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000A71 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000A82 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000A89 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000A97 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000A9E aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000AA4 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000AAB aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000AAB                                         ; LOAD:0000000000000550↑o
LOAD:0000000000000AB2 aStrtoul        db 'strtoul',0          ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000ABA aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000AC1 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000AC9 aUflow          db '__uflow',0          ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000AD1 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000ADD aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000AEB aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000AF2 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000AFD aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000B04 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000B10 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000B17 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000B1E aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000B29 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000B30 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000B30                                         ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000B4E aFdopen         db 'fdopen',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000B55 aCtypeToupperLo db '__ctype_toupper_loc',0
LOAD:0000000000000B55                                         ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000B69 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000B78 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000B7E aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000B7E                                         ; LOAD:00000000000003E8↑o
LOAD:0000000000000B8D aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000B9D aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000BA4 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000BA4                                         ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000BB6 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000BBD aStrcoll        db 'strcoll',0          ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000BC5 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000BD0 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000BDF aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000BE4 aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000BEF aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000BFF aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000C0C aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000D28↓o
LOAD:0000000000000C18 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000D38↓o
LOAD:0000000000000C23 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000D48↓o
LOAD:0000000000000C2D aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000D58↓o
LOAD:0000000000000C39 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000D68↓o
LOAD:0000000000000C43 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000C43                                         ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000C5F aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000C6E aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000C6E                                         ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000C88 ; ELF GNU Symbol Version Table
LOAD:0000000000000C88                 dw 0
LOAD:0000000000000C8A                 dw 2                    ; __ctype_toupper_loc@@GLIBC_2.3
LOAD:0000000000000C8C                 dw 3                    ; __uflow@@GLIBC_2.2.5
LOAD:0000000000000C8E                 dw 3                    ; free@@GLIBC_2.2.5
LOAD:0000000000000C90                 dw 3                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000C92                 dw 3                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000C94                 dw 3                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000C96                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000C98                 dw 3                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000C9A                 dw 3                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000C9C                 dw 3                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000C9E                 dw 3                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000CA0                 dw 3                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000CA2                 dw 3                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000CA4                 dw 3                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000CA6                 dw 3                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000CA8                 dw 3                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000CAA                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000CAC                 dw 3                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000CAE                 dw 3                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000CB0                 dw 3                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000CB2                 dw 3                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000CB4                 dw 3                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000CB6                 dw 3                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000CB8                 dw 3                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000CBA                 dw 3                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000CBC                 dw 3                    ; close@@GLIBC_2.2.5
LOAD:0000000000000CBE                 dw 3                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000CC0                 dw 3                    ; memchr@@GLIBC_2.2.5
LOAD:0000000000000CC2                 dw 3                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000CC4                 dw 3                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000CC6                 dw 3                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000CC8                 dw 3                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000CCA                 dw 3                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000CCC                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000CCE                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000CD0                 dw 3                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000CD2                 dw 3                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000CD4                 dw 3                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000CD6                 dw 3                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000CD8                 dw 3                    ; strcoll@@GLIBC_2.2.5
LOAD:0000000000000CDA                 dw 3                    ; strpbrk@@GLIBC_2.2.5
LOAD:0000000000000CDC                 dw 3                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000CDE                 dw 3                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000CE0                 dw 3                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000CE2                 dw 3                    ; fdopen@@GLIBC_2.2.5
LOAD:0000000000000CE4                 dw 3                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000CE6                 dw 6                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000CE8                 dw 3                    ; error@@GLIBC_2.2.5
LOAD:0000000000000CEA                 dw 3                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000CEC                 dw 3                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000CEE                 dw 3                    ; strtoul@@GLIBC_2.2.5
LOAD:0000000000000CF0                 dw 3                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000CF2                 dw 3                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000CF4                 dw 3                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000CF6                 dw 6                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000CF8                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000CFA                 dw 3                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000CFC                 dw 3                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000CFE                 dw 3                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000D00                 dw 2                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000D02                 dw 3                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000D04                 dw 3                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000D06                 dw 3                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000D08                 dw 3                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000D0A                 dw 3                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000D0C                 dw 3                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000D0E                 dw 3                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000D10                 dw 3                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000D12                 dw 3                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000D14                 dw 0
LOAD:0000000000000D16                 dw 0
LOAD:0000000000000D18 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000D18                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_970, 10h, 0> ; "libc.so.6"
LOAD:0000000000000D28                 Elf64_Vernaux <9691974h, 0, 6, offset aGlibc234 - offset byte_970, \ ; "GLIBC_2.3.4"
LOAD:0000000000000D28                                10h>
LOAD:0000000000000D38                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_970, \ ; "GLIBC_2.14"
LOAD:0000000000000D38                                10h>
LOAD:0000000000000D48                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_970, \ ; "GLIBC_2.4"
LOAD:0000000000000D48                                10h>
LOAD:0000000000000D58                 Elf64_Vernaux <9691A75h, 0, 3, offset aGlibc225 - offset byte_970, \ ; "GLIBC_2.2.5"
LOAD:0000000000000D58                                10h>
LOAD:0000000000000D68                 Elf64_Vernaux <0D696913h, 0, 2, offset aGlibc23 - offset byte_970, 0> ; "GLIBC_2.3"
LOAD:0000000000000D78 ; ELF RELA Relocation Table
LOAD:0000000000000D78                 Elf64_Rela <20AAB0h, 8, 2A30h> ; R_X86_64_RELATIVE +2A30h
LOAD:0000000000000D90                 Elf64_Rela <20AAB8h, 8, 29F0h> ; R_X86_64_RELATIVE +29F0h
LOAD:0000000000000DA8                 Elf64_Rela <20AAC0h, 8, 7F05h> ; R_X86_64_RELATIVE +7F05h
LOAD:0000000000000DC0                 Elf64_Rela <20AAE0h, 8, 7F13h> ; R_X86_64_RELATIVE +7F13h
LOAD:0000000000000DD8                 Elf64_Rela <20AB00h, 8, 7F11h> ; R_X86_64_RELATIVE +7F11h
LOAD:0000000000000DF0                 Elf64_Rela <20AB20h, 8, 7F1Fh> ; R_X86_64_RELATIVE +7F1Fh
LOAD:0000000000000E08                 Elf64_Rela <20AB40h, 8, 7F2Fh> ; R_X86_64_RELATIVE +7F2Fh
LOAD:0000000000000E20                 Elf64_Rela <20AB60h, 8, 7F36h> ; R_X86_64_RELATIVE +7F36h
LOAD:0000000000000E38                 Elf64_Rela <20AB80h, 8, 7F3Bh> ; R_X86_64_RELATIVE +7F3Bh
LOAD:0000000000000E50                 Elf64_Rela <20ABC0h, 8, 7FC1h> ; R_X86_64_RELATIVE +7FC1h
LOAD:0000000000000E68                 Elf64_Rela <20ABC8h, 8, 7FC9h> ; R_X86_64_RELATIVE +7FC9h
LOAD:0000000000000E80                 Elf64_Rela <20ABD0h, 8, 7FCFh> ; R_X86_64_RELATIVE +7FCFh
LOAD:0000000000000E98                 Elf64_Rela <20ABD8h, 8, 7FDCh> ; R_X86_64_RELATIVE +7FDCh
LOAD:0000000000000EB0                 Elf64_Rela <20ABE0h, 8, 7FE9h> ; R_X86_64_RELATIVE +7FE9h
LOAD:0000000000000EC8                 Elf64_Rela <20ABE8h, 8, 7FFDh> ; R_X86_64_RELATIVE +7FFDh
LOAD:0000000000000EE0                 Elf64_Rela <20ABF0h, 8, 7FFFh> ; R_X86_64_RELATIVE +7FFFh
LOAD:0000000000000EF8                 Elf64_Rela <20ABF8h, 8, 7FE2h> ; R_X86_64_RELATIVE +7FE2h
LOAD:0000000000000F10                 Elf64_Rela <20AC00h, 8, 7E66h> ; R_X86_64_RELATIVE +7E66h
LOAD:0000000000000F28                 Elf64_Rela <20AC08h, 8, 8007h> ; R_X86_64_RELATIVE +8007h
LOAD:0000000000000F40                 Elf64_Rela <20B008h, 8, 20B008h> ; R_X86_64_RELATIVE +20B008h
LOAD:0000000000000F58                 Elf64_Rela <20B028h, 8, 20B160h> ; R_X86_64_RELATIVE +20B160h
LOAD:0000000000000F70                 Elf64_Rela <20B030h, 8, 7F43h> ; R_X86_64_RELATIVE +7F43h
LOAD:0000000000000F88                 Elf64_Rela <20B080h, 8, 20B090h> ; R_X86_64_RELATIVE +20B090h
LOAD:0000000000000FA0                 Elf64_Rela <20B098h, 8, 20B200h> ; R_X86_64_RELATIVE +20B200h
LOAD:0000000000000FB8                 Elf64_Rela <20AFD8h, 700000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000FD0                 Elf64_Rela <20AFE0h, 1D00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000FE8                 Elf64_Rela <20AFE8h, 2200000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001000                 Elf64_Rela <20AFF0h, 3800000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001018                 Elf64_Rela <20AFF8h, 3B00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001030                 Elf64_Rela <20B0A0h, 3E00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001048                 Elf64_Rela <20B0A8h, 3D00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001060                 Elf64_Rela <20B0B0h, 3F00000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000001078                 Elf64_Rela <20B0B8h, 4400000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001090                 Elf64_Rela <20B0C0h, 4500000005h, 0> ; R_X86_64_COPY optarg
LOAD:00000000000010A8                 Elf64_Rela <20B0C8h, 4100000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:00000000000010C0                 Elf64_Rela <20B0E0h, 4300000005h, 0> ; R_X86_64_COPY stderr
LOAD:00000000000010D8 ; ELF JMPREL Relocation Table
LOAD:00000000000010D8                 Elf64_Rela <20AE20h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_toupper_loc
LOAD:00000000000010F0                 Elf64_Rela <20AE28h, 200000007h, 0> ; R_X86_64_JUMP_SLOT __uflow
LOAD:0000000000001108                 Elf64_Rela <20AE30h, 300000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001120                 Elf64_Rela <20AE38h, 400000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001138                 Elf64_Rela <20AE40h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001150                 Elf64_Rela <20AE48h, 600000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001168                 Elf64_Rela <20AE50h, 800000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001180                 Elf64_Rela <20AE58h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001198                 Elf64_Rela <20AE60h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:00000000000011B0                 Elf64_Rela <20AE68h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:00000000000011C8                 Elf64_Rela <20AE70h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:00000000000011E0                 Elf64_Rela <20AE78h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000011F8                 Elf64_Rela <20AE80h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001210                 Elf64_Rela <20AE88h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001228                 Elf64_Rela <20AE90h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001240                 Elf64_Rela <20AE98h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001258                 Elf64_Rela <20AEA0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001270                 Elf64_Rela <20AEA8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001288                 Elf64_Rela <20AEB0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:00000000000012A0                 Elf64_Rela <20AEB8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:00000000000012B8                 Elf64_Rela <20AEC0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:00000000000012D0                 Elf64_Rela <20AEC8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000012E8                 Elf64_Rela <20AED0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001300                 Elf64_Rela <20AED8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001318                 Elf64_Rela <20AEE0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001330                 Elf64_Rela <20AEE8h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:0000000000001348                 Elf64_Rela <20AEF0h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT memchr
LOAD:0000000000001360                 Elf64_Rela <20AEF8h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001378                 Elf64_Rela <20AF00h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001390                 Elf64_Rela <20AF08h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000013A8                 Elf64_Rela <20AF10h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:00000000000013C0                 Elf64_Rela <20AF18h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000013D8                 Elf64_Rela <20AF20h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000013F0                 Elf64_Rela <20AF28h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001408                 Elf64_Rela <20AF30h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001420                 Elf64_Rela <20AF38h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001438                 Elf64_Rela <20AF40h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT strcoll
LOAD:0000000000001450                 Elf64_Rela <20AF48h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT strpbrk
LOAD:0000000000001468                 Elf64_Rela <20AF50h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001480                 Elf64_Rela <20AF58h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:0000000000001498                 Elf64_Rela <20AF60h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000014B0                 Elf64_Rela <20AF68h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT fdopen
LOAD:00000000000014C8                 Elf64_Rela <20AF70h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000014E0                 Elf64_Rela <20AF78h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000014F8                 Elf64_Rela <20AF80h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001510                 Elf64_Rela <20AF88h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001528                 Elf64_Rela <20AF90h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000001540                 Elf64_Rela <20AF98h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT strtoul
LOAD:0000000000001558                 Elf64_Rela <20AFA0h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001570                 Elf64_Rela <20AFA8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001588                 Elf64_Rela <20AFB0h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000015A0                 Elf64_Rela <20AFB8h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000015B8                 Elf64_Rela <20AFC0h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000015D0                 Elf64_Rela <20AFC8h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000015E8                 Elf64_Rela <20AFD0h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000015E8 LOAD            ends
LOAD:00000000000015E8
.init:0000000000001600 ; ===========================================================================
.init:0000000000001600
.init:0000000000001600 ; Segment type: Pure code
.init:0000000000001600 ; Segment permissions: Read/Execute
.init:0000000000001600 _init           segment dword public 'CODE' use64
.init:0000000000001600                 assume cs:_init
.init:0000000000001600                 ;org 1600h
.init:0000000000001600                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001600
.init:0000000000001600 ; =============== S U B R O U T I N E =======================================
.init:0000000000001600
.init:0000000000001600
.init:0000000000001600                 public _init_proc
.init:0000000000001600 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001600                 sub     rsp, 8          ; _init
.init:0000000000001604                 mov     rax, cs:__gmon_start___ptr
.init:000000000000160B                 test    rax, rax
.init:000000000000160E                 jz      short loc_1612
.init:0000000000001610                 call    rax ; __gmon_start__
.init:0000000000001612
.init:0000000000001612 loc_1612:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001612                 add     rsp, 8
.init:0000000000001616                 retn
.init:0000000000001616 _init_proc      endp
.init:0000000000001616
.init:0000000000001616 _init           ends
.init:0000000000001616
LOAD:0000000000001617 ; ===========================================================================
LOAD:0000000000001617
LOAD:0000000000001617 ; Segment type: Pure code
LOAD:0000000000001617 ; Segment permissions: Read/Execute
LOAD:0000000000001617 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001617                 assume cs:LOAD
LOAD:0000000000001617                 ;org 1617h
LOAD:0000000000001617                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001617                 align 20h
LOAD:0000000000001617 LOAD            ends
LOAD:0000000000001617
.plt:0000000000001620 ; ===========================================================================
.plt:0000000000001620
.plt:0000000000001620 ; Segment type: Pure code
.plt:0000000000001620 ; Segment permissions: Read/Execute
.plt:0000000000001620 _plt            segment para public 'CODE' use64
.plt:0000000000001620                 assume cs:_plt
.plt:0000000000001620                 ;org 1620h
.plt:0000000000001620                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620
.plt:0000000000001620 sub_1620        proc near               ; CODE XREF: .plt:000000000000163B↓j
.plt:0000000000001620                                         ; .plt:000000000000164B↓j ...
.plt:0000000000001620 ; __unwind {
.plt:0000000000001620                 push    cs:qword_20AE10
.plt:0000000000001626                 jmp     cs:qword_20AE18
.plt:0000000000001626 sub_1620        endp
.plt:0000000000001626
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:000000000000162C                 align 10h
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; const __int32_t **__ctype_toupper_loc(void)
.plt:0000000000001630 ___ctype_toupper_loc proc near          ; CODE XREF: memcasecmp+12↓p
.plt:0000000000001630                 jmp     cs:__ctype_toupper_loc_ptr
.plt:0000000000001630 ___ctype_toupper_loc endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    0
.plt:000000000000163B                 jmp     sub_1620
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; int __uflow(_IO_FILE *)
.plt:0000000000001640 ___uflow        proc near               ; CODE XREF: readlinebuffer_delim+BB↓p
.plt:0000000000001640                 jmp     cs:__uflow_ptr
.plt:0000000000001640 ___uflow        endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    1
.plt:000000000000164B                 jmp     sub_1620
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; void free(void *ptr)
.plt:0000000000001650 _free           proc near               ; CODE XREF: main:loc_20A3↓p
.plt:0000000000001650                                         ; freeline_part_2+8↓p ...
.plt:0000000000001650                 jmp     cs:free_ptr
.plt:0000000000001650 _free           endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    2
.plt:000000000000165B                 jmp     sub_1620
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: noreturn thunk
.plt:0000000000001660
.plt:0000000000001660 ; void __noreturn abort(void)
.plt:0000000000001660 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001660                                         ; quotearg_buffer_restyled:def_4261↓p ...
.plt:0000000000001660                 jmp     cs:abort_ptr
.plt:0000000000001660 _abort          endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    3
.plt:000000000000166B                 jmp     sub_1620
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; int *__errno_location(void)
.plt:0000000000001670 ___errno_location proc near             ; CODE XREF: main+DDD↓p
.plt:0000000000001670                                         ; main+E10↓p ...
.plt:0000000000001670                 jmp     cs:__errno_location_ptr
.plt:0000000000001670 ___errno_location endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    4
.plt:000000000000167B                 jmp     sub_1620
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001680 _strncmp        proc near               ; CODE XREF: usage+2DC↓p
.plt:0000000000001680                                         ; usage+39D↓p
.plt:0000000000001680                 jmp     cs:strncmp_ptr
.plt:0000000000001680 _strncmp        endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    5
.plt:000000000000168B                 jmp     sub_1620
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: noreturn thunk
.plt:0000000000001690
.plt:0000000000001690 ; void __noreturn _exit(int status)
.plt:0000000000001690 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001690                 jmp     cs:_exit_ptr
.plt:0000000000001690 __exit          endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    6
.plt:000000000000169B                 jmp     sub_1620
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; size_t __fpending(FILE *fp)
.plt:00000000000016A0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000016A0                 jmp     cs:__fpending_ptr
.plt:00000000000016A0 ___fpending     endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    7
.plt:00000000000016AB                 jmp     sub_1620
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; int fcntl(int fd, int cmd, ...)
.plt:00000000000016B0 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:00000000000016B0                                         ; rpl_fcntl+D4↓p ...
.plt:00000000000016B0                 jmp     cs:fcntl_ptr
.plt:00000000000016B0 _fcntl          endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    8
.plt:00000000000016BB                 jmp     sub_1620
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; char *textdomain(const char *domainname)
.plt:00000000000016C0 _textdomain     proc near               ; CODE XREF: main+7E↓p
.plt:00000000000016C0                 jmp     cs:textdomain_ptr
.plt:00000000000016C0 _textdomain     endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    9
.plt:00000000000016CB                 jmp     sub_1620
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; int fclose(FILE *stream)
.plt:00000000000016D0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000016D0                                         ; rpl_fclose+6B↓j
.plt:00000000000016D0                 jmp     cs:fclose_ptr
.plt:00000000000016D0 _fclose         endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    0Ah
.plt:00000000000016DB                 jmp     sub_1620
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000016E0 _bindtextdomain proc near               ; CODE XREF: main+72↓p
.plt:00000000000016E0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000016E0 _bindtextdomain endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    0Bh
.plt:00000000000016EB                 jmp     sub_1620
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000016F0 _dcgettext      proc near               ; CODE XREF: main+D66↓p
.plt:00000000000016F0                                         ; main+D8D↓p ...
.plt:00000000000016F0                 jmp     cs:dcgettext_ptr
.plt:00000000000016F0 _dcgettext      endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    0Ch
.plt:00000000000016FB                 jmp     sub_1620
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001700 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001700                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001700 ___ctype_get_mb_cur_max endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    0Dh
.plt:000000000000170B                 jmp     sub_1620
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; size_t strlen(const char *s)
.plt:0000000000001710 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001710                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001710                 jmp     cs:strlen_ptr
.plt:0000000000001710 _strlen         endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    0Eh
.plt:000000000000171B                 jmp     sub_1620
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: noreturn thunk
.plt:0000000000001720
.plt:0000000000001720 ___stack_chk_fail proc near             ; CODE XREF: main:loc_2809↓p
.plt:0000000000001720                                         ; string_to_join_field:loc_2B2B↓p ...
.plt:0000000000001720                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001720 ___stack_chk_fail endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    0Fh
.plt:000000000000172B                 jmp     sub_1620
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001730 _getopt_long    proc near               ; CODE XREF: main+14A↓p
.plt:0000000000001730                 jmp     cs:getopt_long_ptr
.plt:0000000000001730 _getopt_long    endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    10h
.plt:000000000000173B                 jmp     sub_1620
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001740 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001740                 jmp     cs:mbrtowc_ptr
.plt:0000000000001740 _mbrtowc        endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    11h
.plt:000000000000174B                 jmp     sub_1620
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ; char *strchr(const char *s, int c)
.plt:0000000000001750 _strchr         proc near               ; CODE XREF: xstrtoul+123↓p
.plt:0000000000001750                                         ; xstrtoul+143↓p ...
.plt:0000000000001750                 jmp     cs:strchr_ptr
.plt:0000000000001750 _strchr         endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    12h
.plt:000000000000175B                 jmp     sub_1620
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001760 ___overflow     proc near               ; CODE XREF: prfields+FB↓p
.plt:0000000000001760                                         ; prfields+10B↓p ...
.plt:0000000000001760                 jmp     cs:__overflow_ptr
.plt:0000000000001760 ___overflow     endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    13h
.plt:000000000000176B                 jmp     sub_1620
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: thunk
.plt:0000000000001770
.plt:0000000000001770 ; char *strrchr(const char *s, int c)
.plt:0000000000001770 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001770                 jmp     cs:strrchr_ptr
.plt:0000000000001770 _strrchr        endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    14h
.plt:000000000000177B                 jmp     sub_1620
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: thunk
.plt:0000000000001780
.plt:0000000000001780 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001780 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001780                                         ; rpl_fseeko+3B↓p
.plt:0000000000001780                 jmp     cs:lseek_ptr
.plt:0000000000001780 _lseek          endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    15h
.plt:000000000000178B                 jmp     sub_1620
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: noreturn thunk
.plt:0000000000001790
.plt:0000000000001790 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001790 ___assert_fail  proc near               ; CODE XREF: xstrtoul+39F↓p
.plt:0000000000001790                 jmp     cs:__assert_fail_ptr
.plt:0000000000001790 ___assert_fail  endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    16h
.plt:000000000000179B                 jmp     sub_1620
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000017A0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000017A0                                         ; xzalloc+12↓j
.plt:00000000000017A0                 jmp     cs:memset_ptr
.plt:00000000000017A0 _memset         endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    17h
.plt:00000000000017AB                 jmp     sub_1620
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Attributes: thunk
.plt:00000000000017B0
.plt:00000000000017B0 ; int close(int fd)
.plt:00000000000017B0 _close          proc near               ; CODE XREF: fopen_safer+6A↓p
.plt:00000000000017B0                                         ; rpl_fcntl+1FE↓p
.plt:00000000000017B0                 jmp     cs:close_ptr
.plt:00000000000017B0 _close          endp
.plt:00000000000017B0
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017B6                 push    18h
.plt:00000000000017BB                 jmp     sub_1620
.plt:00000000000017C0
.plt:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017C0
.plt:00000000000017C0 ; Attributes: thunk
.plt:00000000000017C0
.plt:00000000000017C0 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:00000000000017C0 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:00000000000017C0                                         ; fadvise+16↓j
.plt:00000000000017C0                 jmp     cs:posix_fadvise_ptr
.plt:00000000000017C0 _posix_fadvise  endp
.plt:00000000000017C0
.plt:00000000000017C6 ; ---------------------------------------------------------------------------
.plt:00000000000017C6                 push    19h
.plt:00000000000017CB                 jmp     sub_1620
.plt:00000000000017D0
.plt:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017D0
.plt:00000000000017D0 ; Attributes: thunk
.plt:00000000000017D0
.plt:00000000000017D0 ; void *memchr(const void *s, int c, size_t n)
.plt:00000000000017D0 _memchr         proc near               ; CODE XREF: get_line+2BF↓p
.plt:00000000000017D0                 jmp     cs:memchr_ptr
.plt:00000000000017D0 _memchr         endp
.plt:00000000000017D0
.plt:00000000000017D6 ; ---------------------------------------------------------------------------
.plt:00000000000017D6                 push    1Ah
.plt:00000000000017DB                 jmp     sub_1620
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Attributes: thunk
.plt:00000000000017E0
.plt:00000000000017E0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000017E0 _memcmp         proc near               ; CODE XREF: keycmp_isra_4+62↓p
.plt:00000000000017E0                                         ; quotearg_buffer_restyled+19A↓p ...
.plt:00000000000017E0                 jmp     cs:memcmp_ptr
.plt:00000000000017E0 _memcmp         endp
.plt:00000000000017E0
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017E6                 push    1Bh
.plt:00000000000017EB                 jmp     sub_1620
.plt:00000000000017F0
.plt:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017F0
.plt:00000000000017F0 ; Attributes: thunk
.plt:00000000000017F0
.plt:00000000000017F0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000017F0 _fputs_unlocked proc near               ; CODE XREF: prfield_isra_5+43↓j
.plt:00000000000017F0                                         ; usage+9D↓p ...
.plt:00000000000017F0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000017F0 _fputs_unlocked endp
.plt:00000000000017F0
.plt:00000000000017F6 ; ---------------------------------------------------------------------------
.plt:00000000000017F6                 push    1Ch
.plt:00000000000017FB                 jmp     sub_1620
.plt:0000000000001800
.plt:0000000000001800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001800
.plt:0000000000001800 ; Attributes: thunk
.plt:0000000000001800
.plt:0000000000001800 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001800 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001800                 jmp     cs:calloc_ptr
.plt:0000000000001800 _calloc         endp
.plt:0000000000001800
.plt:0000000000001806 ; ---------------------------------------------------------------------------
.plt:0000000000001806                 push    1Dh
.plt:000000000000180B                 jmp     sub_1620
.plt:0000000000001810
.plt:0000000000001810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001810
.plt:0000000000001810 ; Attributes: thunk
.plt:0000000000001810
.plt:0000000000001810 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001810 _strcmp         proc near               ; CODE XREF: main+37E↓p
.plt:0000000000001810                                         ; main+483↓p ...
.plt:0000000000001810                 jmp     cs:strcmp_ptr
.plt:0000000000001810 _strcmp         endp
.plt:0000000000001810
.plt:0000000000001816 ; ---------------------------------------------------------------------------
.plt:0000000000001816                 push    1Eh
.plt:000000000000181B                 jmp     sub_1620
.plt:0000000000001820
.plt:0000000000001820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001820
.plt:0000000000001820 ; Attributes: thunk
.plt:0000000000001820
.plt:0000000000001820 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001820 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001820                 jmp     cs:memcpy_ptr
.plt:0000000000001820 _memcpy         endp
.plt:0000000000001820
.plt:0000000000001826 ; ---------------------------------------------------------------------------
.plt:0000000000001826                 push    1Fh
.plt:000000000000182B                 jmp     sub_1620
.plt:0000000000001830
.plt:0000000000001830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001830
.plt:0000000000001830 ; Attributes: thunk
.plt:0000000000001830
.plt:0000000000001830 ; int fileno(FILE *stream)
.plt:0000000000001830 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:0000000000001830                                         ; fopen_safer+17↓p ...
.plt:0000000000001830                 jmp     cs:fileno_ptr
.plt:0000000000001830 _fileno         endp
.plt:0000000000001830
.plt:0000000000001836 ; ---------------------------------------------------------------------------
.plt:0000000000001836                 push    20h ; ' '
.plt:000000000000183B                 jmp     sub_1620
.plt:0000000000001840
.plt:0000000000001840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001840
.plt:0000000000001840 ; Attributes: thunk
.plt:0000000000001840
.plt:0000000000001840 ; void *malloc(size_t size)
.plt:0000000000001840 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001840                 jmp     cs:malloc_ptr
.plt:0000000000001840 _malloc         endp
.plt:0000000000001840
.plt:0000000000001846 ; ---------------------------------------------------------------------------
.plt:0000000000001846                 push    21h ; '!'
.plt:000000000000184B                 jmp     sub_1620
.plt:0000000000001850
.plt:0000000000001850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001850
.plt:0000000000001850 ; Attributes: thunk
.plt:0000000000001850
.plt:0000000000001850 ; int fflush(FILE *stream)
.plt:0000000000001850 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001850                                         ; rpl_fflush+3B↓j
.plt:0000000000001850                 jmp     cs:fflush_ptr
.plt:0000000000001850 _fflush         endp
.plt:0000000000001850
.plt:0000000000001856 ; ---------------------------------------------------------------------------
.plt:0000000000001856                 push    22h ; '"'
.plt:000000000000185B                 jmp     sub_1620
.plt:0000000000001860
.plt:0000000000001860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001860
.plt:0000000000001860 ; Attributes: thunk
.plt:0000000000001860
.plt:0000000000001860 ; char *nl_langinfo(nl_item item)
.plt:0000000000001860 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001860                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001860 _nl_langinfo    endp
.plt:0000000000001860
.plt:0000000000001866 ; ---------------------------------------------------------------------------
.plt:0000000000001866                 push    23h ; '#'
.plt:000000000000186B                 jmp     sub_1620
.plt:0000000000001870
.plt:0000000000001870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001870
.plt:0000000000001870 ; Attributes: thunk
.plt:0000000000001870
.plt:0000000000001870 ; int strcoll(const char *s1, const char *s2)
.plt:0000000000001870 _strcoll        proc near               ; CODE XREF: strcoll_loop+60↓p
.plt:0000000000001870                 jmp     cs:strcoll_ptr
.plt:0000000000001870 _strcoll        endp
.plt:0000000000001870
.plt:0000000000001876 ; ---------------------------------------------------------------------------
.plt:0000000000001876                 push    24h ; '$'
.plt:000000000000187B                 jmp     sub_1620
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880 ; Attributes: thunk
.plt:0000000000001880
.plt:0000000000001880 ; char *strpbrk(const char *s, const char *accept)
.plt:0000000000001880 _strpbrk        proc near               ; CODE XREF: add_field_list+76↓p
.plt:0000000000001880                 jmp     cs:strpbrk_ptr
.plt:0000000000001880 _strpbrk        endp
.plt:0000000000001880
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:0000000000001886                 push    25h ; '%'
.plt:000000000000188B                 jmp     sub_1620
.plt:0000000000001890
.plt:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001890
.plt:0000000000001890 ; Attributes: thunk
.plt:0000000000001890
.plt:0000000000001890 ; int __freading(FILE *fp)
.plt:0000000000001890 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001890                                         ; rpl_fflush+9↓p
.plt:0000000000001890                 jmp     cs:__freading_ptr
.plt:0000000000001890 ___freading     endp
.plt:0000000000001890
.plt:0000000000001896 ; ---------------------------------------------------------------------------
.plt:0000000000001896                 push    26h ; '&'
.plt:000000000000189B                 jmp     sub_1620
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Attributes: thunk
.plt:00000000000018A0
.plt:00000000000018A0 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:00000000000018A0 _fwrite_unlocked proc near              ; CODE XREF: prfield_isra_5+24↓j
.plt:00000000000018A0                 jmp     cs:fwrite_unlocked_ptr
.plt:00000000000018A0 _fwrite_unlocked endp
.plt:00000000000018A0
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018A6                 push    27h ; '''
.plt:00000000000018AB                 jmp     sub_1620
.plt:00000000000018B0
.plt:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018B0
.plt:00000000000018B0 ; Attributes: thunk
.plt:00000000000018B0
.plt:00000000000018B0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000018B0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000018B0                 jmp     cs:realloc_ptr
.plt:00000000000018B0 _realloc        endp
.plt:00000000000018B0
.plt:00000000000018B6 ; ---------------------------------------------------------------------------
.plt:00000000000018B6                 push    28h ; '('
.plt:00000000000018BB                 jmp     sub_1620
.plt:00000000000018C0
.plt:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018C0
.plt:00000000000018C0 ; Attributes: thunk
.plt:00000000000018C0
.plt:00000000000018C0 ; FILE *fdopen(int fd, const char *modes)
.plt:00000000000018C0 _fdopen         proc near               ; CODE XREF: fopen_safer+50↓p
.plt:00000000000018C0                 jmp     cs:fdopen_ptr
.plt:00000000000018C0 _fdopen         endp
.plt:00000000000018C0
.plt:00000000000018C6 ; ---------------------------------------------------------------------------
.plt:00000000000018C6                 push    29h ; ')'
.plt:00000000000018CB                 jmp     sub_1620
.plt:00000000000018D0
.plt:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018D0
.plt:00000000000018D0 ; Attributes: thunk
.plt:00000000000018D0
.plt:00000000000018D0 ; char *setlocale(int category, const char *locale)
.plt:00000000000018D0 _setlocale      proc near               ; CODE XREF: main+5F↓p
.plt:00000000000018D0                                         ; usage+2C3↓p ...
.plt:00000000000018D0                 jmp     cs:setlocale_ptr
.plt:00000000000018D0 _setlocale      endp
.plt:00000000000018D0
.plt:00000000000018D6 ; ---------------------------------------------------------------------------
.plt:00000000000018D6                 push    2Ah ; '*'
.plt:00000000000018DB                 jmp     sub_1620
.plt:00000000000018E0
.plt:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018E0
.plt:00000000000018E0 ; Attributes: thunk
.plt:00000000000018E0
.plt:00000000000018E0 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:00000000000018E0                                         ; usage+2B7↓p ...
.plt:00000000000018E0                 jmp     cs:__printf_chk_ptr
.plt:00000000000018E0 ___printf_chk   endp
.plt:00000000000018E0
.plt:00000000000018E6 ; ---------------------------------------------------------------------------
.plt:00000000000018E6                 push    2Bh ; '+'
.plt:00000000000018EB                 jmp     sub_1620
.plt:00000000000018F0
.plt:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018F0
.plt:00000000000018F0 ; Attributes: thunk
.plt:00000000000018F0
.plt:00000000000018F0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000018F0 _error          proc near               ; CODE XREF: main+D7A↓p
.plt:00000000000018F0                                         ; main+D9E↓p ...
.plt:00000000000018F0                 jmp     cs:error_ptr
.plt:00000000000018F0 _error          endp
.plt:00000000000018F0
.plt:00000000000018F6 ; ---------------------------------------------------------------------------
.plt:00000000000018F6                 push    2Ch ; ','
.plt:00000000000018FB                 jmp     sub_1620
.plt:0000000000001900
.plt:0000000000001900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001900
.plt:0000000000001900 ; Attributes: thunk
.plt:0000000000001900
.plt:0000000000001900 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001900 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_6EFA↓j
.plt:0000000000001900                 jmp     cs:fseeko_ptr
.plt:0000000000001900 _fseeko         endp
.plt:0000000000001900
.plt:0000000000001906 ; ---------------------------------------------------------------------------
.plt:0000000000001906                 push    2Dh ; '-'
.plt:000000000000190B                 jmp     sub_1620
.plt:0000000000001910
.plt:0000000000001910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001910
.plt:0000000000001910 ; Attributes: thunk
.plt:0000000000001910
.plt:0000000000001910 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000001910 _fopen          proc near               ; CODE XREF: fopen_safer+7↓p
.plt:0000000000001910                 jmp     cs:fopen_ptr
.plt:0000000000001910 _fopen          endp
.plt:0000000000001910
.plt:0000000000001916 ; ---------------------------------------------------------------------------
.plt:0000000000001916                 push    2Eh ; '.'
.plt:000000000000191B                 jmp     sub_1620
.plt:0000000000001920
.plt:0000000000001920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001920
.plt:0000000000001920 ; Attributes: thunk
.plt:0000000000001920
.plt:0000000000001920 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
.plt:0000000000001920 _strtoul        proc near               ; CODE XREF: xstrtoul+8C↓p
.plt:0000000000001920                 jmp     cs:strtoul_ptr
.plt:0000000000001920 _strtoul        endp
.plt:0000000000001920
.plt:0000000000001926 ; ---------------------------------------------------------------------------
.plt:0000000000001926                 push    2Fh ; '/'
.plt:000000000000192B                 jmp     sub_1620
.plt:0000000000001930
.plt:0000000000001930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001930
.plt:0000000000001930 ; Attributes: thunk
.plt:0000000000001930
.plt:0000000000001930 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001930 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001930                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001930 ___cxa_atexit   endp
.plt:0000000000001930
.plt:0000000000001936 ; ---------------------------------------------------------------------------
.plt:0000000000001936                 push    30h ; '0'
.plt:000000000000193B                 jmp     sub_1620
.plt:0000000000001940
.plt:0000000000001940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001940
.plt:0000000000001940 ; Attributes: noreturn thunk
.plt:0000000000001940
.plt:0000000000001940 ; void __noreturn exit(int status)
.plt:0000000000001940 _exit           proc near               ; CODE XREF: main+28E↓p
.plt:0000000000001940                                         ; usage+58↓p
.plt:0000000000001940                 jmp     cs:exit_ptr
.plt:0000000000001940 _exit           endp
.plt:0000000000001940
.plt:0000000000001946 ; ---------------------------------------------------------------------------
.plt:0000000000001946                 push    31h ; '1'
.plt:000000000000194B                 jmp     sub_1620
.plt:0000000000001950
.plt:0000000000001950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001950
.plt:0000000000001950 ; Attributes: thunk
.plt:0000000000001950
.plt:0000000000001950 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001950 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001950                 jmp     cs:fwrite_ptr
.plt:0000000000001950 _fwrite         endp
.plt:0000000000001950
.plt:0000000000001956 ; ---------------------------------------------------------------------------
.plt:0000000000001956                 push    32h ; '2'
.plt:000000000000195B                 jmp     sub_1620
.plt:0000000000001960
.plt:0000000000001960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001960
.plt:0000000000001960 ; Attributes: thunk
.plt:0000000000001960
.plt:0000000000001960 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001960                                         ; version_etc_arn+37↓p ...
.plt:0000000000001960                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001960 ___fprintf_chk  endp
.plt:0000000000001960
.plt:0000000000001966 ; ---------------------------------------------------------------------------
.plt:0000000000001966                 push    33h ; '3'
.plt:000000000000196B                 jmp     sub_1620
.plt:0000000000001970
.plt:0000000000001970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001970
.plt:0000000000001970 ; Attributes: thunk
.plt:0000000000001970
.plt:0000000000001970 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001970 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001970                 jmp     cs:mbsinit_ptr
.plt:0000000000001970 _mbsinit        endp
.plt:0000000000001970
.plt:0000000000001976 ; ---------------------------------------------------------------------------
.plt:0000000000001976                 push    34h ; '4'
.plt:000000000000197B                 jmp     sub_1620
.plt:0000000000001980
.plt:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001980
.plt:0000000000001980 ; Attributes: thunk
.plt:0000000000001980
.plt:0000000000001980 ; int iswprint(wint_t wc)
.plt:0000000000001980 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001980                 jmp     cs:iswprint_ptr
.plt:0000000000001980 _iswprint       endp
.plt:0000000000001980
.plt:0000000000001986 ; ---------------------------------------------------------------------------
.plt:0000000000001986                 push    35h ; '5'
.plt:000000000000198B                 jmp     sub_1620
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990 ; Attributes: thunk
.plt:0000000000001990
.plt:0000000000001990 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001990 ___ctype_b_loc  proc near               ; CODE XREF: get_line+9E↓p
.plt:0000000000001990                                         ; quotearg_buffer_restyled+513↓p ...
.plt:0000000000001990                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001990 ___ctype_b_loc  endp
.plt:0000000000001990
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:0000000000001996                 push    36h ; '6'
.plt:000000000000199B                 jmp     sub_1620
.plt:000000000000199B ; } // starts at 1620
.plt:000000000000199B _plt            ends
.plt:000000000000199B
.plt.got:00000000000019A0 ; ===========================================================================
.plt.got:00000000000019A0
.plt.got:00000000000019A0 ; Segment type: Pure code
.plt.got:00000000000019A0 ; Segment permissions: Read/Execute
.plt.got:00000000000019A0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000019A0                 assume cs:_plt_got
.plt.got:00000000000019A0                 ;org 19A0h
.plt.got:00000000000019A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000019A0
.plt.got:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000019A0
.plt.got:00000000000019A0 ; Attributes: thunk
.plt.got:00000000000019A0
.plt.got:00000000000019A0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000019A0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000019A0 ; __unwind {
.plt.got:00000000000019A0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000019A0 __cxa_finalize  endp
.plt.got:00000000000019A0
.plt.got:00000000000019A0 ; ---------------------------------------------------------------------------
.plt.got:00000000000019A6                 align 8
.plt.got:00000000000019A6 ; } // starts at 19A0
.plt.got:00000000000019A6 _plt_got        ends
.plt.got:00000000000019A6
LOAD:00000000000019A8 ; ===========================================================================
LOAD:00000000000019A8
LOAD:00000000000019A8 ; Segment type: Pure code
LOAD:00000000000019A8 ; Segment permissions: Read/Execute
LOAD:00000000000019A8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000019A8                 assume cs:LOAD
LOAD:00000000000019A8                 ;org 19A8h
LOAD:00000000000019A8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000019A8                 align 10h
LOAD:00000000000019A8 LOAD            ends
LOAD:00000000000019A8
.text:00000000000019B0 ; ===========================================================================
.text:00000000000019B0
.text:00000000000019B0 ; Segment type: Pure code
.text:00000000000019B0 ; Segment permissions: Read/Execute
.text:00000000000019B0 _text           segment para public 'CODE' use64
.text:00000000000019B0                 assume cs:_text
.text:00000000000019B0                 ;org 19B0h
.text:00000000000019B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000019B0
.text:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000019B0
.text:00000000000019B0
.text:00000000000019B0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000019B0                 public main
.text:00000000000019B0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000019B0
.text:00000000000019B0 var_C0          = qword ptr -0C0h
.text:00000000000019B0 var_B8          = qword ptr -0B8h
.text:00000000000019B0 var_A9          = byte ptr -0A9h
.text:00000000000019B0 var_9C          = dword ptr -9Ch
.text:00000000000019B0 var_98          = dword ptr -98h
.text:00000000000019B0 var_94          = dword ptr -94h
.text:00000000000019B0 ptr             = qword ptr -90h
.text:00000000000019B0 var_88          = qword ptr -88h
.text:00000000000019B0 var_80          = qword ptr -80h
.text:00000000000019B0 var_78          = qword ptr -78h
.text:00000000000019B0 var_68          = qword ptr -68h
.text:00000000000019B0 var_60          = qword ptr -60h
.text:00000000000019B0 var_58          = qword ptr -58h
.text:00000000000019B0 var_50          = byte ptr -50h
.text:00000000000019B0 var_48          = qword ptr -48h
.text:00000000000019B0 var_40          = qword ptr -40h
.text:00000000000019B0
.text:00000000000019B0 ; __unwind {
.text:00000000000019B0                 push    r15
.text:00000000000019B2                 push    r14
.text:00000000000019B4                 push    r13
.text:00000000000019B6                 push    r12
.text:00000000000019B8                 push    rbp
.text:00000000000019B9                 push    rbx
.text:00000000000019BA                 movsxd  rbp, edi
.text:00000000000019BD                 mov     rbx, rsi
.text:00000000000019C0                 sub     rsp, 98h
.text:00000000000019C7                 mov     rdi, [rsi]
.text:00000000000019CA                 mov     rax, fs:28h
.text:00000000000019D3                 mov     [rsp+0C8h+var_40], rax
.text:00000000000019DB                 xor     eax, eax
.text:00000000000019DD                 mov     [rsp+0C8h+var_98], 0
.text:00000000000019E5                 mov     [rsp+0C8h+var_48], 0
.text:00000000000019F1                 lea     r15, [rsp+0C8h+var_68]
.text:00000000000019F6                 mov     [rsp+0C8h+var_94], 0
.text:00000000000019FE                 call    set_program_name
.text:0000000000001A03                 lea     rsi, accept+3   ; locale
.text:0000000000001A0A                 mov     edi, 6          ; category
.text:0000000000001A0F                 call    _setlocale
.text:0000000000001A14                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001A1B                 lea     rdi, domainname ; "coreutils"
.text:0000000000001A22                 call    _bindtextdomain
.text:0000000000001A27                 lea     rdi, domainname ; "coreutils"
.text:0000000000001A2E                 call    _textdomain
.text:0000000000001A33                 mov     edi, 3
.text:0000000000001A38                 call    hard_locale
.text:0000000000001A3D                 lea     rdi, close_stdout
.text:0000000000001A44                 mov     cs:hard_LC_COLLATE, al
.text:0000000000001A4A                 call    atexit
.text:0000000000001A4F                 lea     rdi, _ZN10idAASBuild12ShutdownHashEv
.text:0000000000001A56                 call    atexit
.text:0000000000001A5B                 lea     rax, [rsp+0C8h+var_9C]
.text:0000000000001A60                 mov     cs:print_pairables, 1
.text:0000000000001A67                 mov     cs:seen_unpairable, 0
.text:0000000000001A6E                 mov     cs:byte_20B199, 0
.text:0000000000001A75                 mov     cs:issued_disorder_warning, 0
.text:0000000000001A7C                 mov     [rsp+0C8h+var_C0], rax
.text:0000000000001A81                 lea     rax, [rsp+0C8h+var_98]
.text:0000000000001A86                 mov     cs:check_input_order, 0
.text:0000000000001A90                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000001A95                 jmp     short loc_1AE4
.text:0000000000001A95 ; ---------------------------------------------------------------------------
.text:0000000000001A97                 align 20h
.text:0000000000001AA0
.text:0000000000001AA0 loc_1AA0:                               ; CODE XREF: main+169↓j
.text:0000000000001AA0                 cmp     eax, 76h ; 'v'
.text:0000000000001AA3                 jz      loc_1C48
.text:0000000000001AA9                 jle     loc_1B78
.text:0000000000001AAF                 cmp     eax, 80h
.text:0000000000001AB4                 jz      loc_1D70
.text:0000000000001ABA                 jle     loc_1D50
.text:0000000000001AC0                 cmp     eax, 81h
.text:0000000000001AC5                 jz      loc_1E00
.text:0000000000001ACB                 cmp     eax, 82h
.text:0000000000001AD0                 jnz     short loc_1B41
.text:0000000000001AD2                 mov     cs:join_header_lines, 1
.text:0000000000001AD9                 xor     eax, eax
.text:0000000000001ADB                 nop     dword ptr [rax+rax+00h]
.text:0000000000001AE0
.text:0000000000001AE0 loc_1AE0:                               ; CODE XREF: main+1BF↓j
.text:0000000000001AE0                                         ; main+23B↓j ...
.text:0000000000001AE0                 mov     [rsp+0C8h+var_98], eax
.text:0000000000001AE4
.text:0000000000001AE4 loc_1AE4:                               ; CODE XREF: main+E5↑j
.text:0000000000001AE4                 lea     rcx, longopts   ; longopts
.text:0000000000001AEB                 lea     rdx, shortopts  ; "-a:e:i1:2:j:o:t:v:z"
.text:0000000000001AF2                 xor     r8d, r8d        ; longind
.text:0000000000001AF5                 mov     rsi, rbx        ; argv
.text:0000000000001AF8                 mov     edi, ebp        ; argc
.text:0000000000001AFA                 call    _getopt_long
.text:0000000000001AFF                 cmp     eax, 0FFFFFFFFh
.text:0000000000001B02                 jz      loc_1E61
.text:0000000000001B08                 cmp     eax, 69h ; 'i'
.text:0000000000001B0B                 mov     [rsp+0C8h+var_9C], 0
.text:0000000000001B13                 jz      loc_1DE8
.text:0000000000001B19                 jg      short loc_1AA0
.text:0000000000001B1B                 cmp     eax, 31h ; '1'
.text:0000000000001B1E                 jz      loc_1DC0
.text:0000000000001B24                 jle     loc_1BF0
.text:0000000000001B2A                 cmp     eax, 61h ; 'a'
.text:0000000000001B2D                 jz      loc_1C4F
.text:0000000000001B33                 cmp     eax, 65h ; 'e'
.text:0000000000001B36                 jz      loc_1D18
.text:0000000000001B3C                 cmp     eax, 32h ; '2'
.text:0000000000001B3F                 jz      short loc_1B50
.text:0000000000001B41
.text:0000000000001B41 loc_1B41:                               ; CODE XREF: main+120↑j
.text:0000000000001B41                                         ; main+1DD↓j ...
.text:0000000000001B41                 mov     edi, 1          ; status
.text:0000000000001B46                 call    usage
.text:0000000000001B46 ; ---------------------------------------------------------------------------
.text:0000000000001B4B                 align 10h
.text:0000000000001B50
.text:0000000000001B50 loc_1B50:                               ; CODE XREF: main+18F↑j
.text:0000000000001B50                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001B57                 call    string_to_join_field
.text:0000000000001B5C                 lea     rdi, join_field_2
.text:0000000000001B63                 mov     rsi, rax
.text:0000000000001B66                 call    set_join_field
.text:0000000000001B6B                 mov     eax, [rsp+0C8h+var_9C]
.text:0000000000001B6F                 jmp     loc_1AE0
.text:0000000000001B6F ; ---------------------------------------------------------------------------
.text:0000000000001B74                 align 8
.text:0000000000001B78
.text:0000000000001B78 loc_1B78:                               ; CODE XREF: main+F9↑j
.text:0000000000001B78                 cmp     eax, 6Fh ; 'o'
.text:0000000000001B7B                 jz      loc_1CA0
.text:0000000000001B81                 cmp     eax, 74h ; 't'
.text:0000000000001B84                 jz      loc_1D88
.text:0000000000001B8A                 cmp     eax, 6Ah ; 'j'
.text:0000000000001B8D                 jnz     short loc_1B41
.text:0000000000001B8F                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001B96                 movzx   eax, byte ptr [rdi]
.text:0000000000001B99                 lea     edx, [rax-31h]
.text:0000000000001B9C                 cmp     dl, 1
.text:0000000000001B9F                 ja      short loc_1BC0
.text:0000000000001BA1                 cmp     byte ptr [rdi+1], 0
.text:0000000000001BA5                 jnz     short loc_1BC0
.text:0000000000001BA7                 movsxd  rdx, cs:optind@@GLIBC_2_2_5
.text:0000000000001BAE                 mov     rdx, [rbx+rdx*8-8]
.text:0000000000001BB3                 add     rdx, 2
.text:0000000000001BB7                 cmp     rdi, rdx
.text:0000000000001BBA                 jz      loc_237E
.text:0000000000001BC0
.text:0000000000001BC0 loc_1BC0:                               ; CODE XREF: main+1EF↑j
.text:0000000000001BC0                                         ; main+1F5↑j
.text:0000000000001BC0                 call    string_to_join_field
.text:0000000000001BC5                 lea     rdi, join_field_1
.text:0000000000001BCC                 mov     rsi, rax
.text:0000000000001BCF                 call    set_join_field
.text:0000000000001BD4                 mov     rsi, cs:join_field_1
.text:0000000000001BDB                 lea     rdi, join_field_2
.text:0000000000001BE2                 call    set_join_field
.text:0000000000001BE7
.text:0000000000001BE7 loc_1BE7:                               ; CODE XREF: main+2E8↓j
.text:0000000000001BE7                                         ; main+468↓j
.text:0000000000001BE7                 mov     eax, [rsp+0C8h+var_9C]
.text:0000000000001BEB                 jmp     loc_1AE0
.text:0000000000001BF0 ; ---------------------------------------------------------------------------
.text:0000000000001BF0
.text:0000000000001BF0 loc_1BF0:                               ; CODE XREF: main+174↑j
.text:0000000000001BF0                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001BF5                 jz      loc_26D6
.text:0000000000001BFB                 cmp     eax, 1
.text:0000000000001BFE                 jz      loc_1CD8
.text:0000000000001C04                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001C09                 jnz     loc_1B41
.text:0000000000001C0F                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001C16                 mov     rcx, cs:Version
.text:0000000000001C1D                 lea     r8, aMikeHaertel ; "Mike Haertel"
.text:0000000000001C24                 lea     rdx, unk_7E17
.text:0000000000001C2B                 lea     rsi, aJoin      ; "join"
.text:0000000000001C32                 xor     r9d, r9d
.text:0000000000001C35                 xor     eax, eax
.text:0000000000001C37                 call    version_etc
.text:0000000000001C3C                 xor     edi, edi        ; status
.text:0000000000001C3E                 call    _exit
.text:0000000000001C3E ; ---------------------------------------------------------------------------
.text:0000000000001C43                 align 8
.text:0000000000001C48
.text:0000000000001C48 loc_1C48:                               ; CODE XREF: main+F3↑j
.text:0000000000001C48                 mov     cs:print_pairables, 0
.text:0000000000001C4F
.text:0000000000001C4F loc_1C4F:                               ; CODE XREF: main+17D↑j
.text:0000000000001C4F                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; nptr
.text:0000000000001C56                 lea     r8, accept+3    ; ""
.text:0000000000001C5D                 xor     esi, esi
.text:0000000000001C5F                 mov     rcx, r15
.text:0000000000001C62                 mov     edx, 0Ah
.text:0000000000001C67                 call    xstrtoul
.text:0000000000001C6C                 test    eax, eax
.text:0000000000001C6E                 jnz     loc_26F9
.text:0000000000001C74                 mov     rax, [rsp+0C8h+var_68]
.text:0000000000001C79                 lea     rdx, [rax-1]
.text:0000000000001C7D                 cmp     rdx, 1
.text:0000000000001C81                 ja      loc_26F9
.text:0000000000001C87                 cmp     rax, 1
.text:0000000000001C8B                 jz      loc_1E11
.text:0000000000001C91                 mov     cs:print_unpairables_2, 1
.text:0000000000001C98                 jmp     loc_1BE7
.text:0000000000001C98 ; ---------------------------------------------------------------------------
.text:0000000000001C9D                 align 20h
.text:0000000000001CA0
.text:0000000000001CA0 loc_1CA0:                               ; CODE XREF: main+1CB↑j
.text:0000000000001CA0                 mov     rdx, cs:optarg@@GLIBC_2_2_5
.text:0000000000001CA7                 lea     rdi, aAuto      ; "auto"
.text:0000000000001CAE                 mov     ecx, 5
.text:0000000000001CB3                 mov     rsi, rdx
.text:0000000000001CB6                 repe cmpsb
.text:0000000000001CB8                 setnbe  al
.text:0000000000001CBB                 sbb     al, 0
.text:0000000000001CBD                 movsx   eax, al
.text:0000000000001CC0                 test    eax, eax
.text:0000000000001CC2                 jnz     loc_1E47
.text:0000000000001CC8                 mov     cs:autoformat, 1
.text:0000000000001CCF                 jmp     loc_1AE0
.text:0000000000001CCF ; ---------------------------------------------------------------------------
.text:0000000000001CD4                 align 8
.text:0000000000001CD8
.text:0000000000001CD8 loc_1CD8:                               ; CODE XREF: main+24E↑j
.text:0000000000001CD8                 lea     r14, [rsp+0C8h+var_94]
.text:0000000000001CDD                 lea     r13, [rsp+0C8h+var_48]
.text:0000000000001CE5                 lea     r12, [rsp+0C8h+var_50]
.text:0000000000001CEA                 mov     r9, [rsp+0C8h+var_C0]
.text:0000000000001CEF                 mov     r8, [rsp+0C8h+var_B8]
.text:0000000000001CF4                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001CFB                 mov     rcx, r14
.text:0000000000001CFE                 mov     rdx, r13
.text:0000000000001D01                 mov     rsi, r12
.text:0000000000001D04                 call    add_file_name_constprop_7
.text:0000000000001D09                 mov     eax, [rsp+0C8h+var_9C]
.text:0000000000001D0D                 jmp     loc_1AE0
.text:0000000000001D0D ; ---------------------------------------------------------------------------
.text:0000000000001D12                 align 8
.text:0000000000001D18
.text:0000000000001D18 loc_1D18:                               ; CODE XREF: main+186↑j
.text:0000000000001D18                 mov     rdi, cs:empty_filler ; s1
.text:0000000000001D1F                 mov     r12, cs:optarg@@GLIBC_2_2_5
.text:0000000000001D26                 test    rdi, rdi
.text:0000000000001D29                 jz      short loc_1D3B
.text:0000000000001D2B                 mov     rsi, r12        ; s2
.text:0000000000001D2E                 call    _strcmp
.text:0000000000001D33                 test    eax, eax
.text:0000000000001D35                 jnz     loc_272F
.text:0000000000001D3B
.text:0000000000001D3B loc_1D3B:                               ; CODE XREF: main+379↑j
.text:0000000000001D3B                 mov     cs:empty_filler, r12
.text:0000000000001D42                 xor     eax, eax
.text:0000000000001D44                 jmp     loc_1AE0
.text:0000000000001D44 ; ---------------------------------------------------------------------------
.text:0000000000001D49                 align 10h
.text:0000000000001D50
.text:0000000000001D50 loc_1D50:                               ; CODE XREF: main+10A↑j
.text:0000000000001D50                 cmp     eax, 7Ah ; 'z'
.text:0000000000001D53                 jnz     loc_1B41
.text:0000000000001D59                 mov     cs:eolchar, 0
.text:0000000000001D60                 xor     eax, eax
.text:0000000000001D62                 jmp     loc_1AE0
.text:0000000000001D62 ; ---------------------------------------------------------------------------
.text:0000000000001D67                 align 10h
.text:0000000000001D70
.text:0000000000001D70 loc_1D70:                               ; CODE XREF: main+104↑j
.text:0000000000001D70                 mov     cs:check_input_order, 1
.text:0000000000001D7A                 xor     eax, eax
.text:0000000000001D7C                 jmp     loc_1AE0
.text:0000000000001D7C ; ---------------------------------------------------------------------------
.text:0000000000001D81                 align 8
.text:0000000000001D88
.text:0000000000001D88 loc_1D88:                               ; CODE XREF: main+1D4↑j
.text:0000000000001D88                 mov     r12, cs:optarg@@GLIBC_2_2_5
.text:0000000000001D8F                 movzx   eax, byte ptr [r12]
.text:0000000000001D94                 test    al, al
.text:0000000000001D96                 jnz     loc_1E1D
.text:0000000000001D9C                 mov     eax, 0Ah
.text:0000000000001DA1
.text:0000000000001DA1 loc_1DA1:                               ; CODE XREF: main+473↓j
.text:0000000000001DA1                                         ; main+492↓j
.text:0000000000001DA1                 mov     edx, cs:tab
.text:0000000000001DA7                 test    edx, edx
.text:0000000000001DA9                 js      short loc_1DB3
.text:0000000000001DAB                 cmp     edx, eax
.text:0000000000001DAD                 jnz     loc_28D0
.text:0000000000001DB3
.text:0000000000001DB3 loc_1DB3:                               ; CODE XREF: main+3F9↑j
.text:0000000000001DB3                 mov     cs:tab, eax
.text:0000000000001DB9                 xor     eax, eax
.text:0000000000001DBB                 jmp     loc_1AE0
.text:0000000000001DC0 ; ---------------------------------------------------------------------------
.text:0000000000001DC0
.text:0000000000001DC0 loc_1DC0:                               ; CODE XREF: main+16E↑j
.text:0000000000001DC0                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001DC7                 call    string_to_join_field
.text:0000000000001DCC                 lea     rdi, join_field_1
.text:0000000000001DD3                 mov     rsi, rax
.text:0000000000001DD6                 call    set_join_field
.text:0000000000001DDB                 mov     eax, [rsp+0C8h+var_9C]
.text:0000000000001DDF                 jmp     loc_1AE0
.text:0000000000001DDF ; ---------------------------------------------------------------------------
.text:0000000000001DE4                 align 8
.text:0000000000001DE8
.text:0000000000001DE8 loc_1DE8:                               ; CODE XREF: main+163↑j
.text:0000000000001DE8                 mov     cs:ignore_case, 1
.text:0000000000001DEF                 xor     eax, eax
.text:0000000000001DF1                 jmp     loc_1AE0
.text:0000000000001DF1 ; ---------------------------------------------------------------------------
.text:0000000000001DF6                 align 20h
.text:0000000000001E00
.text:0000000000001E00 loc_1E00:                               ; CODE XREF: main+115↑j
.text:0000000000001E00                 mov     cs:check_input_order, 2
.text:0000000000001E0A                 xor     eax, eax
.text:0000000000001E0C                 jmp     loc_1AE0
.text:0000000000001E11 ; ---------------------------------------------------------------------------
.text:0000000000001E11
.text:0000000000001E11 loc_1E11:                               ; CODE XREF: main+2DB↑j
.text:0000000000001E11                 mov     cs:print_unpairables_1, 1
.text:0000000000001E18                 jmp     loc_1BE7
.text:0000000000001E1D ; ---------------------------------------------------------------------------
.text:0000000000001E1D
.text:0000000000001E1D loc_1E1D:                               ; CODE XREF: main+3E6↑j
.text:0000000000001E1D                 cmp     byte ptr [r12+1], 0
.text:0000000000001E23                 jz      loc_1DA1
.text:0000000000001E29                 lea     rsi, s2         ; "\\0"
.text:0000000000001E30                 mov     rdi, r12        ; s1
.text:0000000000001E33                 call    _strcmp
.text:0000000000001E38                 test    eax, eax
.text:0000000000001E3A                 jnz     loc_280E
.text:0000000000001E40                 xor     eax, eax
.text:0000000000001E42                 jmp     loc_1DA1
.text:0000000000001E47 ; ---------------------------------------------------------------------------
.text:0000000000001E47
.text:0000000000001E47 loc_1E47:                               ; CODE XREF: main+312↑j
.text:0000000000001E47                 mov     rdi, rdx        ; s
.text:0000000000001E4A                 call    add_field_list
.text:0000000000001E4F                 mov     [rsp+0C8h+var_9C], 3
.text:0000000000001E57                 mov     eax, 3
.text:0000000000001E5C                 jmp     loc_1AE0
.text:0000000000001E61 ; ---------------------------------------------------------------------------
.text:0000000000001E61
.text:0000000000001E61 loc_1E61:                               ; CODE XREF: main+152↑j
.text:0000000000001E61                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001E68                 mov     [rsp+0C8h+var_98], 0
.text:0000000000001E70                 cmp     ebp, eax
.text:0000000000001E72                 jle     short loc_1EC6
.text:0000000000001E74                 lea     rcx, [rsp+0C8h+var_98]
.text:0000000000001E79                 lea     r15, [rsp+0C8h+var_9C]
.text:0000000000001E7E                 lea     r14, [rsp+0C8h+var_94]
.text:0000000000001E83                 lea     r13, [rsp+0C8h+var_48]
.text:0000000000001E8B                 lea     r12, [rsp+0C8h+var_50]
.text:0000000000001E90                 mov     [rsp+0C8h+var_C0], rcx
.text:0000000000001E95                 nop     dword ptr [rax]
.text:0000000000001E98
.text:0000000000001E98 loc_1E98:                               ; CODE XREF: main+514↓j
.text:0000000000001E98                 lea     edx, [rax+1]
.text:0000000000001E9B                 mov     rdi, [rbx+rax*8]
.text:0000000000001E9F                 mov     r8, [rsp+0C8h+var_C0]
.text:0000000000001EA4                 mov     r9, r15
.text:0000000000001EA7                 mov     rcx, r14
.text:0000000000001EAA                 mov     rsi, r12
.text:0000000000001EAD                 mov     cs:optind@@GLIBC_2_2_5, edx
.text:0000000000001EB3                 mov     rdx, r13
.text:0000000000001EB6                 call    add_file_name_constprop_7
.text:0000000000001EBB                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001EC2                 cmp     eax, ebp
.text:0000000000001EC4                 jl      short loc_1E98
.text:0000000000001EC6
.text:0000000000001EC6 loc_1EC6:                               ; CODE XREF: main+4C2↑j
.text:0000000000001EC6                 mov     eax, [rsp+0C8h+var_94]
.text:0000000000001ECA                 cmp     eax, 2
.text:0000000000001ECD                 jnz     loc_28A6
.text:0000000000001ED3                 cmp     dword ptr [rsp+0C8h+var_48], 0
.text:0000000000001EDB                 jnz     loc_2346
.text:0000000000001EE1
.text:0000000000001EE1 loc_1EE1:                               ; CODE XREF: main+9B2↓j
.text:0000000000001EE1                 cmp     dword ptr [rsp+0C8h+var_48+4], 0
.text:0000000000001EE9                 jnz     loc_231F
.text:0000000000001EEF
.text:0000000000001EEF loc_1EEF:                               ; CODE XREF: main+991↓j
.text:0000000000001EEF                 cmp     cs:join_field_1, 0FFFFFFFFFFFFFFFFh
.text:0000000000001EF7                 jz      loc_230F
.text:0000000000001EFD
.text:0000000000001EFD loc_1EFD:                               ; CODE XREF: main+96A↓j
.text:0000000000001EFD                 cmp     cs:join_field_2, 0FFFFFFFFFFFFFFFFh
.text:0000000000001F05                 jz      loc_22FF
.text:0000000000001F0B
.text:0000000000001F0B loc_1F0B:                               ; CODE XREF: main+95A↓j
.text:0000000000001F0B                 mov     rbx, cs:g_names
.text:0000000000001F12                 lea     rsi, aLt+2      ; s2
.text:0000000000001F19                 mov     rdi, rbx        ; s1
.text:0000000000001F1C                 call    _strcmp
.text:0000000000001F21                 test    eax, eax
.text:0000000000001F23                 jnz     loc_2367
.text:0000000000001F29                 mov     r12, cs:stdin@@GLIBC_2_2_5
.text:0000000000001F30
.text:0000000000001F30 loc_1F30:                               ; CODE XREF: main+9C9↓j
.text:0000000000001F30                 test    r12, r12
.text:0000000000001F33                 jz      loc_2873
.text:0000000000001F39                 mov     rbx, cs:s1
.text:0000000000001F40                 lea     rsi, aLt+2      ; s2
.text:0000000000001F47                 mov     rdi, rbx        ; s1
.text:0000000000001F4A                 call    _strcmp
.text:0000000000001F4F                 test    eax, eax
.text:0000000000001F51                 jnz     loc_25C6
.text:0000000000001F57                 mov     rbx, cs:stdin@@GLIBC_2_2_5
.text:0000000000001F5E
.text:0000000000001F5E loc_1F5E:                               ; CODE XREF: main+C28↓j
.text:0000000000001F5E                 test    rbx, rbx
.text:0000000000001F61                 jz      loc_2840
.text:0000000000001F67                 cmp     r12, rbx
.text:0000000000001F6A                 jz      loc_27AA
.text:0000000000001F70                 mov     esi, 2
.text:0000000000001F75                 mov     rdi, r12
.text:0000000000001F78                 lea     r14, [rsp+0C8h+var_88]
.text:0000000000001F7D                 call    fadvise
.text:0000000000001F82                 lea     r13, [rsp+0C8h+var_68]
.text:0000000000001F87                 mov     esi, 2
.text:0000000000001F8C                 mov     rdi, rbx
.text:0000000000001F8F                 call    fadvise
.text:0000000000001F94                 mov     edx, 1
.text:0000000000001F99                 mov     rsi, r14
.text:0000000000001F9C                 mov     rdi, r12
.text:0000000000001F9F                 mov     [rsp+0C8h+var_88], 0
.text:0000000000001FA8                 mov     [rsp+0C8h+var_80], 0
.text:0000000000001FB1                 mov     [rsp+0C8h+var_78], 0
.text:0000000000001FBA                 call    getseq
.text:0000000000001FBF                 mov     edx, 2
.text:0000000000001FC4                 mov     rsi, r13
.text:0000000000001FC7                 mov     rdi, rbx
.text:0000000000001FCA                 mov     [rsp+0C8h+var_68], 0
.text:0000000000001FD3                 mov     [rsp+0C8h+var_60], 0
.text:0000000000001FDC                 mov     [rsp+0C8h+var_58], 0
.text:0000000000001FE5                 call    getseq
.text:0000000000001FEA                 cmp     cs:autoformat, 0
.text:0000000000001FF1                 jz      short loc_202D
.text:0000000000001FF3                 mov     rax, [rsp+0C8h+var_88]
.text:0000000000001FF8                 test    rax, rax
.text:0000000000001FFB                 jz      short loc_2009
.text:0000000000001FFD                 mov     rax, [rsp+0C8h+var_78]
.text:0000000000002002                 mov     rax, [rax]
.text:0000000000002005                 mov     rax, [rax+18h]
.text:0000000000002009
.text:0000000000002009 loc_2009:                               ; CODE XREF: main+64B↑j
.text:0000000000002009                 mov     cs:autocount_1, rax
.text:0000000000002010                 mov     rax, [rsp+0C8h+var_68]
.text:0000000000002015                 test    rax, rax
.text:0000000000002018                 jz      short loc_2026
.text:000000000000201A                 mov     rax, [rsp+0C8h+var_58]
.text:000000000000201F                 mov     rax, [rax]
.text:0000000000002022                 mov     rax, [rax+18h]
.text:0000000000002026
.text:0000000000002026 loc_2026:                               ; CODE XREF: main+668↑j
.text:0000000000002026                 mov     cs:autocount_2, rax
.text:000000000000202D
.text:000000000000202D loc_202D:                               ; CODE XREF: main+641↑j
.text:000000000000202D                 cmp     cs:join_header_lines, 0
.text:0000000000002034                 jz      loc_2264
.text:000000000000203A                 cmp     [rsp+0C8h+var_88], 0
.text:0000000000002040                 mov     rax, [rsp+0C8h+var_68]
.text:0000000000002045                 jnz     loc_25DD
.text:000000000000204B                 test    rax, rax
.text:000000000000204E                 jnz     loc_2657
.text:0000000000002054
.text:0000000000002054 loc_2054:                               ; CODE XREF: main+8BC↓j
.text:0000000000002054                                         ; main+94A↓j
.text:0000000000002054                 xor     eax, eax
.text:0000000000002056
.text:0000000000002056 loc_2056:                               ; CODE XREF: main+8C8↓j
.text:0000000000002056                 cmp     cs:check_input_order, 2
.text:000000000000205D                 mov     [rsp+0C8h+ptr], 0
.text:0000000000002066                 jz      short loc_2082
.text:0000000000002068                 cmp     cs:issued_disorder_warning, 0
.text:000000000000206F                 jz      loc_239C
.text:0000000000002075                 cmp     cs:byte_20B199, 0
.text:000000000000207C                 jz      loc_239C
.text:0000000000002082
.text:0000000000002082 loc_2082:                               ; CODE XREF: main+6B6↑j
.text:0000000000002082                 cmp     cs:print_unpairables_1, 0
.text:0000000000002089                 jnz     loc_26DD
.text:000000000000208F                 movzx   eax, cs:print_unpairables_2
.text:0000000000002096                 test    al, al
.text:0000000000002098                 jnz     loc_2547
.text:000000000000209E
.text:000000000000209E loc_209E:                               ; CODE XREF: main+A79↓j
.text:000000000000209E                                         ; main+B9D↓j ...
.text:000000000000209E                 mov     rdi, [rsp+0C8h+ptr] ; ptr
.text:00000000000020A3
.text:00000000000020A3 loc_20A3:                               ; CODE XREF: main+A6E↓j
.text:00000000000020A3                 call    _free
.text:00000000000020A8                 lea     rsi, [r14+10h]
.text:00000000000020AC                 lea     rdi, [r14+8]
.text:00000000000020B0                 call    delseq_isra_3
.text:00000000000020B5                 lea     rsi, [r13+10h]
.text:00000000000020B9                 lea     rdi, [r13+8]
.text:00000000000020BD                 call    delseq_isra_3
.text:00000000000020C2                 mov     rdi, r12        ; stream
.text:00000000000020C5                 call    rpl_fclose
.text:00000000000020CA                 test    eax, eax
.text:00000000000020CC                 jnz     loc_27D6
.text:00000000000020D2                 mov     rdi, rbx        ; stream
.text:00000000000020D5                 call    rpl_fclose
.text:00000000000020DA                 test    eax, eax
.text:00000000000020DC                 jnz     loc_2777
.text:00000000000020E2                 cmp     cs:issued_disorder_warning, 0
.text:00000000000020E9                 jnz     loc_2753
.text:00000000000020EF                 cmp     cs:byte_20B199, 0
.text:00000000000020F6                 jnz     loc_2753
.text:00000000000020FC                 xor     eax, eax
.text:00000000000020FE                 mov     rbx, [rsp+0C8h+var_40]
.text:0000000000002106                 xor     rbx, fs:28h
.text:000000000000210F                 jnz     loc_2809
.text:0000000000002115                 add     rsp, 98h
.text:000000000000211C                 pop     rbx
.text:000000000000211D                 pop     rbp
.text:000000000000211E                 pop     r12
.text:0000000000002120                 pop     r13
.text:0000000000002122                 pop     r14
.text:0000000000002124                 pop     r15
.text:0000000000002126                 retn
.text:0000000000002126 ; ---------------------------------------------------------------------------
.text:0000000000002127                 align 10h
.text:0000000000002130
.text:0000000000002130 loc_2130:                               ; CODE XREF: main+7D4↓j
.text:0000000000002130                 mov     rax, [rsp+0C8h+var_58]
.text:0000000000002135                 mov     rcx, [rsp+0C8h+var_88]
.text:000000000000213A                 mov     r9, cs:join_field_2
.text:0000000000002141                 mov     r8, cs:join_field_1
.text:0000000000002148                 mov     rdx, [rax]
.text:000000000000214B                 mov     rax, [rsp+0C8h+var_78]
.text:0000000000002150                 mov     rax, [rax+rcx*8-8]
.text:0000000000002155                 lea     rcx, [rdx+28h]
.text:0000000000002159                 mov     rdx, [rdx+18h]
.text:000000000000215D                 mov     rdi, [rax+18h]
.text:0000000000002161                 lea     rsi, [rax+28h]
.text:0000000000002165                 call    keycmp_isra_4
.text:000000000000216A                 test    eax, eax
.text:000000000000216C                 jnz     loc_249F
.text:0000000000002172
.text:0000000000002172 loc_2172:                               ; CODE XREF: main+909↓j
.text:0000000000002172                 mov     edx, 1
.text:0000000000002177                 mov     rsi, r14
.text:000000000000217A                 mov     rdi, r12
.text:000000000000217D                 call    getseq
.text:0000000000002182                 test    al, al
.text:0000000000002184                 jnz     short loc_2130
.text:0000000000002186                 add     [rsp+0C8h+var_88], 1
.text:000000000000218C                 mov     byte ptr [rsp+0C8h+var_B8], 1
.text:0000000000002191                 jmp     short loc_21DA
.text:0000000000002191 ; ---------------------------------------------------------------------------
.text:0000000000002193                 align 8
.text:0000000000002198
.text:0000000000002198 loc_2198:                               ; CODE XREF: main+83C↓j
.text:0000000000002198                 mov     rax, [rsp+0C8h+var_58]
.text:000000000000219D                 mov     rdx, [rsp+0C8h+var_68]
.text:00000000000021A2                 mov     r9, cs:join_field_2
.text:00000000000021A9                 mov     r8, cs:join_field_1
.text:00000000000021B0                 mov     rdx, [rax+rdx*8-8]
.text:00000000000021B5                 mov     rax, [rsp+0C8h+var_78]
.text:00000000000021BA                 mov     rax, [rax]
.text:00000000000021BD                 lea     rcx, [rdx+28h]
.text:00000000000021C1                 mov     rdx, [rdx+18h]
.text:00000000000021C5                 mov     rdi, [rax+18h]
.text:00000000000021C9                 lea     rsi, [rax+28h]
.text:00000000000021CD                 call    keycmp_isra_4
.text:00000000000021D2                 test    eax, eax
.text:00000000000021D4                 jnz     loc_2495
.text:00000000000021DA
.text:00000000000021DA loc_21DA:                               ; CODE XREF: main+7E1↑j
.text:00000000000021DA                                         ; main+AF4↓j
.text:00000000000021DA                 mov     edx, 2
.text:00000000000021DF                 mov     rsi, r13
.text:00000000000021E2                 mov     rdi, rbx
.text:00000000000021E5                 call    getseq
.text:00000000000021EA                 test    al, al
.text:00000000000021EC                 jnz     short loc_2198
.text:00000000000021EE                 add     [rsp+0C8h+var_68], 1
.text:00000000000021F4                 mov     [rsp+0C8h+var_A9], 1
.text:00000000000021F9
.text:00000000000021F9 loc_21F9:                               ; CODE XREF: main+AEA↓j
.text:00000000000021F9                 cmp     cs:print_pairables, 0
.text:0000000000002200                 jnz     loc_24A9
.text:0000000000002206
.text:0000000000002206 loc_2206:                               ; CODE XREF: main+B08↓j
.text:0000000000002206                                         ; main+B72↓j
.text:0000000000002206                 cmp     byte ptr [rsp+0C8h+var_B8], 0
.text:000000000000220B                 jnz     loc_2479
.text:0000000000002211                 mov     rax, [rsp+0C8h+var_78]
.text:0000000000002216                 mov     rdx, [rsp+0C8h+var_88]
.text:000000000000221B                 lea     rdx, [rax+rdx*8-8]
.text:0000000000002220                 mov     rcx, [rax]
.text:0000000000002223                 mov     rsi, [rdx]
.text:0000000000002226                 mov     [rax], rsi
.text:0000000000002229                 mov     [rdx], rcx
.text:000000000000222C                 mov     [rsp+0C8h+var_88], 1
.text:0000000000002235
.text:0000000000002235 loc_2235:                               ; CODE XREF: main+AD2↓j
.text:0000000000002235                 cmp     [rsp+0C8h+var_A9], 0
.text:000000000000223A                 jnz     loc_2487
.text:0000000000002240                 mov     rax, [rsp+0C8h+var_58]
.text:0000000000002245                 mov     rdx, [rsp+0C8h+var_68]
.text:000000000000224A                 lea     rdx, [rax+rdx*8-8]
.text:000000000000224F                 mov     rcx, [rax]
.text:0000000000002252                 mov     rsi, [rdx]
.text:0000000000002255                 mov     [rax], rsi
.text:0000000000002258                 mov     [rdx], rcx
.text:000000000000225B                 mov     [rsp+0C8h+var_68], 1
.text:0000000000002264
.text:0000000000002264 loc_2264:                               ; CODE XREF: main+684↑j
.text:0000000000002264                                         ; main+AAB↓j ...
.text:0000000000002264                 mov     rax, [rsp+0C8h+var_88]
.text:0000000000002269                 test    rax, rax
.text:000000000000226C                 jz      loc_2054
.text:0000000000002272
.text:0000000000002272 loc_2272:                               ; CODE XREF: main+944↓j
.text:0000000000002272                 cmp     [rsp+0C8h+var_68], 0
.text:0000000000002278                 jz      loc_2056
.text:000000000000227E                 mov     rax, [rsp+0C8h+var_58]
.text:0000000000002283                 mov     r9, cs:join_field_2
.text:000000000000228A                 mov     r8, cs:join_field_1
.text:0000000000002291                 mov     rdx, [rax]
.text:0000000000002294                 mov     rax, [rsp+0C8h+var_78]
.text:0000000000002299                 mov     rax, [rax]
.text:000000000000229C                 lea     rcx, [rdx+28h]
.text:00000000000022A0                 mov     rdx, [rdx+18h]
.text:00000000000022A4                 mov     rdi, [rax+18h]
.text:00000000000022A8                 lea     rsi, [rax+28h]
.text:00000000000022AC                 call    keycmp_isra_4
.text:00000000000022B1                 test    eax, eax
.text:00000000000022B3                 js      loc_242E
.text:00000000000022B9                 jz      loc_2172
.text:00000000000022BF                 cmp     cs:print_unpairables_2, 0
.text:00000000000022C6                 jnz     loc_2460
.text:00000000000022CC
.text:00000000000022CC loc_22CC:                               ; CODE XREF: main+AC4↓j
.text:00000000000022CC                 mov     edx, 2
.text:00000000000022D1                 mov     rsi, r13
.text:00000000000022D4                 mov     rdi, rbx
.text:00000000000022D7                 mov     [rsp+0C8h+var_68], 0
.text:00000000000022E0                 call    getseq
.text:00000000000022E5                 mov     rax, [rsp+0C8h+var_88]
.text:00000000000022EA                 mov     cs:seen_unpairable, 1
.text:00000000000022F1                 test    rax, rax
.text:00000000000022F4                 jnz     loc_2272
.text:00000000000022FA                 jmp     loc_2054
.text:00000000000022FF ; ---------------------------------------------------------------------------
.text:00000000000022FF
.text:00000000000022FF loc_22FF:                               ; CODE XREF: main+555↑j
.text:00000000000022FF                 mov     cs:join_field_2, 0
.text:000000000000230A                 jmp     loc_1F0B
.text:000000000000230F ; ---------------------------------------------------------------------------
.text:000000000000230F
.text:000000000000230F loc_230F:                               ; CODE XREF: main+547↑j
.text:000000000000230F                 mov     cs:join_field_1, 0
.text:000000000000231A                 jmp     loc_1EFD
.text:000000000000231F ; ---------------------------------------------------------------------------
.text:000000000000231F
.text:000000000000231F loc_231F:                               ; CODE XREF: main+539↑j
.text:000000000000231F                 lea     rdi, join_field_1
.text:0000000000002326                 mov     esi, 1
.text:000000000000232B                 call    set_join_field
.text:0000000000002330                 lea     rdi, join_field_2
.text:0000000000002337                 mov     esi, 1
.text:000000000000233C                 call    set_join_field
.text:0000000000002341                 jmp     loc_1EEF
.text:0000000000002346 ; ---------------------------------------------------------------------------
.text:0000000000002346
.text:0000000000002346 loc_2346:                               ; CODE XREF: main+52B↑j
.text:0000000000002346                 lea     rdi, join_field_1
.text:000000000000234D                 xor     esi, esi
.text:000000000000234F                 call    set_join_field
.text:0000000000002354                 lea     rdi, join_field_2
.text:000000000000235B                 xor     esi, esi
.text:000000000000235D                 call    set_join_field
.text:0000000000002362                 jmp     loc_1EE1
.text:0000000000002367 ; ---------------------------------------------------------------------------
.text:0000000000002367
.text:0000000000002367 loc_2367:                               ; CODE XREF: main+573↑j
.text:0000000000002367                 lea     rsi, aHeader+5  ; "r"
.text:000000000000236E                 mov     rdi, rbx
.text:0000000000002371                 call    fopen_safer
.text:0000000000002376                 mov     r12, rax
.text:0000000000002379                 jmp     loc_1F30
.text:000000000000237E ; ---------------------------------------------------------------------------
.text:000000000000237E
.text:000000000000237E loc_237E:                               ; CODE XREF: main+20A↑j
.text:000000000000237E                 xor     edx, edx
.text:0000000000002380                 cmp     al, 32h ; '2'
.text:0000000000002382                 setz    dl
.text:0000000000002385                 mov     rax, rdx
.text:0000000000002388                 add     dword ptr [rsp+rdx*4+0C8h+var_48], 1
.text:0000000000002390                 add     eax, 1
.text:0000000000002393                 mov     [rsp+0C8h+var_9C], eax
.text:0000000000002397                 jmp     loc_1AE0
.text:000000000000239C ; ---------------------------------------------------------------------------
.text:000000000000239C
.text:000000000000239C loc_239C:                               ; CODE XREF: main+6BF↑j
.text:000000000000239C                                         ; main+6CC↑j
.text:000000000000239C                 test    rax, rax
.text:000000000000239F                 jz      loc_2540
.text:00000000000023A5                 movzx   r15d, cs:print_unpairables_1
.text:00000000000023AD                 test    r15b, r15b
.text:00000000000023B0                 jnz     loc_268D
.text:00000000000023B6                 mov     r15d, 1
.text:00000000000023BC
.text:00000000000023BC loc_23BC:                               ; CODE XREF: main+CF1↓j
.text:00000000000023BC                 cmp     [rsp+0C8h+var_68], 0
.text:00000000000023C2                 jz      short loc_23CB
.text:00000000000023C4                 mov     cs:seen_unpairable, 1
.text:00000000000023CB
.text:00000000000023CB loc_23CB:                               ; CODE XREF: main+A12↑j
.text:00000000000023CB                 lea     rbp, [rsp+0C8h+ptr]
.text:00000000000023D0
.text:00000000000023D0 loc_23D0:                               ; CODE XREF: main+A48↓j
.text:00000000000023D0                                         ; main+D0E↓j ...
.text:00000000000023D0                 mov     edx, 1
.text:00000000000023D5                 mov     rsi, rbp
.text:00000000000023D8                 mov     rdi, r12
.text:00000000000023DB                 call    get_line
.text:00000000000023E0                 test    al, al
.text:00000000000023E2                 jz      short loc_23FA
.text:00000000000023E4                 cmp     cs:print_unpairables_1, 0
.text:00000000000023EB                 jnz     loc_26A6
.text:00000000000023F1                 cmp     cs:issued_disorder_warning, 0
.text:00000000000023F8                 jz      short loc_23D0
.text:00000000000023FA
.text:00000000000023FA loc_23FA:                               ; CODE XREF: main+A32↑j
.text:00000000000023FA                                         ; main+D21↓j
.text:00000000000023FA                 movzx   eax, cs:print_unpairables_2
.text:0000000000002401                 test    al, al
.text:0000000000002403                 jnz     short loc_240A
.text:0000000000002405                 test    r15b, r15b
.text:0000000000002408                 jz      short loc_2416
.text:000000000000240A
.text:000000000000240A loc_240A:                               ; CODE XREF: main+A53↑j
.text:000000000000240A                                         ; main+D44↓j
.text:000000000000240A                 cmp     [rsp+0C8h+var_68], 0
.text:0000000000002410                 jnz     loc_2553
.text:0000000000002416
.text:0000000000002416 loc_2416:                               ; CODE XREF: main+A58↑j
.text:0000000000002416                                         ; main+BD5↓j ...
.text:0000000000002416                 mov     rdi, [rsp+0C8h+ptr]
.text:000000000000241B                 test    rdi, rdi
.text:000000000000241E                 jz      loc_20A3
.text:0000000000002424                 call    freeline_part_2
.text:0000000000002429                 jmp     loc_209E
.text:000000000000242E ; ---------------------------------------------------------------------------
.text:000000000000242E
.text:000000000000242E loc_242E:                               ; CODE XREF: main+903↑j
.text:000000000000242E                 cmp     cs:print_unpairables_1, 0
.text:0000000000002435                 jnz     loc_2527
.text:000000000000243B
.text:000000000000243B loc_243B:                               ; CODE XREF: main+B8B↓j
.text:000000000000243B                 mov     edx, 1
.text:0000000000002440                 mov     rsi, r14
.text:0000000000002443                 mov     rdi, r12
.text:0000000000002446                 mov     [rsp+0C8h+var_88], 0
.text:000000000000244F                 call    getseq
.text:0000000000002454                 mov     cs:seen_unpairable, 1
.text:000000000000245B                 jmp     loc_2264
.text:0000000000002460 ; ---------------------------------------------------------------------------
.text:0000000000002460
.text:0000000000002460 loc_2460:                               ; CODE XREF: main+916↑j
.text:0000000000002460                 mov     rax, [rsp+0C8h+var_58]
.text:0000000000002465                 lea     rdi, uni_blank
.text:000000000000246C                 mov     rsi, [rax]
.text:000000000000246F                 call    prjoin
.text:0000000000002474                 jmp     loc_22CC
.text:0000000000002479 ; ---------------------------------------------------------------------------
.text:0000000000002479
.text:0000000000002479 loc_2479:                               ; CODE XREF: main+85B↑j
.text:0000000000002479                 mov     [rsp+0C8h+var_88], 0
.text:0000000000002482                 jmp     loc_2235
.text:0000000000002487 ; ---------------------------------------------------------------------------
.text:0000000000002487
.text:0000000000002487 loc_2487:                               ; CODE XREF: main+88A↑j
.text:0000000000002487                 mov     [rsp+0C8h+var_68], 0
.text:0000000000002490                 jmp     loc_2264
.text:0000000000002495 ; ---------------------------------------------------------------------------
.text:0000000000002495
.text:0000000000002495 loc_2495:                               ; CODE XREF: main+824↑j
.text:0000000000002495                 mov     [rsp+0C8h+var_A9], 0
.text:000000000000249A                 jmp     loc_21F9
.text:000000000000249F ; ---------------------------------------------------------------------------
.text:000000000000249F
.text:000000000000249F loc_249F:                               ; CODE XREF: main+7BC↑j
.text:000000000000249F                 mov     byte ptr [rsp+0C8h+var_B8], 0
.text:00000000000024A4                 jmp     loc_21DA
.text:00000000000024A9 ; ---------------------------------------------------------------------------
.text:00000000000024A9
.text:00000000000024A9 loc_24A9:                               ; CODE XREF: main+850↑j
.text:00000000000024A9                 cmp     [rsp+0C8h+var_88], 1
.text:00000000000024AF                 mov     [rsp+0C8h+var_C0], 0
.text:00000000000024B8                 jz      loc_2206
.text:00000000000024BE                 xchg    ax, ax
.text:00000000000024C0
.text:00000000000024C0 loc_24C0:                               ; CODE XREF: main+B70↓j
.text:00000000000024C0                 xor     r15d, r15d
.text:00000000000024C3                 cmp     [rsp+0C8h+var_68], 1
.text:00000000000024C9                 mov     rax, [rsp+0C8h+var_C0]
.text:00000000000024CE                 lea     rbp, ds:0[rax*8]
.text:00000000000024D6                 jz      short loc_2509
.text:00000000000024D8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000024E0
.text:00000000000024E0 loc_24E0:                               ; CODE XREF: main+B57↓j
.text:00000000000024E0                 mov     rdx, [rsp+0C8h+var_58]
.text:00000000000024E5                 mov     rsi, [rdx+r15*8]
.text:00000000000024E9                 mov     rdx, [rsp+0C8h+var_78]
.text:00000000000024EE                 add     r15, 1
.text:00000000000024F2                 mov     rdi, [rdx+rbp]
.text:00000000000024F6                 call    prjoin
.text:00000000000024FB                 mov     rax, [rsp+0C8h+var_68]
.text:0000000000002500                 lea     rdx, [rax-1]
.text:0000000000002504                 cmp     r15, rdx
.text:0000000000002507                 jb      short loc_24E0
.text:0000000000002509
.text:0000000000002509 loc_2509:                               ; CODE XREF: main+B26↑j
.text:0000000000002509                 add     [rsp+0C8h+var_C0], 1
.text:000000000000250F                 mov     rax, [rsp+0C8h+var_88]
.text:0000000000002514                 mov     rcx, [rsp+0C8h+var_C0]
.text:0000000000002519                 sub     rax, 1
.text:000000000000251D                 cmp     rcx, rax
.text:0000000000002520                 jb      short loc_24C0
.text:0000000000002522                 jmp     loc_2206
.text:0000000000002527 ; ---------------------------------------------------------------------------
.text:0000000000002527
.text:0000000000002527 loc_2527:                               ; CODE XREF: main+A85↑j
.text:0000000000002527                 mov     rax, [rsp+0C8h+var_78]
.text:000000000000252C                 lea     rsi, uni_blank
.text:0000000000002533                 mov     rdi, [rax]
.text:0000000000002536                 call    prjoin
.text:000000000000253B                 jmp     loc_243B
.text:0000000000002540 ; ---------------------------------------------------------------------------
.text:0000000000002540
.text:0000000000002540 loc_2540:                               ; CODE XREF: main+9EF↑j
.text:0000000000002540                 movzx   eax, cs:print_unpairables_2
.text:0000000000002547
.text:0000000000002547 loc_2547:                               ; CODE XREF: main+6E8↑j
.text:0000000000002547                 cmp     [rsp+0C8h+var_68], 0
.text:000000000000254D                 jz      loc_209E
.text:0000000000002553
.text:0000000000002553 loc_2553:                               ; CODE XREF: main+A60↑j
.text:0000000000002553                 test    al, al
.text:0000000000002555                 jnz     loc_2674
.text:000000000000255B
.text:000000000000255B loc_255B:                               ; CODE XREF: main+CD8↓j
.text:000000000000255B                 cmp     [rsp+0C8h+var_88], 0
.text:0000000000002561                 jnz     loc_2668
.text:0000000000002567
.text:0000000000002567 loc_2567:                               ; CODE XREF: main+CBF↓j
.text:0000000000002567                 lea     rbp, [rsp+0C8h+ptr]
.text:000000000000256C                 lea     r15, uni_blank
.text:0000000000002573
.text:0000000000002573 loc_2573:                               ; CODE XREF: main+BEB↓j
.text:0000000000002573                                         ; main+C06↓j ...
.text:0000000000002573                 mov     edx, 2
.text:0000000000002578                 mov     rsi, rbp
.text:000000000000257B                 mov     rdi, rbx
.text:000000000000257E                 call    get_line
.text:0000000000002583                 test    al, al
.text:0000000000002585                 jz      loc_2416
.text:000000000000258B                 cmp     cs:print_unpairables_2, 0
.text:0000000000002592                 jnz     short loc_25A2
.text:0000000000002594                 cmp     cs:byte_20B199, 0
.text:000000000000259B                 jz      short loc_2573
.text:000000000000259D                 jmp     loc_2416
.text:00000000000025A2 ; ---------------------------------------------------------------------------
.text:00000000000025A2
.text:00000000000025A2 loc_25A2:                               ; CODE XREF: main+BE2↑j
.text:00000000000025A2                 mov     rsi, [rsp+0C8h+ptr]
.text:00000000000025A7                 mov     rdi, r15
.text:00000000000025AA                 call    prjoin
.text:00000000000025AF                 cmp     cs:byte_20B199, 0
.text:00000000000025B6                 jz      short loc_2573
.text:00000000000025B8                 cmp     cs:print_unpairables_2, 0
.text:00000000000025BF                 jnz     short loc_2573
.text:00000000000025C1                 jmp     loc_2416
.text:00000000000025C6 ; ---------------------------------------------------------------------------
.text:00000000000025C6
.text:00000000000025C6 loc_25C6:                               ; CODE XREF: main+5A1↑j
.text:00000000000025C6                 lea     rsi, aHeader+5  ; "r"
.text:00000000000025CD                 mov     rdi, rbx
.text:00000000000025D0                 call    fopen_safer
.text:00000000000025D5                 mov     rbx, rax
.text:00000000000025D8                 jmp     loc_1F5E
.text:00000000000025DD ; ---------------------------------------------------------------------------
.text:00000000000025DD
.text:00000000000025DD loc_25DD:                               ; CODE XREF: main+695↑j
.text:00000000000025DD                 mov     rdx, [rsp+0C8h+var_78]
.text:00000000000025E2                 test    rax, rax
.text:00000000000025E5                 lea     rsi, uni_blank
.text:00000000000025EC                 mov     rdi, [rdx]
.text:00000000000025EF                 jnz     short loc_265E
.text:00000000000025F1
.text:00000000000025F1 loc_25F1:                               ; CODE XREF: main+CB6↓j
.text:00000000000025F1                 call    prjoin
.text:00000000000025F6                 cmp     [rsp+0C8h+var_88], 0
.text:00000000000025FC                 mov     cs:prevline, 0
.text:0000000000002607                 mov     cs:qword_20B1D8, 0
.text:0000000000002612                 jz      short loc_262D
.text:0000000000002614                 mov     edx, 1
.text:0000000000002619                 mov     rsi, r14
.text:000000000000261C                 mov     rdi, r12
.text:000000000000261F                 mov     [rsp+0C8h+var_88], 0
.text:0000000000002628                 call    getseq
.text:000000000000262D
.text:000000000000262D loc_262D:                               ; CODE XREF: main+C62↑j
.text:000000000000262D                 cmp     [rsp+0C8h+var_68], 0
.text:0000000000002633                 jz      loc_2264
.text:0000000000002639                 mov     edx, 2
.text:000000000000263E                 mov     rsi, r13
.text:0000000000002641                 mov     rdi, rbx
.text:0000000000002644                 mov     [rsp+0C8h+var_68], 0
.text:000000000000264D                 call    getseq
.text:0000000000002652                 jmp     loc_2264
.text:0000000000002657 ; ---------------------------------------------------------------------------
.text:0000000000002657
.text:0000000000002657 loc_2657:                               ; CODE XREF: main+69E↑j
.text:0000000000002657                 lea     rdi, uni_blank
.text:000000000000265E
.text:000000000000265E loc_265E:                               ; CODE XREF: main+C3F↑j
.text:000000000000265E                 mov     rax, [rsp+0C8h+var_58]
.text:0000000000002663                 mov     rsi, [rax]
.text:0000000000002666                 jmp     short loc_25F1
.text:0000000000002668 ; ---------------------------------------------------------------------------
.text:0000000000002668
.text:0000000000002668 loc_2668:                               ; CODE XREF: main+BB1↑j
.text:0000000000002668                 mov     cs:seen_unpairable, 1
.text:000000000000266F                 jmp     loc_2567
.text:0000000000002674 ; ---------------------------------------------------------------------------
.text:0000000000002674
.text:0000000000002674 loc_2674:                               ; CODE XREF: main+BA5↑j
.text:0000000000002674                 mov     rax, [rsp+0C8h+var_58]
.text:0000000000002679                 lea     rdi, uni_blank
.text:0000000000002680                 mov     rsi, [rax]
.text:0000000000002683                 call    prjoin
.text:0000000000002688                 jmp     loc_255B
.text:000000000000268D ; ---------------------------------------------------------------------------
.text:000000000000268D
.text:000000000000268D loc_268D:                               ; CODE XREF: main+A00↑j
.text:000000000000268D                                         ; main+D33↓j
.text:000000000000268D                 mov     rax, [rsp+0C8h+var_78]
.text:0000000000002692                 lea     rsi, uni_blank
.text:0000000000002699                 mov     rdi, [rax]
.text:000000000000269C                 call    prjoin
.text:00000000000026A1                 jmp     loc_23BC
.text:00000000000026A6 ; ---------------------------------------------------------------------------
.text:00000000000026A6
.text:00000000000026A6 loc_26A6:                               ; CODE XREF: main+A3B↑j
.text:00000000000026A6                 mov     rdi, [rsp+0C8h+ptr]
.text:00000000000026AB                 lea     rsi, uni_blank
.text:00000000000026B2                 call    prjoin
.text:00000000000026B7                 cmp     cs:issued_disorder_warning, 0
.text:00000000000026BE                 jz      loc_23D0
.text:00000000000026C4                 cmp     cs:print_unpairables_1, 0
.text:00000000000026CB                 jnz     loc_23D0
.text:00000000000026D1                 jmp     loc_23FA
.text:00000000000026D6 ; ---------------------------------------------------------------------------
.text:00000000000026D6
.text:00000000000026D6 loc_26D6:                               ; CODE XREF: main+245↑j
.text:00000000000026D6                 xor     edi, edi        ; status
.text:00000000000026D8                 call    usage
.text:00000000000026DD ; ---------------------------------------------------------------------------
.text:00000000000026DD
.text:00000000000026DD loc_26DD:                               ; CODE XREF: main+6D9↑j
.text:00000000000026DD                 xor     r15d, r15d
.text:00000000000026E0                 test    rax, rax
.text:00000000000026E3                 jnz     short loc_268D
.text:00000000000026E5                 movzx   eax, cs:print_unpairables_2
.text:00000000000026EC                 test    al, al
.text:00000000000026EE                 jz      loc_209E
.text:00000000000026F4                 jmp     loc_240A
.text:00000000000026F9 ; ---------------------------------------------------------------------------
.text:00000000000026F9
.text:00000000000026F9 loc_26F9:                               ; CODE XREF: main+2BE↑j
.text:00000000000026F9                                         ; main+2D1↑j
.text:00000000000026F9                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002700                 call    quote
.text:0000000000002705                 lea     rsi, msgid      ; "invalid field number: %s"
.text:000000000000270C                 mov     rbx, rax
.text:000000000000270F                 mov     edx, 5          ; category
.text:0000000000002714                 xor     edi, edi        ; domainname
.text:0000000000002716                 call    _dcgettext
.text:000000000000271B                 mov     rcx, rbx
.text:000000000000271E                 mov     rdx, rax        ; format
.text:0000000000002721                 xor     esi, esi        ; errnum
.text:0000000000002723                 mov     edi, 1          ; status
.text:0000000000002728                 xor     eax, eax
.text:000000000000272A                 call    _error
.text:000000000000272F
.text:000000000000272F loc_272F:                               ; CODE XREF: main+385↑j
.text:000000000000272F                 lea     rsi, aConflictingEmp ; "conflicting empty-field replacement str"...
.text:0000000000002736                 mov     edx, 5          ; category
.text:000000000000273B                 xor     edi, edi        ; domainname
.text:000000000000273D                 call    _dcgettext
.text:0000000000002742                 xor     esi, esi        ; errnum
.text:0000000000002744                 mov     rdx, rax        ; format
.text:0000000000002747                 mov     edi, 1          ; status
.text:000000000000274C                 xor     eax, eax
.text:000000000000274E                 call    _error
.text:0000000000002753
.text:0000000000002753 loc_2753:                               ; CODE XREF: main+739↑j
.text:0000000000002753                                         ; main+746↑j
.text:0000000000002753                 lea     rsi, aInputIsNotInSo ; "input is not in sorted order"
.text:000000000000275A                 mov     edx, 5          ; category
.text:000000000000275F                 xor     edi, edi        ; domainname
.text:0000000000002761                 call    _dcgettext
.text:0000000000002766                 xor     esi, esi        ; errnum
.text:0000000000002768                 mov     rdx, rax        ; format
.text:000000000000276B                 mov     edi, 1          ; status
.text:0000000000002770                 xor     eax, eax
.text:0000000000002772                 call    _error
.text:0000000000002777
.text:0000000000002777 loc_2777:                               ; CODE XREF: main+72C↑j
.text:0000000000002777                 mov     rdx, cs:s1
.text:000000000000277E                 mov     esi, 3
.text:0000000000002783                 xor     edi, edi
.text:0000000000002785                 call    quotearg_n_style_colon
.text:000000000000278A                 mov     rbx, rax
.text:000000000000278D                 call    ___errno_location
.text:0000000000002792                 mov     esi, [rax]      ; errnum
.text:0000000000002794                 lea     rdx, msgid+16h  ; format
.text:000000000000279B                 mov     rcx, rbx
.text:000000000000279E                 mov     edi, 1          ; status
.text:00000000000027A3                 xor     eax, eax
.text:00000000000027A5                 call    _error
.text:00000000000027AA
.text:00000000000027AA loc_27AA:                               ; CODE XREF: main+5BA↑j
.text:00000000000027AA                 lea     rsi, aBothFilesCanno ; "both files cannot be standard input"
.text:00000000000027B1                 mov     edx, 5          ; category
.text:00000000000027B6                 xor     edi, edi        ; domainname
.text:00000000000027B8                 call    _dcgettext
.text:00000000000027BD                 mov     rbx, rax
.text:00000000000027C0                 call    ___errno_location
.text:00000000000027C5                 mov     esi, [rax]      ; errnum
.text:00000000000027C7                 mov     rdx, rbx        ; format
.text:00000000000027CA                 mov     edi, 1          ; status
.text:00000000000027CF                 xor     eax, eax
.text:00000000000027D1                 call    _error
.text:00000000000027D6
.text:00000000000027D6 loc_27D6:                               ; CODE XREF: main+71C↑j
.text:00000000000027D6                 mov     rdx, cs:g_names
.text:00000000000027DD                 mov     esi, 3
.text:00000000000027E2                 xor     edi, edi
.text:00000000000027E4                 call    quotearg_n_style_colon
.text:00000000000027E9                 mov     rbx, rax
.text:00000000000027EC                 call    ___errno_location
.text:00000000000027F1                 mov     esi, [rax]      ; errnum
.text:00000000000027F3                 lea     rdx, msgid+16h  ; format
.text:00000000000027FA                 mov     rcx, rbx
.text:00000000000027FD                 mov     edi, 1          ; status
.text:0000000000002802                 xor     eax, eax
.text:0000000000002804                 call    _error
.text:0000000000002809
.text:0000000000002809 loc_2809:                               ; CODE XREF: main+75F↑j
.text:0000000000002809                 call    ___stack_chk_fail
.text:000000000000280E ; ---------------------------------------------------------------------------
.text:000000000000280E
.text:000000000000280E loc_280E:                               ; CODE XREF: main+48A↑j
.text:000000000000280E                 mov     rdi, r12
.text:0000000000002811                 call    quote
.text:0000000000002816                 lea     rsi, aMultiCharacter ; "multi-character tab %s"
.text:000000000000281D                 mov     rbx, rax
.text:0000000000002820                 mov     edx, 5          ; category
.text:0000000000002825                 xor     edi, edi        ; domainname
.text:0000000000002827                 call    _dcgettext
.text:000000000000282C                 mov     rcx, rbx
.text:000000000000282F                 mov     rdx, rax        ; format
.text:0000000000002832                 xor     esi, esi        ; errnum
.text:0000000000002834                 mov     edi, 1          ; status
.text:0000000000002839                 xor     eax, eax
.text:000000000000283B                 call    _error
.text:0000000000002840
.text:0000000000002840 loc_2840:                               ; CODE XREF: main+5B1↑j
.text:0000000000002840                 mov     rdx, cs:s1
.text:0000000000002847                 mov     esi, 3
.text:000000000000284C                 xor     edi, edi
.text:000000000000284E                 call    quotearg_n_style_colon
.text:0000000000002853                 mov     rbx, rax
.text:0000000000002856                 call    ___errno_location
.text:000000000000285B                 mov     esi, [rax]      ; errnum
.text:000000000000285D                 lea     rdx, msgid+16h  ; format
.text:0000000000002864                 mov     rcx, rbx
.text:0000000000002867                 mov     edi, 1          ; status
.text:000000000000286C                 xor     eax, eax
.text:000000000000286E                 call    _error
.text:0000000000002873
.text:0000000000002873 loc_2873:                               ; CODE XREF: main+583↑j
.text:0000000000002873                 mov     rdx, cs:g_names
.text:000000000000287A                 mov     esi, 3
.text:000000000000287F                 xor     edi, edi
.text:0000000000002881                 call    quotearg_n_style_colon
.text:0000000000002886                 mov     rbx, rax
.text:0000000000002889                 call    ___errno_location
.text:000000000000288E                 mov     esi, [rax]      ; errnum
.text:0000000000002890                 lea     rdx, msgid+16h  ; format
.text:0000000000002897                 mov     rcx, rbx
.text:000000000000289A                 mov     edi, 1          ; status
.text:000000000000289F                 xor     eax, eax
.text:00000000000028A1                 call    _error
.text:00000000000028A6
.text:00000000000028A6 loc_28A6:                               ; CODE XREF: main+51D↑j
.text:00000000000028A6                 test    eax, eax
.text:00000000000028A8                 jnz     short loc_28F4
.text:00000000000028AA                 lea     rsi, aMissingOperand ; "missing operand"
.text:00000000000028B1                 xor     edi, edi        ; domainname
.text:00000000000028B3                 mov     edx, 5          ; category
.text:00000000000028B8                 call    _dcgettext
.text:00000000000028BD                 xor     esi, esi        ; errnum
.text:00000000000028BF                 mov     rdx, rax        ; format
.text:00000000000028C2                 xor     edi, edi        ; status
.text:00000000000028C4                 xor     eax, eax
.text:00000000000028C6                 call    _error
.text:00000000000028CB                 jmp     loc_1B41
.text:00000000000028D0 ; ---------------------------------------------------------------------------
.text:00000000000028D0
.text:00000000000028D0 loc_28D0:                               ; CODE XREF: main+3FD↑j
.text:00000000000028D0                 lea     rsi, aIncompatibleTa ; "incompatible tabs"
.text:00000000000028D7                 mov     edx, 5          ; category
.text:00000000000028DC                 xor     edi, edi        ; domainname
.text:00000000000028DE                 call    _dcgettext
.text:00000000000028E3                 xor     esi, esi        ; errnum
.text:00000000000028E5                 mov     rdx, rax        ; format
.text:00000000000028E8                 mov     edi, 1          ; status
.text:00000000000028ED                 xor     eax, eax
.text:00000000000028EF                 call    _error
.text:00000000000028F4
.text:00000000000028F4 loc_28F4:                               ; CODE XREF: main+EF8↑j
.text:00000000000028F4                 mov     rdi, [rbx+rbp*8-8]
.text:00000000000028F9                 call    quote
.text:00000000000028FE                 lea     rsi, aMissingOperand_0 ; "missing operand after %s"
.text:0000000000002905                 mov     rbx, rax
.text:0000000000002908                 xor     edi, edi        ; domainname
.text:000000000000290A                 mov     edx, 5          ; category
.text:000000000000290F                 call    _dcgettext
.text:0000000000002914                 mov     rcx, rbx
.text:0000000000002917                 mov     rdx, rax        ; format
.text:000000000000291A                 xor     esi, esi        ; errnum
.text:000000000000291C                 xor     edi, edi        ; status
.text:000000000000291E                 xor     eax, eax
.text:0000000000002920                 call    _error
.text:0000000000002925                 jmp     loc_1B41
.text:0000000000002925 ; } // starts at 19B0
.text:0000000000002925 main            endp
.text:0000000000002925
.text:0000000000002925 ; ---------------------------------------------------------------------------
.text:000000000000292A                 align 10h
.text:0000000000002930
.text:0000000000002930 ; =============== S U B R O U T I N E =======================================
.text:0000000000002930
.text:0000000000002930 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002930
.text:0000000000002930 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002930                 public start
.text:0000000000002930 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002930 ; __unwind {
.text:0000000000002930                 xor     ebp, ebp
.text:0000000000002932                 mov     r9, rdx         ; rtld_fini
.text:0000000000002935                 pop     rsi             ; argc
.text:0000000000002936                 mov     rdx, rsp        ; ubp_av
.text:0000000000002939                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000293D                 push    rax
.text:000000000000293E                 push    rsp             ; stack_end
.text:000000000000293F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002946                 lea     rcx, __libc_csu_init ; init
.text:000000000000294D                 lea     rdi, main       ; main
.text:0000000000002954                 call    cs:__libc_start_main_ptr
.text:000000000000295A                 hlt
.text:000000000000295A ; } // starts at 2930
.text:000000000000295A start           endp
.text:000000000000295A
.text:000000000000295A ; ---------------------------------------------------------------------------
.text:000000000000295B                 align 20h
.text:0000000000002960
.text:0000000000002960 ; =============== S U B R O U T I N E =======================================
.text:0000000000002960
.text:0000000000002960 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002960
.text:0000000000002960 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2A13↓p
.text:0000000000002960                 lea     rdi, __bss_start
.text:0000000000002967                 push    rbp
.text:0000000000002968                 lea     rax, __bss_start
.text:000000000000296F                 cmp     rax, rdi
.text:0000000000002972                 mov     rbp, rsp
.text:0000000000002975                 jz      short loc_2990
.text:0000000000002977                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000297E                 test    rax, rax
.text:0000000000002981                 jz      short loc_2990
.text:0000000000002983                 pop     rbp
.text:0000000000002984                 jmp     rax
.text:0000000000002984 ; ---------------------------------------------------------------------------
.text:0000000000002986                 align 10h
.text:0000000000002990
.text:0000000000002990 loc_2990:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002990                                         ; deregister_tm_clones+21↑j
.text:0000000000002990                 pop     rbp
.text:0000000000002991                 retn
.text:0000000000002991 deregister_tm_clones endp
.text:0000000000002991
.text:0000000000002991 ; ---------------------------------------------------------------------------
.text:0000000000002992                 align 20h
.text:00000000000029A0
.text:00000000000029A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000029A0
.text:00000000000029A0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000029A0
.text:00000000000029A0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:00000000000029A0                 lea     rdi, __bss_start
.text:00000000000029A7                 lea     rsi, __bss_start
.text:00000000000029AE                 push    rbp
.text:00000000000029AF                 sub     rsi, rdi
.text:00000000000029B2                 mov     rbp, rsp
.text:00000000000029B5                 sar     rsi, 3
.text:00000000000029B9                 mov     rax, rsi
.text:00000000000029BC                 shr     rax, 3Fh
.text:00000000000029C0                 add     rsi, rax
.text:00000000000029C3                 sar     rsi, 1
.text:00000000000029C6                 jz      short loc_29E0
.text:00000000000029C8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:00000000000029CF                 test    rax, rax
.text:00000000000029D2                 jz      short loc_29E0
.text:00000000000029D4                 pop     rbp
.text:00000000000029D5                 jmp     rax
.text:00000000000029D5 ; ---------------------------------------------------------------------------
.text:00000000000029D7                 align 20h
.text:00000000000029E0
.text:00000000000029E0 loc_29E0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000029E0                                         ; register_tm_clones+32↑j
.text:00000000000029E0                 pop     rbp
.text:00000000000029E1                 retn
.text:00000000000029E1 register_tm_clones endp
.text:00000000000029E1
.text:00000000000029E1 ; ---------------------------------------------------------------------------
.text:00000000000029E2                 align 10h
.text:00000000000029F0
.text:00000000000029F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000029F0
.text:00000000000029F0 ; Attributes: info_from_lumina
.text:00000000000029F0
.text:00000000000029F0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000029F0                 cmp     cs:completed_7697, 0
.text:00000000000029F7                 jnz     short locret_2A28
.text:00000000000029F9                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002A01                 push    rbp
.text:0000000000002A02                 mov     rbp, rsp
.text:0000000000002A05                 jz      short loc_2A13
.text:0000000000002A07                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000002A0E                 call    __cxa_finalize
.text:0000000000002A13
.text:0000000000002A13 loc_2A13:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002A13                 call    deregister_tm_clones
.text:0000000000002A18                 mov     cs:completed_7697, 1
.text:0000000000002A1F                 pop     rbp
.text:0000000000002A20                 retn
.text:0000000000002A20 ; ---------------------------------------------------------------------------
.text:0000000000002A21                 align 8
.text:0000000000002A28
.text:0000000000002A28 locret_2A28:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002A28                 rep retn
.text:0000000000002A28 __do_global_dtors_aux endp
.text:0000000000002A28
.text:0000000000002A28 ; ---------------------------------------------------------------------------
.text:0000000000002A2A                 align 10h
.text:0000000000002A30
.text:0000000000002A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A30
.text:0000000000002A30 ; Attributes: bp-based frame
.text:0000000000002A30
.text:0000000000002A30 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002A30                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002A30                 push    rbp
.text:0000000000002A31                 mov     rbp, rsp
.text:0000000000002A34                 pop     rbp
.text:0000000000002A35                 jmp     register_tm_clones
.text:0000000000002A35 frame_dummy     endp
.text:0000000000002A35
.text:0000000000002A35 ; ---------------------------------------------------------------------------
.text:0000000000002A3A                 align 20h
.text:0000000000002A40
.text:0000000000002A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A40
.text:0000000000002A40
.text:0000000000002A40 set_join_field  proc near               ; CODE XREF: main+1B6↑p
.text:0000000000002A40                                         ; main+21F↑p ...
.text:0000000000002A40 ; __unwind {
.text:0000000000002A40                 push    rbp
.text:0000000000002A41                 push    rbx
.text:0000000000002A42                 sub     rsp, 8
.text:0000000000002A46                 mov     rbx, [rdi]
.text:0000000000002A49                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002A4D                 jz      short loc_2A54
.text:0000000000002A4F                 cmp     rbx, rsi
.text:0000000000002A52                 jnz     short loc_2A5E
.text:0000000000002A54
.text:0000000000002A54 loc_2A54:                               ; CODE XREF: set_join_field+D↑j
.text:0000000000002A54                 mov     [rdi], rsi
.text:0000000000002A57                 add     rsp, 8
.text:0000000000002A5B                 pop     rbx
.text:0000000000002A5C                 pop     rbp
.text:0000000000002A5D                 retn
.text:0000000000002A5E ; ---------------------------------------------------------------------------
.text:0000000000002A5E
.text:0000000000002A5E loc_2A5E:                               ; CODE XREF: set_join_field+12↑j
.text:0000000000002A5E                 mov     rbp, rsi
.text:0000000000002A61                 lea     rsi, aIncompatibleJo ; "incompatible join fields %lu, %lu"
.text:0000000000002A68                 mov     edx, 5          ; category
.text:0000000000002A6D                 xor     edi, edi        ; domainname
.text:0000000000002A6F                 call    _dcgettext
.text:0000000000002A74                 lea     rcx, [rbx+1]
.text:0000000000002A78                 lea     r8, [rbp+1]
.text:0000000000002A7C                 mov     rdx, rax        ; format
.text:0000000000002A7F                 xor     esi, esi        ; errnum
.text:0000000000002A81                 mov     edi, 1          ; status
.text:0000000000002A86                 xor     eax, eax
.text:0000000000002A88                 call    _error
.text:0000000000002A88 ; } // starts at 2A40
.text:0000000000002A8D                 nop     dword ptr [rax]
.text:0000000000002A8D set_join_field  endp ; sp-analysis failed
.text:0000000000002A8D
.text:0000000000002A90
.text:0000000000002A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A90
.text:0000000000002A90
.text:0000000000002A90 string_to_join_field proc near          ; CODE XREF: main+1A7↑p
.text:0000000000002A90                                         ; main:loc_1BC0↑p ...
.text:0000000000002A90
.text:0000000000002A90 var_18          = qword ptr -18h
.text:0000000000002A90 var_10          = qword ptr -10h
.text:0000000000002A90
.text:0000000000002A90 ; __unwind {
.text:0000000000002A90                 push    rbx
.text:0000000000002A91                 lea     r8, accept+3    ; ""
.text:0000000000002A98                 xor     esi, esi
.text:0000000000002A9A                 mov     edx, 0Ah
.text:0000000000002A9F                 mov     rbx, rdi
.text:0000000000002AA2                 sub     rsp, 10h
.text:0000000000002AA6                 mov     rcx, rsp
.text:0000000000002AA9                 mov     rax, fs:28h
.text:0000000000002AB2                 mov     [rsp+18h+var_10], rax
.text:0000000000002AB7                 xor     eax, eax
.text:0000000000002AB9                 call    xstrtoul
.text:0000000000002ABE                 cmp     eax, 1
.text:0000000000002AC1                 jz      short loc_2AF0
.text:0000000000002AC3                 test    eax, eax
.text:0000000000002AC5                 jnz     short loc_2AF9
.text:0000000000002AC7                 mov     rax, [rsp+18h+var_18]
.text:0000000000002ACB                 test    rax, rax
.text:0000000000002ACE                 jz      short loc_2AF9
.text:0000000000002AD0                 sub     rax, 1
.text:0000000000002AD4
.text:0000000000002AD4 loc_2AD4:                               ; CODE XREF: string_to_join_field+67↓j
.text:0000000000002AD4                 mov     rdx, [rsp+18h+var_10]
.text:0000000000002AD9                 xor     rdx, fs:28h
.text:0000000000002AE2                 jnz     short loc_2B2B
.text:0000000000002AE4                 add     rsp, 10h
.text:0000000000002AE8                 pop     rbx
.text:0000000000002AE9                 retn
.text:0000000000002AE9 ; ---------------------------------------------------------------------------
.text:0000000000002AEA                 align 10h
.text:0000000000002AF0
.text:0000000000002AF0 loc_2AF0:                               ; CODE XREF: string_to_join_field+31↑j
.text:0000000000002AF0                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002AF7                 jmp     short loc_2AD4
.text:0000000000002AF9 ; ---------------------------------------------------------------------------
.text:0000000000002AF9
.text:0000000000002AF9 loc_2AF9:                               ; CODE XREF: string_to_join_field+35↑j
.text:0000000000002AF9                                         ; string_to_join_field+3E↑j
.text:0000000000002AF9                 mov     rdi, rbx
.text:0000000000002AFC                 call    quote
.text:0000000000002B01                 lea     rsi, msgid      ; "invalid field number: %s"
.text:0000000000002B08                 mov     rbx, rax
.text:0000000000002B0B                 mov     edx, 5          ; category
.text:0000000000002B10                 xor     edi, edi        ; domainname
.text:0000000000002B12                 call    _dcgettext
.text:0000000000002B17                 mov     rcx, rbx
.text:0000000000002B1A                 mov     rdx, rax        ; format
.text:0000000000002B1D                 xor     esi, esi        ; errnum
.text:0000000000002B1F                 mov     edi, 1          ; status
.text:0000000000002B24                 xor     eax, eax
.text:0000000000002B26                 call    _error
.text:0000000000002B2B
.text:0000000000002B2B loc_2B2B:                               ; CODE XREF: string_to_join_field+52↑j
.text:0000000000002B2B                 call    ___stack_chk_fail
.text:0000000000002B2B ; } // starts at 2A90
.text:0000000000002B2B string_to_join_field endp
.text:0000000000002B2B
.text:0000000000002B30
.text:0000000000002B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B30
.text:0000000000002B30
.text:0000000000002B30 ; __int64 __fastcall add_field_list(char *s)
.text:0000000000002B30 add_field_list  proc near               ; CODE XREF: main+49A↑p
.text:0000000000002B30                                         ; add_file_name_constprop_7+A1↓p
.text:0000000000002B30 ; __unwind {
.text:0000000000002B30                 push    r12
.text:0000000000002B32                 push    rbp
.text:0000000000002B33                 mov     rbp, rdi
.text:0000000000002B36                 push    rbx
.text:0000000000002B37                 jmp     short loc_2B99
.text:0000000000002B37 ; ---------------------------------------------------------------------------
.text:0000000000002B39                 align 20h
.text:0000000000002B40
.text:0000000000002B40 loc_2B40:                               ; CODE XREF: add_field_list+8D↓j
.text:0000000000002B40                 jl      loc_2BD5
.text:0000000000002B46                 cmp     al, 32h ; '2'
.text:0000000000002B48                 jg      loc_2BD5
.text:0000000000002B4E                 cmp     byte ptr [rbp+1], 2Eh ; '.'
.text:0000000000002B52                 jnz     loc_2C39
.text:0000000000002B58                 lea     rdi, [rbp+2]
.text:0000000000002B5C                 lea     ebx, [rax-30h]
.text:0000000000002B5F                 call    string_to_join_field
.text:0000000000002B64                 mov     rbp, rax
.text:0000000000002B67
.text:0000000000002B67 loc_2B67:                               ; CODE XREF: add_field_list+99↓j
.text:0000000000002B67                 mov     edi, 18h
.text:0000000000002B6C                 call    xmalloc
.text:0000000000002B71                 mov     rdx, cs:outlist_end
.text:0000000000002B78                 test    r12, r12
.text:0000000000002B7B                 mov     [rax], ebx
.text:0000000000002B7D                 mov     [rax+8], rbp
.text:0000000000002B81                 mov     qword ptr [rax+10h], 0
.text:0000000000002B89                 mov     cs:outlist_end, rax
.text:0000000000002B90                 mov     [rdx+10h], rax
.text:0000000000002B94                 jz      short loc_2BD0
.text:0000000000002B96                 mov     rbp, r12
.text:0000000000002B99
.text:0000000000002B99 loc_2B99:                               ; CODE XREF: add_field_list+7↑j
.text:0000000000002B99                 lea     rsi, accept     ; ", \t"
.text:0000000000002BA0                 mov     rdi, rbp        ; s
.text:0000000000002BA3                 xor     r12d, r12d
.text:0000000000002BA6                 call    _strpbrk
.text:0000000000002BAB                 test    rax, rax
.text:0000000000002BAE                 jz      short loc_2BB7
.text:0000000000002BB0                 lea     r12, [rax+1]
.text:0000000000002BB4                 mov     byte ptr [rax], 0
.text:0000000000002BB7
.text:0000000000002BB7 loc_2BB7:                               ; CODE XREF: add_field_list+7E↑j
.text:0000000000002BB7                 movsx   eax, byte ptr [rbp+0]
.text:0000000000002BBB                 cmp     al, 30h ; '0'
.text:0000000000002BBD                 jnz     short loc_2B40
.text:0000000000002BBF                 cmp     byte ptr [rbp+1], 0
.text:0000000000002BC3                 jnz     short loc_2C07
.text:0000000000002BC5                 xor     ebp, ebp
.text:0000000000002BC7                 xor     ebx, ebx
.text:0000000000002BC9                 jmp     short loc_2B67
.text:0000000000002BC9 ; ---------------------------------------------------------------------------
.text:0000000000002BCB                 align 10h
.text:0000000000002BD0
.text:0000000000002BD0 loc_2BD0:                               ; CODE XREF: add_field_list+64↑j
.text:0000000000002BD0                 pop     rbx
.text:0000000000002BD1                 pop     rbp
.text:0000000000002BD2                 pop     r12
.text:0000000000002BD4                 retn
.text:0000000000002BD5 ; ---------------------------------------------------------------------------
.text:0000000000002BD5
.text:0000000000002BD5 loc_2BD5:                               ; CODE XREF: add_field_list:loc_2B40↑j
.text:0000000000002BD5                                         ; add_field_list+18↑j
.text:0000000000002BD5                 mov     rdi, rbp
.text:0000000000002BD8                 call    quote
.text:0000000000002BDD                 lea     rsi, aInvalidFileNum ; "invalid file number in field spec: %s"
.text:0000000000002BE4                 mov     rbx, rax
.text:0000000000002BE7                 mov     edx, 5          ; category
.text:0000000000002BEC                 xor     edi, edi        ; domainname
.text:0000000000002BEE                 call    _dcgettext
.text:0000000000002BF3                 mov     rcx, rbx
.text:0000000000002BF6                 mov     rdx, rax        ; format
.text:0000000000002BF9                 xor     esi, esi        ; errnum
.text:0000000000002BFB                 mov     edi, 1          ; status
.text:0000000000002C00                 xor     eax, eax
.text:0000000000002C02                 call    _error
.text:0000000000002C07
.text:0000000000002C07 loc_2C07:                               ; CODE XREF: add_field_list+93↑j
.text:0000000000002C07                 mov     rdi, rbp
.text:0000000000002C0A                 call    quote
.text:0000000000002C0F                 lea     rsi, aInvalidFieldSp ; "invalid field specifier: %s"
.text:0000000000002C16                 mov     rbx, rax
.text:0000000000002C19                 mov     edx, 5          ; category
.text:0000000000002C1E                 xor     edi, edi        ; domainname
.text:0000000000002C20                 call    _dcgettext
.text:0000000000002C25                 mov     rcx, rbx
.text:0000000000002C28                 mov     rdx, rax        ; format
.text:0000000000002C2B                 xor     esi, esi        ; errnum
.text:0000000000002C2D                 mov     edi, 1          ; status
.text:0000000000002C32                 xor     eax, eax
.text:0000000000002C34                 call    _error
.text:0000000000002C39
.text:0000000000002C39 loc_2C39:                               ; CODE XREF: add_field_list+22↑j
.text:0000000000002C39                 mov     rdi, rbp
.text:0000000000002C3C                 call    quote
.text:0000000000002C41                 lea     rsi, aInvalidFieldSp ; "invalid field specifier: %s"
.text:0000000000002C48                 mov     rbx, rax
.text:0000000000002C4B                 mov     edx, 5          ; category
.text:0000000000002C50                 xor     edi, edi        ; domainname
.text:0000000000002C52                 call    _dcgettext
.text:0000000000002C57                 mov     rcx, rbx
.text:0000000000002C5A                 mov     rdx, rax        ; format
.text:0000000000002C5D                 xor     esi, esi        ; errnum
.text:0000000000002C5F                 mov     edi, 1          ; status
.text:0000000000002C64                 xor     eax, eax
.text:0000000000002C66                 call    _error
.text:0000000000002C66 ; } // starts at 2B30
.text:0000000000002C6B                 nop     dword ptr [rax+rax+00h]
.text:0000000000002C6B add_field_list  endp ; sp-analysis failed
.text:0000000000002C6B
.text:0000000000002C70
.text:0000000000002C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C70
.text:0000000000002C70
.text:0000000000002C70 freeline_part_2 proc near               ; CODE XREF: main+A74↑p
.text:0000000000002C70                                         ; _ZN10idAASBuild12ShutdownHashEv+10↓p ...
.text:0000000000002C70 ; __unwind {
.text:0000000000002C70                 push    rbx
.text:0000000000002C71                 mov     rbx, rdi
.text:0000000000002C74                 mov     rdi, [rdi+28h]  ; ptr
.text:0000000000002C78                 call    _free
.text:0000000000002C7D                 mov     rdi, [rbx+10h]  ; ptr
.text:0000000000002C81                 mov     qword ptr [rbx+28h], 0
.text:0000000000002C89                 call    _free
.text:0000000000002C8E                 mov     qword ptr [rbx+10h], 0
.text:0000000000002C96                 pop     rbx
.text:0000000000002C97                 retn
.text:0000000000002C97 ; } // starts at 2C70
.text:0000000000002C97 freeline_part_2 endp
.text:0000000000002C97
.text:0000000000002C97 ; ---------------------------------------------------------------------------
.text:0000000000002C98                 align 20h
.text:0000000000002CA0
.text:0000000000002CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002CA0
.text:0000000000002CA0 ; Attributes: info_from_lumina
.text:0000000000002CA0
.text:0000000000002CA0 ; __int64 __fastcall ZN10idAASBuild12ShutdownHashEv(idAASBuild *__hidden this)
.text:0000000000002CA0 _ZN10idAASBuild12ShutdownHashEv proc near
.text:0000000000002CA0                                         ; DATA XREF: main+9F↑o
.text:0000000000002CA0 ; __unwind {
.text:0000000000002CA0                 push    rbx
.text:0000000000002CA1                 mov     rbx, cs:spareline
.text:0000000000002CA8                 test    rbx, rbx
.text:0000000000002CAB                 jz      short loc_2CBD
.text:0000000000002CAD                 mov     rdi, rbx
.text:0000000000002CB0                 call    freeline_part_2
.text:0000000000002CB5                 mov     rdi, rbx        ; ptr
.text:0000000000002CB8                 call    _free
.text:0000000000002CBD
.text:0000000000002CBD loc_2CBD:                               ; CODE XREF: _ZN10idAASBuild12ShutdownHashEv+B↑j
.text:0000000000002CBD                 mov     rbx, cs:ptr
.text:0000000000002CC4                 test    rbx, rbx
.text:0000000000002CC7                 jz      short loc_2CE0
.text:0000000000002CC9                 mov     rdi, rbx
.text:0000000000002CCC                 call    freeline_part_2
.text:0000000000002CD1                 mov     rdi, rbx        ; ptr
.text:0000000000002CD4                 pop     rbx
.text:0000000000002CD5                 jmp     _free
.text:0000000000002CD5 ; ---------------------------------------------------------------------------
.text:0000000000002CDA                 align 20h
.text:0000000000002CE0
.text:0000000000002CE0 loc_2CE0:                               ; CODE XREF: _ZN10idAASBuild12ShutdownHashEv+27↑j
.text:0000000000002CE0                 pop     rbx
.text:0000000000002CE1                 retn
.text:0000000000002CE1 ; } // starts at 2CA0
.text:0000000000002CE1 _ZN10idAASBuild12ShutdownHashEv endp
.text:0000000000002CE1
.text:0000000000002CE1 ; ---------------------------------------------------------------------------
.text:0000000000002CE2                 align 10h
.text:0000000000002CF0
.text:0000000000002CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002CF0
.text:0000000000002CF0
.text:0000000000002CF0 delseq_isra_3   proc near               ; CODE XREF: main+700↑p
.text:0000000000002CF0                                         ; main+70D↑p
.text:0000000000002CF0 ; __unwind {
.text:0000000000002CF0                 push    r12
.text:0000000000002CF2                 push    rbp
.text:0000000000002CF3                 mov     rbp, rsi
.text:0000000000002CF6                 push    rbx
.text:0000000000002CF7                 cmp     qword ptr [rdi], 0
.text:0000000000002CFB                 jz      short loc_2D31
.text:0000000000002CFD                 mov     r12, rdi
.text:0000000000002D00                 xor     ebx, ebx
.text:0000000000002D02                 nop     word ptr [rax+rax+00h]
.text:0000000000002D08
.text:0000000000002D08 loc_2D08:                               ; CODE XREF: delseq_isra_3+3F↓j
.text:0000000000002D08                 mov     rax, [rbp+0]
.text:0000000000002D0C                 mov     rdi, [rax+rbx*8]
.text:0000000000002D10                 test    rdi, rdi
.text:0000000000002D13                 jz      short loc_2D22
.text:0000000000002D15                 call    freeline_part_2
.text:0000000000002D1A                 mov     rax, [rbp+0]
.text:0000000000002D1E                 mov     rdi, [rax+rbx*8] ; ptr
.text:0000000000002D22
.text:0000000000002D22 loc_2D22:                               ; CODE XREF: delseq_isra_3+23↑j
.text:0000000000002D22                 call    _free
.text:0000000000002D27                 add     rbx, 1
.text:0000000000002D2B                 cmp     rbx, [r12]
.text:0000000000002D2F                 jb      short loc_2D08
.text:0000000000002D31
.text:0000000000002D31 loc_2D31:                               ; CODE XREF: delseq_isra_3+B↑j
.text:0000000000002D31                 pop     rbx
.text:0000000000002D32                 mov     rdi, [rbp+0]    ; ptr
.text:0000000000002D36                 pop     rbp
.text:0000000000002D37                 pop     r12
.text:0000000000002D39                 jmp     _free
.text:0000000000002D39 ; } // starts at 2CF0
.text:0000000000002D39 delseq_isra_3   endp
.text:0000000000002D39
.text:0000000000002D39 ; ---------------------------------------------------------------------------
.text:0000000000002D3E                 align 20h
.text:0000000000002D40
.text:0000000000002D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D40
.text:0000000000002D40
.text:0000000000002D40 keycmp_isra_4   proc near               ; CODE XREF: main+7B5↑p
.text:0000000000002D40                                         ; main+81D↑p ...
.text:0000000000002D40 ; __unwind {
.text:0000000000002D40                 push    rbp
.text:0000000000002D41                 push    rbx
.text:0000000000002D42                 sub     rsp, 8
.text:0000000000002D46                 cmp     r8, rdi
.text:0000000000002D49                 jnb     short loc_2DC8
.text:0000000000002D4B                 shl     r8, 4
.text:0000000000002D4F                 add     r8, [rsi]
.text:0000000000002D52                 cmp     r9, rdx
.text:0000000000002D55                 mov     rbp, [r8+8]
.text:0000000000002D59                 jnb     loc_2E00
.text:0000000000002D5F                 shl     r9, 4
.text:0000000000002D63                 add     r9, [rcx]
.text:0000000000002D66                 test    rbp, rbp
.text:0000000000002D69                 mov     rsi, [r9]       ; s2
.text:0000000000002D6C                 mov     rbx, [r9+8]
.text:0000000000002D70                 jz      short loc_2DD8
.text:0000000000002D72                 test    rbx, rbx
.text:0000000000002D75                 jz      loc_2E43
.text:0000000000002D7B                 cmp     cs:ignore_case, 0
.text:0000000000002D82                 mov     rdi, [r8]       ; s1
.text:0000000000002D85                 jnz     loc_2E10
.text:0000000000002D8B                 cmp     cs:hard_LC_COLLATE, 0
.text:0000000000002D92                 jnz     loc_2E28
.text:0000000000002D98                 cmp     rbp, rbx
.text:0000000000002D9B                 mov     rdx, rbx
.text:0000000000002D9E                 cmovbe  rdx, rbp        ; n
.text:0000000000002DA2                 call    _memcmp
.text:0000000000002DA7
.text:0000000000002DA7 loc_2DA7:                               ; CODE XREF: keycmp_isra_4+DF↓j
.text:0000000000002DA7                 test    eax, eax
.text:0000000000002DA9                 jnz     short loc_2DF2
.text:0000000000002DAB                 cmp     rbp, rbx
.text:0000000000002DAE                 jb      loc_2E3C
.text:0000000000002DB4                 setnz   al
.text:0000000000002DB7                 add     rsp, 8
.text:0000000000002DBB                 movzx   eax, al
.text:0000000000002DBE                 pop     rbx
.text:0000000000002DBF                 pop     rbp
.text:0000000000002DC0                 retn
.text:0000000000002DC0 ; ---------------------------------------------------------------------------
.text:0000000000002DC1                 align 8
.text:0000000000002DC8
.text:0000000000002DC8 loc_2DC8:                               ; CODE XREF: keycmp_isra_4+9↑j
.text:0000000000002DC8                 cmp     r9, rdx
.text:0000000000002DCB                 jnb     short loc_2DF0
.text:0000000000002DCD                 shl     r9, 4
.text:0000000000002DD1                 add     r9, [rcx]
.text:0000000000002DD4                 mov     rbx, [r9+8]
.text:0000000000002DD8
.text:0000000000002DD8 loc_2DD8:                               ; CODE XREF: keycmp_isra_4+30↑j
.text:0000000000002DD8                 xor     eax, eax
.text:0000000000002DDA                 test    rbx, rbx
.text:0000000000002DDD                 setnz   al
.text:0000000000002DE0                 add     rsp, 8
.text:0000000000002DE4                 neg     eax
.text:0000000000002DE6                 pop     rbx
.text:0000000000002DE7                 pop     rbp
.text:0000000000002DE8                 retn
.text:0000000000002DE8 ; ---------------------------------------------------------------------------
.text:0000000000002DE9                 align 10h
.text:0000000000002DF0
.text:0000000000002DF0 loc_2DF0:                               ; CODE XREF: keycmp_isra_4+8B↑j
.text:0000000000002DF0                 xor     eax, eax
.text:0000000000002DF2
.text:0000000000002DF2 loc_2DF2:                               ; CODE XREF: keycmp_isra_4+69↑j
.text:0000000000002DF2                                         ; keycmp_isra_4+101↓j ...
.text:0000000000002DF2                 add     rsp, 8
.text:0000000000002DF6                 pop     rbx
.text:0000000000002DF7                 pop     rbp
.text:0000000000002DF8                 retn
.text:0000000000002DF8 ; ---------------------------------------------------------------------------
.text:0000000000002DF9                 align 20h
.text:0000000000002E00
.text:0000000000002E00 loc_2E00:                               ; CODE XREF: keycmp_isra_4+19↑j
.text:0000000000002E00                 xor     eax, eax
.text:0000000000002E02                 test    rbp, rbp
.text:0000000000002E05                 setnz   al
.text:0000000000002E08                 add     rsp, 8
.text:0000000000002E0C                 pop     rbx
.text:0000000000002E0D                 pop     rbp
.text:0000000000002E0E                 retn
.text:0000000000002E0E ; ---------------------------------------------------------------------------
.text:0000000000002E0F                 align 10h
.text:0000000000002E10
.text:0000000000002E10 loc_2E10:                               ; CODE XREF: keycmp_isra_4+45↑j
.text:0000000000002E10                 cmp     rbp, rbx
.text:0000000000002E13                 mov     rdx, rbx
.text:0000000000002E16                 cmovbe  rdx, rbp
.text:0000000000002E1A                 call    memcasecmp
.text:0000000000002E1F                 jmp     short loc_2DA7
.text:0000000000002E1F ; ---------------------------------------------------------------------------
.text:0000000000002E21                 align 8
.text:0000000000002E28
.text:0000000000002E28 loc_2E28:                               ; CODE XREF: keycmp_isra_4+52↑j
.text:0000000000002E28                 add     rsp, 8
.text:0000000000002E2C                 mov     rcx, rbx
.text:0000000000002E2F                 mov     rdx, rsi
.text:0000000000002E32                 pop     rbx
.text:0000000000002E33                 mov     rsi, rbp
.text:0000000000002E36                 pop     rbp
.text:0000000000002E37                 jmp     xmemcoll
.text:0000000000002E3C ; ---------------------------------------------------------------------------
.text:0000000000002E3C
.text:0000000000002E3C loc_2E3C:                               ; CODE XREF: keycmp_isra_4+6E↑j
.text:0000000000002E3C                 mov     eax, 0FFFFFFFFh
.text:0000000000002E41                 jmp     short loc_2DF2
.text:0000000000002E43 ; ---------------------------------------------------------------------------
.text:0000000000002E43
.text:0000000000002E43 loc_2E43:                               ; CODE XREF: keycmp_isra_4+35↑j
.text:0000000000002E43                 mov     eax, 1
.text:0000000000002E48                 jmp     short loc_2DF2
.text:0000000000002E48 ; } // starts at 2D40
.text:0000000000002E48 keycmp_isra_4   endp
.text:0000000000002E48
.text:0000000000002E48 ; ---------------------------------------------------------------------------
.text:0000000000002E4A                 align 10h
.text:0000000000002E50
.text:0000000000002E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E50
.text:0000000000002E50
.text:0000000000002E50 prfield_isra_5  proc near               ; CODE XREF: prfields+8F↓p
.text:0000000000002E50                                         ; prfields+DA↓p ...
.text:0000000000002E50 ; __unwind {
.text:0000000000002E50                 cmp     rdi, rsi
.text:0000000000002E53                 jnb     short loc_2E80
.text:0000000000002E55                 shl     rdi, 4
.text:0000000000002E59                 add     rdi, [rdx]
.text:0000000000002E5C                 mov     rdx, [rdi+8]    ; n
.text:0000000000002E60                 test    rdx, rdx
.text:0000000000002E63                 jz      short loc_2E80
.text:0000000000002E65                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002E6C                 mov     rdi, [rdi]      ; ptr
.text:0000000000002E6F                 mov     esi, 1          ; size
.text:0000000000002E74                 jmp     _fwrite_unlocked
.text:0000000000002E74 ; ---------------------------------------------------------------------------
.text:0000000000002E79                 align 20h
.text:0000000000002E80
.text:0000000000002E80 loc_2E80:                               ; CODE XREF: prfield_isra_5+3↑j
.text:0000000000002E80                                         ; prfield_isra_5+13↑j
.text:0000000000002E80                 mov     rdi, cs:empty_filler ; s
.text:0000000000002E87                 test    rdi, rdi
.text:0000000000002E8A                 jz      short locret_2EA0
.text:0000000000002E8C                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002E93                 jmp     _fputs_unlocked
.text:0000000000002E93 ; ---------------------------------------------------------------------------
.text:0000000000002E98                 align 20h
.text:0000000000002EA0
.text:0000000000002EA0 locret_2EA0:                            ; CODE XREF: prfield_isra_5+3A↑j
.text:0000000000002EA0                 rep retn
.text:0000000000002EA0 ; } // starts at 2E50
.text:0000000000002EA0 prfield_isra_5  endp
.text:0000000000002EA0
.text:0000000000002EA0 ; ---------------------------------------------------------------------------
.text:0000000000002EA2                 align 10h
.text:0000000000002EB0
.text:0000000000002EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002EB0
.text:0000000000002EB0
.text:0000000000002EB0 prfields        proc near               ; CODE XREF: prjoin+D8↓p
.text:0000000000002EB0                                         ; prjoin+EE↓p
.text:0000000000002EB0
.text:0000000000002EB0 var_48          = qword ptr -48h
.text:0000000000002EB0 var_40          = qword ptr -40h
.text:0000000000002EB0
.text:0000000000002EB0 ; __unwind {
.text:0000000000002EB0                 push    r15
.text:0000000000002EB2                 push    r14
.text:0000000000002EB4                 mov     r15, rdi
.text:0000000000002EB7                 push    r13
.text:0000000000002EB9                 push    r12
.text:0000000000002EBB                 mov     r12, rdx
.text:0000000000002EBE                 push    rbp
.text:0000000000002EBF                 push    rbx
.text:0000000000002EC0                 sub     rsp, 18h
.text:0000000000002EC4                 cmp     cs:autoformat, 0
.text:0000000000002ECB                 mov     [rsp+48h+var_40], rsi
.text:0000000000002ED0                 jnz     short loc_2ED6
.text:0000000000002ED2                 mov     r12, [rdi+18h]
.text:0000000000002ED6
.text:0000000000002ED6 loc_2ED6:                               ; CODE XREF: prfields+20↑j
.text:0000000000002ED6                 mov     r14d, cs:tab
.text:0000000000002EDD                 mov     eax, 20h ; ' '
.text:0000000000002EE2                 test    r14d, r14d
.text:0000000000002EE5                 cmovs   r14d, eax
.text:0000000000002EE9                 mov     rax, [rsp+48h+var_40]
.text:0000000000002EEE                 mov     ebp, r14d
.text:0000000000002EF1                 cmp     r12, rax
.text:0000000000002EF4                 mov     r13, rax
.text:0000000000002EF7                 cmovbe  r13, r12
.text:0000000000002EFB                 test    r13, r13
.text:0000000000002EFE                 jz      short loc_2F49
.text:0000000000002F00                 lea     rax, [r15+28h]
.text:0000000000002F04                 xor     ebx, ebx
.text:0000000000002F06                 movzx   r14d, r14b
.text:0000000000002F0A                 mov     [rsp+48h+var_48], rax
.text:0000000000002F0E                 xchg    ax, ax
.text:0000000000002F10
.text:0000000000002F10 loc_2F10:                               ; CODE XREF: prfields+97↓j
.text:0000000000002F10                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002F17                 mov     rax, [rdi+28h]
.text:0000000000002F1B                 cmp     rax, [rdi+30h]
.text:0000000000002F1F                 jnb     loc_2FA8
.text:0000000000002F25                 lea     rdx, [rax+1]
.text:0000000000002F29                 mov     [rdi+28h], rdx
.text:0000000000002F2D                 mov     [rax], bpl
.text:0000000000002F30
.text:0000000000002F30 loc_2F30:                               ; CODE XREF: prfields+100↓j
.text:0000000000002F30                 mov     rsi, [r15+18h]
.text:0000000000002F34                 mov     rdx, [rsp+48h+var_48]
.text:0000000000002F38                 mov     rdi, rbx
.text:0000000000002F3B                 add     rbx, 1
.text:0000000000002F3F                 call    prfield_isra_5
.text:0000000000002F44                 cmp     rbx, r13
.text:0000000000002F47                 jnz     short loc_2F10
.text:0000000000002F49
.text:0000000000002F49 loc_2F49:                               ; CODE XREF: prfields+4E↑j
.text:0000000000002F49                 mov     rbx, [rsp+48h+var_40]
.text:0000000000002F4E                 add     rbx, 1
.text:0000000000002F52                 cmp     r12, rbx
.text:0000000000002F55                 jbe     short loc_2F94
.text:0000000000002F57                 lea     r13, [r15+28h]
.text:0000000000002F5B                 movzx   r14d, bpl
.text:0000000000002F5F                 nop
.text:0000000000002F60
.text:0000000000002F60 loc_2F60:                               ; CODE XREF: prfields+E2↓j
.text:0000000000002F60                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002F67                 mov     rax, [rdi+28h]
.text:0000000000002F6B                 cmp     rax, [rdi+30h]
.text:0000000000002F6F                 jnb     short loc_2FB8
.text:0000000000002F71                 lea     rdx, [rax+1]
.text:0000000000002F75                 mov     [rdi+28h], rdx
.text:0000000000002F79                 mov     [rax], bpl
.text:0000000000002F7C
.text:0000000000002F7C loc_2F7C:                               ; CODE XREF: prfields+110↓j
.text:0000000000002F7C                 mov     rsi, [r15+18h]
.text:0000000000002F80                 mov     rdi, rbx
.text:0000000000002F83                 mov     rdx, r13
.text:0000000000002F86                 add     rbx, 1
.text:0000000000002F8A                 call    prfield_isra_5
.text:0000000000002F8F                 cmp     r12, rbx
.text:0000000000002F92                 jnz     short loc_2F60
.text:0000000000002F94
.text:0000000000002F94 loc_2F94:                               ; CODE XREF: prfields+A5↑j
.text:0000000000002F94                 add     rsp, 18h
.text:0000000000002F98                 pop     rbx
.text:0000000000002F99                 pop     rbp
.text:0000000000002F9A                 pop     r12
.text:0000000000002F9C                 pop     r13
.text:0000000000002F9E                 pop     r14
.text:0000000000002FA0                 pop     r15
.text:0000000000002FA2                 retn
.text:0000000000002FA2 ; ---------------------------------------------------------------------------
.text:0000000000002FA3                 align 8
.text:0000000000002FA8
.text:0000000000002FA8 loc_2FA8:                               ; CODE XREF: prfields+6F↑j
.text:0000000000002FA8                 mov     esi, r14d       ; int
.text:0000000000002FAB                 call    ___overflow
.text:0000000000002FB0                 jmp     loc_2F30
.text:0000000000002FB0 ; ---------------------------------------------------------------------------
.text:0000000000002FB5                 align 8
.text:0000000000002FB8
.text:0000000000002FB8 loc_2FB8:                               ; CODE XREF: prfields+BF↑j
.text:0000000000002FB8                 mov     esi, r14d       ; int
.text:0000000000002FBB                 call    ___overflow
.text:0000000000002FC0                 jmp     short loc_2F7C
.text:0000000000002FC0 ; } // starts at 2EB0
.text:0000000000002FC0 prfields        endp
.text:0000000000002FC0
.text:0000000000002FC0 ; ---------------------------------------------------------------------------
.text:0000000000002FC2                 align 10h
.text:0000000000002FD0
.text:0000000000002FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002FD0
.text:0000000000002FD0
.text:0000000000002FD0 prjoin          proc near               ; CODE XREF: main+ABF↑p
.text:0000000000002FD0                                         ; main+B46↑p ...
.text:0000000000002FD0 ; __unwind {
.text:0000000000002FD0                 push    r14
.text:0000000000002FD2                 push    r13
.text:0000000000002FD4                 mov     eax, 20h ; ' '
.text:0000000000002FD9                 push    r12
.text:0000000000002FDB                 mov     r12d, cs:tab
.text:0000000000002FE2                 mov     r13, rsi
.text:0000000000002FE5                 push    rbp
.text:0000000000002FE6                 push    rbx
.text:0000000000002FE7                 mov     rbp, rdi
.text:0000000000002FEA                 mov     rbx, cs:qword_20B170
.text:0000000000002FF1                 lea     r14, uni_blank
.text:0000000000002FF8                 test    r12d, r12d
.text:0000000000002FFB                 cmovs   r12d, eax
.text:0000000000002FFF                 test    rbx, rbx
.text:0000000000003002                 jz      short loc_3070
.text:0000000000003004
.text:0000000000003004 loc_3004:                               ; CODE XREF: prjoin+139↓j
.text:0000000000003004                 mov     eax, [rbx]
.text:0000000000003006                 test    eax, eax
.text:0000000000003008                 jnz     short loc_305D
.text:000000000000300A
.text:000000000000300A loc_300A:                               ; CODE XREF: prjoin+8B↓j
.text:000000000000300A                 cmp     rbp, r14
.text:000000000000300D                 jz      loc_30F0
.text:0000000000003013                 mov     rdi, cs:join_field_1
.text:000000000000301A                 mov     rax, rbp
.text:000000000000301D
.text:000000000000301D loc_301D:                               ; CODE XREF: prjoin+9B↓j
.text:000000000000301D                                         ; prjoin+12A↓j
.text:000000000000301D                 mov     rsi, [rax+18h]
.text:0000000000003021                 lea     rdx, [rax+28h]
.text:0000000000003025                 call    prfield_isra_5
.text:000000000000302A                 mov     rbx, [rbx+10h]
.text:000000000000302E                 test    rbx, rbx
.text:0000000000003031                 jz      loc_30C3
.text:0000000000003037                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000303E                 mov     rax, [rdi+28h]
.text:0000000000003042                 cmp     rax, [rdi+30h]
.text:0000000000003046                 jnb     loc_3100
.text:000000000000304C                 lea     rdx, [rax+1]
.text:0000000000003050                 mov     [rdi+28h], rdx
.text:0000000000003054                 mov     [rax], r12b
.text:0000000000003057                 mov     eax, [rbx]
.text:0000000000003059                 test    eax, eax
.text:000000000000305B                 jz      short loc_300A
.text:000000000000305D
.text:000000000000305D loc_305D:                               ; CODE XREF: prjoin+38↑j
.text:000000000000305D                 cmp     eax, 1
.text:0000000000003060                 mov     rax, rbp
.text:0000000000003063                 mov     rdi, [rbx+8]
.text:0000000000003067                 cmovnz  rax, r13
.text:000000000000306B                 jmp     short loc_301D
.text:000000000000306B ; ---------------------------------------------------------------------------
.text:000000000000306D                 align 10h
.text:0000000000003070
.text:0000000000003070 loc_3070:                               ; CODE XREF: prjoin+32↑j
.text:0000000000003070                 lea     rax, uni_blank
.text:0000000000003077                 cmp     rdi, rax
.text:000000000000307A                 jz      loc_3120
.text:0000000000003080                 mov     rdi, cs:join_field_1
.text:0000000000003087                 mov     rax, rbp
.text:000000000000308A
.text:000000000000308A loc_308A:                               ; CODE XREF: prjoin+15A↓j
.text:000000000000308A                 mov     rsi, [rax+18h]
.text:000000000000308E                 lea     rdx, [rax+28h]
.text:0000000000003092                 call    prfield_isra_5
.text:0000000000003097                 mov     rdx, cs:autocount_1
.text:000000000000309E                 mov     rsi, cs:join_field_1
.text:00000000000030A5                 mov     rdi, rbp
.text:00000000000030A8                 call    prfields
.text:00000000000030AD                 mov     rdx, cs:autocount_2
.text:00000000000030B4                 mov     rsi, cs:join_field_2
.text:00000000000030BB                 mov     rdi, r13
.text:00000000000030BE                 call    prfields
.text:00000000000030C3
.text:00000000000030C3 loc_30C3:                               ; CODE XREF: prjoin+61↑j
.text:00000000000030C3                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000030CA                 movzx   edx, cs:eolchar
.text:00000000000030D1                 mov     rax, [rdi+28h]
.text:00000000000030D5                 cmp     rax, [rdi+30h]
.text:00000000000030D9                 jnb     short loc_3110
.text:00000000000030DB                 lea     rcx, [rax+1]
.text:00000000000030DF                 mov     [rdi+28h], rcx
.text:00000000000030E3                 mov     [rax], dl
.text:00000000000030E5                 pop     rbx
.text:00000000000030E6                 pop     rbp
.text:00000000000030E7                 pop     r12
.text:00000000000030E9                 pop     r13
.text:00000000000030EB                 pop     r14
.text:00000000000030ED                 retn
.text:00000000000030ED ; ---------------------------------------------------------------------------
.text:00000000000030EE                 align 10h
.text:00000000000030F0
.text:00000000000030F0 loc_30F0:                               ; CODE XREF: prjoin+3D↑j
.text:00000000000030F0                 mov     rdi, cs:join_field_2
.text:00000000000030F7                 mov     rax, r13
.text:00000000000030FA                 jmp     loc_301D
.text:00000000000030FA ; ---------------------------------------------------------------------------
.text:00000000000030FF                 align 20h
.text:0000000000003100
.text:0000000000003100 loc_3100:                               ; CODE XREF: prjoin+76↑j
.text:0000000000003100                 movzx   esi, r12b       ; int
.text:0000000000003104                 call    ___overflow
.text:0000000000003109                 jmp     loc_3004
.text:0000000000003109 ; ---------------------------------------------------------------------------
.text:000000000000310E                 align 10h
.text:0000000000003110
.text:0000000000003110 loc_3110:                               ; CODE XREF: prjoin+109↑j
.text:0000000000003110                 pop     rbx
.text:0000000000003111                 pop     rbp
.text:0000000000003112                 pop     r12
.text:0000000000003114                 pop     r13
.text:0000000000003116                 pop     r14
.text:0000000000003118                 movzx   esi, dl         ; int
.text:000000000000311B                 jmp     ___overflow
.text:0000000000003120 ; ---------------------------------------------------------------------------
.text:0000000000003120
.text:0000000000003120 loc_3120:                               ; CODE XREF: prjoin+AA↑j
.text:0000000000003120                 mov     rdi, cs:join_field_2
.text:0000000000003127                 mov     rax, rsi
.text:000000000000312A                 jmp     loc_308A
.text:000000000000312A ; } // starts at 2FD0
.text:000000000000312A prjoin          endp
.text:000000000000312A
.text:000000000000312A ; ---------------------------------------------------------------------------
.text:000000000000312F                 align 10h
.text:0000000000003130
.text:0000000000003130 ; =============== S U B R O U T I N E =======================================
.text:0000000000003130
.text:0000000000003130
.text:0000000000003130 extract_field   proc near               ; CODE XREF: get_line+118↓p
.text:0000000000003130                                         ; get_line+15C↓p ...
.text:0000000000003130 ; __unwind {
.text:0000000000003130                 push    r12
.text:0000000000003132                 mov     r12, rsi
.text:0000000000003135                 push    rbp
.text:0000000000003136                 push    rbx
.text:0000000000003137                 mov     rax, [rdi+18h]
.text:000000000000313B                 mov     rbx, rdi
.text:000000000000313E                 mov     rsi, [rdi+20h]
.text:0000000000003142                 mov     rbp, rdx
.text:0000000000003145                 mov     rdi, [rdi+28h]
.text:0000000000003149                 cmp     rax, rsi
.text:000000000000314C                 jnb     short loc_3170
.text:000000000000314E
.text:000000000000314E loc_314E:                               ; CODE XREF: extract_field+77↓j
.text:000000000000314E                 mov     rdx, rax
.text:0000000000003151                 add     rax, 1
.text:0000000000003155                 shl     rdx, 4
.text:0000000000003159                 add     rdi, rdx
.text:000000000000315C                 mov     [rdi], r12
.text:000000000000315F                 mov     [rdi+8], rbp
.text:0000000000003163                 mov     [rbx+18h], rax
.text:0000000000003167                 pop     rbx
.text:0000000000003168                 pop     rbp
.text:0000000000003169                 pop     r12
.text:000000000000316B                 retn
.text:000000000000316B ; ---------------------------------------------------------------------------
.text:000000000000316C                 align 10h
.text:0000000000003170
.text:0000000000003170 loc_3170:                               ; CODE XREF: extract_field+1C↑j
.text:0000000000003170                 test    rdi, rdi
.text:0000000000003173                 jz      short loc_31B0
.text:0000000000003175                 mov     rax, 555555555555554h
.text:000000000000317F                 cmp     rsi, rax
.text:0000000000003182                 ja      short loc_31D5
.text:0000000000003184                 mov     rax, rsi
.text:0000000000003187                 shr     rax, 1
.text:000000000000318A                 lea     rsi, [rsi+rax+1]
.text:000000000000318F
.text:000000000000318F loc_318F:                               ; CODE XREF: extract_field+A3↓j
.text:000000000000318F                 mov     [rbx+20h], rsi
.text:0000000000003193                 shl     rsi, 4
.text:0000000000003197                 call    xrealloc
.text:000000000000319C                 mov     rdi, rax
.text:000000000000319F                 mov     [rbx+28h], rax
.text:00000000000031A3                 mov     rax, [rbx+18h]
.text:00000000000031A7                 jmp     short loc_314E
.text:00000000000031A7 ; ---------------------------------------------------------------------------
.text:00000000000031A9                 align 10h
.text:00000000000031B0
.text:00000000000031B0 loc_31B0:                               ; CODE XREF: extract_field+43↑j
.text:00000000000031B0                 test    rsi, rsi
.text:00000000000031B3                 mov     eax, 8
.text:00000000000031B8                 mov     edx, 10h
.text:00000000000031BD                 cmovz   rsi, rax
.text:00000000000031C1                 mov     rax, rdx
.text:00000000000031C4                 xor     ecx, ecx
.text:00000000000031C6                 mul     rsi
.text:00000000000031C9                 jo      short loc_31DA
.text:00000000000031CB
.text:00000000000031CB loc_31CB:                               ; CODE XREF: extract_field+AF↓j
.text:00000000000031CB                 test    rax, rax
.text:00000000000031CE                 js      short loc_31D5
.text:00000000000031D0                 test    rcx, rcx
.text:00000000000031D3                 jz      short loc_318F
.text:00000000000031D5
.text:00000000000031D5 loc_31D5:                               ; CODE XREF: extract_field+52↑j
.text:00000000000031D5                                         ; extract_field+9E↑j
.text:00000000000031D5                 call    xalloc_die
.text:00000000000031DA ; ---------------------------------------------------------------------------
.text:00000000000031DA
.text:00000000000031DA loc_31DA:                               ; CODE XREF: extract_field+99↑j
.text:00000000000031DA                 mov     ecx, 1
.text:00000000000031DF                 jmp     short loc_31CB
.text:00000000000031DF ; } // starts at 3130
.text:00000000000031DF extract_field   endp
.text:00000000000031DF
.text:00000000000031DF ; ---------------------------------------------------------------------------
.text:00000000000031E1                 align 10h
.text:00000000000031F0
.text:00000000000031F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000031F0
.text:00000000000031F0
.text:00000000000031F0 get_line        proc near               ; CODE XREF: main+A2B↑p
.text:00000000000031F0                                         ; main+BCE↑p ...
.text:00000000000031F0
.text:00000000000031F0 var_48          = qword ptr -48h
.text:00000000000031F0 var_3C          = dword ptr -3Ch
.text:00000000000031F0
.text:00000000000031F0 ; __unwind {
.text:00000000000031F0                 push    r15
.text:00000000000031F2                 push    r14
.text:00000000000031F4                 mov     r14, rdi
.text:00000000000031F7                 push    r13
.text:00000000000031F9                 push    r12
.text:00000000000031FB                 lea     r12, prevline
.text:0000000000003202                 push    rbp
.text:0000000000003203                 push    rbx
.text:0000000000003204                 lea     ebx, [rdx-1]
.text:0000000000003207                 mov     rbp, rsi
.text:000000000000320A                 movsxd  rbx, ebx
.text:000000000000320D                 sub     rsp, 18h
.text:0000000000003211                 mov     r13, [rsi]
.text:0000000000003214                 cmp     [r12+rbx*8], r13
.text:0000000000003218                 mov     [rsp+48h+var_3C], edx
.text:000000000000321C                 jz      loc_3500
.text:0000000000003222                 test    r13, r13
.text:0000000000003225                 jz      loc_351E
.text:000000000000322B
.text:000000000000322B loc_322B:                               ; CODE XREF: get_line+328↓j
.text:000000000000322B                 mov     qword ptr [r13+18h], 0
.text:0000000000003233
.text:0000000000003233 loc_3233:                               ; CODE XREF: get_line+344↓j
.text:0000000000003233                 movsx   edx, cs:eolchar
.text:000000000000323A                 mov     rsi, r14
.text:000000000000323D                 mov     rdi, r13
.text:0000000000003240                 call    readlinebuffer_delim
.text:0000000000003245                 test    rax, rax
.text:0000000000003248                 jz      loc_34D0
.text:000000000000324E                 lea     rax, line_no
.text:0000000000003255                 mov     r14, [r13+10h]
.text:0000000000003259                 add     qword ptr [rax+rbx*8], 1
.text:000000000000325E                 mov     rax, [r13+8]
.text:0000000000003262                 lea     r15, [rax-1]
.text:0000000000003266                 lea     rbp, [r14+r15]
.text:000000000000326A                 cmp     r14, rbp
.text:000000000000326D                 jz      loc_3351
.text:0000000000003273                 mov     esi, cs:tab
.text:0000000000003279                 test    esi, esi
.text:000000000000327B                 js      short loc_3286
.text:000000000000327D                 cmp     esi, 0Ah
.text:0000000000003280                 jnz     loc_34A3
.text:0000000000003286
.text:0000000000003286 loc_3286:                               ; CODE XREF: get_line+8B↑j
.text:0000000000003286                 test    esi, esi
.text:0000000000003288                 jns     loc_3343
.text:000000000000328E                 call    ___ctype_b_loc
.text:0000000000003293                 mov     rdx, [rax]
.text:0000000000003296                 mov     r15, rax
.text:0000000000003299                 nop     dword ptr [rax+00000000h]
.text:00000000000032A0
.text:00000000000032A0 loc_32A0:                               ; CODE XREF: get_line+376↓j
.text:00000000000032A0                 movzx   edi, byte ptr [r14]
.text:00000000000032A4                 lea     rax, [r14+1]
.text:00000000000032A8                 test    byte ptr [rdx+rdi*2], 1
.text:00000000000032AC                 jnz     loc_3560
.text:00000000000032B2                 cmp     dil, 0Ah
.text:00000000000032B6                 jz      loc_3560
.text:00000000000032BC
.text:00000000000032BC loc_32BC:                               ; CODE XREF: get_line+14A↓j
.text:00000000000032BC                 cmp     rbp, rax
.text:00000000000032BF                 jz      loc_3578
.text:00000000000032C5                 movzx   edi, byte ptr [r14+1]
.text:00000000000032CA                 test    byte ptr [rdx+rdi*2], 1
.text:00000000000032CE                 mov     rsi, rdi
.text:00000000000032D1                 jnz     short loc_32F8
.text:00000000000032D3
.text:00000000000032D3 loc_32D3:                               ; CODE XREF: get_line+100↓j
.text:00000000000032D3                 cmp     sil, 0Ah
.text:00000000000032D7                 jz      short loc_32F8
.text:00000000000032D9                 add     rax, 1
.text:00000000000032DD                 cmp     rbp, rax
.text:00000000000032E0                 jz      loc_3578
.text:00000000000032E6                 movzx   edi, byte ptr [rax]
.text:00000000000032E9                 test    byte ptr [rdx+rdi*2], 1
.text:00000000000032ED                 mov     rsi, rdi
.text:00000000000032F0                 jz      short loc_32D3
.text:00000000000032F2                 nop     word ptr [rax+rax+00h]
.text:00000000000032F8
.text:00000000000032F8 loc_32F8:                               ; CODE XREF: get_line+E1↑j
.text:00000000000032F8                                         ; get_line+E7↑j
.text:00000000000032F8                 mov     rdx, rax
.text:00000000000032FB                 mov     rsi, r14
.text:00000000000032FE                 mov     rdi, r13
.text:0000000000003301                 sub     rdx, r14
.text:0000000000003304                 mov     [rsp+48h+var_48], rax
.text:0000000000003308                 call    extract_field
.text:000000000000330D                 mov     rax, [rsp+48h+var_48]
.text:0000000000003311                 lea     r14, [rax+1]
.text:0000000000003315                 cmp     rbp, r14
.text:0000000000003318                 jz      short loc_3340
.text:000000000000331A                 movzx   esi, byte ptr [rax+1]
.text:000000000000331E                 mov     rdx, [r15]
.text:0000000000003321                 test    byte ptr [rdx+rsi*2], 1
.text:0000000000003325                 mov     rax, rsi
.text:0000000000003328                 jnz     loc_3540
.text:000000000000332E
.text:000000000000332E loc_332E:                               ; CODE XREF: get_line+368↓j
.text:000000000000332E                 cmp     al, 0Ah
.text:0000000000003330                 jz      loc_3540
.text:0000000000003336                 lea     rax, [r14+1]
.text:000000000000333A                 jmp     short loc_32BC
.text:000000000000333A ; ---------------------------------------------------------------------------
.text:000000000000333C                 align 20h
.text:0000000000003340
.text:0000000000003340 loc_3340:                               ; CODE XREF: get_line+128↑j
.text:0000000000003340                                         ; get_line+357↓j
.text:0000000000003340                 xor     r15d, r15d
.text:0000000000003343
.text:0000000000003343 loc_3343:                               ; CODE XREF: get_line+98↑j
.text:0000000000003343                 mov     rdx, r15
.text:0000000000003346                 mov     rsi, r14
.text:0000000000003349                 mov     rdi, r13
.text:000000000000334C                 call    extract_field
.text:0000000000003351
.text:0000000000003351 loc_3351:                               ; CODE XREF: get_line+7D↑j
.text:0000000000003351                                         ; get_line+2D7↓j ...
.text:0000000000003351                 mov     rax, [r12+rbx*8]
.text:0000000000003355                 test    rax, rax
.text:0000000000003358                 jz      loc_3460
.text:000000000000335E                 mov     edx, cs:check_input_order
.text:0000000000003364                 cmp     edx, 2
.text:0000000000003367                 jz      loc_3460
.text:000000000000336D                 cmp     edx, 1
.text:0000000000003370                 jz      short loc_337F
.text:0000000000003372                 cmp     cs:seen_unpairable, 0
.text:0000000000003379                 jz      loc_3460
.text:000000000000337F
.text:000000000000337F loc_337F:                               ; CODE XREF: get_line+180↑j
.text:000000000000337F                 lea     rbp, issued_disorder_warning
.text:0000000000003386                 cmp     byte ptr [rbp+rbx+0], 0
.text:000000000000338B                 jnz     loc_3460
.text:0000000000003391                 cmp     [rsp+48h+var_3C], 1
.text:0000000000003396                 mov     r8, cs:join_field_1
.text:000000000000339D                 lea     rcx, [r13+28h]
.text:00000000000033A1                 cmovnz  r8, cs:join_field_2
.text:00000000000033A9                 mov     rdx, [r13+18h]
.text:00000000000033AD                 lea     rsi, [rax+28h]
.text:00000000000033B1                 mov     rdi, [rax+18h]
.text:00000000000033B5                 mov     r9, r8
.text:00000000000033B8                 call    keycmp_isra_4
.text:00000000000033BD                 test    eax, eax
.text:00000000000033BF                 jle     loc_3460
.text:00000000000033C5                 mov     rax, [r13+8]
.text:00000000000033C9                 xor     r9d, r9d
.text:00000000000033CC                 mov     r14, [r13+10h]
.text:00000000000033D0                 test    rax, rax
.text:00000000000033D3                 jz      short loc_33F7
.text:00000000000033D5                 cmp     byte ptr [r14+rax-1], 0Ah
.text:00000000000033DB                 lea     rdx, [rax-1]
.text:00000000000033DF                 jz      loc_358E
.text:00000000000033E5                 cmp     rax, 7FFFFFFFh
.text:00000000000033EB                 mov     edx, 7FFFFFFFh
.text:00000000000033F0                 cmovbe  rdx, rax
.text:00000000000033F4                 mov     r9, rdx
.text:00000000000033F7
.text:00000000000033F7 loc_33F7:                               ; CODE XREF: get_line+1E3↑j
.text:00000000000033F7                                         ; get_line+3B1↓j
.text:00000000000033F7                 lea     rax, line_no
.text:00000000000033FE                 lea     rsi, aSLuIsNotSorted ; "%s:%lu: is not sorted: %.*s"
.text:0000000000003405                 xor     edi, edi        ; domainname
.text:0000000000003407                 mov     edx, 5          ; category
.text:000000000000340C                 mov     [rsp+48h+var_3C], r9d
.text:0000000000003411                 mov     r15, [rax+rbx*8]
.text:0000000000003415                 lea     rax, g_names
.text:000000000000341C                 mov     rcx, [rax+rbx*8]
.text:0000000000003420                 mov     [rsp+48h+var_48], rcx
.text:0000000000003424                 call    _dcgettext
.text:0000000000003429                 xor     edi, edi
.text:000000000000342B                 cmp     cs:check_input_order, 1
.text:0000000000003432                 mov     rdx, rax        ; format
.text:0000000000003435                 mov     r8, r15
.text:0000000000003438                 setz    dil             ; status
.text:000000000000343C                 sub     rsp, 8
.text:0000000000003440                 xor     eax, eax
.text:0000000000003442                 push    r14
.text:0000000000003444                 mov     r9d, [rsp+58h+var_3C]
.text:0000000000003449                 xor     esi, esi        ; errnum
.text:000000000000344B                 mov     rcx, [rsp+58h+var_48]
.text:0000000000003450                 call    _error
.text:0000000000003455                 mov     byte ptr [rbp+rbx+0], 1
.text:000000000000345A                 pop     rax
.text:000000000000345B                 pop     rdx
.text:000000000000345C                 nop     dword ptr [rax+00h]
.text:0000000000003460
.text:0000000000003460 loc_3460:                               ; CODE XREF: get_line+168↑j
.text:0000000000003460                                         ; get_line+177↑j ...
.text:0000000000003460                 mov     [r12+rbx*8], r13
.text:0000000000003464                 mov     eax, 1
.text:0000000000003469
.text:0000000000003469 loc_3469:                               ; CODE XREF: get_line+2EF↓j
.text:0000000000003469                 add     rsp, 18h
.text:000000000000346D                 pop     rbx
.text:000000000000346E                 pop     rbp
.text:000000000000346F                 pop     r12
.text:0000000000003471                 pop     r13
.text:0000000000003473                 pop     r14
.text:0000000000003475                 pop     r15
.text:0000000000003477                 retn
.text:0000000000003477 ; ---------------------------------------------------------------------------
.text:0000000000003478                 align 20h
.text:0000000000003480
.text:0000000000003480 loc_3480:                               ; CODE XREF: get_line+2C7↓j
.text:0000000000003480                 mov     rdx, rax
.text:0000000000003483                 mov     rsi, r14
.text:0000000000003486                 mov     rdi, r13
.text:0000000000003489                 sub     rdx, r14
.text:000000000000348C                 mov     [rsp+48h+var_48], rax
.text:0000000000003490                 call    extract_field
.text:0000000000003495                 mov     rax, [rsp+48h+var_48]
.text:0000000000003499                 mov     esi, cs:tab     ; c
.text:000000000000349F                 lea     r14, [rax+1]
.text:00000000000034A3
.text:00000000000034A3 loc_34A3:                               ; CODE XREF: get_line+90↑j
.text:00000000000034A3                 mov     r15, rbp
.text:00000000000034A6                 mov     rdi, r14        ; s
.text:00000000000034A9                 sub     r15, r14
.text:00000000000034AC                 mov     rdx, r15        ; n
.text:00000000000034AF                 call    _memchr
.text:00000000000034B4                 test    rax, rax
.text:00000000000034B7                 jnz     short loc_3480
.text:00000000000034B9                 mov     rdx, r15
.text:00000000000034BC                 mov     rsi, r14
.text:00000000000034BF                 mov     rdi, r13
.text:00000000000034C2                 call    extract_field
.text:00000000000034C7                 jmp     loc_3351
.text:00000000000034C7 ; ---------------------------------------------------------------------------
.text:00000000000034CC                 align 10h
.text:00000000000034D0
.text:00000000000034D0 loc_34D0:                               ; CODE XREF: get_line+58↑j
.text:00000000000034D0                 test    byte ptr [r14], 20h
.text:00000000000034D4                 jnz     loc_35A6
.text:00000000000034DA                 xor     eax, eax
.text:00000000000034DC                 test    r13, r13
.text:00000000000034DF                 jz      short loc_3469
.text:00000000000034E1                 mov     rdi, r13
.text:00000000000034E4                 mov     byte ptr [rsp+48h+var_48], al
.text:00000000000034E7                 call    freeline_part_2
.text:00000000000034EC                 movzx   eax, byte ptr [rsp+48h+var_48]
.text:00000000000034F0                 add     rsp, 18h
.text:00000000000034F4                 pop     rbx
.text:00000000000034F5                 pop     rbp
.text:00000000000034F6                 pop     r12
.text:00000000000034F8                 pop     r13
.text:00000000000034FA                 pop     r14
.text:00000000000034FC                 pop     r15
.text:00000000000034FE                 retn
.text:00000000000034FE ; ---------------------------------------------------------------------------
.text:00000000000034FF                 align 20h
.text:0000000000003500
.text:0000000000003500 loc_3500:                               ; CODE XREF: get_line+2C↑j
.text:0000000000003500                 lea     rdx, spareline
.text:0000000000003507                 mov     rax, [rdx+rbx*8]
.text:000000000000350B                 mov     [rdx+rbx*8], r13
.text:000000000000350F                 mov     r13, rax
.text:0000000000003512                 mov     [rsi], rax
.text:0000000000003515                 test    r13, r13
.text:0000000000003518                 jnz     loc_322B
.text:000000000000351E
.text:000000000000351E loc_351E:                               ; CODE XREF: get_line+35↑j
.text:000000000000351E                 mov     esi, 30h ; '0'
.text:0000000000003523                 mov     edi, 1
.text:0000000000003528                 call    xcalloc
.text:000000000000352D                 mov     r13, rax
.text:0000000000003530                 mov     [rbp+0], rax
.text:0000000000003534                 jmp     loc_3233
.text:0000000000003534 ; ---------------------------------------------------------------------------
.text:0000000000003539                 align 20h
.text:0000000000003540
.text:0000000000003540 loc_3540:                               ; CODE XREF: get_line+138↑j
.text:0000000000003540                                         ; get_line+140↑j ...
.text:0000000000003540                 add     r14, 1
.text:0000000000003544                 cmp     rbp, r14
.text:0000000000003547                 jz      loc_3340
.text:000000000000354D                 movzx   esi, byte ptr [r14]
.text:0000000000003551                 test    byte ptr [rdx+rsi*2], 1
.text:0000000000003555                 mov     rax, rsi
.text:0000000000003558                 jz      loc_332E
.text:000000000000355E                 jmp     short loc_3540
.text:0000000000003560 ; ---------------------------------------------------------------------------
.text:0000000000003560
.text:0000000000003560 loc_3560:                               ; CODE XREF: get_line+BC↑j
.text:0000000000003560                                         ; get_line+C6↑j
.text:0000000000003560                 cmp     rbp, rax
.text:0000000000003563                 mov     r14, rax
.text:0000000000003566                 jnz     loc_32A0
.text:000000000000356C                 jmp     loc_3351
.text:000000000000356C ; ---------------------------------------------------------------------------
.text:0000000000003571                 align 8
.text:0000000000003578
.text:0000000000003578 loc_3578:                               ; CODE XREF: get_line+CF↑j
.text:0000000000003578                                         ; get_line+F0↑j
.text:0000000000003578                 sub     rax, r14
.text:000000000000357B                 mov     rsi, r14
.text:000000000000357E                 mov     rdi, r13
.text:0000000000003581                 mov     rdx, rax
.text:0000000000003584                 call    extract_field
.text:0000000000003589                 jmp     loc_3351
.text:000000000000358E ; ---------------------------------------------------------------------------
.text:000000000000358E
.text:000000000000358E loc_358E:                               ; CODE XREF: get_line+1EF↑j
.text:000000000000358E                 cmp     rdx, 7FFFFFFFh
.text:0000000000003595                 mov     eax, 7FFFFFFFh
.text:000000000000359A                 cmovbe  rax, rdx
.text:000000000000359E                 mov     r9, rax
.text:00000000000035A1                 jmp     loc_33F7
.text:00000000000035A6 ; ---------------------------------------------------------------------------
.text:00000000000035A6
.text:00000000000035A6 loc_35A6:                               ; CODE XREF: get_line+2E4↑j
.text:00000000000035A6                 lea     rsi, aReadError ; "read error"
.text:00000000000035AD                 mov     edx, 5          ; category
.text:00000000000035B2                 xor     edi, edi        ; domainname
.text:00000000000035B4                 call    _dcgettext
.text:00000000000035B9                 mov     rbx, rax
.text:00000000000035BC                 call    ___errno_location
.text:00000000000035C1                 mov     esi, [rax]      ; errnum
.text:00000000000035C3                 mov     rdx, rbx        ; format
.text:00000000000035C6                 mov     edi, 1          ; status
.text:00000000000035CB                 xor     eax, eax
.text:00000000000035CD                 call    _error
.text:00000000000035CD ; } // starts at 31F0
.text:00000000000035D2                 nop     dword ptr [rax+00h]
.text:00000000000035D6                 db      2Eh
.text:00000000000035D6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000035D6 get_line        endp ; sp-analysis failed
.text:00000000000035D6
.text:00000000000035E0
.text:00000000000035E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035E0
.text:00000000000035E0
.text:00000000000035E0 getseq          proc near               ; CODE XREF: main+60A↑p
.text:00000000000035E0                                         ; main+635↑p ...
.text:00000000000035E0 ; __unwind {
.text:00000000000035E0                 push    r12
.text:00000000000035E2                 push    rbp
.text:00000000000035E3                 mov     r12d, edx
.text:00000000000035E6                 push    rbx
.text:00000000000035E7                 mov     rbx, rsi
.text:00000000000035EA                 mov     rsi, [rsi]
.text:00000000000035ED                 cmp     rsi, [rbx+8]
.text:00000000000035F1                 mov     rbp, rdi
.text:00000000000035F4                 mov     rdi, [rbx+10h]
.text:00000000000035F8                 jz      short loc_3620
.text:00000000000035FA
.text:00000000000035FA loc_35FA:                               ; CODE XREF: getseq+7D↓j
.text:00000000000035FA                                         ; getseq+A0↓j
.text:00000000000035FA                 lea     rsi, [rdi+rsi*8]
.text:00000000000035FE                 mov     edx, r12d
.text:0000000000003601                 mov     rdi, rbp
.text:0000000000003604                 call    get_line
.text:0000000000003609                 test    al, al
.text:000000000000360B                 jz      short loc_3611
.text:000000000000360D                 add     qword ptr [rbx], 1
.text:0000000000003611
.text:0000000000003611 loc_3611:                               ; CODE XREF: getseq+2B↑j
.text:0000000000003611                 pop     rbx
.text:0000000000003612                 pop     rbp
.text:0000000000003613                 pop     r12
.text:0000000000003615                 retn
.text:0000000000003615 ; ---------------------------------------------------------------------------
.text:0000000000003616                 align 20h
.text:0000000000003620
.text:0000000000003620 loc_3620:                               ; CODE XREF: getseq+18↑j
.text:0000000000003620                 test    rdi, rdi
.text:0000000000003623                 jz      short loc_3688
.text:0000000000003625                 mov     rax, 0AAAAAAAAAAAAAA9h
.text:000000000000362F                 cmp     rsi, rax
.text:0000000000003632                 ja      short loc_36AD
.text:0000000000003634                 mov     rax, rsi
.text:0000000000003637                 shr     rax, 1
.text:000000000000363A                 lea     rsi, [rsi+rax+1]
.text:000000000000363F
.text:000000000000363F loc_363F:                               ; CODE XREF: getseq+CB↓j
.text:000000000000363F                 mov     [rbx+8], rsi
.text:0000000000003643                 shl     rsi, 3
.text:0000000000003647                 call    xrealloc
.text:000000000000364C                 mov     rsi, [rbx]
.text:000000000000364F                 mov     rdx, [rbx+8]
.text:0000000000003653                 mov     rdi, rax
.text:0000000000003656                 mov     [rbx+10h], rax
.text:000000000000365A                 cmp     rsi, rdx
.text:000000000000365D                 jnb     short loc_35FA
.text:000000000000365F                 lea     rax, [rax+rsi*8]
.text:0000000000003663                 lea     rdx, [rdi+rdx*8]
.text:0000000000003667                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003670
.text:0000000000003670 loc_3670:                               ; CODE XREF: getseq+9E↓j
.text:0000000000003670                 mov     qword ptr [rax], 0
.text:0000000000003677                 add     rax, 8
.text:000000000000367B                 cmp     rax, rdx
.text:000000000000367E                 jnz     short loc_3670
.text:0000000000003680                 jmp     loc_35FA
.text:0000000000003680 ; ---------------------------------------------------------------------------
.text:0000000000003685                 align 8
.text:0000000000003688
.text:0000000000003688 loc_3688:                               ; CODE XREF: getseq+43↑j
.text:0000000000003688                 test    rsi, rsi
.text:000000000000368B                 mov     eax, 10h
.text:0000000000003690                 mov     edx, 8
.text:0000000000003695                 cmovz   rsi, rax
.text:0000000000003699                 mov     rax, rdx
.text:000000000000369C                 xor     ecx, ecx
.text:000000000000369E                 mul     rsi
.text:00000000000036A1                 jo      short loc_36B2
.text:00000000000036A3
.text:00000000000036A3 loc_36A3:                               ; CODE XREF: getseq+D7↓j
.text:00000000000036A3                 test    rax, rax
.text:00000000000036A6                 js      short loc_36AD
.text:00000000000036A8                 test    rcx, rcx
.text:00000000000036AB                 jz      short loc_363F
.text:00000000000036AD
.text:00000000000036AD loc_36AD:                               ; CODE XREF: getseq+52↑j
.text:00000000000036AD                                         ; getseq+C6↑j
.text:00000000000036AD                 call    xalloc_die
.text:00000000000036B2 ; ---------------------------------------------------------------------------
.text:00000000000036B2
.text:00000000000036B2 loc_36B2:                               ; CODE XREF: getseq+C1↑j
.text:00000000000036B2                 mov     ecx, 1
.text:00000000000036B7                 jmp     short loc_36A3
.text:00000000000036B7 ; } // starts at 35E0
.text:00000000000036B7 getseq          endp
.text:00000000000036B7
.text:00000000000036B7 ; ---------------------------------------------------------------------------
.text:00000000000036B9                 align 20h
.text:00000000000036C0
.text:00000000000036C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036C0
.text:00000000000036C0 ; Attributes: noreturn
.text:00000000000036C0
.text:00000000000036C0 ; void __fastcall __noreturn usage(int status)
.text:00000000000036C0                 public usage
.text:00000000000036C0 usage           proc near               ; CODE XREF: main+196↑p
.text:00000000000036C0                                         ; main+D28↑p ...
.text:00000000000036C0
.text:00000000000036C0 var_A8          = qword ptr -0A8h
.text:00000000000036C0 var_A0          = qword ptr -0A0h
.text:00000000000036C0 var_98          = qword ptr -98h
.text:00000000000036C0 var_90          = qword ptr -90h
.text:00000000000036C0 var_88          = qword ptr -88h
.text:00000000000036C0 var_80          = qword ptr -80h
.text:00000000000036C0 var_78          = qword ptr -78h
.text:00000000000036C0 var_70          = qword ptr -70h
.text:00000000000036C0 var_68          = qword ptr -68h
.text:00000000000036C0 var_60          = qword ptr -60h
.text:00000000000036C0 var_58          = qword ptr -58h
.text:00000000000036C0 var_50          = qword ptr -50h
.text:00000000000036C0 var_48          = qword ptr -48h
.text:00000000000036C0 var_40          = qword ptr -40h
.text:00000000000036C0 var_30          = qword ptr -30h
.text:00000000000036C0
.text:00000000000036C0 ; __unwind {
.text:00000000000036C0                 push    r13
.text:00000000000036C2                 push    r12
.text:00000000000036C4                 mov     edx, 5          ; category
.text:00000000000036C9                 push    rbp
.text:00000000000036CA                 push    rbx
.text:00000000000036CB                 mov     ebp, edi
.text:00000000000036CD                 sub     rsp, 88h
.text:00000000000036D4                 mov     rbx, cs:program_name
.text:00000000000036DB                 mov     rax, fs:28h
.text:00000000000036E4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000036E9                 xor     eax, eax
.text:00000000000036EB                 test    edi, edi
.text:00000000000036ED                 jz      short loc_371D
.text:00000000000036EF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000036F6                 xor     edi, edi        ; domainname
.text:00000000000036F8                 call    _dcgettext
.text:00000000000036FD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003704                 mov     rdx, rax
.text:0000000000003707                 mov     rcx, rbx
.text:000000000000370A                 mov     esi, 1
.text:000000000000370F                 xor     eax, eax
.text:0000000000003711                 call    ___fprintf_chk
.text:0000000000003716
.text:0000000000003716 loc_3716:                               ; CODE XREF: usage+356↓j
.text:0000000000003716                 mov     edi, ebp        ; status
.text:0000000000003718                 call    _exit
.text:000000000000371D ; ---------------------------------------------------------------------------
.text:000000000000371D
.text:000000000000371D loc_371D:                               ; CODE XREF: usage+2D↑j
.text:000000000000371D                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... FILE1 FILE2\n"
.text:0000000000003724                 xor     edi, edi        ; domainname
.text:0000000000003726                 call    _dcgettext
.text:000000000000372B                 mov     rdx, rbx
.text:000000000000372E                 mov     rsi, rax
.text:0000000000003731                 mov     edi, 1
.text:0000000000003736                 xor     eax, eax
.text:0000000000003738                 call    ___printf_chk
.text:000000000000373D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003744                 lea     rsi, aForEachPairOfI ; "For each pair of input lines with ident"...
.text:000000000000374B                 mov     edx, 5          ; category
.text:0000000000003750                 xor     edi, edi        ; domainname
.text:0000000000003752                 call    _dcgettext
.text:0000000000003757                 mov     rsi, rbx        ; stream
.text:000000000000375A                 mov     rdi, rax        ; s
.text:000000000000375D                 call    _fputs_unlocked
.text:0000000000003762                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003769                 lea     rsi, aWhenFile1OrFil ; "\nWhen FILE1 or FILE2 (not both) is -, "...
.text:0000000000003770                 mov     edx, 5          ; category
.text:0000000000003775                 xor     edi, edi        ; domainname
.text:0000000000003777                 call    _dcgettext
.text:000000000000377C                 mov     rsi, rbx        ; stream
.text:000000000000377F                 mov     rdi, rax        ; s
.text:0000000000003782                 call    _fputs_unlocked
.text:0000000000003787                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000378E                 lea     rsi, aAFilenumAlsoPr ; "\n  -a FILENUM        also print unpair"...
.text:0000000000003795                 mov     edx, 5          ; category
.text:000000000000379A                 xor     edi, edi        ; domainname
.text:000000000000379C                 call    _dcgettext
.text:00000000000037A1                 mov     rsi, rbx        ; stream
.text:00000000000037A4                 mov     rdi, rax        ; s
.text:00000000000037A7                 call    _fputs_unlocked
.text:00000000000037AC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000037B3                 lea     rsi, aIIgnoreCaseIgn ; "  -i, --ignore-case  ignore differences"...
.text:00000000000037BA                 mov     edx, 5          ; category
.text:00000000000037BF                 xor     edi, edi        ; domainname
.text:00000000000037C1                 call    _dcgettext
.text:00000000000037C6                 mov     rsi, rbx        ; stream
.text:00000000000037C9                 mov     rdi, rax        ; s
.text:00000000000037CC                 call    _fputs_unlocked
.text:00000000000037D1                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000037D8                 lea     rsi, aVFilenumLikeAF ; "  -v FILENUM        like -a FILENUM, bu"...
.text:00000000000037DF                 mov     edx, 5          ; category
.text:00000000000037E4                 xor     edi, edi        ; domainname
.text:00000000000037E6                 call    _dcgettext
.text:00000000000037EB                 mov     rsi, rbx        ; stream
.text:00000000000037EE                 mov     rdi, rax        ; s
.text:00000000000037F1                 call    _fputs_unlocked
.text:00000000000037F6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000037FD                 lea     rsi, aZZeroTerminate ; "  -z, --zero-terminated     line delimi"...
.text:0000000000003804                 mov     edx, 5          ; category
.text:0000000000003809                 xor     edi, edi        ; domainname
.text:000000000000380B                 call    _dcgettext
.text:0000000000003810                 mov     rsi, rbx        ; stream
.text:0000000000003813                 mov     rdi, rax        ; s
.text:0000000000003816                 call    _fputs_unlocked
.text:000000000000381B                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003822                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000003829                 mov     edx, 5          ; category
.text:000000000000382E                 xor     edi, edi        ; domainname
.text:0000000000003830                 call    _dcgettext
.text:0000000000003835                 mov     rsi, rbx        ; stream
.text:0000000000003838                 mov     rdi, rax        ; s
.text:000000000000383B                 call    _fputs_unlocked
.text:0000000000003840                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003847                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:000000000000384E                 mov     edx, 5          ; category
.text:0000000000003853                 xor     edi, edi        ; domainname
.text:0000000000003855                 call    _dcgettext
.text:000000000000385A                 mov     rsi, rbx        ; stream
.text:000000000000385D                 mov     rdi, rax        ; s
.text:0000000000003860                 call    _fputs_unlocked
.text:0000000000003865                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000386C                 lea     rsi, aUnlessTCharIsG ; "\nUnless -t CHAR is given, leading blan"...
.text:0000000000003873                 mov     edx, 5          ; category
.text:0000000000003878                 xor     edi, edi        ; domainname
.text:000000000000387A                 call    _dcgettext
.text:000000000000387F                 mov     rsi, rbx        ; stream
.text:0000000000003882                 mov     rdi, rax        ; s
.text:0000000000003885                 lea     rbx, aJoin      ; "join"
.text:000000000000388C                 call    _fputs_unlocked
.text:0000000000003891                 lea     rax, asc_7DA1   ; "["
.text:0000000000003898                 lea     rcx, aSha256sum ; "sha256sum"
.text:000000000000389F                 mov     [rsp+0A8h+var_48], 0
.text:00000000000038A8                 mov     [rsp+0A8h+var_40], 0
.text:00000000000038B1                 mov     rdx, rsp
.text:00000000000038B4                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000038B8                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000038BF                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000038C4                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000038CB                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000038D0                 lea     rax, domainname ; "coreutils"
.text:00000000000038D7                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000038DC                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000038E3                 mov     [rsp+0A8h+var_98], rax
.text:00000000000038E8                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000038EF                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000038F4                 mov     [rsp+0A8h+var_90], rax
.text:00000000000038F9                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000003900                 mov     [rsp+0A8h+var_88], rax
.text:0000000000003905                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:000000000000390C                 mov     [rsp+0A8h+var_80], rax
.text:0000000000003911                 mov     [rsp+0A8h+var_70], rax
.text:0000000000003916                 mov     [rsp+0A8h+var_60], rax
.text:000000000000391B                 mov     [rsp+0A8h+var_50], rax
.text:0000000000003920
.text:0000000000003920 loc_3920:                               ; CODE XREF: usage+27D↓j
.text:0000000000003920                 add     rdx, 10h
.text:0000000000003924                 mov     rdi, [rdx]
.text:0000000000003927                 test    rdi, rdi
.text:000000000000392A                 jz      short loc_393F
.text:000000000000392C                 mov     ecx, 5
.text:0000000000003931                 mov     rsi, rbx
.text:0000000000003934                 repe cmpsb
.text:0000000000003936                 setnbe  al
.text:0000000000003939                 sbb     al, 0
.text:000000000000393B                 test    al, al
.text:000000000000393D                 jnz     short loc_3920
.text:000000000000393F
.text:000000000000393F loc_393F:                               ; CODE XREF: usage+26A↑j
.text:000000000000393F                 mov     r12, [rdx+8]
.text:0000000000003943                 xor     edi, edi        ; domainname
.text:0000000000003945                 mov     edx, 5          ; category
.text:000000000000394A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000003951                 test    r12, r12
.text:0000000000003954                 jz      loc_3A1B
.text:000000000000395A                 call    _dcgettext
.text:000000000000395F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003966                 lea     rdx, unk_7E17
.text:000000000000396D                 mov     rsi, rax
.text:0000000000003970                 mov     edi, 1
.text:0000000000003975                 xor     eax, eax
.text:0000000000003977                 call    ___printf_chk
.text:000000000000397C                 xor     esi, esi        ; locale
.text:000000000000397E                 mov     edi, 5          ; category
.text:0000000000003983                 call    _setlocale
.text:0000000000003988                 test    rax, rax
.text:000000000000398B                 jz      short loc_39A9
.text:000000000000398D                 lea     rsi, aEn        ; "en_"
.text:0000000000003994                 mov     edx, 3          ; n
.text:0000000000003999                 mov     rdi, rax        ; s1
.text:000000000000399C                 call    _strncmp
.text:00000000000039A1                 test    eax, eax
.text:00000000000039A3                 jnz     loc_3AB0
.text:00000000000039A9
.text:00000000000039A9 loc_39A9:                               ; CODE XREF: usage+2CB↑j
.text:00000000000039A9                                         ; usage+415↓j
.text:00000000000039A9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000039B0                 xor     edi, edi        ; domainname
.text:00000000000039B2                 mov     edx, 5          ; category
.text:00000000000039B7                 call    _dcgettext
.text:00000000000039BC                 lea     rcx, aJoin      ; "join"
.text:00000000000039C3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000039CA                 mov     rsi, rax
.text:00000000000039CD                 mov     edi, 1
.text:00000000000039D2                 xor     eax, eax
.text:00000000000039D4                 call    ___printf_chk
.text:00000000000039D9                 cmp     r12, rbx
.text:00000000000039DC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000039E3                 lea     rbx, accept+3   ; ""
.text:00000000000039EA                 cmovz   rbx, rcx
.text:00000000000039EE
.text:00000000000039EE loc_39EE:                               ; CODE XREF: usage+3E4↓j
.text:00000000000039EE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000039F5                 xor     edi, edi        ; domainname
.text:00000000000039F7                 mov     edx, 5          ; category
.text:00000000000039FC                 call    _dcgettext
.text:0000000000003A01                 mov     rcx, rbx
.text:0000000000003A04                 mov     rsi, rax
.text:0000000000003A07                 mov     rdx, r12
.text:0000000000003A0A                 mov     edi, 1
.text:0000000000003A0F                 xor     eax, eax
.text:0000000000003A11                 call    ___printf_chk
.text:0000000000003A16                 jmp     loc_3716
.text:0000000000003A1B ; ---------------------------------------------------------------------------
.text:0000000000003A1B
.text:0000000000003A1B loc_3A1B:                               ; CODE XREF: usage+294↑j
.text:0000000000003A1B                 call    _dcgettext
.text:0000000000003A20                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003A27                 lea     rdx, unk_7E17
.text:0000000000003A2E                 mov     rsi, rax
.text:0000000000003A31                 mov     edi, 1
.text:0000000000003A36                 xor     eax, eax
.text:0000000000003A38                 call    ___printf_chk
.text:0000000000003A3D                 xor     esi, esi        ; locale
.text:0000000000003A3F                 mov     edi, 5          ; category
.text:0000000000003A44                 call    _setlocale
.text:0000000000003A49                 test    rax, rax
.text:0000000000003A4C                 jz      short loc_3A66
.text:0000000000003A4E                 lea     rsi, aEn        ; "en_"
.text:0000000000003A55                 mov     edx, 3          ; n
.text:0000000000003A5A                 mov     rdi, rax        ; s1
.text:0000000000003A5D                 call    _strncmp
.text:0000000000003A62                 test    eax, eax
.text:0000000000003A64                 jnz     short loc_3AA9
.text:0000000000003A66
.text:0000000000003A66 loc_3A66:                               ; CODE XREF: usage+38C↑j
.text:0000000000003A66                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000003A6D                 mov     edx, 5          ; category
.text:0000000000003A72                 xor     edi, edi        ; domainname
.text:0000000000003A74                 lea     r12, aJoin      ; "join"
.text:0000000000003A7B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003A82                 call    _dcgettext
.text:0000000000003A87                 lea     rcx, aJoin      ; "join"
.text:0000000000003A8E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003A95                 mov     rsi, rax
.text:0000000000003A98                 mov     edi, 1
.text:0000000000003A9D                 xor     eax, eax
.text:0000000000003A9F                 call    ___printf_chk
.text:0000000000003AA4                 jmp     loc_39EE
.text:0000000000003AA9 ; ---------------------------------------------------------------------------
.text:0000000000003AA9
.text:0000000000003AA9 loc_3AA9:                               ; CODE XREF: usage+3A4↑j
.text:0000000000003AA9                 lea     r12, aJoin      ; "join"
.text:0000000000003AB0
.text:0000000000003AB0 loc_3AB0:                               ; CODE XREF: usage+2E3↑j
.text:0000000000003AB0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000003AB7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000003ABE                 xor     edi, edi        ; domainname
.text:0000000000003AC0                 mov     edx, 5          ; category
.text:0000000000003AC5                 call    _dcgettext
.text:0000000000003ACA                 mov     rsi, r13        ; stream
.text:0000000000003ACD                 mov     rdi, rax        ; s
.text:0000000000003AD0                 call    _fputs_unlocked
.text:0000000000003AD5                 jmp     loc_39A9
.text:0000000000003AD5 ; } // starts at 36C0
.text:0000000000003AD5 usage           endp
.text:0000000000003AD5
.text:0000000000003AD5 ; ---------------------------------------------------------------------------
.text:0000000000003ADA                 align 20h
.text:0000000000003AE0
.text:0000000000003AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AE0
.text:0000000000003AE0
.text:0000000000003AE0 add_file_name_constprop_7 proc near     ; CODE XREF: main+354↑p
.text:0000000000003AE0                                         ; main+506↑p
.text:0000000000003AE0
.text:0000000000003AE0 var_40          = qword ptr -40h
.text:0000000000003AE0 var_38          = qword ptr -38h
.text:0000000000003AE0 var_30          = qword ptr -30h
.text:0000000000003AE0
.text:0000000000003AE0 ; __unwind {
.text:0000000000003AE0                 push    r14
.text:0000000000003AE2                 push    r13
.text:0000000000003AE4                 mov     r13, rdi
.text:0000000000003AE7                 push    r12
.text:0000000000003AE9                 push    rbp
.text:0000000000003AEA                 mov     rbp, rsi
.text:0000000000003AED                 push    rbx
.text:0000000000003AEE                 sub     rsp, 20h
.text:0000000000003AF2                 mov     ebx, [rcx]
.text:0000000000003AF4                 cmp     ebx, 2
.text:0000000000003AF7                 jz      short loc_3B40
.text:0000000000003AF9                 movsxd  rax, ebx
.text:0000000000003AFC                 lea     r12, g_names
.text:0000000000003B03                 add     ebx, 1
.text:0000000000003B06                 lea     rdx, ds:0[rax*4]
.text:0000000000003B0E                 shl     rax, 3
.text:0000000000003B12
.text:0000000000003B12 loc_3B12:                               ; CODE XREF: add_file_name_constprop_7+D8↓j
.text:0000000000003B12                                         ; add_file_name_constprop_7+12A↓j
.text:0000000000003B12                 mov     esi, [r8]
.text:0000000000003B15                 mov     [rbp+rdx+0], esi
.text:0000000000003B19                 mov     [r12+rax], r13
.text:0000000000003B1D                 mov     [rcx], ebx
.text:0000000000003B1F                 cmp     dword ptr [r8], 3
.text:0000000000003B23                 jnz     short loc_3B2C
.text:0000000000003B25                 mov     dword ptr [r9], 3
.text:0000000000003B2C
.text:0000000000003B2C loc_3B2C:                               ; CODE XREF: add_file_name_constprop_7+43↑j
.text:0000000000003B2C                 add     rsp, 20h
.text:0000000000003B30                 pop     rbx
.text:0000000000003B31                 pop     rbp
.text:0000000000003B32                 pop     r12
.text:0000000000003B34                 pop     r13
.text:0000000000003B36                 pop     r14
.text:0000000000003B38                 retn
.text:0000000000003B38 ; ---------------------------------------------------------------------------
.text:0000000000003B39                 align 20h
.text:0000000000003B40
.text:0000000000003B40 loc_3B40:                               ; CODE XREF: add_file_name_constprop_7+17↑j
.text:0000000000003B40                 mov     r14d, [rsi]
.text:0000000000003B43                 xor     eax, eax
.text:0000000000003B45                 lea     r12, g_names
.text:0000000000003B4C                 test    r14d, r14d
.text:0000000000003B4F                 setz    al
.text:0000000000003B52                 mov     rdi, [r12+rax*8] ; s
.text:0000000000003B56                 mov     eax, [rsi+rax*4]
.text:0000000000003B59                 cmp     eax, 1
.text:0000000000003B5C                 jz      loc_3C10
.text:0000000000003B62                 jle     loc_3C50
.text:0000000000003B68                 cmp     eax, 2
.text:0000000000003B6B                 jz      short loc_3BC0
.text:0000000000003B6D                 cmp     eax, 3
.text:0000000000003B70                 jnz     short loc_3B95
.text:0000000000003B72                 mov     [rsp+48h+var_30], r9
.text:0000000000003B77                 mov     [rsp+48h+var_38], r8
.text:0000000000003B7C                 mov     [rsp+48h+var_40], rcx
.text:0000000000003B81                 call    add_field_list
.text:0000000000003B86                 mov     r9, [rsp+48h+var_30]
.text:0000000000003B8B                 mov     r8, [rsp+48h+var_38]
.text:0000000000003B90                 mov     rcx, [rsp+48h+var_40]
.text:0000000000003B95
.text:0000000000003B95 loc_3B95:                               ; CODE XREF: add_file_name_constprop_7+90↑j
.text:0000000000003B95                                         ; add_file_name_constprop_7+116↓j ...
.text:0000000000003B95                 test    r14d, r14d
.text:0000000000003B98                 jz      short loc_3C00
.text:0000000000003B9A                 mov     eax, [rbp+4]
.text:0000000000003B9D                 mov     edx, 4
.text:0000000000003BA2                 mov     [rbp+0], eax
.text:0000000000003BA5                 mov     rax, cs:s1
.text:0000000000003BAC                 mov     cs:g_names, rax
.text:0000000000003BB3                 mov     eax, 8
.text:0000000000003BB8                 jmp     loc_3B12
.text:0000000000003BB8 ; ---------------------------------------------------------------------------
.text:0000000000003BBD                 align 20h
.text:0000000000003BC0
.text:0000000000003BC0 loc_3BC0:                               ; CODE XREF: add_file_name_constprop_7+8B↑j
.text:0000000000003BC0                 sub     dword ptr [rdx+4], 1
.text:0000000000003BC4                 mov     [rsp+48h+var_30], r9
.text:0000000000003BC9                 mov     [rsp+48h+var_38], r8
.text:0000000000003BCE                 mov     [rsp+48h+var_40], rcx
.text:0000000000003BD3                 call    string_to_join_field
.text:0000000000003BD8                 lea     rdi, join_field_2
.text:0000000000003BDF                 mov     rsi, rax
.text:0000000000003BE2                 call    set_join_field
.text:0000000000003BE7                 mov     rcx, [rsp+48h+var_40]
.text:0000000000003BEC                 mov     r8, [rsp+48h+var_38]
.text:0000000000003BF1                 mov     r9, [rsp+48h+var_30]
.text:0000000000003BF6                 jmp     short loc_3B95
.text:0000000000003BF6 ; ---------------------------------------------------------------------------
.text:0000000000003BF8                 align 20h
.text:0000000000003C00
.text:0000000000003C00 loc_3C00:                               ; CODE XREF: add_file_name_constprop_7+B8↑j
.text:0000000000003C00                 mov     eax, 8
.text:0000000000003C05                 mov     edx, 4
.text:0000000000003C0A                 jmp     loc_3B12
.text:0000000000003C0A ; ---------------------------------------------------------------------------
.text:0000000000003C0F                 align 10h
.text:0000000000003C10
.text:0000000000003C10 loc_3C10:                               ; CODE XREF: add_file_name_constprop_7+7C↑j
.text:0000000000003C10                 sub     dword ptr [rdx], 1
.text:0000000000003C13                 mov     [rsp+48h+var_30], r9
.text:0000000000003C18                 mov     [rsp+48h+var_38], r8
.text:0000000000003C1D                 mov     [rsp+48h+var_40], rcx
.text:0000000000003C22                 call    string_to_join_field
.text:0000000000003C27                 lea     rdi, join_field_1
.text:0000000000003C2E                 mov     rsi, rax
.text:0000000000003C31                 call    set_join_field
.text:0000000000003C36                 mov     rcx, [rsp+48h+var_40]
.text:0000000000003C3B                 mov     r8, [rsp+48h+var_38]
.text:0000000000003C40                 mov     r9, [rsp+48h+var_30]
.text:0000000000003C45                 jmp     loc_3B95
.text:0000000000003C45 ; ---------------------------------------------------------------------------
.text:0000000000003C4A                 align 10h
.text:0000000000003C50
.text:0000000000003C50 loc_3C50:                               ; CODE XREF: add_file_name_constprop_7+82↑j
.text:0000000000003C50                 test    eax, eax
.text:0000000000003C52                 jnz     loc_3B95
.text:0000000000003C58                 mov     rsi, r13
.text:0000000000003C5B                 mov     edi, 4
.text:0000000000003C60                 call    quotearg_style
.text:0000000000003C65                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:0000000000003C6C                 mov     rbx, rax
.text:0000000000003C6F                 mov     edx, 5          ; category
.text:0000000000003C74                 xor     edi, edi        ; domainname
.text:0000000000003C76                 call    _dcgettext
.text:0000000000003C7B                 xor     edi, edi        ; status
.text:0000000000003C7D                 mov     rdx, rax        ; format
.text:0000000000003C80                 mov     rcx, rbx
.text:0000000000003C83                 xor     esi, esi        ; errnum
.text:0000000000003C85                 xor     eax, eax
.text:0000000000003C87                 call    _error
.text:0000000000003C8C                 mov     edi, 1          ; status
.text:0000000000003C91                 call    usage
.text:0000000000003C91 ; } // starts at 3AE0
.text:0000000000003C91 add_file_name_constprop_7 endp
.text:0000000000003C91
.text:0000000000003C91 ; ---------------------------------------------------------------------------
.text:0000000000003C96                 align 20h
.text:0000000000003CA0
.text:0000000000003CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CA0
.text:0000000000003CA0
.text:0000000000003CA0                 public close_stdout_set_file_name
.text:0000000000003CA0 close_stdout_set_file_name proc near
.text:0000000000003CA0 ; __unwind {
.text:0000000000003CA0                 mov     cs:file_name, rdi
.text:0000000000003CA7                 retn
.text:0000000000003CA7 ; } // starts at 3CA0
.text:0000000000003CA7 close_stdout_set_file_name endp
.text:0000000000003CA7
.text:0000000000003CA7 ; ---------------------------------------------------------------------------
.text:0000000000003CA8                 align 10h
.text:0000000000003CB0
.text:0000000000003CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CB0
.text:0000000000003CB0
.text:0000000000003CB0                 public close_stdout_set_ignore_EPIPE
.text:0000000000003CB0 close_stdout_set_ignore_EPIPE proc near
.text:0000000000003CB0 ; __unwind {
.text:0000000000003CB0                 mov     cs:ignore_EPIPE, dil
.text:0000000000003CB7                 retn
.text:0000000000003CB7 ; } // starts at 3CB0
.text:0000000000003CB7 close_stdout_set_ignore_EPIPE endp
.text:0000000000003CB7
.text:0000000000003CB7 ; ---------------------------------------------------------------------------
.text:0000000000003CB8                 align 20h
.text:0000000000003CC0
.text:0000000000003CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CC0
.text:0000000000003CC0 ; Attributes: info_from_lumina
.text:0000000000003CC0
.text:0000000000003CC0 ; void __cdecl close_stdout()
.text:0000000000003CC0                 public close_stdout
.text:0000000000003CC0 close_stdout    proc near               ; DATA XREF: main+8D↑o
.text:0000000000003CC0 ; __unwind {
.text:0000000000003CC0                 push    rbp
.text:0000000000003CC1                 push    rbx
.text:0000000000003CC2                 sub     rsp, 8
.text:0000000000003CC6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003CCD                 call    close_stream
.text:0000000000003CD2                 test    eax, eax
.text:0000000000003CD4                 jz      short loc_3CEC
.text:0000000000003CD6                 call    ___errno_location
.text:0000000000003CDB                 cmp     cs:ignore_EPIPE, 0
.text:0000000000003CE2                 mov     rbx, rax
.text:0000000000003CE5                 jz      short loc_3D03
.text:0000000000003CE7                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000003CEA                 jnz     short loc_3D03
.text:0000000000003CEC
.text:0000000000003CEC loc_3CEC:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000003CEC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000003CF3                 call    close_stream
.text:0000000000003CF8                 test    eax, eax
.text:0000000000003CFA                 jnz     short loc_3D42
.text:0000000000003CFC                 add     rsp, 8
.text:0000000000003D00                 pop     rbx
.text:0000000000003D01                 pop     rbp
.text:0000000000003D02                 retn
.text:0000000000003D03 ; ---------------------------------------------------------------------------
.text:0000000000003D03
.text:0000000000003D03 loc_3D03:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000003D03                                         ; close_stdout+2A↑j
.text:0000000000003D03                 lea     rsi, aWriteError ; "write error"
.text:0000000000003D0A                 xor     edi, edi        ; domainname
.text:0000000000003D0C                 mov     edx, 5          ; category
.text:0000000000003D11                 call    _dcgettext
.text:0000000000003D16                 mov     rdi, cs:file_name
.text:0000000000003D1D                 mov     rbp, rax
.text:0000000000003D20                 test    rdi, rdi
.text:0000000000003D23                 jz      short loc_3D4D
.text:0000000000003D25                 call    quotearg_colon
.text:0000000000003D2A                 mov     esi, [rbx]      ; errnum
.text:0000000000003D2C                 lea     rdx, format     ; "%s: %s"
.text:0000000000003D33                 mov     rcx, rax
.text:0000000000003D36                 mov     r8, rbp
.text:0000000000003D39                 xor     edi, edi        ; status
.text:0000000000003D3B                 xor     eax, eax
.text:0000000000003D3D                 call    _error
.text:0000000000003D42
.text:0000000000003D42 loc_3D42:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000003D42                                         ; close_stdout+A2↓j
.text:0000000000003D42                 mov     edi, cs:exit_failure ; status
.text:0000000000003D48                 call    __exit
.text:0000000000003D4D ; ---------------------------------------------------------------------------
.text:0000000000003D4D
.text:0000000000003D4D loc_3D4D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000003D4D                 mov     esi, [rbx]      ; errnum
.text:0000000000003D4F                 lea     rdx, msgid+16h  ; format
.text:0000000000003D56                 mov     rcx, rax
.text:0000000000003D59                 xor     edi, edi        ; status
.text:0000000000003D5B                 xor     eax, eax
.text:0000000000003D5D                 call    _error
.text:0000000000003D62                 jmp     short loc_3D42
.text:0000000000003D62 ; } // starts at 3CC0
.text:0000000000003D62 close_stdout    endp
.text:0000000000003D62
.text:0000000000003D62 ; ---------------------------------------------------------------------------
.text:0000000000003D64                 align 10h
.text:0000000000003D70
.text:0000000000003D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D70
.text:0000000000003D70
.text:0000000000003D70 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:0000000000003D70                 public fdadvise
.text:0000000000003D70 fdadvise        proc near
.text:0000000000003D70 ; __unwind {
.text:0000000000003D70                 jmp     _posix_fadvise
.text:0000000000003D70 ; } // starts at 3D70
.text:0000000000003D70 fdadvise        endp
.text:0000000000003D70
.text:0000000000003D70 ; ---------------------------------------------------------------------------
.text:0000000000003D75                 align 20h
.text:0000000000003D80
.text:0000000000003D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D80
.text:0000000000003D80
.text:0000000000003D80                 public fadvise
.text:0000000000003D80 fadvise         proc near               ; CODE XREF: main+5CD↑p
.text:0000000000003D80                                         ; main+5DF↑p
.text:0000000000003D80 ; __unwind {
.text:0000000000003D80                 test    rdi, rdi
.text:0000000000003D83                 jz      short locret_3DA0
.text:0000000000003D85                 push    rbx
.text:0000000000003D86                 mov     ebx, esi
.text:0000000000003D88                 call    _fileno
.text:0000000000003D8D                 mov     ecx, ebx        ; advise
.text:0000000000003D8F                 xor     edx, edx        ; len
.text:0000000000003D91                 xor     esi, esi        ; offset
.text:0000000000003D93                 pop     rbx
.text:0000000000003D94                 mov     edi, eax        ; fd
.text:0000000000003D96                 jmp     _posix_fadvise
.text:0000000000003D96 ; ---------------------------------------------------------------------------
.text:0000000000003D9B                 align 20h
.text:0000000000003DA0
.text:0000000000003DA0 locret_3DA0:                            ; CODE XREF: fadvise+3↑j
.text:0000000000003DA0                 rep retn
.text:0000000000003DA0 ; } // starts at 3D80
.text:0000000000003DA0 fadvise         endp
.text:0000000000003DA0
.text:0000000000003DA0 ; ---------------------------------------------------------------------------
.text:0000000000003DA2                 align 10h
.text:0000000000003DB0
.text:0000000000003DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DB0
.text:0000000000003DB0
.text:0000000000003DB0                 public fopen_safer
.text:0000000000003DB0 fopen_safer     proc near               ; CODE XREF: main+9C1↑p
.text:0000000000003DB0                                         ; main+C20↑p
.text:0000000000003DB0 ; __unwind {
.text:0000000000003DB0                 push    r12
.text:0000000000003DB2                 push    rbp
.text:0000000000003DB3                 mov     rbp, rsi
.text:0000000000003DB6                 push    rbx
.text:0000000000003DB7                 call    _fopen
.text:0000000000003DBC                 test    rax, rax
.text:0000000000003DBF                 mov     rbx, rax
.text:0000000000003DC2                 jz      short loc_3DD1
.text:0000000000003DC4                 mov     rdi, rax        ; stream
.text:0000000000003DC7                 call    _fileno
.text:0000000000003DCC                 cmp     eax, 2
.text:0000000000003DCF                 jbe     short loc_3DE0
.text:0000000000003DD1
.text:0000000000003DD1 loc_3DD1:                               ; CODE XREF: fopen_safer+12↑j
.text:0000000000003DD1                                         ; fopen_safer+5B↓j ...
.text:0000000000003DD1                 mov     rax, rbx
.text:0000000000003DD4                 pop     rbx
.text:0000000000003DD5                 pop     rbp
.text:0000000000003DD6                 pop     r12
.text:0000000000003DD8                 retn
.text:0000000000003DD8 ; ---------------------------------------------------------------------------
.text:0000000000003DD9                 align 20h
.text:0000000000003DE0
.text:0000000000003DE0 loc_3DE0:                               ; CODE XREF: fopen_safer+1F↑j
.text:0000000000003DE0                 mov     edi, eax
.text:0000000000003DE2                 call    dup_safer
.text:0000000000003DE7                 test    eax, eax
.text:0000000000003DE9                 mov     r12d, eax
.text:0000000000003DEC                 js      short loc_3E28
.text:0000000000003DEE                 mov     rdi, rbx        ; stream
.text:0000000000003DF1                 call    rpl_fclose
.text:0000000000003DF6                 test    eax, eax
.text:0000000000003DF8                 jnz     short loc_3E0D
.text:0000000000003DFA                 mov     rsi, rbp        ; modes
.text:0000000000003DFD                 mov     edi, r12d       ; fd
.text:0000000000003E00                 call    _fdopen
.text:0000000000003E05                 test    rax, rax
.text:0000000000003E08                 mov     rbx, rax
.text:0000000000003E0B                 jnz     short loc_3DD1
.text:0000000000003E0D
.text:0000000000003E0D loc_3E0D:                               ; CODE XREF: fopen_safer+48↑j
.text:0000000000003E0D                 call    ___errno_location
.text:0000000000003E12                 mov     ebp, [rax]
.text:0000000000003E14                 mov     rbx, rax
.text:0000000000003E17                 mov     edi, r12d       ; fd
.text:0000000000003E1A                 call    _close
.text:0000000000003E1F                 mov     [rbx], ebp
.text:0000000000003E21                 xor     ebx, ebx
.text:0000000000003E23                 jmp     short loc_3DD1
.text:0000000000003E23 ; ---------------------------------------------------------------------------
.text:0000000000003E25                 align 8
.text:0000000000003E28
.text:0000000000003E28 loc_3E28:                               ; CODE XREF: fopen_safer+3C↑j
.text:0000000000003E28                 call    ___errno_location
.text:0000000000003E2D                 mov     r12d, [rax]
.text:0000000000003E30                 mov     rbp, rax
.text:0000000000003E33                 mov     rdi, rbx        ; stream
.text:0000000000003E36                 call    rpl_fclose
.text:0000000000003E3B                 xor     ebx, ebx
.text:0000000000003E3D                 mov     [rbp+0], r12d
.text:0000000000003E41                 jmp     short loc_3DD1
.text:0000000000003E41 ; } // starts at 3DB0
.text:0000000000003E41 fopen_safer     endp
.text:0000000000003E41
.text:0000000000003E41 ; ---------------------------------------------------------------------------
.text:0000000000003E43                 align 10h
.text:0000000000003E50
.text:0000000000003E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E50
.text:0000000000003E50
.text:0000000000003E50                 public hard_locale
.text:0000000000003E50 hard_locale     proc near               ; CODE XREF: main+88↑p
.text:0000000000003E50                                         ; rpl_mbrtowc+47↓p
.text:0000000000003E50 ; __unwind {
.text:0000000000003E50                 sub     rsp, 8
.text:0000000000003E54                 xor     esi, esi        ; locale
.text:0000000000003E56                 call    _setlocale
.text:0000000000003E5B                 mov     rdx, rax
.text:0000000000003E5E                 mov     eax, 1
.text:0000000000003E63                 test    rdx, rdx
.text:0000000000003E66                 jz      short loc_3E85
.text:0000000000003E68                 lea     rdi, aC         ; "C"
.text:0000000000003E6F                 mov     ecx, 2
.text:0000000000003E74                 mov     rsi, rdx
.text:0000000000003E77                 repe cmpsb
.text:0000000000003E79                 setnbe  cl
.text:0000000000003E7C                 sbb     cl, 0
.text:0000000000003E7F                 xor     eax, eax
.text:0000000000003E81                 test    cl, cl
.text:0000000000003E83                 jnz     short loc_3E90
.text:0000000000003E85
.text:0000000000003E85 loc_3E85:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000003E85                 add     rsp, 8
.text:0000000000003E89                 retn
.text:0000000000003E89 ; ---------------------------------------------------------------------------
.text:0000000000003E8A                 align 10h
.text:0000000000003E90
.text:0000000000003E90 loc_3E90:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000003E90                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000003E97                 mov     ecx, 6
.text:0000000000003E9C                 mov     rsi, rdx
.text:0000000000003E9F                 repe cmpsb
.text:0000000000003EA1                 setnbe  al
.text:0000000000003EA4                 sbb     al, 0
.text:0000000000003EA6                 test    al, al
.text:0000000000003EA8                 setnz   al
.text:0000000000003EAB                 add     rsp, 8
.text:0000000000003EAF                 retn
.text:0000000000003EAF ; } // starts at 3E50
.text:0000000000003EAF hard_locale     endp
.text:0000000000003EAF
.text:0000000000003EB0
.text:0000000000003EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EB0
.text:0000000000003EB0
.text:0000000000003EB0                 public initbuffer
.text:0000000000003EB0 initbuffer      proc near
.text:0000000000003EB0 ; __unwind {
.text:0000000000003EB0                 pxor    xmm0, xmm0
.text:0000000000003EB4                 mov     qword ptr [rdi+10h], 0
.text:0000000000003EBC                 movups  xmmword ptr [rdi], xmm0
.text:0000000000003EBF                 retn
.text:0000000000003EBF ; } // starts at 3EB0
.text:0000000000003EBF initbuffer      endp
.text:0000000000003EBF
.text:0000000000003EC0
.text:0000000000003EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EC0
.text:0000000000003EC0
.text:0000000000003EC0                 public readlinebuffer_delim
.text:0000000000003EC0 readlinebuffer_delim proc near          ; CODE XREF: get_line+50↑p
.text:0000000000003EC0                                         ; readlinebuffer+5↓j
.text:0000000000003EC0
.text:0000000000003EC0 var_48          = qword ptr -48h
.text:0000000000003EC0 var_39          = byte ptr -39h
.text:0000000000003EC0
.text:0000000000003EC0 ; __unwind {
.text:0000000000003EC0                 push    r15
.text:0000000000003EC2                 push    r14
.text:0000000000003EC4                 push    r13
.text:0000000000003EC6                 push    r12
.text:0000000000003EC8                 push    rbp
.text:0000000000003EC9                 push    rbx
.text:0000000000003ECA                 sub     rsp, 18h
.text:0000000000003ECE                 mov     r13, [rdi+10h]
.text:0000000000003ED2                 mov     r8, [rdi]
.text:0000000000003ED5                 add     r8, r13
.text:0000000000003ED8                 test    byte ptr [rsi], 10h
.text:0000000000003EDB                 jnz     loc_3FB0
.text:0000000000003EE1                 mov     r14, rdi
.text:0000000000003EE4                 mov     rbp, rsi
.text:0000000000003EE7                 mov     rbx, r13
.text:0000000000003EEA                 movsx   r15d, dl
.text:0000000000003EEE                 jmp     short loc_3EFB
.text:0000000000003EF0 ; ---------------------------------------------------------------------------
.text:0000000000003EF0
.text:0000000000003EF0 loc_3EF0:                               ; CODE XREF: readlinebuffer_delim+5A↓j
.text:0000000000003EF0                 cmp     r12d, r15d
.text:0000000000003EF3                 lea     rbx, [rsi+1]
.text:0000000000003EF7                 mov     [rsi], cl
.text:0000000000003EF9                 jz      short loc_3F56
.text:0000000000003EFB
.text:0000000000003EFB loc_3EFB:                               ; CODE XREF: readlinebuffer_delim+2E↑j
.text:0000000000003EFB                                         ; readlinebuffer_delim+94↓j
.text:0000000000003EFB                 mov     rcx, [rbp+8]
.text:0000000000003EFF                 cmp     rcx, [rbp+10h]
.text:0000000000003F03                 jnb     short loc_3F70
.text:0000000000003F05                 lea     rax, [rcx+1]
.text:0000000000003F09                 mov     [rbp+8], rax
.text:0000000000003F0D                 movzx   r12d, byte ptr [rcx]
.text:0000000000003F11                 mov     ecx, r12d
.text:0000000000003F14
.text:0000000000003F14 loc_3F14:                               ; CODE XREF: readlinebuffer_delim+E6↓j
.text:0000000000003F14                                         ; readlinebuffer_delim+103↓j
.text:0000000000003F14                 cmp     rbx, r8
.text:0000000000003F17                 mov     rsi, rbx
.text:0000000000003F1A                 jnz     short loc_3EF0
.text:0000000000003F1C                 mov     rbx, [r14]
.text:0000000000003F1F                 mov     rsi, r14
.text:0000000000003F22                 mov     rdi, r13
.text:0000000000003F25                 mov     [rsp+48h+var_39], dl
.text:0000000000003F29                 mov     byte ptr [rsp+48h+var_48], cl
.text:0000000000003F2C                 call    x2realloc
.text:0000000000003F31                 mov     r8, [r14]
.text:0000000000003F34                 movzx   ecx, byte ptr [rsp+48h+var_48]
.text:0000000000003F38                 lea     rsi, [rax+rbx]
.text:0000000000003F3C                 mov     [r14+10h], rax
.text:0000000000003F40                 mov     r13, rax
.text:0000000000003F43                 movzx   edx, [rsp+48h+var_39]
.text:0000000000003F48                 lea     rbx, [rsi+1]
.text:0000000000003F4C                 add     r8, rax
.text:0000000000003F4F                 cmp     r12d, r15d
.text:0000000000003F52                 mov     [rsi], cl
.text:0000000000003F54                 jnz     short loc_3EFB
.text:0000000000003F56
.text:0000000000003F56 loc_3F56:                               ; CODE XREF: readlinebuffer_delim+39↑j
.text:0000000000003F56                                         ; readlinebuffer_delim+DF↓j
.text:0000000000003F56                 sub     rbx, r13
.text:0000000000003F59                 mov     rax, r14
.text:0000000000003F5C                 mov     [r14+8], rbx
.text:0000000000003F60                 add     rsp, 18h
.text:0000000000003F64                 pop     rbx
.text:0000000000003F65                 pop     rbp
.text:0000000000003F66                 pop     r12
.text:0000000000003F68                 pop     r13
.text:0000000000003F6A                 pop     r14
.text:0000000000003F6C                 pop     r15
.text:0000000000003F6E                 retn
.text:0000000000003F6E ; ---------------------------------------------------------------------------
.text:0000000000003F6F                 align 10h
.text:0000000000003F70
.text:0000000000003F70 loc_3F70:                               ; CODE XREF: readlinebuffer_delim+43↑j
.text:0000000000003F70                 mov     rdi, rbp        ; _IO_FILE *
.text:0000000000003F73                 mov     [rsp+48h+var_39], dl
.text:0000000000003F77                 mov     [rsp+48h+var_48], r8
.text:0000000000003F7B                 call    ___uflow
.text:0000000000003F80                 cmp     eax, 0FFFFFFFFh
.text:0000000000003F83                 mov     r12d, eax
.text:0000000000003F86                 mov     r8, [rsp+48h+var_48]
.text:0000000000003F8A                 movzx   edx, [rsp+48h+var_39]
.text:0000000000003F8F                 jnz     short loc_3FC1
.text:0000000000003F91                 cmp     r13, rbx
.text:0000000000003F94                 jz      short loc_3FB0
.text:0000000000003F96                 test    byte ptr [rbp+0], 20h
.text:0000000000003F9A                 jnz     short loc_3FB0
.text:0000000000003F9C                 cmp     [rbx-1], dl
.text:0000000000003F9F                 jz      short loc_3F56
.text:0000000000003FA1                 mov     r12d, r15d
.text:0000000000003FA4                 mov     ecx, edx
.text:0000000000003FA6                 jmp     loc_3F14
.text:0000000000003FA6 ; ---------------------------------------------------------------------------
.text:0000000000003FAB                 align 10h
.text:0000000000003FB0
.text:0000000000003FB0 loc_3FB0:                               ; CODE XREF: readlinebuffer_delim+1B↑j
.text:0000000000003FB0                                         ; readlinebuffer_delim+D4↑j ...
.text:0000000000003FB0                 add     rsp, 18h
.text:0000000000003FB4                 xor     eax, eax
.text:0000000000003FB6                 pop     rbx
.text:0000000000003FB7                 pop     rbp
.text:0000000000003FB8                 pop     r12
.text:0000000000003FBA                 pop     r13
.text:0000000000003FBC                 pop     r14
.text:0000000000003FBE                 pop     r15
.text:0000000000003FC0                 retn
.text:0000000000003FC1 ; ---------------------------------------------------------------------------
.text:0000000000003FC1
.text:0000000000003FC1 loc_3FC1:                               ; CODE XREF: readlinebuffer_delim+CF↑j
.text:0000000000003FC1                 mov     ecx, eax
.text:0000000000003FC3                 jmp     loc_3F14
.text:0000000000003FC3 ; } // starts at 3EC0
.text:0000000000003FC3 readlinebuffer_delim endp
.text:0000000000003FC3
.text:0000000000003FC3 ; ---------------------------------------------------------------------------
.text:0000000000003FC8                 align 10h
.text:0000000000003FD0
.text:0000000000003FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FD0
.text:0000000000003FD0
.text:0000000000003FD0                 public readlinebuffer
.text:0000000000003FD0 readlinebuffer  proc near
.text:0000000000003FD0 ; __unwind {
.text:0000000000003FD0                 mov     edx, 0Ah
.text:0000000000003FD5                 jmp     readlinebuffer_delim
.text:0000000000003FD5 ; } // starts at 3FD0
.text:0000000000003FD5 readlinebuffer  endp
.text:0000000000003FD5
.text:0000000000003FD5 ; ---------------------------------------------------------------------------
.text:0000000000003FDA                 align 20h
.text:0000000000003FE0
.text:0000000000003FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FE0
.text:0000000000003FE0
.text:0000000000003FE0                 public freebuffer
.text:0000000000003FE0 freebuffer      proc near
.text:0000000000003FE0 ; __unwind {
.text:0000000000003FE0                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000003FE4                 jmp     _free
.text:0000000000003FE4 ; } // starts at 3FE0
.text:0000000000003FE4 freebuffer      endp
.text:0000000000003FE4
.text:0000000000003FE4 ; ---------------------------------------------------------------------------
.text:0000000000003FE9                 align 10h
.text:0000000000003FF0
.text:0000000000003FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FF0
.text:0000000000003FF0
.text:0000000000003FF0                 public memcasecmp
.text:0000000000003FF0 memcasecmp      proc near               ; CODE XREF: keycmp_isra_4+DA↑p
.text:0000000000003FF0 ; __unwind {
.text:0000000000003FF0                 test    rdx, rdx
.text:0000000000003FF3                 jz      short loc_4038
.text:0000000000003FF5                 push    r12
.text:0000000000003FF7                 push    rbp
.text:0000000000003FF8                 mov     r12, rsi
.text:0000000000003FFB                 push    rbx
.text:0000000000003FFC                 mov     rbp, rdi
.text:0000000000003FFF                 mov     rbx, rdx
.text:0000000000004002                 call    ___ctype_toupper_loc
.text:0000000000004007                 xor     ecx, ecx
.text:0000000000004009                 mov     r8, [rax]
.text:000000000000400C                 jmp     short loc_4019
.text:000000000000400C ; ---------------------------------------------------------------------------
.text:000000000000400E                 align 10h
.text:0000000000004010
.text:0000000000004010 loc_4010:                               ; CODE XREF: memcasecmp+3B↓j
.text:0000000000004010                 add     rcx, 1
.text:0000000000004014                 cmp     rcx, rbx
.text:0000000000004017                 jz      short loc_402D
.text:0000000000004019
.text:0000000000004019 loc_4019:                               ; CODE XREF: memcasecmp+1C↑j
.text:0000000000004019                 movzx   eax, byte ptr [rbp+rcx+0]
.text:000000000000401E                 movzx   r9d, byte ptr [r12+rcx]
.text:0000000000004023                 mov     eax, [r8+rax*4]
.text:0000000000004027                 sub     eax, [r8+r9*4]
.text:000000000000402B                 jz      short loc_4010
.text:000000000000402D
.text:000000000000402D loc_402D:                               ; CODE XREF: memcasecmp+27↑j
.text:000000000000402D                 pop     rbx
.text:000000000000402E                 pop     rbp
.text:000000000000402F                 pop     r12
.text:0000000000004031                 retn
.text:0000000000004031 ; ---------------------------------------------------------------------------
.text:0000000000004032                 align 8
.text:0000000000004038
.text:0000000000004038 loc_4038:                               ; CODE XREF: memcasecmp+3↑j
.text:0000000000004038                 xor     eax, eax
.text:000000000000403A                 retn
.text:000000000000403A ; } // starts at 3FF0
.text:000000000000403A memcasecmp      endp
.text:000000000000403A
.text:000000000000403A ; ---------------------------------------------------------------------------
.text:000000000000403B                 align 20h
.text:0000000000004040
.text:0000000000004040 ; =============== S U B R O U T I N E =======================================
.text:0000000000004040
.text:0000000000004040
.text:0000000000004040                 public set_program_name
.text:0000000000004040 set_program_name proc near              ; CODE XREF: main+4E↑p
.text:0000000000004040 ; __unwind {
.text:0000000000004040                 test    rdi, rdi
.text:0000000000004043                 push    rbx
.text:0000000000004044                 jz      short loc_40BD
.text:0000000000004046                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000404B                 mov     rbx, rdi
.text:000000000000404E                 call    _strrchr
.text:0000000000004053                 test    rax, rax
.text:0000000000004056                 jz      short loc_40AD
.text:0000000000004058                 lea     r8, [rax+1]
.text:000000000000405C                 mov     rdx, r8
.text:000000000000405F                 sub     rdx, rbx
.text:0000000000004062                 cmp     rdx, 6
.text:0000000000004066                 jle     short loc_40AD
.text:0000000000004068                 lea     rsi, [rax-6]
.text:000000000000406C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000004073                 mov     ecx, 7
.text:0000000000004078                 repe cmpsb
.text:000000000000407A                 setnbe  dl
.text:000000000000407D                 sbb     dl, 0
.text:0000000000004080                 test    dl, dl
.text:0000000000004082                 jnz     short loc_40AD
.text:0000000000004084                 lea     rdi, aLt        ; "lt-"
.text:000000000000408B                 mov     ecx, 3
.text:0000000000004090                 mov     rsi, r8
.text:0000000000004093                 mov     rbx, r8
.text:0000000000004096                 repe cmpsb
.text:0000000000004098                 setnbe  dl
.text:000000000000409B                 sbb     dl, 0
.text:000000000000409E                 test    dl, dl
.text:00000000000040A0                 jnz     short loc_40AD
.text:00000000000040A2                 lea     rbx, [rax+4]
.text:00000000000040A6                 mov     cs:__bss_start, rbx
.text:00000000000040AD
.text:00000000000040AD loc_40AD:                               ; CODE XREF: set_program_name+16↑j
.text:00000000000040AD                                         ; set_program_name+26↑j ...
.text:00000000000040AD                 mov     cs:program_name, rbx
.text:00000000000040B4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000040BB                 pop     rbx
.text:00000000000040BC                 retn
.text:00000000000040BD ; ---------------------------------------------------------------------------
.text:00000000000040BD
.text:00000000000040BD loc_40BD:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000040BD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000040C4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000040CB                 mov     edx, 37h ; '7'  ; n
.text:00000000000040D0                 mov     esi, 1          ; size
.text:00000000000040D5                 call    _fwrite
.text:00000000000040DA                 call    _abort
.text:00000000000040DA ; } // starts at 4040
.text:00000000000040DA set_program_name endp
.text:00000000000040DA
.text:00000000000040DA ; ---------------------------------------------------------------------------
.text:00000000000040DF                 align 20h
.text:00000000000040E0
.text:00000000000040E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040E0
.text:00000000000040E0 ; Attributes: info_from_lumina
.text:00000000000040E0
.text:00000000000040E0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000040E0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000040E0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000040E0 ; __unwind {
.text:00000000000040E0                 push    rbp
.text:00000000000040E1                 push    rbx
.text:00000000000040E2                 mov     rbp, rdi
.text:00000000000040E5                 mov     ebx, esi
.text:00000000000040E7                 sub     rsp, 8
.text:00000000000040EB                 call    locale_charset
.text:00000000000040F0                 movzx   edx, byte ptr [rax]
.text:00000000000040F3                 and     edx, 0FFFFFFDFh
.text:00000000000040F6                 cmp     dl, 55h ; 'U'
.text:00000000000040F9                 jz      short loc_4170
.text:00000000000040FB                 cmp     dl, 47h ; 'G'
.text:00000000000040FE                 jz      short loc_4120
.text:0000000000004100
.text:0000000000004100 loc_4100:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000004100                                         ; gettext_quote+50↓j ...
.text:0000000000004100                 lea     rax, unk_7FBB
.text:0000000000004107                 lea     rdx, asc_7FBD   ; "'"
.text:000000000000410E                 cmp     ebx, 9
.text:0000000000004111                 cmovnz  rax, rdx
.text:0000000000004115                 add     rsp, 8
.text:0000000000004119                 pop     rbx
.text:000000000000411A                 pop     rbp
.text:000000000000411B                 retn
.text:000000000000411B ; ---------------------------------------------------------------------------
.text:000000000000411C                 align 20h
.text:0000000000004120
.text:0000000000004120 loc_4120:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000004120                 movzx   edx, byte ptr [rax+1]
.text:0000000000004124                 and     edx, 0FFFFFFDFh
.text:0000000000004127                 cmp     dl, 42h ; 'B'
.text:000000000000412A                 jnz     short loc_4100
.text:000000000000412C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000004130                 jnz     short loc_4100
.text:0000000000004132                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000004136                 jnz     short loc_4100
.text:0000000000004138                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000413C                 jnz     short loc_4100
.text:000000000000413E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000004142                 jnz     short loc_4100
.text:0000000000004144                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000004148                 jnz     short loc_4100
.text:000000000000414A                 cmp     byte ptr [rax+7], 0
.text:000000000000414E                 jnz     short loc_4100
.text:0000000000004150                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000004154                 lea     rax, unk_7FB4
.text:000000000000415B                 lea     rdx, unk_7FB8
.text:0000000000004162                 cmovnz  rax, rdx
.text:0000000000004166                 add     rsp, 8
.text:000000000000416A                 pop     rbx
.text:000000000000416B                 pop     rbp
.text:000000000000416C                 retn
.text:000000000000416C ; ---------------------------------------------------------------------------
.text:000000000000416D                 align 10h
.text:0000000000004170
.text:0000000000004170 loc_4170:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000004170                 movzx   edx, byte ptr [rax+1]
.text:0000000000004174                 and     edx, 0FFFFFFDFh
.text:0000000000004177                 cmp     dl, 54h ; 'T'
.text:000000000000417A                 jnz     short loc_4100
.text:000000000000417C                 movzx   edx, byte ptr [rax+2]
.text:0000000000004180                 and     edx, 0FFFFFFDFh
.text:0000000000004183                 cmp     dl, 46h ; 'F'
.text:0000000000004186                 jnz     loc_4100
.text:000000000000418C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000004190                 jnz     loc_4100
.text:0000000000004196                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000419A                 jnz     loc_4100
.text:00000000000041A0                 cmp     byte ptr [rax+5], 0
.text:00000000000041A4                 jnz     loc_4100
.text:00000000000041AA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000041AE                 lea     rax, unk_7FAC
.text:00000000000041B5                 lea     rdx, unk_7FB0
.text:00000000000041BC                 cmovnz  rax, rdx
.text:00000000000041C0                 add     rsp, 8
.text:00000000000041C4                 pop     rbx
.text:00000000000041C5                 pop     rbp
.text:00000000000041C6                 retn
.text:00000000000041C6 ; } // starts at 40E0
.text:00000000000041C6 gettext_quote   endp
.text:00000000000041C6
.text:00000000000041C6 ; ---------------------------------------------------------------------------
.text:00000000000041C7                 align 10h
.text:00000000000041D0
.text:00000000000041D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041D0
.text:00000000000041D0 ; Attributes: info_from_lumina
.text:00000000000041D0
.text:00000000000041D0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000041D0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000041D0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000041D0
.text:00000000000041D0 var_E0          = dword ptr -0E0h
.text:00000000000041D0 var_DB          = byte ptr -0DBh
.text:00000000000041D0 var_DA          = byte ptr -0DAh
.text:00000000000041D0 var_D9          = byte ptr -0D9h
.text:00000000000041D0 s               = qword ptr -0D8h
.text:00000000000041D0 n               = qword ptr -0D0h
.text:00000000000041D0 var_C8          = qword ptr -0C8h
.text:00000000000041D0 ps              = qword ptr -0C0h
.text:00000000000041D0 var_B8          = qword ptr -0B8h
.text:00000000000041D0 var_B0          = qword ptr -0B0h
.text:00000000000041D0 var_A8          = qword ptr -0A8h
.text:00000000000041D0 s2              = qword ptr -0A0h
.text:00000000000041D0 var_98          = qword ptr -98h
.text:00000000000041D0 var_90          = qword ptr -90h
.text:00000000000041D0 var_88          = qword ptr -88h
.text:00000000000041D0 var_80          = qword ptr -80h
.text:00000000000041D0 var_78          = qword ptr -78h
.text:00000000000041D0 var_70          = dword ptr -70h
.text:00000000000041D0 var_6C          = byte ptr -6Ch
.text:00000000000041D0 var_6B          = byte ptr -6Bh
.text:00000000000041D0 var_6A          = byte ptr -6Ah
.text:00000000000041D0 var_69          = byte ptr -69h
.text:00000000000041D0 var_68          = qword ptr -68h
.text:00000000000041D0 var_60          = qword ptr -60h
.text:00000000000041D0 wc              = dword ptr -4Ch
.text:00000000000041D0 var_48          = qword ptr -48h
.text:00000000000041D0 var_40          = qword ptr -40h
.text:00000000000041D0 arg_0           = qword ptr  8
.text:00000000000041D0 arg_8           = qword ptr  10h
.text:00000000000041D0 arg_10          = qword ptr  18h
.text:00000000000041D0
.text:00000000000041D0 ; __unwind {
.text:00000000000041D0                 push    r15
.text:00000000000041D2                 push    r14
.text:00000000000041D4                 mov     r15d, r8d
.text:00000000000041D7                 push    r13
.text:00000000000041D9                 push    r12
.text:00000000000041DB                 mov     r14, rdi
.text:00000000000041DE                 push    rbp
.text:00000000000041DF                 push    rbx
.text:00000000000041E0                 mov     ebx, r9d
.text:00000000000041E3                 mov     r13, rsi
.text:00000000000041E6                 mov     rbp, rcx
.text:00000000000041E9                 and     ebx, 2
.text:00000000000041EC                 sub     rsp, 0B8h
.text:00000000000041F3                 mov     rax, [rsp+0E8h+arg_0]
.text:00000000000041FB                 mov     [rsp+0E8h+s], rdx
.text:0000000000004200                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000004205                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000420A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000420F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000004217                 mov     [rsp+0E8h+var_80], rax
.text:000000000000421C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000004224                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004229                 mov     rax, fs:28h
.text:0000000000004232                 mov     [rsp+0E8h+var_40], rax
.text:000000000000423A                 xor     eax, eax
.text:000000000000423C                 call    ___ctype_get_mb_cur_max
.text:0000000000004241                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000004245                 mov     [rsp+0E8h+var_90], rax
.text:000000000000424A                 ja      def_4261        ; jumptable 00000000000121F1 default case
.text:0000000000004250                 lea     rcx, jpt_4261
.text:0000000000004257                 mov     edx, r15d
.text:000000000000425A                 movsxd  rax, ds:(jpt_4261 - 8020h)[rcx+rdx*4]
.text:000000000000425E                 add     rax, rcx
.text:0000000000004261                 jmp     rax             ; switch jump
.text:0000000000004263 ; ---------------------------------------------------------------------------
.text:0000000000004263
.text:0000000000004263 loc_4263:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004263                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000004263                                         ; DATA XREF: ...
.text:0000000000004263                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000004268                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000426D                 xor     r12d, r12d
.text:0000000000004270                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004279                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000427E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004283
.text:0000000000004283 loc_4283:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000004283                 lea     rax, asc_7FBD   ; "'"
.text:000000000000428A                 mov     [rsp+0E8h+n], 1
.text:0000000000004293                 xor     r15d, r15d
.text:0000000000004296                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000429E                 mov     [rsp+0E8h+s2], rax
.text:00000000000042A3
.text:00000000000042A3 loc_42A3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:00000000000042A3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:00000000000042A3                 xor     r11d, r11d
.text:00000000000042A6                 mov     rax, rbp
.text:00000000000042A9                 mov     r8d, r12d
.text:00000000000042AC                 mov     rbp, r11
.text:00000000000042AF                 mov     r11, rax
.text:00000000000042B2                 nop     word ptr [rax+rax+00h]
.text:00000000000042B8
.text:00000000000042B8 loc_42B8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000042B8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000042B8                 cmp     r11, rbp
.text:00000000000042BB                 setnz   r12b
.text:00000000000042BF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000042C3                 jnz     short loc_42D2
.text:00000000000042C5                 mov     rax, [rsp+0E8h+s]
.text:00000000000042CA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000042CE                 setnz   r12b
.text:00000000000042D2
.text:00000000000042D2 loc_42D2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000042D2                 test    r12b, r12b
.text:00000000000042D5                 jz      loc_4930
.text:00000000000042DB                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000042E0                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000042E5                 lea     r9, [rdi+rbp]
.text:00000000000042E9                 setnz   al
.text:00000000000042EC                 and     al, [rsp+0E8h+var_DB]
.text:00000000000042F0                 mov     r10d, eax
.text:00000000000042F3                 jz      loc_43A0
.text:00000000000042F9                 mov     rax, [rsp+0E8h+n]
.text:00000000000042FE                 test    rax, rax
.text:0000000000004301                 jz      loc_4730
.text:0000000000004307                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000430B                 lea     rbx, [rbp+rax+0]
.text:0000000000004310                 jnz     short loc_4340
.text:0000000000004312                 cmp     rax, 1
.text:0000000000004316                 jbe     short loc_4340
.text:0000000000004318                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000431D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000004322                 mov     [rsp+0E8h+ps], r9
.text:0000000000004327                 call    _strlen
.text:000000000000432C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000004332                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000004338                 mov     r11, rax
.text:000000000000433B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000004340
.text:0000000000004340 loc_4340:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000004340                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000004340                 cmp     rbx, r11
.text:0000000000004343                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000004348                 ja      loc_4900
.text:000000000000434E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000004353                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000004358                 mov     rdi, r9         ; s1
.text:000000000000435B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000004360                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000004365                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000436A                 call    _memcmp
.text:000000000000436F                 test    eax, eax
.text:0000000000004371                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000004376                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000437C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000004381                 jnz     loc_4900
.text:0000000000004387                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000438C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000004392                 jnz     loc_5315
.text:0000000000004398                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000043A0
.text:00000000000043A0 loc_43A0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:00000000000043A0                                         ; quotearg_buffer_restyled+733↓j
.text:00000000000043A0                 movzx   ebx, byte ptr [r9]
.text:00000000000043A4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000043A7                 ja      def_43BE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000043AD                 lea     rcx, jpt_43BE
.text:00000000000043B4                 movzx   edx, bl
.text:00000000000043B7                 movsxd  rax, ds:(jpt_43BE - 804Ch)[rcx+rdx*4]
.text:00000000000043BB                 add     rax, rcx
.text:00000000000043BE                 jmp     rax             ; switch jump
.text:00000000000043C0 ; ---------------------------------------------------------------------------
.text:00000000000043C0
.text:00000000000043C0 loc_43C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000043C0                                         ; DATA XREF: .rodata:jpt_474A↓o
.text:00000000000043C0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000043C3
.text:00000000000043C3 loc_43C3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000043C3                                         ; DATA XREF: .rodata:jpt_43BE↓o
.text:00000000000043C3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000043C7                 setnz   al
.text:00000000000043CA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000043CE                 jnz     short loc_43DC
.text:00000000000043D0                 mov     rax, [rsp+0E8h+s]
.text:00000000000043D5                 cmp     byte ptr [rax+1], 0
.text:00000000000043D9                 setnz   al
.text:00000000000043DC
.text:00000000000043DC loc_43DC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000043DC                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000043E1                 setz    dl
.text:00000000000043E4                 test    al, al
.text:00000000000043E6                 jz      loc_4638
.text:00000000000043EC
.text:00000000000043EC loc_43EC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000043EC                 xor     r12d, r12d
.text:00000000000043EF                 xor     eax, eax
.text:00000000000043F1                 nop     dword ptr [rax+00000000h]
.text:00000000000043F8
.text:00000000000043F8 loc_43F8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000043F8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000043F8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000043FD                 jnz     loc_4512
.text:0000000000004403                 test    dl, dl
.text:0000000000004405                 jnz     loc_4512
.text:000000000000440B
.text:000000000000440B loc_440B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000440B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000004410                 test    rsi, rsi
.text:0000000000004413                 jz      short loc_4429
.text:0000000000004415                 mov     edx, ebx
.text:0000000000004417                 shr     dl, 5
.text:000000000000441A                 movzx   edx, dl
.text:000000000000441D                 mov     edx, [rsi+rdx*4]
.text:0000000000004420                 bt      edx, ebx
.text:0000000000004423                 jb      loc_4573
.text:0000000000004429
.text:0000000000004429 loc_4429:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000004429                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000004429                 test    r10b, r10b
.text:000000000000442C                 jnz     loc_4573
.text:0000000000004432                 xor     eax, 1
.text:0000000000004435                 add     rbp, 1
.text:0000000000004439                 and     eax, r8d
.text:000000000000443C
.text:000000000000443C loc_443C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000443C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000443C                 test    al, al
.text:000000000000443E                 jz      short loc_4460
.text:0000000000004440                 cmp     r13, r15
.text:0000000000004443                 jbe     short loc_444A
.text:0000000000004445                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000444A
.text:000000000000444A loc_444A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000444A                 lea     rax, [r15+1]
.text:000000000000444E                 cmp     r13, rax
.text:0000000000004451                 jbe     short loc_4459
.text:0000000000004453                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000004459
.text:0000000000004459 loc_4459:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000004459                 add     r15, 2
.text:000000000000445D                 xor     r8d, r8d
.text:0000000000004460
.text:0000000000004460 loc_4460:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000004460                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000004460                 cmp     r15, r13
.text:0000000000004463                 jnb     short loc_4469
.text:0000000000004465                 mov     [r14+r15], bl
.text:0000000000004469
.text:0000000000004469 loc_4469:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000004469                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000446E                 add     r15, 1
.text:0000000000004472                 mov     eax, 0
.text:0000000000004477                 test    r12b, r12b
.text:000000000000447A                 cmovz   edi, eax
.text:000000000000447D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000004482                 jmp     loc_42B8
.text:0000000000004482 ; ---------------------------------------------------------------------------
.text:0000000000004487                 align 10h
.text:0000000000004490
.text:0000000000004490 loc_4490:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000004490                                         ; DATA XREF: .rodata:jpt_474A↓o
.text:0000000000004490                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000004493
.text:0000000000004493 loc_4493:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004493                                         ; DATA XREF: .rodata:jpt_43BE↓o
.text:0000000000004493                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000004497                 cmp     eax, 2
.text:000000000000449A                 jz      loc_4A58
.text:00000000000044A0                 cmp     eax, 5
.text:00000000000044A3                 jz      loc_4A18
.text:00000000000044A9                 cmp     eax, 2
.text:00000000000044AC                 mov     ebx, 3Fh ; '?'
.text:00000000000044B1                 setz    dl
.text:00000000000044B4                 xor     r12d, r12d
.text:00000000000044B7                 xor     eax, eax
.text:00000000000044B9                 jmp     loc_43F8
.text:00000000000044B9 ; ---------------------------------------------------------------------------
.text:00000000000044BE                 align 20h
.text:00000000000044C0
.text:00000000000044C0 loc_44C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000044C0                                         ; DATA XREF: .rodata:jpt_474A↓o
.text:00000000000044C0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000044C3
.text:00000000000044C3 loc_44C3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000044C3                                         ; DATA XREF: .rodata:jpt_43BE↓o
.text:00000000000044C3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000044C8                 jz      loc_49D0
.text:00000000000044CE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000044D3                 xor     edx, edx
.text:00000000000044D5                 xor     eax, eax
.text:00000000000044D7                 mov     ebx, 27h ; '''
.text:00000000000044DC                 jmp     loc_43F8
.text:00000000000044DC ; ---------------------------------------------------------------------------
.text:00000000000044E1                 align 8
.text:00000000000044E8
.text:00000000000044E8 loc_44E8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000044E8                                         ; DATA XREF: .rodata:jpt_43BE↓o
.text:00000000000044E8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000044ED                 mov     ebx, 74h ; 't'
.text:00000000000044F2
.text:00000000000044F2 loc_44F2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000044F2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000044F2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000044F7                 setz    al
.text:00000000000044FA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000044FE                 jnz     loc_464E
.text:0000000000004504
.text:0000000000004504 loc_4504:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000004504                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000004504                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004509                 jnz     short loc_4570
.text:000000000000450B
.text:000000000000450B loc_450B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000450B                 mov     ebx, edx
.text:000000000000450D                 xor     r12d, r12d
.text:0000000000004510                 xor     eax, eax
.text:0000000000004512
.text:0000000000004512 loc_4512:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000004512                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000004512                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004517                 jnz     loc_440B
.text:000000000000451D                 jmp     loc_4429
.text:000000000000451D ; ---------------------------------------------------------------------------
.text:0000000000004522                 align 8
.text:0000000000004528
.text:0000000000004528 loc_4528:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004528                                         ; DATA XREF: .rodata:jpt_43BE↓o
.text:0000000000004528                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000452D                 mov     ebx, 62h ; 'b'
.text:0000000000004532                 jmp     short loc_4504
.text:0000000000004532 ; ---------------------------------------------------------------------------
.text:0000000000004534                 align 8
.text:0000000000004538
.text:0000000000004538 loc_4538:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004538                                         ; DATA XREF: .rodata:jpt_43BE↓o
.text:0000000000004538                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000453D                 jz      loc_4910
.text:0000000000004543                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004548                 jz      loc_4760
.text:000000000000454E
.text:000000000000454E loc_454E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000454E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004553                 jz      loc_4760
.text:0000000000004559                 cmp     [rsp+0E8h+n], 0
.text:000000000000455F                 jnz     loc_491B
.text:0000000000004565                 mov     ebx, 5Ch ; '\'
.text:000000000000456A                 nop     word ptr [rax+rax+00h]
.text:0000000000004570
.text:0000000000004570 loc_4570:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000004570                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000004570                 xor     r12d, r12d
.text:0000000000004573
.text:0000000000004573 loc_4573:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000004573                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000004573                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004578                 setz    dl
.text:000000000000457B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004580                 mov     eax, edx
.text:0000000000004582                 jnz     loc_4DD8
.text:0000000000004588                 mov     eax, r8d
.text:000000000000458B                 xor     eax, 1
.text:000000000000458E                 and     al, dl
.text:0000000000004590                 jz      short loc_45C1
.text:0000000000004592                 cmp     r13, r15
.text:0000000000004595                 jbe     short loc_459C
.text:0000000000004597                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000459C
.text:000000000000459C loc_459C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000459C                 lea     rdx, [r15+1]
.text:00000000000045A0                 cmp     r13, rdx
.text:00000000000045A3                 jbe     short loc_45AB
.text:00000000000045A5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000045AB
.text:00000000000045AB loc_45AB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000045AB                 lea     rdx, [r15+2]
.text:00000000000045AF                 cmp     r13, rdx
.text:00000000000045B2                 jbe     short loc_45BA
.text:00000000000045B4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000045BA
.text:00000000000045BA loc_45BA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000045BA                 add     r15, 3
.text:00000000000045BE                 mov     r8d, eax
.text:00000000000045C1
.text:00000000000045C1 loc_45C1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000045C1                 cmp     r13, r15
.text:00000000000045C4                 jbe     short loc_45CB
.text:00000000000045C6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000045CB
.text:00000000000045CB loc_45CB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000045CB                 add     r15, 1
.text:00000000000045CF                 add     rbp, 1
.text:00000000000045D3                 jmp     loc_4460
.text:00000000000045D3 ; ---------------------------------------------------------------------------
.text:00000000000045D8                 align 20h
.text:00000000000045E0
.text:00000000000045E0 loc_45E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000045E0                                         ; DATA XREF: .rodata:jpt_43BE↓o
.text:00000000000045E0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000045E5                 jnz     loc_47B3
.text:00000000000045EB                 xor     edx, edx
.text:00000000000045ED                 test    byte ptr [rsp+0E8h+var_70], 1
.text:00000000000045F2                 jz      loc_450B
.text:00000000000045F8                 add     rbp, 1
.text:00000000000045FC                 jmp     loc_42B8
.text:00000000000045FC ; ---------------------------------------------------------------------------
.text:0000000000004601                 align 8
.text:0000000000004608
.text:0000000000004608 loc_4608:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004608                                         ; DATA XREF: .rodata:jpt_43BE↓o
.text:0000000000004608                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000460D                 setz    dl
.text:0000000000004610                 xor     eax, eax
.text:0000000000004612                 jmp     loc_43F8
.text:0000000000004612 ; ---------------------------------------------------------------------------
.text:0000000000004617                 align 20h
.text:0000000000004620
.text:0000000000004620 loc_4620:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004620                                         ; DATA XREF: .rodata:jpt_43BE↓o
.text:0000000000004620                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000004625                 mov     ebx, 61h ; 'a'
.text:000000000000462A                 jmp     loc_4504
.text:000000000000462A ; ---------------------------------------------------------------------------
.text:000000000000462F                 align 10h
.text:0000000000004630
.text:0000000000004630 loc_4630:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004630                                         ; DATA XREF: .rodata:jpt_43BE↓o
.text:0000000000004630                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000004635                 setz    dl
.text:0000000000004638
.text:0000000000004638 loc_4638:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000004638                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000004638                 test    rbp, rbp
.text:000000000000463B                 jnz     loc_43EC
.text:0000000000004641
.text:0000000000004641 loc_4641:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000004641                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000004641                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004646                 and     al, dl
.text:0000000000004648                 jz      loc_43F8
.text:000000000000464E
.text:000000000000464E loc_464E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000464E                 mov     rbp, r11
.text:0000000000004651                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004659                 jmp     loc_4D59
.text:0000000000004659 ; ---------------------------------------------------------------------------
.text:000000000000465E                 align 20h
.text:0000000000004660
.text:0000000000004660 loc_4660:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004660                                         ; DATA XREF: .rodata:jpt_43BE↓o
.text:0000000000004660                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004665                 setz    dl
.text:0000000000004668                 xor     r12d, r12d
.text:000000000000466B                 jmp     short loc_4641
.text:000000000000466B ; ---------------------------------------------------------------------------
.text:000000000000466D                 align 10h
.text:0000000000004670
.text:0000000000004670 loc_4670:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004670                                         ; DATA XREF: .rodata:jpt_43BE↓o
.text:0000000000004670                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000004675                 mov     ebx, 20h ; ' '
.text:000000000000467A                 setz    dl
.text:000000000000467D                 jmp     short loc_4641
.text:000000000000467D ; ---------------------------------------------------------------------------
.text:000000000000467F                 align 20h
.text:0000000000004680
.text:0000000000004680 loc_4680:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004680                                         ; DATA XREF: .rodata:jpt_43BE↓o
.text:0000000000004680                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000004685                 mov     ebx, 72h ; 'r'
.text:000000000000468A                 jmp     loc_44F2
.text:000000000000468A ; ---------------------------------------------------------------------------
.text:000000000000468F                 align 10h
.text:0000000000004690
.text:0000000000004690 loc_4690:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004690                                         ; DATA XREF: .rodata:jpt_43BE↓o
.text:0000000000004690                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000004695                 mov     ebx, 66h ; 'f'
.text:000000000000469A                 jmp     loc_4504
.text:000000000000469A ; ---------------------------------------------------------------------------
.text:000000000000469F                 align 20h
.text:00000000000046A0
.text:00000000000046A0 loc_46A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000046A0                                         ; DATA XREF: .rodata:jpt_43BE↓o
.text:00000000000046A0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000046A5                 mov     ebx, 76h ; 'v'
.text:00000000000046AA                 jmp     loc_4504
.text:00000000000046AA ; ---------------------------------------------------------------------------
.text:00000000000046AF                 align 10h
.text:00000000000046B0
.text:00000000000046B0 loc_46B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000046B0                                         ; DATA XREF: .rodata:jpt_43BE↓o
.text:00000000000046B0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000046B5                 mov     ebx, 6Eh ; 'n'
.text:00000000000046BA                 jmp     loc_44F2
.text:00000000000046BA ; ---------------------------------------------------------------------------
.text:00000000000046BF                 align 20h
.text:00000000000046C0
.text:00000000000046C0 def_474A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000046C0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000046C0                                         ; DATA XREF: ...
.text:00000000000046C0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000046C3                 nop     dword ptr [rax+rax+00h]
.text:00000000000046C8
.text:00000000000046C8 def_43BE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000046C8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000046C8                                         ; DATA XREF: ...
.text:00000000000046C8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000046CE                 jnz     loc_4A78
.text:00000000000046D4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000046D9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000046DE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000046E3                 call    ___ctype_b_loc
.text:00000000000046E8                 mov     rcx, [rax]
.text:00000000000046EB                 movzx   edx, bl
.text:00000000000046EE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000046F4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000046FA                 mov     r11, [rsp+0E8h+var_B0]
.text:00000000000046FF                 mov     edi, 1
.text:0000000000004704                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000004708                 and     ax, 4000h
.text:000000000000470C                 setnz   r12b
.text:0000000000004710                 setz    al
.text:0000000000004713                 and     al, [rsp+0E8h+var_DB]
.text:0000000000004717
.text:0000000000004717 loc_4717:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000004717                 test    al, al
.text:0000000000004719                 jnz     loc_50B1
.text:000000000000471F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004724                 setz    dl
.text:0000000000004727                 jmp     loc_43F8
.text:0000000000004727 ; ---------------------------------------------------------------------------
.text:000000000000472C                 align 10h
.text:0000000000004730
.text:0000000000004730 loc_4730:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000004730                 movzx   ebx, byte ptr [r9]
.text:0000000000004734                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000004737                 ja      short def_474A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004739                 lea     rcx, jpt_474A
.text:0000000000004740                 movzx   edx, bl
.text:0000000000004743                 movsxd  rax, ds:(jpt_474A - 8248h)[rcx+rdx*4]
.text:0000000000004747                 add     rax, rcx
.text:000000000000474A                 jmp     rax             ; switch jump
.text:000000000000474A ; ---------------------------------------------------------------------------
.text:000000000000474C                 align 10h
.text:0000000000004750
.text:0000000000004750 loc_4750:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004750                                         ; DATA XREF: .rodata:jpt_474A↓o
.text:0000000000004750                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000004753                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004758                 jnz     loc_454E
.text:000000000000475E                 xchg    ax, ax
.text:0000000000004760
.text:0000000000004760 loc_4760:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000004760                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000004760                 mov     edx, 5Ch ; '\'
.text:0000000000004765                 mov     ebx, 5Ch ; '\'
.text:000000000000476A                 jmp     loc_4504
.text:000000000000476A ; ---------------------------------------------------------------------------
.text:000000000000476F                 align 10h
.text:0000000000004770
.text:0000000000004770 loc_4770:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004770                                         ; DATA XREF: .rodata:jpt_474A↓o
.text:0000000000004770                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000004775                 xor     r10d, r10d
.text:0000000000004778                 mov     ebx, 66h ; 'f'
.text:000000000000477D                 jmp     loc_4504
.text:000000000000477D ; ---------------------------------------------------------------------------
.text:0000000000004782                 align 8
.text:0000000000004788
.text:0000000000004788 loc_4788:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004788                                         ; DATA XREF: .rodata:jpt_474A↓o
.text:0000000000004788                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000478D                 xor     r10d, r10d
.text:0000000000004790                 mov     ebx, 6Eh ; 'n'
.text:0000000000004795                 jmp     loc_44F2
.text:0000000000004795 ; ---------------------------------------------------------------------------
.text:000000000000479A                 align 20h
.text:00000000000047A0
.text:00000000000047A0 loc_47A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000047A0                                         ; DATA XREF: .rodata:jpt_474A↓o
.text:00000000000047A0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000047A5                 jmp     loc_4570
.text:00000000000047A5 ; ---------------------------------------------------------------------------
.text:00000000000047AA                 align 10h
.text:00000000000047B0
.text:00000000000047B0 loc_47B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000047B0                                         ; DATA XREF: .rodata:jpt_474A↓o
.text:00000000000047B0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000047B3
.text:00000000000047B3 loc_47B3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000047B3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000047B8                 setz    dl
.text:00000000000047BB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000047C0                 jnz     loc_535A
.text:00000000000047C6                 mov     eax, r8d
.text:00000000000047C9                 mov     rcx, r15
.text:00000000000047CC                 xor     eax, 1
.text:00000000000047CF                 and     al, dl
.text:00000000000047D1                 jz      short loc_4800
.text:00000000000047D3                 cmp     r13, r15
.text:00000000000047D6                 jbe     short loc_47DD
.text:00000000000047D8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000047DD
.text:00000000000047DD loc_47DD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000047DD                 lea     rcx, [r15+1]
.text:00000000000047E1                 cmp     r13, rcx
.text:00000000000047E4                 jbe     short loc_47EC
.text:00000000000047E6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000047EC
.text:00000000000047EC loc_47EC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000047EC                 lea     rcx, [r15+2]
.text:00000000000047F0                 cmp     r13, rcx
.text:00000000000047F3                 ja      loc_4E29
.text:00000000000047F9
.text:00000000000047F9 loc_47F9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000047F9                 lea     rcx, [r15+3]
.text:00000000000047FD                 mov     r8d, eax
.text:0000000000004800
.text:0000000000004800 loc_4800:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000004800                 cmp     r13, rcx
.text:0000000000004803                 jbe     short loc_480A
.text:0000000000004805                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000480A
.text:000000000000480A loc_480A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000480A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000480F                 lea     r15, [rcx+1]
.text:0000000000004813                 jz      loc_4E19
.text:0000000000004819                 lea     rax, [rbp+1]
.text:000000000000481D                 cmp     rax, r11
.text:0000000000004820                 jnb     short loc_483B
.text:0000000000004822                 mov     rax, [rsp+0E8h+s]
.text:0000000000004827                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000482C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000004830                 sub     eax, 30h ; '0'
.text:0000000000004833                 cmp     al, 9
.text:0000000000004835                 jbe     loc_5069
.text:000000000000483B
.text:000000000000483B loc_483B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000483B                 mov     eax, r12d
.text:000000000000483E                 mov     ebx, 30h ; '0'
.text:0000000000004843                 xor     r12d, r12d
.text:0000000000004846                 jmp     loc_43F8
.text:0000000000004846 ; ---------------------------------------------------------------------------
.text:000000000000484B                 align 10h
.text:0000000000004850
.text:0000000000004850 loc_4850:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004850                                         ; DATA XREF: .rodata:jpt_474A↓o
.text:0000000000004850                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000004855                 mov     r12d, r10d
.text:0000000000004858                 setz    dl
.text:000000000000485B                 xor     r10d, r10d
.text:000000000000485E                 xor     eax, eax
.text:0000000000004860                 jmp     loc_43F8
.text:0000000000004860 ; ---------------------------------------------------------------------------
.text:0000000000004865                 align 8
.text:0000000000004868
.text:0000000000004868 loc_4868:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004868                                         ; DATA XREF: .rodata:jpt_474A↓o
.text:0000000000004868                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000486D                 setz    dl
.text:0000000000004870                 xor     r10d, r10d
.text:0000000000004873                 jmp     loc_4638
.text:0000000000004873 ; ---------------------------------------------------------------------------
.text:0000000000004878                 align 20h
.text:0000000000004880
.text:0000000000004880 loc_4880:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004880                                         ; DATA XREF: .rodata:jpt_474A↓o
.text:0000000000004880                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004885                 setz    dl
.text:0000000000004888                 xor     r10d, r10d
.text:000000000000488B                 xor     r12d, r12d
.text:000000000000488E                 jmp     loc_4641
.text:000000000000488E ; ---------------------------------------------------------------------------
.text:0000000000004893                 align 8
.text:0000000000004898
.text:0000000000004898 loc_4898:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004898                                         ; DATA XREF: .rodata:jpt_474A↓o
.text:0000000000004898                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000489D                 mov     r12d, r10d
.text:00000000000048A0                 mov     ebx, 20h ; ' '
.text:00000000000048A5                 setz    dl
.text:00000000000048A8                 xor     r10d, r10d
.text:00000000000048AB                 jmp     loc_4641
.text:00000000000048B0 ; ---------------------------------------------------------------------------
.text:00000000000048B0
.text:00000000000048B0 loc_48B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000048B0                                         ; DATA XREF: .rodata:jpt_474A↓o
.text:00000000000048B0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000048B5                 xor     r10d, r10d
.text:00000000000048B8                 mov     ebx, 72h ; 'r'
.text:00000000000048BD                 jmp     loc_44F2
.text:00000000000048BD ; ---------------------------------------------------------------------------
.text:00000000000048C2                 align 8
.text:00000000000048C8
.text:00000000000048C8 loc_48C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000048C8                                         ; DATA XREF: .rodata:jpt_474A↓o
.text:00000000000048C8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000048CD                 jmp     loc_4570
.text:00000000000048CD ; ---------------------------------------------------------------------------
.text:00000000000048D2                 align 8
.text:00000000000048D8
.text:00000000000048D8 loc_48D8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000048D8                                         ; DATA XREF: .rodata:jpt_474A↓o
.text:00000000000048D8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000048DD                 xor     r10d, r10d
.text:00000000000048E0                 mov     ebx, 74h ; 't'
.text:00000000000048E5                 jmp     loc_44F2
.text:00000000000048E5 ; ---------------------------------------------------------------------------
.text:00000000000048EA                 align 10h
.text:00000000000048F0
.text:00000000000048F0 loc_48F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000048F0                                         ; DATA XREF: .rodata:jpt_474A↓o
.text:00000000000048F0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000048F5                 jmp     loc_4570
.text:00000000000048F5 ; ---------------------------------------------------------------------------
.text:00000000000048FA                 align 20h
.text:0000000000004900
.text:0000000000004900 loc_4900:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000004900                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000004900                 xor     r10d, r10d
.text:0000000000004903                 jmp     loc_43A0
.text:0000000000004903 ; ---------------------------------------------------------------------------
.text:0000000000004908                 align 10h
.text:0000000000004910
.text:0000000000004910 loc_4910:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000004910                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004915                 jnz     loc_5280
.text:000000000000491B
.text:000000000000491B loc_491B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000491B                 add     rbp, 1
.text:000000000000491F                 mov     eax, r8d
.text:0000000000004922                 xor     r12d, r12d
.text:0000000000004925                 mov     ebx, 5Ch ; '\'
.text:000000000000492A                 jmp     loc_443C
.text:000000000000492A ; ---------------------------------------------------------------------------
.text:000000000000492F                 align 10h
.text:0000000000004930
.text:0000000000004930 loc_4930:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000004930                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004935                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000493A                 mov     r12d, r8d
.text:000000000000493D                 mov     rbp, r11
.text:0000000000004940                 setz    dl
.text:0000000000004943                 mov     eax, ebx
.text:0000000000004945                 test    r15, r15
.text:0000000000004948                 setz    cl
.text:000000000000494B                 and     eax, edx
.text:000000000000494D                 and     al, cl
.text:000000000000494F                 jnz     loc_53B6
.text:0000000000004955                 mov     eax, ebx
.text:0000000000004957                 xor     eax, 1
.text:000000000000495A                 and     dl, al
.text:000000000000495C                 jz      loc_52CC
.text:0000000000004962                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000004967                 jz      loc_52CA
.text:000000000000496D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000004972                 jnz     loc_536D
.text:0000000000004978                 test    r13, r13
.text:000000000000497B                 setz    al
.text:000000000000497E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000004984                 setnz   dl
.text:0000000000004987                 and     al, dl
.text:0000000000004989                 jz      loc_53AC
.text:000000000000498F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004994
.text:0000000000004994 loc_4994:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000004994                 lea     rbx, asc_7FBD   ; "'"
.text:000000000000499B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000499F                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000049A7                 mov     r15d, 1
.text:00000000000049AD                 mov     [rsp+0E8h+n], 1
.text:00000000000049B6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000049BB                 mov     [rsp+0E8h+s2], rbx
.text:00000000000049C0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000049C4                 jmp     loc_42A3
.text:00000000000049C4 ; ---------------------------------------------------------------------------
.text:00000000000049C9                 align 10h
.text:00000000000049D0
.text:00000000000049D0 loc_49D0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:00000000000049D0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000049D5                 jnz     loc_5280
.text:00000000000049DB                 test    r13, r13
.text:00000000000049DE                 jz      loc_4DE0
.text:00000000000049E4                 xor     edx, edx
.text:00000000000049E6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000049EC                 jnz     loc_4DE0
.text:00000000000049F2
.text:00000000000049F2 loc_49F2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000049F2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000049F2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000049F7                 add     r15, 3
.text:00000000000049FB                 xor     eax, eax
.text:00000000000049FD                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000004A02                 xor     r8d, r8d
.text:0000000000004A05                 mov     r13, rdx
.text:0000000000004A08                 mov     ebx, 27h ; '''
.text:0000000000004A0D                 jmp     loc_4429
.text:0000000000004A0D ; ---------------------------------------------------------------------------
.text:0000000000004A12                 align 8
.text:0000000000004A18
.text:0000000000004A18 loc_4A18:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000004A18                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000004A1D                 jz      short loc_4A40
.text:0000000000004A1F                 lea     rcx, [rbp+2]
.text:0000000000004A23                 cmp     rcx, r11
.text:0000000000004A26                 jnb     short loc_4A40
.text:0000000000004A28                 mov     rax, [rsp+0E8h+s]
.text:0000000000004A2D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000004A32                 jz      loc_51C2
.text:0000000000004A38                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004A40
.text:0000000000004A40 loc_4A40:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000004A40                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000004A40                 xor     edx, edx
.text:0000000000004A42                 xor     r12d, r12d
.text:0000000000004A45                 xor     eax, eax
.text:0000000000004A47                 mov     ebx, 3Fh ; '?'
.text:0000000000004A4C                 jmp     loc_43F8
.text:0000000000004A4C ; ---------------------------------------------------------------------------
.text:0000000000004A51                 align 8
.text:0000000000004A58
.text:0000000000004A58 loc_4A58:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000004A58                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004A5D                 jnz     loc_5280
.text:0000000000004A63                 xor     r12d, r12d
.text:0000000000004A66                 xor     eax, eax
.text:0000000000004A68                 mov     ebx, 3Fh ; '?'
.text:0000000000004A6D                 jmp     loc_4429
.text:0000000000004A6D ; ---------------------------------------------------------------------------
.text:0000000000004A72                 align 8
.text:0000000000004A78
.text:0000000000004A78 loc_4A78:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000004A78                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000004A80                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A84                 mov     [rsp+0E8h+var_48], 0
.text:0000000000004A90                 mov     [rsp+0E8h+ps], rax
.text:0000000000004A95                 jnz     short loc_4AC4
.text:0000000000004A97                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000004A9C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000004AA1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000004AA6                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000004AAB                 call    _strlen
.text:0000000000004AB0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000004AB6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000004ABC                 mov     r11, rax
.text:0000000000004ABF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000004AC4
.text:0000000000004AC4 loc_4AC4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000004AC4                 lea     rax, [rsp+0E8h+wc]
.text:0000000000004ACC                 xor     ecx, ecx
.text:0000000000004ACE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000004AD2                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000004AD7                 mov     rbx, rcx
.text:0000000000004ADA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000004AE2                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000004AE7                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000004AEC                 mov     [rsp+0E8h+var_68], r15
.text:0000000000004AF4                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000004AF9                 mov     [rsp+0E8h+var_78], r13
.text:0000000000004AFE                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000004B03
.text:0000000000004B03 loc_4B03:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000004B03                 mov     rax, [rsp+0E8h+s]
.text:0000000000004B08                 lea     r14, [rbp+rbx+0]
.text:0000000000004B0D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000004B12                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000004B17                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000004B1C                 lea     r13, [rax+r14]
.text:0000000000004B20                 sub     rdx, r14
.text:0000000000004B23                 mov     rsi, r13
.text:0000000000004B26                 call    rpl_mbrtowc
.text:0000000000004B2B                 test    rax, rax
.text:0000000000004B2E                 mov     r15, rax
.text:0000000000004B31                 jz      short loc_4B81
.text:0000000000004B33                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B37                 jz      loc_5155
.text:0000000000004B3D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000004B41                 jz      loc_50E1
.text:0000000000004B47                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004B4C                 setz    al
.text:0000000000004B4F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000004B53                 jnz     loc_4CF0
.text:0000000000004B59
.text:0000000000004B59 loc_4B59:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000004B59                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000004B59                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000004B60                 call    _iswprint
.text:0000000000004B65                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000004B6A                 test    eax, eax
.text:0000000000004B6C                 mov     eax, 0
.text:0000000000004B71                 cmovz   r12d, eax
.text:0000000000004B75                 add     rbx, r15
.text:0000000000004B78                 call    _mbsinit
.text:0000000000004B7D                 test    eax, eax
.text:0000000000004B7F                 jz      short loc_4B03
.text:0000000000004B81
.text:0000000000004B81 loc_4B81:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000004B81                 mov     edx, r12d
.text:0000000000004B84                 mov     rdi, rbx
.text:0000000000004B87                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004B8D                 xor     edx, 1
.text:0000000000004B90                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004B95                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004B9B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000004B9F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004BA7                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004BAC                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004BB1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004BB6
.text:0000000000004BB6 loc_4BB6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000004BB6                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000004BB6                 cmp     rdi, 1
.text:0000000000004BBA                 jbe     loc_51BB
.text:0000000000004BC0
.text:0000000000004BC0 loc_4BC0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000004BC0                 mov     rcx, rdi
.text:0000000000004BC3                 xor     esi, esi
.text:0000000000004BC5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000004BCB                 add     rcx, rbp
.text:0000000000004BCE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000004BD3                 jmp     loc_4C8E
.text:0000000000004BD3 ; ---------------------------------------------------------------------------
.text:0000000000004BD8                 align 20h
.text:0000000000004BE0
.text:0000000000004BE0 loc_4BE0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000004BE0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004BE5                 setz    al
.text:0000000000004BE8                 test    r9b, r9b
.text:0000000000004BEB                 jnz     loc_50A0
.text:0000000000004BF1                 mov     esi, r8d
.text:0000000000004BF4                 xor     esi, 1
.text:0000000000004BF7                 and     al, sil
.text:0000000000004BFA                 jz      short loc_4C2B
.text:0000000000004BFC                 cmp     r13, r15
.text:0000000000004BFF                 jbe     short loc_4C06
.text:0000000000004C01                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004C06
.text:0000000000004C06 loc_4C06:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000004C06                 lea     rsi, [r15+1]
.text:0000000000004C0A                 cmp     r13, rsi
.text:0000000000004C0D                 jbe     short loc_4C15
.text:0000000000004C0F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000004C15
.text:0000000000004C15 loc_4C15:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000004C15                 lea     rsi, [r15+2]
.text:0000000000004C19                 cmp     r13, rsi
.text:0000000000004C1C                 jbe     short loc_4C24
.text:0000000000004C1E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004C24
.text:0000000000004C24 loc_4C24:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000004C24                 add     r15, 3
.text:0000000000004C28                 mov     r8d, eax
.text:0000000000004C2B
.text:0000000000004C2B loc_4C2B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000004C2B                 cmp     r13, r15
.text:0000000000004C2E                 jbe     short loc_4C35
.text:0000000000004C30                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004C35
.text:0000000000004C35 loc_4C35:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000004C35                 lea     rax, [r15+1]
.text:0000000000004C39                 cmp     r13, rax
.text:0000000000004C3C                 jbe     short loc_4C4B
.text:0000000000004C3E                 mov     eax, ebx
.text:0000000000004C40                 shr     al, 6
.text:0000000000004C43                 add     eax, 30h ; '0'
.text:0000000000004C46                 mov     [r14+r15+1], al
.text:0000000000004C4B
.text:0000000000004C4B loc_4C4B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000004C4B                 lea     rax, [r15+2]
.text:0000000000004C4F                 cmp     r13, rax
.text:0000000000004C52                 jbe     short loc_4C64
.text:0000000000004C54                 mov     eax, ebx
.text:0000000000004C56                 shr     al, 3
.text:0000000000004C59                 and     eax, 7
.text:0000000000004C5C                 add     eax, 30h ; '0'
.text:0000000000004C5F                 mov     [r14+r15+2], al
.text:0000000000004C64
.text:0000000000004C64 loc_4C64:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000004C64                 and     ebx, 7
.text:0000000000004C67                 add     rbp, 1
.text:0000000000004C6B                 add     r15, 3
.text:0000000000004C6F                 add     ebx, 30h ; '0'
.text:0000000000004C72                 cmp     rbp, rcx
.text:0000000000004C75                 jnb     loc_4460
.text:0000000000004C7B                 mov     esi, edx
.text:0000000000004C7D
.text:0000000000004C7D loc_4C7D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000004C7D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000004C7D                 cmp     r13, r15
.text:0000000000004C80                 jbe     short loc_4C86
.text:0000000000004C82                 mov     [r14+r15], bl
.text:0000000000004C86
.text:0000000000004C86 loc_4C86:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000004C86                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000004C8A                 add     r15, 1
.text:0000000000004C8E
.text:0000000000004C8E loc_4C8E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000004C8E                 test    dl, dl
.text:0000000000004C90                 jnz     loc_4BE0
.text:0000000000004C96                 mov     eax, esi
.text:0000000000004C98                 xor     eax, 1
.text:0000000000004C9B                 and     eax, r8d
.text:0000000000004C9E                 test    r10b, r10b
.text:0000000000004CA1                 jz      short loc_4CB1
.text:0000000000004CA3                 cmp     r13, r15
.text:0000000000004CA6                 jbe     short loc_4CAD
.text:0000000000004CA8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004CAD
.text:0000000000004CAD loc_4CAD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000004CAD                 add     r15, 1
.text:0000000000004CB1
.text:0000000000004CB1 loc_4CB1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000004CB1                 add     rbp, 1
.text:0000000000004CB5                 cmp     rbp, rcx
.text:0000000000004CB8                 jnb     loc_443C
.text:0000000000004CBE                 test    al, al
.text:0000000000004CC0                 jz      loc_50BE
.text:0000000000004CC6                 cmp     r13, r15
.text:0000000000004CC9                 jbe     short loc_4CD0
.text:0000000000004CCB                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004CD0
.text:0000000000004CD0 loc_4CD0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000004CD0                 lea     rax, [r15+1]
.text:0000000000004CD4                 cmp     r13, rax
.text:0000000000004CD7                 jbe     short loc_4CDF
.text:0000000000004CD9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000004CDF
.text:0000000000004CDF loc_4CDF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000004CDF                 add     r15, 2
.text:0000000000004CE3                 xor     r10d, r10d
.text:0000000000004CE6                 xor     r8d, r8d
.text:0000000000004CE9                 jmp     short loc_4C7D
.text:0000000000004CE9 ; ---------------------------------------------------------------------------
.text:0000000000004CEB                 align 10h
.text:0000000000004CF0
.text:0000000000004CF0 loc_4CF0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000004CF0                 cmp     r15, 1
.text:0000000000004CF4                 jz      loc_4B59
.text:0000000000004CFA                 mov     rdi, [rsp+0E8h+s]
.text:0000000000004CFF                 lea     rcx, [rdi+r15]
.text:0000000000004D03                 lea     rdx, [rdi+r14+1]
.text:0000000000004D08                 lea     r8, [rcx+r14]
.text:0000000000004D0C                 jmp     short loc_4D1D
.text:0000000000004D0C ; ---------------------------------------------------------------------------
.text:0000000000004D0E                 align 10h
.text:0000000000004D10
.text:0000000000004D10 loc_4D10:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000004D10                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000004D10                 add     rdx, 1
.text:0000000000004D14                 cmp     r8, rdx
.text:0000000000004D17                 jz      loc_4B59
.text:0000000000004D1D
.text:0000000000004D1D loc_4D1D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000004D1D                 movzx   ecx, byte ptr [rdx]
.text:0000000000004D20                 sub     ecx, 5Bh ; '['
.text:0000000000004D23                 cmp     cl, 21h ; '!'
.text:0000000000004D26                 ja      short loc_4D10
.text:0000000000004D28                 mov     esi, 1
.text:0000000000004D2D                 shl     rsi, cl
.text:0000000000004D30                 mov     rcx, rsi
.text:0000000000004D33                 mov     rsi, 20000002Bh
.text:0000000000004D3D                 test    rcx, rsi
.text:0000000000004D40                 jz      short loc_4D10
.text:0000000000004D42                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004D47                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004D4C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000004D51                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004D59
.text:0000000000004D59 loc_4D59:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000004D59                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000004D59                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004D5E                 jz      short loc_4D70
.text:0000000000004D60                 test    al, al
.text:0000000000004D62                 mov     eax, 4
.text:0000000000004D67                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000004D6C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000004D70
.text:0000000000004D70 loc_4D70:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000004D70                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000004D70                 sub     rsp, 8
.text:0000000000004D74                 mov     rcx, rbp
.text:0000000000004D77                 mov     rsi, r13
.text:0000000000004D7A                 push    [rsp+0F0h+var_88]
.text:0000000000004D7E                 push    [rsp+0F8h+var_80]
.text:0000000000004D82                 mov     rdi, r14
.text:0000000000004D85                 push    0
.text:0000000000004D87                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004D8F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000004D94                 mov     rdx, [rsp+108h+s]
.text:0000000000004D99                 and     r9d, 0FFFFFFFDh
.text:0000000000004D9D                 call    quotearg_buffer_restyled
.text:0000000000004DA2                 add     rsp, 20h
.text:0000000000004DA6                 mov     r15, rax
.text:0000000000004DA9
.text:0000000000004DA9 loc_4DA9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000004DA9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000004DA9                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000004DB1                 xor     rbx, fs:28h
.text:0000000000004DBA                 mov     rax, r15
.text:0000000000004DBD                 jnz     loc_53C3
.text:0000000000004DC3                 add     rsp, 0B8h
.text:0000000000004DCA                 pop     rbx
.text:0000000000004DCB                 pop     rbp
.text:0000000000004DCC                 pop     r12
.text:0000000000004DCE                 pop     r13
.text:0000000000004DD0                 pop     r14
.text:0000000000004DD2                 pop     r15
.text:0000000000004DD4                 retn
.text:0000000000004DD4 ; ---------------------------------------------------------------------------
.text:0000000000004DD5                 align 8
.text:0000000000004DD8
.text:0000000000004DD8 loc_4DD8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000004DD8                 mov     rbp, r11
.text:0000000000004DDB                 jmp     loc_4D59
.text:0000000000004DE0 ; ---------------------------------------------------------------------------
.text:0000000000004DE0
.text:0000000000004DE0 loc_4DE0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000004DE0                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000004DE0                 cmp     r13, r15
.text:0000000000004DE3                 jbe     short loc_4DEA
.text:0000000000004DE5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004DEA
.text:0000000000004DEA loc_4DEA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000004DEA                 lea     rax, [r15+1]
.text:0000000000004DEE                 cmp     r13, rax
.text:0000000000004DF1                 jbe     short loc_4DF9
.text:0000000000004DF3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000004DF9
.text:0000000000004DF9 loc_4DF9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000004DF9                 lea     rax, [r15+2]
.text:0000000000004DFD                 cmp     r13, rax
.text:0000000000004E00                 jbe     loc_53F2
.text:0000000000004E06                 mov     rdx, r13
.text:0000000000004E09                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004E0F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004E14                 jmp     loc_49F2
.text:0000000000004E19 ; ---------------------------------------------------------------------------
.text:0000000000004E19
.text:0000000000004E19 loc_4E19:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000004E19                 mov     eax, r12d
.text:0000000000004E1C                 mov     ebx, 30h ; '0'
.text:0000000000004E21                 xor     r12d, r12d
.text:0000000000004E24                 jmp     loc_4429
.text:0000000000004E29 ; ---------------------------------------------------------------------------
.text:0000000000004E29
.text:0000000000004E29 loc_4E29:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000004E29                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004E2F                 jmp     loc_47F9
.text:0000000000004E34 ; ---------------------------------------------------------------------------
.text:0000000000004E34
.text:0000000000004E34 loc_4E34:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004E34                                         ; DATA XREF: .rodata:jpt_4261↓o
.text:0000000000004E34                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000004E36                 jnz     loc_4263        ; jumptable 00000000000121F1 case 1
.text:0000000000004E3C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004E41
.text:0000000000004E41 loc_4E41:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000004E41                 test    r13, r13
.text:0000000000004E44                 jnz     loc_53DA
.text:0000000000004E4A                 lea     rax, asc_7FBD   ; "'"
.text:0000000000004E51                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004E5A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004E5F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004E64                 xor     r12d, r12d
.text:0000000000004E67                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004E6C                 mov     [rsp+0E8h+n], 1
.text:0000000000004E75                 mov     [rsp+0E8h+s2], rax
.text:0000000000004E7A                 mov     r15d, 1
.text:0000000000004E80                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004E88                 jmp     loc_42A3
.text:0000000000004E88 ; ---------------------------------------------------------------------------
.text:0000000000004E8D                 align 10h
.text:0000000000004E90
.text:0000000000004E90 loc_4E90:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004E90                                         ; DATA XREF: .rodata:jpt_4261↓o
.text:0000000000004E90                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000004E92                 jnz     loc_528D
.text:0000000000004E98                 test    r13, r13
.text:0000000000004E9B                 jz      loc_50C6
.text:0000000000004EA1                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000004EA5                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004EAA                 xor     r12d, r12d
.text:0000000000004EAD                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004EB2                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004EBB
.text:0000000000004EBB loc_4EBB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000004EBB                 lea     rax, unk_7FBB
.text:0000000000004EC2                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004EC7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004ECC                 mov     [rsp+0E8h+n], 1
.text:0000000000004ED5                 mov     r15d, 1
.text:0000000000004EDB                 mov     [rsp+0E8h+s2], rax
.text:0000000000004EE0                 jmp     loc_42A3
.text:0000000000004EE5 ; ---------------------------------------------------------------------------
.text:0000000000004EE5
.text:0000000000004EE5 loc_4EE5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004EE5                                         ; DATA XREF: .rodata:jpt_4261↓o
.text:0000000000004EE5                 lea     rax, unk_7FBB   ; jumptable 00000000000121F1 case 6
.text:0000000000004EEC                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004EF1                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004EF6                 xor     r12d, r12d
.text:0000000000004EF9                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004F02                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004F07                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004F0C                 mov     [rsp+0E8h+n], 1
.text:0000000000004F15                 xor     r15d, r15d
.text:0000000000004F18                 mov     [rsp+0E8h+s2], rax
.text:0000000000004F1D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000004F25                 jmp     loc_42A3
.text:0000000000004F2A ; ---------------------------------------------------------------------------
.text:0000000000004F2A
.text:0000000000004F2A loc_4F2A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004F2A                                         ; DATA XREF: .rodata:jpt_4261↓o
.text:0000000000004F2A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000004F2F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004F34                 xor     r12d, r12d
.text:0000000000004F37                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004F40                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004F45                 xor     r15d, r15d
.text:0000000000004F48                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004F4D                 mov     [rsp+0E8h+n], 0
.text:0000000000004F56                 mov     [rsp+0E8h+s2], 0
.text:0000000000004F5F                 jmp     loc_42A3
.text:0000000000004F64 ; ---------------------------------------------------------------------------
.text:0000000000004F64
.text:0000000000004F64 loc_4F64:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004F64                                         ; DATA XREF: .rodata:jpt_4261↓o
.text:0000000000004F64                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000004F69                 jz      short loc_4FC1
.text:0000000000004F6B                 lea     rsi, asc_7FBF   ; "`"
.text:0000000000004F72                 xor     edi, edi        ; domainname
.text:0000000000004F74                 mov     edx, 5          ; category
.text:0000000000004F79                 call    _dcgettext
.text:0000000000004F7E                 mov     rcx, rax
.text:0000000000004F81                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004F86                 lea     rax, asc_7FBF   ; "`"
.text:0000000000004F8D                 cmp     rcx, rax
.text:0000000000004F90                 jz      loc_532E
.text:0000000000004F96
.text:0000000000004F96 loc_4F96:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000004F96                 lea     rsi, asc_7FBD   ; "'"
.text:0000000000004F9D                 xor     edi, edi        ; domainname
.text:0000000000004F9F                 mov     edx, 5          ; category
.text:0000000000004FA4                 call    _dcgettext
.text:0000000000004FA9                 mov     rcx, rax
.text:0000000000004FAC                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004FB1                 lea     rax, asc_7FBD   ; "'"
.text:0000000000004FB8                 cmp     rcx, rax
.text:0000000000004FBB                 jz      loc_5344
.text:0000000000004FC1
.text:0000000000004FC1 loc_4FC1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000004FC1                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000004FC1                 xor     r15d, r15d
.text:0000000000004FC4                 test    ebx, ebx
.text:0000000000004FC6                 jz      loc_518D
.text:0000000000004FCC
.text:0000000000004FCC loc_4FCC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000004FCC                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000004FCC                 test    ebx, ebx
.text:0000000000004FCE                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000004FD3                 setnz   [rsp+0E8h+var_D9]
.text:0000000000004FD8                 xor     r12d, r12d
.text:0000000000004FDB                 mov     rdi, rbx        ; s
.text:0000000000004FDE                 call    _strlen
.text:0000000000004FE3                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004FE8                 mov     [rsp+0E8h+n], rax
.text:0000000000004FED                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004FF2                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004FF7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005000                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000005005                 jmp     loc_42A3
.text:000000000000500A ; ---------------------------------------------------------------------------
.text:000000000000500A
.text:000000000000500A loc_500A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000500A                                         ; DATA XREF: .rodata:jpt_4261↓o
.text:000000000000500A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000500F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005014                 xor     r12d, r12d
.text:0000000000005017                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005020                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000005025                 xor     r15d, r15d
.text:0000000000005028                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000502D                 mov     [rsp+0E8h+n], 0
.text:0000000000005036                 mov     [rsp+0E8h+s2], 0
.text:000000000000503F                 jmp     loc_42A3
.text:0000000000005044 ; ---------------------------------------------------------------------------
.text:0000000000005044
.text:0000000000005044 loc_5044:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005044                                         ; DATA XREF: .rodata:jpt_4261↓o
.text:0000000000005044                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000005049                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000504E                 xor     r12d, r12d
.text:0000000000005051                 mov     [rsp+0E8h+var_98], 0
.text:000000000000505A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000505F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000005064                 jmp     loc_4283
.text:0000000000005069 ; ---------------------------------------------------------------------------
.text:0000000000005069
.text:0000000000005069 loc_5069:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000005069                 cmp     r13, r15
.text:000000000000506C                 jbe     short loc_5073
.text:000000000000506E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000005073
.text:0000000000005073 loc_5073:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000005073                 lea     rax, [rcx+2]
.text:0000000000005077                 cmp     r13, rax
.text:000000000000507A                 jbe     short loc_5082
.text:000000000000507C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000005082
.text:0000000000005082 loc_5082:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000005082                 mov     eax, r12d
.text:0000000000005085                 lea     r15, [rcx+3]
.text:0000000000005089                 xor     r12d, r12d
.text:000000000000508C                 mov     ebx, 30h ; '0'
.text:0000000000005091                 jmp     loc_43F8
.text:0000000000005091 ; ---------------------------------------------------------------------------
.text:0000000000005096                 align 20h
.text:00000000000050A0
.text:00000000000050A0 loc_50A0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:00000000000050A0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000050A5                 mov     rbp, r11
.text:00000000000050A8                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000050AC                 jmp     loc_4D59
.text:00000000000050B1 ; ---------------------------------------------------------------------------
.text:00000000000050B1
.text:00000000000050B1 loc_50B1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000050B1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000050B6                 xor     r12d, r12d
.text:00000000000050B9                 jmp     loc_4BC0
.text:00000000000050BE ; ---------------------------------------------------------------------------
.text:00000000000050BE
.text:00000000000050BE loc_50BE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000050BE                 xor     r10d, r10d
.text:00000000000050C1                 jmp     loc_4C7D
.text:00000000000050C6 ; ---------------------------------------------------------------------------
.text:00000000000050C6
.text:00000000000050C6 loc_50C6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000050C6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000050CF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000050D4                 xor     r12d, r12d
.text:00000000000050D7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000050DC                 jmp     loc_4EBB
.text:00000000000050E1 ; ---------------------------------------------------------------------------
.text:00000000000050E1
.text:00000000000050E1 loc_50E1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000050E1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000050E6                 mov     rsi, r14
.text:00000000000050E9                 mov     rcx, r13
.text:00000000000050EC                 mov     rax, rbx
.text:00000000000050EF                 mov     rdi, rbx
.text:00000000000050F2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000050F8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000050FD                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000005105                 cmp     rsi, r11
.text:0000000000005108                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000510E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000005116                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000511B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000005120                 jnb     short loc_5148
.text:0000000000005122                 cmp     byte ptr [rcx], 0
.text:0000000000005125                 jnz     short loc_5137
.text:0000000000005127                 jmp     short loc_5148
.text:0000000000005127 ; ---------------------------------------------------------------------------
.text:0000000000005129                 align 10h
.text:0000000000005130
.text:0000000000005130 loc_5130:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000005130                 cmp     byte ptr [r9+rax], 0
.text:0000000000005135                 jz      short loc_5145
.text:0000000000005137
.text:0000000000005137 loc_5137:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000005137                 add     rax, 1
.text:000000000000513B                 lea     rdx, [rbp+rax+0]
.text:0000000000005140                 cmp     r11, rdx
.text:0000000000005143                 ja      short loc_5130
.text:0000000000005145
.text:0000000000005145 loc_5145:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000005145                 mov     rdi, rax
.text:0000000000005148
.text:0000000000005148 loc_5148:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000005148                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000005148                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000514D                 xor     r12d, r12d
.text:0000000000005150                 jmp     loc_4BB6
.text:0000000000005155 ; ---------------------------------------------------------------------------
.text:0000000000005155
.text:0000000000005155 loc_5155:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000005155                 mov     rdi, rbx
.text:0000000000005158                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000515E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000005163                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000005169                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000005171                 xor     r12d, r12d
.text:0000000000005174                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000005179                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000517E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000005183                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000005188                 jmp     loc_4BB6
.text:000000000000518D ; ---------------------------------------------------------------------------
.text:000000000000518D
.text:000000000000518D loc_518D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000518D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000005192                 movzx   eax, byte ptr [rdx]
.text:0000000000005195                 test    al, al
.text:0000000000005197                 jz      loc_4FCC
.text:000000000000519D                 nop     dword ptr [rax]
.text:00000000000051A0
.text:00000000000051A0 loc_51A0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000051A0                 cmp     r13, r15
.text:00000000000051A3                 jbe     short loc_51A9
.text:00000000000051A5                 mov     [r14+r15], al
.text:00000000000051A9
.text:00000000000051A9 loc_51A9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000051A9                 add     r15, 1
.text:00000000000051AD                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000051B2                 test    al, al
.text:00000000000051B4                 jnz     short loc_51A0
.text:00000000000051B6                 jmp     loc_4FCC
.text:00000000000051BB ; ---------------------------------------------------------------------------
.text:00000000000051BB
.text:00000000000051BB loc_51BB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000051BB                 mov     eax, edx
.text:00000000000051BD                 jmp     loc_4717
.text:00000000000051C2 ; ---------------------------------------------------------------------------
.text:00000000000051C2
.text:00000000000051C2 loc_51C2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000051C2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000051C6                 cmp     bl, 3Eh ; '>'
.text:00000000000051C9                 ja      loc_4A40
.text:00000000000051CF                 mov     rax, 7000A38200000000h
.text:00000000000051D9                 bt      rax, rbx
.text:00000000000051DD                 jnb     loc_4A40
.text:00000000000051E3                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000051E8                 jnz     loc_53D2
.text:00000000000051EE                 cmp     r13, r15
.text:00000000000051F1                 jbe     short loc_51F8
.text:00000000000051F3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:00000000000051F8
.text:00000000000051F8 loc_51F8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:00000000000051F8                 lea     rax, [r15+1]
.text:00000000000051FC                 cmp     r13, rax
.text:00000000000051FF                 jbe     short loc_5207
.text:0000000000005201                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000005207
.text:0000000000005207 loc_5207:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000005207                 lea     rax, [r15+2]
.text:000000000000520B                 cmp     r13, rax
.text:000000000000520E                 jbe     short loc_5216
.text:0000000000005210                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000005216
.text:0000000000005216 loc_5216:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000005216                 lea     rax, [r15+3]
.text:000000000000521A                 cmp     r13, rax
.text:000000000000521D                 jbe     short loc_5225
.text:000000000000521F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000005225
.text:0000000000005225 loc_5225:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000005225                 add     r15, 4
.text:0000000000005229                 xor     edx, edx
.text:000000000000522B                 xor     r12d, r12d
.text:000000000000522E                 xor     eax, eax
.text:0000000000005230                 mov     rbp, rcx
.text:0000000000005233                 jmp     loc_43F8
.text:0000000000005238 ; ---------------------------------------------------------------------------
.text:0000000000005238
.text:0000000000005238 loc_5238:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005238                                         ; DATA XREF: .rodata:jpt_4261↓o
.text:0000000000005238                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000523A                 jz      loc_53C8
.text:0000000000005240                 lea     rax, asc_7FBD   ; "'"
.text:0000000000005247                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000524C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005251                 xor     r12d, r12d
.text:0000000000005254                 mov     [rsp+0E8h+var_98], 0
.text:000000000000525D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000005262                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000005267                 mov     [rsp+0E8h+n], 1
.text:0000000000005270                 xor     r15d, r15d
.text:0000000000005273                 mov     [rsp+0E8h+s2], rax
.text:0000000000005278                 jmp     loc_42A3
.text:0000000000005278 ; ---------------------------------------------------------------------------
.text:000000000000527D                 align 20h
.text:0000000000005280
.text:0000000000005280 loc_5280:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000005280                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000005280                 mov     rbp, r11
.text:0000000000005283                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000005288                 jmp     loc_4D59
.text:000000000000528D ; ---------------------------------------------------------------------------
.text:000000000000528D
.text:000000000000528D loc_528D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000528D                 lea     rax, unk_7FBB
.text:0000000000005294                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000005299                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000529E                 xor     r12d, r12d
.text:00000000000052A1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000052AA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000052AF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000052B4                 mov     [rsp+0E8h+n], 1
.text:00000000000052BD                 xor     r15d, r15d
.text:00000000000052C0                 mov     [rsp+0E8h+s2], rax
.text:00000000000052C5                 jmp     loc_42A3
.text:00000000000052CA ; ---------------------------------------------------------------------------
.text:00000000000052CA
.text:00000000000052CA loc_52CA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000052CA                 mov     eax, edx
.text:00000000000052CC
.text:00000000000052CC loc_52CC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000052CC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000052CC                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000052D1                 test    rbx, rbx
.text:00000000000052D4                 jz      short loc_5302
.text:00000000000052D6                 test    al, al
.text:00000000000052D8                 jz      short loc_5302
.text:00000000000052DA                 movzx   ecx, byte ptr [rbx]
.text:00000000000052DD                 mov     rax, rbx
.text:00000000000052E0                 test    cl, cl
.text:00000000000052E2                 jz      short loc_5302
.text:00000000000052E4                 mov     rdx, r15
.text:00000000000052E7                 sub     rax, r15
.text:00000000000052EA
.text:00000000000052EA loc_52EA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:00000000000052EA                 cmp     r13, rdx
.text:00000000000052ED                 jbe     short loc_52F3
.text:00000000000052EF                 mov     [r14+rdx], cl
.text:00000000000052F3
.text:00000000000052F3 loc_52F3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:00000000000052F3                 add     rdx, 1
.text:00000000000052F7                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000052FB                 test    cl, cl
.text:00000000000052FD                 jnz     short loc_52EA
.text:00000000000052FF                 mov     r15, rdx
.text:0000000000005302
.text:0000000000005302 loc_5302:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000005302                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000005302                 cmp     r13, r15
.text:0000000000005305                 jbe     loc_4DA9
.text:000000000000530B                 mov     byte ptr [r14+r15], 0
.text:0000000000005310                 jmp     loc_4DA9
.text:0000000000005315 ; ---------------------------------------------------------------------------
.text:0000000000005315
.text:0000000000005315 loc_5315:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000005315                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000531A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000531F                 mov     rbp, r11
.text:0000000000005322                 setz    al
.text:0000000000005325                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000005329                 jmp     loc_4D59
.text:000000000000532E ; ---------------------------------------------------------------------------
.text:000000000000532E
.text:000000000000532E loc_532E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000532E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000005332                 mov     rdi, rcx
.text:0000000000005335                 call    gettext_quote
.text:000000000000533A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000533F                 jmp     loc_4F96
.text:0000000000005344 ; ---------------------------------------------------------------------------
.text:0000000000005344
.text:0000000000005344 loc_5344:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000005344                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000005348                 mov     rdi, rcx
.text:000000000000534B                 call    gettext_quote
.text:0000000000005350                 mov     [rsp+0E8h+var_88], rax
.text:0000000000005355                 jmp     loc_4FC1
.text:000000000000535A ; ---------------------------------------------------------------------------
.text:000000000000535A
.text:000000000000535A loc_535A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000535A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000535F                 mov     rbp, r11
.text:0000000000005362                 mov     eax, edx
.text:0000000000005364                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000005368                 jmp     loc_4D59
.text:000000000000536D ; ---------------------------------------------------------------------------
.text:000000000000536D
.text:000000000000536D loc_536D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000536D                 sub     rsp, 8
.text:0000000000005371                 mov     r8d, 5
.text:0000000000005377                 mov     rcx, r11
.text:000000000000537A                 push    [rsp+0F0h+var_88]
.text:000000000000537E                 push    [rsp+0F8h+var_80]
.text:0000000000005382                 mov     rdi, r14
.text:0000000000005385                 push    [rsp+100h+var_C8]
.text:0000000000005389                 mov     r9d, [rsp+108h+var_70]
.text:0000000000005391                 mov     rdx, [rsp+108h+s]
.text:0000000000005396                 mov     rsi, [rsp+108h+var_98]
.text:000000000000539B                 call    quotearg_buffer_restyled
.text:00000000000053A0                 add     rsp, 20h
.text:00000000000053A4                 mov     r15, rax
.text:00000000000053A7                 jmp     loc_4DA9
.text:00000000000053AC ; ---------------------------------------------------------------------------
.text:00000000000053AC
.text:00000000000053AC loc_53AC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:00000000000053AC                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000053B1                 jmp     loc_52CC
.text:00000000000053B6 ; ---------------------------------------------------------------------------
.text:00000000000053B6
.text:00000000000053B6 loc_53B6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000053B6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000053BE                 jmp     loc_4D59
.text:00000000000053C3 ; ---------------------------------------------------------------------------
.text:00000000000053C3
.text:00000000000053C3 loc_53C3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000053C3                 call    ___stack_chk_fail
.text:00000000000053C8 ; ---------------------------------------------------------------------------
.text:00000000000053C8
.text:00000000000053C8 loc_53C8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000053C8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000053CD                 jmp     loc_4E41
.text:00000000000053D2 ; ---------------------------------------------------------------------------
.text:00000000000053D2
.text:00000000000053D2 loc_53D2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000053D2                 mov     rbp, r11
.text:00000000000053D5                 jmp     loc_4D70
.text:00000000000053DA ; ---------------------------------------------------------------------------
.text:00000000000053DA
.text:00000000000053DA loc_53DA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000053DA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000053DF                 xor     eax, eax
.text:00000000000053E1                 xor     r12d, r12d
.text:00000000000053E4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000053ED                 jmp     loc_4994
.text:00000000000053F2 ; ---------------------------------------------------------------------------
.text:00000000000053F2
.text:00000000000053F2 loc_53F2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000053F2                 mov     rdx, r13
.text:00000000000053F5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000053FA                 jmp     loc_49F2
.text:00000000000053FF ; ---------------------------------------------------------------------------
.text:00000000000053FF
.text:00000000000053FF def_4261:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000053FF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000053FF ; } // starts at 41D0
.text:00000000000053FF quotearg_buffer_restyled endp
.text:00000000000053FF
.text:00000000000053FF ; ---------------------------------------------------------------------------
.text:0000000000005404                 align 10h
.text:0000000000005410
.text:0000000000005410 ; =============== S U B R O U T I N E =======================================
.text:0000000000005410
.text:0000000000005410
.text:0000000000005410 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000005410                                         ; quotearg_n_mem+7↓j ...
.text:0000000000005410
.text:0000000000005410 var_50          = qword ptr -50h
.text:0000000000005410 var_48          = qword ptr -48h
.text:0000000000005410 var_40          = dword ptr -40h
.text:0000000000005410 var_3C          = dword ptr -3Ch
.text:0000000000005410
.text:0000000000005410 ; __unwind {
.text:0000000000005410                 push    r15
.text:0000000000005412                 push    r14
.text:0000000000005414                 movsxd  r15, edi
.text:0000000000005417                 push    r13
.text:0000000000005419                 push    r12
.text:000000000000541B                 mov     r14, rdx
.text:000000000000541E                 push    rbp
.text:000000000000541F                 push    rbx
.text:0000000000005420                 mov     rbp, rcx
.text:0000000000005423                 sub     rsp, 28h
.text:0000000000005427                 mov     [rsp+58h+var_50], rsi
.text:000000000000542C                 call    ___errno_location
.text:0000000000005431                 mov     r13, rax
.text:0000000000005434                 mov     eax, [rax]
.text:0000000000005436                 test    r15d, r15d
.text:0000000000005439                 mov     rbx, cs:slotvec
.text:0000000000005440                 mov     [rsp+58h+var_40], eax
.text:0000000000005444                 js      loc_55B1
.text:000000000000544A                 cmp     cs:nslots, r15d
.text:0000000000005451                 jg      short loc_54B5
.text:0000000000005453                 cmp     r15d, 7FFFFFFFh
.text:000000000000545A                 jz      loc_55B6
.text:0000000000005460                 lea     r12d, [r15+1]
.text:0000000000005464                 lea     rax, slotvec0
.text:000000000000546B                 movsxd  rsi, r12d
.text:000000000000546E                 shl     rsi, 4
.text:0000000000005472                 cmp     rbx, rax
.text:0000000000005475                 jz      loc_5590
.text:000000000000547B                 mov     rdi, rbx
.text:000000000000547E                 call    xrealloc
.text:0000000000005483                 mov     rbx, rax
.text:0000000000005486                 mov     cs:slotvec, rax
.text:000000000000548D
.text:000000000000548D loc_548D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000548D                 movsxd  rdi, cs:nslots
.text:0000000000005494                 mov     edx, r12d
.text:0000000000005497                 xor     esi, esi        ; c
.text:0000000000005499                 sub     edx, edi
.text:000000000000549B                 shl     rdi, 4
.text:000000000000549F                 movsxd  rdx, edx
.text:00000000000054A2                 add     rdi, rbx        ; s
.text:00000000000054A5                 shl     rdx, 4          ; n
.text:00000000000054A9                 call    _memset
.text:00000000000054AE                 mov     cs:nslots, r12d
.text:00000000000054B5
.text:00000000000054B5 loc_54B5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000054B5                 mov     eax, [rbp+4]
.text:00000000000054B8                 shl     r15, 4
.text:00000000000054BC                 sub     rsp, 8
.text:00000000000054C0                 add     rbx, r15
.text:00000000000054C3                 lea     r15, [rbp+8]
.text:00000000000054C7                 mov     r8d, [rbp+0]
.text:00000000000054CB                 mov     r11, [rbx]
.text:00000000000054CE                 mov     r12, [rbx+8]
.text:00000000000054D2                 mov     rcx, r14
.text:00000000000054D5                 or      eax, 1
.text:00000000000054D8                 mov     [rsp+60h+var_3C], eax
.text:00000000000054DC                 push    qword ptr [rbp+30h]
.text:00000000000054DF                 mov     r9d, eax
.text:00000000000054E2                 push    qword ptr [rbp+28h]
.text:00000000000054E5                 push    r15
.text:00000000000054E7                 mov     rsi, r11
.text:00000000000054EA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000054EF                 mov     rdi, r12
.text:00000000000054F2                 mov     [rsp+78h+var_48], r11
.text:00000000000054F7                 call    quotearg_buffer_restyled
.text:00000000000054FC                 add     rsp, 20h
.text:0000000000005500                 mov     r11, [rsp+58h+var_48]
.text:0000000000005505                 cmp     r11, rax
.text:0000000000005508                 ja      short loc_5571
.text:000000000000550A                 lea     rsi, [rax+1]
.text:000000000000550E                 lea     rax, slot0
.text:0000000000005515                 cmp     r12, rax
.text:0000000000005518                 mov     [rbx], rsi
.text:000000000000551B                 jz      short loc_552F
.text:000000000000551D                 mov     rdi, r12        ; ptr
.text:0000000000005520                 mov     [rsp+58h+var_48], rsi
.text:0000000000005525                 call    _free
.text:000000000000552A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000552F
.text:000000000000552F loc_552F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000552F                 mov     rdi, rsi
.text:0000000000005532                 mov     [rsp+58h+var_48], rsi
.text:0000000000005537                 call    xmalloc
.text:000000000000553C                 sub     rsp, 8
.text:0000000000005540                 mov     [rbx+8], rax
.text:0000000000005544                 mov     r8d, [rbp+0]
.text:0000000000005548                 push    qword ptr [rbp+30h]
.text:000000000000554B                 push    qword ptr [rbp+28h]
.text:000000000000554E                 mov     rcx, r14
.text:0000000000005551                 push    r15
.text:0000000000005553                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000005558                 mov     rdi, rax
.text:000000000000555B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000005560                 mov     rsi, [rsp+78h+var_48]
.text:0000000000005565                 mov     r12, rax
.text:0000000000005568                 call    quotearg_buffer_restyled
.text:000000000000556D                 add     rsp, 20h
.text:0000000000005571
.text:0000000000005571 loc_5571:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000005571                 mov     eax, [rsp+58h+var_40]
.text:0000000000005575                 mov     [r13+0], eax
.text:0000000000005579                 add     rsp, 28h
.text:000000000000557D                 mov     rax, r12
.text:0000000000005580                 pop     rbx
.text:0000000000005581                 pop     rbp
.text:0000000000005582                 pop     r12
.text:0000000000005584                 pop     r13
.text:0000000000005586                 pop     r14
.text:0000000000005588                 pop     r15
.text:000000000000558A                 retn
.text:000000000000558A ; ---------------------------------------------------------------------------
.text:000000000000558B                 align 10h
.text:0000000000005590
.text:0000000000005590 loc_5590:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000005590                 xor     edi, edi
.text:0000000000005592                 call    xrealloc
.text:0000000000005597                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000559F                 mov     rbx, rax
.text:00000000000055A2                 mov     cs:slotvec, rax
.text:00000000000055A9                 movups  xmmword ptr [rax], xmm0
.text:00000000000055AC                 jmp     loc_548D
.text:00000000000055B1 ; ---------------------------------------------------------------------------
.text:00000000000055B1
.text:00000000000055B1 loc_55B1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000055B1                 call    _abort
.text:00000000000055B6 ; ---------------------------------------------------------------------------
.text:00000000000055B6
.text:00000000000055B6 loc_55B6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000055B6                 call    xalloc_die
.text:00000000000055B6 ; } // starts at 5410
.text:00000000000055B6 quotearg_n_options endp
.text:00000000000055B6
.text:00000000000055B6 ; ---------------------------------------------------------------------------
.text:00000000000055BB                 align 20h
.text:00000000000055C0
.text:00000000000055C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055C0
.text:00000000000055C0 ; Attributes: info_from_lumina
.text:00000000000055C0
.text:00000000000055C0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000055C0                 public clone_quoting_options
.text:00000000000055C0 clone_quoting_options proc near
.text:00000000000055C0 ; __unwind {
.text:00000000000055C0                 push    r12
.text:00000000000055C2                 push    rbp
.text:00000000000055C3                 push    rbx
.text:00000000000055C4                 mov     rbx, rdi
.text:00000000000055C7                 call    ___errno_location
.text:00000000000055CC                 mov     r12d, [rax]
.text:00000000000055CF                 mov     rbp, rax
.text:00000000000055D2                 lea     rax, default_quoting_options
.text:00000000000055D9                 test    rbx, rbx
.text:00000000000055DC                 mov     esi, 38h ; '8'  ; n
.text:00000000000055E1                 cmovz   rbx, rax
.text:00000000000055E5                 mov     rdi, rbx        ; src
.text:00000000000055E8                 call    xmemdup
.text:00000000000055ED                 mov     [rbp+0], r12d
.text:00000000000055F1                 pop     rbx
.text:00000000000055F2                 pop     rbp
.text:00000000000055F3                 pop     r12
.text:00000000000055F5                 retn
.text:00000000000055F5 ; } // starts at 55C0
.text:00000000000055F5 clone_quoting_options endp
.text:00000000000055F5
.text:00000000000055F5 ; ---------------------------------------------------------------------------
.text:00000000000055F6                 align 20h
.text:0000000000005600
.text:0000000000005600 ; =============== S U B R O U T I N E =======================================
.text:0000000000005600
.text:0000000000005600
.text:0000000000005600                 public get_quoting_style
.text:0000000000005600 get_quoting_style proc near
.text:0000000000005600 ; __unwind {
.text:0000000000005600                 lea     rax, default_quoting_options
.text:0000000000005607                 test    rdi, rdi
.text:000000000000560A                 cmovz   rdi, rax
.text:000000000000560E                 mov     eax, [rdi]
.text:0000000000005610                 retn
.text:0000000000005610 ; } // starts at 5600
.text:0000000000005610 get_quoting_style endp
.text:0000000000005610
.text:0000000000005610 ; ---------------------------------------------------------------------------
.text:0000000000005611                 align 20h
.text:0000000000005620
.text:0000000000005620 ; =============== S U B R O U T I N E =======================================
.text:0000000000005620
.text:0000000000005620
.text:0000000000005620                 public set_quoting_style
.text:0000000000005620 set_quoting_style proc near
.text:0000000000005620 ; __unwind {
.text:0000000000005620                 lea     rax, default_quoting_options
.text:0000000000005627                 test    rdi, rdi
.text:000000000000562A                 cmovz   rdi, rax
.text:000000000000562E                 mov     [rdi], esi
.text:0000000000005630                 retn
.text:0000000000005630 ; } // starts at 5620
.text:0000000000005630 set_quoting_style endp
.text:0000000000005630
.text:0000000000005630 ; ---------------------------------------------------------------------------
.text:0000000000005631                 align 20h
.text:0000000000005640
.text:0000000000005640 ; =============== S U B R O U T I N E =======================================
.text:0000000000005640
.text:0000000000005640 ; Attributes: info_from_lumina
.text:0000000000005640
.text:0000000000005640 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000005640                 public set_char_quoting
.text:0000000000005640 set_char_quoting proc near
.text:0000000000005640 ; __unwind {
.text:0000000000005640                 lea     rax, default_quoting_options
.text:0000000000005647                 test    rdi, rdi
.text:000000000000564A                 mov     ecx, esi
.text:000000000000564C                 cmovz   rdi, rax
.text:0000000000005650                 mov     eax, esi
.text:0000000000005652                 and     ecx, 1Fh
.text:0000000000005655                 shr     al, 5
.text:0000000000005658                 movzx   eax, al
.text:000000000000565B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000005660                 mov     esi, [rdi]
.text:0000000000005662                 mov     eax, esi
.text:0000000000005664                 shr     eax, cl
.text:0000000000005666                 xor     edx, eax
.text:0000000000005668                 and     eax, 1
.text:000000000000566B                 and     edx, 1
.text:000000000000566E                 shl     edx, cl
.text:0000000000005670                 xor     edx, esi
.text:0000000000005672                 mov     [rdi], edx
.text:0000000000005674                 retn
.text:0000000000005674 ; } // starts at 5640
.text:0000000000005674 set_char_quoting endp
.text:0000000000005674
.text:0000000000005674 ; ---------------------------------------------------------------------------
.text:0000000000005675                 align 20h
.text:0000000000005680
.text:0000000000005680 ; =============== S U B R O U T I N E =======================================
.text:0000000000005680
.text:0000000000005680
.text:0000000000005680                 public set_quoting_flags
.text:0000000000005680 set_quoting_flags proc near
.text:0000000000005680 ; __unwind {
.text:0000000000005680                 lea     rax, default_quoting_options
.text:0000000000005687                 test    rdi, rdi
.text:000000000000568A                 cmovz   rdi, rax
.text:000000000000568E                 mov     eax, [rdi+4]
.text:0000000000005691                 mov     [rdi+4], esi
.text:0000000000005694                 retn
.text:0000000000005694 ; } // starts at 5680
.text:0000000000005694 set_quoting_flags endp
.text:0000000000005694
.text:0000000000005694 ; ---------------------------------------------------------------------------
.text:0000000000005695                 align 20h
.text:00000000000056A0
.text:00000000000056A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056A0
.text:00000000000056A0 ; Attributes: info_from_lumina
.text:00000000000056A0
.text:00000000000056A0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000056A0                 public set_custom_quoting
.text:00000000000056A0 set_custom_quoting proc near
.text:00000000000056A0 ; __unwind {
.text:00000000000056A0                 lea     rax, default_quoting_options
.text:00000000000056A7                 test    rdi, rdi
.text:00000000000056AA                 cmovz   rdi, rax
.text:00000000000056AE                 test    rsi, rsi
.text:00000000000056B1                 mov     dword ptr [rdi], 0Ah
.text:00000000000056B7                 jz      short loc_56C7
.text:00000000000056B9                 test    rdx, rdx
.text:00000000000056BC                 jz      short loc_56C7
.text:00000000000056BE                 mov     [rdi+28h], rsi
.text:00000000000056C2                 mov     [rdi+30h], rdx
.text:00000000000056C6                 retn
.text:00000000000056C7 ; ---------------------------------------------------------------------------
.text:00000000000056C7
.text:00000000000056C7 loc_56C7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000056C7                                         ; set_custom_quoting+1C↑j
.text:00000000000056C7                 sub     rsp, 8
.text:00000000000056CB                 call    _abort
.text:00000000000056CB ; } // starts at 56A0
.text:00000000000056CB set_custom_quoting endp
.text:00000000000056CB
.text:00000000000056D0
.text:00000000000056D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056D0
.text:00000000000056D0 ; Attributes: info_from_lumina
.text:00000000000056D0
.text:00000000000056D0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000056D0                 public quotearg_buffer
.text:00000000000056D0 quotearg_buffer proc near
.text:00000000000056D0
.text:00000000000056D0 var_40          = qword ptr -40h
.text:00000000000056D0
.text:00000000000056D0 ; __unwind {
.text:00000000000056D0                 push    r15
.text:00000000000056D2                 push    r14
.text:00000000000056D4                 lea     rax, default_quoting_options
.text:00000000000056DB                 push    r13
.text:00000000000056DD                 push    r12
.text:00000000000056DF                 mov     r13, rdi
.text:00000000000056E2                 push    rbp
.text:00000000000056E3                 push    rbx
.text:00000000000056E4                 mov     rbx, r8
.text:00000000000056E7                 mov     r14, rsi
.text:00000000000056EA                 mov     r15, rdx
.text:00000000000056ED                 sub     rsp, 18h
.text:00000000000056F1                 test    r8, r8
.text:00000000000056F4                 cmovz   rbx, rax
.text:00000000000056F8                 mov     [rsp+48h+var_40], rcx
.text:00000000000056FD                 call    ___errno_location
.text:0000000000005702                 mov     r12d, [rax]
.text:0000000000005705                 mov     rbp, rax
.text:0000000000005708                 lea     rax, [rbx+8]
.text:000000000000570C                 sub     rsp, 8
.text:0000000000005710                 mov     r9d, [rbx+4]
.text:0000000000005714                 push    qword ptr [rbx+30h]
.text:0000000000005717                 mov     r8d, [rbx]
.text:000000000000571A                 push    qword ptr [rbx+28h]
.text:000000000000571D                 mov     rdx, r15
.text:0000000000005720                 push    rax
.text:0000000000005721                 mov     rcx, [rsp+68h+var_40]
.text:0000000000005726                 mov     rsi, r14
.text:0000000000005729                 mov     rdi, r13
.text:000000000000572C                 call    quotearg_buffer_restyled
.text:0000000000005731                 mov     [rbp+0], r12d
.text:0000000000005735                 add     rsp, 38h
.text:0000000000005739                 pop     rbx
.text:000000000000573A                 pop     rbp
.text:000000000000573B                 pop     r12
.text:000000000000573D                 pop     r13
.text:000000000000573F                 pop     r14
.text:0000000000005741                 pop     r15
.text:0000000000005743                 retn
.text:0000000000005743 ; } // starts at 56D0
.text:0000000000005743 quotearg_buffer endp
.text:0000000000005743
.text:0000000000005743 ; ---------------------------------------------------------------------------
.text:0000000000005744                 align 10h
.text:0000000000005750
.text:0000000000005750 ; =============== S U B R O U T I N E =======================================
.text:0000000000005750
.text:0000000000005750 ; Attributes: info_from_lumina
.text:0000000000005750
.text:0000000000005750 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000005750                 public quotearg_alloc_mem
.text:0000000000005750 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000005750
.text:0000000000005750 var_5C          = dword ptr -5Ch
.text:0000000000005750 var_58          = qword ptr -58h
.text:0000000000005750 var_50          = qword ptr -50h
.text:0000000000005750 var_48          = qword ptr -48h
.text:0000000000005750 var_40          = qword ptr -40h
.text:0000000000005750
.text:0000000000005750 ; __unwind {
.text:0000000000005750                 push    r15
.text:0000000000005752                 push    r14
.text:0000000000005754                 lea     rax, default_quoting_options
.text:000000000000575B                 push    r13
.text:000000000000575D                 push    r12
.text:000000000000575F                 mov     r12, rdx
.text:0000000000005762                 push    rbp
.text:0000000000005763                 push    rbx
.text:0000000000005764                 mov     rbx, rcx
.text:0000000000005767                 mov     r14, rdi
.text:000000000000576A                 mov     r15, rsi
.text:000000000000576D                 sub     rsp, 38h
.text:0000000000005771                 test    rcx, rcx
.text:0000000000005774                 cmovz   rbx, rax
.text:0000000000005778                 xor     ebp, ebp
.text:000000000000577A                 call    ___errno_location
.text:000000000000577F                 test    r12, r12
.text:0000000000005782                 mov     r13, rax
.text:0000000000005785                 mov     eax, [rax]
.text:0000000000005787                 setz    bpl
.text:000000000000578B                 or      ebp, [rbx+4]
.text:000000000000578E                 lea     r10, [rbx+8]
.text:0000000000005792                 sub     rsp, 8
.text:0000000000005796                 mov     r8d, [rbx]
.text:0000000000005799                 mov     rcx, r15
.text:000000000000579C                 mov     [rsp+70h+var_5C], eax
.text:00000000000057A0                 push    qword ptr [rbx+30h]
.text:00000000000057A3                 mov     rdx, r14
.text:00000000000057A6                 push    qword ptr [rbx+28h]
.text:00000000000057A9                 push    r10
.text:00000000000057AB                 xor     esi, esi
.text:00000000000057AD                 mov     r9d, ebp
.text:00000000000057B0                 xor     edi, edi
.text:00000000000057B2                 mov     [rsp+88h+var_48], r10
.text:00000000000057B7                 call    quotearg_buffer_restyled
.text:00000000000057BC                 lea     rsi, [rax+1]
.text:00000000000057C0                 mov     [rsp+88h+var_40], rax
.text:00000000000057C5                 add     rsp, 20h
.text:00000000000057C9                 mov     rdi, rsi
.text:00000000000057CC                 mov     [rsp+68h+var_50], rsi
.text:00000000000057D1                 call    xmalloc
.text:00000000000057D6                 mov     [rsp+68h+var_58], rax
.text:00000000000057DB                 sub     rsp, 8
.text:00000000000057DF                 push    qword ptr [rbx+30h]
.text:00000000000057E2                 push    qword ptr [rbx+28h]
.text:00000000000057E5                 mov     r10, [rsp+80h+var_48]
.text:00000000000057EA                 mov     r9d, ebp
.text:00000000000057ED                 mov     r8d, [rbx]
.text:00000000000057F0                 mov     rcx, r15
.text:00000000000057F3                 mov     rdx, r14
.text:00000000000057F6                 mov     rdi, rax
.text:00000000000057F9                 push    r10
.text:00000000000057FB                 mov     rsi, [rsp+88h+var_50]
.text:0000000000005800                 call    quotearg_buffer_restyled
.text:0000000000005805                 mov     eax, [rsp+88h+var_5C]
.text:0000000000005809                 add     rsp, 20h
.text:000000000000580D                 test    r12, r12
.text:0000000000005810                 mov     [r13+0], eax
.text:0000000000005814                 jz      short loc_581F
.text:0000000000005816                 mov     r11, [rsp+68h+var_40]
.text:000000000000581B                 mov     [r12], r11
.text:000000000000581F
.text:000000000000581F loc_581F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000581F                 mov     rax, [rsp+68h+var_58]
.text:0000000000005824                 add     rsp, 38h
.text:0000000000005828                 pop     rbx
.text:0000000000005829                 pop     rbp
.text:000000000000582A                 pop     r12
.text:000000000000582C                 pop     r13
.text:000000000000582E                 pop     r14
.text:0000000000005830                 pop     r15
.text:0000000000005832                 retn
.text:0000000000005832 ; } // starts at 5750
.text:0000000000005832 quotearg_alloc_mem endp
.text:0000000000005832
.text:0000000000005832 ; ---------------------------------------------------------------------------
.text:0000000000005833                 align 20h
.text:0000000000005840
.text:0000000000005840 ; =============== S U B R O U T I N E =======================================
.text:0000000000005840
.text:0000000000005840
.text:0000000000005840                 public quotearg_alloc
.text:0000000000005840 quotearg_alloc  proc near
.text:0000000000005840 ; __unwind {
.text:0000000000005840                 mov     rcx, rdx
.text:0000000000005843                 xor     edx, edx
.text:0000000000005845                 jmp     quotearg_alloc_mem
.text:0000000000005845 ; } // starts at 5840
.text:0000000000005845 quotearg_alloc  endp
.text:0000000000005845
.text:0000000000005845 ; ---------------------------------------------------------------------------
.text:000000000000584A                 align 10h
.text:0000000000005850
.text:0000000000005850 ; =============== S U B R O U T I N E =======================================
.text:0000000000005850
.text:0000000000005850 ; Attributes: info_from_lumina
.text:0000000000005850
.text:0000000000005850 ; void __cdecl quotearg_free()
.text:0000000000005850                 public quotearg_free
.text:0000000000005850 quotearg_free   proc near
.text:0000000000005850 ; __unwind {
.text:0000000000005850                 mov     eax, cs:nslots
.text:0000000000005856                 push    r12
.text:0000000000005858                 mov     r12, cs:slotvec
.text:000000000000585F                 push    rbp
.text:0000000000005860                 push    rbx
.text:0000000000005861                 cmp     eax, 1
.text:0000000000005864                 jle     short loc_5891
.text:0000000000005866                 sub     eax, 2
.text:0000000000005869                 lea     rbx, [r12+18h]
.text:000000000000586E                 shl     rax, 4
.text:0000000000005872                 lea     rbp, [r12+rax+28h]
.text:0000000000005877                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005880
.text:0000000000005880 loc_5880:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000005880                 mov     rdi, [rbx]      ; ptr
.text:0000000000005883                 add     rbx, 10h
.text:0000000000005887                 call    _free
.text:000000000000588C                 cmp     rbx, rbp
.text:000000000000588F                 jnz     short loc_5880
.text:0000000000005891
.text:0000000000005891 loc_5891:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000005891                 mov     rdi, [r12+8]    ; ptr
.text:0000000000005896                 lea     rbx, slot0
.text:000000000000589D                 cmp     rdi, rbx
.text:00000000000058A0                 jz      short loc_58B9
.text:00000000000058A2                 call    _free
.text:00000000000058A7                 mov     cs:slotvec0, 100h
.text:00000000000058B2                 mov     cs:off_20B098, rbx
.text:00000000000058B9
.text:00000000000058B9 loc_58B9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000058B9                 lea     rbx, slotvec0
.text:00000000000058C0                 cmp     r12, rbx
.text:00000000000058C3                 jz      short loc_58D4
.text:00000000000058C5                 mov     rdi, r12        ; ptr
.text:00000000000058C8                 call    _free
.text:00000000000058CD                 mov     cs:slotvec, rbx
.text:00000000000058D4
.text:00000000000058D4 loc_58D4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000058D4                 pop     rbx
.text:00000000000058D5                 mov     cs:nslots, 1
.text:00000000000058DF                 pop     rbp
.text:00000000000058E0                 pop     r12
.text:00000000000058E2                 retn
.text:00000000000058E2 ; } // starts at 5850
.text:00000000000058E2 quotearg_free   endp
.text:00000000000058E2
.text:00000000000058E2 ; ---------------------------------------------------------------------------
.text:00000000000058E3                 align 10h
.text:00000000000058F0
.text:00000000000058F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058F0
.text:00000000000058F0
.text:00000000000058F0                 public quotearg_n
.text:00000000000058F0 quotearg_n      proc near
.text:00000000000058F0 ; __unwind {
.text:00000000000058F0                 lea     rcx, default_quoting_options
.text:00000000000058F7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000058FE                 jmp     quotearg_n_options
.text:00000000000058FE ; } // starts at 58F0
.text:00000000000058FE quotearg_n      endp
.text:00000000000058FE
.text:00000000000058FE ; ---------------------------------------------------------------------------
.text:0000000000005903                 align 10h
.text:0000000000005910
.text:0000000000005910 ; =============== S U B R O U T I N E =======================================
.text:0000000000005910
.text:0000000000005910
.text:0000000000005910                 public quotearg_n_mem
.text:0000000000005910 quotearg_n_mem  proc near
.text:0000000000005910 ; __unwind {
.text:0000000000005910                 lea     rcx, default_quoting_options
.text:0000000000005917                 jmp     quotearg_n_options
.text:0000000000005917 ; } // starts at 5910
.text:0000000000005917 quotearg_n_mem  endp
.text:0000000000005917
.text:0000000000005917 ; ---------------------------------------------------------------------------
.text:000000000000591C                 align 20h
.text:0000000000005920
.text:0000000000005920 ; =============== S U B R O U T I N E =======================================
.text:0000000000005920
.text:0000000000005920
.text:0000000000005920                 public quotearg
.text:0000000000005920 quotearg        proc near
.text:0000000000005920 ; __unwind {
.text:0000000000005920                 lea     rcx, default_quoting_options
.text:0000000000005927                 mov     rsi, rdi
.text:000000000000592A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005931                 xor     edi, edi
.text:0000000000005933                 jmp     quotearg_n_options
.text:0000000000005933 ; } // starts at 5920
.text:0000000000005933 quotearg        endp
.text:0000000000005933
.text:0000000000005933 ; ---------------------------------------------------------------------------
.text:0000000000005938                 align 20h
.text:0000000000005940
.text:0000000000005940 ; =============== S U B R O U T I N E =======================================
.text:0000000000005940
.text:0000000000005940
.text:0000000000005940                 public quotearg_mem
.text:0000000000005940 quotearg_mem    proc near
.text:0000000000005940 ; __unwind {
.text:0000000000005940                 lea     rcx, default_quoting_options
.text:0000000000005947                 mov     rdx, rsi
.text:000000000000594A                 mov     rsi, rdi
.text:000000000000594D                 xor     edi, edi
.text:000000000000594F                 jmp     quotearg_n_options
.text:000000000000594F ; } // starts at 5940
.text:000000000000594F quotearg_mem    endp
.text:000000000000594F
.text:000000000000594F ; ---------------------------------------------------------------------------
.text:0000000000005954                 align 20h
.text:0000000000005960
.text:0000000000005960 ; =============== S U B R O U T I N E =======================================
.text:0000000000005960
.text:0000000000005960 ; Attributes: info_from_lumina
.text:0000000000005960
.text:0000000000005960 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000005960                 public quotearg_n_style
.text:0000000000005960 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000005960
.text:0000000000005960 var_48          = dword ptr -48h
.text:0000000000005960 var_44          = qword ptr -44h
.text:0000000000005960 var_3C          = qword ptr -3Ch
.text:0000000000005960 var_34          = qword ptr -34h
.text:0000000000005960 var_2C          = qword ptr -2Ch
.text:0000000000005960 var_24          = qword ptr -24h
.text:0000000000005960 var_1C          = qword ptr -1Ch
.text:0000000000005960 var_14          = dword ptr -14h
.text:0000000000005960 var_10          = qword ptr -10h
.text:0000000000005960
.text:0000000000005960 ; __unwind {
.text:0000000000005960                 sub     rsp, 48h
.text:0000000000005964                 mov     rax, rdx
.text:0000000000005967                 mov     rdx, fs:28h
.text:0000000000005970                 mov     [rsp+48h+var_10], rdx
.text:0000000000005975                 xor     edx, edx
.text:0000000000005977                 cmp     esi, 0Ah
.text:000000000000597A                 jz      short loc_59E4
.text:000000000000597C                 mov     [rsp+48h+var_48], esi
.text:000000000000597F                 mov     rcx, rsp
.text:0000000000005982                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005989                 mov     rsi, rax
.text:000000000000598C                 mov     [rsp+48h+var_44], 0
.text:0000000000005995                 mov     [rsp+48h+var_3C], 0
.text:000000000000599E                 mov     [rsp+48h+var_34], 0
.text:00000000000059A7                 mov     [rsp+48h+var_2C], 0
.text:00000000000059B0                 mov     [rsp+48h+var_24], 0
.text:00000000000059B9                 mov     [rsp+48h+var_1C], 0
.text:00000000000059C2                 mov     [rsp+48h+var_14], 0
.text:00000000000059CA                 call    quotearg_n_options
.text:00000000000059CF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000059D4                 xor     rcx, fs:28h
.text:00000000000059DD                 jnz     short loc_59E9
.text:00000000000059DF                 add     rsp, 48h
.text:00000000000059E3                 retn
.text:00000000000059E4 ; ---------------------------------------------------------------------------
.text:00000000000059E4
.text:00000000000059E4 loc_59E4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000059E4                 call    _abort
.text:00000000000059E9 ; ---------------------------------------------------------------------------
.text:00000000000059E9
.text:00000000000059E9 loc_59E9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000059E9                 call    ___stack_chk_fail
.text:00000000000059E9 ; } // starts at 5960
.text:00000000000059E9 quotearg_n_style endp
.text:00000000000059E9
.text:00000000000059E9 ; ---------------------------------------------------------------------------
.text:00000000000059EE                 align 10h
.text:00000000000059F0
.text:00000000000059F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059F0
.text:00000000000059F0 ; Attributes: info_from_lumina
.text:00000000000059F0
.text:00000000000059F0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000059F0                 public quotearg_n_style_mem
.text:00000000000059F0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000059F0                                         ; collate_error+6A↓p ...
.text:00000000000059F0
.text:00000000000059F0 var_48          = dword ptr -48h
.text:00000000000059F0 var_44          = qword ptr -44h
.text:00000000000059F0 var_3C          = qword ptr -3Ch
.text:00000000000059F0 var_34          = qword ptr -34h
.text:00000000000059F0 var_2C          = qword ptr -2Ch
.text:00000000000059F0 var_24          = qword ptr -24h
.text:00000000000059F0 var_1C          = qword ptr -1Ch
.text:00000000000059F0 var_14          = dword ptr -14h
.text:00000000000059F0 var_10          = qword ptr -10h
.text:00000000000059F0
.text:00000000000059F0 ; __unwind {
.text:00000000000059F0                 sub     rsp, 48h
.text:00000000000059F4                 mov     rax, rdx
.text:00000000000059F7                 mov     rdx, rcx
.text:00000000000059FA                 mov     rcx, fs:28h
.text:0000000000005A03                 mov     [rsp+48h+var_10], rcx
.text:0000000000005A08                 xor     ecx, ecx
.text:0000000000005A0A                 cmp     esi, 0Ah
.text:0000000000005A0D                 jz      short loc_5A70
.text:0000000000005A0F                 mov     [rsp+48h+var_48], esi
.text:0000000000005A12                 mov     rcx, rsp
.text:0000000000005A15                 mov     rsi, rax
.text:0000000000005A18                 mov     [rsp+48h+var_44], 0
.text:0000000000005A21                 mov     [rsp+48h+var_3C], 0
.text:0000000000005A2A                 mov     [rsp+48h+var_34], 0
.text:0000000000005A33                 mov     [rsp+48h+var_2C], 0
.text:0000000000005A3C                 mov     [rsp+48h+var_24], 0
.text:0000000000005A45                 mov     [rsp+48h+var_1C], 0
.text:0000000000005A4E                 mov     [rsp+48h+var_14], 0
.text:0000000000005A56                 call    quotearg_n_options
.text:0000000000005A5B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000005A60                 xor     rdx, fs:28h
.text:0000000000005A69                 jnz     short loc_5A75
.text:0000000000005A6B                 add     rsp, 48h
.text:0000000000005A6F                 retn
.text:0000000000005A70 ; ---------------------------------------------------------------------------
.text:0000000000005A70
.text:0000000000005A70 loc_5A70:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000005A70                 call    _abort
.text:0000000000005A75 ; ---------------------------------------------------------------------------
.text:0000000000005A75
.text:0000000000005A75 loc_5A75:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000005A75                 call    ___stack_chk_fail
.text:0000000000005A75 ; } // starts at 59F0
.text:0000000000005A75 quotearg_n_style_mem endp
.text:0000000000005A75
.text:0000000000005A75 ; ---------------------------------------------------------------------------
.text:0000000000005A7A                 align 20h
.text:0000000000005A80
.text:0000000000005A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A80
.text:0000000000005A80
.text:0000000000005A80                 public quotearg_style
.text:0000000000005A80 quotearg_style  proc near               ; CODE XREF: add_file_name_constprop_7+180↑p
.text:0000000000005A80 ; __unwind {
.text:0000000000005A80                 mov     rdx, rsi
.text:0000000000005A83                 mov     esi, edi
.text:0000000000005A85                 xor     edi, edi
.text:0000000000005A87                 jmp     quotearg_n_style
.text:0000000000005A87 ; } // starts at 5A80
.text:0000000000005A87 quotearg_style  endp
.text:0000000000005A87
.text:0000000000005A87 ; ---------------------------------------------------------------------------
.text:0000000000005A8C                 align 10h
.text:0000000000005A90
.text:0000000000005A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A90
.text:0000000000005A90
.text:0000000000005A90                 public quotearg_style_mem
.text:0000000000005A90 quotearg_style_mem proc near
.text:0000000000005A90 ; __unwind {
.text:0000000000005A90                 mov     rcx, rdx
.text:0000000000005A93                 mov     rdx, rsi
.text:0000000000005A96                 mov     esi, edi
.text:0000000000005A98                 xor     edi, edi
.text:0000000000005A9A                 jmp     quotearg_n_style_mem
.text:0000000000005A9A ; } // starts at 5A90
.text:0000000000005A9A quotearg_style_mem endp
.text:0000000000005A9A
.text:0000000000005A9A ; ---------------------------------------------------------------------------
.text:0000000000005A9F                 align 20h
.text:0000000000005AA0
.text:0000000000005AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AA0
.text:0000000000005AA0 ; Attributes: info_from_lumina
.text:0000000000005AA0
.text:0000000000005AA0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000005AA0                 public quotearg_char_mem
.text:0000000000005AA0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000005AA0                                         ; quotearg_colon+C↓j ...
.text:0000000000005AA0
.text:0000000000005AA0 var_48          = xmmword ptr -48h
.text:0000000000005AA0 var_38          = xmmword ptr -38h
.text:0000000000005AA0 var_28          = xmmword ptr -28h
.text:0000000000005AA0 var_18          = qword ptr -18h
.text:0000000000005AA0 var_10          = qword ptr -10h
.text:0000000000005AA0
.text:0000000000005AA0 ; __unwind {
.text:0000000000005AA0                 sub     rsp, 48h
.text:0000000000005AA4                 mov     ecx, edx
.text:0000000000005AA6                 mov     rax, fs:28h
.text:0000000000005AAF                 mov     [rsp+48h+var_10], rax
.text:0000000000005AB4                 xor     eax, eax
.text:0000000000005AB6                 mov     rax, cs:qword_20B330
.text:0000000000005ABD                 mov     r8, rsp
.text:0000000000005AC0                 and     ecx, 1Fh
.text:0000000000005AC3                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000005ACB                 mov     [rsp+48h+var_18], rax
.text:0000000000005AD0                 mov     eax, edx
.text:0000000000005AD2                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000005AD6                 shr     al, 5
.text:0000000000005AD9                 movzx   eax, al
.text:0000000000005ADC                 lea     r9, [r8+rax*4+8]
.text:0000000000005AE1                 movdqa  xmm0, cs:xmmword_20B310
.text:0000000000005AE9                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005AEE                 movdqa  xmm0, cs:xmmword_20B320
.text:0000000000005AF6                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005AFB                 mov     edx, [r9]
.text:0000000000005AFE                 mov     eax, edx
.text:0000000000005B00                 shr     eax, cl
.text:0000000000005B02                 not     eax
.text:0000000000005B04                 and     eax, 1
.text:0000000000005B07                 shl     eax, cl
.text:0000000000005B09                 mov     rcx, r8
.text:0000000000005B0C                 xor     eax, edx
.text:0000000000005B0E                 mov     rdx, rsi
.text:0000000000005B11                 mov     rsi, rdi
.text:0000000000005B14                 mov     [r9], eax
.text:0000000000005B17                 xor     edi, edi
.text:0000000000005B19                 call    quotearg_n_options
.text:0000000000005B1E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000005B23                 xor     rsi, fs:28h
.text:0000000000005B2C                 jnz     short loc_5B33
.text:0000000000005B2E                 add     rsp, 48h
.text:0000000000005B32                 retn
.text:0000000000005B33 ; ---------------------------------------------------------------------------
.text:0000000000005B33
.text:0000000000005B33 loc_5B33:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000005B33                 call    ___stack_chk_fail
.text:0000000000005B33 ; } // starts at 5AA0
.text:0000000000005B33 quotearg_char_mem endp
.text:0000000000005B33
.text:0000000000005B33 ; ---------------------------------------------------------------------------
.text:0000000000005B38                 align 20h
.text:0000000000005B40
.text:0000000000005B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B40
.text:0000000000005B40
.text:0000000000005B40                 public quotearg_char
.text:0000000000005B40 quotearg_char   proc near
.text:0000000000005B40 ; __unwind {
.text:0000000000005B40                 movsx   edx, sil
.text:0000000000005B44                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000005B4B                 jmp     quotearg_char_mem
.text:0000000000005B4B ; } // starts at 5B40
.text:0000000000005B4B quotearg_char   endp
.text:0000000000005B4B
.text:0000000000005B50
.text:0000000000005B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B50
.text:0000000000005B50
.text:0000000000005B50                 public quotearg_colon
.text:0000000000005B50 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000005B50 ; __unwind {
.text:0000000000005B50                 mov     edx, 3Ah ; ':'
.text:0000000000005B55                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000005B5C                 jmp     quotearg_char_mem
.text:0000000000005B5C ; } // starts at 5B50
.text:0000000000005B5C quotearg_colon  endp
.text:0000000000005B5C
.text:0000000000005B5C ; ---------------------------------------------------------------------------
.text:0000000000005B61                 align 10h
.text:0000000000005B70
.text:0000000000005B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B70
.text:0000000000005B70
.text:0000000000005B70                 public quotearg_colon_mem
.text:0000000000005B70 quotearg_colon_mem proc near
.text:0000000000005B70 ; __unwind {
.text:0000000000005B70                 mov     edx, 3Ah ; ':'
.text:0000000000005B75                 jmp     quotearg_char_mem
.text:0000000000005B75 ; } // starts at 5B70
.text:0000000000005B75 quotearg_colon_mem endp
.text:0000000000005B75
.text:0000000000005B75 ; ---------------------------------------------------------------------------
.text:0000000000005B7A                 align 20h
.text:0000000000005B80
.text:0000000000005B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B80
.text:0000000000005B80 ; Attributes: info_from_lumina
.text:0000000000005B80
.text:0000000000005B80 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000005B80                 public quotearg_n_style_colon
.text:0000000000005B80 quotearg_n_style_colon proc near        ; CODE XREF: main+DD5↑p
.text:0000000000005B80                                         ; main+E34↑p ...
.text:0000000000005B80
.text:0000000000005B80 var_48          = dword ptr -48h
.text:0000000000005B80 var_44          = qword ptr -44h
.text:0000000000005B80 var_3C          = qword ptr -3Ch
.text:0000000000005B80 var_34          = qword ptr -34h
.text:0000000000005B80 var_2C          = qword ptr -2Ch
.text:0000000000005B80 var_24          = qword ptr -24h
.text:0000000000005B80 var_1C          = qword ptr -1Ch
.text:0000000000005B80 var_14          = dword ptr -14h
.text:0000000000005B80 var_10          = qword ptr -10h
.text:0000000000005B80
.text:0000000000005B80 ; __unwind {
.text:0000000000005B80                 sub     rsp, 48h
.text:0000000000005B84                 mov     rax, rdx
.text:0000000000005B87                 mov     rdx, fs:28h
.text:0000000000005B90                 mov     [rsp+48h+var_10], rdx
.text:0000000000005B95                 xor     edx, edx
.text:0000000000005B97                 cmp     esi, 0Ah
.text:0000000000005B9A                 jz      short loc_5C04
.text:0000000000005B9C                 mov     [rsp+48h+var_48], esi
.text:0000000000005B9F                 mov     rcx, rsp
.text:0000000000005BA2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005BA9                 mov     rsi, rax
.text:0000000000005BAC                 mov     [rsp+48h+var_44], 0
.text:0000000000005BB5                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000005BBE                 mov     [rsp+48h+var_34], 0
.text:0000000000005BC7                 mov     [rsp+48h+var_2C], 0
.text:0000000000005BD0                 mov     [rsp+48h+var_24], 0
.text:0000000000005BD9                 mov     [rsp+48h+var_1C], 0
.text:0000000000005BE2                 mov     [rsp+48h+var_14], 0
.text:0000000000005BEA                 call    quotearg_n_options
.text:0000000000005BEF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000005BF4                 xor     rcx, fs:28h
.text:0000000000005BFD                 jnz     short loc_5C09
.text:0000000000005BFF                 add     rsp, 48h
.text:0000000000005C03                 retn
.text:0000000000005C04 ; ---------------------------------------------------------------------------
.text:0000000000005C04
.text:0000000000005C04 loc_5C04:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000005C04                 call    _abort
.text:0000000000005C09 ; ---------------------------------------------------------------------------
.text:0000000000005C09
.text:0000000000005C09 loc_5C09:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000005C09                 call    ___stack_chk_fail
.text:0000000000005C09 ; } // starts at 5B80
.text:0000000000005C09 quotearg_n_style_colon endp
.text:0000000000005C09
.text:0000000000005C09 ; ---------------------------------------------------------------------------
.text:0000000000005C0E                 align 10h
.text:0000000000005C10
.text:0000000000005C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C10
.text:0000000000005C10 ; Attributes: info_from_lumina
.text:0000000000005C10
.text:0000000000005C10 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000005C10                 public quotearg_n_custom_mem
.text:0000000000005C10 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000005C10                                         ; quotearg_custom+12↓j ...
.text:0000000000005C10
.text:0000000000005C10 var_48          = xmmword ptr -48h
.text:0000000000005C10 var_38          = xmmword ptr -38h
.text:0000000000005C10 var_28          = xmmword ptr -28h
.text:0000000000005C10 var_18          = qword ptr -18h
.text:0000000000005C10 var_10          = qword ptr -10h
.text:0000000000005C10
.text:0000000000005C10 ; __unwind {
.text:0000000000005C10                 sub     rsp, 48h
.text:0000000000005C14                 mov     r9, rcx
.text:0000000000005C17                 mov     rcx, cs:qword_20B330
.text:0000000000005C1E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000005C26                 mov     rax, fs:28h
.text:0000000000005C2F                 mov     [rsp+48h+var_10], rax
.text:0000000000005C34                 xor     eax, eax
.text:0000000000005C36                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000005C3A                 test    rsi, rsi
.text:0000000000005C3D                 mov     [rsp+48h+var_18], rcx
.text:0000000000005C42                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000005C49                 movdqa  xmm0, cs:xmmword_20B310
.text:0000000000005C51                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005C56                 movdqa  xmm0, cs:xmmword_20B320
.text:0000000000005C5E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005C63                 jz      short loc_5C97
.text:0000000000005C65                 test    rdx, rdx
.text:0000000000005C68                 jz      short loc_5C97
.text:0000000000005C6A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000005C6F                 mov     [rsp+48h+var_18], rdx
.text:0000000000005C74                 mov     rcx, rsp
.text:0000000000005C77                 mov     rdx, r8
.text:0000000000005C7A                 mov     rsi, r9
.text:0000000000005C7D                 call    quotearg_n_options
.text:0000000000005C82                 mov     rdi, [rsp+48h+var_10]
.text:0000000000005C87                 xor     rdi, fs:28h
.text:0000000000005C90                 jnz     short loc_5C9C
.text:0000000000005C92                 add     rsp, 48h
.text:0000000000005C96                 retn
.text:0000000000005C97 ; ---------------------------------------------------------------------------
.text:0000000000005C97
.text:0000000000005C97 loc_5C97:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000005C97                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000005C97                 call    _abort
.text:0000000000005C9C ; ---------------------------------------------------------------------------
.text:0000000000005C9C
.text:0000000000005C9C loc_5C9C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000005C9C                 call    ___stack_chk_fail
.text:0000000000005C9C ; } // starts at 5C10
.text:0000000000005C9C quotearg_n_custom_mem endp
.text:0000000000005C9C
.text:0000000000005C9C ; ---------------------------------------------------------------------------
.text:0000000000005CA1                 align 10h
.text:0000000000005CB0
.text:0000000000005CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CB0
.text:0000000000005CB0
.text:0000000000005CB0                 public quotearg_n_custom
.text:0000000000005CB0 quotearg_n_custom proc near
.text:0000000000005CB0 ; __unwind {
.text:0000000000005CB0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005CB7                 jmp     quotearg_n_custom_mem
.text:0000000000005CB7 ; } // starts at 5CB0
.text:0000000000005CB7 quotearg_n_custom endp
.text:0000000000005CB7
.text:0000000000005CB7 ; ---------------------------------------------------------------------------
.text:0000000000005CBC                 align 20h
.text:0000000000005CC0
.text:0000000000005CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CC0
.text:0000000000005CC0
.text:0000000000005CC0                 public quotearg_custom
.text:0000000000005CC0 quotearg_custom proc near
.text:0000000000005CC0 ; __unwind {
.text:0000000000005CC0                 mov     rcx, rdx
.text:0000000000005CC3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005CCA                 mov     rdx, rsi
.text:0000000000005CCD                 mov     rsi, rdi
.text:0000000000005CD0                 xor     edi, edi
.text:0000000000005CD2                 jmp     quotearg_n_custom_mem
.text:0000000000005CD2 ; } // starts at 5CC0
.text:0000000000005CD2 quotearg_custom endp
.text:0000000000005CD2
.text:0000000000005CD2 ; ---------------------------------------------------------------------------
.text:0000000000005CD7                 align 20h
.text:0000000000005CE0
.text:0000000000005CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CE0
.text:0000000000005CE0
.text:0000000000005CE0                 public quotearg_custom_mem
.text:0000000000005CE0 quotearg_custom_mem proc near
.text:0000000000005CE0 ; __unwind {
.text:0000000000005CE0                 mov     r8, rcx
.text:0000000000005CE3                 mov     rcx, rdx
.text:0000000000005CE6                 mov     rdx, rsi
.text:0000000000005CE9                 mov     rsi, rdi
.text:0000000000005CEC                 xor     edi, edi
.text:0000000000005CEE                 jmp     quotearg_n_custom_mem
.text:0000000000005CEE ; } // starts at 5CE0
.text:0000000000005CEE quotearg_custom_mem endp
.text:0000000000005CEE
.text:0000000000005CEE ; ---------------------------------------------------------------------------
.text:0000000000005CF3                 align 20h
.text:0000000000005D00
.text:0000000000005D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D00
.text:0000000000005D00
.text:0000000000005D00                 public quote_n_mem
.text:0000000000005D00 quote_n_mem     proc near
.text:0000000000005D00 ; __unwind {
.text:0000000000005D00                 lea     rcx, quote_quoting_options
.text:0000000000005D07                 jmp     quotearg_n_options
.text:0000000000005D07 ; } // starts at 5D00
.text:0000000000005D07 quote_n_mem     endp
.text:0000000000005D07
.text:0000000000005D07 ; ---------------------------------------------------------------------------
.text:0000000000005D0C                 align 10h
.text:0000000000005D10
.text:0000000000005D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D10
.text:0000000000005D10
.text:0000000000005D10                 public quote_mem
.text:0000000000005D10 quote_mem       proc near
.text:0000000000005D10 ; __unwind {
.text:0000000000005D10                 lea     rcx, quote_quoting_options
.text:0000000000005D17                 mov     rdx, rsi
.text:0000000000005D1A                 mov     rsi, rdi
.text:0000000000005D1D                 xor     edi, edi
.text:0000000000005D1F                 jmp     quotearg_n_options
.text:0000000000005D1F ; } // starts at 5D10
.text:0000000000005D1F quote_mem       endp
.text:0000000000005D1F
.text:0000000000005D1F ; ---------------------------------------------------------------------------
.text:0000000000005D24                 align 10h
.text:0000000000005D30
.text:0000000000005D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D30
.text:0000000000005D30
.text:0000000000005D30                 public quote_n
.text:0000000000005D30 quote_n         proc near
.text:0000000000005D30 ; __unwind {
.text:0000000000005D30                 lea     rcx, quote_quoting_options
.text:0000000000005D37                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D3E                 jmp     quotearg_n_options
.text:0000000000005D3E ; } // starts at 5D30
.text:0000000000005D3E quote_n         endp
.text:0000000000005D3E
.text:0000000000005D3E ; ---------------------------------------------------------------------------
.text:0000000000005D43                 align 10h
.text:0000000000005D50
.text:0000000000005D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D50
.text:0000000000005D50
.text:0000000000005D50                 public quote
.text:0000000000005D50 quote           proc near               ; CODE XREF: main+D50↑p
.text:0000000000005D50                                         ; main+E61↑p ...
.text:0000000000005D50 ; __unwind {
.text:0000000000005D50                 lea     rcx, quote_quoting_options
.text:0000000000005D57                 mov     rsi, rdi
.text:0000000000005D5A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D61                 xor     edi, edi
.text:0000000000005D63                 jmp     quotearg_n_options
.text:0000000000005D63 ; } // starts at 5D50
.text:0000000000005D63 quote           endp
.text:0000000000005D63
.text:0000000000005D63 ; ---------------------------------------------------------------------------
.text:0000000000005D68                 align 10h
.text:0000000000005D70
.text:0000000000005D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D70
.text:0000000000005D70
.text:0000000000005D70                 public dup_safer
.text:0000000000005D70 dup_safer       proc near               ; CODE XREF: fopen_safer+32↑p
.text:0000000000005D70 ; __unwind {
.text:0000000000005D70                 mov     edx, 3
.text:0000000000005D75                 xor     esi, esi
.text:0000000000005D77                 xor     eax, eax
.text:0000000000005D79                 jmp     rpl_fcntl
.text:0000000000005D79 ; } // starts at 5D70
.text:0000000000005D79 dup_safer       endp
.text:0000000000005D79
.text:0000000000005D79 ; ---------------------------------------------------------------------------
.text:0000000000005D7E                 align 20h
.text:0000000000005D80
.text:0000000000005D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D80
.text:0000000000005D80
.text:0000000000005D80 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000005D80                 public version_etc_arn
.text:0000000000005D80 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_61BB↓j
.text:0000000000005D80                                         ; version_etc_va:loc_620B↓p ...
.text:0000000000005D80
.text:0000000000005D80 var_58          = qword ptr -58h
.text:0000000000005D80 var_50          = qword ptr -50h
.text:0000000000005D80 var_48          = qword ptr -48h
.text:0000000000005D80 var_40          = qword ptr -40h
.text:0000000000005D80
.text:0000000000005D80 ; __unwind {
.text:0000000000005D80                 push    r15
.text:0000000000005D82                 push    r14
.text:0000000000005D84                 push    r13
.text:0000000000005D86                 push    r12
.text:0000000000005D88                 mov     r12, r9
.text:0000000000005D8B                 push    rbp
.text:0000000000005D8C                 push    rbx
.text:0000000000005D8D                 mov     rbp, rdi
.text:0000000000005D90                 mov     rbx, r8
.text:0000000000005D93                 sub     rsp, 28h
.text:0000000000005D97                 test    rsi, rsi
.text:0000000000005D9A                 jz      loc_5EB8
.text:0000000000005DA0                 mov     r8, rdx
.text:0000000000005DA3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000005DAA                 mov     r9, rcx
.text:0000000000005DAD                 xor     eax, eax
.text:0000000000005DAF                 mov     rcx, rsi
.text:0000000000005DB2                 mov     esi, 1
.text:0000000000005DB7                 call    ___fprintf_chk
.text:0000000000005DBC
.text:0000000000005DBC loc_5DBC:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000005DBC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000005DC3                 xor     edi, edi        ; domainname
.text:0000000000005DC5                 mov     edx, 5          ; category
.text:0000000000005DCA                 call    _dcgettext
.text:0000000000005DCF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000005DD6                 mov     rcx, rax
.text:0000000000005DD9                 mov     r8d, 7E3h
.text:0000000000005DDF                 mov     esi, 1
.text:0000000000005DE4                 mov     rdi, rbp
.text:0000000000005DE7                 xor     eax, eax
.text:0000000000005DE9                 call    ___fprintf_chk
.text:0000000000005DEE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000005DF5                 xor     edi, edi        ; domainname
.text:0000000000005DF7                 mov     edx, 5          ; category
.text:0000000000005DFC                 call    _dcgettext
.text:0000000000005E01                 mov     rsi, rbp        ; stream
.text:0000000000005E04                 mov     rdi, rax        ; s
.text:0000000000005E07                 call    _fputs_unlocked
.text:0000000000005E0C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000005E10                 ja      def_5E24        ; jumptable 0000000000005E24 default case
.text:0000000000005E16                 lea     rdx, jpt_5E24
.text:0000000000005E1D                 movsxd  rax, ds:(jpt_5E24 - 8784h)[rdx+r12*4]
.text:0000000000005E21                 add     rax, rdx
.text:0000000000005E24                 jmp     rax             ; switch jump
.text:0000000000005E24 ; ---------------------------------------------------------------------------
.text:0000000000005E26                 align 10h
.text:0000000000005E30
.text:0000000000005E30 loc_5E30:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005E30                                         ; DATA XREF: .rodata:jpt_5E24↓o
.text:0000000000005E30                 mov     r9, [rbx+38h]   ; jumptable 0000000000005E24 case 8
.text:0000000000005E34                 mov     rax, [rbx+10h]
.text:0000000000005E38                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000005E3F                 mov     r8, [rbx+8]
.text:0000000000005E43                 mov     edx, 5          ; category
.text:0000000000005E48                 xor     edi, edi        ; domainname
.text:0000000000005E4A                 mov     r13, [rbx+30h]
.text:0000000000005E4E                 mov     r12, [rbx+28h]
.text:0000000000005E52                 mov     [rsp+58h+var_48], r9
.text:0000000000005E57                 mov     r15, [rbx+20h]
.text:0000000000005E5B                 mov     r14, [rbx+18h]
.text:0000000000005E5F                 mov     [rsp+58h+var_58], rax
.text:0000000000005E63                 mov     [rsp+58h+var_50], r8
.text:0000000000005E68                 mov     rbx, [rbx]
.text:0000000000005E6B                 call    _dcgettext
.text:0000000000005E70                 sub     rsp, 8
.text:0000000000005E74
.text:0000000000005E74 loc_5E74:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000005E74                 mov     r9, [rsp+60h+var_48]
.text:0000000000005E79                 mov     rdx, rax
.text:0000000000005E7C                 mov     rcx, rbx
.text:0000000000005E7F                 mov     esi, 1
.text:0000000000005E84                 mov     rdi, rbp
.text:0000000000005E87                 xor     eax, eax
.text:0000000000005E89                 push    r9
.text:0000000000005E8B                 push    r13
.text:0000000000005E8D                 push    r12
.text:0000000000005E8F                 push    r15
.text:0000000000005E91                 push    r14
.text:0000000000005E93                 mov     r9, [rsp+88h+var_58]
.text:0000000000005E98                 mov     r8, [rsp+88h+var_50]
.text:0000000000005E9D                 call    ___fprintf_chk
.text:0000000000005EA2                 add     rsp, 30h
.text:0000000000005EA6
.text:0000000000005EA6 loc_5EA6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005EA6                                         ; DATA XREF: .rodata:jpt_5E24↓o
.text:0000000000005EA6                 add     rsp, 28h        ; jumptable 0000000000005E24 case 0
.text:0000000000005EAA                 pop     rbx
.text:0000000000005EAB                 pop     rbp
.text:0000000000005EAC                 pop     r12
.text:0000000000005EAE                 pop     r13
.text:0000000000005EB0                 pop     r14
.text:0000000000005EB2                 pop     r15
.text:0000000000005EB4                 retn
.text:0000000000005EB4 ; ---------------------------------------------------------------------------
.text:0000000000005EB5                 align 8
.text:0000000000005EB8
.text:0000000000005EB8 loc_5EB8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000005EB8                 mov     r8, rcx
.text:0000000000005EBB                 mov     rcx, rdx
.text:0000000000005EBE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000005EC5                 mov     esi, 1
.text:0000000000005ECA                 xor     eax, eax
.text:0000000000005ECC                 call    ___fprintf_chk
.text:0000000000005ED1                 jmp     loc_5DBC
.text:0000000000005ED1 ; ---------------------------------------------------------------------------
.text:0000000000005ED6                 align 20h
.text:0000000000005EE0
.text:0000000000005EE0 loc_5EE0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005EE0                                         ; DATA XREF: .rodata:jpt_5E24↓o
.text:0000000000005EE0                 mov     r10, [rbx+40h]  ; jumptable 0000000000005E24 case 9
.text:0000000000005EE4                 mov     r9, [rbx+38h]
.text:0000000000005EE8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000005EEF                 mov     rax, [rbx+10h]
.text:0000000000005EF3                 mov     r8, [rbx+8]
.text:0000000000005EF7                 mov     edx, 5          ; category
.text:0000000000005EFC                 mov     r13, [rbx+30h]
.text:0000000000005F00                 mov     r12, [rbx+28h]
.text:0000000000005F04                 mov     r15, [rbx+20h]
.text:0000000000005F08                 mov     r14, [rbx+18h]
.text:0000000000005F0C                 mov     rbx, [rbx]
.text:0000000000005F0F                 mov     [rsp+58h+var_40], r10
.text:0000000000005F14                 mov     [rsp+58h+var_48], r9
.text:0000000000005F19                 mov     [rsp+58h+var_58], rax
.text:0000000000005F1D                 mov     [rsp+58h+var_50], r8
.text:0000000000005F22
.text:0000000000005F22 loc_5F22:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000005F22                 xor     edi, edi        ; domainname
.text:0000000000005F24                 call    _dcgettext
.text:0000000000005F29                 mov     r10, [rsp+58h+var_40]
.text:0000000000005F2E                 push    r10
.text:0000000000005F30                 jmp     loc_5E74
.text:0000000000005F30 ; ---------------------------------------------------------------------------
.text:0000000000005F35                 align 8
.text:0000000000005F38
.text:0000000000005F38 loc_5F38:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005F38                                         ; DATA XREF: .rodata:jpt_5E24↓o
.text:0000000000005F38                 mov     rbx, [rbx]      ; jumptable 0000000000005E24 case 1
.text:0000000000005F3B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000005F42                 mov     edx, 5          ; category
.text:0000000000005F47                 xor     edi, edi        ; domainname
.text:0000000000005F49                 call    _dcgettext
.text:0000000000005F4E                 add     rsp, 28h
.text:0000000000005F52                 mov     rcx, rbx
.text:0000000000005F55                 mov     rdi, rbp
.text:0000000000005F58                 pop     rbx
.text:0000000000005F59                 pop     rbp
.text:0000000000005F5A                 pop     r12
.text:0000000000005F5C                 pop     r13
.text:0000000000005F5E                 pop     r14
.text:0000000000005F60                 pop     r15
.text:0000000000005F62                 mov     rdx, rax
.text:0000000000005F65                 mov     esi, 1
.text:0000000000005F6A                 xor     eax, eax
.text:0000000000005F6C                 jmp     ___fprintf_chk
.text:0000000000005F6C ; ---------------------------------------------------------------------------
.text:0000000000005F71                 align 8
.text:0000000000005F78
.text:0000000000005F78 loc_5F78:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005F78                                         ; DATA XREF: .rodata:jpt_5E24↓o
.text:0000000000005F78                 mov     r12, [rbx+8]    ; jumptable 0000000000005E24 case 2
.text:0000000000005F7C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000005F83                 mov     rbx, [rbx]
.text:0000000000005F86                 mov     edx, 5          ; category
.text:0000000000005F8B                 xor     edi, edi        ; domainname
.text:0000000000005F8D                 call    _dcgettext
.text:0000000000005F92                 add     rsp, 28h
.text:0000000000005F96                 mov     r8, r12
.text:0000000000005F99                 mov     rcx, rbx
.text:0000000000005F9C                 mov     rdi, rbp
.text:0000000000005F9F                 mov     rdx, rax
.text:0000000000005FA2                 mov     esi, 1
.text:0000000000005FA7                 pop     rbx
.text:0000000000005FA8                 pop     rbp
.text:0000000000005FA9                 pop     r12
.text:0000000000005FAB                 pop     r13
.text:0000000000005FAD                 pop     r14
.text:0000000000005FAF                 pop     r15
.text:0000000000005FB1                 xor     eax, eax
.text:0000000000005FB3                 jmp     ___fprintf_chk
.text:0000000000005FB3 ; ---------------------------------------------------------------------------
.text:0000000000005FB8                 align 20h
.text:0000000000005FC0
.text:0000000000005FC0 loc_5FC0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005FC0                                         ; DATA XREF: .rodata:jpt_5E24↓o
.text:0000000000005FC0                 mov     r13, [rbx+10h]  ; jumptable 0000000000005E24 case 3
.text:0000000000005FC4                 mov     r12, [rbx+8]
.text:0000000000005FC8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000005FCF                 mov     rbx, [rbx]
.text:0000000000005FD2                 mov     edx, 5          ; category
.text:0000000000005FD7                 xor     edi, edi        ; domainname
.text:0000000000005FD9                 call    _dcgettext
.text:0000000000005FDE                 add     rsp, 28h
.text:0000000000005FE2                 mov     r9, r13
.text:0000000000005FE5                 mov     r8, r12
.text:0000000000005FE8                 mov     rcx, rbx
.text:0000000000005FEB                 mov     rdi, rbp
.text:0000000000005FEE                 mov     rdx, rax
.text:0000000000005FF1                 pop     rbx
.text:0000000000005FF2                 pop     rbp
.text:0000000000005FF3                 pop     r12
.text:0000000000005FF5                 pop     r13
.text:0000000000005FF7                 pop     r14
.text:0000000000005FF9                 pop     r15
.text:0000000000005FFB                 mov     esi, 1
.text:0000000000006000                 xor     eax, eax
.text:0000000000006002                 jmp     ___fprintf_chk
.text:0000000000006002 ; ---------------------------------------------------------------------------
.text:0000000000006007                 align 10h
.text:0000000000006010
.text:0000000000006010 loc_6010:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006010                                         ; DATA XREF: .rodata:jpt_5E24↓o
.text:0000000000006010                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000005E24 case 4
.text:0000000000006017                 mov     edx, 5          ; category
.text:000000000000601C                 xor     edi, edi        ; domainname
.text:000000000000601E                 mov     r14, [rbx+18h]
.text:0000000000006022                 mov     r13, [rbx+10h]
.text:0000000000006026                 mov     r12, [rbx+8]
.text:000000000000602A                 mov     rbx, [rbx]
.text:000000000000602D                 call    _dcgettext
.text:0000000000006032                 sub     rsp, 8
.text:0000000000006036
.text:0000000000006036 loc_6036:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000006036                 push    r14
.text:0000000000006038                 mov     rdx, rax
.text:000000000000603B                 mov     r9, r13
.text:000000000000603E                 mov     r8, r12
.text:0000000000006041                 mov     rcx, rbx
.text:0000000000006044                 mov     rdi, rbp
.text:0000000000006047                 mov     esi, 1
.text:000000000000604C                 xor     eax, eax
.text:000000000000604E                 call    ___fprintf_chk
.text:0000000000006053                 pop     rax
.text:0000000000006054                 pop     rdx
.text:0000000000006055                 add     rsp, 28h
.text:0000000000006059                 pop     rbx
.text:000000000000605A                 pop     rbp
.text:000000000000605B                 pop     r12
.text:000000000000605D                 pop     r13
.text:000000000000605F                 pop     r14
.text:0000000000006061                 pop     r15
.text:0000000000006063                 retn
.text:0000000000006063 ; ---------------------------------------------------------------------------
.text:0000000000006064                 align 8
.text:0000000000006068
.text:0000000000006068 loc_6068:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006068                                         ; DATA XREF: .rodata:jpt_5E24↓o
.text:0000000000006068                 mov     r15, [rbx+20h]  ; jumptable 0000000000005E24 case 5
.text:000000000000606C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000006073                 mov     edx, 5          ; category
.text:0000000000006078                 xor     edi, edi        ; domainname
.text:000000000000607A                 mov     r14, [rbx+18h]
.text:000000000000607E                 mov     r13, [rbx+10h]
.text:0000000000006082                 mov     r12, [rbx+8]
.text:0000000000006086                 mov     rbx, [rbx]
.text:0000000000006089                 call    _dcgettext
.text:000000000000608E                 push    r15
.text:0000000000006090                 jmp     short loc_6036
.text:0000000000006090 ; ---------------------------------------------------------------------------
.text:0000000000006092                 align 8
.text:0000000000006098
.text:0000000000006098 loc_6098:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006098                                         ; DATA XREF: .rodata:jpt_5E24↓o
.text:0000000000006098                 mov     r8, [rbx+8]     ; jumptable 0000000000005E24 case 6
.text:000000000000609C                 mov     r12, [rbx+28h]
.text:00000000000060A0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:00000000000060A7                 mov     r15, [rbx+20h]
.text:00000000000060AB                 mov     r14, [rbx+18h]
.text:00000000000060AF                 mov     edx, 5          ; category
.text:00000000000060B4                 mov     r13, [rbx+10h]
.text:00000000000060B8                 xor     edi, edi        ; domainname
.text:00000000000060BA                 mov     rbx, [rbx]
.text:00000000000060BD                 mov     [rsp+58h+var_58], r8
.text:00000000000060C1                 call    _dcgettext
.text:00000000000060C6                 sub     rsp, 8
.text:00000000000060CA                 mov     r9, r13
.text:00000000000060CD                 push    r12
.text:00000000000060CF                 push    r15
.text:00000000000060D1                 push    r14
.text:00000000000060D3
.text:00000000000060D3 loc_60D3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000060D3                 mov     r8, [rsp+78h+var_58]
.text:00000000000060D8                 mov     rcx, rbx
.text:00000000000060DB                 mov     rdx, rax
.text:00000000000060DE                 mov     rdi, rbp
.text:00000000000060E1                 mov     esi, 1
.text:00000000000060E6                 xor     eax, eax
.text:00000000000060E8                 call    ___fprintf_chk
.text:00000000000060ED                 add     rsp, 20h
.text:00000000000060F1                 add     rsp, 28h
.text:00000000000060F5                 pop     rbx
.text:00000000000060F6                 pop     rbp
.text:00000000000060F7                 pop     r12
.text:00000000000060F9                 pop     r13
.text:00000000000060FB                 pop     r14
.text:00000000000060FD                 pop     r15
.text:00000000000060FF                 retn
.text:0000000000006100 ; ---------------------------------------------------------------------------
.text:0000000000006100
.text:0000000000006100 loc_6100:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006100                                         ; DATA XREF: .rodata:jpt_5E24↓o
.text:0000000000006100                 mov     r9, [rbx+10h]   ; jumptable 0000000000005E24 case 7
.text:0000000000006104                 mov     r13, [rbx+30h]
.text:0000000000006108                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000610F                 mov     r12, [rbx+28h]
.text:0000000000006113                 mov     r15, [rbx+20h]
.text:0000000000006117                 mov     edx, 5          ; category
.text:000000000000611C                 mov     r14, [rbx+18h]
.text:0000000000006120                 mov     r8, [rbx+8]
.text:0000000000006124                 xor     edi, edi        ; domainname
.text:0000000000006126                 mov     [rsp+58h+var_50], r9
.text:000000000000612B                 mov     rbx, [rbx]
.text:000000000000612E                 mov     [rsp+58h+var_58], r8
.text:0000000000006132                 call    _dcgettext
.text:0000000000006137                 push    r13
.text:0000000000006139                 push    r12
.text:000000000000613B                 push    r15
.text:000000000000613D                 push    r14
.text:000000000000613F                 mov     r9, [rsp+78h+var_50]
.text:0000000000006144                 jmp     short loc_60D3
.text:0000000000006144 ; ---------------------------------------------------------------------------
.text:0000000000006146                 align 10h
.text:0000000000006150
.text:0000000000006150 def_5E24:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000006150                 mov     r10, [rbx+40h]  ; jumptable 0000000000005E24 default case
.text:0000000000006154                 mov     r9, [rbx+38h]
.text:0000000000006158                 mov     edx, 5
.text:000000000000615D                 mov     rax, [rbx+10h]
.text:0000000000006161                 mov     r8, [rbx+8]
.text:0000000000006165                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000616C                 mov     r13, [rbx+30h]
.text:0000000000006170                 mov     r12, [rbx+28h]
.text:0000000000006174                 mov     r15, [rbx+20h]
.text:0000000000006178                 mov     r14, [rbx+18h]
.text:000000000000617C                 mov     [rsp+58h+var_40], r10
.text:0000000000006181                 mov     [rsp+58h+var_48], r9
.text:0000000000006186                 mov     [rsp+58h+var_58], rax
.text:000000000000618A                 mov     [rsp+58h+var_50], r8
.text:000000000000618F                 mov     rbx, [rbx]
.text:0000000000006192                 jmp     loc_5F22
.text:0000000000006192 ; } // starts at 5D80
.text:0000000000006192 version_etc_arn endp
.text:0000000000006192
.text:0000000000006192 ; ---------------------------------------------------------------------------
.text:0000000000006197                 align 20h
.text:00000000000061A0
.text:00000000000061A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061A0
.text:00000000000061A0 ; Attributes: info_from_lumina
.text:00000000000061A0
.text:00000000000061A0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:00000000000061A0                 public version_etc_ar
.text:00000000000061A0 version_etc_ar  proc near
.text:00000000000061A0 ; __unwind {
.text:00000000000061A0                 xor     r9d, r9d
.text:00000000000061A3                 cmp     qword ptr [r8], 0
.text:00000000000061A7                 jz      short loc_61BB
.text:00000000000061A9                 nop     dword ptr [rax+00000000h]
.text:00000000000061B0
.text:00000000000061B0 loc_61B0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000061B0                 add     r9, 1
.text:00000000000061B4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000061B9                 jnz     short loc_61B0
.text:00000000000061BB
.text:00000000000061BB loc_61BB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000061BB                 jmp     version_etc_arn
.text:00000000000061BB ; } // starts at 61A0
.text:00000000000061BB version_etc_ar  endp
.text:00000000000061BB
.text:00000000000061C0
.text:00000000000061C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061C0
.text:00000000000061C0 ; Attributes: info_from_lumina
.text:00000000000061C0
.text:00000000000061C0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000061C0                 public version_etc_va
.text:00000000000061C0 version_etc_va  proc near
.text:00000000000061C0
.text:00000000000061C0 authtab         = qword ptr -68h
.text:00000000000061C0 var_10          = qword ptr -10h
.text:00000000000061C0
.text:00000000000061C0 ; __unwind {
.text:00000000000061C0                 sub     rsp, 68h
.text:00000000000061C4                 mov     r10, r8
.text:00000000000061C7                 xor     r9d, r9d
.text:00000000000061CA                 mov     rax, fs:28h
.text:00000000000061D3                 mov     [rsp+68h+var_10], rax
.text:00000000000061D8                 xor     eax, eax
.text:00000000000061DA                 mov     r8, rsp
.text:00000000000061DD                 nop     dword ptr [rax]
.text:00000000000061E0
.text:00000000000061E0 loc_61E0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000061E0                 mov     eax, [r10]
.text:00000000000061E3                 cmp     eax, 2Fh ; '/'
.text:00000000000061E6                 ja      short loc_622A
.text:00000000000061E8                 mov     r11d, eax
.text:00000000000061EB                 add     r11, [r10+10h]
.text:00000000000061EF                 add     eax, 8
.text:00000000000061F2                 mov     [r10], eax
.text:00000000000061F5
.text:00000000000061F5 loc_61F5:                               ; CODE XREF: version_etc_va+76↓j
.text:00000000000061F5                 mov     rax, [r11]
.text:00000000000061F8                 test    rax, rax
.text:00000000000061FB                 mov     [r8+r9*8], rax
.text:00000000000061FF                 jz      short loc_620B
.text:0000000000006201                 add     r9, 1
.text:0000000000006205                 cmp     r9, 0Ah
.text:0000000000006209                 jnz     short loc_61E0
.text:000000000000620B
.text:000000000000620B loc_620B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000620B                 call    version_etc_arn
.text:0000000000006210                 mov     rax, [rsp+68h+var_10]
.text:0000000000006215                 xor     rax, fs:28h
.text:000000000000621E                 jnz     short loc_6225
.text:0000000000006220                 add     rsp, 68h
.text:0000000000006224                 retn
.text:0000000000006225 ; ---------------------------------------------------------------------------
.text:0000000000006225
.text:0000000000006225 loc_6225:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000006225                 call    ___stack_chk_fail
.text:000000000000622A ; ---------------------------------------------------------------------------
.text:000000000000622A
.text:000000000000622A loc_622A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000622A                 mov     r11, [r10+8]
.text:000000000000622E                 lea     rax, [r11+8]
.text:0000000000006232                 mov     [r10+8], rax
.text:0000000000006236                 jmp     short loc_61F5
.text:0000000000006236 ; } // starts at 61C0
.text:0000000000006236 version_etc_va  endp
.text:0000000000006236
.text:0000000000006236 ; ---------------------------------------------------------------------------
.text:0000000000006238                 align 20h
.text:0000000000006240
.text:0000000000006240 ; =============== S U B R O U T I N E =======================================
.text:0000000000006240
.text:0000000000006240 ; Attributes: info_from_lumina
.text:0000000000006240
.text:0000000000006240 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000006240                 public version_etc
.text:0000000000006240 version_etc     proc near               ; CODE XREF: main+287↑p
.text:0000000000006240
.text:0000000000006240 var_C0          = dword ptr -0C0h
.text:0000000000006240 var_B8          = qword ptr -0B8h
.text:0000000000006240 var_B0          = qword ptr -0B0h
.text:0000000000006240 var_A8          = byte ptr -0A8h
.text:0000000000006240 var_50          = qword ptr -50h
.text:0000000000006240 var_48          = byte ptr -48h
.text:0000000000006240 var_28          = qword ptr -28h
.text:0000000000006240 var_20          = qword ptr -20h
.text:0000000000006240 arg_0           = byte ptr  8
.text:0000000000006240
.text:0000000000006240 ; __unwind {
.text:0000000000006240                 push    rbp
.text:0000000000006241                 push    rbx
.text:0000000000006242                 mov     r10d, 20h ; ' '
.text:0000000000006248                 xor     r11d, r11d
.text:000000000000624B                 sub     rsp, 0B8h
.text:0000000000006252                 mov     rax, fs:28h
.text:000000000000625B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000006260                 xor     eax, eax
.text:0000000000006262                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000626A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000006272                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000627A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000627F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000006287                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000628F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000006294                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000629C                 xor     r9d, r9d
.text:000000000000629F                 mov     [rsp+0C8h+var_B0], rax
.text:00000000000062A4                 mov     rbp, rax
.text:00000000000062A7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000062B0
.text:00000000000062B0 loc_62B0:                               ; CODE XREF: version_etc+9A↓j
.text:00000000000062B0                 cmp     r10d, 2Fh ; '/'
.text:00000000000062B4                 ja      short loc_630C
.text:00000000000062B6                 mov     eax, r10d
.text:00000000000062B9                 mov     r11d, 1
.text:00000000000062BF                 add     r10d, 8
.text:00000000000062C3                 add     rax, rbp
.text:00000000000062C6
.text:00000000000062C6 loc_62C6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000062C6                 mov     rax, [rax]
.text:00000000000062C9                 test    rax, rax
.text:00000000000062CC                 mov     [r8+r9*8], rax
.text:00000000000062D0                 jz      short loc_62DC
.text:00000000000062D2                 add     r9, 1
.text:00000000000062D6                 cmp     r9, 0Ah
.text:00000000000062DA                 jnz     short loc_62B0
.text:00000000000062DC
.text:00000000000062DC loc_62DC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000062DC                 test    r11b, r11b
.text:00000000000062DF                 jnz     short loc_6305
.text:00000000000062E1
.text:00000000000062E1 loc_62E1:                               ; CODE XREF: version_etc+CA↓j
.text:00000000000062E1                 call    version_etc_arn
.text:00000000000062E6                 mov     rax, [rsp+0C8h+var_50]
.text:00000000000062EB                 xor     rax, fs:28h
.text:00000000000062F4                 jnz     short loc_6300
.text:00000000000062F6                 add     rsp, 0B8h
.text:00000000000062FD                 pop     rbx
.text:00000000000062FE                 pop     rbp
.text:00000000000062FF                 retn
.text:0000000000006300 ; ---------------------------------------------------------------------------
.text:0000000000006300
.text:0000000000006300 loc_6300:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000006300                 call    ___stack_chk_fail
.text:0000000000006305 ; ---------------------------------------------------------------------------
.text:0000000000006305
.text:0000000000006305 loc_6305:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000006305                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000630A                 jmp     short loc_62E1
.text:000000000000630C ; ---------------------------------------------------------------------------
.text:000000000000630C
.text:000000000000630C loc_630C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000630C                 mov     rax, rbx
.text:000000000000630F                 add     rbx, 8
.text:0000000000006313                 jmp     short loc_62C6
.text:0000000000006313 ; } // starts at 6240
.text:0000000000006313 version_etc     endp
.text:0000000000006313
.text:0000000000006313 ; ---------------------------------------------------------------------------
.text:0000000000006315                 align 20h
.text:0000000000006320
.text:0000000000006320 ; =============== S U B R O U T I N E =======================================
.text:0000000000006320
.text:0000000000006320 ; Attributes: info_from_lumina
.text:0000000000006320
.text:0000000000006320 ; void __cdecl emit_bug_reporting_address()
.text:0000000000006320                 public emit_bug_reporting_address
.text:0000000000006320 emit_bug_reporting_address proc near
.text:0000000000006320 ; __unwind {
.text:0000000000006320                 push    rbx
.text:0000000000006321                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000006328                 mov     edx, 5          ; category
.text:000000000000632D                 xor     edi, edi        ; domainname
.text:000000000000632F                 call    _dcgettext
.text:0000000000006334                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000633B                 mov     rsi, rax
.text:000000000000633E                 mov     edi, 1
.text:0000000000006343                 xor     eax, eax
.text:0000000000006345                 call    ___printf_chk
.text:000000000000634A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000006351                 mov     edx, 5          ; category
.text:0000000000006356                 xor     edi, edi        ; domainname
.text:0000000000006358                 call    _dcgettext
.text:000000000000635D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000006364                 lea     rdx, unk_7E17
.text:000000000000636B                 mov     rsi, rax
.text:000000000000636E                 mov     edi, 1
.text:0000000000006373                 xor     eax, eax
.text:0000000000006375                 call    ___printf_chk
.text:000000000000637A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000006381                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000006388                 xor     edi, edi        ; domainname
.text:000000000000638A                 mov     edx, 5          ; category
.text:000000000000638F                 call    _dcgettext
.text:0000000000006394                 mov     rsi, rbx        ; stream
.text:0000000000006397                 mov     rdi, rax        ; s
.text:000000000000639A                 pop     rbx
.text:000000000000639B                 jmp     _fputs_unlocked
.text:000000000000639B ; } // starts at 6320
.text:000000000000639B emit_bug_reporting_address endp
.text:000000000000639B
.text:00000000000063A0
.text:00000000000063A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000063A0
.text:00000000000063A0
.text:00000000000063A0                 public xmalloc
.text:00000000000063A0 xmalloc         proc near               ; CODE XREF: add_field_list+3C↑p
.text:00000000000063A0                                         ; quotearg_n_options+127↑p ...
.text:00000000000063A0 ; __unwind {
.text:00000000000063A0                 push    rbx
.text:00000000000063A1                 mov     rbx, rdi
.text:00000000000063A4                 call    _malloc
.text:00000000000063A9                 test    rax, rax
.text:00000000000063AC                 jnz     short loc_63B3
.text:00000000000063AE                 test    rbx, rbx
.text:00000000000063B1                 jnz     short loc_63B5
.text:00000000000063B3
.text:00000000000063B3 loc_63B3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000063B3                 pop     rbx
.text:00000000000063B4                 retn
.text:00000000000063B5 ; ---------------------------------------------------------------------------
.text:00000000000063B5
.text:00000000000063B5 loc_63B5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000063B5                 call    xalloc_die
.text:00000000000063B5 ; } // starts at 63A0
.text:00000000000063B5 xmalloc         endp
.text:00000000000063B5
.text:00000000000063B5 ; ---------------------------------------------------------------------------
.text:00000000000063BA                 align 20h
.text:00000000000063C0
.text:00000000000063C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000063C0
.text:00000000000063C0 ; Attributes: info_from_lumina
.text:00000000000063C0
.text:00000000000063C0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000063C0                 public xnmalloc
.text:00000000000063C0 xnmalloc        proc near
.text:00000000000063C0 ; __unwind {
.text:00000000000063C0                 mov     rax, rdi
.text:00000000000063C3                 mul     rsi
.text:00000000000063C6                 mov     rdi, rax
.text:00000000000063C9                 seto    al
.text:00000000000063CC                 test    rdi, rdi
.text:00000000000063CF                 js      short loc_63DB
.text:00000000000063D1                 movzx   eax, al
.text:00000000000063D4                 test    rax, rax
.text:00000000000063D7                 jnz     short loc_63DB
.text:00000000000063D9                 jmp     short xmalloc
.text:00000000000063DB ; ---------------------------------------------------------------------------
.text:00000000000063DB
.text:00000000000063DB loc_63DB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000063DB                                         ; xnmalloc+17↑j
.text:00000000000063DB                 sub     rsp, 8
.text:00000000000063DF                 call    xalloc_die
.text:00000000000063DF ; } // starts at 63C0
.text:00000000000063DF xnmalloc        endp
.text:00000000000063DF
.text:00000000000063DF ; ---------------------------------------------------------------------------
.text:00000000000063E4                 align 10h
.text:00000000000063F0
.text:00000000000063F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000063F0
.text:00000000000063F0
.text:00000000000063F0                 public xcharalloc
.text:00000000000063F0 xcharalloc      proc near
.text:00000000000063F0 ; __unwind {
.text:00000000000063F0                 jmp     short xmalloc
.text:00000000000063F0 ; } // starts at 63F0
.text:00000000000063F0 xcharalloc      endp
.text:00000000000063F0
.text:00000000000063F0 ; ---------------------------------------------------------------------------
.text:00000000000063F2                 align 20h
.text:0000000000006400
.text:0000000000006400 ; =============== S U B R O U T I N E =======================================
.text:0000000000006400
.text:0000000000006400 ; Attributes: info_from_lumina
.text:0000000000006400
.text:0000000000006400 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000006400                 public xrealloc
.text:0000000000006400 xrealloc        proc near               ; CODE XREF: extract_field+67↑p
.text:0000000000006400                                         ; getseq+67↑p ...
.text:0000000000006400 ; __unwind {
.text:0000000000006400                 test    rsi, rsi
.text:0000000000006403                 push    rbx
.text:0000000000006404                 mov     rbx, rsi
.text:0000000000006407                 jnz     short loc_640E
.text:0000000000006409                 test    rdi, rdi
.text:000000000000640C                 jnz     short loc_6428
.text:000000000000640E
.text:000000000000640E loc_640E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000640E                 mov     rsi, rbx        ; size
.text:0000000000006411                 call    _realloc
.text:0000000000006416                 test    rax, rax
.text:0000000000006419                 jnz     short loc_6420
.text:000000000000641B                 test    rbx, rbx
.text:000000000000641E                 jnz     short loc_6431
.text:0000000000006420
.text:0000000000006420 loc_6420:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000006420                 pop     rbx
.text:0000000000006421                 retn
.text:0000000000006421 ; ---------------------------------------------------------------------------
.text:0000000000006422                 align 8
.text:0000000000006428
.text:0000000000006428 loc_6428:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000006428                 call    _free
.text:000000000000642D                 xor     eax, eax
.text:000000000000642F                 pop     rbx
.text:0000000000006430                 retn
.text:0000000000006431 ; ---------------------------------------------------------------------------
.text:0000000000006431
.text:0000000000006431 loc_6431:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000006431                 call    xalloc_die
.text:0000000000006431 ; } // starts at 6400
.text:0000000000006431 xrealloc        endp
.text:0000000000006431
.text:0000000000006431 ; ---------------------------------------------------------------------------
.text:0000000000006436                 align 20h
.text:0000000000006440
.text:0000000000006440 ; =============== S U B R O U T I N E =======================================
.text:0000000000006440
.text:0000000000006440 ; Attributes: info_from_lumina
.text:0000000000006440
.text:0000000000006440 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000006440                 public xnrealloc
.text:0000000000006440 xnrealloc       proc near
.text:0000000000006440 ; __unwind {
.text:0000000000006440                 mov     rax, rsi
.text:0000000000006443                 mul     rdx
.text:0000000000006446                 mov     rsi, rax
.text:0000000000006449                 seto    al
.text:000000000000644C                 test    rsi, rsi
.text:000000000000644F                 js      short loc_645B
.text:0000000000006451                 movzx   eax, al
.text:0000000000006454                 test    rax, rax
.text:0000000000006457                 jnz     short loc_645B
.text:0000000000006459                 jmp     short xrealloc
.text:000000000000645B ; ---------------------------------------------------------------------------
.text:000000000000645B
.text:000000000000645B loc_645B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000645B                                         ; xnrealloc+17↑j
.text:000000000000645B                 sub     rsp, 8
.text:000000000000645F                 call    xalloc_die
.text:000000000000645F ; } // starts at 6440
.text:000000000000645F xnrealloc       endp
.text:000000000000645F
.text:000000000000645F ; ---------------------------------------------------------------------------
.text:0000000000006464                 align 10h
.text:0000000000006470
.text:0000000000006470 ; =============== S U B R O U T I N E =======================================
.text:0000000000006470
.text:0000000000006470 ; Attributes: info_from_lumina
.text:0000000000006470
.text:0000000000006470 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000006470                 public x2nrealloc
.text:0000000000006470 x2nrealloc      proc near
.text:0000000000006470 ; __unwind {
.text:0000000000006470                 test    rdi, rdi
.text:0000000000006473                 mov     r9, rdx
.text:0000000000006476                 mov     rcx, [rsi]
.text:0000000000006479                 jz      short loc_64B0
.text:000000000000647B                 xor     edx, edx
.text:000000000000647D                 mov     rax, 5555555555555554h
.text:0000000000006487                 div     r9
.text:000000000000648A                 cmp     rax, rcx
.text:000000000000648D                 jbe     short loc_64CB
.text:000000000000648F                 mov     rax, rcx
.text:0000000000006492                 shr     rax, 1
.text:0000000000006495                 lea     rcx, [rax+rcx+1]
.text:000000000000649A
.text:000000000000649A loc_649A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000649A                 mov     [rsi], rcx
.text:000000000000649D                 imul    rcx, r9
.text:00000000000064A1                 mov     rsi, rcx
.text:00000000000064A4                 jmp     xrealloc
.text:00000000000064A4 ; ---------------------------------------------------------------------------
.text:00000000000064A9                 align 10h
.text:00000000000064B0
.text:00000000000064B0 loc_64B0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000064B0                 test    rcx, rcx
.text:00000000000064B3                 jz      short loc_64D8
.text:00000000000064B5
.text:00000000000064B5 loc_64B5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000064B5                 mov     rax, rcx
.text:00000000000064B8                 mul     r9
.text:00000000000064BB                 seto    dl
.text:00000000000064BE                 test    rax, rax
.text:00000000000064C1                 movzx   edx, dl
.text:00000000000064C4                 js      short loc_64CB
.text:00000000000064C6                 test    rdx, rdx
.text:00000000000064C9                 jz      short loc_649A
.text:00000000000064CB
.text:00000000000064CB loc_64CB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000064CB                                         ; x2nrealloc+54↑j
.text:00000000000064CB                 sub     rsp, 8
.text:00000000000064CF                 call    xalloc_die
.text:00000000000064CF ; ---------------------------------------------------------------------------
.text:00000000000064D4                 align 8
.text:00000000000064D8
.text:00000000000064D8 loc_64D8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000064D8                 xor     edx, edx
.text:00000000000064DA                 mov     eax, 80h
.text:00000000000064DF                 xor     r8d, r8d
.text:00000000000064E2                 div     r9
.text:00000000000064E5                 test    rax, rax
.text:00000000000064E8                 setz    r8b
.text:00000000000064EC                 lea     rcx, [r8+rax]
.text:00000000000064F0                 jmp     short loc_64B5
.text:00000000000064F0 ; } // starts at 6470
.text:00000000000064F0 x2nrealloc      endp
.text:00000000000064F0
.text:00000000000064F0 ; ---------------------------------------------------------------------------
.text:00000000000064F2                 align 20h
.text:0000000000006500
.text:0000000000006500 ; =============== S U B R O U T I N E =======================================
.text:0000000000006500
.text:0000000000006500 ; Attributes: info_from_lumina
.text:0000000000006500
.text:0000000000006500 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000006500                 public x2realloc
.text:0000000000006500 x2realloc       proc near               ; CODE XREF: readlinebuffer_delim+6C↑p
.text:0000000000006500 ; __unwind {
.text:0000000000006500                 test    rdi, rdi
.text:0000000000006503                 mov     rax, [rsi]
.text:0000000000006506                 jz      short loc_6530
.text:0000000000006508                 mov     rdx, 5555555555555553h
.text:0000000000006512                 cmp     rax, rdx
.text:0000000000006515                 ja      short loc_6541
.text:0000000000006517                 mov     rdx, rax
.text:000000000000651A                 shr     rdx, 1
.text:000000000000651D                 lea     rax, [rdx+rax+1]
.text:0000000000006522
.text:0000000000006522 loc_6522:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000006522                 mov     [rsi], rax
.text:0000000000006525                 mov     rsi, rax
.text:0000000000006528                 jmp     xrealloc
.text:0000000000006528 ; ---------------------------------------------------------------------------
.text:000000000000652D                 align 10h
.text:0000000000006530
.text:0000000000006530 loc_6530:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000006530                 test    rax, rax
.text:0000000000006533                 mov     edx, 80h
.text:0000000000006538                 cmovz   rax, rdx
.text:000000000000653C                 test    rax, rax
.text:000000000000653F                 jns     short loc_6522
.text:0000000000006541
.text:0000000000006541 loc_6541:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000006541                 sub     rsp, 8
.text:0000000000006545                 call    xalloc_die
.text:0000000000006545 ; } // starts at 6500
.text:0000000000006545 x2realloc       endp
.text:0000000000006545
.text:0000000000006545 ; ---------------------------------------------------------------------------
.text:000000000000654A                 align 10h
.text:0000000000006550
.text:0000000000006550 ; =============== S U B R O U T I N E =======================================
.text:0000000000006550
.text:0000000000006550
.text:0000000000006550 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000006550                 public xzalloc
.text:0000000000006550 xzalloc         proc near
.text:0000000000006550 ; __unwind {
.text:0000000000006550                 push    rbx
.text:0000000000006551                 mov     rbx, rdi
.text:0000000000006554                 call    xmalloc
.text:0000000000006559                 mov     rdx, rbx        ; n
.text:000000000000655C                 xor     esi, esi        ; c
.text:000000000000655E                 mov     rdi, rax        ; s
.text:0000000000006561                 pop     rbx
.text:0000000000006562                 jmp     _memset
.text:0000000000006562 ; } // starts at 6550
.text:0000000000006562 xzalloc         endp
.text:0000000000006562
.text:0000000000006562 ; ---------------------------------------------------------------------------
.text:0000000000006567                 align 10h
.text:0000000000006570
.text:0000000000006570 ; =============== S U B R O U T I N E =======================================
.text:0000000000006570
.text:0000000000006570 ; Attributes: info_from_lumina
.text:0000000000006570
.text:0000000000006570 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000006570                 public xcalloc
.text:0000000000006570 xcalloc         proc near               ; CODE XREF: get_line+338↑p
.text:0000000000006570 ; __unwind {
.text:0000000000006570                 mov     rax, rdi
.text:0000000000006573                 sub     rsp, 8
.text:0000000000006577                 mul     rsi
.text:000000000000657A                 seto    dl
.text:000000000000657D                 test    rax, rax
.text:0000000000006580                 js      short loc_6599
.text:0000000000006582                 movzx   edx, dl
.text:0000000000006585                 test    rdx, rdx
.text:0000000000006588                 jnz     short loc_6599
.text:000000000000658A                 call    _calloc
.text:000000000000658F                 test    rax, rax
.text:0000000000006592                 jz      short loc_6599
.text:0000000000006594                 add     rsp, 8
.text:0000000000006598                 retn
.text:0000000000006599 ; ---------------------------------------------------------------------------
.text:0000000000006599
.text:0000000000006599 loc_6599:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000006599                                         ; xcalloc+18↑j ...
.text:0000000000006599                 call    xalloc_die
.text:0000000000006599 ; } // starts at 6570
.text:0000000000006599 xcalloc         endp
.text:0000000000006599
.text:0000000000006599 ; ---------------------------------------------------------------------------
.text:000000000000659E                 align 20h
.text:00000000000065A0
.text:00000000000065A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000065A0
.text:00000000000065A0 ; Attributes: info_from_lumina
.text:00000000000065A0
.text:00000000000065A0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000065A0                 public xmemdup
.text:00000000000065A0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000065A0                                         ; xstrdup+11↓j
.text:00000000000065A0 ; __unwind {
.text:00000000000065A0                 push    rbp
.text:00000000000065A1                 push    rbx
.text:00000000000065A2                 mov     rbp, rdi
.text:00000000000065A5                 mov     rdi, rsi
.text:00000000000065A8                 mov     rbx, rsi
.text:00000000000065AB                 sub     rsp, 8
.text:00000000000065AF                 call    xmalloc
.text:00000000000065B4                 add     rsp, 8
.text:00000000000065B8                 mov     rdx, rbx        ; n
.text:00000000000065BB                 mov     rsi, rbp        ; src
.text:00000000000065BE                 pop     rbx
.text:00000000000065BF                 pop     rbp
.text:00000000000065C0                 mov     rdi, rax        ; dest
.text:00000000000065C3                 jmp     _memcpy
.text:00000000000065C3 ; } // starts at 65A0
.text:00000000000065C3 xmemdup         endp
.text:00000000000065C3
.text:00000000000065C3 ; ---------------------------------------------------------------------------
.text:00000000000065C8                 align 10h
.text:00000000000065D0
.text:00000000000065D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000065D0
.text:00000000000065D0
.text:00000000000065D0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000065D0                 public xstrdup
.text:00000000000065D0 xstrdup         proc near
.text:00000000000065D0 ; __unwind {
.text:00000000000065D0                 push    rbx
.text:00000000000065D1                 mov     rbx, rdi
.text:00000000000065D4                 call    _strlen
.text:00000000000065D9                 mov     rdi, rbx        ; src
.text:00000000000065DC                 lea     rsi, [rax+1]    ; n
.text:00000000000065E0                 pop     rbx
.text:00000000000065E1                 jmp     short xmemdup
.text:00000000000065E1 ; } // starts at 65D0
.text:00000000000065E1 xstrdup         endp
.text:00000000000065E1
.text:00000000000065E1 ; ---------------------------------------------------------------------------
.text:00000000000065E3                 align 10h
.text:00000000000065F0
.text:00000000000065F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000065F0
.text:00000000000065F0 ; Attributes: noreturn info_from_lumina
.text:00000000000065F0
.text:00000000000065F0 ; void __cdecl xalloc_die()
.text:00000000000065F0                 public xalloc_die
.text:00000000000065F0 xalloc_die      proc near               ; CODE XREF: extract_field:loc_31D5↑p
.text:00000000000065F0                                         ; getseq:loc_36AD↑p ...
.text:00000000000065F0 ; __unwind {
.text:00000000000065F0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000065F7                 sub     rsp, 8
.text:00000000000065FB                 mov     edx, 5          ; category
.text:0000000000006600                 xor     edi, edi        ; domainname
.text:0000000000006602                 call    _dcgettext
.text:0000000000006607                 mov     edi, cs:exit_failure ; status
.text:000000000000660D                 lea     rdx, msgid+16h  ; format
.text:0000000000006614                 mov     rcx, rax
.text:0000000000006617                 xor     esi, esi        ; errnum
.text:0000000000006619                 xor     eax, eax
.text:000000000000661B                 call    _error
.text:0000000000006620                 call    _abort
.text:0000000000006620 ; } // starts at 65F0
.text:0000000000006620 xalloc_die      endp
.text:0000000000006620
.text:0000000000006620 ; ---------------------------------------------------------------------------
.text:0000000000006625                 align 10h
.text:0000000000006630
.text:0000000000006630 ; =============== S U B R O U T I N E =======================================
.text:0000000000006630
.text:0000000000006630
.text:0000000000006630 ; __int64 __fastcall collate_error(int errnum)
.text:0000000000006630 collate_error   proc near               ; CODE XREF: xmemcoll+33↓p
.text:0000000000006630                                         ; xmemcoll0+35↓p
.text:0000000000006630 ; __unwind {
.text:0000000000006630                 push    r14
.text:0000000000006632                 push    r13
.text:0000000000006634                 mov     r14d, edi
.text:0000000000006637                 push    r12
.text:0000000000006639                 push    rbp
.text:000000000000663A                 mov     r12, rdx
.text:000000000000663D                 push    rbx
.text:000000000000663E                 mov     rbx, rsi
.text:0000000000006641                 lea     rsi, aStringComparis ; "string comparison failed"
.text:0000000000006648                 mov     edx, 5          ; category
.text:000000000000664D                 xor     edi, edi        ; domainname
.text:000000000000664F                 mov     r13, r8
.text:0000000000006652                 mov     rbp, rcx
.text:0000000000006655                 call    _dcgettext
.text:000000000000665A                 mov     esi, r14d       ; errnum
.text:000000000000665D                 mov     rdx, rax        ; format
.text:0000000000006660                 xor     edi, edi        ; status
.text:0000000000006662                 xor     eax, eax
.text:0000000000006664                 call    _error
.text:0000000000006669                 lea     rsi, aSetLcAllCToWor ; "Set LC_ALL='C' to work around the probl"...
.text:0000000000006670                 mov     edx, 5          ; category
.text:0000000000006675                 xor     edi, edi        ; domainname
.text:0000000000006677                 call    _dcgettext
.text:000000000000667C                 xor     esi, esi        ; errnum
.text:000000000000667E                 mov     rdx, rax        ; format
.text:0000000000006681                 xor     edi, edi        ; status
.text:0000000000006683                 xor     eax, eax
.text:0000000000006685                 call    _error
.text:000000000000668A                 mov     rcx, r13
.text:000000000000668D                 mov     rdx, rbp
.text:0000000000006690                 mov     esi, 8
.text:0000000000006695                 mov     edi, 1
.text:000000000000669A                 call    quotearg_n_style_mem
.text:000000000000669F                 mov     rcx, r12
.text:00000000000066A2                 mov     rdx, rbx
.text:00000000000066A5                 mov     esi, 8
.text:00000000000066AA                 xor     edi, edi
.text:00000000000066AC                 mov     rbp, rax
.text:00000000000066AF                 call    quotearg_n_style_mem
.text:00000000000066B4                 lea     rsi, aTheStringsComp ; "The strings compared were %s and %s."
.text:00000000000066BB                 mov     rbx, rax
.text:00000000000066BE                 mov     edx, 5          ; category
.text:00000000000066C3                 xor     edi, edi        ; domainname
.text:00000000000066C5                 call    _dcgettext
.text:00000000000066CA                 mov     r8, rbp
.text:00000000000066CD                 mov     rcx, rbx
.text:00000000000066D0                 mov     edi, cs:exit_failure ; status
.text:00000000000066D6                 pop     rbx
.text:00000000000066D7                 pop     rbp
.text:00000000000066D8                 pop     r12
.text:00000000000066DA                 pop     r13
.text:00000000000066DC                 pop     r14
.text:00000000000066DE                 mov     rdx, rax        ; format
.text:00000000000066E1                 xor     esi, esi        ; errnum
.text:00000000000066E3                 xor     eax, eax
.text:00000000000066E5                 jmp     _error
.text:00000000000066E5 ; } // starts at 6630
.text:00000000000066E5 collate_error   endp
.text:00000000000066E5
.text:00000000000066E5 ; ---------------------------------------------------------------------------
.text:00000000000066EA                 align 10h
.text:00000000000066F0
.text:00000000000066F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000066F0
.text:00000000000066F0
.text:00000000000066F0                 public xmemcoll
.text:00000000000066F0 xmemcoll        proc near               ; CODE XREF: keycmp_isra_4+F7↑j
.text:00000000000066F0 ; __unwind {
.text:00000000000066F0                 push    r14
.text:00000000000066F2                 push    r13
.text:00000000000066F4                 mov     r13, rcx
.text:00000000000066F7                 push    r12
.text:00000000000066F9                 push    rbp
.text:00000000000066FA                 mov     r12, rdx
.text:00000000000066FD                 push    rbx
.text:00000000000066FE                 mov     rbp, rsi
.text:0000000000006701                 mov     rbx, rdi
.text:0000000000006704                 call    memcoll
.text:0000000000006709                 mov     r14d, eax
.text:000000000000670C                 call    ___errno_location
.text:0000000000006711                 mov     edi, [rax]      ; errnum
.text:0000000000006713                 test    edi, edi
.text:0000000000006715                 jz      short loc_6728
.text:0000000000006717                 mov     r8, r13
.text:000000000000671A                 mov     rcx, r12
.text:000000000000671D                 mov     rdx, rbp
.text:0000000000006720                 mov     rsi, rbx
.text:0000000000006723                 call    collate_error
.text:0000000000006728
.text:0000000000006728 loc_6728:                               ; CODE XREF: xmemcoll+25↑j
.text:0000000000006728                 pop     rbx
.text:0000000000006729                 mov     eax, r14d
.text:000000000000672C                 pop     rbp
.text:000000000000672D                 pop     r12
.text:000000000000672F                 pop     r13
.text:0000000000006731                 pop     r14
.text:0000000000006733                 retn
.text:0000000000006733 ; } // starts at 66F0
.text:0000000000006733 xmemcoll        endp
.text:0000000000006733
.text:0000000000006733 ; ---------------------------------------------------------------------------
.text:0000000000006734                 align 20h
.text:0000000000006740
.text:0000000000006740 ; =============== S U B R O U T I N E =======================================
.text:0000000000006740
.text:0000000000006740
.text:0000000000006740                 public xmemcoll0
.text:0000000000006740 xmemcoll0       proc near
.text:0000000000006740 ; __unwind {
.text:0000000000006740                 push    r14
.text:0000000000006742                 push    r13
.text:0000000000006744                 mov     r14, rcx
.text:0000000000006747                 push    r12
.text:0000000000006749                 push    rbp
.text:000000000000674A                 mov     r12, rdx
.text:000000000000674D                 push    rbx
.text:000000000000674E                 mov     rbp, rdi
.text:0000000000006751                 mov     rbx, rsi
.text:0000000000006754                 call    memcoll0
.text:0000000000006759                 mov     r13d, eax
.text:000000000000675C                 call    ___errno_location
.text:0000000000006761                 mov     edi, [rax]      ; errnum
.text:0000000000006763                 test    edi, edi
.text:0000000000006765                 jz      short loc_677A
.text:0000000000006767                 lea     rdx, [rbx-1]
.text:000000000000676B                 lea     r8, [r14-1]
.text:000000000000676F                 mov     rcx, r12
.text:0000000000006772                 mov     rsi, rbp
.text:0000000000006775                 call    collate_error
.text:000000000000677A
.text:000000000000677A loc_677A:                               ; CODE XREF: xmemcoll0+25↑j
.text:000000000000677A                 pop     rbx
.text:000000000000677B                 mov     eax, r13d
.text:000000000000677E                 pop     rbp
.text:000000000000677F                 pop     r12
.text:0000000000006781                 pop     r13
.text:0000000000006783                 pop     r14
.text:0000000000006785                 retn
.text:0000000000006785 ; } // starts at 6740
.text:0000000000006785 xmemcoll0       endp
.text:0000000000006785
.text:0000000000006785 ; ---------------------------------------------------------------------------
.text:0000000000006786                 align 10h
.text:0000000000006790
.text:0000000000006790 ; =============== S U B R O U T I N E =======================================
.text:0000000000006790
.text:0000000000006790
.text:0000000000006790 ; __int64 __fastcall xstrtoul(char *nptr)
.text:0000000000006790                 public xstrtoul
.text:0000000000006790 xstrtoul        proc near               ; CODE XREF: main+2B7↑p
.text:0000000000006790                                         ; string_to_join_field+29↑p
.text:0000000000006790
.text:0000000000006790 base            = dword ptr -50h
.text:0000000000006790 endptr          = qword ptr -48h
.text:0000000000006790 var_40          = qword ptr -40h
.text:0000000000006790
.text:0000000000006790 ; __unwind {
.text:0000000000006790                 push    r15
.text:0000000000006792                 push    r14
.text:0000000000006794                 push    r13
.text:0000000000006796                 push    r12
.text:0000000000006798                 push    rbp
.text:0000000000006799                 push    rbx
.text:000000000000679A                 sub     rsp, 28h
.text:000000000000679E                 mov     rax, fs:28h
.text:00000000000067A7                 mov     [rsp+58h+var_40], rax
.text:00000000000067AC                 xor     eax, eax
.text:00000000000067AE                 cmp     edx, 24h ; '$'
.text:00000000000067B1                 ja      loc_6B15
.text:00000000000067B7                 lea     rax, [rsp+58h+endptr]
.text:00000000000067BC                 mov     r15, rsi
.text:00000000000067BF                 test    rsi, rsi
.text:00000000000067C2                 mov     rbp, rdi
.text:00000000000067C5                 mov     [rsp+58h+base], edx
.text:00000000000067C9                 mov     r14, rcx
.text:00000000000067CC                 mov     r13, r8
.text:00000000000067CF                 cmovz   r15, rax
.text:00000000000067D3                 call    ___errno_location
.text:00000000000067D8                 mov     dword ptr [rax], 0
.text:00000000000067DE                 mov     r12, rax
.text:00000000000067E1                 movzx   ebx, byte ptr [rbp+0]
.text:00000000000067E5                 call    ___ctype_b_loc
.text:00000000000067EA                 mov     edx, [rsp+58h+base] ; base
.text:00000000000067EE                 mov     rsi, [rax]
.text:00000000000067F1                 mov     rax, rbp
.text:00000000000067F4                 jmp     short loc_6807
.text:00000000000067F4 ; ---------------------------------------------------------------------------
.text:00000000000067F6                 align 20h
.text:0000000000006800
.text:0000000000006800 loc_6800:                               ; CODE XREF: xstrtoul+7F↓j
.text:0000000000006800                 add     rax, 1
.text:0000000000006804                 movzx   ebx, byte ptr [rax]
.text:0000000000006807
.text:0000000000006807 loc_6807:                               ; CODE XREF: xstrtoul+64↑j
.text:0000000000006807                 movzx   ecx, bl
.text:000000000000680A                 test    byte ptr [rsi+rcx*2+1], 20h
.text:000000000000680F                 jnz     short loc_6800
.text:0000000000006811                 cmp     bl, 2Dh ; '-'
.text:0000000000006814                 jz      short loc_6868
.text:0000000000006816                 mov     rsi, r15        ; endptr
.text:0000000000006819                 mov     rdi, rbp        ; nptr
.text:000000000000681C                 call    _strtoul
.text:0000000000006821                 mov     rcx, [r15]
.text:0000000000006824                 mov     rbx, rax
.text:0000000000006827                 cmp     rcx, rbp
.text:000000000000682A                 jz      short loc_6858
.text:000000000000682C                 mov     eax, [r12]
.text:0000000000006830                 test    eax, eax
.text:0000000000006832                 jz      short loc_6898
.text:0000000000006834                 cmp     eax, 22h ; '"'
.text:0000000000006837                 mov     ebp, 1
.text:000000000000683C                 jnz     short loc_6868
.text:000000000000683E
.text:000000000000683E loc_683E:                               ; CODE XREF: xstrtoul+10A↓j
.text:000000000000683E                 test    r13, r13
.text:0000000000006841                 jz      short loc_684C
.text:0000000000006843                 movzx   r12d, byte ptr [rcx]
.text:0000000000006847                 test    r12b, r12b
.text:000000000000684A                 jnz     short loc_68C7
.text:000000000000684C
.text:000000000000684C loc_684C:                               ; CODE XREF: xstrtoul+B1↑j
.text:000000000000684C                 mov     [r14], rbx
.text:000000000000684F                 jmp     short loc_686D
.text:000000000000684F ; ---------------------------------------------------------------------------
.text:0000000000006851                 align 8
.text:0000000000006858
.text:0000000000006858 loc_6858:                               ; CODE XREF: xstrtoul+9A↑j
.text:0000000000006858                 test    r13, r13
.text:000000000000685B                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000006860                 jnz     short loc_68A0
.text:0000000000006862                 nop     word ptr [rax+rax+00h]
.text:0000000000006868
.text:0000000000006868 loc_6868:                               ; CODE XREF: xstrtoul+84↑j
.text:0000000000006868                                         ; xstrtoul+AC↑j ...
.text:0000000000006868                 mov     ebp, 4
.text:000000000000686D
.text:000000000000686D loc_686D:                               ; CODE XREF: xstrtoul+BF↑j
.text:000000000000686D                                         ; xstrtoul+217↓j ...
.text:000000000000686D                 mov     rdi, [rsp+58h+var_40]
.text:0000000000006872                 xor     rdi, fs:28h
.text:000000000000687B                 mov     eax, ebp
.text:000000000000687D                 jnz     loc_6B10
.text:0000000000006883                 add     rsp, 28h
.text:0000000000006887                 pop     rbx
.text:0000000000006888                 pop     rbp
.text:0000000000006889                 pop     r12
.text:000000000000688B                 pop     r13
.text:000000000000688D                 pop     r14
.text:000000000000688F                 pop     r15
.text:0000000000006891                 retn
.text:0000000000006891 ; ---------------------------------------------------------------------------
.text:0000000000006892                 align 8
.text:0000000000006898
.text:0000000000006898 loc_6898:                               ; CODE XREF: xstrtoul+A2↑j
.text:0000000000006898                 xor     ebp, ebp
.text:000000000000689A                 jmp     short loc_683E
.text:000000000000689A ; ---------------------------------------------------------------------------
.text:000000000000689C                 align 20h
.text:00000000000068A0
.text:00000000000068A0 loc_68A0:                               ; CODE XREF: xstrtoul+D0↑j
.text:00000000000068A0                 movzx   r12d, byte ptr [rbp+0]
.text:00000000000068A5                 test    r12b, r12b
.text:00000000000068A8                 jz      short loc_6868
.text:00000000000068AA                 movsx   esi, r12b       ; c
.text:00000000000068AE                 mov     rdi, r13        ; s
.text:00000000000068B1                 xor     ebp, ebp
.text:00000000000068B3                 call    _strchr
.text:00000000000068B8                 test    rax, rax
.text:00000000000068BB                 mov     ebx, 1
.text:00000000000068C0                 mov     rcx, qword ptr [rsp+58h+base]
.text:00000000000068C5                 jz      short loc_6868
.text:00000000000068C7
.text:00000000000068C7 loc_68C7:                               ; CODE XREF: xstrtoul+BA↑j
.text:00000000000068C7                 movsx   esi, r12b       ; c
.text:00000000000068CB                 mov     rdi, r13        ; s
.text:00000000000068CE                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000068D3                 call    _strchr
.text:00000000000068D8                 test    rax, rax
.text:00000000000068DB                 mov     rcx, qword ptr [rsp+58h+base]
.text:00000000000068E0                 jz      def_6966        ; jumptable 0000000000006966 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000068E6                 lea     eax, [r12-45h]
.text:00000000000068EB                 cmp     al, 2Fh ; '/'
.text:00000000000068ED                 ja      short loc_6940
.text:00000000000068EF                 mov     rdx, 814400308945h
.text:00000000000068F9                 bt      rdx, rax
.text:00000000000068FD                 jnb     short loc_6940
.text:00000000000068FF                 mov     esi, 30h ; '0'  ; c
.text:0000000000006904                 mov     rdi, r13        ; s
.text:0000000000006907                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000690C                 call    _strchr
.text:0000000000006911                 test    rax, rax
.text:0000000000006914                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000006919                 jz      short loc_6940
.text:000000000000691B                 movzx   eax, byte ptr [rcx+1]
.text:000000000000691F                 cmp     al, 44h ; 'D'
.text:0000000000006921                 jz      short loc_692F
.text:0000000000006923                 cmp     al, 69h ; 'i'
.text:0000000000006925                 jz      loc_6AF8
.text:000000000000692B                 cmp     al, 42h ; 'B'
.text:000000000000692D                 jnz     short loc_6940
.text:000000000000692F
.text:000000000000692F loc_692F:                               ; CODE XREF: xstrtoul+191↑j
.text:000000000000692F                 mov     edi, 2
.text:0000000000006934                 mov     esi, 3E8h
.text:0000000000006939                 jmp     short loc_694A
.text:0000000000006939 ; ---------------------------------------------------------------------------
.text:000000000000693B                 align 20h
.text:0000000000006940
.text:0000000000006940 loc_6940:                               ; CODE XREF: xstrtoul+15D↑j
.text:0000000000006940                                         ; xstrtoul+16D↑j ...
.text:0000000000006940                 mov     edi, 1
.text:0000000000006945                 mov     esi, 400h
.text:000000000000694A
.text:000000000000694A loc_694A:                               ; CODE XREF: xstrtoul+1A9↑j
.text:000000000000694A                                         ; xstrtoul+37B↓j
.text:000000000000694A                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:000000000000694E                 cmp     r12b, 35h
.text:0000000000006952                 ja      short def_6966  ; jumptable 0000000000006966 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000006954                 lea     rdx, jpt_6966
.text:000000000000695B                 movzx   r12d, r12b
.text:000000000000695F                 movsxd  rax, ds:(jpt_6966 - 88C0h)[rdx+r12*4]
.text:0000000000006963                 add     rax, rdx
.text:0000000000006966                 jmp     rax             ; switch jump
.text:0000000000006968 ; ---------------------------------------------------------------------------
.text:0000000000006968
.text:0000000000006968 loc_6968:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006968                                         ; DATA XREF: .rodata:jpt_6966↓o
.text:0000000000006968                 mov     rax, rbx        ; jumptable 0000000000006966 cases 77,109
.text:000000000000696B                 mul     rsi
.text:000000000000696E                 jo      loc_6B61
.text:0000000000006974                 xor     r8d, r8d
.text:0000000000006977
.text:0000000000006977 loc_6977:                               ; CODE XREF: xstrtoul+34E↓j
.text:0000000000006977                                         ; xstrtoul+35E↓j ...
.text:0000000000006977                 mul     rsi
.text:000000000000697A                 jo      loc_6B52
.text:0000000000006980                 mov     rbx, rax
.text:0000000000006983
.text:0000000000006983 loc_6983:                               ; CODE XREF: xstrtoul+3CC↓j
.text:0000000000006983                 or      ebp, r8d
.text:0000000000006986                 db      2Eh
.text:0000000000006986                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006990
.text:0000000000006990 loc_6990:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006990                                         ; xstrtoul+23B↓j ...
.text:0000000000006990                 movsxd  rdi, edi        ; jumptable 0000000000006966 case 99
.text:0000000000006993                 mov     eax, ebp
.text:0000000000006995                 add     rcx, rdi
.text:0000000000006998                 or      eax, 2
.text:000000000000699B                 mov     [r15], rcx
.text:000000000000699E                 cmp     byte ptr [rcx], 0
.text:00000000000069A1                 mov     [r14], rbx
.text:00000000000069A4                 cmovnz  ebp, eax
.text:00000000000069A7                 jmp     loc_686D
.text:00000000000069AC ; ---------------------------------------------------------------------------
.text:00000000000069AC
.text:00000000000069AC def_6966:                               ; CODE XREF: xstrtoul+150↑j
.text:00000000000069AC                                         ; xstrtoul+1C2↑j ...
.text:00000000000069AC                 mov     [r14], rbx      ; jumptable 0000000000006966 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000069AF                 or      ebp, 2
.text:00000000000069B2                 jmp     loc_686D
.text:00000000000069B7 ; ---------------------------------------------------------------------------
.text:00000000000069B7
.text:00000000000069B7 loc_69B7:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000069B7                                         ; DATA XREF: .rodata:jpt_6966↓o
.text:00000000000069B7                 mov     edx, 2          ; jumptable 0000000000006966 case 119
.text:00000000000069BC                 mov     rax, rdx
.text:00000000000069BF                 mul     rbx
.text:00000000000069C2                 jo      loc_6A5E
.text:00000000000069C8                 add     rbx, rbx
.text:00000000000069CB                 jmp     short loc_6990  ; jumptable 0000000000006966 case 99
.text:00000000000069CD ; ---------------------------------------------------------------------------
.text:00000000000069CD
.text:00000000000069CD loc_69CD:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000069CD                                         ; DATA XREF: .rodata:jpt_6966↓o
.text:00000000000069CD                 mov     edx, 200h       ; jumptable 0000000000006966 case 98
.text:00000000000069D2                 mov     rax, rdx
.text:00000000000069D5                 mul     rbx
.text:00000000000069D8                 jo      loc_6A5E
.text:00000000000069DE                 shl     rbx, 9
.text:00000000000069E2                 jmp     short loc_6990  ; jumptable 0000000000006966 case 99
.text:00000000000069E4 ; ---------------------------------------------------------------------------
.text:00000000000069E4
.text:00000000000069E4 loc_69E4:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000069E4                                         ; DATA XREF: .rodata:jpt_6966↓o
.text:00000000000069E4                 mov     r8d, 7          ; jumptable 0000000000006966 case 90
.text:00000000000069EA                 xor     r9d, r9d
.text:00000000000069ED                 nop     dword ptr [rax]
.text:00000000000069F0
.text:00000000000069F0 loc_69F0:                               ; CODE XREF: xstrtoul+273↓j
.text:00000000000069F0                 mov     rax, rbx
.text:00000000000069F3                 mul     rsi
.text:00000000000069F6                 mov     rbx, rax
.text:00000000000069F9                 jo      loc_6B8E
.text:00000000000069FF
.text:00000000000069FF loc_69FF:                               ; CODE XREF: xstrtoul+408↓j
.text:00000000000069FF                 sub     r8d, 1
.text:0000000000006A03                 jnz     short loc_69F0
.text:0000000000006A05
.text:0000000000006A05 loc_6A05:                               ; CODE XREF: xstrtoul+29D↓j
.text:0000000000006A05                                         ; xstrtoul+2BD↓j ...
.text:0000000000006A05                 or      ebp, r9d
.text:0000000000006A08                 jmp     short loc_6990  ; jumptable 0000000000006966 case 99
.text:0000000000006A0A ; ---------------------------------------------------------------------------
.text:0000000000006A0A
.text:0000000000006A0A loc_6A0A:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006A0A                                         ; DATA XREF: .rodata:jpt_6966↓o
.text:0000000000006A0A                 mov     r8d, 8          ; jumptable 0000000000006966 case 89
.text:0000000000006A10                 xor     r9d, r9d
.text:0000000000006A13                 nop     dword ptr [rax+rax+00h]
.text:0000000000006A18
.text:0000000000006A18 loc_6A18:                               ; CODE XREF: xstrtoul+29B↓j
.text:0000000000006A18                 mov     rax, rbx
.text:0000000000006A1B                 mul     rsi
.text:0000000000006A1E                 mov     rbx, rax
.text:0000000000006A21                 jo      loc_6B70
.text:0000000000006A27
.text:0000000000006A27 loc_6A27:                               ; CODE XREF: xstrtoul+3EA↓j
.text:0000000000006A27                 sub     r8d, 1
.text:0000000000006A2B                 jnz     short loc_6A18
.text:0000000000006A2D                 jmp     short loc_6A05
.text:0000000000006A2F ; ---------------------------------------------------------------------------
.text:0000000000006A2F
.text:0000000000006A2F loc_6A2F:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006A2F                                         ; DATA XREF: .rodata:jpt_6966↓o
.text:0000000000006A2F                 mov     r8d, 4          ; jumptable 0000000000006966 cases 84,116
.text:0000000000006A35                 xor     r9d, r9d
.text:0000000000006A38
.text:0000000000006A38 loc_6A38:                               ; CODE XREF: xstrtoul+2BB↓j
.text:0000000000006A38                 mov     rax, rbx
.text:0000000000006A3B                 mul     rsi
.text:0000000000006A3E                 mov     rbx, rax
.text:0000000000006A41                 jo      loc_6B43
.text:0000000000006A47
.text:0000000000006A47 loc_6A47:                               ; CODE XREF: xstrtoul+3BD↓j
.text:0000000000006A47                 sub     r8d, 1
.text:0000000000006A4B                 jnz     short loc_6A38
.text:0000000000006A4D                 jmp     short loc_6A05
.text:0000000000006A4F ; ---------------------------------------------------------------------------
.text:0000000000006A4F
.text:0000000000006A4F loc_6A4F:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006A4F                                         ; DATA XREF: .rodata:jpt_6966↓o
.text:0000000000006A4F                 mov     rax, rbx        ; jumptable 0000000000006966 cases 75,107
.text:0000000000006A52                 mul     rsi
.text:0000000000006A55                 mov     rbx, rax
.text:0000000000006A58                 jno     loc_6990        ; jumptable 0000000000006966 case 99
.text:0000000000006A5E
.text:0000000000006A5E loc_6A5E:                               ; CODE XREF: xstrtoul+232↑j
.text:0000000000006A5E                                         ; xstrtoul+248↑j ...
.text:0000000000006A5E                 mov     ebp, 1
.text:0000000000006A63                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006A67                 jmp     loc_6990        ; jumptable 0000000000006966 case 99
.text:0000000000006A67 ; ---------------------------------------------------------------------------
.text:0000000000006A6C                 align 10h
.text:0000000000006A70
.text:0000000000006A70 loc_6A70:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006A70                                         ; DATA XREF: .rodata:jpt_6966↓o
.text:0000000000006A70                 mov     r8d, 5          ; jumptable 0000000000006966 case 80
.text:0000000000006A76                 xor     r9d, r9d
.text:0000000000006A79
.text:0000000000006A79 loc_6A79:                               ; CODE XREF: xstrtoul+2FC↓j
.text:0000000000006A79                 mov     rax, rbx
.text:0000000000006A7C                 mul     rsi
.text:0000000000006A7F                 mov     rbx, rax
.text:0000000000006A82                 jo      loc_6B7F
.text:0000000000006A88
.text:0000000000006A88 loc_6A88:                               ; CODE XREF: xstrtoul+3F9↓j
.text:0000000000006A88                 sub     r8d, 1
.text:0000000000006A8C                 jnz     short loc_6A79
.text:0000000000006A8E                 jmp     loc_6A05
.text:0000000000006A93 ; ---------------------------------------------------------------------------
.text:0000000000006A93
.text:0000000000006A93 loc_6A93:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006A93                                         ; DATA XREF: .rodata:jpt_6966↓o
.text:0000000000006A93                 mov     r8d, 6          ; jumptable 0000000000006966 case 69
.text:0000000000006A99                 xor     r9d, r9d
.text:0000000000006A9C
.text:0000000000006A9C loc_6A9C:                               ; CODE XREF: xstrtoul+31F↓j
.text:0000000000006A9C                 mov     rax, rbx
.text:0000000000006A9F                 mul     rsi
.text:0000000000006AA2                 mov     rbx, rax
.text:0000000000006AA5                 jo      loc_6B34
.text:0000000000006AAB
.text:0000000000006AAB loc_6AAB:                               ; CODE XREF: xstrtoul+3AE↓j
.text:0000000000006AAB                 sub     r8d, 1
.text:0000000000006AAF                 jnz     short loc_6A9C
.text:0000000000006AB1                 jmp     loc_6A05
.text:0000000000006AB6 ; ---------------------------------------------------------------------------
.text:0000000000006AB6
.text:0000000000006AB6 loc_6AB6:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006AB6                                         ; DATA XREF: .rodata:jpt_6966↓o
.text:0000000000006AB6                 mov     edx, 400h       ; jumptable 0000000000006966 case 66
.text:0000000000006ABB                 mov     rax, rdx
.text:0000000000006ABE                 mul     rbx
.text:0000000000006AC1                 jo      short loc_6A5E
.text:0000000000006AC3                 shl     rbx, 0Ah
.text:0000000000006AC7                 jmp     loc_6990        ; jumptable 0000000000006966 case 99
.text:0000000000006ACC ; ---------------------------------------------------------------------------
.text:0000000000006ACC
.text:0000000000006ACC loc_6ACC:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000006ACC                                         ; DATA XREF: .rodata:jpt_6966↓o
.text:0000000000006ACC                 mov     rax, rbx        ; jumptable 0000000000006966 cases 71,103
.text:0000000000006ACF                 mul     rsi
.text:0000000000006AD2                 jo      loc_6B9D
.text:0000000000006AD8                 xor     r8d, r8d
.text:0000000000006ADB
.text:0000000000006ADB loc_6ADB:                               ; CODE XREF: xstrtoul+417↓j
.text:0000000000006ADB                 mul     rsi
.text:0000000000006ADE                 jno     loc_6977
.text:0000000000006AE4                 mov     r8d, 1
.text:0000000000006AEA                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006AEE                 jmp     loc_6977
.text:0000000000006AEE ; ---------------------------------------------------------------------------
.text:0000000000006AF3                 align 8
.text:0000000000006AF8
.text:0000000000006AF8 loc_6AF8:                               ; CODE XREF: xstrtoul+195↑j
.text:0000000000006AF8                 xor     edi, edi
.text:0000000000006AFA                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:0000000000006AFE                 mov     esi, 400h
.text:0000000000006B03                 setz    dil
.text:0000000000006B07                 lea     edi, [rdi+rdi+1]
.text:0000000000006B0B                 jmp     loc_694A
.text:0000000000006B10 ; ---------------------------------------------------------------------------
.text:0000000000006B10
.text:0000000000006B10 loc_6B10:                               ; CODE XREF: xstrtoul+ED↑j
.text:0000000000006B10                 call    ___stack_chk_fail
.text:0000000000006B15 ; ---------------------------------------------------------------------------
.text:0000000000006B15
.text:0000000000006B15 loc_6B15:                               ; CODE XREF: xstrtoul+21↑j
.text:0000000000006B15                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoul"
.text:0000000000006B1C                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:0000000000006B23                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:0000000000006B2A                 mov     edx, 54h ; 'T'  ; line
.text:0000000000006B2F                 call    ___assert_fail
.text:0000000000006B34 ; ---------------------------------------------------------------------------
.text:0000000000006B34
.text:0000000000006B34 loc_6B34:                               ; CODE XREF: xstrtoul+315↑j
.text:0000000000006B34                 mov     r9d, 1
.text:0000000000006B3A                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006B3E                 jmp     loc_6AAB
.text:0000000000006B43 ; ---------------------------------------------------------------------------
.text:0000000000006B43
.text:0000000000006B43 loc_6B43:                               ; CODE XREF: xstrtoul+2B1↑j
.text:0000000000006B43                 mov     r9d, 1
.text:0000000000006B49                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006B4D                 jmp     loc_6A47
.text:0000000000006B52 ; ---------------------------------------------------------------------------
.text:0000000000006B52
.text:0000000000006B52 loc_6B52:                               ; CODE XREF: xstrtoul+1EA↑j
.text:0000000000006B52                 mov     r8d, 1
.text:0000000000006B58                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006B5C                 jmp     loc_6983
.text:0000000000006B61 ; ---------------------------------------------------------------------------
.text:0000000000006B61
.text:0000000000006B61 loc_6B61:                               ; CODE XREF: xstrtoul+1DE↑j
.text:0000000000006B61                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006B65                 mov     r8d, 1
.text:0000000000006B6B                 jmp     loc_6977
.text:0000000000006B70 ; ---------------------------------------------------------------------------
.text:0000000000006B70
.text:0000000000006B70 loc_6B70:                               ; CODE XREF: xstrtoul+291↑j
.text:0000000000006B70                 mov     r9d, 1
.text:0000000000006B76                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006B7A                 jmp     loc_6A27
.text:0000000000006B7F ; ---------------------------------------------------------------------------
.text:0000000000006B7F
.text:0000000000006B7F loc_6B7F:                               ; CODE XREF: xstrtoul+2F2↑j
.text:0000000000006B7F                 mov     r9d, 1
.text:0000000000006B85                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006B89                 jmp     loc_6A88
.text:0000000000006B8E ; ---------------------------------------------------------------------------
.text:0000000000006B8E
.text:0000000000006B8E loc_6B8E:                               ; CODE XREF: xstrtoul+269↑j
.text:0000000000006B8E                 mov     r9d, 1
.text:0000000000006B94                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006B98                 jmp     loc_69FF
.text:0000000000006B9D ; ---------------------------------------------------------------------------
.text:0000000000006B9D
.text:0000000000006B9D loc_6B9D:                               ; CODE XREF: xstrtoul+342↑j
.text:0000000000006B9D                 mov     r8d, 1
.text:0000000000006BA3                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006BA7                 jmp     loc_6ADB
.text:0000000000006BA7 ; } // starts at 6790
.text:0000000000006BA7 xstrtoul        endp
.text:0000000000006BA7
.text:0000000000006BA7 ; ---------------------------------------------------------------------------
.text:0000000000006BAC                 align 10h
.text:0000000000006BB0
.text:0000000000006BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006BB0
.text:0000000000006BB0 ; Attributes: info_from_lumina
.text:0000000000006BB0
.text:0000000000006BB0 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000006BB0                 public rpl_fclose
.text:0000000000006BB0 rpl_fclose      proc near               ; CODE XREF: main+715↑p
.text:0000000000006BB0                                         ; main+725↑p ...
.text:0000000000006BB0 ; __unwind {
.text:0000000000006BB0                 push    r12
.text:0000000000006BB2                 push    rbp
.text:0000000000006BB3                 push    rbx
.text:0000000000006BB4                 mov     rbx, rdi
.text:0000000000006BB7                 call    _fileno
.text:0000000000006BBC                 test    eax, eax
.text:0000000000006BBE                 mov     rdi, rbx        ; fp
.text:0000000000006BC1                 js      short loc_6C17
.text:0000000000006BC3                 call    ___freading
.text:0000000000006BC8                 test    eax, eax
.text:0000000000006BCA                 jnz     short loc_6BF8
.text:0000000000006BCC
.text:0000000000006BCC loc_6BCC:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000006BCC                 mov     rdi, rbx        ; stream
.text:0000000000006BCF                 call    rpl_fflush
.text:0000000000006BD4                 test    eax, eax
.text:0000000000006BD6                 jz      short loc_6C14
.text:0000000000006BD8                 call    ___errno_location
.text:0000000000006BDD                 mov     r12d, [rax]
.text:0000000000006BE0                 mov     rdi, rbx        ; stream
.text:0000000000006BE3                 mov     rbp, rax
.text:0000000000006BE6                 call    _fclose
.text:0000000000006BEB                 test    r12d, r12d
.text:0000000000006BEE                 jnz     short loc_6C20
.text:0000000000006BF0
.text:0000000000006BF0 loc_6BF0:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000006BF0                 pop     rbx
.text:0000000000006BF1                 pop     rbp
.text:0000000000006BF2                 pop     r12
.text:0000000000006BF4                 retn
.text:0000000000006BF4 ; ---------------------------------------------------------------------------
.text:0000000000006BF5                 align 8
.text:0000000000006BF8
.text:0000000000006BF8 loc_6BF8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000006BF8                 mov     rdi, rbx        ; stream
.text:0000000000006BFB                 call    _fileno
.text:0000000000006C00                 xor     esi, esi        ; offset
.text:0000000000006C02                 mov     edx, 1          ; whence
.text:0000000000006C07                 mov     edi, eax        ; fd
.text:0000000000006C09                 call    _lseek
.text:0000000000006C0E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006C12                 jnz     short loc_6BCC
.text:0000000000006C14
.text:0000000000006C14 loc_6C14:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000006C14                 mov     rdi, rbx        ; stream
.text:0000000000006C17
.text:0000000000006C17 loc_6C17:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000006C17                 pop     rbx
.text:0000000000006C18                 pop     rbp
.text:0000000000006C19                 pop     r12
.text:0000000000006C1B                 jmp     _fclose
.text:0000000000006C20 ; ---------------------------------------------------------------------------
.text:0000000000006C20
.text:0000000000006C20 loc_6C20:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000006C20                 mov     [rbp+0], r12d
.text:0000000000006C24                 mov     eax, 0FFFFFFFFh
.text:0000000000006C29                 jmp     short loc_6BF0
.text:0000000000006C29 ; } // starts at 6BB0
.text:0000000000006C29 rpl_fclose      endp
.text:0000000000006C29
.text:0000000000006C29 ; ---------------------------------------------------------------------------
.text:0000000000006C2B                 align 10h
.text:0000000000006C30
.text:0000000000006C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C30
.text:0000000000006C30
.text:0000000000006C30 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:0000000000006C30                 public rpl_fcntl
.text:0000000000006C30 rpl_fcntl       proc near               ; CODE XREF: dup_safer+9↑j
.text:0000000000006C30
.text:0000000000006C30 var_68          = dword ptr -68h
.text:0000000000006C30 var_60          = qword ptr -60h
.text:0000000000006C30 var_58          = qword ptr -58h
.text:0000000000006C30 var_50          = qword ptr -50h
.text:0000000000006C30 var_48          = byte ptr -48h
.text:0000000000006C30 var_38          = qword ptr -38h
.text:0000000000006C30 var_30          = qword ptr -30h
.text:0000000000006C30 var_28          = qword ptr -28h
.text:0000000000006C30 var_20          = qword ptr -20h
.text:0000000000006C30 arg_0           = byte ptr  8
.text:0000000000006C30
.text:0000000000006C30 ; __unwind {
.text:0000000000006C30                 push    r12
.text:0000000000006C32                 push    rbp
.text:0000000000006C33                 mov     ebp, edi
.text:0000000000006C35                 push    rbx
.text:0000000000006C36                 sub     rsp, 50h
.text:0000000000006C3A                 mov     rax, fs:28h
.text:0000000000006C43                 mov     [rsp+68h+var_50], rax
.text:0000000000006C48                 xor     eax, eax
.text:0000000000006C4A                 lea     rax, [rsp+68h+arg_0]
.text:0000000000006C4F                 test    esi, esi
.text:0000000000006C51                 mov     [rsp+68h+var_38], rdx
.text:0000000000006C56                 mov     [rsp+68h+var_30], rcx
.text:0000000000006C5B                 mov     [rsp+68h+var_28], r8
.text:0000000000006C60                 mov     [rsp+68h+var_60], rax
.text:0000000000006C65                 lea     rax, [rsp+68h+var_48]
.text:0000000000006C6A                 mov     [rsp+68h+var_20], r9
.text:0000000000006C6F                 mov     [rsp+68h+var_68], 10h
.text:0000000000006C76                 mov     [rsp+68h+var_58], rax
.text:0000000000006C7B                 jz      loc_6E82
.text:0000000000006C81                 cmp     esi, 406h
.text:0000000000006C87                 jnz     short loc_6CD0
.text:0000000000006C89                 mov     rax, [rsp+68h+var_58]
.text:0000000000006C8E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:0000000000006C95                 mov     [rsp+68h+var_68], 18h
.text:0000000000006C9C                 mov     r12d, [rax+10h]
.text:0000000000006CA0                 mov     edx, r12d
.text:0000000000006CA3                 js      loc_6DD3
.text:0000000000006CA9                 xor     eax, eax
.text:0000000000006CAB                 mov     esi, 406h       ; cmd
.text:0000000000006CB0                 call    _fcntl
.text:0000000000006CB5                 test    eax, eax
.text:0000000000006CB7                 mov     ebx, eax
.text:0000000000006CB9                 js      loc_6E48
.text:0000000000006CBF
.text:0000000000006CBF loc_6CBF:                               ; CODE XREF: rpl_fcntl+220↓j
.text:0000000000006CBF                 mov     cs:have_dupfd_cloexec_3326, 1
.text:0000000000006CC9                 jmp     short loc_6D10
.text:0000000000006CC9 ; ---------------------------------------------------------------------------
.text:0000000000006CCB                 align 10h
.text:0000000000006CD0
.text:0000000000006CD0 loc_6CD0:                               ; CODE XREF: rpl_fcntl+57↑j
.text:0000000000006CD0                 cmp     esi, 0Bh
.text:0000000000006CD3                 jz      short loc_6D00
.text:0000000000006CD5                 jg      short loc_6D30
.text:0000000000006CD7                 cmp     esi, 4
.text:0000000000006CDA                 jz      loc_6DB0
.text:0000000000006CE0                 jg      loc_6DA0
.text:0000000000006CE6                 cmp     esi, 2
.text:0000000000006CE9                 jz      loc_6DB0
.text:0000000000006CEF                 jg      short loc_6D00
.text:0000000000006CF1                 cmp     esi, 1
.text:0000000000006CF4                 jnz     short loc_6D58
.text:0000000000006CF6                 db      2Eh
.text:0000000000006CF6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006D00
.text:0000000000006D00 loc_6D00:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:0000000000006D00                                         ; rpl_fcntl+BF↑j ...
.text:0000000000006D00                 mov     edi, ebp        ; fd
.text:0000000000006D02                 xor     eax, eax
.text:0000000000006D04                 call    _fcntl
.text:0000000000006D09                 mov     ebx, eax
.text:0000000000006D0B                 nop     dword ptr [rax+rax+00h]
.text:0000000000006D10
.text:0000000000006D10 loc_6D10:                               ; CODE XREF: rpl_fcntl+99↑j
.text:0000000000006D10                                         ; rpl_fcntl+147↓j ...
.text:0000000000006D10                 mov     rcx, [rsp+68h+var_50]
.text:0000000000006D15                 xor     rcx, fs:28h
.text:0000000000006D1E                 mov     eax, ebx
.text:0000000000006D20                 jnz     loc_6E7D
.text:0000000000006D26                 add     rsp, 50h
.text:0000000000006D2A                 pop     rbx
.text:0000000000006D2B                 pop     rbp
.text:0000000000006D2C                 pop     r12
.text:0000000000006D2E                 retn
.text:0000000000006D2E ; ---------------------------------------------------------------------------
.text:0000000000006D2F                 align 10h
.text:0000000000006D30
.text:0000000000006D30 loc_6D30:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:0000000000006D30                 cmp     esi, 407h
.text:0000000000006D36                 jg      short loc_6D80
.text:0000000000006D38                 cmp     esi, 406h
.text:0000000000006D3E                 jge     short loc_6DB0
.text:0000000000006D40                 cmp     esi, 401h
.text:0000000000006D46                 jz      short loc_6D00
.text:0000000000006D48                 cmp     esi, 402h
.text:0000000000006D4E                 jz      short loc_6DB0
.text:0000000000006D50                 cmp     esi, 400h
.text:0000000000006D56                 jz      short loc_6DB0
.text:0000000000006D58
.text:0000000000006D58 loc_6D58:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:0000000000006D58                                         ; rpl_fcntl+164↓j ...
.text:0000000000006D58                 mov     eax, [rsp+68h+var_68]
.text:0000000000006D5B                 cmp     eax, 2Fh ; '/'
.text:0000000000006D5E                 ja      loc_6E9A
.text:0000000000006D64                 add     rax, [rsp+68h+var_58]
.text:0000000000006D69
.text:0000000000006D69 loc_6D69:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:0000000000006D69                 mov     rdx, [rax]
.text:0000000000006D6C                 mov     edi, ebp        ; fd
.text:0000000000006D6E                 xor     eax, eax
.text:0000000000006D70                 call    _fcntl
.text:0000000000006D75                 mov     ebx, eax
.text:0000000000006D77                 jmp     short loc_6D10
.text:0000000000006D77 ; ---------------------------------------------------------------------------
.text:0000000000006D79                 align 20h
.text:0000000000006D80
.text:0000000000006D80 loc_6D80:                               ; CODE XREF: rpl_fcntl+106↑j
.text:0000000000006D80                 cmp     esi, 409h
.text:0000000000006D86                 jz      short loc_6DB0
.text:0000000000006D88                 jl      loc_6D00
.text:0000000000006D8E                 cmp     esi, 40Ah
.text:0000000000006D94                 jnz     short loc_6D58
.text:0000000000006D96                 jmp     loc_6D00
.text:0000000000006D96 ; ---------------------------------------------------------------------------
.text:0000000000006D9B                 align 20h
.text:0000000000006DA0
.text:0000000000006DA0 loc_6DA0:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:0000000000006DA0                 cmp     esi, 9
.text:0000000000006DA3                 jz      loc_6D00
.text:0000000000006DA9                 jg      short loc_6DB0
.text:0000000000006DAB                 cmp     esi, 8
.text:0000000000006DAE                 jnz     short loc_6D58
.text:0000000000006DB0
.text:0000000000006DB0 loc_6DB0:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:0000000000006DB0                                         ; rpl_fcntl+B9↑j ...
.text:0000000000006DB0                 mov     eax, [rsp+68h+var_68]
.text:0000000000006DB3                 cmp     eax, 2Fh ; '/'
.text:0000000000006DB6                 ja      loc_6EA4
.text:0000000000006DBC                 add     rax, [rsp+68h+var_58]
.text:0000000000006DC1
.text:0000000000006DC1 loc_6DC1:                               ; CODE XREF: rpl_fcntl+279↓j
.text:0000000000006DC1                 mov     edx, [rax]
.text:0000000000006DC3                 mov     edi, ebp        ; fd
.text:0000000000006DC5                 xor     eax, eax
.text:0000000000006DC7                 call    _fcntl
.text:0000000000006DCC                 mov     ebx, eax
.text:0000000000006DCE                 jmp     loc_6D10
.text:0000000000006DD3 ; ---------------------------------------------------------------------------
.text:0000000000006DD3
.text:0000000000006DD3 loc_6DD3:                               ; CODE XREF: rpl_fcntl+73↑j
.text:0000000000006DD3                 xor     esi, esi        ; cmd
.text:0000000000006DD5                 xor     eax, eax
.text:0000000000006DD7                 call    _fcntl
.text:0000000000006DDC                 test    eax, eax
.text:0000000000006DDE                 mov     ebx, eax
.text:0000000000006DE0                 js      loc_6D10
.text:0000000000006DE6                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000006DED                 jnz     loc_6D10
.text:0000000000006DF3
.text:0000000000006DF3 loc_6DF3:                               ; CODE XREF: rpl_fcntl+248↓j
.text:0000000000006DF3                 xor     eax, eax
.text:0000000000006DF5                 mov     esi, 1          ; cmd
.text:0000000000006DFA                 mov     edi, ebx        ; fd
.text:0000000000006DFC                 call    _fcntl
.text:0000000000006E01                 test    eax, eax
.text:0000000000006E03                 js      short loc_6E21
.text:0000000000006E05                 or      eax, 1
.text:0000000000006E08                 mov     esi, 2          ; cmd
.text:0000000000006E0D                 mov     edi, ebx        ; fd
.text:0000000000006E0F                 mov     edx, eax
.text:0000000000006E11                 xor     eax, eax
.text:0000000000006E13                 call    _fcntl
.text:0000000000006E18                 cmp     eax, 0FFFFFFFFh
.text:0000000000006E1B                 jnz     loc_6D10
.text:0000000000006E21
.text:0000000000006E21 loc_6E21:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:0000000000006E21                 call    ___errno_location
.text:0000000000006E26                 mov     r12d, [rax]
.text:0000000000006E29                 mov     rbp, rax
.text:0000000000006E2C                 mov     edi, ebx        ; fd
.text:0000000000006E2E                 call    _close
.text:0000000000006E33                 mov     ebx, 0FFFFFFFFh
.text:0000000000006E38                 mov     [rbp+0], r12d
.text:0000000000006E3C                 jmp     loc_6D10
.text:0000000000006E3C ; ---------------------------------------------------------------------------
.text:0000000000006E41                 align 8
.text:0000000000006E48
.text:0000000000006E48 loc_6E48:                               ; CODE XREF: rpl_fcntl+89↑j
.text:0000000000006E48                 call    ___errno_location
.text:0000000000006E4D                 cmp     dword ptr [rax], 16h
.text:0000000000006E50                 jnz     loc_6CBF
.text:0000000000006E56                 xor     esi, esi        ; cmd
.text:0000000000006E58                 xor     eax, eax
.text:0000000000006E5A                 mov     edx, r12d
.text:0000000000006E5D                 mov     edi, ebp        ; fd
.text:0000000000006E5F                 call    _fcntl
.text:0000000000006E64                 test    eax, eax
.text:0000000000006E66                 mov     ebx, eax
.text:0000000000006E68                 js      loc_6D10
.text:0000000000006E6E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000006E78                 jmp     loc_6DF3
.text:0000000000006E7D ; ---------------------------------------------------------------------------
.text:0000000000006E7D
.text:0000000000006E7D loc_6E7D:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:0000000000006E7D                 call    ___stack_chk_fail
.text:0000000000006E82 ; ---------------------------------------------------------------------------
.text:0000000000006E82
.text:0000000000006E82 loc_6E82:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:0000000000006E82                 mov     rax, [rsp+68h+var_58]
.text:0000000000006E87                 xor     esi, esi        ; cmd
.text:0000000000006E89                 mov     edx, [rax+10h]
.text:0000000000006E8C                 xor     eax, eax
.text:0000000000006E8E                 call    _fcntl
.text:0000000000006E93                 mov     ebx, eax
.text:0000000000006E95                 jmp     loc_6D10
.text:0000000000006E9A ; ---------------------------------------------------------------------------
.text:0000000000006E9A
.text:0000000000006E9A loc_6E9A:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:0000000000006E9A                 mov     rax, [rsp+68h+var_60]
.text:0000000000006E9F                 jmp     loc_6D69
.text:0000000000006EA4 ; ---------------------------------------------------------------------------
.text:0000000000006EA4
.text:0000000000006EA4 loc_6EA4:                               ; CODE XREF: rpl_fcntl+186↑j
.text:0000000000006EA4                 mov     rax, [rsp+68h+var_60]
.text:0000000000006EA9                 jmp     loc_6DC1
.text:0000000000006EA9 ; } // starts at 6C30
.text:0000000000006EA9 rpl_fcntl       endp
.text:0000000000006EA9
.text:0000000000006EA9 ; ---------------------------------------------------------------------------
.text:0000000000006EAE                 align 10h
.text:0000000000006EB0
.text:0000000000006EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006EB0
.text:0000000000006EB0 ; Attributes: info_from_lumina
.text:0000000000006EB0
.text:0000000000006EB0 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000006EB0                 public rpl_fflush
.text:0000000000006EB0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000006EB0 ; __unwind {
.text:0000000000006EB0                 test    rdi, rdi
.text:0000000000006EB3                 push    rbx
.text:0000000000006EB4                 mov     rbx, rdi
.text:0000000000006EB7                 jz      short loc_6ECA
.text:0000000000006EB9                 call    ___freading
.text:0000000000006EBE                 test    eax, eax
.text:0000000000006EC0                 jz      short loc_6ECA
.text:0000000000006EC2                 test    dword ptr [rbx], 100h
.text:0000000000006EC8                 jnz     short loc_6ED8
.text:0000000000006ECA
.text:0000000000006ECA loc_6ECA:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000006ECA                                         ; rpl_fflush+10↑j
.text:0000000000006ECA                 mov     rdi, rbx        ; stream
.text:0000000000006ECD                 pop     rbx
.text:0000000000006ECE                 jmp     _fflush
.text:0000000000006ECE ; ---------------------------------------------------------------------------
.text:0000000000006ED3                 align 8
.text:0000000000006ED8
.text:0000000000006ED8 loc_6ED8:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000006ED8                 mov     rdi, rbx
.text:0000000000006EDB                 mov     edx, 1
.text:0000000000006EE0                 xor     esi, esi
.text:0000000000006EE2                 call    rpl_fseeko
.text:0000000000006EE7                 mov     rdi, rbx        ; stream
.text:0000000000006EEA                 pop     rbx
.text:0000000000006EEB                 jmp     _fflush
.text:0000000000006EEB ; } // starts at 6EB0
.text:0000000000006EEB rpl_fflush      endp
.text:0000000000006EEB
.text:0000000000006EF0
.text:0000000000006EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006EF0
.text:0000000000006EF0 ; Attributes: info_from_lumina
.text:0000000000006EF0
.text:0000000000006EF0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000006EF0                 public rpl_fseeko
.text:0000000000006EF0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000006EF0 ; __unwind {
.text:0000000000006EF0                 mov     rax, [rdi+8]
.text:0000000000006EF4                 cmp     [rdi+10h], rax
.text:0000000000006EF8                 jz      short loc_6F00
.text:0000000000006EFA
.text:0000000000006EFA loc_6EFA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000006EFA                                         ; rpl_fseeko+1F↓j
.text:0000000000006EFA                 jmp     _fseeko
.text:0000000000006EFA ; ---------------------------------------------------------------------------
.text:0000000000006EFF                 align 20h
.text:0000000000006F00
.text:0000000000006F00 loc_6F00:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000006F00                 mov     rax, [rdi+20h]
.text:0000000000006F04                 cmp     [rdi+28h], rax
.text:0000000000006F08                 jnz     short loc_6EFA
.text:0000000000006F0A                 cmp     qword ptr [rdi+48h], 0
.text:0000000000006F0F                 jnz     short loc_6EFA
.text:0000000000006F11                 push    r12
.text:0000000000006F13                 push    rbp
.text:0000000000006F14                 mov     r12d, edx
.text:0000000000006F17                 push    rbx
.text:0000000000006F18                 mov     rbp, rsi
.text:0000000000006F1B                 mov     rbx, rdi
.text:0000000000006F1E                 call    _fileno
.text:0000000000006F23                 mov     edx, r12d       ; whence
.text:0000000000006F26                 mov     rsi, rbp        ; offset
.text:0000000000006F29                 mov     edi, eax        ; fd
.text:0000000000006F2B                 call    _lseek
.text:0000000000006F30                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F34                 jz      short loc_6F42
.text:0000000000006F36                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000006F39                 mov     [rbx+90h], rax
.text:0000000000006F40                 xor     eax, eax
.text:0000000000006F42
.text:0000000000006F42 loc_6F42:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000006F42                 pop     rbx
.text:0000000000006F43                 pop     rbp
.text:0000000000006F44                 pop     r12
.text:0000000000006F46                 retn
.text:0000000000006F46 ; } // starts at 6EF0
.text:0000000000006F46 rpl_fseeko      endp
.text:0000000000006F46
.text:0000000000006F46 ; ---------------------------------------------------------------------------
.text:0000000000006F47                 align 10h
.text:0000000000006F50
.text:0000000000006F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000006F50
.text:0000000000006F50 ; Attributes: info_from_lumina
.text:0000000000006F50
.text:0000000000006F50 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000006F50                 public rpl_mbrtowc
.text:0000000000006F50 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000006F50
.text:0000000000006F50 pwc             = dword ptr -34h
.text:0000000000006F50 var_30          = qword ptr -30h
.text:0000000000006F50
.text:0000000000006F50 ; __unwind {
.text:0000000000006F50                 push    r13
.text:0000000000006F52                 push    r12
.text:0000000000006F54                 mov     r13, rsi
.text:0000000000006F57                 push    rbp
.text:0000000000006F58                 push    rbx
.text:0000000000006F59                 mov     rbx, rdi
.text:0000000000006F5C                 mov     r12, rdx
.text:0000000000006F5F                 sub     rsp, 18h
.text:0000000000006F63                 mov     rax, fs:28h
.text:0000000000006F6C                 mov     [rsp+38h+var_30], rax
.text:0000000000006F71                 xor     eax, eax
.text:0000000000006F73                 lea     rax, [rsp+38h+pwc]
.text:0000000000006F78                 test    rdi, rdi
.text:0000000000006F7B                 cmovz   rbx, rax
.text:0000000000006F7F                 mov     rdi, rbx        ; pwc
.text:0000000000006F82                 call    _mbrtowc
.text:0000000000006F87                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000006F8B                 mov     rbp, rax
.text:0000000000006F8E                 jbe     short loc_6FB0
.text:0000000000006F90                 test    r12, r12
.text:0000000000006F93                 jz      short loc_6FB0
.text:0000000000006F95                 xor     edi, edi
.text:0000000000006F97                 call    hard_locale
.text:0000000000006F9C                 test    al, al
.text:0000000000006F9E                 jnz     short loc_6FB0
.text:0000000000006FA0                 movzx   eax, byte ptr [r13+0]
.text:0000000000006FA5                 mov     ebp, 1
.text:0000000000006FAA                 mov     [rbx], eax
.text:0000000000006FAC                 nop     dword ptr [rax+00h]
.text:0000000000006FB0
.text:0000000000006FB0 loc_6FB0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000006FB0                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000006FB0                 mov     rdx, [rsp+38h+var_30]
.text:0000000000006FB5                 xor     rdx, fs:28h
.text:0000000000006FBE                 mov     rax, rbp
.text:0000000000006FC1                 jnz     short loc_6FCE
.text:0000000000006FC3                 add     rsp, 18h
.text:0000000000006FC7                 pop     rbx
.text:0000000000006FC8                 pop     rbp
.text:0000000000006FC9                 pop     r12
.text:0000000000006FCB                 pop     r13
.text:0000000000006FCD                 retn
.text:0000000000006FCE ; ---------------------------------------------------------------------------
.text:0000000000006FCE
.text:0000000000006FCE loc_6FCE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000006FCE                 call    ___stack_chk_fail
.text:0000000000006FCE ; } // starts at 6F50
.text:0000000000006FCE rpl_mbrtowc     endp
.text:0000000000006FCE
.text:0000000000006FCE ; ---------------------------------------------------------------------------
.text:0000000000006FD3                 align 20h
.text:0000000000006FE0
.text:0000000000006FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006FE0
.text:0000000000006FE0 ; Attributes: info_from_lumina
.text:0000000000006FE0
.text:0000000000006FE0 ; int __fastcall close_stream(FILE *stream)
.text:0000000000006FE0                 public close_stream
.text:0000000000006FE0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000006FE0                                         ; close_stdout+33↑p
.text:0000000000006FE0 ; __unwind {
.text:0000000000006FE0                 push    r12
.text:0000000000006FE2                 push    rbp
.text:0000000000006FE3                 mov     rbp, rdi
.text:0000000000006FE6                 push    rbx
.text:0000000000006FE7                 call    ___fpending
.text:0000000000006FEC                 mov     ebx, [rbp+0]
.text:0000000000006FEF                 mov     rdi, rbp        ; stream
.text:0000000000006FF2                 mov     r12, rax
.text:0000000000006FF5                 call    rpl_fclose
.text:0000000000006FFA                 and     ebx, 20h
.text:0000000000006FFD                 test    ebx, ebx
.text:0000000000006FFF                 jnz     short loc_7018
.text:0000000000007001                 test    eax, eax
.text:0000000000007003                 jz      short loc_700F
.text:0000000000007005                 test    r12, r12
.text:0000000000007008                 mov     eax, 0FFFFFFFFh
.text:000000000000700D                 jz      short loc_7048
.text:000000000000700F
.text:000000000000700F loc_700F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000700F                 pop     rbx
.text:0000000000007010                 pop     rbp
.text:0000000000007011                 pop     r12
.text:0000000000007013                 retn
.text:0000000000007013 ; ---------------------------------------------------------------------------
.text:0000000000007014                 align 8
.text:0000000000007018
.text:0000000000007018 loc_7018:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000007018                 test    eax, eax
.text:000000000000701A                 jnz     short loc_7038
.text:000000000000701C                 call    ___errno_location
.text:0000000000007021                 mov     dword ptr [rax], 0
.text:0000000000007027                 mov     eax, 0FFFFFFFFh
.text:000000000000702C                 pop     rbx
.text:000000000000702D                 pop     rbp
.text:000000000000702E                 pop     r12
.text:0000000000007030                 retn
.text:0000000000007030 ; ---------------------------------------------------------------------------
.text:0000000000007031                 align 8
.text:0000000000007038
.text:0000000000007038 loc_7038:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000007038                 pop     rbx
.text:0000000000007039                 mov     eax, 0FFFFFFFFh
.text:000000000000703E                 pop     rbp
.text:000000000000703F                 pop     r12
.text:0000000000007041                 retn
.text:0000000000007041 ; ---------------------------------------------------------------------------
.text:0000000000007042                 align 8
.text:0000000000007048
.text:0000000000007048 loc_7048:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000007048                 call    ___errno_location
.text:000000000000704D                 cmp     dword ptr [rax], 9
.text:0000000000007050                 pop     rbx
.text:0000000000007051                 pop     rbp
.text:0000000000007052                 pop     r12
.text:0000000000007054                 setnz   al
.text:0000000000007057                 movzx   eax, al
.text:000000000000705A                 neg     eax
.text:000000000000705C                 retn
.text:000000000000705C ; } // starts at 6FE0
.text:000000000000705C close_stream    endp
.text:000000000000705C
.text:000000000000705C ; ---------------------------------------------------------------------------
.text:000000000000705D                 align 20h
.text:0000000000007060
.text:0000000000007060 ; =============== S U B R O U T I N E =======================================
.text:0000000000007060
.text:0000000000007060
.text:0000000000007060                 public locale_charset
.text:0000000000007060 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000007060 ; __unwind {
.text:0000000000007060                 sub     rsp, 8
.text:0000000000007064                 mov     edi, 0Eh        ; item
.text:0000000000007069                 call    _nl_langinfo
.text:000000000000706E                 test    rax, rax
.text:0000000000007071                 jz      short loc_7090
.text:0000000000007073                 cmp     byte ptr [rax], 0
.text:0000000000007076                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000707D                 cmovz   rax, rdx
.text:0000000000007081                 add     rsp, 8
.text:0000000000007085                 retn
.text:0000000000007085 ; ---------------------------------------------------------------------------
.text:0000000000007086                 align 10h
.text:0000000000007090
.text:0000000000007090 loc_7090:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000007090                 lea     rax, aAscii     ; "ASCII"
.text:0000000000007097                 add     rsp, 8
.text:000000000000709B                 retn
.text:000000000000709B ; } // starts at 7060
.text:000000000000709B locale_charset  endp
.text:000000000000709B
.text:000000000000709B ; ---------------------------------------------------------------------------
.text:000000000000709C                 align 20h
.text:00000000000070A0
.text:00000000000070A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000070A0
.text:00000000000070A0
.text:00000000000070A0 ; __int64 __fastcall strcoll_loop(char *s1)
.text:00000000000070A0 strcoll_loop    proc near               ; CODE XREF: memcoll+66↓p
.text:00000000000070A0                                         ; memcoll0+40↓j
.text:00000000000070A0 ; __unwind {
.text:00000000000070A0                 push    r15
.text:00000000000070A2                 push    r14
.text:00000000000070A4                 mov     r14, rcx
.text:00000000000070A7                 push    r13
.text:00000000000070A9                 push    r12
.text:00000000000070AB                 mov     r13, rsi
.text:00000000000070AE                 push    rbp
.text:00000000000070AF                 push    rbx
.text:00000000000070B0                 mov     r12, rdi
.text:00000000000070B3                 mov     rbp, rdx
.text:00000000000070B6                 sub     rsp, 8
.text:00000000000070BA                 call    ___errno_location
.text:00000000000070BF                 mov     r15, rax
.text:00000000000070C2                 jmp     short loc_70F3
.text:00000000000070C2 ; ---------------------------------------------------------------------------
.text:00000000000070C4                 align 8
.text:00000000000070C8
.text:00000000000070C8 loc_70C8:                               ; CODE XREF: strcoll_loop+67↓j
.text:00000000000070C8                 mov     rdi, r12        ; s
.text:00000000000070CB                 call    _strlen
.text:00000000000070D0                 mov     rdi, rbp        ; s
.text:00000000000070D3                 lea     rbx, [rax+1]
.text:00000000000070D7                 call    _strlen
.text:00000000000070DC                 add     rax, 1
.text:00000000000070E0                 add     r12, rbx
.text:00000000000070E3                 add     rbp, rax
.text:00000000000070E6                 sub     r14, rax
.text:00000000000070E9                 sub     r13, rbx
.text:00000000000070EC                 jz      short loc_7120
.text:00000000000070EE                 test    r14, r14
.text:00000000000070F1                 jz      short loc_7140
.text:00000000000070F3
.text:00000000000070F3 loc_70F3:                               ; CODE XREF: strcoll_loop+22↑j
.text:00000000000070F3                 mov     dword ptr [r15], 0
.text:00000000000070FA                 mov     rsi, rbp        ; s2
.text:00000000000070FD                 mov     rdi, r12        ; s1
.text:0000000000007100                 call    _strcoll
.text:0000000000007105                 test    eax, eax
.text:0000000000007107                 jz      short loc_70C8
.text:0000000000007109                 add     rsp, 8
.text:000000000000710D                 pop     rbx
.text:000000000000710E                 pop     rbp
.text:000000000000710F                 pop     r12
.text:0000000000007111                 pop     r13
.text:0000000000007113                 pop     r14
.text:0000000000007115                 pop     r15
.text:0000000000007117                 retn
.text:0000000000007117 ; ---------------------------------------------------------------------------
.text:0000000000007118                 align 20h
.text:0000000000007120
.text:0000000000007120 loc_7120:                               ; CODE XREF: strcoll_loop+4C↑j
.text:0000000000007120                 xor     eax, eax
.text:0000000000007122                 test    r14, r14
.text:0000000000007125                 setnz   al
.text:0000000000007128                 add     rsp, 8
.text:000000000000712C                 pop     rbx
.text:000000000000712D                 neg     eax
.text:000000000000712F                 pop     rbp
.text:0000000000007130                 pop     r12
.text:0000000000007132                 pop     r13
.text:0000000000007134                 pop     r14
.text:0000000000007136                 pop     r15
.text:0000000000007138                 retn
.text:0000000000007138 ; ---------------------------------------------------------------------------
.text:0000000000007139                 align 20h
.text:0000000000007140
.text:0000000000007140 loc_7140:                               ; CODE XREF: strcoll_loop+51↑j
.text:0000000000007140                 add     rsp, 8
.text:0000000000007144                 mov     eax, 1
.text:0000000000007149                 pop     rbx
.text:000000000000714A                 pop     rbp
.text:000000000000714B                 pop     r12
.text:000000000000714D                 pop     r13
.text:000000000000714F                 pop     r14
.text:0000000000007151                 pop     r15
.text:0000000000007153                 retn
.text:0000000000007153 ; } // starts at 70A0
.text:0000000000007153 strcoll_loop    endp
.text:0000000000007153
.text:0000000000007153 ; ---------------------------------------------------------------------------
.text:0000000000007154                 align 20h
.text:0000000000007160
.text:0000000000007160 ; =============== S U B R O U T I N E =======================================
.text:0000000000007160
.text:0000000000007160
.text:0000000000007160 ; __int64 __fastcall memcoll(char *s1, size_t n, void *s2)
.text:0000000000007160                 public memcoll
.text:0000000000007160 memcoll         proc near               ; CODE XREF: xmemcoll+14↑p
.text:0000000000007160
.text:0000000000007160 var_40          = dword ptr -40h
.text:0000000000007160 var_39          = byte ptr -39h
.text:0000000000007160
.text:0000000000007160 ; __unwind {
.text:0000000000007160                 push    r15
.text:0000000000007162                 push    r14
.text:0000000000007164                 mov     r15, rdx
.text:0000000000007167                 push    r13
.text:0000000000007169                 push    r12
.text:000000000000716B                 mov     r14, rdi
.text:000000000000716E                 push    rbp
.text:000000000000716F                 push    rbx
.text:0000000000007170                 mov     rbp, rcx
.text:0000000000007173                 mov     rbx, rsi
.text:0000000000007176                 sub     rsp, 18h
.text:000000000000717A                 cmp     rsi, rcx
.text:000000000000717D                 jnz     short loc_7192
.text:000000000000717F                 mov     rdx, rsi        ; n
.text:0000000000007182                 mov     rsi, r15        ; s2
.text:0000000000007185                 call    _memcmp
.text:000000000000718A                 test    eax, eax
.text:000000000000718C                 mov     [rsp+48h+var_40], eax
.text:0000000000007190                 jz      short loc_71F8
.text:0000000000007192
.text:0000000000007192 loc_7192:                               ; CODE XREF: memcoll+1D↑j
.text:0000000000007192                 lea     r13, [r14+rbx]
.text:0000000000007196                 lea     r12, [r15+rbp]
.text:000000000000719A                 lea     rcx, [rbp+1]
.text:000000000000719E                 lea     rsi, [rbx+1]
.text:00000000000071A2                 mov     rdx, r15
.text:00000000000071A5                 mov     rdi, r14        ; s1
.text:00000000000071A8                 movzx   r9d, byte ptr [r13+0]
.text:00000000000071AD                 movzx   r8d, byte ptr [r12]
.text:00000000000071B2                 mov     byte ptr [r13+0], 0
.text:00000000000071B7                 mov     byte ptr [r12], 0
.text:00000000000071BC                 mov     [rsp+48h+var_39], r9b
.text:00000000000071C1                 mov     byte ptr [rsp+48h+var_40], r8b
.text:00000000000071C6                 call    strcoll_loop
.text:00000000000071CB                 movzx   r9d, [rsp+48h+var_39]
.text:00000000000071D1                 movzx   r8d, byte ptr [rsp+48h+var_40]
.text:00000000000071D7                 mov     edx, eax
.text:00000000000071D9                 mov     [r13+0], r9b
.text:00000000000071DD                 mov     [r12], r8b
.text:00000000000071E1
.text:00000000000071E1 loc_71E1:                               ; CODE XREF: memcoll+A7↓j
.text:00000000000071E1                 add     rsp, 18h
.text:00000000000071E5                 mov     eax, edx
.text:00000000000071E7                 pop     rbx
.text:00000000000071E8                 pop     rbp
.text:00000000000071E9                 pop     r12
.text:00000000000071EB                 pop     r13
.text:00000000000071ED                 pop     r14
.text:00000000000071EF                 pop     r15
.text:00000000000071F1                 retn
.text:00000000000071F1 ; ---------------------------------------------------------------------------
.text:00000000000071F2                 align 8
.text:00000000000071F8
.text:00000000000071F8 loc_71F8:                               ; CODE XREF: memcoll+30↑j
.text:00000000000071F8                 call    ___errno_location
.text:00000000000071FD                 mov     edx, [rsp+48h+var_40]
.text:0000000000007201                 mov     dword ptr [rax], 0
.text:0000000000007207                 jmp     short loc_71E1
.text:0000000000007207 ; } // starts at 7160
.text:0000000000007207 memcoll         endp
.text:0000000000007207
.text:0000000000007207 ; ---------------------------------------------------------------------------
.text:0000000000007209                 align 10h
.text:0000000000007210
.text:0000000000007210 ; =============== S U B R O U T I N E =======================================
.text:0000000000007210
.text:0000000000007210
.text:0000000000007210 ; __int64 __fastcall memcoll0(char *s1, size_t n, void *s2)
.text:0000000000007210                 public memcoll0
.text:0000000000007210 memcoll0        proc near               ; CODE XREF: xmemcoll0+14↑p
.text:0000000000007210
.text:0000000000007210 var_20          = qword ptr -20h
.text:0000000000007210
.text:0000000000007210 ; __unwind {
.text:0000000000007210                 push    r12
.text:0000000000007212                 push    rbp
.text:0000000000007213                 mov     r12, rdx
.text:0000000000007216                 push    rbx
.text:0000000000007217                 mov     rbp, rdi
.text:000000000000721A                 mov     rbx, rsi
.text:000000000000721D                 sub     rsp, 10h
.text:0000000000007221                 cmp     rsi, rcx
.text:0000000000007224                 jnz     short loc_723F
.text:0000000000007226                 mov     rdx, rsi        ; n
.text:0000000000007229                 mov     rsi, r12        ; s2
.text:000000000000722C                 mov     [rsp+28h+var_20], rcx
.text:0000000000007231                 call    _memcmp
.text:0000000000007236                 test    eax, eax
.text:0000000000007238                 mov     rcx, [rsp+28h+var_20]
.text:000000000000723D                 jz      short loc_7258
.text:000000000000723F
.text:000000000000723F loc_723F:                               ; CODE XREF: memcoll0+14↑j
.text:000000000000723F                 add     rsp, 10h
.text:0000000000007243                 mov     rdx, r12
.text:0000000000007246                 mov     rsi, rbx
.text:0000000000007249                 mov     rdi, rbp        ; s1
.text:000000000000724C                 pop     rbx
.text:000000000000724D                 pop     rbp
.text:000000000000724E                 pop     r12
.text:0000000000007250                 jmp     strcoll_loop
.text:0000000000007250 ; ---------------------------------------------------------------------------
.text:0000000000007255                 align 8
.text:0000000000007258
.text:0000000000007258 loc_7258:                               ; CODE XREF: memcoll0+2D↑j
.text:0000000000007258                 call    ___errno_location
.text:000000000000725D                 mov     dword ptr [rax], 0
.text:0000000000007263                 add     rsp, 10h
.text:0000000000007267                 xor     eax, eax
.text:0000000000007269                 pop     rbx
.text:000000000000726A                 pop     rbp
.text:000000000000726B                 pop     r12
.text:000000000000726D                 retn
.text:000000000000726D ; } // starts at 7210
.text:000000000000726D memcoll0        endp
.text:000000000000726D
.text:000000000000726D ; ---------------------------------------------------------------------------
.text:000000000000726E                 align 10h
.text:0000000000007270
.text:0000000000007270 ; =============== S U B R O U T I N E =======================================
.text:0000000000007270
.text:0000000000007270 ; Attributes: info_from_lumina
.text:0000000000007270
.text:0000000000007270 ; void _libc_csu_init(void)
.text:0000000000007270                 public __libc_csu_init
.text:0000000000007270 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000007270 ; __unwind {
.text:0000000000007270                 push    r15
.text:0000000000007272                 push    r14
.text:0000000000007274                 mov     r15, rdx
.text:0000000000007277                 push    r13
.text:0000000000007279                 push    r12
.text:000000000000727B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000007282                 push    rbp
.text:0000000000007283                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000728A                 push    rbx
.text:000000000000728B                 mov     r13d, edi
.text:000000000000728E                 mov     r14, rsi
.text:0000000000007291                 sub     rbp, r12
.text:0000000000007294                 sub     rsp, 8
.text:0000000000007298                 sar     rbp, 3
.text:000000000000729C                 call    _init_proc
.text:00000000000072A1                 test    rbp, rbp
.text:00000000000072A4                 jz      short loc_72C6
.text:00000000000072A6                 xor     ebx, ebx
.text:00000000000072A8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000072B0
.text:00000000000072B0 loc_72B0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000072B0                 mov     rdx, r15
.text:00000000000072B3                 mov     rsi, r14
.text:00000000000072B6                 mov     edi, r13d
.text:00000000000072B9                 call    ds:(__frame_dummy_init_array_entry - 20AAB0h)[r12+rbx*8]
.text:00000000000072BD                 add     rbx, 1
.text:00000000000072C1                 cmp     rbp, rbx
.text:00000000000072C4                 jnz     short loc_72B0
.text:00000000000072C6
.text:00000000000072C6 loc_72C6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000072C6                 add     rsp, 8
.text:00000000000072CA                 pop     rbx
.text:00000000000072CB                 pop     rbp
.text:00000000000072CC                 pop     r12
.text:00000000000072CE                 pop     r13
.text:00000000000072D0                 pop     r14
.text:00000000000072D2                 pop     r15
.text:00000000000072D4                 retn
.text:00000000000072D4 ; } // starts at 7270
.text:00000000000072D4 __libc_csu_init endp
.text:00000000000072D4
.text:00000000000072D4 ; ---------------------------------------------------------------------------
.text:00000000000072D5                 align 20h
.text:00000000000072E0
.text:00000000000072E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000072E0
.text:00000000000072E0
.text:00000000000072E0 ; void _libc_csu_fini(void)
.text:00000000000072E0                 public __libc_csu_fini
.text:00000000000072E0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000072E0 ; __unwind {
.text:00000000000072E0                 rep retn
.text:00000000000072E0 ; } // starts at 72E0
.text:00000000000072E0 __libc_csu_fini endp
.text:00000000000072E0
.text:00000000000072E0 ; ---------------------------------------------------------------------------
.text:00000000000072E2                 align 10h
.text:00000000000072F0
.text:00000000000072F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000072F0
.text:00000000000072F0
.text:00000000000072F0 atexit          proc near               ; CODE XREF: main+9A↑p
.text:00000000000072F0                                         ; main+A6↑p
.text:00000000000072F0 ; __unwind {
.text:00000000000072F0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:00000000000072F7                 xor     esi, esi        ; obj
.text:00000000000072F9                 jmp     ___cxa_atexit
.text:00000000000072F9 ; } // starts at 72F0
.text:00000000000072F9 atexit          endp
.text:00000000000072F9
.text:00000000000072F9 _text           ends
.text:00000000000072F9
LOAD:00000000000072FE ; ===========================================================================
LOAD:00000000000072FE
LOAD:00000000000072FE ; Segment type: Pure code
LOAD:00000000000072FE ; Segment permissions: Read/Execute
LOAD:00000000000072FE LOAD            segment byte public 'CODE' use64
LOAD:00000000000072FE                 assume cs:LOAD
LOAD:00000000000072FE                 ;org 72FEh
LOAD:00000000000072FE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000072FE                 align 20h
LOAD:00000000000072FE LOAD            ends
LOAD:00000000000072FE
.fini:0000000000007300 ; ===========================================================================
.fini:0000000000007300
.fini:0000000000007300 ; Segment type: Pure code
.fini:0000000000007300 ; Segment permissions: Read/Execute
.fini:0000000000007300 _fini           segment dword public 'CODE' use64
.fini:0000000000007300                 assume cs:_fini
.fini:0000000000007300                 ;org 7300h
.fini:0000000000007300                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000007300
.fini:0000000000007300 ; =============== S U B R O U T I N E =======================================
.fini:0000000000007300
.fini:0000000000007300
.fini:0000000000007300                 public _term_proc
.fini:0000000000007300 _term_proc      proc near
.fini:0000000000007300                 sub     rsp, 8          ; _fini
.fini:0000000000007304                 add     rsp, 8
.fini:0000000000007308                 retn
.fini:0000000000007308 _term_proc      endp
.fini:0000000000007308
.fini:0000000000007308 _fini           ends
.fini:0000000000007308
LOAD:0000000000007309 ; ===========================================================================
LOAD:0000000000007309
LOAD:0000000000007309 ; Segment type: Pure code
LOAD:0000000000007309 ; Segment permissions: Read/Execute
LOAD:0000000000007309 LOAD            segment byte public 'CODE' use64
LOAD:0000000000007309                 assume cs:LOAD
LOAD:0000000000007309                 ;org 7309h
LOAD:0000000000007309                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000007309                 align 20h
LOAD:0000000000007309 LOAD            ends
LOAD:0000000000007309
.rodata:0000000000007320 ; ===========================================================================
.rodata:0000000000007320
.rodata:0000000000007320 ; Segment type: Pure data
.rodata:0000000000007320 ; Segment permissions: Read
.rodata:0000000000007320 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000007320                 assume cs:_rodata
.rodata:0000000000007320                 ;org 7320h
.rodata:0000000000007320                 public _IO_stdin_used
.rodata:0000000000007320 _IO_stdin_used  db    1
.rodata:0000000000007321                 db    0
.rodata:0000000000007322                 db    2
.rodata:0000000000007323                 db    0
.rodata:0000000000007324                 db    0
.rodata:0000000000007325                 db    0
.rodata:0000000000007326                 db    0
.rodata:0000000000007327                 db    0
.rodata:0000000000007328 ; const char aIncompatibleJo[]
.rodata:0000000000007328 aIncompatibleJo db 'incompatible join fields %lu, %lu',0
.rodata:0000000000007328                                         ; DATA XREF: set_join_field+21↑o
.rodata:000000000000734A                 align 10h
.rodata:0000000000007350 ; const char aInvalidFileNum[]
.rodata:0000000000007350 aInvalidFileNum db 'invalid file number in field spec: %s',0
.rodata:0000000000007350                                         ; DATA XREF: add_field_list+AD↑o
.rodata:0000000000007376                 align 8
.rodata:0000000000007378 ; const char aTrySHelpForMor[]
.rodata:0000000000007378 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000007378                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000739F                 align 20h
.rodata:00000000000073A0 ; const char aUsageSOptionFi[]
.rodata:00000000000073A0 aUsageSOptionFi db 'Usage: %s [OPTION]... FILE1 FILE2',0Ah,0
.rodata:00000000000073A0                                         ; DATA XREF: usage:loc_371D↑o
.rodata:00000000000073C3                 align 8
.rodata:00000000000073C8 ; const char aForEachPairOfI[]
.rodata:00000000000073C8 aForEachPairOfI db 'For each pair of input lines with identical join fields, write a '
.rodata:00000000000073C8                                         ; DATA XREF: usage+84↑o
.rodata:00000000000073C8                 db 'line to',0Ah
.rodata:00000000000073C8                 db 'standard output.  The default join field is the first, delimited '
.rodata:00000000000073C8                 db 'by blanks.',0Ah,0
.rodata:000000000000745E                 align 20h
.rodata:0000000000007460 ; const char aWhenFile1OrFil[]
.rodata:0000000000007460 aWhenFile1OrFil db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:0000000000007460                 db 'When FILE1 or FILE2 (not both) is -, read standard input.',0Ah,0
.rodata:000000000000749C                 align 20h
.rodata:00000000000074A0 ; const char aAFilenumAlsoPr[]
.rodata:00000000000074A0 aAFilenumAlsoPr db 0Ah                  ; DATA XREF: usage+CE↑o
.rodata:00000000000074A0                 db '  -a FILENUM        also print unpairable lines from file FILENUM'
.rodata:00000000000074A0                 db ', where',0Ah
.rodata:00000000000074A0                 db '                      FILENUM is 1 or 2, corresponding to FILE1 o'
.rodata:00000000000074A0                 db 'r FILE2',0Ah
.rodata:00000000000074A0                 db '  -e EMPTY          replace missing input fields with EMPTY',0Ah,0
.rodata:0000000000007570 ; const char aIIgnoreCaseIgn[]
.rodata:0000000000007570 aIIgnoreCaseIgn db '  -i, --ignore-case  ignore differences in case when comparing fi'
.rodata:0000000000007570                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000007570                 db 'elds',0Ah
.rodata:0000000000007570                 db '  -j FIELD          equivalent to ',27h,'-1 FIELD -2 FIELD',27h,0Ah
.rodata:0000000000007570                 db '  -o FORMAT         obey FORMAT while constructing output line',0Ah
.rodata:0000000000007570                 db '  -t CHAR           use CHAR as input and output field separator',0Ah
.rodata:0000000000007570                 db 0
.rodata:000000000000766D                 align 10h
.rodata:0000000000007670 ; const char aVFilenumLikeAF[]
.rodata:0000000000007670 aVFilenumLikeAF db '  -v FILENUM        like -a FILENUM, but suppress joined output l'
.rodata:0000000000007670                                         ; DATA XREF: usage+118↑o
.rodata:0000000000007670                 db 'ines',0Ah
.rodata:0000000000007670                 db '  -1 FIELD          join on this FIELD of file 1',0Ah
.rodata:0000000000007670                 db '  -2 FIELD          join on this FIELD of file 2',0Ah
.rodata:0000000000007670                 db '  --check-order     check that the input is correctly sorted, eve'
.rodata:0000000000007670                 db 'n',0Ah
.rodata:0000000000007670                 db '                      if all input lines are pairable',0Ah
.rodata:0000000000007670                 db '  --nocheck-order   do not check that the input is correctly sort'
.rodata:0000000000007670                 db 'ed',0Ah
.rodata:0000000000007670                 db '  --header          treat the first line in each file as field he'
.rodata:0000000000007670                 db 'aders,',0Ah
.rodata:0000000000007670                 db '                      print them without trying to pair them',0Ah
.rodata:0000000000007670                 db 0
.rodata:000000000000785B                 align 20h
.rodata:0000000000007860 ; const char aZZeroTerminate[]
.rodata:0000000000007860 aZZeroTerminate db '  -z, --zero-terminated     line delimiter is NUL, not newline',0Ah
.rodata:0000000000007860                                         ; DATA XREF: usage+13D↑o
.rodata:0000000000007860                 db 0
.rodata:00000000000078A0 ; const char aHelpDisplayThi[]
.rodata:00000000000078A0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:00000000000078A0                                         ; DATA XREF: usage+162↑o
.rodata:00000000000078CD                 align 10h
.rodata:00000000000078D0 ; const char aVersionOutputV[]
.rodata:00000000000078D0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:00000000000078D0                                         ; DATA XREF: usage+187↑o
.rodata:0000000000007906                 align 8
.rodata:0000000000007908 ; const char aUnlessTCharIsG[]
.rodata:0000000000007908 aUnlessTCharIsG db 0Ah                  ; DATA XREF: usage+1AC↑o
.rodata:0000000000007908                 db 'Unless -t CHAR is given, leading blanks separate fields and are i'
.rodata:0000000000007908                 db 'gnored,',0Ah
.rodata:0000000000007908                 db 'else fields are separated by CHAR.  Any FIELD is a field number c'
.rodata:0000000000007908                 db 'ounted',0Ah
.rodata:0000000000007908                 db 'from 1.  FORMAT is one or more comma or blank separated specifica'
.rodata:0000000000007908                 db 'tions,',0Ah
.rodata:0000000000007908                 db 'each being ',27h,'FILENUM.FIELD',27h,' or ',27h,'0',27h,'.  Defau'
.rodata:0000000000007908                 db 'lt FORMAT outputs the join field,',0Ah
.rodata:0000000000007908                 db 'the remaining fields from FILE1, the remaining fields from FILE2,'
.rodata:0000000000007908                 db ' all',0Ah
.rodata:0000000000007908                 db 'separated by CHAR.  If FORMAT is the keyword ',27h,'auto',27h,', '
.rodata:0000000000007908                 db 'then the first',0Ah
.rodata:0000000000007908                 db 'line of each file determines the number of fields output for each'
.rodata:0000000000007908                 db ' line.',0Ah
.rodata:0000000000007908                 db 0Ah
.rodata:0000000000007908                 db 'Important: FILE1 and FILE2 must be sorted on the join fields.',0Ah
.rodata:0000000000007908                 db 'E.g., use "sort -k 1b,1" if ',27h,'join',27h,' has no options,',0Ah
.rodata:0000000000007908                 db 'or use "join -t ',27h,27h,'" if ',27h,'sort',27h,' has no options'
.rodata:0000000000007908                 db '.',0Ah
.rodata:0000000000007908                 db 'Note, comparisons honor the rules specified by ',27h,'LC_COLLATE',27h
.rodata:0000000000007908                 db '.',0Ah
.rodata:0000000000007908                 db 'If the input is not sorted and some lines cannot be joined, a',0Ah
.rodata:0000000000007908                 db 'warning message will be given.',0Ah,0
.rodata:0000000000007C3A                 align 20h
.rodata:0000000000007C40 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000007C40                                         ; DATA XREF: usage+29F↑o
.rodata:0000000000007C40                                         ; usage+303↑o ...
.rodata:0000000000007C68 ; const char aReportAnyTrans[]
.rodata:0000000000007C68 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000007C68                                         ; DATA XREF: usage+3F7↑o
.rodata:0000000000007C68                 db 'am/>',0Ah,0
.rodata:0000000000007CAF                 align 10h
.rodata:0000000000007CB0 ; const char aOrAvailableLoc[]
.rodata:0000000000007CB0 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000007CB0                                         ; DATA XREF: usage:loc_39EE↑o
.rodata:0000000000007CE3                 align 8
.rodata:0000000000007CE8 ; const char aConflictingEmp[]
.rodata:0000000000007CE8 aConflictingEmp db 'conflicting empty-field replacement strings',0
.rodata:0000000000007CE8                                         ; DATA XREF: main:loc_272F↑o
.rodata:0000000000007D14                 align 8
.rodata:0000000000007D18 ; const char aBothFilesCanno[]
.rodata:0000000000007D18 aBothFilesCanno db 'both files cannot be standard input',0
.rodata:0000000000007D18                                         ; DATA XREF: main:loc_27AA↑o
.rodata:0000000000007D3C ; const char msgid[]
.rodata:0000000000007D3C msgid           db 'invalid field number: %s',0
.rodata:0000000000007D3C                                         ; DATA XREF: main+D55↑o
.rodata:0000000000007D3C                                         ; string_to_join_field+71↑o
.rodata:0000000000007D55 ; const char accept[]
.rodata:0000000000007D55 accept          db ', ',9,0             ; DATA XREF: add_field_list:loc_2B99↑o
.rodata:0000000000007D55                                         ; main+53↑o ...
.rodata:0000000000007D59 ; const char aInvalidFieldSp[]
.rodata:0000000000007D59 aInvalidFieldSp db 'invalid field specifier: %s',0
.rodata:0000000000007D59                                         ; DATA XREF: add_field_list+DF↑o
.rodata:0000000000007D59                                         ; add_field_list+111↑o
.rodata:0000000000007D75 ; const char aReadError[]
.rodata:0000000000007D75 aReadError      db 'read error',0       ; DATA XREF: get_line:loc_35A6↑o
.rodata:0000000000007D80 ; const char aSLuIsNotSorted[]
.rodata:0000000000007D80 aSLuIsNotSorted db '%s:%lu: is not sorted: %.*s',0
.rodata:0000000000007D80                                         ; DATA XREF: get_line+20E↑o
.rodata:0000000000007D9C aJoin           db 'join',0             ; DATA XREF: main+27B↑o
.rodata:0000000000007D9C                                         ; usage+1C5↑o ...
.rodata:0000000000007DA1 asc_7DA1        db '[',0                ; DATA XREF: usage+1D1↑o
.rodata:0000000000007DA3 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1F8↑o
.rodata:0000000000007DB3 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000007DB3                                         ; DATA XREF: usage+228↑o
.rodata:0000000000007DB3                                         ; usage+31C↑o ...
.rodata:0000000000007DC9 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+239↑o
.rodata:0000000000007DD3 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+245↑o
.rodata:0000000000007DE2 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+1D8↑o
.rodata:0000000000007DEC aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+204↑o
.rodata:0000000000007DF6 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+21C↑o
.rodata:0000000000007E00 ; const char aSOnlineHelpS[]
.rodata:0000000000007E00 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+28A↑o
.rodata:0000000000007E00                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000007E17 unk_7E17        db  47h ; G             ; DATA XREF: main+274↑o
.rodata:0000000000007E17                                         ; usage+2A6↑o ...
.rodata:0000000000007E18                 db  4Eh ; N
.rodata:0000000000007E19                 db  55h ; U
.rodata:0000000000007E1A                 db  20h
.rodata:0000000000007E1B ; const char domainname[]
.rodata:0000000000007E1B domainname      db 'coreutils',0        ; DATA XREF: main+6B↑o
.rodata:0000000000007E1B                                         ; main+77↑o ...
.rodata:0000000000007E25 ; const char aEn[]
.rodata:0000000000007E25 aEn             db 'en_',0              ; DATA XREF: usage+2CD↑o
.rodata:0000000000007E25                                         ; usage+38E↑o
.rodata:0000000000007E29 ; const char aFullDocumentat[]
.rodata:0000000000007E29 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000007E29                                         ; DATA XREF: usage:loc_39A9↑o
.rodata:0000000000007E29                                         ; usage:loc_3A66↑o
.rodata:0000000000007E44 ; const char aExtraOperandS[]
.rodata:0000000000007E44 aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: add_file_name_constprop_7+185↑o
.rodata:0000000000007E55 ; const char dirname[]
.rodata:0000000000007E55 dirname         db '/usr/local/share/locale',0
.rodata:0000000000007E55                                         ; DATA XREF: main+64↑o
.rodata:0000000000007E6D aAuto           db 'auto',0             ; DATA XREF: main+2F7↑o
.rodata:0000000000007E72 ; const char s2[]
.rodata:0000000000007E72 s2              db '\0',0               ; DATA XREF: main+479↑o
.rodata:0000000000007E75 ; const char aMultiCharacter[]
.rodata:0000000000007E75 aMultiCharacter db 'multi-character tab %s',0
.rodata:0000000000007E75                                         ; DATA XREF: main+E66↑o
.rodata:0000000000007E8C ; const char aIncompatibleTa[]
.rodata:0000000000007E8C aIncompatibleTa db 'incompatible tabs',0
.rodata:0000000000007E8C                                         ; DATA XREF: main:loc_28D0↑o
.rodata:0000000000007E9E aMikeHaertel    db 'Mike Haertel',0     ; DATA XREF: main+26D↑o
.rodata:0000000000007EAB ; const char shortopts[]
.rodata:0000000000007EAB shortopts       db '-a:e:i1:2:j:o:t:v:z',0
.rodata:0000000000007EAB                                         ; DATA XREF: main+13B↑o
.rodata:0000000000007EBF ; const char aMissingOperand[]
.rodata:0000000000007EBF aMissingOperand db 'missing operand',0  ; DATA XREF: main+EFA↑o
.rodata:0000000000007ECF ; const char aMissingOperand_0[]
.rodata:0000000000007ECF aMissingOperand_0 db 'missing operand after %s',0
.rodata:0000000000007ECF                                         ; DATA XREF: main+F4E↑o
.rodata:0000000000007EE8 ; const char aInputIsNotInSo[]
.rodata:0000000000007EE8 aInputIsNotInSo db 'input is not in sorted order',0
.rodata:0000000000007EE8                                         ; DATA XREF: main:loc_2753↑o
.rodata:0000000000007F05 aIgnoreCase     db 'ignore-case',0      ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000007F11 aNocheckOrder   db 'nocheck-order',0    ; DATA XREF: .data.rel.ro:000000000020AB00↓o
.rodata:0000000000007F11                                         ; .data.rel.ro:000000000020AAE0↓o
.rodata:0000000000007F1F aZeroTerminated db 'zero-terminated',0  ; DATA XREF: .data.rel.ro:000000000020AB20↓o
.rodata:0000000000007F2F aHeader         db 'header',0           ; DATA XREF: .data.rel.ro:000000000020AB40↓o
.rodata:0000000000007F2F                                         ; main:loc_2367↑o ...
.rodata:0000000000007F36 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000020AB60↓o
.rodata:0000000000007F3B aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000020AB80↓o
.rodata:0000000000007F43 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000007F48 ; const char aWriteError[]
.rodata:0000000000007F48 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_3D03↑o
.rodata:0000000000007F54 ; const char format[]
.rodata:0000000000007F54 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000007F5B aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000007F5D aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_3E90↑o
.rodata:0000000000007F63                 align 8
.rodata:0000000000007F68 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000007F68                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000007FA0 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000007FA8 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000007FA8                                         ; main+562↑o ...
.rodata:0000000000007FAC unk_7FAC        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000007FAD                 db  80h
.rodata:0000000000007FAE                 db  98h
.rodata:0000000000007FAF                 db    0
.rodata:0000000000007FB0 unk_7FB0        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000007FB1                 db  80h
.rodata:0000000000007FB2                 db  99h
.rodata:0000000000007FB3                 db    0
.rodata:0000000000007FB4 unk_7FB4        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000007FB5                 db    7
.rodata:0000000000007FB6                 db  65h ; e
.rodata:0000000000007FB7                 db    0
.rodata:0000000000007FB8 unk_7FB8        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000007FB9                 db 0AFh
.rodata:0000000000007FBA                 db    0
.rodata:0000000000007FBB unk_7FBB        db  22h ; "             ; DATA XREF: gettext_quote:loc_4100↑o
.rodata:0000000000007FBB                                         ; quotearg_buffer_restyled:loc_4EBB↑o ...
.rodata:0000000000007FBC                 db    0
.rodata:0000000000007FBD ; const char asc_7FBD[2]
.rodata:0000000000007FBD asc_7FBD        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000007FBD                                         ; quotearg_buffer_restyled:loc_4283↑o ...
.rodata:0000000000007FBF ; const char asc_7FBF[2]
.rodata:0000000000007FBF asc_7FBF        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000007FBF                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000007FC1 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000007FC9 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020ABC8↓o
.rodata:0000000000007FCF aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020ABD0↓o
.rodata:0000000000007FDC aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020ABD8↓o
.rodata:0000000000007FDC                                         ; .data.rel.ro:000000000020ABF8↓o
.rodata:0000000000007FE9 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000007FE9                                         ; DATA XREF: .data.rel.ro:000000000020ABE0↓o
.rodata:0000000000007FFD aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:000000000020ABE8↓o
.rodata:0000000000007FFF aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020ABF0↓o
.rodata:0000000000008007 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020AC08↓o
.rodata:000000000000800F                 align 20h
.rodata:0000000000008020 jpt_4261        dd offset loc_500A - 8020h
.rodata:0000000000008020                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000008020                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000008020                 dd offset loc_4263 - 8020h ; jump table for switch statement
.rodata:0000000000008020                 dd offset loc_5238 - 8020h
.rodata:0000000000008020                 dd offset loc_5044 - 8020h
.rodata:0000000000008020                 dd offset loc_4E34 - 8020h
.rodata:0000000000008020                 dd offset loc_4E90 - 8020h
.rodata:0000000000008020                 dd offset loc_4EE5 - 8020h
.rodata:0000000000008020                 dd offset loc_4F2A - 8020h
.rodata:0000000000008020                 dd offset loc_4F64 - 8020h
.rodata:0000000000008020                 dd offset loc_4F64 - 8020h
.rodata:0000000000008020                 dd offset loc_4F64 - 8020h
.rodata:000000000000804C jpt_43BE        dd offset loc_45E0 - 804Ch, offset def_43BE - 804Ch, offset def_43BE - 804Ch
.rodata:000000000000804C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000804C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000804C                 dd offset def_43BE - 804Ch, offset def_43BE - 804Ch, offset def_43BE - 804Ch ; jump table for switch statement
.rodata:000000000000804C                 dd offset def_43BE - 804Ch, offset loc_4620 - 804Ch, offset loc_4528 - 804Ch
.rodata:000000000000804C                 dd offset loc_44E8 - 804Ch, offset loc_46B0 - 804Ch, offset loc_46A0 - 804Ch
.rodata:000000000000804C                 dd offset loc_4690 - 804Ch, offset loc_4680 - 804Ch, offset def_43BE - 804Ch
.rodata:000000000000804C                 dd offset def_43BE - 804Ch, offset def_43BE - 804Ch, offset def_43BE - 804Ch
.rodata:000000000000804C                 dd offset def_43BE - 804Ch, offset def_43BE - 804Ch, offset def_43BE - 804Ch
.rodata:000000000000804C                 dd offset def_43BE - 804Ch, offset def_43BE - 804Ch, offset def_43BE - 804Ch
.rodata:000000000000804C                 dd offset def_43BE - 804Ch, offset def_43BE - 804Ch, offset def_43BE - 804Ch
.rodata:000000000000804C                 dd offset def_43BE - 804Ch, offset def_43BE - 804Ch, offset def_43BE - 804Ch
.rodata:000000000000804C                 dd offset def_43BE - 804Ch, offset def_43BE - 804Ch, offset loc_4670 - 804Ch
.rodata:000000000000804C                 dd offset loc_4660 - 804Ch, offset loc_4660 - 804Ch, offset loc_4630 - 804Ch
.rodata:000000000000804C                 dd offset loc_4660 - 804Ch, offset loc_4608 - 804Ch, offset loc_4660 - 804Ch
.rodata:000000000000804C                 dd offset loc_44C3 - 804Ch, offset loc_4660 - 804Ch, offset loc_4660 - 804Ch
.rodata:000000000000804C                 dd offset loc_4660 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4660 - 804Ch
.rodata:000000000000804C                 dd offset loc_4660 - 804Ch, offset loc_4660 - 804Ch, offset loc_4660 - 804Ch
.rodata:000000000000804C                 dd offset loc_4493 - 804Ch, offset def_43BE - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4660 - 804Ch, offset loc_4538 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4660 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4660 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_4608 - 804Ch, offset loc_4608 - 804Ch, offset loc_4608 - 804Ch
.rodata:000000000000804C                 dd offset loc_43C3 - 804Ch, offset loc_4660 - 804Ch, offset loc_43C3 - 804Ch
.rodata:000000000000804C                 dd offset loc_4630 - 804Ch
.rodata:0000000000008248 jpt_474A        dd offset loc_47B0 - 8248h, offset def_474A - 8248h, offset def_474A - 8248h
.rodata:0000000000008248                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000008248                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000008248                 dd offset def_474A - 8248h, offset def_474A - 8248h, offset def_474A - 8248h ; jump table for switch statement
.rodata:0000000000008248                 dd offset def_474A - 8248h, offset loc_47A0 - 8248h, offset loc_48F0 - 8248h
.rodata:0000000000008248                 dd offset loc_48D8 - 8248h, offset loc_4788 - 8248h, offset loc_48C8 - 8248h
.rodata:0000000000008248                 dd offset loc_4770 - 8248h, offset loc_48B0 - 8248h, offset def_474A - 8248h
.rodata:0000000000008248                 dd offset def_474A - 8248h, offset def_474A - 8248h, offset def_474A - 8248h
.rodata:0000000000008248                 dd offset def_474A - 8248h, offset def_474A - 8248h, offset def_474A - 8248h
.rodata:0000000000008248                 dd offset def_474A - 8248h, offset def_474A - 8248h, offset def_474A - 8248h
.rodata:0000000000008248                 dd offset def_474A - 8248h, offset def_474A - 8248h, offset def_474A - 8248h
.rodata:0000000000008248                 dd offset def_474A - 8248h, offset def_474A - 8248h, offset def_474A - 8248h
.rodata:0000000000008248                 dd offset def_474A - 8248h, offset def_474A - 8248h, offset loc_4898 - 8248h
.rodata:0000000000008248                 dd offset loc_4880 - 8248h, offset loc_4880 - 8248h, offset loc_4868 - 8248h
.rodata:0000000000008248                 dd offset loc_4880 - 8248h, offset loc_4850 - 8248h, offset loc_4880 - 8248h
.rodata:0000000000008248                 dd offset loc_44C0 - 8248h, offset loc_4880 - 8248h, offset loc_4880 - 8248h
.rodata:0000000000008248                 dd offset loc_4880 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4880 - 8248h
.rodata:0000000000008248                 dd offset loc_4880 - 8248h, offset loc_4880 - 8248h, offset loc_4880 - 8248h
.rodata:0000000000008248                 dd offset loc_4490 - 8248h, offset def_474A - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4880 - 8248h, offset loc_4750 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4880 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4880 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_4850 - 8248h, offset loc_4850 - 8248h, offset loc_4850 - 8248h
.rodata:0000000000008248                 dd offset loc_43C0 - 8248h, offset loc_4880 - 8248h, offset loc_43C0 - 8248h
.rodata:0000000000008248                 dd offset loc_4868 - 8248h
.rodata:0000000000008444                 align 20h
.rodata:0000000000008460                 public quoting_style_vals
.rodata:0000000000008460 quoting_style_vals db    0
.rodata:0000000000008461                 db    0
.rodata:0000000000008462                 db    0
.rodata:0000000000008463                 db    0
.rodata:0000000000008464                 db    1
.rodata:0000000000008465                 db    0
.rodata:0000000000008466                 db    0
.rodata:0000000000008467                 db    0
.rodata:0000000000008468                 db    2
.rodata:0000000000008469                 db    0
.rodata:000000000000846A                 db    0
.rodata:000000000000846B                 db    0
.rodata:000000000000846C                 db    3
.rodata:000000000000846D                 db    0
.rodata:000000000000846E                 db    0
.rodata:000000000000846F                 db    0
.rodata:0000000000008470                 db    4
.rodata:0000000000008471                 db    0
.rodata:0000000000008472                 db    0
.rodata:0000000000008473                 db    0
.rodata:0000000000008474                 db    5
.rodata:0000000000008475                 db    0
.rodata:0000000000008476                 db    0
.rodata:0000000000008477                 db    0
.rodata:0000000000008478                 db    6
.rodata:0000000000008479                 db    0
.rodata:000000000000847A                 db    0
.rodata:000000000000847B                 db    0
.rodata:000000000000847C                 db    7
.rodata:000000000000847D                 db    0
.rodata:000000000000847E                 db    0
.rodata:000000000000847F                 db    0
.rodata:0000000000008480                 db    8
.rodata:0000000000008481                 db    0
.rodata:0000000000008482                 db    0
.rodata:0000000000008483                 db    0
.rodata:0000000000008484                 db    9
.rodata:0000000000008485                 db    0
.rodata:0000000000008486                 db    0
.rodata:0000000000008487                 db    0
.rodata:0000000000008488 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000008494 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000849B ; const char aC_0[]
.rodata:000000000000849B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_5DBC↑o
.rodata:000000000000849F ; const char aWrittenByS[]
.rodata:000000000000849F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000849F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:00000000000084AF ; const char aWrittenBySAndS[]
.rodata:00000000000084AF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:00000000000084AF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000084C6 ; const char aWrittenBySSAnd[]
.rodata:00000000000084C6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000084C6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:00000000000084E2 ; const char aReportBugsToS[]
.rodata:00000000000084E2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:00000000000084E2                 db 'Report bugs to: %s',0Ah,0
.rodata:00000000000084F7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:00000000000084F7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000850D ; const char aSHomePageS[]
.rodata:000000000000850D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000850D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000008521                 align 8
.rodata:0000000000008528 ; const char aLicenseGplv3Gn[]
.rodata:0000000000008528 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000008528                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000008528                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000008528                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000008528                 db '.',0Ah
.rodata:0000000000008528                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000008528                 db 0Ah,0
.rodata:00000000000085F4                 align 8
.rodata:00000000000085F8 ; const char aWrittenBySSSAn[]
.rodata:00000000000085F8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000085F8                                         ; DATA XREF: version_etc_arn:loc_6010↑o
.rodata:00000000000085F8                 db 'and %s.',0Ah,0
.rodata:0000000000008618 ; const char aWrittenBySSSSA[]
.rodata:0000000000008618 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008618                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000008618                 db '%s, and %s.',0Ah,0
.rodata:000000000000863C                 align 20h
.rodata:0000000000008640 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000008640 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008640                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000008640                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000008668 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000008668 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008668                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000008668                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000008694                 align 8
.rodata:0000000000008698 ; const char aWrittenBySSSSS[]
.rodata:0000000000008698 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008698                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000008698                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000008698                 db 'and %s.',0Ah,0
.rodata:00000000000086C8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000086C8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000086C8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000086C8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000086C8                 db '%s, and %s.',0Ah,0
.rodata:00000000000086FC                 align 20h
.rodata:0000000000008700 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008700                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000008700                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000008700                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000873C                 align 20h
.rodata:0000000000008740 ; const char aGeneralHelpUsi[]
.rodata:0000000000008740 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000008740                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000008740                 db 0
.rodata:0000000000008781                 align 4
.rodata:0000000000008784 jpt_5E24        dd offset loc_5EA6 - 8784h
.rodata:0000000000008784                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000008784                                         ; version_etc_arn+9D↑r
.rodata:0000000000008784                 dd offset loc_5F38 - 8784h ; jump table for switch statement
.rodata:0000000000008784                 dd offset loc_5F78 - 8784h
.rodata:0000000000008784                 dd offset loc_5FC0 - 8784h
.rodata:0000000000008784                 dd offset loc_6010 - 8784h
.rodata:0000000000008784                 dd offset loc_6068 - 8784h
.rodata:0000000000008784                 dd offset loc_6098 - 8784h
.rodata:0000000000008784                 dd offset loc_6100 - 8784h
.rodata:0000000000008784                 dd offset loc_5E30 - 8784h
.rodata:0000000000008784                 dd offset loc_5EE0 - 8784h
.rodata:00000000000087AC                 align 20h
.rodata:00000000000087C0                 public version_etc_copyright
.rodata:00000000000087C0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000087C0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:00000000000087EF ; const char aMemoryExhauste[]
.rodata:00000000000087EF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000008800 ; const char aStringComparis[]
.rodata:0000000000008800 aStringComparis db 'string comparison failed',0
.rodata:0000000000008800                                         ; DATA XREF: collate_error+11↑o
.rodata:0000000000008819                 align 20h
.rodata:0000000000008820 ; const char aSetLcAllCToWor[]
.rodata:0000000000008820 aSetLcAllCToWor db 'Set LC_ALL=',27h,'C',27h,' to work around the problem.',0
.rodata:0000000000008820                                         ; DATA XREF: collate_error+39↑o
.rodata:000000000000884B                 align 10h
.rodata:0000000000008850 ; const char aTheStringsComp[]
.rodata:0000000000008850 aTheStringsComp db 'The strings compared were %s and %s.',0
.rodata:0000000000008850                                         ; DATA XREF: collate_error+84↑o
.rodata:0000000000008875                 align 8
.rodata:0000000000008878 ; const char file[]
.rodata:0000000000008878 file            db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:0000000000008878                                         ; DATA XREF: xstrtoul+38C↑o
.rodata:0000000000008898 ; const char assertion[]
.rodata:0000000000008898 assertion       db '0 <= strtol_base && strtol_base <= 36',0
.rodata:0000000000008898                                         ; DATA XREF: xstrtoul+393↑o
.rodata:00000000000088BE                 align 20h
.rodata:00000000000088C0 jpt_6966        dd offset loc_6AB6 - 88C0h, offset def_6966 - 88C0h, offset def_6966 - 88C0h
.rodata:00000000000088C0                                         ; DATA XREF: xstrtoul+1C4↑o
.rodata:00000000000088C0                                         ; xstrtoul+1CF↑r
.rodata:00000000000088C0                 dd offset loc_6A93 - 88C0h, offset def_6966 - 88C0h, offset loc_6ACC - 88C0h ; jump table for switch statement
.rodata:00000000000088C0                 dd offset def_6966 - 88C0h, offset def_6966 - 88C0h, offset def_6966 - 88C0h
.rodata:00000000000088C0                 dd offset loc_6A4F - 88C0h, offset def_6966 - 88C0h, offset loc_6968 - 88C0h
.rodata:00000000000088C0                 dd offset def_6966 - 88C0h, offset def_6966 - 88C0h, offset loc_6A70 - 88C0h
.rodata:00000000000088C0                 dd offset def_6966 - 88C0h, offset def_6966 - 88C0h, offset def_6966 - 88C0h
.rodata:00000000000088C0                 dd offset loc_6A2F - 88C0h, offset def_6966 - 88C0h, offset def_6966 - 88C0h
.rodata:00000000000088C0                 dd offset def_6966 - 88C0h, offset def_6966 - 88C0h, offset loc_6A0A - 88C0h
.rodata:00000000000088C0                 dd offset loc_69E4 - 88C0h, offset def_6966 - 88C0h, offset def_6966 - 88C0h
.rodata:00000000000088C0                 dd offset def_6966 - 88C0h, offset def_6966 - 88C0h, offset def_6966 - 88C0h
.rodata:00000000000088C0                 dd offset def_6966 - 88C0h, offset def_6966 - 88C0h, offset loc_69CD - 88C0h
.rodata:00000000000088C0                 dd offset loc_6990 - 88C0h, offset def_6966 - 88C0h, offset def_6966 - 88C0h
.rodata:00000000000088C0                 dd offset def_6966 - 88C0h, offset loc_6ACC - 88C0h, offset def_6966 - 88C0h
.rodata:00000000000088C0                 dd offset def_6966 - 88C0h, offset def_6966 - 88C0h, offset loc_6A4F - 88C0h
.rodata:00000000000088C0                 dd offset def_6966 - 88C0h, offset loc_6968 - 88C0h, offset def_6966 - 88C0h
.rodata:00000000000088C0                 dd offset def_6966 - 88C0h, offset def_6966 - 88C0h, offset def_6966 - 88C0h
.rodata:00000000000088C0                 dd offset def_6966 - 88C0h, offset def_6966 - 88C0h, offset loc_6A2F - 88C0h
.rodata:00000000000088C0                 dd offset def_6966 - 88C0h, offset def_6966 - 88C0h, offset loc_69B7 - 88C0h
.rodata:0000000000008998 ; const char _PRETTY_FUNCTION___4162[]
.rodata:0000000000008998 __PRETTY_FUNCTION___4162 db 'xstrtoul',0
.rodata:0000000000008998                                         ; DATA XREF: xstrtoul:loc_6B15↑o
.rodata:00000000000089A1 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000089A1                                         ; locale_charset:loc_7090↑o
.rodata:00000000000089A1 _rodata         ends
.rodata:00000000000089A1
LOAD:00000000000089A7 ; ===========================================================================
LOAD:00000000000089A7
LOAD:00000000000089A7 ; Segment type: Pure code
LOAD:00000000000089A7 ; Segment permissions: Read/Execute
LOAD:00000000000089A7 LOAD            segment byte public 'CODE' use64
LOAD:00000000000089A7                 assume cs:LOAD
LOAD:00000000000089A7                 ;org 89A7h
LOAD:00000000000089A7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000089A7                 align 8
LOAD:00000000000089A7 LOAD            ends
LOAD:00000000000089A7
.eh_frame_hdr:00000000000089A8 ; ===========================================================================
.eh_frame_hdr:00000000000089A8
.eh_frame_hdr:00000000000089A8 ; Segment type: Pure data
.eh_frame_hdr:00000000000089A8 ; Segment permissions: Read
.eh_frame_hdr:00000000000089A8 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000089A8                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000089A8                 ;org 89A8h
.eh_frame_hdr:00000000000089A8 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000089A9                 db  1Bh
.eh_frame_hdr:00000000000089AA                 db    3
.eh_frame_hdr:00000000000089AB                 db  3Bh ; ;
.eh_frame_hdr:00000000000089AC                 db  34h ; 4
.eh_frame_hdr:00000000000089AD                 db    3
.eh_frame_hdr:00000000000089AE                 db    0
.eh_frame_hdr:00000000000089AF                 db    0
.eh_frame_hdr:00000000000089B0                 db  65h ; e
.eh_frame_hdr:00000000000089B1                 db    0
.eh_frame_hdr:00000000000089B2                 db    0
.eh_frame_hdr:00000000000089B3                 db    0
.eh_frame_hdr:00000000000089B4                 db  78h ; x
.eh_frame_hdr:00000000000089B5                 db  8Ch
.eh_frame_hdr:00000000000089B6                 db 0FFh
.eh_frame_hdr:00000000000089B7                 db 0FFh
.eh_frame_hdr:00000000000089B8                 db  80h
.eh_frame_hdr:00000000000089B9                 db    3
.eh_frame_hdr:00000000000089BA                 db    0
.eh_frame_hdr:00000000000089BB                 db    0
.eh_frame_hdr:00000000000089BC                 db 0F8h
.eh_frame_hdr:00000000000089BD                 db  8Fh
.eh_frame_hdr:00000000000089BE                 db 0FFh
.eh_frame_hdr:00000000000089BF                 db 0FFh
.eh_frame_hdr:00000000000089C0                 db 0A8h
.eh_frame_hdr:00000000000089C1                 db    3
.eh_frame_hdr:00000000000089C2                 db    0
.eh_frame_hdr:00000000000089C3                 db    0
.eh_frame_hdr:00000000000089C4                 db    8
.eh_frame_hdr:00000000000089C5                 db  90h
.eh_frame_hdr:00000000000089C6                 db 0FFh
.eh_frame_hdr:00000000000089C7                 db 0FFh
.eh_frame_hdr:00000000000089C8                 db 0F0h
.eh_frame_hdr:00000000000089C9                 db    6
.eh_frame_hdr:00000000000089CA                 db    0
.eh_frame_hdr:00000000000089CB                 db    0
.eh_frame_hdr:00000000000089CC                 db  88h
.eh_frame_hdr:00000000000089CD                 db  9Fh
.eh_frame_hdr:00000000000089CE                 db 0FFh
.eh_frame_hdr:00000000000089CF                 db 0FFh
.eh_frame_hdr:00000000000089D0                 db  50h ; P
.eh_frame_hdr:00000000000089D1                 db    3
.eh_frame_hdr:00000000000089D2                 db    0
.eh_frame_hdr:00000000000089D3                 db    0
.eh_frame_hdr:00000000000089D4                 db  98h
.eh_frame_hdr:00000000000089D5                 db 0A0h
.eh_frame_hdr:00000000000089D6                 db 0FFh
.eh_frame_hdr:00000000000089D7                 db 0FFh
.eh_frame_hdr:00000000000089D8                 db 0C0h
.eh_frame_hdr:00000000000089D9                 db    3
.eh_frame_hdr:00000000000089DA                 db    0
.eh_frame_hdr:00000000000089DB                 db    0
.eh_frame_hdr:00000000000089DC                 db 0E8h
.eh_frame_hdr:00000000000089DD                 db 0A0h
.eh_frame_hdr:00000000000089DE                 db 0FFh
.eh_frame_hdr:00000000000089DF                 db 0FFh
.eh_frame_hdr:00000000000089E0                 db 0ECh
.eh_frame_hdr:00000000000089E1                 db    3
.eh_frame_hdr:00000000000089E2                 db    0
.eh_frame_hdr:00000000000089E3                 db    0
.eh_frame_hdr:00000000000089E4                 db  88h
.eh_frame_hdr:00000000000089E5                 db 0A1h
.eh_frame_hdr:00000000000089E6                 db 0FFh
.eh_frame_hdr:00000000000089E7                 db 0FFh
.eh_frame_hdr:00000000000089E8                 db  10h
.eh_frame_hdr:00000000000089E9                 db    4
.eh_frame_hdr:00000000000089EA                 db    0
.eh_frame_hdr:00000000000089EB                 db    0
.eh_frame_hdr:00000000000089EC                 db 0C8h
.eh_frame_hdr:00000000000089ED                 db 0A2h
.eh_frame_hdr:00000000000089EE                 db 0FFh
.eh_frame_hdr:00000000000089EF                 db 0FFh
.eh_frame_hdr:00000000000089F0                 db  40h ; @
.eh_frame_hdr:00000000000089F1                 db    4
.eh_frame_hdr:00000000000089F2                 db    0
.eh_frame_hdr:00000000000089F3                 db    0
.eh_frame_hdr:00000000000089F4                 db 0F8h
.eh_frame_hdr:00000000000089F5                 db 0A2h
.eh_frame_hdr:00000000000089F6                 db 0FFh
.eh_frame_hdr:00000000000089F7                 db 0FFh
.eh_frame_hdr:00000000000089F8                 db  5Ch ; \
.eh_frame_hdr:00000000000089F9                 db    4
.eh_frame_hdr:00000000000089FA                 db    0
.eh_frame_hdr:00000000000089FB                 db    0
.eh_frame_hdr:00000000000089FC                 db  48h ; H
.eh_frame_hdr:00000000000089FD                 db 0A3h
.eh_frame_hdr:00000000000089FE                 db 0FFh
.eh_frame_hdr:00000000000089FF                 db 0FFh
.eh_frame_hdr:0000000000008A00                 db  7Ch ; |
.eh_frame_hdr:0000000000008A01                 db    4
.eh_frame_hdr:0000000000008A02                 db    0
.eh_frame_hdr:0000000000008A03                 db    0
.eh_frame_hdr:0000000000008A04                 db  98h
.eh_frame_hdr:0000000000008A05                 db 0A3h
.eh_frame_hdr:0000000000008A06                 db 0FFh
.eh_frame_hdr:0000000000008A07                 db 0FFh
.eh_frame_hdr:0000000000008A08                 db 0A8h
.eh_frame_hdr:0000000000008A09                 db    4
.eh_frame_hdr:0000000000008A0A                 db    0
.eh_frame_hdr:0000000000008A0B                 db    0
.eh_frame_hdr:0000000000008A0C                 db 0A8h
.eh_frame_hdr:0000000000008A0D                 db 0A4h
.eh_frame_hdr:0000000000008A0E                 db 0FFh
.eh_frame_hdr:0000000000008A0F                 db 0FFh
.eh_frame_hdr:0000000000008A10                 db    4
.eh_frame_hdr:0000000000008A11                 db    5
.eh_frame_hdr:0000000000008A12                 db    0
.eh_frame_hdr:0000000000008A13                 db    0
.eh_frame_hdr:0000000000008A14                 db    8
.eh_frame_hdr:0000000000008A15                 db 0A5h
.eh_frame_hdr:0000000000008A16                 db 0FFh
.eh_frame_hdr:0000000000008A17                 db 0FFh
.eh_frame_hdr:0000000000008A18                 db  18h
.eh_frame_hdr:0000000000008A19                 db    5
.eh_frame_hdr:0000000000008A1A                 db    0
.eh_frame_hdr:0000000000008A1B                 db    0
.eh_frame_hdr:0000000000008A1C                 db  28h ; (
.eh_frame_hdr:0000000000008A1D                 db 0A6h
.eh_frame_hdr:0000000000008A1E                 db 0FFh
.eh_frame_hdr:0000000000008A1F                 db 0FFh
.eh_frame_hdr:0000000000008A20                 db  64h ; d
.eh_frame_hdr:0000000000008A21                 db    5
.eh_frame_hdr:0000000000008A22                 db    0
.eh_frame_hdr:0000000000008A23                 db    0
.eh_frame_hdr:0000000000008A24                 db  88h
.eh_frame_hdr:0000000000008A25                 db 0A7h
.eh_frame_hdr:0000000000008A26                 db 0FFh
.eh_frame_hdr:0000000000008A27                 db 0FFh
.eh_frame_hdr:0000000000008A28                 db 0B4h
.eh_frame_hdr:0000000000008A29                 db    5
.eh_frame_hdr:0000000000008A2A                 db    0
.eh_frame_hdr:0000000000008A2B                 db    0
.eh_frame_hdr:0000000000008A2C                 db  48h ; H
.eh_frame_hdr:0000000000008A2D                 db 0A8h
.eh_frame_hdr:0000000000008A2E                 db 0FFh
.eh_frame_hdr:0000000000008A2F                 db 0FFh
.eh_frame_hdr:0000000000008A30                 db 0E0h
.eh_frame_hdr:0000000000008A31                 db    5
.eh_frame_hdr:0000000000008A32                 db    0
.eh_frame_hdr:0000000000008A33                 db    0
.eh_frame_hdr:0000000000008A34                 db  38h ; 8
.eh_frame_hdr:0000000000008A35                 db 0ACh
.eh_frame_hdr:0000000000008A36                 db 0FFh
.eh_frame_hdr:0000000000008A37                 db 0FFh
.eh_frame_hdr:0000000000008A38                 db  54h ; T
.eh_frame_hdr:0000000000008A39                 db    6
.eh_frame_hdr:0000000000008A3A                 db    0
.eh_frame_hdr:0000000000008A3B                 db    0
.eh_frame_hdr:0000000000008A3C                 db  18h
.eh_frame_hdr:0000000000008A3D                 db 0ADh
.eh_frame_hdr:0000000000008A3E                 db 0FFh
.eh_frame_hdr:0000000000008A3F                 db 0FFh
.eh_frame_hdr:0000000000008A40                 db  80h
.eh_frame_hdr:0000000000008A41                 db    6
.eh_frame_hdr:0000000000008A42                 db    0
.eh_frame_hdr:0000000000008A43                 db    0
.eh_frame_hdr:0000000000008A44                 db  38h ; 8
.eh_frame_hdr:0000000000008A45                 db 0B1h
.eh_frame_hdr:0000000000008A46                 db 0FFh
.eh_frame_hdr:0000000000008A47                 db 0FFh
.eh_frame_hdr:0000000000008A48                 db 0ACh
.eh_frame_hdr:0000000000008A49                 db    6
.eh_frame_hdr:0000000000008A4A                 db    0
.eh_frame_hdr:0000000000008A4B                 db    0
.eh_frame_hdr:0000000000008A4C                 db 0F8h
.eh_frame_hdr:0000000000008A4D                 db 0B2h
.eh_frame_hdr:0000000000008A4E                 db 0FFh
.eh_frame_hdr:0000000000008A4F                 db 0FFh
.eh_frame_hdr:0000000000008A50                 db  40h ; @
.eh_frame_hdr:0000000000008A51                 db    7
.eh_frame_hdr:0000000000008A52                 db    0
.eh_frame_hdr:0000000000008A53                 db    0
.eh_frame_hdr:0000000000008A54                 db    8
.eh_frame_hdr:0000000000008A55                 db 0B3h
.eh_frame_hdr:0000000000008A56                 db 0FFh
.eh_frame_hdr:0000000000008A57                 db 0FFh
.eh_frame_hdr:0000000000008A58                 db  54h ; T
.eh_frame_hdr:0000000000008A59                 db    7
.eh_frame_hdr:0000000000008A5A                 db    0
.eh_frame_hdr:0000000000008A5B                 db    0
.eh_frame_hdr:0000000000008A5C                 db  18h
.eh_frame_hdr:0000000000008A5D                 db 0B3h
.eh_frame_hdr:0000000000008A5E                 db 0FFh
.eh_frame_hdr:0000000000008A5F                 db 0FFh
.eh_frame_hdr:0000000000008A60                 db  68h ; h
.eh_frame_hdr:0000000000008A61                 db    7
.eh_frame_hdr:0000000000008A62                 db    0
.eh_frame_hdr:0000000000008A63                 db    0
.eh_frame_hdr:0000000000008A64                 db 0C8h
.eh_frame_hdr:0000000000008A65                 db 0B3h
.eh_frame_hdr:0000000000008A66                 db 0FFh
.eh_frame_hdr:0000000000008A67                 db 0FFh
.eh_frame_hdr:0000000000008A68                 db  98h
.eh_frame_hdr:0000000000008A69                 db    7
.eh_frame_hdr:0000000000008A6A                 db    0
.eh_frame_hdr:0000000000008A6B                 db    0
.eh_frame_hdr:0000000000008A6C                 db 0D8h
.eh_frame_hdr:0000000000008A6D                 db 0B3h
.eh_frame_hdr:0000000000008A6E                 db 0FFh
.eh_frame_hdr:0000000000008A6F                 db 0FFh
.eh_frame_hdr:0000000000008A70                 db 0ACh
.eh_frame_hdr:0000000000008A71                 db    7
.eh_frame_hdr:0000000000008A72                 db    0
.eh_frame_hdr:0000000000008A73                 db    0
.eh_frame_hdr:0000000000008A74                 db    8
.eh_frame_hdr:0000000000008A75                 db 0B4h
.eh_frame_hdr:0000000000008A76                 db 0FFh
.eh_frame_hdr:0000000000008A77                 db 0FFh
.eh_frame_hdr:0000000000008A78                 db 0C8h
.eh_frame_hdr:0000000000008A79                 db    7
.eh_frame_hdr:0000000000008A7A                 db    0
.eh_frame_hdr:0000000000008A7B                 db    0
.eh_frame_hdr:0000000000008A7C                 db 0A8h
.eh_frame_hdr:0000000000008A7D                 db 0B4h
.eh_frame_hdr:0000000000008A7E                 db 0FFh
.eh_frame_hdr:0000000000008A7F                 db 0FFh
.eh_frame_hdr:0000000000008A80                 db 0F8h
.eh_frame_hdr:0000000000008A81                 db    7
.eh_frame_hdr:0000000000008A82                 db    0
.eh_frame_hdr:0000000000008A83                 db    0
.eh_frame_hdr:0000000000008A84                 db    8
.eh_frame_hdr:0000000000008A85                 db 0B5h
.eh_frame_hdr:0000000000008A86                 db 0FFh
.eh_frame_hdr:0000000000008A87                 db 0FFh
.eh_frame_hdr:0000000000008A88                 db  18h
.eh_frame_hdr:0000000000008A89                 db    8
.eh_frame_hdr:0000000000008A8A                 db    0
.eh_frame_hdr:0000000000008A8B                 db    0
.eh_frame_hdr:0000000000008A8C                 db  18h
.eh_frame_hdr:0000000000008A8D                 db 0B5h
.eh_frame_hdr:0000000000008A8E                 db 0FFh
.eh_frame_hdr:0000000000008A8F                 db 0FFh
.eh_frame_hdr:0000000000008A90                 db  2Ch ; ,
.eh_frame_hdr:0000000000008A91                 db    8
.eh_frame_hdr:0000000000008A92                 db    0
.eh_frame_hdr:0000000000008A93                 db    0
.eh_frame_hdr:0000000000008A94                 db  28h ; (
.eh_frame_hdr:0000000000008A95                 db 0B6h
.eh_frame_hdr:0000000000008A96                 db 0FFh
.eh_frame_hdr:0000000000008A97                 db 0FFh
.eh_frame_hdr:0000000000008A98                 db  90h
.eh_frame_hdr:0000000000008A99                 db    8
.eh_frame_hdr:0000000000008A9A                 db    0
.eh_frame_hdr:0000000000008A9B                 db    0
.eh_frame_hdr:0000000000008A9C                 db  38h ; 8
.eh_frame_hdr:0000000000008A9D                 db 0B6h
.eh_frame_hdr:0000000000008A9E                 db 0FFh
.eh_frame_hdr:0000000000008A9F                 db 0FFh
.eh_frame_hdr:0000000000008AA0                 db 0A4h
.eh_frame_hdr:0000000000008AA1                 db    8
.eh_frame_hdr:0000000000008AA2                 db    0
.eh_frame_hdr:0000000000008AA3                 db    0
.eh_frame_hdr:0000000000008AA4                 db  48h ; H
.eh_frame_hdr:0000000000008AA5                 db 0B6h
.eh_frame_hdr:0000000000008AA6                 db 0FFh
.eh_frame_hdr:0000000000008AA7                 db 0FFh
.eh_frame_hdr:0000000000008AA8                 db 0B8h
.eh_frame_hdr:0000000000008AA9                 db    8
.eh_frame_hdr:0000000000008AAA                 db    0
.eh_frame_hdr:0000000000008AAB                 db    0
.eh_frame_hdr:0000000000008AAC                 db  98h
.eh_frame_hdr:0000000000008AAD                 db 0B6h
.eh_frame_hdr:0000000000008AAE                 db 0FFh
.eh_frame_hdr:0000000000008AAF                 db 0FFh
.eh_frame_hdr:0000000000008AB0                 db 0E8h
.eh_frame_hdr:0000000000008AB1                 db    8
.eh_frame_hdr:0000000000008AB2                 db    0
.eh_frame_hdr:0000000000008AB3                 db    0
.eh_frame_hdr:0000000000008AB4                 db  38h ; 8
.eh_frame_hdr:0000000000008AB5                 db 0B7h
.eh_frame_hdr:0000000000008AB6                 db 0FFh
.eh_frame_hdr:0000000000008AB7                 db 0FFh
.eh_frame_hdr:0000000000008AB8                 db    8
.eh_frame_hdr:0000000000008AB9                 db    9
.eh_frame_hdr:0000000000008ABA                 db    0
.eh_frame_hdr:0000000000008ABB                 db    0
.eh_frame_hdr:0000000000008ABC                 db  28h ; (
.eh_frame_hdr:0000000000008ABD                 db 0B8h
.eh_frame_hdr:0000000000008ABE                 db 0FFh
.eh_frame_hdr:0000000000008ABF                 db 0FFh
.eh_frame_hdr:0000000000008AC0                 db  4Ch ; L
.eh_frame_hdr:0000000000008AC1                 db    9
.eh_frame_hdr:0000000000008AC2                 db    0
.eh_frame_hdr:0000000000008AC3                 db    0
.eh_frame_hdr:0000000000008AC4                 db  68h ; h
.eh_frame_hdr:0000000000008AC5                 db 0CAh
.eh_frame_hdr:0000000000008AC6                 db 0FFh
.eh_frame_hdr:0000000000008AC7                 db 0FFh
.eh_frame_hdr:0000000000008AC8                 db 0C4h
.eh_frame_hdr:0000000000008AC9                 db    9
.eh_frame_hdr:0000000000008ACA                 db    0
.eh_frame_hdr:0000000000008ACB                 db    0
.eh_frame_hdr:0000000000008ACC                 db  18h
.eh_frame_hdr:0000000000008ACD                 db 0CCh
.eh_frame_hdr:0000000000008ACE                 db 0FFh
.eh_frame_hdr:0000000000008ACF                 db 0FFh
.eh_frame_hdr:0000000000008AD0                 db  30h ; 0
.eh_frame_hdr:0000000000008AD1                 db  0Ah
.eh_frame_hdr:0000000000008AD2                 db    0
.eh_frame_hdr:0000000000008AD3                 db    0
.eh_frame_hdr:0000000000008AD4                 db  58h ; X
.eh_frame_hdr:0000000000008AD5                 db 0CCh
.eh_frame_hdr:0000000000008AD6                 db 0FFh
.eh_frame_hdr:0000000000008AD7                 db 0FFh
.eh_frame_hdr:0000000000008AD8                 db  5Ch ; \
.eh_frame_hdr:0000000000008AD9                 db  0Ah
.eh_frame_hdr:0000000000008ADA                 db    0
.eh_frame_hdr:0000000000008ADB                 db    0
.eh_frame_hdr:0000000000008ADC                 db  78h ; x
.eh_frame_hdr:0000000000008ADD                 db 0CCh
.eh_frame_hdr:0000000000008ADE                 db 0FFh
.eh_frame_hdr:0000000000008ADF                 db 0FFh
.eh_frame_hdr:0000000000008AE0                 db  70h ; p
.eh_frame_hdr:0000000000008AE1                 db  0Ah
.eh_frame_hdr:0000000000008AE2                 db    0
.eh_frame_hdr:0000000000008AE3                 db    0
.eh_frame_hdr:0000000000008AE4                 db  98h
.eh_frame_hdr:0000000000008AE5                 db 0CCh
.eh_frame_hdr:0000000000008AE6                 db 0FFh
.eh_frame_hdr:0000000000008AE7                 db 0FFh
.eh_frame_hdr:0000000000008AE8                 db  84h
.eh_frame_hdr:0000000000008AE9                 db  0Ah
.eh_frame_hdr:0000000000008AEA                 db    0
.eh_frame_hdr:0000000000008AEB                 db    0
.eh_frame_hdr:0000000000008AEC                 db 0D8h
.eh_frame_hdr:0000000000008AED                 db 0CCh
.eh_frame_hdr:0000000000008AEE                 db 0FFh
.eh_frame_hdr:0000000000008AEF                 db 0FFh
.eh_frame_hdr:0000000000008AF0                 db  98h
.eh_frame_hdr:0000000000008AF1                 db  0Ah
.eh_frame_hdr:0000000000008AF2                 db    0
.eh_frame_hdr:0000000000008AF3                 db    0
.eh_frame_hdr:0000000000008AF4                 db 0F8h
.eh_frame_hdr:0000000000008AF5                 db 0CCh
.eh_frame_hdr:0000000000008AF6                 db 0FFh
.eh_frame_hdr:0000000000008AF7                 db 0FFh
.eh_frame_hdr:0000000000008AF8                 db 0ACh
.eh_frame_hdr:0000000000008AF9                 db  0Ah
.eh_frame_hdr:0000000000008AFA                 db    0
.eh_frame_hdr:0000000000008AFB                 db    0
.eh_frame_hdr:0000000000008AFC                 db  28h ; (
.eh_frame_hdr:0000000000008AFD                 db 0CDh
.eh_frame_hdr:0000000000008AFE                 db 0FFh
.eh_frame_hdr:0000000000008AFF                 db 0FFh
.eh_frame_hdr:0000000000008B00                 db 0C0h
.eh_frame_hdr:0000000000008B01                 db  0Ah
.eh_frame_hdr:0000000000008B02                 db    0
.eh_frame_hdr:0000000000008B03                 db    0
.eh_frame_hdr:0000000000008B04                 db 0A8h
.eh_frame_hdr:0000000000008B05                 db 0CDh
.eh_frame_hdr:0000000000008B06                 db 0FFh
.eh_frame_hdr:0000000000008B07                 db 0FFh
.eh_frame_hdr:0000000000008B08                 db  14h
.eh_frame_hdr:0000000000008B09                 db  0Bh
.eh_frame_hdr:0000000000008B0A                 db    0
.eh_frame_hdr:0000000000008B0B                 db    0
.eh_frame_hdr:0000000000008B0C                 db  98h
.eh_frame_hdr:0000000000008B0D                 db 0CEh
.eh_frame_hdr:0000000000008B0E                 db 0FFh
.eh_frame_hdr:0000000000008B0F                 db 0FFh
.eh_frame_hdr:0000000000008B10                 db  80h
.eh_frame_hdr:0000000000008B11                 db  0Bh
.eh_frame_hdr:0000000000008B12                 db    0
.eh_frame_hdr:0000000000008B13                 db    0
.eh_frame_hdr:0000000000008B14                 db 0A8h
.eh_frame_hdr:0000000000008B15                 db 0CEh
.eh_frame_hdr:0000000000008B16                 db 0FFh
.eh_frame_hdr:0000000000008B17                 db 0FFh
.eh_frame_hdr:0000000000008B18                 db  94h
.eh_frame_hdr:0000000000008B19                 db  0Bh
.eh_frame_hdr:0000000000008B1A                 db    0
.eh_frame_hdr:0000000000008B1B                 db    0
.eh_frame_hdr:0000000000008B1C                 db  48h ; H
.eh_frame_hdr:0000000000008B1D                 db 0CFh
.eh_frame_hdr:0000000000008B1E                 db 0FFh
.eh_frame_hdr:0000000000008B1F                 db 0FFh
.eh_frame_hdr:0000000000008B20                 db 0C0h
.eh_frame_hdr:0000000000008B21                 db  0Bh
.eh_frame_hdr:0000000000008B22                 db    0
.eh_frame_hdr:0000000000008B23                 db    0
.eh_frame_hdr:0000000000008B24                 db  68h ; h
.eh_frame_hdr:0000000000008B25                 db 0CFh
.eh_frame_hdr:0000000000008B26                 db 0FFh
.eh_frame_hdr:0000000000008B27                 db 0FFh
.eh_frame_hdr:0000000000008B28                 db 0D4h
.eh_frame_hdr:0000000000008B29                 db  0Bh
.eh_frame_hdr:0000000000008B2A                 db    0
.eh_frame_hdr:0000000000008B2B                 db    0
.eh_frame_hdr:0000000000008B2C                 db  78h ; x
.eh_frame_hdr:0000000000008B2D                 db 0CFh
.eh_frame_hdr:0000000000008B2E                 db 0FFh
.eh_frame_hdr:0000000000008B2F                 db 0FFh
.eh_frame_hdr:0000000000008B30                 db 0E8h
.eh_frame_hdr:0000000000008B31                 db  0Bh
.eh_frame_hdr:0000000000008B32                 db    0
.eh_frame_hdr:0000000000008B33                 db    0
.eh_frame_hdr:0000000000008B34                 db  98h
.eh_frame_hdr:0000000000008B35                 db 0CFh
.eh_frame_hdr:0000000000008B36                 db 0FFh
.eh_frame_hdr:0000000000008B37                 db 0FFh
.eh_frame_hdr:0000000000008B38                 db 0FCh
.eh_frame_hdr:0000000000008B39                 db  0Bh
.eh_frame_hdr:0000000000008B3A                 db    0
.eh_frame_hdr:0000000000008B3B                 db    0
.eh_frame_hdr:0000000000008B3C                 db 0B8h
.eh_frame_hdr:0000000000008B3D                 db 0CFh
.eh_frame_hdr:0000000000008B3E                 db 0FFh
.eh_frame_hdr:0000000000008B3F                 db 0FFh
.eh_frame_hdr:0000000000008B40                 db  10h
.eh_frame_hdr:0000000000008B41                 db  0Ch
.eh_frame_hdr:0000000000008B42                 db    0
.eh_frame_hdr:0000000000008B43                 db    0
.eh_frame_hdr:0000000000008B44                 db  48h ; H
.eh_frame_hdr:0000000000008B45                 db 0D0h
.eh_frame_hdr:0000000000008B46                 db 0FFh
.eh_frame_hdr:0000000000008B47                 db 0FFh
.eh_frame_hdr:0000000000008B48                 db  2Ch ; ,
.eh_frame_hdr:0000000000008B49                 db  0Ch
.eh_frame_hdr:0000000000008B4A                 db    0
.eh_frame_hdr:0000000000008B4B                 db    0
.eh_frame_hdr:0000000000008B4C                 db 0D8h
.eh_frame_hdr:0000000000008B4D                 db 0D0h
.eh_frame_hdr:0000000000008B4E                 db 0FFh
.eh_frame_hdr:0000000000008B4F                 db 0FFh
.eh_frame_hdr:0000000000008B50                 db  48h ; H
.eh_frame_hdr:0000000000008B51                 db  0Ch
.eh_frame_hdr:0000000000008B52                 db    0
.eh_frame_hdr:0000000000008B53                 db    0
.eh_frame_hdr:0000000000008B54                 db 0E8h
.eh_frame_hdr:0000000000008B55                 db 0D0h
.eh_frame_hdr:0000000000008B56                 db 0FFh
.eh_frame_hdr:0000000000008B57                 db 0FFh
.eh_frame_hdr:0000000000008B58                 db  5Ch ; \
.eh_frame_hdr:0000000000008B59                 db  0Ch
.eh_frame_hdr:0000000000008B5A                 db    0
.eh_frame_hdr:0000000000008B5B                 db    0
.eh_frame_hdr:0000000000008B5C                 db 0F8h
.eh_frame_hdr:0000000000008B5D                 db 0D0h
.eh_frame_hdr:0000000000008B5E                 db 0FFh
.eh_frame_hdr:0000000000008B5F                 db 0FFh
.eh_frame_hdr:0000000000008B60                 db  70h ; p
.eh_frame_hdr:0000000000008B61                 db  0Ch
.eh_frame_hdr:0000000000008B62                 db    0
.eh_frame_hdr:0000000000008B63                 db    0
.eh_frame_hdr:0000000000008B64                 db  98h
.eh_frame_hdr:0000000000008B65                 db 0D1h
.eh_frame_hdr:0000000000008B66                 db 0FFh
.eh_frame_hdr:0000000000008B67                 db 0FFh
.eh_frame_hdr:0000000000008B68                 db  8Ch
.eh_frame_hdr:0000000000008B69                 db  0Ch
.eh_frame_hdr:0000000000008B6A                 db    0
.eh_frame_hdr:0000000000008B6B                 db    0
.eh_frame_hdr:0000000000008B6C                 db 0A8h
.eh_frame_hdr:0000000000008B6D                 db 0D1h
.eh_frame_hdr:0000000000008B6E                 db 0FFh
.eh_frame_hdr:0000000000008B6F                 db 0FFh
.eh_frame_hdr:0000000000008B70                 db 0A0h
.eh_frame_hdr:0000000000008B71                 db  0Ch
.eh_frame_hdr:0000000000008B72                 db    0
.eh_frame_hdr:0000000000008B73                 db    0
.eh_frame_hdr:0000000000008B74                 db 0C8h
.eh_frame_hdr:0000000000008B75                 db 0D1h
.eh_frame_hdr:0000000000008B76                 db 0FFh
.eh_frame_hdr:0000000000008B77                 db 0FFh
.eh_frame_hdr:0000000000008B78                 db 0B4h
.eh_frame_hdr:0000000000008B79                 db  0Ch
.eh_frame_hdr:0000000000008B7A                 db    0
.eh_frame_hdr:0000000000008B7B                 db    0
.eh_frame_hdr:0000000000008B7C                 db 0D8h
.eh_frame_hdr:0000000000008B7D                 db 0D1h
.eh_frame_hdr:0000000000008B7E                 db 0FFh
.eh_frame_hdr:0000000000008B7F                 db 0FFh
.eh_frame_hdr:0000000000008B80                 db 0C8h
.eh_frame_hdr:0000000000008B81                 db  0Ch
.eh_frame_hdr:0000000000008B82                 db    0
.eh_frame_hdr:0000000000008B83                 db    0
.eh_frame_hdr:0000000000008B84                 db  68h ; h
.eh_frame_hdr:0000000000008B85                 db 0D2h
.eh_frame_hdr:0000000000008B86                 db 0FFh
.eh_frame_hdr:0000000000008B87                 db 0FFh
.eh_frame_hdr:0000000000008B88                 db 0E4h
.eh_frame_hdr:0000000000008B89                 db  0Ch
.eh_frame_hdr:0000000000008B8A                 db    0
.eh_frame_hdr:0000000000008B8B                 db    0
.eh_frame_hdr:0000000000008B8C                 db    8
.eh_frame_hdr:0000000000008B8D                 db 0D3h
.eh_frame_hdr:0000000000008B8E                 db 0FFh
.eh_frame_hdr:0000000000008B8F                 db 0FFh
.eh_frame_hdr:0000000000008B90                 db    0
.eh_frame_hdr:0000000000008B91                 db  0Dh
.eh_frame_hdr:0000000000008B92                 db    0
.eh_frame_hdr:0000000000008B93                 db    0
.eh_frame_hdr:0000000000008B94                 db  18h
.eh_frame_hdr:0000000000008B95                 db 0D3h
.eh_frame_hdr:0000000000008B96                 db 0FFh
.eh_frame_hdr:0000000000008B97                 db 0FFh
.eh_frame_hdr:0000000000008B98                 db  14h
.eh_frame_hdr:0000000000008B99                 db  0Dh
.eh_frame_hdr:0000000000008B9A                 db    0
.eh_frame_hdr:0000000000008B9B                 db    0
.eh_frame_hdr:0000000000008B9C                 db  38h ; 8
.eh_frame_hdr:0000000000008B9D                 db 0D3h
.eh_frame_hdr:0000000000008B9E                 db 0FFh
.eh_frame_hdr:0000000000008B9F                 db 0FFh
.eh_frame_hdr:0000000000008BA0                 db  28h ; (
.eh_frame_hdr:0000000000008BA1                 db  0Dh
.eh_frame_hdr:0000000000008BA2                 db    0
.eh_frame_hdr:0000000000008BA3                 db    0
.eh_frame_hdr:0000000000008BA4                 db  58h ; X
.eh_frame_hdr:0000000000008BA5                 db 0D3h
.eh_frame_hdr:0000000000008BA6                 db 0FFh
.eh_frame_hdr:0000000000008BA7                 db 0FFh
.eh_frame_hdr:0000000000008BA8                 db  3Ch ; <
.eh_frame_hdr:0000000000008BA9                 db  0Dh
.eh_frame_hdr:0000000000008BAA                 db    0
.eh_frame_hdr:0000000000008BAB                 db    0
.eh_frame_hdr:0000000000008BAC                 db  68h ; h
.eh_frame_hdr:0000000000008BAD                 db 0D3h
.eh_frame_hdr:0000000000008BAE                 db 0FFh
.eh_frame_hdr:0000000000008BAF                 db 0FFh
.eh_frame_hdr:0000000000008BB0                 db  50h ; P
.eh_frame_hdr:0000000000008BB1                 db  0Dh
.eh_frame_hdr:0000000000008BB2                 db    0
.eh_frame_hdr:0000000000008BB3                 db    0
.eh_frame_hdr:0000000000008BB4                 db  88h
.eh_frame_hdr:0000000000008BB5                 db 0D3h
.eh_frame_hdr:0000000000008BB6                 db 0FFh
.eh_frame_hdr:0000000000008BB7                 db 0FFh
.eh_frame_hdr:0000000000008BB8                 db  64h ; d
.eh_frame_hdr:0000000000008BB9                 db  0Dh
.eh_frame_hdr:0000000000008BBA                 db    0
.eh_frame_hdr:0000000000008BBB                 db    0
.eh_frame_hdr:0000000000008BBC                 db 0A8h
.eh_frame_hdr:0000000000008BBD                 db 0D3h
.eh_frame_hdr:0000000000008BBE                 db 0FFh
.eh_frame_hdr:0000000000008BBF                 db 0FFh
.eh_frame_hdr:0000000000008BC0                 db  78h ; x
.eh_frame_hdr:0000000000008BC1                 db  0Dh
.eh_frame_hdr:0000000000008BC2                 db    0
.eh_frame_hdr:0000000000008BC3                 db    0
.eh_frame_hdr:0000000000008BC4                 db 0C8h
.eh_frame_hdr:0000000000008BC5                 db 0D3h
.eh_frame_hdr:0000000000008BC6                 db 0FFh
.eh_frame_hdr:0000000000008BC7                 db 0FFh
.eh_frame_hdr:0000000000008BC8                 db  90h
.eh_frame_hdr:0000000000008BC9                 db  0Dh
.eh_frame_hdr:0000000000008BCA                 db    0
.eh_frame_hdr:0000000000008BCB                 db    0
.eh_frame_hdr:0000000000008BCC                 db 0D8h
.eh_frame_hdr:0000000000008BCD                 db 0D3h
.eh_frame_hdr:0000000000008BCE                 db 0FFh
.eh_frame_hdr:0000000000008BCF                 db 0FFh
.eh_frame_hdr:0000000000008BD0                 db 0A8h
.eh_frame_hdr:0000000000008BD1                 db  0Dh
.eh_frame_hdr:0000000000008BD2                 db    0
.eh_frame_hdr:0000000000008BD3                 db    0
.eh_frame_hdr:0000000000008BD4                 db 0F8h
.eh_frame_hdr:0000000000008BD5                 db 0D7h
.eh_frame_hdr:0000000000008BD6                 db 0FFh
.eh_frame_hdr:0000000000008BD7                 db 0FFh
.eh_frame_hdr:0000000000008BD8                 db 0BCh
.eh_frame_hdr:0000000000008BD9                 db  0Eh
.eh_frame_hdr:0000000000008BDA                 db    0
.eh_frame_hdr:0000000000008BDB                 db    0
.eh_frame_hdr:0000000000008BDC                 db  18h
.eh_frame_hdr:0000000000008BDD                 db 0D8h
.eh_frame_hdr:0000000000008BDE                 db 0FFh
.eh_frame_hdr:0000000000008BDF                 db 0FFh
.eh_frame_hdr:0000000000008BE0                 db 0D0h
.eh_frame_hdr:0000000000008BE1                 db  0Eh
.eh_frame_hdr:0000000000008BE2                 db    0
.eh_frame_hdr:0000000000008BE3                 db    0
.eh_frame_hdr:0000000000008BE4                 db  98h
.eh_frame_hdr:0000000000008BE5                 db 0D8h
.eh_frame_hdr:0000000000008BE6                 db 0FFh
.eh_frame_hdr:0000000000008BE7                 db 0FFh
.eh_frame_hdr:0000000000008BE8                 db 0ECh
.eh_frame_hdr:0000000000008BE9                 db  0Eh
.eh_frame_hdr:0000000000008BEA                 db    0
.eh_frame_hdr:0000000000008BEB                 db    0
.eh_frame_hdr:0000000000008BEC                 db  78h ; x
.eh_frame_hdr:0000000000008BED                 db 0D9h
.eh_frame_hdr:0000000000008BEE                 db 0FFh
.eh_frame_hdr:0000000000008BEF                 db 0FFh
.eh_frame_hdr:0000000000008BF0                 db  18h
.eh_frame_hdr:0000000000008BF1                 db  0Fh
.eh_frame_hdr:0000000000008BF2                 db    0
.eh_frame_hdr:0000000000008BF3                 db    0
.eh_frame_hdr:0000000000008BF4                 db 0F8h
.eh_frame_hdr:0000000000008BF5                 db 0D9h
.eh_frame_hdr:0000000000008BF6                 db 0FFh
.eh_frame_hdr:0000000000008BF7                 db 0FFh
.eh_frame_hdr:0000000000008BF8                 db  38h ; 8
.eh_frame_hdr:0000000000008BF9                 db  0Fh
.eh_frame_hdr:0000000000008BFA                 db    0
.eh_frame_hdr:0000000000008BFB                 db    0
.eh_frame_hdr:0000000000008BFC                 db  18h
.eh_frame_hdr:0000000000008BFD                 db 0DAh
.eh_frame_hdr:0000000000008BFE                 db 0FFh
.eh_frame_hdr:0000000000008BFF                 db 0FFh
.eh_frame_hdr:0000000000008C00                 db  54h ; T
.eh_frame_hdr:0000000000008C01                 db  0Fh
.eh_frame_hdr:0000000000008C02                 db    0
.eh_frame_hdr:0000000000008C03                 db    0
.eh_frame_hdr:0000000000008C04                 db  48h ; H
.eh_frame_hdr:0000000000008C05                 db 0DAh
.eh_frame_hdr:0000000000008C06                 db 0FFh
.eh_frame_hdr:0000000000008C07                 db 0FFh
.eh_frame_hdr:0000000000008C08                 db  68h ; h
.eh_frame_hdr:0000000000008C09                 db  0Fh
.eh_frame_hdr:0000000000008C0A                 db    0
.eh_frame_hdr:0000000000008C0B                 db    0
.eh_frame_hdr:0000000000008C0C                 db  58h ; X
.eh_frame_hdr:0000000000008C0D                 db 0DAh
.eh_frame_hdr:0000000000008C0E                 db 0FFh
.eh_frame_hdr:0000000000008C0F                 db 0FFh
.eh_frame_hdr:0000000000008C10                 db  7Ch ; |
.eh_frame_hdr:0000000000008C11                 db  0Fh
.eh_frame_hdr:0000000000008C12                 db    0
.eh_frame_hdr:0000000000008C13                 db    0
.eh_frame_hdr:0000000000008C14                 db  98h
.eh_frame_hdr:0000000000008C15                 db 0DAh
.eh_frame_hdr:0000000000008C16                 db 0FFh
.eh_frame_hdr:0000000000008C17                 db 0FFh
.eh_frame_hdr:0000000000008C18                 db 0A0h
.eh_frame_hdr:0000000000008C19                 db  0Fh
.eh_frame_hdr:0000000000008C1A                 db    0
.eh_frame_hdr:0000000000008C1B                 db    0
.eh_frame_hdr:0000000000008C1C                 db 0C8h
.eh_frame_hdr:0000000000008C1D                 db 0DAh
.eh_frame_hdr:0000000000008C1E                 db 0FFh
.eh_frame_hdr:0000000000008C1F                 db 0FFh
.eh_frame_hdr:0000000000008C20                 db 0B4h
.eh_frame_hdr:0000000000008C21                 db  0Fh
.eh_frame_hdr:0000000000008C22                 db    0
.eh_frame_hdr:0000000000008C23                 db    0
.eh_frame_hdr:0000000000008C24                 db  58h ; X
.eh_frame_hdr:0000000000008C25                 db 0DBh
.eh_frame_hdr:0000000000008C26                 db 0FFh
.eh_frame_hdr:0000000000008C27                 db 0FFh
.eh_frame_hdr:0000000000008C28                 db 0CCh
.eh_frame_hdr:0000000000008C29                 db  0Fh
.eh_frame_hdr:0000000000008C2A                 db    0
.eh_frame_hdr:0000000000008C2B                 db    0
.eh_frame_hdr:0000000000008C2C                 db 0A8h
.eh_frame_hdr:0000000000008C2D                 db 0DBh
.eh_frame_hdr:0000000000008C2E                 db 0FFh
.eh_frame_hdr:0000000000008C2F                 db 0FFh
.eh_frame_hdr:0000000000008C30                 db 0E4h
.eh_frame_hdr:0000000000008C31                 db  0Fh
.eh_frame_hdr:0000000000008C32                 db    0
.eh_frame_hdr:0000000000008C33                 db    0
.eh_frame_hdr:0000000000008C34                 db 0C8h
.eh_frame_hdr:0000000000008C35                 db 0DBh
.eh_frame_hdr:0000000000008C36                 db 0FFh
.eh_frame_hdr:0000000000008C37                 db 0FFh
.eh_frame_hdr:0000000000008C38                 db    0
.eh_frame_hdr:0000000000008C39                 db  10h
.eh_frame_hdr:0000000000008C3A                 db    0
.eh_frame_hdr:0000000000008C3B                 db    0
.eh_frame_hdr:0000000000008C3C                 db 0F8h
.eh_frame_hdr:0000000000008C3D                 db 0DBh
.eh_frame_hdr:0000000000008C3E                 db 0FFh
.eh_frame_hdr:0000000000008C3F                 db 0FFh
.eh_frame_hdr:0000000000008C40                 db  1Ch
.eh_frame_hdr:0000000000008C41                 db  10h
.eh_frame_hdr:0000000000008C42                 db    0
.eh_frame_hdr:0000000000008C43                 db    0
.eh_frame_hdr:0000000000008C44                 db  28h ; (
.eh_frame_hdr:0000000000008C45                 db 0DCh
.eh_frame_hdr:0000000000008C46                 db 0FFh
.eh_frame_hdr:0000000000008C47                 db 0FFh
.eh_frame_hdr:0000000000008C48                 db  44h ; D
.eh_frame_hdr:0000000000008C49                 db  10h
.eh_frame_hdr:0000000000008C4A                 db    0
.eh_frame_hdr:0000000000008C4B                 db    0
.eh_frame_hdr:0000000000008C4C                 db  48h ; H
.eh_frame_hdr:0000000000008C4D                 db 0DCh
.eh_frame_hdr:0000000000008C4E                 db 0FFh
.eh_frame_hdr:0000000000008C4F                 db 0FFh
.eh_frame_hdr:0000000000008C50                 db  60h ; `
.eh_frame_hdr:0000000000008C51                 db  10h
.eh_frame_hdr:0000000000008C52                 db    0
.eh_frame_hdr:0000000000008C53                 db    0
.eh_frame_hdr:0000000000008C54                 db  88h
.eh_frame_hdr:0000000000008C55                 db 0DCh
.eh_frame_hdr:0000000000008C56                 db 0FFh
.eh_frame_hdr:0000000000008C57                 db 0FFh
.eh_frame_hdr:0000000000008C58                 db  78h ; x
.eh_frame_hdr:0000000000008C59                 db  10h
.eh_frame_hdr:0000000000008C5A                 db    0
.eh_frame_hdr:0000000000008C5B                 db    0
.eh_frame_hdr:0000000000008C5C                 db  48h ; H
.eh_frame_hdr:0000000000008C5D                 db 0DDh
.eh_frame_hdr:0000000000008C5E                 db 0FFh
.eh_frame_hdr:0000000000008C5F                 db 0FFh
.eh_frame_hdr:0000000000008C60                 db 0B4h
.eh_frame_hdr:0000000000008C61                 db  10h
.eh_frame_hdr:0000000000008C62                 db    0
.eh_frame_hdr:0000000000008C63                 db    0
.eh_frame_hdr:0000000000008C64                 db  98h
.eh_frame_hdr:0000000000008C65                 db 0DDh
.eh_frame_hdr:0000000000008C66                 db 0FFh
.eh_frame_hdr:0000000000008C67                 db 0FFh
.eh_frame_hdr:0000000000008C68                 db 0F0h
.eh_frame_hdr:0000000000008C69                 db  10h
.eh_frame_hdr:0000000000008C6A                 db    0
.eh_frame_hdr:0000000000008C6B                 db    0
.eh_frame_hdr:0000000000008C6C                 db 0E8h
.eh_frame_hdr:0000000000008C6D                 db 0DDh
.eh_frame_hdr:0000000000008C6E                 db 0FFh
.eh_frame_hdr:0000000000008C6F                 db 0FFh
.eh_frame_hdr:0000000000008C70                 db  30h ; 0
.eh_frame_hdr:0000000000008C71                 db  11h
.eh_frame_hdr:0000000000008C72                 db    0
.eh_frame_hdr:0000000000008C73                 db    0
.eh_frame_hdr:0000000000008C74                 db    8
.eh_frame_hdr:0000000000008C75                 db 0E2h
.eh_frame_hdr:0000000000008C76                 db 0FFh
.eh_frame_hdr:0000000000008C77                 db 0FFh
.eh_frame_hdr:0000000000008C78                 db  80h
.eh_frame_hdr:0000000000008C79                 db  11h
.eh_frame_hdr:0000000000008C7A                 db    0
.eh_frame_hdr:0000000000008C7B                 db    0
.eh_frame_hdr:0000000000008C7C                 db  88h
.eh_frame_hdr:0000000000008C7D                 db 0E2h
.eh_frame_hdr:0000000000008C7E                 db 0FFh
.eh_frame_hdr:0000000000008C7F                 db 0FFh
.eh_frame_hdr:0000000000008C80                 db 0B8h
.eh_frame_hdr:0000000000008C81                 db  11h
.eh_frame_hdr:0000000000008C82                 db    0
.eh_frame_hdr:0000000000008C83                 db    0
.eh_frame_hdr:0000000000008C84                 db    8
.eh_frame_hdr:0000000000008C85                 db 0E5h
.eh_frame_hdr:0000000000008C86                 db 0FFh
.eh_frame_hdr:0000000000008C87                 db 0FFh
.eh_frame_hdr:0000000000008C88                 db 0F0h
.eh_frame_hdr:0000000000008C89                 db  11h
.eh_frame_hdr:0000000000008C8A                 db    0
.eh_frame_hdr:0000000000008C8B                 db    0
.eh_frame_hdr:0000000000008C8C                 db  48h ; H
.eh_frame_hdr:0000000000008C8D                 db 0E5h
.eh_frame_hdr:0000000000008C8E                 db 0FFh
.eh_frame_hdr:0000000000008C8F                 db 0FFh
.eh_frame_hdr:0000000000008C90                 db  10h
.eh_frame_hdr:0000000000008C91                 db  12h
.eh_frame_hdr:0000000000008C92                 db    0
.eh_frame_hdr:0000000000008C93                 db    0
.eh_frame_hdr:0000000000008C94                 db 0A8h
.eh_frame_hdr:0000000000008C95                 db 0E5h
.eh_frame_hdr:0000000000008C96                 db 0FFh
.eh_frame_hdr:0000000000008C97                 db 0FFh
.eh_frame_hdr:0000000000008C98                 db  40h ; @
.eh_frame_hdr:0000000000008C99                 db  12h
.eh_frame_hdr:0000000000008C9A                 db    0
.eh_frame_hdr:0000000000008C9B                 db    0
.eh_frame_hdr:0000000000008C9C                 db  38h ; 8
.eh_frame_hdr:0000000000008C9D                 db 0E6h
.eh_frame_hdr:0000000000008C9E                 db 0FFh
.eh_frame_hdr:0000000000008C9F                 db 0FFh
.eh_frame_hdr:0000000000008CA0                 db  80h
.eh_frame_hdr:0000000000008CA1                 db  12h
.eh_frame_hdr:0000000000008CA2                 db    0
.eh_frame_hdr:0000000000008CA3                 db    0
.eh_frame_hdr:0000000000008CA4                 db 0B8h
.eh_frame_hdr:0000000000008CA5                 db 0E6h
.eh_frame_hdr:0000000000008CA6                 db 0FFh
.eh_frame_hdr:0000000000008CA7                 db 0FFh
.eh_frame_hdr:0000000000008CA8                 db 0D0h
.eh_frame_hdr:0000000000008CA9                 db  12h
.eh_frame_hdr:0000000000008CAA                 db    0
.eh_frame_hdr:0000000000008CAB                 db    0
.eh_frame_hdr:0000000000008CAC                 db 0F8h
.eh_frame_hdr:0000000000008CAD                 db 0E6h
.eh_frame_hdr:0000000000008CAE                 db 0FFh
.eh_frame_hdr:0000000000008CAF                 db 0FFh
.eh_frame_hdr:0000000000008CB0                 db 0F0h
.eh_frame_hdr:0000000000008CB1                 db  12h
.eh_frame_hdr:0000000000008CB2                 db    0
.eh_frame_hdr:0000000000008CB3                 db    0
.eh_frame_hdr:0000000000008CB4                 db 0B8h
.eh_frame_hdr:0000000000008CB5                 db 0E7h
.eh_frame_hdr:0000000000008CB6                 db 0FFh
.eh_frame_hdr:0000000000008CB7                 db 0FFh
.eh_frame_hdr:0000000000008CB8                 db  68h ; h
.eh_frame_hdr:0000000000008CB9                 db  13h
.eh_frame_hdr:0000000000008CBA                 db    0
.eh_frame_hdr:0000000000008CBB                 db    0
.eh_frame_hdr:0000000000008CBC                 db  68h ; h
.eh_frame_hdr:0000000000008CBD                 db 0E8h
.eh_frame_hdr:0000000000008CBE                 db 0FFh
.eh_frame_hdr:0000000000008CBF                 db 0FFh
.eh_frame_hdr:0000000000008CC0                 db 0B4h
.eh_frame_hdr:0000000000008CC1                 db  13h
.eh_frame_hdr:0000000000008CC2                 db    0
.eh_frame_hdr:0000000000008CC3                 db    0
.eh_frame_hdr:0000000000008CC4                 db 0C8h
.eh_frame_hdr:0000000000008CC5                 db 0E8h
.eh_frame_hdr:0000000000008CC6                 db 0FFh
.eh_frame_hdr:0000000000008CC7                 db 0FFh
.eh_frame_hdr:0000000000008CC8                 db 0F8h
.eh_frame_hdr:0000000000008CC9                 db  13h
.eh_frame_hdr:0000000000008CCA                 db    0
.eh_frame_hdr:0000000000008CCB                 db    0
.eh_frame_hdr:0000000000008CCC                 db  38h ; 8
.eh_frame_hdr:0000000000008CCD                 db 0E9h
.eh_frame_hdr:0000000000008CCE                 db 0FFh
.eh_frame_hdr:0000000000008CCF                 db 0FFh
.eh_frame_hdr:0000000000008CD0                 db  40h ; @
.eh_frame_hdr:0000000000008CD1                 db  14h
.eh_frame_hdr:0000000000008CD2                 db    0
.eh_frame_hdr:0000000000008CD3                 db    0
.eh_frame_hdr:0000000000008CD4                 db  48h ; H
.eh_frame_hdr:0000000000008CD5                 db 0E9h
.eh_frame_hdr:0000000000008CD6                 db 0FFh
.eh_frame_hdr:0000000000008CD7                 db 0FFh
.eh_frame_hdr:0000000000008CD8                 db  58h ; X
.eh_frame_hdr:0000000000008CD9                 db  14h
.eh_frame_hdr:0000000000008CDA                 db    0
.eh_frame_hdr:0000000000008CDB                 db    0
.eh_frame_hdr:0000000000008CDB _eh_frame_hdr   ends
.eh_frame_hdr:0000000000008CDB
LOAD:0000000000008CDC ; ===========================================================================
LOAD:0000000000008CDC
LOAD:0000000000008CDC ; Segment type: Pure code
LOAD:0000000000008CDC ; Segment permissions: Read/Execute
LOAD:0000000000008CDC LOAD            segment byte public 'CODE' use64
LOAD:0000000000008CDC                 assume cs:LOAD
LOAD:0000000000008CDC                 ;org 8CDCh
LOAD:0000000000008CDC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000008CDC                 align 20h
LOAD:0000000000008CDC LOAD            ends
LOAD:0000000000008CDC
.eh_frame:0000000000008CE0 ; ===========================================================================
.eh_frame:0000000000008CE0
.eh_frame:0000000000008CE0 ; Segment type: Pure data
.eh_frame:0000000000008CE0 ; Segment permissions: Read
.eh_frame:0000000000008CE0 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000008CE0                 assume cs:_eh_frame
.eh_frame:0000000000008CE0                 ;org 8CE0h
.eh_frame:0000000000008CE0                 db  14h
.eh_frame:0000000000008CE1                 db    0
.eh_frame:0000000000008CE2                 db    0
.eh_frame:0000000000008CE3                 db    0
.eh_frame:0000000000008CE4                 db    0
.eh_frame:0000000000008CE5                 db    0
.eh_frame:0000000000008CE6                 db    0
.eh_frame:0000000000008CE7                 db    0
.eh_frame:0000000000008CE8                 db    1
.eh_frame:0000000000008CE9                 db  7Ah ; z
.eh_frame:0000000000008CEA                 db  52h ; R
.eh_frame:0000000000008CEB                 db    0
.eh_frame:0000000000008CEC                 db    1
.eh_frame:0000000000008CED                 db  78h ; x
.eh_frame:0000000000008CEE                 db  10h
.eh_frame:0000000000008CEF                 db    1
.eh_frame:0000000000008CF0                 db  1Bh
.eh_frame:0000000000008CF1                 db  0Ch
.eh_frame:0000000000008CF2                 db    7
.eh_frame:0000000000008CF3                 db    8
.eh_frame:0000000000008CF4                 db  90h
.eh_frame:0000000000008CF5                 db    1
.eh_frame:0000000000008CF6                 db    7
.eh_frame:0000000000008CF7                 db  10h
.eh_frame:0000000000008CF8                 db  14h
.eh_frame:0000000000008CF9                 db    0
.eh_frame:0000000000008CFA                 db    0
.eh_frame:0000000000008CFB                 db    0
.eh_frame:0000000000008CFC                 db  1Ch
.eh_frame:0000000000008CFD                 db    0
.eh_frame:0000000000008CFE                 db    0
.eh_frame:0000000000008CFF                 db    0
.eh_frame:0000000000008D00                 db  30h ; 0
.eh_frame:0000000000008D01                 db  9Ch
.eh_frame:0000000000008D02                 db 0FFh
.eh_frame:0000000000008D03                 db 0FFh
.eh_frame:0000000000008D04                 db  2Bh ; +
.eh_frame:0000000000008D05                 db    0
.eh_frame:0000000000008D06                 db    0
.eh_frame:0000000000008D07                 db    0
.eh_frame:0000000000008D08                 db    0
.eh_frame:0000000000008D09                 db    0
.eh_frame:0000000000008D0A                 db    0
.eh_frame:0000000000008D0B                 db    0
.eh_frame:0000000000008D0C                 db    0
.eh_frame:0000000000008D0D                 db    0
.eh_frame:0000000000008D0E                 db    0
.eh_frame:0000000000008D0F                 db    0
.eh_frame:0000000000008D10                 db  14h
.eh_frame:0000000000008D11                 db    0
.eh_frame:0000000000008D12                 db    0
.eh_frame:0000000000008D13                 db    0
.eh_frame:0000000000008D14                 db    0
.eh_frame:0000000000008D15                 db    0
.eh_frame:0000000000008D16                 db    0
.eh_frame:0000000000008D17                 db    0
.eh_frame:0000000000008D18                 db    1
.eh_frame:0000000000008D19                 db  7Ah ; z
.eh_frame:0000000000008D1A                 db  52h ; R
.eh_frame:0000000000008D1B                 db    0
.eh_frame:0000000000008D1C                 db    1
.eh_frame:0000000000008D1D                 db  78h ; x
.eh_frame:0000000000008D1E                 db  10h
.eh_frame:0000000000008D1F                 db    1
.eh_frame:0000000000008D20                 db  1Bh
.eh_frame:0000000000008D21                 db  0Ch
.eh_frame:0000000000008D22                 db    7
.eh_frame:0000000000008D23                 db    8
.eh_frame:0000000000008D24                 db  90h
.eh_frame:0000000000008D25                 db    1
.eh_frame:0000000000008D26                 db    0
.eh_frame:0000000000008D27                 db    0
.eh_frame:0000000000008D28                 db  24h ; $
.eh_frame:0000000000008D29                 db    0
.eh_frame:0000000000008D2A                 db    0
.eh_frame:0000000000008D2B                 db    0
.eh_frame:0000000000008D2C                 db  1Ch
.eh_frame:0000000000008D2D                 db    0
.eh_frame:0000000000008D2E                 db    0
.eh_frame:0000000000008D2F                 db    0
.eh_frame:0000000000008D30                 db 0F0h
.eh_frame:0000000000008D31                 db  88h
.eh_frame:0000000000008D32                 db 0FFh
.eh_frame:0000000000008D33                 db 0FFh
.eh_frame:0000000000008D34                 db  80h
.eh_frame:0000000000008D35                 db    3
.eh_frame:0000000000008D36                 db    0
.eh_frame:0000000000008D37                 db    0
.eh_frame:0000000000008D38                 db    0
.eh_frame:0000000000008D39                 db  0Eh
.eh_frame:0000000000008D3A                 db  10h
.eh_frame:0000000000008D3B                 db  46h ; F
.eh_frame:0000000000008D3C                 db  0Eh
.eh_frame:0000000000008D3D                 db  18h
.eh_frame:0000000000008D3E                 db  4Ah ; J
.eh_frame:0000000000008D3F                 db  0Fh
.eh_frame:0000000000008D40                 db  0Bh
.eh_frame:0000000000008D41                 db  77h ; w
.eh_frame:0000000000008D42                 db    8
.eh_frame:0000000000008D43                 db  80h
.eh_frame:0000000000008D44                 db    0
.eh_frame:0000000000008D45                 db  3Fh ; ?
.eh_frame:0000000000008D46                 db  1Ah
.eh_frame:0000000000008D47                 db  3Bh ; ;
.eh_frame:0000000000008D48                 db  2Ah ; *
.eh_frame:0000000000008D49                 db  33h ; 3
.eh_frame:0000000000008D4A                 db  24h ; $
.eh_frame:0000000000008D4B                 db  22h ; "
.eh_frame:0000000000008D4C                 db    0
.eh_frame:0000000000008D4D                 db    0
.eh_frame:0000000000008D4E                 db    0
.eh_frame:0000000000008D4F                 db    0
.eh_frame:0000000000008D50                 db  14h
.eh_frame:0000000000008D51                 db    0
.eh_frame:0000000000008D52                 db    0
.eh_frame:0000000000008D53                 db    0
.eh_frame:0000000000008D54                 db  44h ; D
.eh_frame:0000000000008D55                 db    0
.eh_frame:0000000000008D56                 db    0
.eh_frame:0000000000008D57                 db    0
.eh_frame:0000000000008D58                 db  48h ; H
.eh_frame:0000000000008D59                 db  8Ch
.eh_frame:0000000000008D5A                 db 0FFh
.eh_frame:0000000000008D5B                 db 0FFh
.eh_frame:0000000000008D5C                 db    8
.eh_frame:0000000000008D5D                 db    0
.eh_frame:0000000000008D5E                 db    0
.eh_frame:0000000000008D5F                 db    0
.eh_frame:0000000000008D60                 db    0
.eh_frame:0000000000008D61                 db    0
.eh_frame:0000000000008D62                 db    0
.eh_frame:0000000000008D63                 db    0
.eh_frame:0000000000008D64                 db    0
.eh_frame:0000000000008D65                 db    0
.eh_frame:0000000000008D66                 db    0
.eh_frame:0000000000008D67                 db    0
.eh_frame:0000000000008D68                 db  28h ; (
.eh_frame:0000000000008D69                 db    0
.eh_frame:0000000000008D6A                 db    0
.eh_frame:0000000000008D6B                 db    0
.eh_frame:0000000000008D6C                 db  5Ch ; \
.eh_frame:0000000000008D6D                 db    0
.eh_frame:0000000000008D6E                 db    0
.eh_frame:0000000000008D6F                 db    0
.eh_frame:0000000000008D70                 db 0D0h
.eh_frame:0000000000008D71                 db  9Ch
.eh_frame:0000000000008D72                 db 0FFh
.eh_frame:0000000000008D73                 db 0FFh
.eh_frame:0000000000008D74                 db  4Dh ; M
.eh_frame:0000000000008D75                 db    0
.eh_frame:0000000000008D76                 db    0
.eh_frame:0000000000008D77                 db    0
.eh_frame:0000000000008D78                 db    0
.eh_frame:0000000000008D79                 db  41h ; A
.eh_frame:0000000000008D7A                 db  0Eh
.eh_frame:0000000000008D7B                 db  10h
.eh_frame:0000000000008D7C                 db  86h
.eh_frame:0000000000008D7D                 db    2
.eh_frame:0000000000008D7E                 db  41h ; A
.eh_frame:0000000000008D7F                 db  0Eh
.eh_frame:0000000000008D80                 db  18h
.eh_frame:0000000000008D81                 db  83h
.eh_frame:0000000000008D82                 db    3
.eh_frame:0000000000008D83                 db  44h ; D
.eh_frame:0000000000008D84                 db  0Eh
.eh_frame:0000000000008D85                 db  20h
.eh_frame:0000000000008D86                 db  55h ; U
.eh_frame:0000000000008D87                 db  0Ah
.eh_frame:0000000000008D88                 db  0Eh
.eh_frame:0000000000008D89                 db  18h
.eh_frame:0000000000008D8A                 db  41h ; A
.eh_frame:0000000000008D8B                 db  0Eh
.eh_frame:0000000000008D8C                 db  10h
.eh_frame:0000000000008D8D                 db  41h ; A
.eh_frame:0000000000008D8E                 db  0Eh
.eh_frame:0000000000008D8F                 db    8
.eh_frame:0000000000008D90                 db  41h ; A
.eh_frame:0000000000008D91                 db  0Bh
.eh_frame:0000000000008D92                 db    0
.eh_frame:0000000000008D93                 db    0
.eh_frame:0000000000008D94                 db  20h
.eh_frame:0000000000008D95                 db    0
.eh_frame:0000000000008D96                 db    0
.eh_frame:0000000000008D97                 db    0
.eh_frame:0000000000008D98                 db  88h
.eh_frame:0000000000008D99                 db    0
.eh_frame:0000000000008D9A                 db    0
.eh_frame:0000000000008D9B                 db    0
.eh_frame:0000000000008D9C                 db 0F4h
.eh_frame:0000000000008D9D                 db  9Ch
.eh_frame:0000000000008D9E                 db 0FFh
.eh_frame:0000000000008D9F                 db 0FFh
.eh_frame:0000000000008DA0                 db 0A0h
.eh_frame:0000000000008DA1                 db    0
.eh_frame:0000000000008DA2                 db    0
.eh_frame:0000000000008DA3                 db    0
.eh_frame:0000000000008DA4                 db    0
.eh_frame:0000000000008DA5                 db  41h ; A
.eh_frame:0000000000008DA6                 db  0Eh
.eh_frame:0000000000008DA7                 db  10h
.eh_frame:0000000000008DA8                 db  83h
.eh_frame:0000000000008DA9                 db    2
.eh_frame:0000000000008DAA                 db  55h ; U
.eh_frame:0000000000008DAB                 db  0Eh
.eh_frame:0000000000008DAC                 db  20h
.eh_frame:0000000000008DAD                 db    2
.eh_frame:0000000000008DAE                 db  42h ; B
.eh_frame:0000000000008DAF                 db  0Ah
.eh_frame:0000000000008DB0                 db  0Eh
.eh_frame:0000000000008DB1                 db  10h
.eh_frame:0000000000008DB2                 db  41h ; A
.eh_frame:0000000000008DB3                 db  0Eh
.eh_frame:0000000000008DB4                 db    8
.eh_frame:0000000000008DB5                 db  47h ; G
.eh_frame:0000000000008DB6                 db  0Bh
.eh_frame:0000000000008DB7                 db    0
.eh_frame:0000000000008DB8                 db  2Ch ; ,
.eh_frame:0000000000008DB9                 db    0
.eh_frame:0000000000008DBA                 db    0
.eh_frame:0000000000008DBB                 db    0
.eh_frame:0000000000008DBC                 db 0ACh
.eh_frame:0000000000008DBD                 db    0
.eh_frame:0000000000008DBE                 db    0
.eh_frame:0000000000008DBF                 db    0
.eh_frame:0000000000008DC0                 db  70h ; p
.eh_frame:0000000000008DC1                 db  9Dh
.eh_frame:0000000000008DC2                 db 0FFh
.eh_frame:0000000000008DC3                 db 0FFh
.eh_frame:0000000000008DC4                 db  3Bh ; ;
.eh_frame:0000000000008DC5                 db    1
.eh_frame:0000000000008DC6                 db    0
.eh_frame:0000000000008DC7                 db    0
.eh_frame:0000000000008DC8                 db    0
.eh_frame:0000000000008DC9                 db  42h ; B
.eh_frame:0000000000008DCA                 db  0Eh
.eh_frame:0000000000008DCB                 db  10h
.eh_frame:0000000000008DCC                 db  8Ch
.eh_frame:0000000000008DCD                 db    2
.eh_frame:0000000000008DCE                 db  41h ; A
.eh_frame:0000000000008DCF                 db  0Eh
.eh_frame:0000000000008DD0                 db  18h
.eh_frame:0000000000008DD1                 db  86h
.eh_frame:0000000000008DD2                 db    3
.eh_frame:0000000000008DD3                 db  44h ; D
.eh_frame:0000000000008DD4                 db  0Eh
.eh_frame:0000000000008DD5                 db  20h
.eh_frame:0000000000008DD6                 db  83h
.eh_frame:0000000000008DD7                 db    4
.eh_frame:0000000000008DD8                 db    2
.eh_frame:0000000000008DD9                 db  9Ah
.eh_frame:0000000000008DDA                 db  0Ah
.eh_frame:0000000000008DDB                 db  0Eh
.eh_frame:0000000000008DDC                 db  18h
.eh_frame:0000000000008DDD                 db  41h ; A
.eh_frame:0000000000008DDE                 db  0Eh
.eh_frame:0000000000008DDF                 db  10h
.eh_frame:0000000000008DE0                 db  42h ; B
.eh_frame:0000000000008DE1                 db  0Eh
.eh_frame:0000000000008DE2                 db    8
.eh_frame:0000000000008DE3                 db  41h ; A
.eh_frame:0000000000008DE4                 db  0Bh
.eh_frame:0000000000008DE5                 db    0
.eh_frame:0000000000008DE6                 db    0
.eh_frame:0000000000008DE7                 db    0
.eh_frame:0000000000008DE8                 db  18h
.eh_frame:0000000000008DE9                 db    0
.eh_frame:0000000000008DEA                 db    0
.eh_frame:0000000000008DEB                 db    0
.eh_frame:0000000000008DEC                 db 0DCh
.eh_frame:0000000000008DED                 db    0
.eh_frame:0000000000008DEE                 db    0
.eh_frame:0000000000008DEF                 db    0
.eh_frame:0000000000008DF0                 db  80h
.eh_frame:0000000000008DF1                 db  9Eh
.eh_frame:0000000000008DF2                 db 0FFh
.eh_frame:0000000000008DF3                 db 0FFh
.eh_frame:0000000000008DF4                 db  28h ; (
.eh_frame:0000000000008DF5                 db    0
.eh_frame:0000000000008DF6                 db    0
.eh_frame:0000000000008DF7                 db    0
.eh_frame:0000000000008DF8                 db    0
.eh_frame:0000000000008DF9                 db  41h ; A
.eh_frame:0000000000008DFA                 db  0Eh
.eh_frame:0000000000008DFB                 db  10h
.eh_frame:0000000000008DFC                 db  83h
.eh_frame:0000000000008DFD                 db    2
.eh_frame:0000000000008DFE                 db  66h ; f
.eh_frame:0000000000008DFF                 db  0Eh
.eh_frame:0000000000008E00                 db    8
.eh_frame:0000000000008E01                 db    0
.eh_frame:0000000000008E02                 db    0
.eh_frame:0000000000008E03                 db    0
.eh_frame:0000000000008E04                 db  1Ch
.eh_frame:0000000000008E05                 db    0
.eh_frame:0000000000008E06                 db    0
.eh_frame:0000000000008E07                 db    0
.eh_frame:0000000000008E08                 db 0F8h
.eh_frame:0000000000008E09                 db    0
.eh_frame:0000000000008E0A                 db    0
.eh_frame:0000000000008E0B                 db    0
.eh_frame:0000000000008E0C                 db  94h
.eh_frame:0000000000008E0D                 db  9Eh
.eh_frame:0000000000008E0E                 db 0FFh
.eh_frame:0000000000008E0F                 db 0FFh
.eh_frame:0000000000008E10                 db  42h ; B
.eh_frame:0000000000008E11                 db    0
.eh_frame:0000000000008E12                 db    0
.eh_frame:0000000000008E13                 db    0
.eh_frame:0000000000008E14                 db    0
.eh_frame:0000000000008E15                 db  41h ; A
.eh_frame:0000000000008E16                 db  0Eh
.eh_frame:0000000000008E17                 db  10h
.eh_frame:0000000000008E18                 db  83h
.eh_frame:0000000000008E19                 db    2
.eh_frame:0000000000008E1A                 db  74h ; t
.eh_frame:0000000000008E1B                 db  0Ah
.eh_frame:0000000000008E1C                 db  0Eh
.eh_frame:0000000000008E1D                 db    8
.eh_frame:0000000000008E1E                 db  4Bh ; K
.eh_frame:0000000000008E1F                 db  0Bh
.eh_frame:0000000000008E20                 db  41h ; A
.eh_frame:0000000000008E21                 db  0Eh
.eh_frame:0000000000008E22                 db    8
.eh_frame:0000000000008E23                 db    0
.eh_frame:0000000000008E24                 db  28h ; (
.eh_frame:0000000000008E25                 db    0
.eh_frame:0000000000008E26                 db    0
.eh_frame:0000000000008E27                 db    0
.eh_frame:0000000000008E28                 db  18h
.eh_frame:0000000000008E29                 db    1
.eh_frame:0000000000008E2A                 db    0
.eh_frame:0000000000008E2B                 db    0
.eh_frame:0000000000008E2C                 db 0C4h
.eh_frame:0000000000008E2D                 db  9Eh
.eh_frame:0000000000008E2E                 db 0FFh
.eh_frame:0000000000008E2F                 db 0FFh
.eh_frame:0000000000008E30                 db  4Eh ; N
.eh_frame:0000000000008E31                 db    0
.eh_frame:0000000000008E32                 db    0
.eh_frame:0000000000008E33                 db    0
.eh_frame:0000000000008E34                 db    0
.eh_frame:0000000000008E35                 db  42h ; B
.eh_frame:0000000000008E36                 db  0Eh
.eh_frame:0000000000008E37                 db  10h
.eh_frame:0000000000008E38                 db  8Ch
.eh_frame:0000000000008E39                 db    2
.eh_frame:0000000000008E3A                 db  41h ; A
.eh_frame:0000000000008E3B                 db  0Eh
.eh_frame:0000000000008E3C                 db  18h
.eh_frame:0000000000008E3D                 db  86h
.eh_frame:0000000000008E3E                 db    3
.eh_frame:0000000000008E3F                 db  44h ; D
.eh_frame:0000000000008E40                 db  0Eh
.eh_frame:0000000000008E41                 db  20h
.eh_frame:0000000000008E42                 db  83h
.eh_frame:0000000000008E43                 db    4
.eh_frame:0000000000008E44                 db  7Bh ; {
.eh_frame:0000000000008E45                 db  0Eh
.eh_frame:0000000000008E46                 db  18h
.eh_frame:0000000000008E47                 db  45h ; E
.eh_frame:0000000000008E48                 db  0Eh
.eh_frame:0000000000008E49                 db  10h
.eh_frame:0000000000008E4A                 db  42h ; B
.eh_frame:0000000000008E4B                 db  0Eh
.eh_frame:0000000000008E4C                 db    8
.eh_frame:0000000000008E4D                 db    0
.eh_frame:0000000000008E4E                 db    0
.eh_frame:0000000000008E4F                 db    0
.eh_frame:0000000000008E50                 db  58h ; X
.eh_frame:0000000000008E51                 db    0
.eh_frame:0000000000008E52                 db    0
.eh_frame:0000000000008E53                 db    0
.eh_frame:0000000000008E54                 db  44h ; D
.eh_frame:0000000000008E55                 db    1
.eh_frame:0000000000008E56                 db    0
.eh_frame:0000000000008E57                 db    0
.eh_frame:0000000000008E58                 db 0E8h
.eh_frame:0000000000008E59                 db  9Eh
.eh_frame:0000000000008E5A                 db 0FFh
.eh_frame:0000000000008E5B                 db 0FFh
.eh_frame:0000000000008E5C                 db  0Ah
.eh_frame:0000000000008E5D                 db    1
.eh_frame:0000000000008E5E                 db    0
.eh_frame:0000000000008E5F                 db    0
.eh_frame:0000000000008E60                 db    0
.eh_frame:0000000000008E61                 db  41h ; A
.eh_frame:0000000000008E62                 db  0Eh
.eh_frame:0000000000008E63                 db  10h
.eh_frame:0000000000008E64                 db  86h
.eh_frame:0000000000008E65                 db    2
.eh_frame:0000000000008E66                 db  41h ; A
.eh_frame:0000000000008E67                 db  0Eh
.eh_frame:0000000000008E68                 db  18h
.eh_frame:0000000000008E69                 db  83h
.eh_frame:0000000000008E6A                 db    3
.eh_frame:0000000000008E6B                 db  44h ; D
.eh_frame:0000000000008E6C                 db  0Eh
.eh_frame:0000000000008E6D                 db  20h
.eh_frame:0000000000008E6E                 db    2
.eh_frame:0000000000008E6F                 db  75h ; u
.eh_frame:0000000000008E70                 db  0Ah
.eh_frame:0000000000008E71                 db  0Eh
.eh_frame:0000000000008E72                 db  18h
.eh_frame:0000000000008E73                 db  44h ; D
.eh_frame:0000000000008E74                 db  0Eh
.eh_frame:0000000000008E75                 db  10h
.eh_frame:0000000000008E76                 db  41h ; A
.eh_frame:0000000000008E77                 db  0Eh
.eh_frame:0000000000008E78                 db    8
.eh_frame:0000000000008E79                 db  48h ; H
.eh_frame:0000000000008E7A                 db  0Bh
.eh_frame:0000000000008E7B                 db  5Ch ; \
.eh_frame:0000000000008E7C                 db  0Ah
.eh_frame:0000000000008E7D                 db  0Eh
.eh_frame:0000000000008E7E                 db  18h
.eh_frame:0000000000008E7F                 db  43h ; C
.eh_frame:0000000000008E80                 db  0Eh
.eh_frame:0000000000008E81                 db  10h
.eh_frame:0000000000008E82                 db  41h ; A
.eh_frame:0000000000008E83                 db  0Eh
.eh_frame:0000000000008E84                 db    8
.eh_frame:0000000000008E85                 db  48h ; H
.eh_frame:0000000000008E86                 db  0Bh
.eh_frame:0000000000008E87                 db  46h ; F
.eh_frame:0000000000008E88                 db  0Ah
.eh_frame:0000000000008E89                 db  0Eh
.eh_frame:0000000000008E8A                 db  18h
.eh_frame:0000000000008E8B                 db  41h ; A
.eh_frame:0000000000008E8C                 db  0Eh
.eh_frame:0000000000008E8D                 db  10h
.eh_frame:0000000000008E8E                 db  41h ; A
.eh_frame:0000000000008E8F                 db  0Eh
.eh_frame:0000000000008E90                 db    8
.eh_frame:0000000000008E91                 db  48h ; H
.eh_frame:0000000000008E92                 db  0Bh
.eh_frame:0000000000008E93                 db  4Ch ; L
.eh_frame:0000000000008E94                 db  0Ah
.eh_frame:0000000000008E95                 db  0Eh
.eh_frame:0000000000008E96                 db  18h
.eh_frame:0000000000008E97                 db  41h ; A
.eh_frame:0000000000008E98                 db  0Eh
.eh_frame:0000000000008E99                 db  10h
.eh_frame:0000000000008E9A                 db  41h ; A
.eh_frame:0000000000008E9B                 db  0Eh
.eh_frame:0000000000008E9C                 db    8
.eh_frame:0000000000008E9D                 db  42h ; B
.eh_frame:0000000000008E9E                 db  0Bh
.eh_frame:0000000000008E9F                 db  5Ch ; \
.eh_frame:0000000000008EA0                 db  0Ah
.eh_frame:0000000000008EA1                 db  0Eh
.eh_frame:0000000000008EA2                 db  18h
.eh_frame:0000000000008EA3                 db  47h ; G
.eh_frame:0000000000008EA4                 db  0Eh
.eh_frame:0000000000008EA5                 db  10h
.eh_frame:0000000000008EA6                 db  44h ; D
.eh_frame:0000000000008EA7                 db  0Eh
.eh_frame:0000000000008EA8                 db    8
.eh_frame:0000000000008EA9                 db  45h ; E
.eh_frame:0000000000008EAA                 db  0Bh
.eh_frame:0000000000008EAB                 db    0
.eh_frame:0000000000008EAC                 db  10h
.eh_frame:0000000000008EAD                 db    0
.eh_frame:0000000000008EAE                 db    0
.eh_frame:0000000000008EAF                 db    0
.eh_frame:0000000000008EB0                 db 0A0h
.eh_frame:0000000000008EB1                 db    1
.eh_frame:0000000000008EB2                 db    0
.eh_frame:0000000000008EB3                 db    0
.eh_frame:0000000000008EB4                 db  9Ch
.eh_frame:0000000000008EB5                 db  9Fh
.eh_frame:0000000000008EB6                 db 0FFh
.eh_frame:0000000000008EB7                 db 0FFh
.eh_frame:0000000000008EB8                 db  52h ; R
.eh_frame:0000000000008EB9                 db    0
.eh_frame:0000000000008EBA                 db    0
.eh_frame:0000000000008EBB                 db    0
.eh_frame:0000000000008EBC                 db    0
.eh_frame:0000000000008EBD                 db    0
.eh_frame:0000000000008EBE                 db    0
.eh_frame:0000000000008EBF                 db    0
.eh_frame:0000000000008EC0                 db  48h ; H
.eh_frame:0000000000008EC1                 db    0
.eh_frame:0000000000008EC2                 db    0
.eh_frame:0000000000008EC3                 db    0
.eh_frame:0000000000008EC4                 db 0B4h
.eh_frame:0000000000008EC5                 db    1
.eh_frame:0000000000008EC6                 db    0
.eh_frame:0000000000008EC7                 db    0
.eh_frame:0000000000008EC8                 db 0E8h
.eh_frame:0000000000008EC9                 db  9Fh
.eh_frame:0000000000008ECA                 db 0FFh
.eh_frame:0000000000008ECB                 db 0FFh
.eh_frame:0000000000008ECC                 db  12h
.eh_frame:0000000000008ECD                 db    1
.eh_frame:0000000000008ECE                 db    0
.eh_frame:0000000000008ECF                 db    0
.eh_frame:0000000000008ED0                 db    0
.eh_frame:0000000000008ED1                 db  42h ; B
.eh_frame:0000000000008ED2                 db  0Eh
.eh_frame:0000000000008ED3                 db  10h
.eh_frame:0000000000008ED4                 db  8Fh
.eh_frame:0000000000008ED5                 db    2
.eh_frame:0000000000008ED6                 db  42h ; B
.eh_frame:0000000000008ED7                 db  0Eh
.eh_frame:0000000000008ED8                 db  18h
.eh_frame:0000000000008ED9                 db  8Eh
.eh_frame:0000000000008EDA                 db    3
.eh_frame:0000000000008EDB                 db  45h ; E
.eh_frame:0000000000008EDC                 db  0Eh
.eh_frame:0000000000008EDD                 db  20h
.eh_frame:0000000000008EDE                 db  8Dh
.eh_frame:0000000000008EDF                 db    4
.eh_frame:0000000000008EE0                 db  42h ; B
.eh_frame:0000000000008EE1                 db  0Eh
.eh_frame:0000000000008EE2                 db  28h ; (
.eh_frame:0000000000008EE3                 db  8Ch
.eh_frame:0000000000008EE4                 db    5
.eh_frame:0000000000008EE5                 db  44h ; D
.eh_frame:0000000000008EE6                 db  0Eh
.eh_frame:0000000000008EE7                 db  30h ; 0
.eh_frame:0000000000008EE8                 db  86h
.eh_frame:0000000000008EE9                 db    6
.eh_frame:0000000000008EEA                 db  41h ; A
.eh_frame:0000000000008EEB                 db  0Eh
.eh_frame:0000000000008EEC                 db  38h ; 8
.eh_frame:0000000000008EED                 db  83h
.eh_frame:0000000000008EEE                 db    7
.eh_frame:0000000000008EEF                 db  44h ; D
.eh_frame:0000000000008EF0                 db  0Eh
.eh_frame:0000000000008EF1                 db  50h ; P
.eh_frame:0000000000008EF2                 db    2
.eh_frame:0000000000008EF3                 db 0D4h
.eh_frame:0000000000008EF4                 db  0Ah
.eh_frame:0000000000008EF5                 db  0Eh
.eh_frame:0000000000008EF6                 db  38h ; 8
.eh_frame:0000000000008EF7                 db  41h ; A
.eh_frame:0000000000008EF8                 db  0Eh
.eh_frame:0000000000008EF9                 db  30h ; 0
.eh_frame:0000000000008EFA                 db  41h ; A
.eh_frame:0000000000008EFB                 db  0Eh
.eh_frame:0000000000008EFC                 db  28h ; (
.eh_frame:0000000000008EFD                 db  42h ; B
.eh_frame:0000000000008EFE                 db  0Eh
.eh_frame:0000000000008EFF                 db  20h
.eh_frame:0000000000008F00                 db  42h ; B
.eh_frame:0000000000008F01                 db  0Eh
.eh_frame:0000000000008F02                 db  18h
.eh_frame:0000000000008F03                 db  42h ; B
.eh_frame:0000000000008F04                 db  0Eh
.eh_frame:0000000000008F05                 db  10h
.eh_frame:0000000000008F06                 db  42h ; B
.eh_frame:0000000000008F07                 db  0Eh
.eh_frame:0000000000008F08                 db    8
.eh_frame:0000000000008F09                 db  46h ; F
.eh_frame:0000000000008F0A                 db  0Bh
.eh_frame:0000000000008F0B                 db    0
.eh_frame:0000000000008F0C                 db  4Ch ; L
.eh_frame:0000000000008F0D                 db    0
.eh_frame:0000000000008F0E                 db    0
.eh_frame:0000000000008F0F                 db    0
.eh_frame:0000000000008F10                 db    0
.eh_frame:0000000000008F11                 db    2
.eh_frame:0000000000008F12                 db    0
.eh_frame:0000000000008F13                 db    0
.eh_frame:0000000000008F14                 db 0BCh
.eh_frame:0000000000008F15                 db 0A0h
.eh_frame:0000000000008F16                 db 0FFh
.eh_frame:0000000000008F17                 db 0FFh
.eh_frame:0000000000008F18                 db  5Fh ; _
.eh_frame:0000000000008F19                 db    1
.eh_frame:0000000000008F1A                 db    0
.eh_frame:0000000000008F1B                 db    0
.eh_frame:0000000000008F1C                 db    0
.eh_frame:0000000000008F1D                 db  42h ; B
.eh_frame:0000000000008F1E                 db  0Eh
.eh_frame:0000000000008F1F                 db  10h
.eh_frame:0000000000008F20                 db  8Eh
.eh_frame:0000000000008F21                 db    2
.eh_frame:0000000000008F22                 db  42h ; B
.eh_frame:0000000000008F23                 db  0Eh
.eh_frame:0000000000008F24                 db  18h
.eh_frame:0000000000008F25                 db  8Dh
.eh_frame:0000000000008F26                 db    3
.eh_frame:0000000000008F27                 db  47h ; G
.eh_frame:0000000000008F28                 db  0Eh
.eh_frame:0000000000008F29                 db  20h
.eh_frame:0000000000008F2A                 db  8Ch
.eh_frame:0000000000008F2B                 db    4
.eh_frame:0000000000008F2C                 db  4Bh ; K
.eh_frame:0000000000008F2D                 db  0Eh
.eh_frame:0000000000008F2E                 db  28h ; (
.eh_frame:0000000000008F2F                 db  86h
.eh_frame:0000000000008F30                 db    5
.eh_frame:0000000000008F31                 db  41h ; A
.eh_frame:0000000000008F32                 db  0Eh
.eh_frame:0000000000008F33                 db  30h ; 0
.eh_frame:0000000000008F34                 db  83h
.eh_frame:0000000000008F35                 db    6
.eh_frame:0000000000008F36                 db    2
.eh_frame:0000000000008F37                 db 0FFh
.eh_frame:0000000000008F38                 db  0Ah
.eh_frame:0000000000008F39                 db  0Eh
.eh_frame:0000000000008F3A                 db  28h ; (
.eh_frame:0000000000008F3B                 db  41h ; A
.eh_frame:0000000000008F3C                 db  0Eh
.eh_frame:0000000000008F3D                 db  20h
.eh_frame:0000000000008F3E                 db  42h ; B
.eh_frame:0000000000008F3F                 db  0Eh
.eh_frame:0000000000008F40                 db  18h
.eh_frame:0000000000008F41                 db  42h ; B
.eh_frame:0000000000008F42                 db  0Eh
.eh_frame:0000000000008F43                 db  10h
.eh_frame:0000000000008F44                 db  42h ; B
.eh_frame:0000000000008F45                 db  0Eh
.eh_frame:0000000000008F46                 db    8
.eh_frame:0000000000008F47                 db  43h ; C
.eh_frame:0000000000008F48                 db  0Bh
.eh_frame:0000000000008F49                 db  61h ; a
.eh_frame:0000000000008F4A                 db  0Ah
.eh_frame:0000000000008F4B                 db  0Eh
.eh_frame:0000000000008F4C                 db  28h ; (
.eh_frame:0000000000008F4D                 db  41h ; A
.eh_frame:0000000000008F4E                 db  0Eh
.eh_frame:0000000000008F4F                 db  20h
.eh_frame:0000000000008F50                 db  42h ; B
.eh_frame:0000000000008F51                 db  0Eh
.eh_frame:0000000000008F52                 db  18h
.eh_frame:0000000000008F53                 db  42h ; B
.eh_frame:0000000000008F54                 db  0Eh
.eh_frame:0000000000008F55                 db  10h
.eh_frame:0000000000008F56                 db  42h ; B
.eh_frame:0000000000008F57                 db  0Eh
.eh_frame:0000000000008F58                 db    8
.eh_frame:0000000000008F59                 db  48h ; H
.eh_frame:0000000000008F5A                 db  0Bh
.eh_frame:0000000000008F5B                 db    0
.eh_frame:0000000000008F5C                 db  28h ; (
.eh_frame:0000000000008F5D                 db    0
.eh_frame:0000000000008F5E                 db    0
.eh_frame:0000000000008F5F                 db    0
.eh_frame:0000000000008F60                 db  50h ; P
.eh_frame:0000000000008F61                 db    2
.eh_frame:0000000000008F62                 db    0
.eh_frame:0000000000008F63                 db    0
.eh_frame:0000000000008F64                 db 0CCh
.eh_frame:0000000000008F65                 db 0A1h
.eh_frame:0000000000008F66                 db 0FFh
.eh_frame:0000000000008F67                 db 0FFh
.eh_frame:0000000000008F68                 db 0B1h
.eh_frame:0000000000008F69                 db    0
.eh_frame:0000000000008F6A                 db    0
.eh_frame:0000000000008F6B                 db    0
.eh_frame:0000000000008F6C                 db    0
.eh_frame:0000000000008F6D                 db  42h ; B
.eh_frame:0000000000008F6E                 db  0Eh
.eh_frame:0000000000008F6F                 db  10h
.eh_frame:0000000000008F70                 db  8Ch
.eh_frame:0000000000008F71                 db    2
.eh_frame:0000000000008F72                 db  44h ; D
.eh_frame:0000000000008F73                 db  0Eh
.eh_frame:0000000000008F74                 db  18h
.eh_frame:0000000000008F75                 db  86h
.eh_frame:0000000000008F76                 db    3
.eh_frame:0000000000008F77                 db  41h ; A
.eh_frame:0000000000008F78                 db  0Eh
.eh_frame:0000000000008F79                 db  20h
.eh_frame:0000000000008F7A                 db  83h
.eh_frame:0000000000008F7B                 db    4
.eh_frame:0000000000008F7C                 db  71h ; q
.eh_frame:0000000000008F7D                 db  0Ah
.eh_frame:0000000000008F7E                 db  0Eh
.eh_frame:0000000000008F7F                 db  18h
.eh_frame:0000000000008F80                 db  41h ; A
.eh_frame:0000000000008F81                 db  0Eh
.eh_frame:0000000000008F82                 db  10h
.eh_frame:0000000000008F83                 db  42h ; B
.eh_frame:0000000000008F84                 db  0Eh
.eh_frame:0000000000008F85                 db    8
.eh_frame:0000000000008F86                 db  45h ; E
.eh_frame:0000000000008F87                 db  0Bh
.eh_frame:0000000000008F88                 db  70h ; p
.eh_frame:0000000000008F89                 db    0
.eh_frame:0000000000008F8A                 db    0
.eh_frame:0000000000008F8B                 db    0
.eh_frame:0000000000008F8C                 db  7Ch ; |
.eh_frame:0000000000008F8D                 db    2
.eh_frame:0000000000008F8E                 db    0
.eh_frame:0000000000008F8F                 db    0
.eh_frame:0000000000008F90                 db  60h ; `
.eh_frame:0000000000008F91                 db 0A2h
.eh_frame:0000000000008F92                 db 0FFh
.eh_frame:0000000000008F93                 db 0FFh
.eh_frame:0000000000008F94                 db 0E2h
.eh_frame:0000000000008F95                 db    3
.eh_frame:0000000000008F96                 db    0
.eh_frame:0000000000008F97                 db    0
.eh_frame:0000000000008F98                 db    0
.eh_frame:0000000000008F99                 db  42h ; B
.eh_frame:0000000000008F9A                 db  0Eh
.eh_frame:0000000000008F9B                 db  10h
.eh_frame:0000000000008F9C                 db  8Fh
.eh_frame:0000000000008F9D                 db    2
.eh_frame:0000000000008F9E                 db  42h ; B
.eh_frame:0000000000008F9F                 db  0Eh
.eh_frame:0000000000008FA0                 db  18h
.eh_frame:0000000000008FA1                 db  8Eh
.eh_frame:0000000000008FA2                 db    3
.eh_frame:0000000000008FA3                 db  45h ; E
.eh_frame:0000000000008FA4                 db  0Eh
.eh_frame:0000000000008FA5                 db  20h
.eh_frame:0000000000008FA6                 db  8Dh
.eh_frame:0000000000008FA7                 db    4
.eh_frame:0000000000008FA8                 db  42h ; B
.eh_frame:0000000000008FA9                 db  0Eh
.eh_frame:0000000000008FAA                 db  28h ; (
.eh_frame:0000000000008FAB                 db  8Ch
.eh_frame:0000000000008FAC                 db    5
.eh_frame:0000000000008FAD                 db  48h ; H
.eh_frame:0000000000008FAE                 db  0Eh
.eh_frame:0000000000008FAF                 db  30h ; 0
.eh_frame:0000000000008FB0                 db  86h
.eh_frame:0000000000008FB1                 db    6
.eh_frame:0000000000008FB2                 db  41h ; A
.eh_frame:0000000000008FB3                 db  0Eh
.eh_frame:0000000000008FB4                 db  38h ; 8
.eh_frame:0000000000008FB5                 db  83h
.eh_frame:0000000000008FB6                 db    7
.eh_frame:0000000000008FB7                 db  4Dh ; M
.eh_frame:0000000000008FB8                 db  0Eh
.eh_frame:0000000000008FB9                 db  50h ; P
.eh_frame:0000000000008FBA                 db    3
.eh_frame:0000000000008FBB                 db  2Fh ; /
.eh_frame:0000000000008FBC                 db    2
.eh_frame:0000000000008FBD                 db  0Eh
.eh_frame:0000000000008FBE                 db  58h ; X
.eh_frame:0000000000008FBF                 db  44h ; D
.eh_frame:0000000000008FC0                 db  0Eh
.eh_frame:0000000000008FC1                 db  60h ; `
.eh_frame:0000000000008FC2                 db  57h ; W
.eh_frame:0000000000008FC3                 db  0Eh
.eh_frame:0000000000008FC4                 db  58h ; X
.eh_frame:0000000000008FC5                 db  41h ; A
.eh_frame:0000000000008FC6                 db  0Eh
.eh_frame:0000000000008FC7                 db  50h ; P
.eh_frame:0000000000008FC8                 db  51h ; Q
.eh_frame:0000000000008FC9                 db  0Ah
.eh_frame:0000000000008FCA                 db  0Eh
.eh_frame:0000000000008FCB                 db  38h ; 8
.eh_frame:0000000000008FCC                 db  41h ; A
.eh_frame:0000000000008FCD                 db  0Eh
.eh_frame:0000000000008FCE                 db  30h ; 0
.eh_frame:0000000000008FCF                 db  41h ; A
.eh_frame:0000000000008FD0                 db  0Eh
.eh_frame:0000000000008FD1                 db  28h ; (
.eh_frame:0000000000008FD2                 db  42h ; B
.eh_frame:0000000000008FD3                 db  0Eh
.eh_frame:0000000000008FD4                 db  20h
.eh_frame:0000000000008FD5                 db  42h ; B
.eh_frame:0000000000008FD6                 db  0Eh
.eh_frame:0000000000008FD7                 db  18h
.eh_frame:0000000000008FD8                 db  42h ; B
.eh_frame:0000000000008FD9                 db  0Eh
.eh_frame:0000000000008FDA                 db  10h
.eh_frame:0000000000008FDB                 db  42h ; B
.eh_frame:0000000000008FDC                 db  0Eh
.eh_frame:0000000000008FDD                 db    8
.eh_frame:0000000000008FDE                 db  49h ; I
.eh_frame:0000000000008FDF                 db  0Bh
.eh_frame:0000000000008FE0                 db    2
.eh_frame:0000000000008FE1                 db  74h ; t
.eh_frame:0000000000008FE2                 db  0Ah
.eh_frame:0000000000008FE3                 db  0Eh
.eh_frame:0000000000008FE4                 db  38h ; 8
.eh_frame:0000000000008FE5                 db  41h ; A
.eh_frame:0000000000008FE6                 db  0Eh
.eh_frame:0000000000008FE7                 db  30h ; 0
.eh_frame:0000000000008FE8                 db  41h ; A
.eh_frame:0000000000008FE9                 db  0Eh
.eh_frame:0000000000008FEA                 db  28h ; (
.eh_frame:0000000000008FEB                 db  42h ; B
.eh_frame:0000000000008FEC                 db  0Eh
.eh_frame:0000000000008FED                 db  20h
.eh_frame:0000000000008FEE                 db  42h ; B
.eh_frame:0000000000008FEF                 db  0Eh
.eh_frame:0000000000008FF0                 db  18h
.eh_frame:0000000000008FF1                 db  42h ; B
.eh_frame:0000000000008FF2                 db  0Eh
.eh_frame:0000000000008FF3                 db  10h
.eh_frame:0000000000008FF4                 db  42h ; B
.eh_frame:0000000000008FF5                 db  0Eh
.eh_frame:0000000000008FF6                 db    8
.eh_frame:0000000000008FF7                 db  42h ; B
.eh_frame:0000000000008FF8                 db  0Bh
.eh_frame:0000000000008FF9                 db    0
.eh_frame:0000000000008FFA                 db    0
.eh_frame:0000000000008FFB                 db    0
.eh_frame:0000000000008FFC                 db  28h ; (
.eh_frame:0000000000008FFD                 db    0
.eh_frame:0000000000008FFE                 db    0
.eh_frame:0000000000008FFF                 db    0
.eh_frame:0000000000009000                 db 0F0h
.eh_frame:0000000000009001                 db    2
.eh_frame:0000000000009002                 db    0
.eh_frame:0000000000009003                 db    0
.eh_frame:0000000000009004                 db 0DCh
.eh_frame:0000000000009005                 db 0A5h
.eh_frame:0000000000009006                 db 0FFh
.eh_frame:0000000000009007                 db 0FFh
.eh_frame:0000000000009008                 db 0D9h
.eh_frame:0000000000009009                 db    0
.eh_frame:000000000000900A                 db    0
.eh_frame:000000000000900B                 db    0
.eh_frame:000000000000900C                 db    0
.eh_frame:000000000000900D                 db  42h ; B
.eh_frame:000000000000900E                 db  0Eh
.eh_frame:000000000000900F                 db  10h
.eh_frame:0000000000009010                 db  8Ch
.eh_frame:0000000000009011                 db    2
.eh_frame:0000000000009012                 db  41h ; A
.eh_frame:0000000000009013                 db  0Eh
.eh_frame:0000000000009014                 db  18h
.eh_frame:0000000000009015                 db  86h
.eh_frame:0000000000009016                 db    3
.eh_frame:0000000000009017                 db  44h ; D
.eh_frame:0000000000009018                 db  0Eh
.eh_frame:0000000000009019                 db  20h
.eh_frame:000000000000901A                 db  83h
.eh_frame:000000000000901B                 db    4
.eh_frame:000000000000901C                 db  6Bh ; k
.eh_frame:000000000000901D                 db  0Ah
.eh_frame:000000000000901E                 db  0Eh
.eh_frame:000000000000901F                 db  18h
.eh_frame:0000000000009020                 db  41h ; A
.eh_frame:0000000000009021                 db  0Eh
.eh_frame:0000000000009022                 db  10h
.eh_frame:0000000000009023                 db  42h ; B
.eh_frame:0000000000009024                 db  0Eh
.eh_frame:0000000000009025                 db    8
.eh_frame:0000000000009026                 db  4Bh ; K
.eh_frame:0000000000009027                 db  0Bh
.eh_frame:0000000000009028                 db  28h ; (
.eh_frame:0000000000009029                 db    0
.eh_frame:000000000000902A                 db    0
.eh_frame:000000000000902B                 db    0
.eh_frame:000000000000902C                 db  1Ch
.eh_frame:000000000000902D                 db    3
.eh_frame:000000000000902E                 db    0
.eh_frame:000000000000902F                 db    0
.eh_frame:0000000000009030                 db  90h
.eh_frame:0000000000009031                 db 0A6h
.eh_frame:0000000000009032                 db 0FFh
.eh_frame:0000000000009033                 db 0FFh
.eh_frame:0000000000009034                 db  1Ah
.eh_frame:0000000000009035                 db    4
.eh_frame:0000000000009036                 db    0
.eh_frame:0000000000009037                 db    0
.eh_frame:0000000000009038                 db    0
.eh_frame:0000000000009039                 db  42h ; B
.eh_frame:000000000000903A                 db  0Eh
.eh_frame:000000000000903B                 db  10h
.eh_frame:000000000000903C                 db  8Dh
.eh_frame:000000000000903D                 db    2
.eh_frame:000000000000903E                 db  42h ; B
.eh_frame:000000000000903F                 db  0Eh
.eh_frame:0000000000009040                 db  18h
.eh_frame:0000000000009041                 db  8Ch
.eh_frame:0000000000009042                 db    3
.eh_frame:0000000000009043                 db  46h ; F
.eh_frame:0000000000009044                 db  0Eh
.eh_frame:0000000000009045                 db  20h
.eh_frame:0000000000009046                 db  86h
.eh_frame:0000000000009047                 db    4
.eh_frame:0000000000009048                 db  41h ; A
.eh_frame:0000000000009049                 db  0Eh
.eh_frame:000000000000904A                 db  28h ; (
.eh_frame:000000000000904B                 db  83h
.eh_frame:000000000000904C                 db    5
.eh_frame:000000000000904D                 db  49h ; I
.eh_frame:000000000000904E                 db  0Eh
.eh_frame:000000000000904F                 db 0B0h
.eh_frame:0000000000009050                 db    1
.eh_frame:0000000000009051                 db    0
.eh_frame:0000000000009052                 db    0
.eh_frame:0000000000009053                 db    0
.eh_frame:0000000000009054                 db  40h ; @
.eh_frame:0000000000009055                 db    0
.eh_frame:0000000000009056                 db    0
.eh_frame:0000000000009057                 db    0
.eh_frame:0000000000009058                 db  48h ; H
.eh_frame:0000000000009059                 db    3
.eh_frame:000000000000905A                 db    0
.eh_frame:000000000000905B                 db    0
.eh_frame:000000000000905C                 db  84h
.eh_frame:000000000000905D                 db 0AAh
.eh_frame:000000000000905E                 db 0FFh
.eh_frame:000000000000905F                 db 0FFh
.eh_frame:0000000000009060                 db 0B6h
.eh_frame:0000000000009061                 db    1
.eh_frame:0000000000009062                 db    0
.eh_frame:0000000000009063                 db    0
.eh_frame:0000000000009064                 db    0
.eh_frame:0000000000009065                 db  42h ; B
.eh_frame:0000000000009066                 db  0Eh
.eh_frame:0000000000009067                 db  10h
.eh_frame:0000000000009068                 db  8Eh
.eh_frame:0000000000009069                 db    2
.eh_frame:000000000000906A                 db  42h ; B
.eh_frame:000000000000906B                 db  0Eh
.eh_frame:000000000000906C                 db  18h
.eh_frame:000000000000906D                 db  8Dh
.eh_frame:000000000000906E                 db    3
.eh_frame:000000000000906F                 db  45h ; E
.eh_frame:0000000000009070                 db  0Eh
.eh_frame:0000000000009071                 db  20h
.eh_frame:0000000000009072                 db  8Ch
.eh_frame:0000000000009073                 db    4
.eh_frame:0000000000009074                 db  41h ; A
.eh_frame:0000000000009075                 db  0Eh
.eh_frame:0000000000009076                 db  28h ; (
.eh_frame:0000000000009077                 db  86h
.eh_frame:0000000000009078                 db    5
.eh_frame:0000000000009079                 db  44h ; D
.eh_frame:000000000000907A                 db  0Eh
.eh_frame:000000000000907B                 db  30h ; 0
.eh_frame:000000000000907C                 db  83h
.eh_frame:000000000000907D                 db    6
.eh_frame:000000000000907E                 db  44h ; D
.eh_frame:000000000000907F                 db  0Eh
.eh_frame:0000000000009080                 db  50h ; P
.eh_frame:0000000000009081                 db  7Eh ; ~
.eh_frame:0000000000009082                 db  0Ah
.eh_frame:0000000000009083                 db  0Eh
.eh_frame:0000000000009084                 db  30h ; 0
.eh_frame:0000000000009085                 db  41h ; A
.eh_frame:0000000000009086                 db  0Eh
.eh_frame:0000000000009087                 db  28h ; (
.eh_frame:0000000000009088                 db  41h ; A
.eh_frame:0000000000009089                 db  0Eh
.eh_frame:000000000000908A                 db  20h
.eh_frame:000000000000908B                 db  42h ; B
.eh_frame:000000000000908C                 db  0Eh
.eh_frame:000000000000908D                 db  18h
.eh_frame:000000000000908E                 db  42h ; B
.eh_frame:000000000000908F                 db  0Eh
.eh_frame:0000000000009090                 db  10h
.eh_frame:0000000000009091                 db  42h ; B
.eh_frame:0000000000009092                 db  0Eh
.eh_frame:0000000000009093                 db    8
.eh_frame:0000000000009094                 db  48h ; H
.eh_frame:0000000000009095                 db  0Bh
.eh_frame:0000000000009096                 db    0
.eh_frame:0000000000009097                 db    0
.eh_frame:0000000000009098                 db  4Ch ; L
.eh_frame:0000000000009099                 db    0
.eh_frame:000000000000909A                 db    0
.eh_frame:000000000000909B                 db    0
.eh_frame:000000000000909C                 db  8Ch
.eh_frame:000000000000909D                 db    3
.eh_frame:000000000000909E                 db    0
.eh_frame:000000000000909F                 db    0
.eh_frame:00000000000090A0                 db  10h
.eh_frame:00000000000090A1                 db  89h
.eh_frame:00000000000090A2                 db 0FFh
.eh_frame:00000000000090A3                 db 0FFh
.eh_frame:00000000000090A4                 db  7Ah ; z
.eh_frame:00000000000090A5                 db  0Fh
.eh_frame:00000000000090A6                 db    0
.eh_frame:00000000000090A7                 db    0
.eh_frame:00000000000090A8                 db    0
.eh_frame:00000000000090A9                 db  42h ; B
.eh_frame:00000000000090AA                 db  0Eh
.eh_frame:00000000000090AB                 db  10h
.eh_frame:00000000000090AC                 db  8Fh
.eh_frame:00000000000090AD                 db    2
.eh_frame:00000000000090AE                 db  42h ; B
.eh_frame:00000000000090AF                 db  0Eh
.eh_frame:00000000000090B0                 db  18h
.eh_frame:00000000000090B1                 db  8Eh
.eh_frame:00000000000090B2                 db    3
.eh_frame:00000000000090B3                 db  42h ; B
.eh_frame:00000000000090B4                 db  0Eh
.eh_frame:00000000000090B5                 db  20h
.eh_frame:00000000000090B6                 db  8Dh
.eh_frame:00000000000090B7                 db    4
.eh_frame:00000000000090B8                 db  42h ; B
.eh_frame:00000000000090B9                 db  0Eh
.eh_frame:00000000000090BA                 db  28h ; (
.eh_frame:00000000000090BB                 db  8Ch
.eh_frame:00000000000090BC                 db    5
.eh_frame:00000000000090BD                 db  41h ; A
.eh_frame:00000000000090BE                 db  0Eh
.eh_frame:00000000000090BF                 db  30h ; 0
.eh_frame:00000000000090C0                 db  86h
.eh_frame:00000000000090C1                 db    6
.eh_frame:00000000000090C2                 db  41h ; A
.eh_frame:00000000000090C3                 db  0Eh
.eh_frame:00000000000090C4                 db  38h ; 8
.eh_frame:00000000000090C5                 db  83h
.eh_frame:00000000000090C6                 db    7
.eh_frame:00000000000090C7                 db  4Dh ; M
.eh_frame:00000000000090C8                 db  0Eh
.eh_frame:00000000000090C9                 db 0D0h
.eh_frame:00000000000090CA                 db    1
.eh_frame:00000000000090CB                 db    3
.eh_frame:00000000000090CC                 db  55h ; U
.eh_frame:00000000000090CD                 db    7
.eh_frame:00000000000090CE                 db  0Ah
.eh_frame:00000000000090CF                 db  0Eh
.eh_frame:00000000000090D0                 db  38h ; 8
.eh_frame:00000000000090D1                 db  41h ; A
.eh_frame:00000000000090D2                 db  0Eh
.eh_frame:00000000000090D3                 db  30h ; 0
.eh_frame:00000000000090D4                 db  41h ; A
.eh_frame:00000000000090D5                 db  0Eh
.eh_frame:00000000000090D6                 db  28h ; (
.eh_frame:00000000000090D7                 db  42h ; B
.eh_frame:00000000000090D8                 db  0Eh
.eh_frame:00000000000090D9                 db  20h
.eh_frame:00000000000090DA                 db  42h ; B
.eh_frame:00000000000090DB                 db  0Eh
.eh_frame:00000000000090DC                 db  18h
.eh_frame:00000000000090DD                 db  42h ; B
.eh_frame:00000000000090DE                 db  0Eh
.eh_frame:00000000000090DF                 db  10h
.eh_frame:00000000000090E0                 db  42h ; B
.eh_frame:00000000000090E1                 db  0Eh
.eh_frame:00000000000090E2                 db    8
.eh_frame:00000000000090E3                 db  4Ah ; J
.eh_frame:00000000000090E4                 db  0Bh
.eh_frame:00000000000090E5                 db    0
.eh_frame:00000000000090E6                 db    0
.eh_frame:00000000000090E7                 db    0
.eh_frame:00000000000090E8                 db  10h
.eh_frame:00000000000090E9                 db    0
.eh_frame:00000000000090EA                 db    0
.eh_frame:00000000000090EB                 db    0
.eh_frame:00000000000090EC                 db 0DCh
.eh_frame:00000000000090ED                 db    3
.eh_frame:00000000000090EE                 db    0
.eh_frame:00000000000090EF                 db    0
.eh_frame:00000000000090F0                 db 0B0h
.eh_frame:00000000000090F1                 db 0ABh
.eh_frame:00000000000090F2                 db 0FFh
.eh_frame:00000000000090F3                 db 0FFh
.eh_frame:00000000000090F4                 db    8
.eh_frame:00000000000090F5                 db    0
.eh_frame:00000000000090F6                 db    0
.eh_frame:00000000000090F7                 db    0
.eh_frame:00000000000090F8                 db    0
.eh_frame:00000000000090F9                 db    0
.eh_frame:00000000000090FA                 db    0
.eh_frame:00000000000090FB                 db    0
.eh_frame:00000000000090FC                 db  10h
.eh_frame:00000000000090FD                 db    0
.eh_frame:00000000000090FE                 db    0
.eh_frame:00000000000090FF                 db    0
.eh_frame:0000000000009100                 db 0F0h
.eh_frame:0000000000009101                 db    3
.eh_frame:0000000000009102                 db    0
.eh_frame:0000000000009103                 db    0
.eh_frame:0000000000009104                 db 0ACh
.eh_frame:0000000000009105                 db 0ABh
.eh_frame:0000000000009106                 db 0FFh
.eh_frame:0000000000009107                 db 0FFh
.eh_frame:0000000000009108                 db    8
.eh_frame:0000000000009109                 db    0
.eh_frame:000000000000910A                 db    0
.eh_frame:000000000000910B                 db    0
.eh_frame:000000000000910C                 db    0
.eh_frame:000000000000910D                 db    0
.eh_frame:000000000000910E                 db    0
.eh_frame:000000000000910F                 db    0
.eh_frame:0000000000009110                 db  2Ch ; ,
.eh_frame:0000000000009111                 db    0
.eh_frame:0000000000009112                 db    0
.eh_frame:0000000000009113                 db    0
.eh_frame:0000000000009114                 db    4
.eh_frame:0000000000009115                 db    4
.eh_frame:0000000000009116                 db    0
.eh_frame:0000000000009117                 db    0
.eh_frame:0000000000009118                 db 0A8h
.eh_frame:0000000000009119                 db 0ABh
.eh_frame:000000000000911A                 db 0FFh
.eh_frame:000000000000911B                 db 0FFh
.eh_frame:000000000000911C                 db 0A4h
.eh_frame:000000000000911D                 db    0
.eh_frame:000000000000911E                 db    0
.eh_frame:000000000000911F                 db    0
.eh_frame:0000000000009120                 db    0
.eh_frame:0000000000009121                 db  41h ; A
.eh_frame:0000000000009122                 db  0Eh
.eh_frame:0000000000009123                 db  10h
.eh_frame:0000000000009124                 db  86h
.eh_frame:0000000000009125                 db    2
.eh_frame:0000000000009126                 db  41h ; A
.eh_frame:0000000000009127                 db  0Eh
.eh_frame:0000000000009128                 db  18h
.eh_frame:0000000000009129                 db  83h
.eh_frame:000000000000912A                 db    3
.eh_frame:000000000000912B                 db  44h ; D
.eh_frame:000000000000912C                 db  0Eh
.eh_frame:000000000000912D                 db  20h
.eh_frame:000000000000912E                 db  7Ah ; z
.eh_frame:000000000000912F                 db  0Ah
.eh_frame:0000000000009130                 db  0Eh
.eh_frame:0000000000009131                 db  18h
.eh_frame:0000000000009132                 db  41h ; A
.eh_frame:0000000000009133                 db  0Eh
.eh_frame:0000000000009134                 db  10h
.eh_frame:0000000000009135                 db  41h ; A
.eh_frame:0000000000009136                 db  0Eh
.eh_frame:0000000000009137                 db    8
.eh_frame:0000000000009138                 db  41h ; A
.eh_frame:0000000000009139                 db  0Bh
.eh_frame:000000000000913A                 db    0
.eh_frame:000000000000913B                 db    0
.eh_frame:000000000000913C                 db    0
.eh_frame:000000000000913D                 db    0
.eh_frame:000000000000913E                 db    0
.eh_frame:000000000000913F                 db    0
.eh_frame:0000000000009140                 db  10h
.eh_frame:0000000000009141                 db    0
.eh_frame:0000000000009142                 db    0
.eh_frame:0000000000009143                 db    0
.eh_frame:0000000000009144                 db  34h ; 4
.eh_frame:0000000000009145                 db    4
.eh_frame:0000000000009146                 db    0
.eh_frame:0000000000009147                 db    0
.eh_frame:0000000000009148                 db  28h ; (
.eh_frame:0000000000009149                 db 0ACh
.eh_frame:000000000000914A                 db 0FFh
.eh_frame:000000000000914B                 db 0FFh
.eh_frame:000000000000914C                 db    5
.eh_frame:000000000000914D                 db    0
.eh_frame:000000000000914E                 db    0
.eh_frame:000000000000914F                 db    0
.eh_frame:0000000000009150                 db    0
.eh_frame:0000000000009151                 db    0
.eh_frame:0000000000009152                 db    0
.eh_frame:0000000000009153                 db    0
.eh_frame:0000000000009154                 db  18h
.eh_frame:0000000000009155                 db    0
.eh_frame:0000000000009156                 db    0
.eh_frame:0000000000009157                 db    0
.eh_frame:0000000000009158                 db  48h ; H
.eh_frame:0000000000009159                 db    4
.eh_frame:000000000000915A                 db    0
.eh_frame:000000000000915B                 db    0
.eh_frame:000000000000915C                 db  24h ; $
.eh_frame:000000000000915D                 db 0ACh
.eh_frame:000000000000915E                 db 0FFh
.eh_frame:000000000000915F                 db 0FFh
.eh_frame:0000000000009160                 db  22h ; "
.eh_frame:0000000000009161                 db    0
.eh_frame:0000000000009162                 db    0
.eh_frame:0000000000009163                 db    0
.eh_frame:0000000000009164                 db    0
.eh_frame:0000000000009165                 db  46h ; F
.eh_frame:0000000000009166                 db  0Eh
.eh_frame:0000000000009167                 db  10h
.eh_frame:0000000000009168                 db  83h
.eh_frame:0000000000009169                 db    2
.eh_frame:000000000000916A                 db  4Eh ; N
.eh_frame:000000000000916B                 db 0C3h
.eh_frame:000000000000916C                 db  0Eh
.eh_frame:000000000000916D                 db    8
.eh_frame:000000000000916E                 db    0
.eh_frame:000000000000916F                 db    0
.eh_frame:0000000000009170                 db  2Ch ; ,
.eh_frame:0000000000009171                 db    0
.eh_frame:0000000000009172                 db    0
.eh_frame:0000000000009173                 db    0
.eh_frame:0000000000009174                 db  64h ; d
.eh_frame:0000000000009175                 db    4
.eh_frame:0000000000009176                 db    0
.eh_frame:0000000000009177                 db    0
.eh_frame:0000000000009178                 db  38h ; 8
.eh_frame:0000000000009179                 db 0ACh
.eh_frame:000000000000917A                 db 0FFh
.eh_frame:000000000000917B                 db 0FFh
.eh_frame:000000000000917C                 db  93h
.eh_frame:000000000000917D                 db    0
.eh_frame:000000000000917E                 db    0
.eh_frame:000000000000917F                 db    0
.eh_frame:0000000000009180                 db    0
.eh_frame:0000000000009181                 db  42h ; B
.eh_frame:0000000000009182                 db  0Eh
.eh_frame:0000000000009183                 db  10h
.eh_frame:0000000000009184                 db  8Ch
.eh_frame:0000000000009185                 db    2
.eh_frame:0000000000009186                 db  41h ; A
.eh_frame:0000000000009187                 db  0Eh
.eh_frame:0000000000009188                 db  18h
.eh_frame:0000000000009189                 db  86h
.eh_frame:000000000000918A                 db    3
.eh_frame:000000000000918B                 db  44h ; D
.eh_frame:000000000000918C                 db  0Eh
.eh_frame:000000000000918D                 db  20h
.eh_frame:000000000000918E                 db  83h
.eh_frame:000000000000918F                 db    4
.eh_frame:0000000000009190                 db  5Eh ; ^
.eh_frame:0000000000009191                 db  0Ah
.eh_frame:0000000000009192                 db  0Eh
.eh_frame:0000000000009193                 db  18h
.eh_frame:0000000000009194                 db  41h ; A
.eh_frame:0000000000009195                 db  0Eh
.eh_frame:0000000000009196                 db  10h
.eh_frame:0000000000009197                 db  42h ; B
.eh_frame:0000000000009198                 db  0Eh
.eh_frame:0000000000009199                 db    8
.eh_frame:000000000000919A                 db  48h ; H
.eh_frame:000000000000919B                 db  0Bh
.eh_frame:000000000000919C                 db    0
.eh_frame:000000000000919D                 db    0
.eh_frame:000000000000919E                 db    0
.eh_frame:000000000000919F                 db    0
.eh_frame:00000000000091A0                 db  1Ch
.eh_frame:00000000000091A1                 db    0
.eh_frame:00000000000091A2                 db    0
.eh_frame:00000000000091A3                 db    0
.eh_frame:00000000000091A4                 db  94h
.eh_frame:00000000000091A5                 db    4
.eh_frame:00000000000091A6                 db    0
.eh_frame:00000000000091A7                 db    0
.eh_frame:00000000000091A8                 db 0A8h
.eh_frame:00000000000091A9                 db 0ACh
.eh_frame:00000000000091AA                 db 0FFh
.eh_frame:00000000000091AB                 db 0FFh
.eh_frame:00000000000091AC                 db  60h ; `
.eh_frame:00000000000091AD                 db    0
.eh_frame:00000000000091AE                 db    0
.eh_frame:00000000000091AF                 db    0
.eh_frame:00000000000091B0                 db    0
.eh_frame:00000000000091B1                 db  44h ; D
.eh_frame:00000000000091B2                 db  0Eh
.eh_frame:00000000000091B3                 db  10h
.eh_frame:00000000000091B4                 db  75h ; u
.eh_frame:00000000000091B5                 db  0Ah
.eh_frame:00000000000091B6                 db  0Eh
.eh_frame:00000000000091B7                 db    8
.eh_frame:00000000000091B8                 db  47h ; G
.eh_frame:00000000000091B9                 db  0Bh
.eh_frame:00000000000091BA                 db  5Fh ; _
.eh_frame:00000000000091BB                 db  0Eh
.eh_frame:00000000000091BC                 db    8
.eh_frame:00000000000091BD                 db    0
.eh_frame:00000000000091BE                 db    0
.eh_frame:00000000000091BF                 db    0
.eh_frame:00000000000091C0                 db  10h
.eh_frame:00000000000091C1                 db    0
.eh_frame:00000000000091C2                 db    0
.eh_frame:00000000000091C3                 db    0
.eh_frame:00000000000091C4                 db 0B4h
.eh_frame:00000000000091C5                 db    4
.eh_frame:00000000000091C6                 db    0
.eh_frame:00000000000091C7                 db    0
.eh_frame:00000000000091C8                 db 0E8h
.eh_frame:00000000000091C9                 db 0ACh
.eh_frame:00000000000091CA                 db 0FFh
.eh_frame:00000000000091CB                 db 0FFh
.eh_frame:00000000000091CC                 db  10h
.eh_frame:00000000000091CD                 db    0
.eh_frame:00000000000091CE                 db    0
.eh_frame:00000000000091CF                 db    0
.eh_frame:00000000000091D0                 db    0
.eh_frame:00000000000091D1                 db    0
.eh_frame:00000000000091D2                 db    0
.eh_frame:00000000000091D3                 db    0
.eh_frame:00000000000091D4                 db  60h ; `
.eh_frame:00000000000091D5                 db    0
.eh_frame:00000000000091D6                 db    0
.eh_frame:00000000000091D7                 db    0
.eh_frame:00000000000091D8                 db 0C8h
.eh_frame:00000000000091D9                 db    4
.eh_frame:00000000000091DA                 db    0
.eh_frame:00000000000091DB                 db    0
.eh_frame:00000000000091DC                 db 0E4h
.eh_frame:00000000000091DD                 db 0ACh
.eh_frame:00000000000091DE                 db 0FFh
.eh_frame:00000000000091DF                 db 0FFh
.eh_frame:00000000000091E0                 db    8
.eh_frame:00000000000091E1                 db    1
.eh_frame:00000000000091E2                 db    0
.eh_frame:00000000000091E3                 db    0
.eh_frame:00000000000091E4                 db    0
.eh_frame:00000000000091E5                 db  42h ; B
.eh_frame:00000000000091E6                 db  0Eh
.eh_frame:00000000000091E7                 db  10h
.eh_frame:00000000000091E8                 db  8Fh
.eh_frame:00000000000091E9                 db    2
.eh_frame:00000000000091EA                 db  42h ; B
.eh_frame:00000000000091EB                 db  0Eh
.eh_frame:00000000000091EC                 db  18h
.eh_frame:00000000000091ED                 db  8Eh
.eh_frame:00000000000091EE                 db    3
.eh_frame:00000000000091EF                 db  42h ; B
.eh_frame:00000000000091F0                 db  0Eh
.eh_frame:00000000000091F1                 db  20h
.eh_frame:00000000000091F2                 db  8Dh
.eh_frame:00000000000091F3                 db    4
.eh_frame:00000000000091F4                 db  42h ; B
.eh_frame:00000000000091F5                 db  0Eh
.eh_frame:00000000000091F6                 db  28h ; (
.eh_frame:00000000000091F7                 db  8Ch
.eh_frame:00000000000091F8                 db    5
.eh_frame:00000000000091F9                 db  41h ; A
.eh_frame:00000000000091FA                 db  0Eh
.eh_frame:00000000000091FB                 db  30h ; 0
.eh_frame:00000000000091FC                 db  86h
.eh_frame:00000000000091FD                 db    6
.eh_frame:00000000000091FE                 db  41h ; A
.eh_frame:00000000000091FF                 db  0Eh
.eh_frame:0000000000009200                 db  38h ; 8
.eh_frame:0000000000009201                 db  83h
.eh_frame:0000000000009202                 db    7
.eh_frame:0000000000009203                 db  44h ; D
.eh_frame:0000000000009204                 db  0Eh
.eh_frame:0000000000009205                 db  50h ; P
.eh_frame:0000000000009206                 db    2
.eh_frame:0000000000009207                 db  96h
.eh_frame:0000000000009208                 db  0Ah
.eh_frame:0000000000009209                 db  0Eh
.eh_frame:000000000000920A                 db  38h ; 8
.eh_frame:000000000000920B                 db  41h ; A
.eh_frame:000000000000920C                 db  0Eh
.eh_frame:000000000000920D                 db  30h ; 0
.eh_frame:000000000000920E                 db  41h ; A
.eh_frame:000000000000920F                 db  0Eh
.eh_frame:0000000000009210                 db  28h ; (
.eh_frame:0000000000009211                 db  42h ; B
.eh_frame:0000000000009212                 db  0Eh
.eh_frame:0000000000009213                 db  20h
.eh_frame:0000000000009214                 db  42h ; B
.eh_frame:0000000000009215                 db  0Eh
.eh_frame:0000000000009216                 db  18h
.eh_frame:0000000000009217                 db  42h ; B
.eh_frame:0000000000009218                 db  0Eh
.eh_frame:0000000000009219                 db  10h
.eh_frame:000000000000921A                 db  42h ; B
.eh_frame:000000000000921B                 db  0Eh
.eh_frame:000000000000921C                 db    8
.eh_frame:000000000000921D                 db  42h ; B
.eh_frame:000000000000921E                 db  0Bh
.eh_frame:000000000000921F                 db    2
.eh_frame:0000000000009220                 db  44h ; D
.eh_frame:0000000000009221                 db  0Ah
.eh_frame:0000000000009222                 db  0Eh
.eh_frame:0000000000009223                 db  38h ; 8
.eh_frame:0000000000009224                 db  43h ; C
.eh_frame:0000000000009225                 db  0Eh
.eh_frame:0000000000009226                 db  30h ; 0
.eh_frame:0000000000009227                 db  41h ; A
.eh_frame:0000000000009228                 db  0Eh
.eh_frame:0000000000009229                 db  28h ; (
.eh_frame:000000000000922A                 db  42h ; B
.eh_frame:000000000000922B                 db  0Eh
.eh_frame:000000000000922C                 db  20h
.eh_frame:000000000000922D                 db  42h ; B
.eh_frame:000000000000922E                 db  0Eh
.eh_frame:000000000000922F                 db  18h
.eh_frame:0000000000009230                 db  42h ; B
.eh_frame:0000000000009231                 db  0Eh
.eh_frame:0000000000009232                 db  10h
.eh_frame:0000000000009233                 db  42h ; B
.eh_frame:0000000000009234                 db  0Eh
.eh_frame:0000000000009235                 db    8
.eh_frame:0000000000009236                 db  41h ; A
.eh_frame:0000000000009237                 db  0Bh
.eh_frame:0000000000009238                 db  10h
.eh_frame:0000000000009239                 db    0
.eh_frame:000000000000923A                 db    0
.eh_frame:000000000000923B                 db    0
.eh_frame:000000000000923C                 db  2Ch ; ,
.eh_frame:000000000000923D                 db    5
.eh_frame:000000000000923E                 db    0
.eh_frame:000000000000923F                 db    0
.eh_frame:0000000000009240                 db  90h
.eh_frame:0000000000009241                 db 0ADh
.eh_frame:0000000000009242                 db 0FFh
.eh_frame:0000000000009243                 db 0FFh
.eh_frame:0000000000009244                 db  0Ah
.eh_frame:0000000000009245                 db    0
.eh_frame:0000000000009246                 db    0
.eh_frame:0000000000009247                 db    0
.eh_frame:0000000000009248                 db    0
.eh_frame:0000000000009249                 db    0
.eh_frame:000000000000924A                 db    0
.eh_frame:000000000000924B                 db    0
.eh_frame:000000000000924C                 db  10h
.eh_frame:000000000000924D                 db    0
.eh_frame:000000000000924E                 db    0
.eh_frame:000000000000924F                 db    0
.eh_frame:0000000000009250                 db  40h ; @
.eh_frame:0000000000009251                 db    5
.eh_frame:0000000000009252                 db    0
.eh_frame:0000000000009253                 db    0
.eh_frame:0000000000009254                 db  8Ch
.eh_frame:0000000000009255                 db 0ADh
.eh_frame:0000000000009256                 db 0FFh
.eh_frame:0000000000009257                 db 0FFh
.eh_frame:0000000000009258                 db    9
.eh_frame:0000000000009259                 db    0
.eh_frame:000000000000925A                 db    0
.eh_frame:000000000000925B                 db    0
.eh_frame:000000000000925C                 db    0
.eh_frame:000000000000925D                 db    0
.eh_frame:000000000000925E                 db    0
.eh_frame:000000000000925F                 db    0
.eh_frame:0000000000009260                 db  2Ch ; ,
.eh_frame:0000000000009261                 db    0
.eh_frame:0000000000009262                 db    0
.eh_frame:0000000000009263                 db    0
.eh_frame:0000000000009264                 db  54h ; T
.eh_frame:0000000000009265                 db    5
.eh_frame:0000000000009266                 db    0
.eh_frame:0000000000009267                 db    0
.eh_frame:0000000000009268                 db  88h
.eh_frame:0000000000009269                 db 0ADh
.eh_frame:000000000000926A                 db 0FFh
.eh_frame:000000000000926B                 db 0FFh
.eh_frame:000000000000926C                 db  4Bh ; K
.eh_frame:000000000000926D                 db    0
.eh_frame:000000000000926E                 db    0
.eh_frame:000000000000926F                 db    0
.eh_frame:0000000000009270                 db    0
.eh_frame:0000000000009271                 db  47h ; G
.eh_frame:0000000000009272                 db  0Eh
.eh_frame:0000000000009273                 db  10h
.eh_frame:0000000000009274                 db  8Ch
.eh_frame:0000000000009275                 db    2
.eh_frame:0000000000009276                 db  41h ; A
.eh_frame:0000000000009277                 db  0Eh
.eh_frame:0000000000009278                 db  18h
.eh_frame:0000000000009279                 db  86h
.eh_frame:000000000000927A                 db    3
.eh_frame:000000000000927B                 db  44h ; D
.eh_frame:000000000000927C                 db  0Eh
.eh_frame:000000000000927D                 db  20h
.eh_frame:000000000000927E                 db  83h
.eh_frame:000000000000927F                 db    4
.eh_frame:0000000000009280                 db  72h ; r
.eh_frame:0000000000009281                 db  0Eh
.eh_frame:0000000000009282                 db  18h
.eh_frame:0000000000009283                 db  41h ; A
.eh_frame:0000000000009284                 db  0Eh
.eh_frame:0000000000009285                 db  10h
.eh_frame:0000000000009286                 db  42h ; B
.eh_frame:0000000000009287                 db  0Eh
.eh_frame:0000000000009288                 db    8
.eh_frame:0000000000009289                 db  47h ; G
.eh_frame:000000000000928A                 db 0C3h
.eh_frame:000000000000928B                 db 0C6h
.eh_frame:000000000000928C                 db 0CCh
.eh_frame:000000000000928D                 db    0
.eh_frame:000000000000928E                 db    0
.eh_frame:000000000000928F                 db    0
.eh_frame:0000000000009290                 db  1Ch
.eh_frame:0000000000009291                 db    0
.eh_frame:0000000000009292                 db    0
.eh_frame:0000000000009293                 db    0
.eh_frame:0000000000009294                 db  84h
.eh_frame:0000000000009295                 db    5
.eh_frame:0000000000009296                 db    0
.eh_frame:0000000000009297                 db    0
.eh_frame:0000000000009298                 db 0A8h
.eh_frame:0000000000009299                 db 0ADh
.eh_frame:000000000000929A                 db 0FFh
.eh_frame:000000000000929B                 db 0FFh
.eh_frame:000000000000929C                 db  9Fh
.eh_frame:000000000000929D                 db    0
.eh_frame:000000000000929E                 db    0
.eh_frame:000000000000929F                 db    0
.eh_frame:00000000000092A0                 db    0
.eh_frame:00000000000092A1                 db  44h ; D
.eh_frame:00000000000092A2                 db  0Eh
.eh_frame:00000000000092A3                 db  10h
.eh_frame:00000000000092A4                 db  83h
.eh_frame:00000000000092A5                 db    2
.eh_frame:00000000000092A6                 db    2
.eh_frame:00000000000092A7                 db  78h ; x
.eh_frame:00000000000092A8                 db  0Ah
.eh_frame:00000000000092A9                 db  0Eh
.eh_frame:00000000000092AA                 db    8
.eh_frame:00000000000092AB                 db  41h ; A
.eh_frame:00000000000092AC                 db  0Bh
.eh_frame:00000000000092AD                 db    0
.eh_frame:00000000000092AE                 db    0
.eh_frame:00000000000092AF                 db    0
.eh_frame:00000000000092B0                 db  40h ; @
.eh_frame:00000000000092B1                 db    0
.eh_frame:00000000000092B2                 db    0
.eh_frame:00000000000092B3                 db    0
.eh_frame:00000000000092B4                 db 0A4h
.eh_frame:00000000000092B5                 db    5
.eh_frame:00000000000092B6                 db    0
.eh_frame:00000000000092B7                 db    0
.eh_frame:00000000000092B8                 db  28h ; (
.eh_frame:00000000000092B9                 db 0AEh
.eh_frame:00000000000092BA                 db 0FFh
.eh_frame:00000000000092BB                 db 0FFh
.eh_frame:00000000000092BC                 db 0E7h
.eh_frame:00000000000092BD                 db    0
.eh_frame:00000000000092BE                 db    0
.eh_frame:00000000000092BF                 db    0
.eh_frame:00000000000092C0                 db    0
.eh_frame:00000000000092C1                 db  41h ; A
.eh_frame:00000000000092C2                 db  0Eh
.eh_frame:00000000000092C3                 db  10h
.eh_frame:00000000000092C4                 db  86h
.eh_frame:00000000000092C5                 db    2
.eh_frame:00000000000092C6                 db  41h ; A
.eh_frame:00000000000092C7                 db  0Eh
.eh_frame:00000000000092C8                 db  18h
.eh_frame:00000000000092C9                 db  83h
.eh_frame:00000000000092CA                 db    3
.eh_frame:00000000000092CB                 db  49h ; I
.eh_frame:00000000000092CC                 db  0Eh
.eh_frame:00000000000092CD                 db  20h
.eh_frame:00000000000092CE                 db  6Eh ; n
.eh_frame:00000000000092CF                 db  0Ah
.eh_frame:00000000000092D0                 db  0Eh
.eh_frame:00000000000092D1                 db  18h
.eh_frame:00000000000092D2                 db  41h ; A
.eh_frame:00000000000092D3                 db  0Eh
.eh_frame:00000000000092D4                 db  10h
.eh_frame:00000000000092D5                 db  41h ; A
.eh_frame:00000000000092D6                 db  0Eh
.eh_frame:00000000000092D7                 db    8
.eh_frame:00000000000092D8                 db  45h ; E
.eh_frame:00000000000092D9                 db  0Bh
.eh_frame:00000000000092DA                 db    2
.eh_frame:00000000000092DB                 db  4Ah ; J
.eh_frame:00000000000092DC                 db  0Ah
.eh_frame:00000000000092DD                 db  0Eh
.eh_frame:00000000000092DE                 db  18h
.eh_frame:00000000000092DF                 db  41h ; A
.eh_frame:00000000000092E0                 db  0Eh
.eh_frame:00000000000092E1                 db  10h
.eh_frame:00000000000092E2                 db  41h ; A
.eh_frame:00000000000092E3                 db  0Eh
.eh_frame:00000000000092E4                 db    8
.eh_frame:00000000000092E5                 db  44h ; D
.eh_frame:00000000000092E6                 db  0Bh
.eh_frame:00000000000092E7                 db    2
.eh_frame:00000000000092E8                 db  54h ; T
.eh_frame:00000000000092E9                 db  0Eh
.eh_frame:00000000000092EA                 db  18h
.eh_frame:00000000000092EB                 db  41h ; A
.eh_frame:00000000000092EC                 db  0Eh
.eh_frame:00000000000092ED                 db  10h
.eh_frame:00000000000092EE                 db  41h ; A
.eh_frame:00000000000092EF                 db  0Eh
.eh_frame:00000000000092F0                 db    8
.eh_frame:00000000000092F1                 db    0
.eh_frame:00000000000092F2                 db    0
.eh_frame:00000000000092F3                 db    0
.eh_frame:00000000000092F4                 db  74h ; t
.eh_frame:00000000000092F5                 db    0
.eh_frame:00000000000092F6                 db    0
.eh_frame:00000000000092F7                 db    0
.eh_frame:00000000000092F8                 db 0E8h
.eh_frame:00000000000092F9                 db    5
.eh_frame:00000000000092FA                 db    0
.eh_frame:00000000000092FB                 db    0
.eh_frame:00000000000092FC                 db 0D4h
.eh_frame:00000000000092FD                 db 0AEh
.eh_frame:00000000000092FE                 db 0FFh
.eh_frame:00000000000092FF                 db 0FFh
.eh_frame:0000000000009300                 db  34h ; 4
.eh_frame:0000000000009301                 db  12h
.eh_frame:0000000000009302                 db    0
.eh_frame:0000000000009303                 db    0
.eh_frame:0000000000009304                 db    0
.eh_frame:0000000000009305                 db  42h ; B
.eh_frame:0000000000009306                 db  0Eh
.eh_frame:0000000000009307                 db  10h
.eh_frame:0000000000009308                 db  8Fh
.eh_frame:0000000000009309                 db    2
.eh_frame:000000000000930A                 db  42h ; B
.eh_frame:000000000000930B                 db  0Eh
.eh_frame:000000000000930C                 db  18h
.eh_frame:000000000000930D                 db  8Eh
.eh_frame:000000000000930E                 db    3
.eh_frame:000000000000930F                 db  45h ; E
.eh_frame:0000000000009310                 db  0Eh
.eh_frame:0000000000009311                 db  20h
.eh_frame:0000000000009312                 db  8Dh
.eh_frame:0000000000009313                 db    4
.eh_frame:0000000000009314                 db  42h ; B
.eh_frame:0000000000009315                 db  0Eh
.eh_frame:0000000000009316                 db  28h ; (
.eh_frame:0000000000009317                 db  8Ch
.eh_frame:0000000000009318                 db    5
.eh_frame:0000000000009319                 db  44h ; D
.eh_frame:000000000000931A                 db  0Eh
.eh_frame:000000000000931B                 db  30h ; 0
.eh_frame:000000000000931C                 db  86h
.eh_frame:000000000000931D                 db    6
.eh_frame:000000000000931E                 db  41h ; A
.eh_frame:000000000000931F                 db  0Eh
.eh_frame:0000000000009320                 db  38h ; 8
.eh_frame:0000000000009321                 db  83h
.eh_frame:0000000000009322                 db    7
.eh_frame:0000000000009323                 db  53h ; S
.eh_frame:0000000000009324                 db  0Eh
.eh_frame:0000000000009325                 db 0F0h
.eh_frame:0000000000009326                 db    1
.eh_frame:0000000000009327                 db    3
.eh_frame:0000000000009328                 db  81h
.eh_frame:0000000000009329                 db  0Bh
.eh_frame:000000000000932A                 db  0Eh
.eh_frame:000000000000932B                 db 0F8h
.eh_frame:000000000000932C                 db    1
.eh_frame:000000000000932D                 db  4Ah ; J
.eh_frame:000000000000932E                 db  0Eh
.eh_frame:000000000000932F                 db  80h
.eh_frame:0000000000009330                 db    2
.eh_frame:0000000000009331                 db  44h ; D
.eh_frame:0000000000009332                 db  0Eh
.eh_frame:0000000000009333                 db  88h
.eh_frame:0000000000009334                 db    2
.eh_frame:0000000000009335                 db  45h ; E
.eh_frame:0000000000009336                 db  0Eh
.eh_frame:0000000000009337                 db  90h
.eh_frame:0000000000009338                 db    2
.eh_frame:0000000000009339                 db  5Fh ; _
.eh_frame:000000000000933A                 db  0Eh
.eh_frame:000000000000933B                 db 0F0h
.eh_frame:000000000000933C                 db    1
.eh_frame:000000000000933D                 db  64h ; d
.eh_frame:000000000000933E                 db  0Ah
.eh_frame:000000000000933F                 db  0Eh
.eh_frame:0000000000009340                 db  38h ; 8
.eh_frame:0000000000009341                 db  41h ; A
.eh_frame:0000000000009342                 db  0Eh
.eh_frame:0000000000009343                 db  30h ; 0
.eh_frame:0000000000009344                 db  41h ; A
.eh_frame:0000000000009345                 db  0Eh
.eh_frame:0000000000009346                 db  28h ; (
.eh_frame:0000000000009347                 db  42h ; B
.eh_frame:0000000000009348                 db  0Eh
.eh_frame:0000000000009349                 db  20h
.eh_frame:000000000000934A                 db  42h ; B
.eh_frame:000000000000934B                 db  0Eh
.eh_frame:000000000000934C                 db  18h
.eh_frame:000000000000934D                 db  42h ; B
.eh_frame:000000000000934E                 db  0Eh
.eh_frame:000000000000934F                 db  10h
.eh_frame:0000000000009350                 db  42h ; B
.eh_frame:0000000000009351                 db  0Eh
.eh_frame:0000000000009352                 db    8
.eh_frame:0000000000009353                 db  44h ; D
.eh_frame:0000000000009354                 db  0Bh
.eh_frame:0000000000009355                 db    3
.eh_frame:0000000000009356                 db  99h
.eh_frame:0000000000009357                 db    5
.eh_frame:0000000000009358                 db  0Eh
.eh_frame:0000000000009359                 db 0F8h
.eh_frame:000000000000935A                 db    1
.eh_frame:000000000000935B                 db  4Dh ; M
.eh_frame:000000000000935C                 db  0Eh
.eh_frame:000000000000935D                 db  80h
.eh_frame:000000000000935E                 db    2
.eh_frame:000000000000935F                 db  44h ; D
.eh_frame:0000000000009360                 db  0Eh
.eh_frame:0000000000009361                 db  88h
.eh_frame:0000000000009362                 db    2
.eh_frame:0000000000009363                 db  47h ; G
.eh_frame:0000000000009364                 db  0Eh
.eh_frame:0000000000009365                 db  90h
.eh_frame:0000000000009366                 db    2
.eh_frame:0000000000009367                 db  5Bh ; [
.eh_frame:0000000000009368                 db  0Eh
.eh_frame:0000000000009369                 db 0F0h
.eh_frame:000000000000936A                 db    1
.eh_frame:000000000000936B                 db    0
.eh_frame:000000000000936C                 db  68h ; h
.eh_frame:000000000000936D                 db    0
.eh_frame:000000000000936E                 db    0
.eh_frame:000000000000936F                 db    0
.eh_frame:0000000000009370                 db  60h ; `
.eh_frame:0000000000009371                 db    6
.eh_frame:0000000000009372                 db    0
.eh_frame:0000000000009373                 db    0
.eh_frame:0000000000009374                 db  9Ch
.eh_frame:0000000000009375                 db 0C0h
.eh_frame:0000000000009376                 db 0FFh
.eh_frame:0000000000009377                 db 0FFh
.eh_frame:0000000000009378                 db 0ABh
.eh_frame:0000000000009379                 db    1
.eh_frame:000000000000937A                 db    0
.eh_frame:000000000000937B                 db    0
.eh_frame:000000000000937C                 db    0
.eh_frame:000000000000937D                 db  42h ; B
.eh_frame:000000000000937E                 db  0Eh
.eh_frame:000000000000937F                 db  10h
.eh_frame:0000000000009380                 db  8Fh
.eh_frame:0000000000009381                 db    2
.eh_frame:0000000000009382                 db  42h ; B
.eh_frame:0000000000009383                 db  0Eh
.eh_frame:0000000000009384                 db  18h
.eh_frame:0000000000009385                 db  8Eh
.eh_frame:0000000000009386                 db    3
.eh_frame:0000000000009387                 db  45h ; E
.eh_frame:0000000000009388                 db  0Eh
.eh_frame:0000000000009389                 db  20h
.eh_frame:000000000000938A                 db  8Dh
.eh_frame:000000000000938B                 db    4
.eh_frame:000000000000938C                 db  42h ; B
.eh_frame:000000000000938D                 db  0Eh
.eh_frame:000000000000938E                 db  28h ; (
.eh_frame:000000000000938F                 db  8Ch
.eh_frame:0000000000009390                 db    5
.eh_frame:0000000000009391                 db  44h ; D
.eh_frame:0000000000009392                 db  0Eh
.eh_frame:0000000000009393                 db  30h ; 0
.eh_frame:0000000000009394                 db  86h
.eh_frame:0000000000009395                 db    6
.eh_frame:0000000000009396                 db  41h ; A
.eh_frame:0000000000009397                 db  0Eh
.eh_frame:0000000000009398                 db  38h ; 8
.eh_frame:0000000000009399                 db  83h
.eh_frame:000000000000939A                 db    7
.eh_frame:000000000000939B                 db  47h ; G
.eh_frame:000000000000939C                 db  0Eh
.eh_frame:000000000000939D                 db  60h ; `
.eh_frame:000000000000939E                 db    2
.eh_frame:000000000000939F                 db  99h
.eh_frame:00000000000093A0                 db  0Eh
.eh_frame:00000000000093A1                 db  68h ; h
.eh_frame:00000000000093A2                 db  5Fh ; _
.eh_frame:00000000000093A3                 db  0Eh
.eh_frame:00000000000093A4                 db  70h ; p
.eh_frame:00000000000093A5                 db  46h ; F
.eh_frame:00000000000093A6                 db  0Eh
.eh_frame:00000000000093A7                 db  78h ; x
.eh_frame:00000000000093A8                 db  42h ; B
.eh_frame:00000000000093A9                 db  0Eh
.eh_frame:00000000000093AA                 db  80h
.eh_frame:00000000000093AB                 db    1
.eh_frame:00000000000093AC                 db  59h ; Y
.eh_frame:00000000000093AD                 db  0Eh
.eh_frame:00000000000093AE                 db  60h ; `
.eh_frame:00000000000093AF                 db    2
.eh_frame:00000000000093B0                 db  40h ; @
.eh_frame:00000000000093B1                 db  0Eh
.eh_frame:00000000000093B2                 db  68h ; h
.eh_frame:00000000000093B3                 db  4Bh ; K
.eh_frame:00000000000093B4                 db  0Eh
.eh_frame:00000000000093B5                 db  70h ; p
.eh_frame:00000000000093B6                 db  43h ; C
.eh_frame:00000000000093B7                 db  0Eh
.eh_frame:00000000000093B8                 db  78h ; x
.eh_frame:00000000000093B9                 db  45h ; E
.eh_frame:00000000000093BA                 db  0Eh
.eh_frame:00000000000093BB                 db  80h
.eh_frame:00000000000093BC                 db    1
.eh_frame:00000000000093BD                 db  5Eh ; ^
.eh_frame:00000000000093BE                 db  0Eh
.eh_frame:00000000000093BF                 db  60h ; `
.eh_frame:00000000000093C0                 db  4Ch ; L
.eh_frame:00000000000093C1                 db  0Ah
.eh_frame:00000000000093C2                 db  0Eh
.eh_frame:00000000000093C3                 db  38h ; 8
.eh_frame:00000000000093C4                 db  44h ; D
.eh_frame:00000000000093C5                 db  0Eh
.eh_frame:00000000000093C6                 db  30h ; 0
.eh_frame:00000000000093C7                 db  41h ; A
.eh_frame:00000000000093C8                 db  0Eh
.eh_frame:00000000000093C9                 db  28h ; (
.eh_frame:00000000000093CA                 db  42h ; B
.eh_frame:00000000000093CB                 db  0Eh
.eh_frame:00000000000093CC                 db  20h
.eh_frame:00000000000093CD                 db  42h ; B
.eh_frame:00000000000093CE                 db  0Eh
.eh_frame:00000000000093CF                 db  18h
.eh_frame:00000000000093D0                 db  42h ; B
.eh_frame:00000000000093D1                 db  0Eh
.eh_frame:00000000000093D2                 db  10h
.eh_frame:00000000000093D3                 db  42h ; B
.eh_frame:00000000000093D4                 db  0Eh
.eh_frame:00000000000093D5                 db    8
.eh_frame:00000000000093D6                 db  46h ; F
.eh_frame:00000000000093D7                 db  0Bh
.eh_frame:00000000000093D8                 db  28h ; (
.eh_frame:00000000000093D9                 db    0
.eh_frame:00000000000093DA                 db    0
.eh_frame:00000000000093DB                 db    0
.eh_frame:00000000000093DC                 db 0CCh
.eh_frame:00000000000093DD                 db    6
.eh_frame:00000000000093DE                 db    0
.eh_frame:00000000000093DF                 db    0
.eh_frame:00000000000093E0                 db 0E0h
.eh_frame:00000000000093E1                 db 0C1h
.eh_frame:00000000000093E2                 db 0FFh
.eh_frame:00000000000093E3                 db 0FFh
.eh_frame:00000000000093E4                 db  36h ; 6
.eh_frame:00000000000093E5                 db    0
.eh_frame:00000000000093E6                 db    0
.eh_frame:00000000000093E7                 db    0
.eh_frame:00000000000093E8                 db    0
.eh_frame:00000000000093E9                 db  42h ; B
.eh_frame:00000000000093EA                 db  0Eh
.eh_frame:00000000000093EB                 db  10h
.eh_frame:00000000000093EC                 db  8Ch
.eh_frame:00000000000093ED                 db    2
.eh_frame:00000000000093EE                 db  41h ; A
.eh_frame:00000000000093EF                 db  0Eh
.eh_frame:00000000000093F0                 db  18h
.eh_frame:00000000000093F1                 db  86h
.eh_frame:00000000000093F2                 db    3
.eh_frame:00000000000093F3                 db  41h ; A
.eh_frame:00000000000093F4                 db  0Eh
.eh_frame:00000000000093F5                 db  20h
.eh_frame:00000000000093F6                 db  83h
.eh_frame:00000000000093F7                 db    4
.eh_frame:00000000000093F8                 db  6Eh ; n
.eh_frame:00000000000093F9                 db  0Eh
.eh_frame:00000000000093FA                 db  18h
.eh_frame:00000000000093FB                 db  41h ; A
.eh_frame:00000000000093FC                 db  0Eh
.eh_frame:00000000000093FD                 db  10h
.eh_frame:00000000000093FE                 db  42h ; B
.eh_frame:00000000000093FF                 db  0Eh
.eh_frame:0000000000009400                 db    8
.eh_frame:0000000000009401                 db    0
.eh_frame:0000000000009402                 db    0
.eh_frame:0000000000009403                 db    0
.eh_frame:0000000000009404                 db  10h
.eh_frame:0000000000009405                 db    0
.eh_frame:0000000000009406                 db    0
.eh_frame:0000000000009407                 db    0
.eh_frame:0000000000009408                 db 0F8h
.eh_frame:0000000000009409                 db    6
.eh_frame:000000000000940A                 db    0
.eh_frame:000000000000940B                 db    0
.eh_frame:000000000000940C                 db 0F4h
.eh_frame:000000000000940D                 db 0C1h
.eh_frame:000000000000940E                 db 0FFh
.eh_frame:000000000000940F                 db 0FFh
.eh_frame:0000000000009410                 db  11h
.eh_frame:0000000000009411                 db    0
.eh_frame:0000000000009412                 db    0
.eh_frame:0000000000009413                 db    0
.eh_frame:0000000000009414                 db    0
.eh_frame:0000000000009415                 db    0
.eh_frame:0000000000009416                 db    0
.eh_frame:0000000000009417                 db    0
.eh_frame:0000000000009418                 db  10h
.eh_frame:0000000000009419                 db    0
.eh_frame:000000000000941A                 db    0
.eh_frame:000000000000941B                 db    0
.eh_frame:000000000000941C                 db  0Ch
.eh_frame:000000000000941D                 db    7
.eh_frame:000000000000941E                 db    0
.eh_frame:000000000000941F                 db    0
.eh_frame:0000000000009420                 db    0
.eh_frame:0000000000009421                 db 0C2h
.eh_frame:0000000000009422                 db 0FFh
.eh_frame:0000000000009423                 db 0FFh
.eh_frame:0000000000009424                 db  11h
.eh_frame:0000000000009425                 db    0
.eh_frame:0000000000009426                 db    0
.eh_frame:0000000000009427                 db    0
.eh_frame:0000000000009428                 db    0
.eh_frame:0000000000009429                 db    0
.eh_frame:000000000000942A                 db    0
.eh_frame:000000000000942B                 db    0
.eh_frame:000000000000942C                 db  10h
.eh_frame:000000000000942D                 db    0
.eh_frame:000000000000942E                 db    0
.eh_frame:000000000000942F                 db    0
.eh_frame:0000000000009430                 db  20h
.eh_frame:0000000000009431                 db    7
.eh_frame:0000000000009432                 db    0
.eh_frame:0000000000009433                 db    0
.eh_frame:0000000000009434                 db  0Ch
.eh_frame:0000000000009435                 db 0C2h
.eh_frame:0000000000009436                 db 0FFh
.eh_frame:0000000000009437                 db 0FFh
.eh_frame:0000000000009438                 db  35h ; 5
.eh_frame:0000000000009439                 db    0
.eh_frame:000000000000943A                 db    0
.eh_frame:000000000000943B                 db    0
.eh_frame:000000000000943C                 db    0
.eh_frame:000000000000943D                 db    0
.eh_frame:000000000000943E                 db    0
.eh_frame:000000000000943F                 db    0
.eh_frame:0000000000009440                 db  10h
.eh_frame:0000000000009441                 db    0
.eh_frame:0000000000009442                 db    0
.eh_frame:0000000000009443                 db    0
.eh_frame:0000000000009444                 db  34h ; 4
.eh_frame:0000000000009445                 db    7
.eh_frame:0000000000009446                 db    0
.eh_frame:0000000000009447                 db    0
.eh_frame:0000000000009448                 db  38h ; 8
.eh_frame:0000000000009449                 db 0C2h
.eh_frame:000000000000944A                 db 0FFh
.eh_frame:000000000000944B                 db 0FFh
.eh_frame:000000000000944C                 db  15h
.eh_frame:000000000000944D                 db    0
.eh_frame:000000000000944E                 db    0
.eh_frame:000000000000944F                 db    0
.eh_frame:0000000000009450                 db    0
.eh_frame:0000000000009451                 db    0
.eh_frame:0000000000009452                 db    0
.eh_frame:0000000000009453                 db    0
.eh_frame:0000000000009454                 db  10h
.eh_frame:0000000000009455                 db    0
.eh_frame:0000000000009456                 db    0
.eh_frame:0000000000009457                 db    0
.eh_frame:0000000000009458                 db  48h ; H
.eh_frame:0000000000009459                 db    7
.eh_frame:000000000000945A                 db    0
.eh_frame:000000000000945B                 db    0
.eh_frame:000000000000945C                 db  44h ; D
.eh_frame:000000000000945D                 db 0C2h
.eh_frame:000000000000945E                 db 0FFh
.eh_frame:000000000000945F                 db 0FFh
.eh_frame:0000000000009460                 db  30h ; 0
.eh_frame:0000000000009461                 db    0
.eh_frame:0000000000009462                 db    0
.eh_frame:0000000000009463                 db    0
.eh_frame:0000000000009464                 db    0
.eh_frame:0000000000009465                 db  6Bh ; k
.eh_frame:0000000000009466                 db  0Eh
.eh_frame:0000000000009467                 db  10h
.eh_frame:0000000000009468                 db  50h ; P
.eh_frame:0000000000009469                 db    0
.eh_frame:000000000000946A                 db    0
.eh_frame:000000000000946B                 db    0
.eh_frame:000000000000946C                 db  5Ch ; \
.eh_frame:000000000000946D                 db    7
.eh_frame:000000000000946E                 db    0
.eh_frame:000000000000946F                 db    0
.eh_frame:0000000000009470                 db  60h ; `
.eh_frame:0000000000009471                 db 0C2h
.eh_frame:0000000000009472                 db 0FFh
.eh_frame:0000000000009473                 db 0FFh
.eh_frame:0000000000009474                 db  74h ; t
.eh_frame:0000000000009475                 db    0
.eh_frame:0000000000009476                 db    0
.eh_frame:0000000000009477                 db    0
.eh_frame:0000000000009478                 db    0
.eh_frame:0000000000009479                 db  42h ; B
.eh_frame:000000000000947A                 db  0Eh
.eh_frame:000000000000947B                 db  10h
.eh_frame:000000000000947C                 db  8Fh
.eh_frame:000000000000947D                 db    2
.eh_frame:000000000000947E                 db  42h ; B
.eh_frame:000000000000947F                 db  0Eh
.eh_frame:0000000000009480                 db  18h
.eh_frame:0000000000009481                 db  8Eh
.eh_frame:0000000000009482                 db    3
.eh_frame:0000000000009483                 db  49h ; I
.eh_frame:0000000000009484                 db  0Eh
.eh_frame:0000000000009485                 db  20h
.eh_frame:0000000000009486                 db  8Dh
.eh_frame:0000000000009487                 db    4
.eh_frame:0000000000009488                 db  42h ; B
.eh_frame:0000000000009489                 db  0Eh
.eh_frame:000000000000948A                 db  28h ; (
.eh_frame:000000000000948B                 db  8Ch
.eh_frame:000000000000948C                 db    5
.eh_frame:000000000000948D                 db  44h ; D
.eh_frame:000000000000948E                 db  0Eh
.eh_frame:000000000000948F                 db  30h ; 0
.eh_frame:0000000000009490                 db  86h
.eh_frame:0000000000009491                 db    6
.eh_frame:0000000000009492                 db  41h ; A
.eh_frame:0000000000009493                 db  0Eh
.eh_frame:0000000000009494                 db  38h ; 8
.eh_frame:0000000000009495                 db  83h
.eh_frame:0000000000009496                 db    7
.eh_frame:0000000000009497                 db  4Dh ; M
.eh_frame:0000000000009498                 db  0Eh
.eh_frame:0000000000009499                 db  50h ; P
.eh_frame:000000000000949A                 db  5Fh ; _
.eh_frame:000000000000949B                 db  0Eh
.eh_frame:000000000000949C                 db  58h ; X
.eh_frame:000000000000949D                 db  47h ; G
.eh_frame:000000000000949E                 db  0Eh
.eh_frame:000000000000949F                 db  60h ; `
.eh_frame:00000000000094A0                 db  46h ; F
.eh_frame:00000000000094A1                 db  0Eh
.eh_frame:00000000000094A2                 db  68h ; h
.eh_frame:00000000000094A3                 db  44h ; D
.eh_frame:00000000000094A4                 db  0Eh
.eh_frame:00000000000094A5                 db  70h ; p
.eh_frame:00000000000094A6                 db  58h ; X
.eh_frame:00000000000094A7                 db  0Eh
.eh_frame:00000000000094A8                 db  38h ; 8
.eh_frame:00000000000094A9                 db  41h ; A
.eh_frame:00000000000094AA                 db  0Eh
.eh_frame:00000000000094AB                 db  30h ; 0
.eh_frame:00000000000094AC                 db  41h ; A
.eh_frame:00000000000094AD                 db  0Eh
.eh_frame:00000000000094AE                 db  28h ; (
.eh_frame:00000000000094AF                 db  42h ; B
.eh_frame:00000000000094B0                 db  0Eh
.eh_frame:00000000000094B1                 db  20h
.eh_frame:00000000000094B2                 db  42h ; B
.eh_frame:00000000000094B3                 db  0Eh
.eh_frame:00000000000094B4                 db  18h
.eh_frame:00000000000094B5                 db  42h ; B
.eh_frame:00000000000094B6                 db  0Eh
.eh_frame:00000000000094B7                 db  10h
.eh_frame:00000000000094B8                 db  42h ; B
.eh_frame:00000000000094B9                 db  0Eh
.eh_frame:00000000000094BA                 db    8
.eh_frame:00000000000094BB                 db    0
.eh_frame:00000000000094BC                 db  68h ; h
.eh_frame:00000000000094BD                 db    0
.eh_frame:00000000000094BE                 db    0
.eh_frame:00000000000094BF                 db    0
.eh_frame:00000000000094C0                 db 0B0h
.eh_frame:00000000000094C1                 db    7
.eh_frame:00000000000094C2                 db    0
.eh_frame:00000000000094C3                 db    0
.eh_frame:00000000000094C4                 db  8Ch
.eh_frame:00000000000094C5                 db 0C2h
.eh_frame:00000000000094C6                 db 0FFh
.eh_frame:00000000000094C7                 db 0FFh
.eh_frame:00000000000094C8                 db 0E3h
.eh_frame:00000000000094C9                 db    0
.eh_frame:00000000000094CA                 db    0
.eh_frame:00000000000094CB                 db    0
.eh_frame:00000000000094CC                 db    0
.eh_frame:00000000000094CD                 db  42h ; B
.eh_frame:00000000000094CE                 db  0Eh
.eh_frame:00000000000094CF                 db  10h
.eh_frame:00000000000094D0                 db  8Fh
.eh_frame:00000000000094D1                 db    2
.eh_frame:00000000000094D2                 db  42h ; B
.eh_frame:00000000000094D3                 db  0Eh
.eh_frame:00000000000094D4                 db  18h
.eh_frame:00000000000094D5                 db  8Eh
.eh_frame:00000000000094D6                 db    3
.eh_frame:00000000000094D7                 db  49h ; I
.eh_frame:00000000000094D8                 db  0Eh
.eh_frame:00000000000094D9                 db  20h
.eh_frame:00000000000094DA                 db  8Dh
.eh_frame:00000000000094DB                 db    4
.eh_frame:00000000000094DC                 db  42h ; B
.eh_frame:00000000000094DD                 db  0Eh
.eh_frame:00000000000094DE                 db  28h ; (
.eh_frame:00000000000094DF                 db  8Ch
.eh_frame:00000000000094E0                 db    5
.eh_frame:00000000000094E1                 db  44h ; D
.eh_frame:00000000000094E2                 db  0Eh
.eh_frame:00000000000094E3                 db  30h ; 0
.eh_frame:00000000000094E4                 db  86h
.eh_frame:00000000000094E5                 db    6
.eh_frame:00000000000094E6                 db  41h ; A
.eh_frame:00000000000094E7                 db  0Eh
.eh_frame:00000000000094E8                 db  38h ; 8
.eh_frame:00000000000094E9                 db  83h
.eh_frame:00000000000094EA                 db    7
.eh_frame:00000000000094EB                 db  4Dh ; M
.eh_frame:00000000000094EC                 db  0Eh
.eh_frame:00000000000094ED                 db  70h ; p
.eh_frame:00000000000094EE                 db  65h ; e
.eh_frame:00000000000094EF                 db  0Eh
.eh_frame:00000000000094F0                 db  78h ; x
.eh_frame:00000000000094F1                 db  4Dh ; M
.eh_frame:00000000000094F2                 db  0Eh
.eh_frame:00000000000094F3                 db  80h
.eh_frame:00000000000094F4                 db    1
.eh_frame:00000000000094F5                 db  46h ; F
.eh_frame:00000000000094F6                 db  0Eh
.eh_frame:00000000000094F7                 db  88h
.eh_frame:00000000000094F8                 db    1
.eh_frame:00000000000094F9                 db  42h ; B
.eh_frame:00000000000094FA                 db  0Eh
.eh_frame:00000000000094FB                 db  90h
.eh_frame:00000000000094FC                 db    1
.eh_frame:00000000000094FD                 db  5Eh ; ^
.eh_frame:00000000000094FE                 db  0Eh
.eh_frame:00000000000094FF                 db  70h ; p
.eh_frame:0000000000009500                 db  56h ; V
.eh_frame:0000000000009501                 db  0Eh
.eh_frame:0000000000009502                 db  78h ; x
.eh_frame:0000000000009503                 db  43h ; C
.eh_frame:0000000000009504                 db  0Eh
.eh_frame:0000000000009505                 db  80h
.eh_frame:0000000000009506                 db    1
.eh_frame:0000000000009507                 db  43h ; C
.eh_frame:0000000000009508                 db  0Eh
.eh_frame:0000000000009509                 db  88h
.eh_frame:000000000000950A                 db    1
.eh_frame:000000000000950B                 db  56h ; V
.eh_frame:000000000000950C                 db  0Eh
.eh_frame:000000000000950D                 db  90h
.eh_frame:000000000000950E                 db    1
.eh_frame:000000000000950F                 db  52h ; R
.eh_frame:0000000000009510                 db  0Eh
.eh_frame:0000000000009511                 db  70h ; p
.eh_frame:0000000000009512                 db  5Bh ; [
.eh_frame:0000000000009513                 db  0Eh
.eh_frame:0000000000009514                 db  38h ; 8
.eh_frame:0000000000009515                 db  41h ; A
.eh_frame:0000000000009516                 db  0Eh
.eh_frame:0000000000009517                 db  30h ; 0
.eh_frame:0000000000009518                 db  41h ; A
.eh_frame:0000000000009519                 db  0Eh
.eh_frame:000000000000951A                 db  28h ; (
.eh_frame:000000000000951B                 db  42h ; B
.eh_frame:000000000000951C                 db  0Eh
.eh_frame:000000000000951D                 db  20h
.eh_frame:000000000000951E                 db  42h ; B
.eh_frame:000000000000951F                 db  0Eh
.eh_frame:0000000000009520                 db  18h
.eh_frame:0000000000009521                 db  42h ; B
.eh_frame:0000000000009522                 db  0Eh
.eh_frame:0000000000009523                 db  10h
.eh_frame:0000000000009524                 db  42h ; B
.eh_frame:0000000000009525                 db  0Eh
.eh_frame:0000000000009526                 db    8
.eh_frame:0000000000009527                 db    0
.eh_frame:0000000000009528                 db  10h
.eh_frame:0000000000009529                 db    0
.eh_frame:000000000000952A                 db    0
.eh_frame:000000000000952B                 db    0
.eh_frame:000000000000952C                 db  1Ch
.eh_frame:000000000000952D                 db    8
.eh_frame:000000000000952E                 db    0
.eh_frame:000000000000952F                 db    0
.eh_frame:0000000000009530                 db  10h
.eh_frame:0000000000009531                 db 0C3h
.eh_frame:0000000000009532                 db 0FFh
.eh_frame:0000000000009533                 db 0FFh
.eh_frame:0000000000009534                 db  0Ah
.eh_frame:0000000000009535                 db    0
.eh_frame:0000000000009536                 db    0
.eh_frame:0000000000009537                 db    0
.eh_frame:0000000000009538                 db    0
.eh_frame:0000000000009539                 db    0
.eh_frame:000000000000953A                 db    0
.eh_frame:000000000000953B                 db    0
.eh_frame:000000000000953C                 db  28h ; (
.eh_frame:000000000000953D                 db    0
.eh_frame:000000000000953E                 db    0
.eh_frame:000000000000953F                 db    0
.eh_frame:0000000000009540                 db  30h ; 0
.eh_frame:0000000000009541                 db    8
.eh_frame:0000000000009542                 db    0
.eh_frame:0000000000009543                 db    0
.eh_frame:0000000000009544                 db  0Ch
.eh_frame:0000000000009545                 db 0C3h
.eh_frame:0000000000009546                 db 0FFh
.eh_frame:0000000000009547                 db 0FFh
.eh_frame:0000000000009548                 db  93h
.eh_frame:0000000000009549                 db    0
.eh_frame:000000000000954A                 db    0
.eh_frame:000000000000954B                 db    0
.eh_frame:000000000000954C                 db    0
.eh_frame:000000000000954D                 db  48h ; H
.eh_frame:000000000000954E                 db  0Eh
.eh_frame:000000000000954F                 db  10h
.eh_frame:0000000000009550                 db  8Ch
.eh_frame:0000000000009551                 db    2
.eh_frame:0000000000009552                 db  48h ; H
.eh_frame:0000000000009553                 db  0Eh
.eh_frame:0000000000009554                 db  18h
.eh_frame:0000000000009555                 db  86h
.eh_frame:0000000000009556                 db    3
.eh_frame:0000000000009557                 db  41h ; A
.eh_frame:0000000000009558                 db  0Eh
.eh_frame:0000000000009559                 db  20h
.eh_frame:000000000000955A                 db  83h
.eh_frame:000000000000955B                 db    4
.eh_frame:000000000000955C                 db    2
.eh_frame:000000000000955D                 db  74h ; t
.eh_frame:000000000000955E                 db  0Eh
.eh_frame:000000000000955F                 db  18h
.eh_frame:0000000000009560                 db  4Bh ; K
.eh_frame:0000000000009561                 db  0Eh
.eh_frame:0000000000009562                 db  10h
.eh_frame:0000000000009563                 db  42h ; B
.eh_frame:0000000000009564                 db  0Eh
.eh_frame:0000000000009565                 db    8
.eh_frame:0000000000009566                 db    0
.eh_frame:0000000000009567                 db    0
.eh_frame:0000000000009568                 db  10h
.eh_frame:0000000000009569                 db    0
.eh_frame:000000000000956A                 db    0
.eh_frame:000000000000956B                 db    0
.eh_frame:000000000000956C                 db  5Ch ; \
.eh_frame:000000000000956D                 db    8
.eh_frame:000000000000956E                 db    0
.eh_frame:000000000000956F                 db    0
.eh_frame:0000000000009570                 db  80h
.eh_frame:0000000000009571                 db 0C3h
.eh_frame:0000000000009572                 db 0FFh
.eh_frame:0000000000009573                 db 0FFh
.eh_frame:0000000000009574                 db  13h
.eh_frame:0000000000009575                 db    0
.eh_frame:0000000000009576                 db    0
.eh_frame:0000000000009577                 db    0
.eh_frame:0000000000009578                 db    0
.eh_frame:0000000000009579                 db    0
.eh_frame:000000000000957A                 db    0
.eh_frame:000000000000957B                 db    0
.eh_frame:000000000000957C                 db  10h
.eh_frame:000000000000957D                 db    0
.eh_frame:000000000000957E                 db    0
.eh_frame:000000000000957F                 db    0
.eh_frame:0000000000009580                 db  70h ; p
.eh_frame:0000000000009581                 db    8
.eh_frame:0000000000009582                 db    0
.eh_frame:0000000000009583                 db    0
.eh_frame:0000000000009584                 db  8Ch
.eh_frame:0000000000009585                 db 0C3h
.eh_frame:0000000000009586                 db 0FFh
.eh_frame:0000000000009587                 db 0FFh
.eh_frame:0000000000009588                 db  0Ch
.eh_frame:0000000000009589                 db    0
.eh_frame:000000000000958A                 db    0
.eh_frame:000000000000958B                 db    0
.eh_frame:000000000000958C                 db    0
.eh_frame:000000000000958D                 db    0
.eh_frame:000000000000958E                 db    0
.eh_frame:000000000000958F                 db    0
.eh_frame:0000000000009590                 db  10h
.eh_frame:0000000000009591                 db    0
.eh_frame:0000000000009592                 db    0
.eh_frame:0000000000009593                 db    0
.eh_frame:0000000000009594                 db  84h
.eh_frame:0000000000009595                 db    8
.eh_frame:0000000000009596                 db    0
.eh_frame:0000000000009597                 db    0
.eh_frame:0000000000009598                 db  88h
.eh_frame:0000000000009599                 db 0C3h
.eh_frame:000000000000959A                 db 0FFh
.eh_frame:000000000000959B                 db 0FFh
.eh_frame:000000000000959C                 db  18h
.eh_frame:000000000000959D                 db    0
.eh_frame:000000000000959E                 db    0
.eh_frame:000000000000959F                 db    0
.eh_frame:00000000000095A0                 db    0
.eh_frame:00000000000095A1                 db    0
.eh_frame:00000000000095A2                 db    0
.eh_frame:00000000000095A3                 db    0
.eh_frame:00000000000095A4                 db  10h
.eh_frame:00000000000095A5                 db    0
.eh_frame:00000000000095A6                 db    0
.eh_frame:00000000000095A7                 db    0
.eh_frame:00000000000095A8                 db  98h
.eh_frame:00000000000095A9                 db    8
.eh_frame:00000000000095AA                 db    0
.eh_frame:00000000000095AB                 db    0
.eh_frame:00000000000095AC                 db  94h
.eh_frame:00000000000095AD                 db 0C3h
.eh_frame:00000000000095AE                 db 0FFh
.eh_frame:00000000000095AF                 db 0FFh
.eh_frame:00000000000095B0                 db  14h
.eh_frame:00000000000095B1                 db    0
.eh_frame:00000000000095B2                 db    0
.eh_frame:00000000000095B3                 db    0
.eh_frame:00000000000095B4                 db    0
.eh_frame:00000000000095B5                 db    0
.eh_frame:00000000000095B6                 db    0
.eh_frame:00000000000095B7                 db    0
.eh_frame:00000000000095B8                 db  18h
.eh_frame:00000000000095B9                 db    0
.eh_frame:00000000000095BA                 db    0
.eh_frame:00000000000095BB                 db    0
.eh_frame:00000000000095BC                 db 0ACh
.eh_frame:00000000000095BD                 db    8
.eh_frame:00000000000095BE                 db    0
.eh_frame:00000000000095BF                 db    0
.eh_frame:00000000000095C0                 db 0A0h
.eh_frame:00000000000095C1                 db 0C3h
.eh_frame:00000000000095C2                 db 0FFh
.eh_frame:00000000000095C3                 db 0FFh
.eh_frame:00000000000095C4                 db  8Eh
.eh_frame:00000000000095C5                 db    0
.eh_frame:00000000000095C6                 db    0
.eh_frame:00000000000095C7                 db    0
.eh_frame:00000000000095C8                 db    0
.eh_frame:00000000000095C9                 db  44h ; D
.eh_frame:00000000000095CA                 db  0Eh
.eh_frame:00000000000095CB                 db  50h ; P
.eh_frame:00000000000095CC                 db    2
.eh_frame:00000000000095CD                 db  7Fh ; 
.eh_frame:00000000000095CE                 db  0Ah
.eh_frame:00000000000095CF                 db  0Eh
.eh_frame:00000000000095D0                 db    8
.eh_frame:00000000000095D1                 db  41h ; A
.eh_frame:00000000000095D2                 db  0Bh
.eh_frame:00000000000095D3                 db    0
.eh_frame:00000000000095D4                 db  18h
.eh_frame:00000000000095D5                 db    0
.eh_frame:00000000000095D6                 db    0
.eh_frame:00000000000095D7                 db    0
.eh_frame:00000000000095D8                 db 0C8h
.eh_frame:00000000000095D9                 db    8
.eh_frame:00000000000095DA                 db    0
.eh_frame:00000000000095DB                 db    0
.eh_frame:00000000000095DC                 db  14h
.eh_frame:00000000000095DD                 db 0C4h
.eh_frame:00000000000095DE                 db 0FFh
.eh_frame:00000000000095DF                 db 0FFh
.eh_frame:00000000000095E0                 db  8Ah
.eh_frame:00000000000095E1                 db    0
.eh_frame:00000000000095E2                 db    0
.eh_frame:00000000000095E3                 db    0
.eh_frame:00000000000095E4                 db    0
.eh_frame:00000000000095E5                 db  44h ; D
.eh_frame:00000000000095E6                 db  0Eh
.eh_frame:00000000000095E7                 db  50h ; P
.eh_frame:00000000000095E8                 db    2
.eh_frame:00000000000095E9                 db  7Bh ; {
.eh_frame:00000000000095EA                 db  0Ah
.eh_frame:00000000000095EB                 db  0Eh
.eh_frame:00000000000095EC                 db    8
.eh_frame:00000000000095ED                 db  41h ; A
.eh_frame:00000000000095EE                 db  0Bh
.eh_frame:00000000000095EF                 db    0
.eh_frame:00000000000095F0                 db  10h
.eh_frame:00000000000095F1                 db    0
.eh_frame:00000000000095F2                 db    0
.eh_frame:00000000000095F3                 db    0
.eh_frame:00000000000095F4                 db 0E4h
.eh_frame:00000000000095F5                 db    8
.eh_frame:00000000000095F6                 db    0
.eh_frame:00000000000095F7                 db    0
.eh_frame:00000000000095F8                 db  88h
.eh_frame:00000000000095F9                 db 0C4h
.eh_frame:00000000000095FA                 db 0FFh
.eh_frame:00000000000095FB                 db 0FFh
.eh_frame:00000000000095FC                 db  0Ch
.eh_frame:00000000000095FD                 db    0
.eh_frame:00000000000095FE                 db    0
.eh_frame:00000000000095FF                 db    0
.eh_frame:0000000000009600                 db    0
.eh_frame:0000000000009601                 db    0
.eh_frame:0000000000009602                 db    0
.eh_frame:0000000000009603                 db    0
.eh_frame:0000000000009604                 db  10h
.eh_frame:0000000000009605                 db    0
.eh_frame:0000000000009606                 db    0
.eh_frame:0000000000009607                 db    0
.eh_frame:0000000000009608                 db 0F8h
.eh_frame:0000000000009609                 db    8
.eh_frame:000000000000960A                 db    0
.eh_frame:000000000000960B                 db    0
.eh_frame:000000000000960C                 db  84h
.eh_frame:000000000000960D                 db 0C4h
.eh_frame:000000000000960E                 db 0FFh
.eh_frame:000000000000960F                 db 0FFh
.eh_frame:0000000000009610                 db  0Fh
.eh_frame:0000000000009611                 db    0
.eh_frame:0000000000009612                 db    0
.eh_frame:0000000000009613                 db    0
.eh_frame:0000000000009614                 db    0
.eh_frame:0000000000009615                 db    0
.eh_frame:0000000000009616                 db    0
.eh_frame:0000000000009617                 db    0
.eh_frame:0000000000009618                 db  18h
.eh_frame:0000000000009619                 db    0
.eh_frame:000000000000961A                 db    0
.eh_frame:000000000000961B                 db    0
.eh_frame:000000000000961C                 db  0Ch
.eh_frame:000000000000961D                 db    9
.eh_frame:000000000000961E                 db    0
.eh_frame:000000000000961F                 db    0
.eh_frame:0000000000009620                 db  80h
.eh_frame:0000000000009621                 db 0C4h
.eh_frame:0000000000009622                 db 0FFh
.eh_frame:0000000000009623                 db 0FFh
.eh_frame:0000000000009624                 db  98h
.eh_frame:0000000000009625                 db    0
.eh_frame:0000000000009626                 db    0
.eh_frame:0000000000009627                 db    0
.eh_frame:0000000000009628                 db    0
.eh_frame:0000000000009629                 db  44h ; D
.eh_frame:000000000000962A                 db  0Eh
.eh_frame:000000000000962B                 db  50h ; P
.eh_frame:000000000000962C                 db    2
.eh_frame:000000000000962D                 db  8Eh
.eh_frame:000000000000962E                 db  0Ah
.eh_frame:000000000000962F                 db  0Eh
.eh_frame:0000000000009630                 db    8
.eh_frame:0000000000009631                 db  41h ; A
.eh_frame:0000000000009632                 db  0Bh
.eh_frame:0000000000009633                 db    0
.eh_frame:0000000000009634                 db  10h
.eh_frame:0000000000009635                 db    0
.eh_frame:0000000000009636                 db    0
.eh_frame:0000000000009637                 db    0
.eh_frame:0000000000009638                 db  28h ; (
.eh_frame:0000000000009639                 db    9
.eh_frame:000000000000963A                 db    0
.eh_frame:000000000000963B                 db    0
.eh_frame:000000000000963C                 db    4
.eh_frame:000000000000963D                 db 0C5h
.eh_frame:000000000000963E                 db 0FFh
.eh_frame:000000000000963F                 db 0FFh
.eh_frame:0000000000009640                 db  10h
.eh_frame:0000000000009641                 db    0
.eh_frame:0000000000009642                 db    0
.eh_frame:0000000000009643                 db    0
.eh_frame:0000000000009644                 db    0
.eh_frame:0000000000009645                 db    0
.eh_frame:0000000000009646                 db    0
.eh_frame:0000000000009647                 db    0
.eh_frame:0000000000009648                 db  10h
.eh_frame:0000000000009649                 db    0
.eh_frame:000000000000964A                 db    0
.eh_frame:000000000000964B                 db    0
.eh_frame:000000000000964C                 db  3Ch ; <
.eh_frame:000000000000964D                 db    9
.eh_frame:000000000000964E                 db    0
.eh_frame:000000000000964F                 db    0
.eh_frame:0000000000009650                 db    0
.eh_frame:0000000000009651                 db 0C5h
.eh_frame:0000000000009652                 db 0FFh
.eh_frame:0000000000009653                 db 0FFh
.eh_frame:0000000000009654                 db  11h
.eh_frame:0000000000009655                 db    0
.eh_frame:0000000000009656                 db    0
.eh_frame:0000000000009657                 db    0
.eh_frame:0000000000009658                 db    0
.eh_frame:0000000000009659                 db    0
.eh_frame:000000000000965A                 db    0
.eh_frame:000000000000965B                 db    0
.eh_frame:000000000000965C                 db  10h
.eh_frame:000000000000965D                 db    0
.eh_frame:000000000000965E                 db    0
.eh_frame:000000000000965F                 db    0
.eh_frame:0000000000009660                 db  50h ; P
.eh_frame:0000000000009661                 db    9
.eh_frame:0000000000009662                 db    0
.eh_frame:0000000000009663                 db    0
.eh_frame:0000000000009664                 db  0Ch
.eh_frame:0000000000009665                 db 0C5h
.eh_frame:0000000000009666                 db 0FFh
.eh_frame:0000000000009667                 db 0FFh
.eh_frame:0000000000009668                 db  0Ah
.eh_frame:0000000000009669                 db    0
.eh_frame:000000000000966A                 db    0
.eh_frame:000000000000966B                 db    0
.eh_frame:000000000000966C                 db    0
.eh_frame:000000000000966D                 db    0
.eh_frame:000000000000966E                 db    0
.eh_frame:000000000000966F                 db    0
.eh_frame:0000000000009670                 db  18h
.eh_frame:0000000000009671                 db    0
.eh_frame:0000000000009672                 db    0
.eh_frame:0000000000009673                 db    0
.eh_frame:0000000000009674                 db  64h ; d
.eh_frame:0000000000009675                 db    9
.eh_frame:0000000000009676                 db    0
.eh_frame:0000000000009677                 db    0
.eh_frame:0000000000009678                 db    8
.eh_frame:0000000000009679                 db 0C5h
.eh_frame:000000000000967A                 db 0FFh
.eh_frame:000000000000967B                 db 0FFh
.eh_frame:000000000000967C                 db  8Eh
.eh_frame:000000000000967D                 db    0
.eh_frame:000000000000967E                 db    0
.eh_frame:000000000000967F                 db    0
.eh_frame:0000000000009680                 db    0
.eh_frame:0000000000009681                 db  44h ; D
.eh_frame:0000000000009682                 db  0Eh
.eh_frame:0000000000009683                 db  50h ; P
.eh_frame:0000000000009684                 db    2
.eh_frame:0000000000009685                 db  7Fh ; 
.eh_frame:0000000000009686                 db  0Ah
.eh_frame:0000000000009687                 db  0Eh
.eh_frame:0000000000009688                 db    8
.eh_frame:0000000000009689                 db  41h ; A
.eh_frame:000000000000968A                 db  0Bh
.eh_frame:000000000000968B                 db    0
.eh_frame:000000000000968C                 db  18h
.eh_frame:000000000000968D                 db    0
.eh_frame:000000000000968E                 db    0
.eh_frame:000000000000968F                 db    0
.eh_frame:0000000000009690                 db  80h
.eh_frame:0000000000009691                 db    9
.eh_frame:0000000000009692                 db    0
.eh_frame:0000000000009693                 db    0
.eh_frame:0000000000009694                 db  7Ch ; |
.eh_frame:0000000000009695                 db 0C5h
.eh_frame:0000000000009696                 db 0FFh
.eh_frame:0000000000009697                 db 0FFh
.eh_frame:0000000000009698                 db  91h
.eh_frame:0000000000009699                 db    0
.eh_frame:000000000000969A                 db    0
.eh_frame:000000000000969B                 db    0
.eh_frame:000000000000969C                 db    0
.eh_frame:000000000000969D                 db  44h ; D
.eh_frame:000000000000969E                 db  0Eh
.eh_frame:000000000000969F                 db  50h ; P
.eh_frame:00000000000096A0                 db    2
.eh_frame:00000000000096A1                 db  82h
.eh_frame:00000000000096A2                 db  0Ah
.eh_frame:00000000000096A3                 db  0Eh
.eh_frame:00000000000096A4                 db    8
.eh_frame:00000000000096A5                 db  41h ; A
.eh_frame:00000000000096A6                 db  0Bh
.eh_frame:00000000000096A7                 db    0
.eh_frame:00000000000096A8                 db  10h
.eh_frame:00000000000096A9                 db    0
.eh_frame:00000000000096AA                 db    0
.eh_frame:00000000000096AB                 db    0
.eh_frame:00000000000096AC                 db  9Ch
.eh_frame:00000000000096AD                 db    9
.eh_frame:00000000000096AE                 db    0
.eh_frame:00000000000096AF                 db    0
.eh_frame:00000000000096B0                 db    0
.eh_frame:00000000000096B1                 db 0C6h
.eh_frame:00000000000096B2                 db 0FFh
.eh_frame:00000000000096B3                 db 0FFh
.eh_frame:00000000000096B4                 db  0Ch
.eh_frame:00000000000096B5                 db    0
.eh_frame:00000000000096B6                 db    0
.eh_frame:00000000000096B7                 db    0
.eh_frame:00000000000096B8                 db    0
.eh_frame:00000000000096B9                 db    0
.eh_frame:00000000000096BA                 db    0
.eh_frame:00000000000096BB                 db    0
.eh_frame:00000000000096BC                 db  10h
.eh_frame:00000000000096BD                 db    0
.eh_frame:00000000000096BE                 db    0
.eh_frame:00000000000096BF                 db    0
.eh_frame:00000000000096C0                 db 0B0h
.eh_frame:00000000000096C1                 db    9
.eh_frame:00000000000096C2                 db    0
.eh_frame:00000000000096C3                 db    0
.eh_frame:00000000000096C4                 db 0FCh
.eh_frame:00000000000096C5                 db 0C5h
.eh_frame:00000000000096C6                 db 0FFh
.eh_frame:00000000000096C7                 db 0FFh
.eh_frame:00000000000096C8                 db  17h
.eh_frame:00000000000096C9                 db    0
.eh_frame:00000000000096CA                 db    0
.eh_frame:00000000000096CB                 db    0
.eh_frame:00000000000096CC                 db    0
.eh_frame:00000000000096CD                 db    0
.eh_frame:00000000000096CE                 db    0
.eh_frame:00000000000096CF                 db    0
.eh_frame:00000000000096D0                 db  10h
.eh_frame:00000000000096D1                 db    0
.eh_frame:00000000000096D2                 db    0
.eh_frame:00000000000096D3                 db    0
.eh_frame:00000000000096D4                 db 0C4h
.eh_frame:00000000000096D5                 db    9
.eh_frame:00000000000096D6                 db    0
.eh_frame:00000000000096D7                 db    0
.eh_frame:00000000000096D8                 db    8
.eh_frame:00000000000096D9                 db 0C6h
.eh_frame:00000000000096DA                 db 0FFh
.eh_frame:00000000000096DB                 db 0FFh
.eh_frame:00000000000096DC                 db  13h
.eh_frame:00000000000096DD                 db    0
.eh_frame:00000000000096DE                 db    0
.eh_frame:00000000000096DF                 db    0
.eh_frame:00000000000096E0                 db    0
.eh_frame:00000000000096E1                 db    0
.eh_frame:00000000000096E2                 db    0
.eh_frame:00000000000096E3                 db    0
.eh_frame:00000000000096E4                 db  10h
.eh_frame:00000000000096E5                 db    0
.eh_frame:00000000000096E6                 db    0
.eh_frame:00000000000096E7                 db    0
.eh_frame:00000000000096E8                 db 0D8h
.eh_frame:00000000000096E9                 db    9
.eh_frame:00000000000096EA                 db    0
.eh_frame:00000000000096EB                 db    0
.eh_frame:00000000000096EC                 db  14h
.eh_frame:00000000000096ED                 db 0C6h
.eh_frame:00000000000096EE                 db 0FFh
.eh_frame:00000000000096EF                 db 0FFh
.eh_frame:00000000000096F0                 db  0Ch
.eh_frame:00000000000096F1                 db    0
.eh_frame:00000000000096F2                 db    0
.eh_frame:00000000000096F3                 db    0
.eh_frame:00000000000096F4                 db    0
.eh_frame:00000000000096F5                 db    0
.eh_frame:00000000000096F6                 db    0
.eh_frame:00000000000096F7                 db    0
.eh_frame:00000000000096F8                 db  10h
.eh_frame:00000000000096F9                 db    0
.eh_frame:00000000000096FA                 db    0
.eh_frame:00000000000096FB                 db    0
.eh_frame:00000000000096FC                 db 0ECh
.eh_frame:00000000000096FD                 db    9
.eh_frame:00000000000096FE                 db    0
.eh_frame:00000000000096FF                 db    0
.eh_frame:0000000000009700                 db  10h
.eh_frame:0000000000009701                 db 0C6h
.eh_frame:0000000000009702                 db 0FFh
.eh_frame:0000000000009703                 db 0FFh
.eh_frame:0000000000009704                 db  14h
.eh_frame:0000000000009705                 db    0
.eh_frame:0000000000009706                 db    0
.eh_frame:0000000000009707                 db    0
.eh_frame:0000000000009708                 db    0
.eh_frame:0000000000009709                 db    0
.eh_frame:000000000000970A                 db    0
.eh_frame:000000000000970B                 db    0
.eh_frame:000000000000970C                 db  10h
.eh_frame:000000000000970D                 db    0
.eh_frame:000000000000970E                 db    0
.eh_frame:000000000000970F                 db    0
.eh_frame:0000000000009710                 db    0
.eh_frame:0000000000009711                 db  0Ah
.eh_frame:0000000000009712                 db    0
.eh_frame:0000000000009713                 db    0
.eh_frame:0000000000009714                 db  1Ch
.eh_frame:0000000000009715                 db 0C6h
.eh_frame:0000000000009716                 db 0FFh
.eh_frame:0000000000009717                 db 0FFh
.eh_frame:0000000000009718                 db  13h
.eh_frame:0000000000009719                 db    0
.eh_frame:000000000000971A                 db    0
.eh_frame:000000000000971B                 db    0
.eh_frame:000000000000971C                 db    0
.eh_frame:000000000000971D                 db    0
.eh_frame:000000000000971E                 db    0
.eh_frame:000000000000971F                 db    0
.eh_frame:0000000000009720                 db  14h
.eh_frame:0000000000009721                 db    0
.eh_frame:0000000000009722                 db    0
.eh_frame:0000000000009723                 db    0
.eh_frame:0000000000009724                 db  14h
.eh_frame:0000000000009725                 db  0Ah
.eh_frame:0000000000009726                 db    0
.eh_frame:0000000000009727                 db    0
.eh_frame:0000000000009728                 db  28h ; (
.eh_frame:0000000000009729                 db 0C6h
.eh_frame:000000000000972A                 db 0FFh
.eh_frame:000000000000972B                 db 0FFh
.eh_frame:000000000000972C                 db  18h
.eh_frame:000000000000972D                 db    0
.eh_frame:000000000000972E                 db    0
.eh_frame:000000000000972F                 db    0
.eh_frame:0000000000009730                 db    0
.eh_frame:0000000000009731                 db    0
.eh_frame:0000000000009732                 db    0
.eh_frame:0000000000009733                 db    0
.eh_frame:0000000000009734                 db    0
.eh_frame:0000000000009735                 db    0
.eh_frame:0000000000009736                 db    0
.eh_frame:0000000000009737                 db    0
.eh_frame:0000000000009738                 db  14h
.eh_frame:0000000000009739                 db    0
.eh_frame:000000000000973A                 db    0
.eh_frame:000000000000973B                 db    0
.eh_frame:000000000000973C                 db  2Ch ; ,
.eh_frame:000000000000973D                 db  0Ah
.eh_frame:000000000000973E                 db    0
.eh_frame:000000000000973F                 db    0
.eh_frame:0000000000009740                 db  30h ; 0
.eh_frame:0000000000009741                 db 0C6h
.eh_frame:0000000000009742                 db 0FFh
.eh_frame:0000000000009743                 db 0FFh
.eh_frame:0000000000009744                 db  0Eh
.eh_frame:0000000000009745                 db    0
.eh_frame:0000000000009746                 db    0
.eh_frame:0000000000009747                 db    0
.eh_frame:0000000000009748                 db    0
.eh_frame:0000000000009749                 db    0
.eh_frame:000000000000974A                 db    0
.eh_frame:000000000000974B                 db    0
.eh_frame:000000000000974C                 db    0
.eh_frame:000000000000974D                 db    0
.eh_frame:000000000000974E                 db    0
.eh_frame:000000000000974F                 db    0
.eh_frame:0000000000009750                 db  10h
.eh_frame:0000000000009751                 db    1
.eh_frame:0000000000009752                 db    0
.eh_frame:0000000000009753                 db    0
.eh_frame:0000000000009754                 db  44h ; D
.eh_frame:0000000000009755                 db  0Ah
.eh_frame:0000000000009756                 db    0
.eh_frame:0000000000009757                 db    0
.eh_frame:0000000000009758                 db  28h ; (
.eh_frame:0000000000009759                 db 0C6h
.eh_frame:000000000000975A                 db 0FFh
.eh_frame:000000000000975B                 db 0FFh
.eh_frame:000000000000975C                 db  17h
.eh_frame:000000000000975D                 db    4
.eh_frame:000000000000975E                 db    0
.eh_frame:000000000000975F                 db    0
.eh_frame:0000000000009760                 db    0
.eh_frame:0000000000009761                 db  42h ; B
.eh_frame:0000000000009762                 db  0Eh
.eh_frame:0000000000009763                 db  10h
.eh_frame:0000000000009764                 db  8Fh
.eh_frame:0000000000009765                 db    2
.eh_frame:0000000000009766                 db  42h ; B
.eh_frame:0000000000009767                 db  0Eh
.eh_frame:0000000000009768                 db  18h
.eh_frame:0000000000009769                 db  8Eh
.eh_frame:000000000000976A                 db    3
.eh_frame:000000000000976B                 db  42h ; B
.eh_frame:000000000000976C                 db  0Eh
.eh_frame:000000000000976D                 db  20h
.eh_frame:000000000000976E                 db  8Dh
.eh_frame:000000000000976F                 db    4
.eh_frame:0000000000009770                 db  42h ; B
.eh_frame:0000000000009771                 db  0Eh
.eh_frame:0000000000009772                 db  28h ; (
.eh_frame:0000000000009773                 db  8Ch
.eh_frame:0000000000009774                 db    5
.eh_frame:0000000000009775                 db  44h ; D
.eh_frame:0000000000009776                 db  0Eh
.eh_frame:0000000000009777                 db  30h ; 0
.eh_frame:0000000000009778                 db  86h
.eh_frame:0000000000009779                 db    6
.eh_frame:000000000000977A                 db  41h ; A
.eh_frame:000000000000977B                 db  0Eh
.eh_frame:000000000000977C                 db  38h ; 8
.eh_frame:000000000000977D                 db  83h
.eh_frame:000000000000977E                 db    7
.eh_frame:000000000000977F                 db  4Ah ; J
.eh_frame:0000000000009780                 db  0Eh
.eh_frame:0000000000009781                 db  60h ; `
.eh_frame:0000000000009782                 db    2
.eh_frame:0000000000009783                 db 0DDh
.eh_frame:0000000000009784                 db  0Eh
.eh_frame:0000000000009785                 db  68h ; h
.eh_frame:0000000000009786                 db  57h ; W
.eh_frame:0000000000009787                 db  0Eh
.eh_frame:0000000000009788                 db  70h ; p
.eh_frame:0000000000009789                 db  42h ; B
.eh_frame:000000000000978A                 db  0Eh
.eh_frame:000000000000978B                 db  78h ; x
.eh_frame:000000000000978C                 db  42h ; B
.eh_frame:000000000000978D                 db  0Eh
.eh_frame:000000000000978E                 db  80h
.eh_frame:000000000000978F                 db    1
.eh_frame:0000000000009790                 db  42h ; B
.eh_frame:0000000000009791                 db  0Eh
.eh_frame:0000000000009792                 db  88h
.eh_frame:0000000000009793                 db    1
.eh_frame:0000000000009794                 db  42h ; B
.eh_frame:0000000000009795                 db  0Eh
.eh_frame:0000000000009796                 db  90h
.eh_frame:0000000000009797                 db    1
.eh_frame:0000000000009798                 db  53h ; S
.eh_frame:0000000000009799                 db  0Eh
.eh_frame:000000000000979A                 db  60h ; `
.eh_frame:000000000000979B                 db  44h ; D
.eh_frame:000000000000979C                 db  0Ah
.eh_frame:000000000000979D                 db  0Eh
.eh_frame:000000000000979E                 db  38h ; 8
.eh_frame:000000000000979F                 db  41h ; A
.eh_frame:00000000000097A0                 db  0Eh
.eh_frame:00000000000097A1                 db  30h ; 0
.eh_frame:00000000000097A2                 db  41h ; A
.eh_frame:00000000000097A3                 db  0Eh
.eh_frame:00000000000097A4                 db  28h ; (
.eh_frame:00000000000097A5                 db  42h ; B
.eh_frame:00000000000097A6                 db  0Eh
.eh_frame:00000000000097A7                 db  20h
.eh_frame:00000000000097A8                 db  42h ; B
.eh_frame:00000000000097A9                 db  0Eh
.eh_frame:00000000000097AA                 db  18h
.eh_frame:00000000000097AB                 db  42h ; B
.eh_frame:00000000000097AC                 db  0Eh
.eh_frame:00000000000097AD                 db  10h
.eh_frame:00000000000097AE                 db  42h ; B
.eh_frame:00000000000097AF                 db  0Eh
.eh_frame:00000000000097B0                 db    8
.eh_frame:00000000000097B1                 db  44h ; D
.eh_frame:00000000000097B2                 db  0Bh
.eh_frame:00000000000097B3                 db    2
.eh_frame:00000000000097B4                 db  78h ; x
.eh_frame:00000000000097B5                 db  0Ah
.eh_frame:00000000000097B6                 db  0Eh
.eh_frame:00000000000097B7                 db  68h ; h
.eh_frame:00000000000097B8                 db  48h ; H
.eh_frame:00000000000097B9                 db  0Bh
.eh_frame:00000000000097BA                 db  5Ah ; Z
.eh_frame:00000000000097BB                 db  0Ah
.eh_frame:00000000000097BC                 db  0Eh
.eh_frame:00000000000097BD                 db  38h ; 8
.eh_frame:00000000000097BE                 db  47h ; G
.eh_frame:00000000000097BF                 db  0Eh
.eh_frame:00000000000097C0                 db  30h ; 0
.eh_frame:00000000000097C1                 db  41h ; A
.eh_frame:00000000000097C2                 db  0Eh
.eh_frame:00000000000097C3                 db  28h ; (
.eh_frame:00000000000097C4                 db  42h ; B
.eh_frame:00000000000097C5                 db  0Eh
.eh_frame:00000000000097C6                 db  20h
.eh_frame:00000000000097C7                 db  42h ; B
.eh_frame:00000000000097C8                 db  0Eh
.eh_frame:00000000000097C9                 db  18h
.eh_frame:00000000000097CA                 db  42h ; B
.eh_frame:00000000000097CB                 db  0Eh
.eh_frame:00000000000097CC                 db  10h
.eh_frame:00000000000097CD                 db  42h ; B
.eh_frame:00000000000097CE                 db  0Eh
.eh_frame:00000000000097CF                 db    8
.eh_frame:00000000000097D0                 db  56h ; V
.eh_frame:00000000000097D1                 db  0Bh
.eh_frame:00000000000097D2                 db  5Eh ; ^
.eh_frame:00000000000097D3                 db  0Ah
.eh_frame:00000000000097D4                 db  0Eh
.eh_frame:00000000000097D5                 db  38h ; 8
.eh_frame:00000000000097D6                 db  52h ; R
.eh_frame:00000000000097D7                 db  0Eh
.eh_frame:00000000000097D8                 db  30h ; 0
.eh_frame:00000000000097D9                 db  41h ; A
.eh_frame:00000000000097DA                 db  0Eh
.eh_frame:00000000000097DB                 db  28h ; (
.eh_frame:00000000000097DC                 db  42h ; B
.eh_frame:00000000000097DD                 db  0Eh
.eh_frame:00000000000097DE                 db  20h
.eh_frame:00000000000097DF                 db  42h ; B
.eh_frame:00000000000097E0                 db  0Eh
.eh_frame:00000000000097E1                 db  18h
.eh_frame:00000000000097E2                 db  42h ; B
.eh_frame:00000000000097E3                 db  0Eh
.eh_frame:00000000000097E4                 db  10h
.eh_frame:00000000000097E5                 db  42h ; B
.eh_frame:00000000000097E6                 db  0Eh
.eh_frame:00000000000097E7                 db    8
.eh_frame:00000000000097E8                 db  4Fh ; O
.eh_frame:00000000000097E9                 db  0Bh
.eh_frame:00000000000097EA                 db  62h ; b
.eh_frame:00000000000097EB                 db  0Ah
.eh_frame:00000000000097EC                 db  0Eh
.eh_frame:00000000000097ED                 db  38h ; 8
.eh_frame:00000000000097EE                 db  50h ; P
.eh_frame:00000000000097EF                 db  0Eh
.eh_frame:00000000000097F0                 db  30h ; 0
.eh_frame:00000000000097F1                 db  41h ; A
.eh_frame:00000000000097F2                 db  0Eh
.eh_frame:00000000000097F3                 db  28h ; (
.eh_frame:00000000000097F4                 db  42h ; B
.eh_frame:00000000000097F5                 db  0Eh
.eh_frame:00000000000097F6                 db  20h
.eh_frame:00000000000097F7                 db  42h ; B
.eh_frame:00000000000097F8                 db  0Eh
.eh_frame:00000000000097F9                 db  18h
.eh_frame:00000000000097FA                 db  42h ; B
.eh_frame:00000000000097FB                 db  0Eh
.eh_frame:00000000000097FC                 db  10h
.eh_frame:00000000000097FD                 db  42h ; B
.eh_frame:00000000000097FE                 db  0Eh
.eh_frame:00000000000097FF                 db    8
.eh_frame:0000000000009800                 db  55h ; U
.eh_frame:0000000000009801                 db  0Bh
.eh_frame:0000000000009802                 db  66h ; f
.eh_frame:0000000000009803                 db  0Eh
.eh_frame:0000000000009804                 db  68h ; h
.eh_frame:0000000000009805                 db  42h ; B
.eh_frame:0000000000009806                 db  0Eh
.eh_frame:0000000000009807                 db  70h ; p
.eh_frame:0000000000009808                 db  5Ch ; \
.eh_frame:0000000000009809                 db  0Eh
.eh_frame:000000000000980A                 db  68h ; h
.eh_frame:000000000000980B                 db  41h ; A
.eh_frame:000000000000980C                 db  0Eh
.eh_frame:000000000000980D                 db  60h ; `
.eh_frame:000000000000980E                 db  44h ; D
.eh_frame:000000000000980F                 db  0Ah
.eh_frame:0000000000009810                 db  0Eh
.eh_frame:0000000000009811                 db  38h ; 8
.eh_frame:0000000000009812                 db  41h ; A
.eh_frame:0000000000009813                 db  0Eh
.eh_frame:0000000000009814                 db  30h ; 0
.eh_frame:0000000000009815                 db  41h ; A
.eh_frame:0000000000009816                 db  0Eh
.eh_frame:0000000000009817                 db  28h ; (
.eh_frame:0000000000009818                 db  42h ; B
.eh_frame:0000000000009819                 db  0Eh
.eh_frame:000000000000981A                 db  20h
.eh_frame:000000000000981B                 db  42h ; B
.eh_frame:000000000000981C                 db  0Eh
.eh_frame:000000000000981D                 db  18h
.eh_frame:000000000000981E                 db  42h ; B
.eh_frame:000000000000981F                 db  0Eh
.eh_frame:0000000000009820                 db  10h
.eh_frame:0000000000009821                 db  42h ; B
.eh_frame:0000000000009822                 db  0Eh
.eh_frame:0000000000009823                 db    8
.eh_frame:0000000000009824                 db  45h ; E
.eh_frame:0000000000009825                 db  0Bh
.eh_frame:0000000000009826                 db  68h ; h
.eh_frame:0000000000009827                 db  0Ah
.eh_frame:0000000000009828                 db  0Eh
.eh_frame:0000000000009829                 db  68h ; h
.eh_frame:000000000000982A                 db  48h ; H
.eh_frame:000000000000982B                 db  0Bh
.eh_frame:000000000000982C                 db  72h ; r
.eh_frame:000000000000982D                 db  0Eh
.eh_frame:000000000000982E                 db  68h ; h
.eh_frame:000000000000982F                 db  45h ; E
.eh_frame:0000000000009830                 db  0Eh
.eh_frame:0000000000009831                 db  70h ; p
.eh_frame:0000000000009832                 db  42h ; B
.eh_frame:0000000000009833                 db  0Eh
.eh_frame:0000000000009834                 db  78h ; x
.eh_frame:0000000000009835                 db  42h ; B
.eh_frame:0000000000009836                 db  0Eh
.eh_frame:0000000000009837                 db  80h
.eh_frame:0000000000009838                 db    1
.eh_frame:0000000000009839                 db  5Eh ; ^
.eh_frame:000000000000983A                 db  0Eh
.eh_frame:000000000000983B                 db  60h ; `
.eh_frame:000000000000983C                 db  44h ; D
.eh_frame:000000000000983D                 db  0Ah
.eh_frame:000000000000983E                 db  0Eh
.eh_frame:000000000000983F                 db  38h ; 8
.eh_frame:0000000000009840                 db  41h ; A
.eh_frame:0000000000009841                 db  0Eh
.eh_frame:0000000000009842                 db  30h ; 0
.eh_frame:0000000000009843                 db  41h ; A
.eh_frame:0000000000009844                 db  0Eh
.eh_frame:0000000000009845                 db  28h ; (
.eh_frame:0000000000009846                 db  42h ; B
.eh_frame:0000000000009847                 db  0Eh
.eh_frame:0000000000009848                 db  20h
.eh_frame:0000000000009849                 db  42h ; B
.eh_frame:000000000000984A                 db  0Eh
.eh_frame:000000000000984B                 db  18h
.eh_frame:000000000000984C                 db  42h ; B
.eh_frame:000000000000984D                 db  0Eh
.eh_frame:000000000000984E                 db  10h
.eh_frame:000000000000984F                 db  42h ; B
.eh_frame:0000000000009850                 db  0Eh
.eh_frame:0000000000009851                 db    8
.eh_frame:0000000000009852                 db  41h ; A
.eh_frame:0000000000009853                 db  0Bh
.eh_frame:0000000000009854                 db  79h ; y
.eh_frame:0000000000009855                 db  0Ah
.eh_frame:0000000000009856                 db  0Eh
.eh_frame:0000000000009857                 db  68h ; h
.eh_frame:0000000000009858                 db  42h ; B
.eh_frame:0000000000009859                 db  0Eh
.eh_frame:000000000000985A                 db  70h ; p
.eh_frame:000000000000985B                 db  42h ; B
.eh_frame:000000000000985C                 db  0Eh
.eh_frame:000000000000985D                 db  78h ; x
.eh_frame:000000000000985E                 db  42h ; B
.eh_frame:000000000000985F                 db  0Eh
.eh_frame:0000000000009860                 db  80h
.eh_frame:0000000000009861                 db    1
.eh_frame:0000000000009862                 db  51h ; Q
.eh_frame:0000000000009863                 db  0Bh
.eh_frame:0000000000009864                 db  10h
.eh_frame:0000000000009865                 db    0
.eh_frame:0000000000009866                 db    0
.eh_frame:0000000000009867                 db    0
.eh_frame:0000000000009868                 db  58h ; X
.eh_frame:0000000000009869                 db  0Bh
.eh_frame:000000000000986A                 db    0
.eh_frame:000000000000986B                 db    0
.eh_frame:000000000000986C                 db  34h ; 4
.eh_frame:000000000000986D                 db 0C9h
.eh_frame:000000000000986E                 db 0FFh
.eh_frame:000000000000986F                 db 0FFh
.eh_frame:0000000000009870                 db  20h
.eh_frame:0000000000009871                 db    0
.eh_frame:0000000000009872                 db    0
.eh_frame:0000000000009873                 db    0
.eh_frame:0000000000009874                 db    0
.eh_frame:0000000000009875                 db    0
.eh_frame:0000000000009876                 db    0
.eh_frame:0000000000009877                 db    0
.eh_frame:0000000000009878                 db  18h
.eh_frame:0000000000009879                 db    0
.eh_frame:000000000000987A                 db    0
.eh_frame:000000000000987B                 db    0
.eh_frame:000000000000987C                 db  6Ch ; l
.eh_frame:000000000000987D                 db  0Bh
.eh_frame:000000000000987E                 db    0
.eh_frame:000000000000987F                 db    0
.eh_frame:0000000000009880                 db  40h ; @
.eh_frame:0000000000009881                 db 0C9h
.eh_frame:0000000000009882                 db 0FFh
.eh_frame:0000000000009883                 db 0FFh
.eh_frame:0000000000009884                 db  78h ; x
.eh_frame:0000000000009885                 db    0
.eh_frame:0000000000009886                 db    0
.eh_frame:0000000000009887                 db    0
.eh_frame:0000000000009888                 db    0
.eh_frame:0000000000009889                 db  44h ; D
.eh_frame:000000000000988A                 db  0Eh
.eh_frame:000000000000988B                 db  70h ; p
.eh_frame:000000000000988C                 db    2
.eh_frame:000000000000988D                 db  60h ; `
.eh_frame:000000000000988E                 db  0Ah
.eh_frame:000000000000988F                 db  0Eh
.eh_frame:0000000000009890                 db    8
.eh_frame:0000000000009891                 db  41h ; A
.eh_frame:0000000000009892                 db  0Bh
.eh_frame:0000000000009893                 db    0
.eh_frame:0000000000009894                 db  28h ; (
.eh_frame:0000000000009895                 db    0
.eh_frame:0000000000009896                 db    0
.eh_frame:0000000000009897                 db    0
.eh_frame:0000000000009898                 db  88h
.eh_frame:0000000000009899                 db  0Bh
.eh_frame:000000000000989A                 db    0
.eh_frame:000000000000989B                 db    0
.eh_frame:000000000000989C                 db 0A4h
.eh_frame:000000000000989D                 db 0C9h
.eh_frame:000000000000989E                 db 0FFh
.eh_frame:000000000000989F                 db 0FFh
.eh_frame:00000000000098A0                 db 0D5h
.eh_frame:00000000000098A1                 db    0
.eh_frame:00000000000098A2                 db    0
.eh_frame:00000000000098A3                 db    0
.eh_frame:00000000000098A4                 db    0
.eh_frame:00000000000098A5                 db  41h ; A
.eh_frame:00000000000098A6                 db  0Eh
.eh_frame:00000000000098A7                 db  10h
.eh_frame:00000000000098A8                 db  86h
.eh_frame:00000000000098A9                 db    2
.eh_frame:00000000000098AA                 db  41h ; A
.eh_frame:00000000000098AB                 db  0Eh
.eh_frame:00000000000098AC                 db  18h
.eh_frame:00000000000098AD                 db  83h
.eh_frame:00000000000098AE                 db    3
.eh_frame:00000000000098AF                 db  50h ; P
.eh_frame:00000000000098B0                 db  0Eh
.eh_frame:00000000000098B1                 db 0D0h
.eh_frame:00000000000098B2                 db    1
.eh_frame:00000000000098B3                 db    2
.eh_frame:00000000000098B4                 db 0ABh
.eh_frame:00000000000098B5                 db  0Ah
.eh_frame:00000000000098B6                 db  0Eh
.eh_frame:00000000000098B7                 db  18h
.eh_frame:00000000000098B8                 db  41h ; A
.eh_frame:00000000000098B9                 db  0Eh
.eh_frame:00000000000098BA                 db  10h
.eh_frame:00000000000098BB                 db  41h ; A
.eh_frame:00000000000098BC                 db  0Eh
.eh_frame:00000000000098BD                 db    8
.eh_frame:00000000000098BE                 db  41h ; A
.eh_frame:00000000000098BF                 db  0Bh
.eh_frame:00000000000098C0                 db  1Ch
.eh_frame:00000000000098C1                 db    0
.eh_frame:00000000000098C2                 db    0
.eh_frame:00000000000098C3                 db    0
.eh_frame:00000000000098C4                 db 0B4h
.eh_frame:00000000000098C5                 db  0Bh
.eh_frame:00000000000098C6                 db    0
.eh_frame:00000000000098C7                 db    0
.eh_frame:00000000000098C8                 db  58h ; X
.eh_frame:00000000000098C9                 db 0CAh
.eh_frame:00000000000098CA                 db 0FFh
.eh_frame:00000000000098CB                 db 0FFh
.eh_frame:00000000000098CC                 db  80h
.eh_frame:00000000000098CD                 db    0
.eh_frame:00000000000098CE                 db    0
.eh_frame:00000000000098CF                 db    0
.eh_frame:00000000000098D0                 db    0
.eh_frame:00000000000098D1                 db  41h ; A
.eh_frame:00000000000098D2                 db  0Eh
.eh_frame:00000000000098D3                 db  10h
.eh_frame:00000000000098D4                 db  83h
.eh_frame:00000000000098D5                 db    2
.eh_frame:00000000000098D6                 db    2
.eh_frame:00000000000098D7                 db  7Ah ; z
.eh_frame:00000000000098D8                 db  0Eh
.eh_frame:00000000000098D9                 db    8
.eh_frame:00000000000098DA                 db    0
.eh_frame:00000000000098DB                 db    0
.eh_frame:00000000000098DC                 db    0
.eh_frame:00000000000098DD                 db    0
.eh_frame:00000000000098DE                 db    0
.eh_frame:00000000000098DF                 db    0
.eh_frame:00000000000098E0                 db  18h
.eh_frame:00000000000098E1                 db    0
.eh_frame:00000000000098E2                 db    0
.eh_frame:00000000000098E3                 db    0
.eh_frame:00000000000098E4                 db 0D4h
.eh_frame:00000000000098E5                 db  0Bh
.eh_frame:00000000000098E6                 db    0
.eh_frame:00000000000098E7                 db    0
.eh_frame:00000000000098E8                 db 0B8h
.eh_frame:00000000000098E9                 db 0CAh
.eh_frame:00000000000098EA                 db 0FFh
.eh_frame:00000000000098EB                 db 0FFh
.eh_frame:00000000000098EC                 db  1Ah
.eh_frame:00000000000098ED                 db    0
.eh_frame:00000000000098EE                 db    0
.eh_frame:00000000000098EF                 db    0
.eh_frame:00000000000098F0                 db    0
.eh_frame:00000000000098F1                 db  41h ; A
.eh_frame:00000000000098F2                 db  0Eh
.eh_frame:00000000000098F3                 db  10h
.eh_frame:00000000000098F4                 db  83h
.eh_frame:00000000000098F5                 db    2
.eh_frame:00000000000098F6                 db  53h ; S
.eh_frame:00000000000098F7                 db  0Ah
.eh_frame:00000000000098F8                 db  0Eh
.eh_frame:00000000000098F9                 db    8
.eh_frame:00000000000098FA                 db  41h ; A
.eh_frame:00000000000098FB                 db  0Bh
.eh_frame:00000000000098FC                 db  10h
.eh_frame:00000000000098FD                 db    0
.eh_frame:00000000000098FE                 db    0
.eh_frame:00000000000098FF                 db    0
.eh_frame:0000000000009900                 db 0F0h
.eh_frame:0000000000009901                 db  0Bh
.eh_frame:0000000000009902                 db    0
.eh_frame:0000000000009903                 db    0
.eh_frame:0000000000009904                 db 0BCh
.eh_frame:0000000000009905                 db 0CAh
.eh_frame:0000000000009906                 db 0FFh
.eh_frame:0000000000009907                 db 0FFh
.eh_frame:0000000000009908                 db  24h ; $
.eh_frame:0000000000009909                 db    0
.eh_frame:000000000000990A                 db    0
.eh_frame:000000000000990B                 db    0
.eh_frame:000000000000990C                 db    0
.eh_frame:000000000000990D                 db  5Fh ; _
.eh_frame:000000000000990E                 db  0Eh
.eh_frame:000000000000990F                 db  10h
.eh_frame:0000000000009910                 db  10h
.eh_frame:0000000000009911                 db    0
.eh_frame:0000000000009912                 db    0
.eh_frame:0000000000009913                 db    0
.eh_frame:0000000000009914                 db    4
.eh_frame:0000000000009915                 db  0Ch
.eh_frame:0000000000009916                 db    0
.eh_frame:0000000000009917                 db    0
.eh_frame:0000000000009918                 db 0D8h
.eh_frame:0000000000009919                 db 0CAh
.eh_frame:000000000000991A                 db 0FFh
.eh_frame:000000000000991B                 db 0FFh
.eh_frame:000000000000991C                 db    2
.eh_frame:000000000000991D                 db    0
.eh_frame:000000000000991E                 db    0
.eh_frame:000000000000991F                 db    0
.eh_frame:0000000000009920                 db    0
.eh_frame:0000000000009921                 db    0
.eh_frame:0000000000009922                 db    0
.eh_frame:0000000000009923                 db    0
.eh_frame:0000000000009924                 db  20h
.eh_frame:0000000000009925                 db    0
.eh_frame:0000000000009926                 db    0
.eh_frame:0000000000009927                 db    0
.eh_frame:0000000000009928                 db  18h
.eh_frame:0000000000009929                 db  0Ch
.eh_frame:000000000000992A                 db    0
.eh_frame:000000000000992B                 db    0
.eh_frame:000000000000992C                 db 0D4h
.eh_frame:000000000000992D                 db 0CAh
.eh_frame:000000000000992E                 db 0FFh
.eh_frame:000000000000992F                 db 0FFh
.eh_frame:0000000000009930                 db  36h ; 6
.eh_frame:0000000000009931                 db    0
.eh_frame:0000000000009932                 db    0
.eh_frame:0000000000009933                 db    0
.eh_frame:0000000000009934                 db    0
.eh_frame:0000000000009935                 db  44h ; D
.eh_frame:0000000000009936                 db  0Eh
.eh_frame:0000000000009937                 db  10h
.eh_frame:0000000000009938                 db  83h
.eh_frame:0000000000009939                 db    2
.eh_frame:000000000000993A                 db  5Dh ; ]
.eh_frame:000000000000993B                 db  0Ah
.eh_frame:000000000000993C                 db  0Eh
.eh_frame:000000000000993D                 db    8
.eh_frame:000000000000993E                 db  47h ; G
.eh_frame:000000000000993F                 db  0Bh
.eh_frame:0000000000009940                 db  48h ; H
.eh_frame:0000000000009941                 db  0Ah
.eh_frame:0000000000009942                 db  0Eh
.eh_frame:0000000000009943                 db    8
.eh_frame:0000000000009944                 db  41h ; A
.eh_frame:0000000000009945                 db  0Bh
.eh_frame:0000000000009946                 db    0
.eh_frame:0000000000009947                 db    0
.eh_frame:0000000000009948                 db  10h
.eh_frame:0000000000009949                 db    0
.eh_frame:000000000000994A                 db    0
.eh_frame:000000000000994B                 db    0
.eh_frame:000000000000994C                 db  3Ch ; <
.eh_frame:000000000000994D                 db  0Ch
.eh_frame:000000000000994E                 db    0
.eh_frame:000000000000994F                 db    0
.eh_frame:0000000000009950                 db 0F0h
.eh_frame:0000000000009951                 db 0CAh
.eh_frame:0000000000009952                 db 0FFh
.eh_frame:0000000000009953                 db 0FFh
.eh_frame:0000000000009954                 db  24h ; $
.eh_frame:0000000000009955                 db    0
.eh_frame:0000000000009956                 db    0
.eh_frame:0000000000009957                 db    0
.eh_frame:0000000000009958                 db    0
.eh_frame:0000000000009959                 db  5Fh ; _
.eh_frame:000000000000995A                 db  0Eh
.eh_frame:000000000000995B                 db  10h
.eh_frame:000000000000995C                 db  14h
.eh_frame:000000000000995D                 db    0
.eh_frame:000000000000995E                 db    0
.eh_frame:000000000000995F                 db    0
.eh_frame:0000000000009960                 db  50h ; P
.eh_frame:0000000000009961                 db  0Ch
.eh_frame:0000000000009962                 db    0
.eh_frame:0000000000009963                 db    0
.eh_frame:0000000000009964                 db  0Ch
.eh_frame:0000000000009965                 db 0CBh
.eh_frame:0000000000009966                 db 0FFh
.eh_frame:0000000000009967                 db 0FFh
.eh_frame:0000000000009968                 db  82h
.eh_frame:0000000000009969                 db    0
.eh_frame:000000000000996A                 db    0
.eh_frame:000000000000996B                 db    0
.eh_frame:000000000000996C                 db    0
.eh_frame:000000000000996D                 db    2
.eh_frame:000000000000996E                 db  5Fh ; _
.eh_frame:000000000000996F                 db  0Eh
.eh_frame:0000000000009970                 db  10h
.eh_frame:0000000000009971                 db  49h ; I
.eh_frame:0000000000009972                 db  0Eh
.eh_frame:0000000000009973                 db    8
.eh_frame:0000000000009974                 db  14h
.eh_frame:0000000000009975                 db    0
.eh_frame:0000000000009976                 db    0
.eh_frame:0000000000009977                 db    0
.eh_frame:0000000000009978                 db  68h ; h
.eh_frame:0000000000009979                 db  0Ch
.eh_frame:000000000000997A                 db    0
.eh_frame:000000000000997B                 db    0
.eh_frame:000000000000997C                 db  84h
.eh_frame:000000000000997D                 db 0CBh
.eh_frame:000000000000997E                 db 0FFh
.eh_frame:000000000000997F                 db 0FFh
.eh_frame:0000000000009980                 db  4Ah ; J
.eh_frame:0000000000009981                 db    0
.eh_frame:0000000000009982                 db    0
.eh_frame:0000000000009983                 db    0
.eh_frame:0000000000009984                 db    0
.eh_frame:0000000000009985                 db    2
.eh_frame:0000000000009986                 db  45h ; E
.eh_frame:0000000000009987                 db  0Eh
.eh_frame:0000000000009988                 db  10h
.eh_frame:0000000000009989                 db    0
.eh_frame:000000000000998A                 db    0
.eh_frame:000000000000998B                 db    0
.eh_frame:000000000000998C                 db  18h
.eh_frame:000000000000998D                 db    0
.eh_frame:000000000000998E                 db    0
.eh_frame:000000000000998F                 db    0
.eh_frame:0000000000009990                 db  80h
.eh_frame:0000000000009991                 db  0Ch
.eh_frame:0000000000009992                 db    0
.eh_frame:0000000000009993                 db    0
.eh_frame:0000000000009994                 db 0BCh
.eh_frame:0000000000009995                 db 0CBh
.eh_frame:0000000000009996                 db 0FFh
.eh_frame:0000000000009997                 db 0FFh
.eh_frame:0000000000009998                 db  17h
.eh_frame:0000000000009999                 db    0
.eh_frame:000000000000999A                 db    0
.eh_frame:000000000000999B                 db    0
.eh_frame:000000000000999C                 db    0
.eh_frame:000000000000999D                 db  41h ; A
.eh_frame:000000000000999E                 db  0Eh
.eh_frame:000000000000999F                 db  10h
.eh_frame:00000000000099A0                 db  83h
.eh_frame:00000000000099A1                 db    2
.eh_frame:00000000000099A2                 db  51h ; Q
.eh_frame:00000000000099A3                 db  0Eh
.eh_frame:00000000000099A4                 db    8
.eh_frame:00000000000099A5                 db    0
.eh_frame:00000000000099A6                 db    0
.eh_frame:00000000000099A7                 db    0
.eh_frame:00000000000099A8                 db  18h
.eh_frame:00000000000099A9                 db    0
.eh_frame:00000000000099AA                 db    0
.eh_frame:00000000000099AB                 db    0
.eh_frame:00000000000099AC                 db  9Ch
.eh_frame:00000000000099AD                 db  0Ch
.eh_frame:00000000000099AE                 db    0
.eh_frame:00000000000099AF                 db    0
.eh_frame:00000000000099B0                 db 0C0h
.eh_frame:00000000000099B1                 db 0CBh
.eh_frame:00000000000099B2                 db 0FFh
.eh_frame:00000000000099B3                 db 0FFh
.eh_frame:00000000000099B4                 db  2Eh ; .
.eh_frame:00000000000099B5                 db    0
.eh_frame:00000000000099B6                 db    0
.eh_frame:00000000000099B7                 db    0
.eh_frame:00000000000099B8                 db    0
.eh_frame:00000000000099B9                 db  47h ; G
.eh_frame:00000000000099BA                 db  0Eh
.eh_frame:00000000000099BB                 db  10h
.eh_frame:00000000000099BC                 db  61h ; a
.eh_frame:00000000000099BD                 db  0Ah
.eh_frame:00000000000099BE                 db  0Eh
.eh_frame:00000000000099BF                 db    8
.eh_frame:00000000000099C0                 db  41h ; A
.eh_frame:00000000000099C1                 db  0Bh
.eh_frame:00000000000099C2                 db    0
.eh_frame:00000000000099C3                 db    0
.eh_frame:00000000000099C4                 db  24h ; $
.eh_frame:00000000000099C5                 db    0
.eh_frame:00000000000099C6                 db    0
.eh_frame:00000000000099C7                 db    0
.eh_frame:00000000000099C8                 db 0B8h
.eh_frame:00000000000099C9                 db  0Ch
.eh_frame:00000000000099CA                 db    0
.eh_frame:00000000000099CB                 db    0
.eh_frame:00000000000099CC                 db 0D4h
.eh_frame:00000000000099CD                 db 0CBh
.eh_frame:00000000000099CE                 db 0FFh
.eh_frame:00000000000099CF                 db 0FFh
.eh_frame:00000000000099D0                 db  28h ; (
.eh_frame:00000000000099D1                 db    0
.eh_frame:00000000000099D2                 db    0
.eh_frame:00000000000099D3                 db    0
.eh_frame:00000000000099D4                 db    0
.eh_frame:00000000000099D5                 db  41h ; A
.eh_frame:00000000000099D6                 db  0Eh
.eh_frame:00000000000099D7                 db  10h
.eh_frame:00000000000099D8                 db  86h
.eh_frame:00000000000099D9                 db    2
.eh_frame:00000000000099DA                 db  41h ; A
.eh_frame:00000000000099DB                 db  0Eh
.eh_frame:00000000000099DC                 db  18h
.eh_frame:00000000000099DD                 db  83h
.eh_frame:00000000000099DE                 db    3
.eh_frame:00000000000099DF                 db  4Dh ; M
.eh_frame:00000000000099E0                 db  0Eh
.eh_frame:00000000000099E1                 db  20h
.eh_frame:00000000000099E2                 db  49h ; I
.eh_frame:00000000000099E3                 db  0Eh
.eh_frame:00000000000099E4                 db  18h
.eh_frame:00000000000099E5                 db  47h ; G
.eh_frame:00000000000099E6                 db  0Eh
.eh_frame:00000000000099E7                 db  10h
.eh_frame:00000000000099E8                 db  41h ; A
.eh_frame:00000000000099E9                 db  0Eh
.eh_frame:00000000000099EA                 db    8
.eh_frame:00000000000099EB                 db    0
.eh_frame:00000000000099EC                 db  18h
.eh_frame:00000000000099ED                 db    0
.eh_frame:00000000000099EE                 db    0
.eh_frame:00000000000099EF                 db    0
.eh_frame:00000000000099F0                 db 0E0h
.eh_frame:00000000000099F1                 db  0Ch
.eh_frame:00000000000099F2                 db    0
.eh_frame:00000000000099F3                 db    0
.eh_frame:00000000000099F4                 db 0DCh
.eh_frame:00000000000099F5                 db 0CBh
.eh_frame:00000000000099F6                 db 0FFh
.eh_frame:00000000000099F7                 db 0FFh
.eh_frame:00000000000099F8                 db  13h
.eh_frame:00000000000099F9                 db    0
.eh_frame:00000000000099FA                 db    0
.eh_frame:00000000000099FB                 db    0
.eh_frame:00000000000099FC                 db    0
.eh_frame:00000000000099FD                 db  41h ; A
.eh_frame:00000000000099FE                 db  0Eh
.eh_frame:00000000000099FF                 db  10h
.eh_frame:0000000000009A00                 db  83h
.eh_frame:0000000000009A01                 db    2
.eh_frame:0000000000009A02                 db  50h ; P
.eh_frame:0000000000009A03                 db  0Eh
.eh_frame:0000000000009A04                 db    8
.eh_frame:0000000000009A05                 db    0
.eh_frame:0000000000009A06                 db    0
.eh_frame:0000000000009A07                 db    0
.eh_frame:0000000000009A08                 db  14h
.eh_frame:0000000000009A09                 db    0
.eh_frame:0000000000009A0A                 db    0
.eh_frame:0000000000009A0B                 db    0
.eh_frame:0000000000009A0C                 db 0FCh
.eh_frame:0000000000009A0D                 db  0Ch
.eh_frame:0000000000009A0E                 db    0
.eh_frame:0000000000009A0F                 db    0
.eh_frame:0000000000009A10                 db 0E0h
.eh_frame:0000000000009A11                 db 0CBh
.eh_frame:0000000000009A12                 db 0FFh
.eh_frame:0000000000009A13                 db 0FFh
.eh_frame:0000000000009A14                 db  35h ; 5
.eh_frame:0000000000009A15                 db    0
.eh_frame:0000000000009A16                 db    0
.eh_frame:0000000000009A17                 db    0
.eh_frame:0000000000009A18                 db    0
.eh_frame:0000000000009A19                 db  4Bh ; K
.eh_frame:0000000000009A1A                 db  0Eh
.eh_frame:0000000000009A1B                 db  10h
.eh_frame:0000000000009A1C                 db    0
.eh_frame:0000000000009A1D                 db    0
.eh_frame:0000000000009A1E                 db    0
.eh_frame:0000000000009A1F                 db    0
.eh_frame:0000000000009A20                 db  38h ; 8
.eh_frame:0000000000009A21                 db    0
.eh_frame:0000000000009A22                 db    0
.eh_frame:0000000000009A23                 db    0
.eh_frame:0000000000009A24                 db  14h
.eh_frame:0000000000009A25                 db  0Dh
.eh_frame:0000000000009A26                 db    0
.eh_frame:0000000000009A27                 db    0
.eh_frame:0000000000009A28                 db    8
.eh_frame:0000000000009A29                 db 0CCh
.eh_frame:0000000000009A2A                 db 0FFh
.eh_frame:0000000000009A2B                 db 0FFh
.eh_frame:0000000000009A2C                 db 0BAh
.eh_frame:0000000000009A2D                 db    0
.eh_frame:0000000000009A2E                 db    0
.eh_frame:0000000000009A2F                 db    0
.eh_frame:0000000000009A30                 db    0
.eh_frame:0000000000009A31                 db  42h ; B
.eh_frame:0000000000009A32                 db  0Eh
.eh_frame:0000000000009A33                 db  10h
.eh_frame:0000000000009A34                 db  8Eh
.eh_frame:0000000000009A35                 db    2
.eh_frame:0000000000009A36                 db  42h ; B
.eh_frame:0000000000009A37                 db  0Eh
.eh_frame:0000000000009A38                 db  18h
.eh_frame:0000000000009A39                 db  8Dh
.eh_frame:0000000000009A3A                 db    3
.eh_frame:0000000000009A3B                 db  45h ; E
.eh_frame:0000000000009A3C                 db  0Eh
.eh_frame:0000000000009A3D                 db  20h
.eh_frame:0000000000009A3E                 db  8Ch
.eh_frame:0000000000009A3F                 db    4
.eh_frame:0000000000009A40                 db  41h ; A
.eh_frame:0000000000009A41                 db  0Eh
.eh_frame:0000000000009A42                 db  28h ; (
.eh_frame:0000000000009A43                 db  86h
.eh_frame:0000000000009A44                 db    5
.eh_frame:0000000000009A45                 db  44h ; D
.eh_frame:0000000000009A46                 db  0Eh
.eh_frame:0000000000009A47                 db  30h ; 0
.eh_frame:0000000000009A48                 db  83h
.eh_frame:0000000000009A49                 db    6
.eh_frame:0000000000009A4A                 db    2
.eh_frame:0000000000009A4B                 db  99h
.eh_frame:0000000000009A4C                 db  0Eh
.eh_frame:0000000000009A4D                 db  28h ; (
.eh_frame:0000000000009A4E                 db  41h ; A
.eh_frame:0000000000009A4F                 db  0Eh
.eh_frame:0000000000009A50                 db  20h
.eh_frame:0000000000009A51                 db  42h ; B
.eh_frame:0000000000009A52                 db  0Eh
.eh_frame:0000000000009A53                 db  18h
.eh_frame:0000000000009A54                 db  42h ; B
.eh_frame:0000000000009A55                 db  0Eh
.eh_frame:0000000000009A56                 db  10h
.eh_frame:0000000000009A57                 db  42h ; B
.eh_frame:0000000000009A58                 db  0Eh
.eh_frame:0000000000009A59                 db    8
.eh_frame:0000000000009A5A                 db    0
.eh_frame:0000000000009A5B                 db    0
.eh_frame:0000000000009A5C                 db  38h ; 8
.eh_frame:0000000000009A5D                 db    0
.eh_frame:0000000000009A5E                 db    0
.eh_frame:0000000000009A5F                 db    0
.eh_frame:0000000000009A60                 db  50h ; P
.eh_frame:0000000000009A61                 db  0Dh
.eh_frame:0000000000009A62                 db    0
.eh_frame:0000000000009A63                 db    0
.eh_frame:0000000000009A64                 db  8Ch
.eh_frame:0000000000009A65                 db 0CCh
.eh_frame:0000000000009A66                 db 0FFh
.eh_frame:0000000000009A67                 db 0FFh
.eh_frame:0000000000009A68                 db  44h ; D
.eh_frame:0000000000009A69                 db    0
.eh_frame:0000000000009A6A                 db    0
.eh_frame:0000000000009A6B                 db    0
.eh_frame:0000000000009A6C                 db    0
.eh_frame:0000000000009A6D                 db  42h ; B
.eh_frame:0000000000009A6E                 db  0Eh
.eh_frame:0000000000009A6F                 db  10h
.eh_frame:0000000000009A70                 db  8Eh
.eh_frame:0000000000009A71                 db    2
.eh_frame:0000000000009A72                 db  42h ; B
.eh_frame:0000000000009A73                 db  0Eh
.eh_frame:0000000000009A74                 db  18h
.eh_frame:0000000000009A75                 db  8Dh
.eh_frame:0000000000009A76                 db    3
.eh_frame:0000000000009A77                 db  45h ; E
.eh_frame:0000000000009A78                 db  0Eh
.eh_frame:0000000000009A79                 db  20h
.eh_frame:0000000000009A7A                 db  8Ch
.eh_frame:0000000000009A7B                 db    4
.eh_frame:0000000000009A7C                 db  41h ; A
.eh_frame:0000000000009A7D                 db  0Eh
.eh_frame:0000000000009A7E                 db  28h ; (
.eh_frame:0000000000009A7F                 db  86h
.eh_frame:0000000000009A80                 db    5
.eh_frame:0000000000009A81                 db  44h ; D
.eh_frame:0000000000009A82                 db  0Eh
.eh_frame:0000000000009A83                 db  30h ; 0
.eh_frame:0000000000009A84                 db  83h
.eh_frame:0000000000009A85                 db    6
.eh_frame:0000000000009A86                 db  6Bh ; k
.eh_frame:0000000000009A87                 db  0Eh
.eh_frame:0000000000009A88                 db  28h ; (
.eh_frame:0000000000009A89                 db  44h ; D
.eh_frame:0000000000009A8A                 db  0Eh
.eh_frame:0000000000009A8B                 db  20h
.eh_frame:0000000000009A8C                 db  42h ; B
.eh_frame:0000000000009A8D                 db  0Eh
.eh_frame:0000000000009A8E                 db  18h
.eh_frame:0000000000009A8F                 db  42h ; B
.eh_frame:0000000000009A90                 db  0Eh
.eh_frame:0000000000009A91                 db  10h
.eh_frame:0000000000009A92                 db  42h ; B
.eh_frame:0000000000009A93                 db  0Eh
.eh_frame:0000000000009A94                 db    8
.eh_frame:0000000000009A95                 db    0
.eh_frame:0000000000009A96                 db    0
.eh_frame:0000000000009A97                 db    0
.eh_frame:0000000000009A98                 db  3Ch ; <
.eh_frame:0000000000009A99                 db    0
.eh_frame:0000000000009A9A                 db    0
.eh_frame:0000000000009A9B                 db    0
.eh_frame:0000000000009A9C                 db  8Ch
.eh_frame:0000000000009A9D                 db  0Dh
.eh_frame:0000000000009A9E                 db    0
.eh_frame:0000000000009A9F                 db    0
.eh_frame:0000000000009AA0                 db 0A0h
.eh_frame:0000000000009AA1                 db 0CCh
.eh_frame:0000000000009AA2                 db 0FFh
.eh_frame:0000000000009AA3                 db 0FFh
.eh_frame:0000000000009AA4                 db  46h ; F
.eh_frame:0000000000009AA5                 db    0
.eh_frame:0000000000009AA6                 db    0
.eh_frame:0000000000009AA7                 db    0
.eh_frame:0000000000009AA8                 db    0
.eh_frame:0000000000009AA9                 db  42h ; B
.eh_frame:0000000000009AAA                 db  0Eh
.eh_frame:0000000000009AAB                 db  10h
.eh_frame:0000000000009AAC                 db  8Eh
.eh_frame:0000000000009AAD                 db    2
.eh_frame:0000000000009AAE                 db  42h ; B
.eh_frame:0000000000009AAF                 db  0Eh
.eh_frame:0000000000009AB0                 db  18h
.eh_frame:0000000000009AB1                 db  8Dh
.eh_frame:0000000000009AB2                 db    3
.eh_frame:0000000000009AB3                 db  45h ; E
.eh_frame:0000000000009AB4                 db  0Eh
.eh_frame:0000000000009AB5                 db  20h
.eh_frame:0000000000009AB6                 db  8Ch
.eh_frame:0000000000009AB7                 db    4
.eh_frame:0000000000009AB8                 db  41h ; A
.eh_frame:0000000000009AB9                 db  0Eh
.eh_frame:0000000000009ABA                 db  28h ; (
.eh_frame:0000000000009ABB                 db  86h
.eh_frame:0000000000009ABC                 db    5
.eh_frame:0000000000009ABD                 db  44h ; D
.eh_frame:0000000000009ABE                 db  0Eh
.eh_frame:0000000000009ABF                 db  30h ; 0
.eh_frame:0000000000009AC0                 db  83h
.eh_frame:0000000000009AC1                 db    6
.eh_frame:0000000000009AC2                 db  6Dh ; m
.eh_frame:0000000000009AC3                 db  0Eh
.eh_frame:0000000000009AC4                 db  28h ; (
.eh_frame:0000000000009AC5                 db  44h ; D
.eh_frame:0000000000009AC6                 db  0Eh
.eh_frame:0000000000009AC7                 db  20h
.eh_frame:0000000000009AC8                 db  42h ; B
.eh_frame:0000000000009AC9                 db  0Eh
.eh_frame:0000000000009ACA                 db  18h
.eh_frame:0000000000009ACB                 db  42h ; B
.eh_frame:0000000000009ACC                 db  0Eh
.eh_frame:0000000000009ACD                 db  10h
.eh_frame:0000000000009ACE                 db  42h ; B
.eh_frame:0000000000009ACF                 db  0Eh
.eh_frame:0000000000009AD0                 db    8
.eh_frame:0000000000009AD1                 db    0
.eh_frame:0000000000009AD2                 db    0
.eh_frame:0000000000009AD3                 db    0
.eh_frame:0000000000009AD4                 db    0
.eh_frame:0000000000009AD5                 db    0
.eh_frame:0000000000009AD6                 db    0
.eh_frame:0000000000009AD7                 db    0
.eh_frame:0000000000009AD8                 db  4Ch ; L
.eh_frame:0000000000009AD9                 db    0
.eh_frame:0000000000009ADA                 db    0
.eh_frame:0000000000009ADB                 db    0
.eh_frame:0000000000009ADC                 db 0CCh
.eh_frame:0000000000009ADD                 db  0Dh
.eh_frame:0000000000009ADE                 db    0
.eh_frame:0000000000009ADF                 db    0
.eh_frame:0000000000009AE0                 db 0B0h
.eh_frame:0000000000009AE1                 db 0CCh
.eh_frame:0000000000009AE2                 db 0FFh
.eh_frame:0000000000009AE3                 db 0FFh
.eh_frame:0000000000009AE4                 db  1Ch
.eh_frame:0000000000009AE5                 db    4
.eh_frame:0000000000009AE6                 db    0
.eh_frame:0000000000009AE7                 db    0
.eh_frame:0000000000009AE8                 db    0
.eh_frame:0000000000009AE9                 db  42h ; B
.eh_frame:0000000000009AEA                 db  0Eh
.eh_frame:0000000000009AEB                 db  10h
.eh_frame:0000000000009AEC                 db  8Fh
.eh_frame:0000000000009AED                 db    2
.eh_frame:0000000000009AEE                 db  42h ; B
.eh_frame:0000000000009AEF                 db  0Eh
.eh_frame:0000000000009AF0                 db  18h
.eh_frame:0000000000009AF1                 db  8Eh
.eh_frame:0000000000009AF2                 db    3
.eh_frame:0000000000009AF3                 db  42h ; B
.eh_frame:0000000000009AF4                 db  0Eh
.eh_frame:0000000000009AF5                 db  20h
.eh_frame:0000000000009AF6                 db  8Dh
.eh_frame:0000000000009AF7                 db    4
.eh_frame:0000000000009AF8                 db  42h ; B
.eh_frame:0000000000009AF9                 db  0Eh
.eh_frame:0000000000009AFA                 db  28h ; (
.eh_frame:0000000000009AFB                 db  8Ch
.eh_frame:0000000000009AFC                 db    5
.eh_frame:0000000000009AFD                 db  41h ; A
.eh_frame:0000000000009AFE                 db  0Eh
.eh_frame:0000000000009AFF                 db  30h ; 0
.eh_frame:0000000000009B00                 db  86h
.eh_frame:0000000000009B01                 db    6
.eh_frame:0000000000009B02                 db  41h ; A
.eh_frame:0000000000009B03                 db  0Eh
.eh_frame:0000000000009B04                 db  38h ; 8
.eh_frame:0000000000009B05                 db  83h
.eh_frame:0000000000009B06                 db    7
.eh_frame:0000000000009B07                 db  44h ; D
.eh_frame:0000000000009B08                 db  0Eh
.eh_frame:0000000000009B09                 db  60h ; `
.eh_frame:0000000000009B0A                 db    2
.eh_frame:0000000000009B0B                 db 0E9h
.eh_frame:0000000000009B0C                 db  0Ah
.eh_frame:0000000000009B0D                 db  0Eh
.eh_frame:0000000000009B0E                 db  38h ; 8
.eh_frame:0000000000009B0F                 db  41h ; A
.eh_frame:0000000000009B10                 db  0Eh
.eh_frame:0000000000009B11                 db  30h ; 0
.eh_frame:0000000000009B12                 db  41h ; A
.eh_frame:0000000000009B13                 db  0Eh
.eh_frame:0000000000009B14                 db  28h ; (
.eh_frame:0000000000009B15                 db  42h ; B
.eh_frame:0000000000009B16                 db  0Eh
.eh_frame:0000000000009B17                 db  20h
.eh_frame:0000000000009B18                 db  42h ; B
.eh_frame:0000000000009B19                 db  0Eh
.eh_frame:0000000000009B1A                 db  18h
.eh_frame:0000000000009B1B                 db  42h ; B
.eh_frame:0000000000009B1C                 db  0Eh
.eh_frame:0000000000009B1D                 db  10h
.eh_frame:0000000000009B1E                 db  42h ; B
.eh_frame:0000000000009B1F                 db  0Eh
.eh_frame:0000000000009B20                 db    8
.eh_frame:0000000000009B21                 db  47h ; G
.eh_frame:0000000000009B22                 db  0Bh
.eh_frame:0000000000009B23                 db    0
.eh_frame:0000000000009B24                 db    0
.eh_frame:0000000000009B25                 db    0
.eh_frame:0000000000009B26                 db    0
.eh_frame:0000000000009B27                 db    0
.eh_frame:0000000000009B28                 db  34h ; 4
.eh_frame:0000000000009B29                 db    0
.eh_frame:0000000000009B2A                 db    0
.eh_frame:0000000000009B2B                 db    0
.eh_frame:0000000000009B2C                 db  1Ch
.eh_frame:0000000000009B2D                 db  0Eh
.eh_frame:0000000000009B2E                 db    0
.eh_frame:0000000000009B2F                 db    0
.eh_frame:0000000000009B30                 db  80h
.eh_frame:0000000000009B31                 db 0D0h
.eh_frame:0000000000009B32                 db 0FFh
.eh_frame:0000000000009B33                 db 0FFh
.eh_frame:0000000000009B34                 db  7Bh ; {
.eh_frame:0000000000009B35                 db    0
.eh_frame:0000000000009B36                 db    0
.eh_frame:0000000000009B37                 db    0
.eh_frame:0000000000009B38                 db    0
.eh_frame:0000000000009B39                 db  42h ; B
.eh_frame:0000000000009B3A                 db  0Eh
.eh_frame:0000000000009B3B                 db  10h
.eh_frame:0000000000009B3C                 db  8Ch
.eh_frame:0000000000009B3D                 db    2
.eh_frame:0000000000009B3E                 db  41h ; A
.eh_frame:0000000000009B3F                 db  0Eh
.eh_frame:0000000000009B40                 db  18h
.eh_frame:0000000000009B41                 db  86h
.eh_frame:0000000000009B42                 db    3
.eh_frame:0000000000009B43                 db  41h ; A
.eh_frame:0000000000009B44                 db  0Eh
.eh_frame:0000000000009B45                 db  20h
.eh_frame:0000000000009B46                 db  83h
.eh_frame:0000000000009B47                 db    4
.eh_frame:0000000000009B48                 db  7Dh ; }
.eh_frame:0000000000009B49                 db  0Ah
.eh_frame:0000000000009B4A                 db  0Eh
.eh_frame:0000000000009B4B                 db  18h
.eh_frame:0000000000009B4C                 db  41h ; A
.eh_frame:0000000000009B4D                 db  0Eh
.eh_frame:0000000000009B4E                 db  10h
.eh_frame:0000000000009B4F                 db  42h ; B
.eh_frame:0000000000009B50                 db  0Eh
.eh_frame:0000000000009B51                 db    8
.eh_frame:0000000000009B52                 db  44h ; D
.eh_frame:0000000000009B53                 db  0Bh
.eh_frame:0000000000009B54                 db  60h ; `
.eh_frame:0000000000009B55                 db  0Ah
.eh_frame:0000000000009B56                 db  0Eh
.eh_frame:0000000000009B57                 db  18h
.eh_frame:0000000000009B58                 db  41h ; A
.eh_frame:0000000000009B59                 db  0Eh
.eh_frame:0000000000009B5A                 db  10h
.eh_frame:0000000000009B5B                 db  42h ; B
.eh_frame:0000000000009B5C                 db  0Eh
.eh_frame:0000000000009B5D                 db    8
.eh_frame:0000000000009B5E                 db  45h ; E
.eh_frame:0000000000009B5F                 db  0Bh
.eh_frame:0000000000009B60                 db  34h ; 4
.eh_frame:0000000000009B61                 db    0
.eh_frame:0000000000009B62                 db    0
.eh_frame:0000000000009B63                 db    0
.eh_frame:0000000000009B64                 db  54h ; T
.eh_frame:0000000000009B65                 db  0Eh
.eh_frame:0000000000009B66                 db    0
.eh_frame:0000000000009B67                 db    0
.eh_frame:0000000000009B68                 db 0C8h
.eh_frame:0000000000009B69                 db 0D0h
.eh_frame:0000000000009B6A                 db 0FFh
.eh_frame:0000000000009B6B                 db 0FFh
.eh_frame:0000000000009B6C                 db  7Eh ; ~
.eh_frame:0000000000009B6D                 db    2
.eh_frame:0000000000009B6E                 db    0
.eh_frame:0000000000009B6F                 db    0
.eh_frame:0000000000009B70                 db    0
.eh_frame:0000000000009B71                 db  42h ; B
.eh_frame:0000000000009B72                 db  0Eh
.eh_frame:0000000000009B73                 db  10h
.eh_frame:0000000000009B74                 db  8Ch
.eh_frame:0000000000009B75                 db    2
.eh_frame:0000000000009B76                 db  41h ; A
.eh_frame:0000000000009B77                 db  0Eh
.eh_frame:0000000000009B78                 db  18h
.eh_frame:0000000000009B79                 db  86h
.eh_frame:0000000000009B7A                 db    3
.eh_frame:0000000000009B7B                 db  43h ; C
.eh_frame:0000000000009B7C                 db  0Eh
.eh_frame:0000000000009B7D                 db  20h
.eh_frame:0000000000009B7E                 db  83h
.eh_frame:0000000000009B7F                 db    4
.eh_frame:0000000000009B80                 db  44h ; D
.eh_frame:0000000000009B81                 db  0Eh
.eh_frame:0000000000009B82                 db  70h ; p
.eh_frame:0000000000009B83                 db    2
.eh_frame:0000000000009B84                 db 0F0h
.eh_frame:0000000000009B85                 db  0Ah
.eh_frame:0000000000009B86                 db  0Eh
.eh_frame:0000000000009B87                 db  20h
.eh_frame:0000000000009B88                 db  41h ; A
.eh_frame:0000000000009B89                 db  0Eh
.eh_frame:0000000000009B8A                 db  18h
.eh_frame:0000000000009B8B                 db  41h ; A
.eh_frame:0000000000009B8C                 db  0Eh
.eh_frame:0000000000009B8D                 db  10h
.eh_frame:0000000000009B8E                 db  42h ; B
.eh_frame:0000000000009B8F                 db  0Eh
.eh_frame:0000000000009B90                 db    8
.eh_frame:0000000000009B91                 db  42h ; B
.eh_frame:0000000000009B92                 db  0Bh
.eh_frame:0000000000009B93                 db    0
.eh_frame:0000000000009B94                 db    0
.eh_frame:0000000000009B95                 db    0
.eh_frame:0000000000009B96                 db    0
.eh_frame:0000000000009B97                 db    0
.eh_frame:0000000000009B98                 db  1Ch
.eh_frame:0000000000009B99                 db    0
.eh_frame:0000000000009B9A                 db    0
.eh_frame:0000000000009B9B                 db    0
.eh_frame:0000000000009B9C                 db  8Ch
.eh_frame:0000000000009B9D                 db  0Eh
.eh_frame:0000000000009B9E                 db    0
.eh_frame:0000000000009B9F                 db    0
.eh_frame:0000000000009BA0                 db  10h
.eh_frame:0000000000009BA1                 db 0D3h
.eh_frame:0000000000009BA2                 db 0FFh
.eh_frame:0000000000009BA3                 db 0FFh
.eh_frame:0000000000009BA4                 db  40h ; @
.eh_frame:0000000000009BA5                 db    0
.eh_frame:0000000000009BA6                 db    0
.eh_frame:0000000000009BA7                 db    0
.eh_frame:0000000000009BA8                 db    0
.eh_frame:0000000000009BA9                 db  44h ; D
.eh_frame:0000000000009BAA                 db  0Eh
.eh_frame:0000000000009BAB                 db  10h
.eh_frame:0000000000009BAC                 db  83h
.eh_frame:0000000000009BAD                 db    2
.eh_frame:0000000000009BAE                 db  5Ah ; Z
.eh_frame:0000000000009BAF                 db  0Ah
.eh_frame:0000000000009BB0                 db  0Eh
.eh_frame:0000000000009BB1                 db    8
.eh_frame:0000000000009BB2                 db  4Ah ; J
.eh_frame:0000000000009BB3                 db  0Bh
.eh_frame:0000000000009BB4                 db  53h ; S
.eh_frame:0000000000009BB5                 db  0Eh
.eh_frame:0000000000009BB6                 db    8
.eh_frame:0000000000009BB7                 db    0
.eh_frame:0000000000009BB8                 db  2Ch ; ,
.eh_frame:0000000000009BB9                 db    0
.eh_frame:0000000000009BBA                 db    0
.eh_frame:0000000000009BBB                 db    0
.eh_frame:0000000000009BBC                 db 0ACh
.eh_frame:0000000000009BBD                 db  0Eh
.eh_frame:0000000000009BBE                 db    0
.eh_frame:0000000000009BBF                 db    0
.eh_frame:0000000000009BC0                 db  30h ; 0
.eh_frame:0000000000009BC1                 db 0D3h
.eh_frame:0000000000009BC2                 db 0FFh
.eh_frame:0000000000009BC3                 db 0FFh
.eh_frame:0000000000009BC4                 db  57h ; W
.eh_frame:0000000000009BC5                 db    0
.eh_frame:0000000000009BC6                 db    0
.eh_frame:0000000000009BC7                 db    0
.eh_frame:0000000000009BC8                 db    0
.eh_frame:0000000000009BC9                 db  63h ; c
.eh_frame:0000000000009BCA                 db  0Eh
.eh_frame:0000000000009BCB                 db  10h
.eh_frame:0000000000009BCC                 db  8Ch
.eh_frame:0000000000009BCD                 db    2
.eh_frame:0000000000009BCE                 db  41h ; A
.eh_frame:0000000000009BCF                 db  0Eh
.eh_frame:0000000000009BD0                 db  18h
.eh_frame:0000000000009BD1                 db  86h
.eh_frame:0000000000009BD2                 db    3
.eh_frame:0000000000009BD3                 db  44h ; D
.eh_frame:0000000000009BD4                 db  0Eh
.eh_frame:0000000000009BD5                 db  20h
.eh_frame:0000000000009BD6                 db  83h
.eh_frame:0000000000009BD7                 db    4
.eh_frame:0000000000009BD8                 db  6Bh ; k
.eh_frame:0000000000009BD9                 db  0Eh
.eh_frame:0000000000009BDA                 db  18h
.eh_frame:0000000000009BDB                 db  41h ; A
.eh_frame:0000000000009BDC                 db  0Eh
.eh_frame:0000000000009BDD                 db  10h
.eh_frame:0000000000009BDE                 db  42h ; B
.eh_frame:0000000000009BDF                 db  0Eh
.eh_frame:0000000000009BE0                 db    8
.eh_frame:0000000000009BE1                 db    0
.eh_frame:0000000000009BE2                 db    0
.eh_frame:0000000000009BE3                 db    0
.eh_frame:0000000000009BE4                 db    0
.eh_frame:0000000000009BE5                 db    0
.eh_frame:0000000000009BE6                 db    0
.eh_frame:0000000000009BE7                 db    0
.eh_frame:0000000000009BE8                 db  3Ch ; <
.eh_frame:0000000000009BE9                 db    0
.eh_frame:0000000000009BEA                 db    0
.eh_frame:0000000000009BEB                 db    0
.eh_frame:0000000000009BEC                 db 0DCh
.eh_frame:0000000000009BED                 db  0Eh
.eh_frame:0000000000009BEE                 db    0
.eh_frame:0000000000009BEF                 db    0
.eh_frame:0000000000009BF0                 db  60h ; `
.eh_frame:0000000000009BF1                 db 0D3h
.eh_frame:0000000000009BF2                 db 0FFh
.eh_frame:0000000000009BF3                 db 0FFh
.eh_frame:0000000000009BF4                 db  83h
.eh_frame:0000000000009BF5                 db    0
.eh_frame:0000000000009BF6                 db    0
.eh_frame:0000000000009BF7                 db    0
.eh_frame:0000000000009BF8                 db    0
.eh_frame:0000000000009BF9                 db  42h ; B
.eh_frame:0000000000009BFA                 db  0Eh
.eh_frame:0000000000009BFB                 db  10h
.eh_frame:0000000000009BFC                 db  8Dh
.eh_frame:0000000000009BFD                 db    2
.eh_frame:0000000000009BFE                 db  42h ; B
.eh_frame:0000000000009BFF                 db  0Eh
.eh_frame:0000000000009C00                 db  18h
.eh_frame:0000000000009C01                 db  8Ch
.eh_frame:0000000000009C02                 db    3
.eh_frame:0000000000009C03                 db  44h ; D
.eh_frame:0000000000009C04                 db  0Eh
.eh_frame:0000000000009C05                 db  20h
.eh_frame:0000000000009C06                 db  86h
.eh_frame:0000000000009C07                 db    4
.eh_frame:0000000000009C08                 db  41h ; A
.eh_frame:0000000000009C09                 db  0Eh
.eh_frame:0000000000009C0A                 db  28h ; (
.eh_frame:0000000000009C0B                 db  83h
.eh_frame:0000000000009C0C                 db    5
.eh_frame:0000000000009C0D                 db  4Ah ; J
.eh_frame:0000000000009C0E                 db  0Eh
.eh_frame:0000000000009C0F                 db  40h ; @
.eh_frame:0000000000009C10                 db    2
.eh_frame:0000000000009C11                 db  64h ; d
.eh_frame:0000000000009C12                 db  0Ah
.eh_frame:0000000000009C13                 db  0Eh
.eh_frame:0000000000009C14                 db  28h ; (
.eh_frame:0000000000009C15                 db  41h ; A
.eh_frame:0000000000009C16                 db  0Eh
.eh_frame:0000000000009C17                 db  20h
.eh_frame:0000000000009C18                 db  41h ; A
.eh_frame:0000000000009C19                 db  0Eh
.eh_frame:0000000000009C1A                 db  18h
.eh_frame:0000000000009C1B                 db  42h ; B
.eh_frame:0000000000009C1C                 db  0Eh
.eh_frame:0000000000009C1D                 db  10h
.eh_frame:0000000000009C1E                 db  42h ; B
.eh_frame:0000000000009C1F                 db  0Eh
.eh_frame:0000000000009C20                 db    8
.eh_frame:0000000000009C21                 db  41h ; A
.eh_frame:0000000000009C22                 db  0Bh
.eh_frame:0000000000009C23                 db    0
.eh_frame:0000000000009C24                 db    0
.eh_frame:0000000000009C25                 db    0
.eh_frame:0000000000009C26                 db    0
.eh_frame:0000000000009C27                 db    0
.eh_frame:0000000000009C28                 db  4Ch ; L
.eh_frame:0000000000009C29                 db    0
.eh_frame:0000000000009C2A                 db    0
.eh_frame:0000000000009C2B                 db    0
.eh_frame:0000000000009C2C                 db  1Ch
.eh_frame:0000000000009C2D                 db  0Fh
.eh_frame:0000000000009C2E                 db    0
.eh_frame:0000000000009C2F                 db    0
.eh_frame:0000000000009C30                 db 0B0h
.eh_frame:0000000000009C31                 db 0D3h
.eh_frame:0000000000009C32                 db 0FFh
.eh_frame:0000000000009C33                 db 0FFh
.eh_frame:0000000000009C34                 db  7Dh ; }
.eh_frame:0000000000009C35                 db    0
.eh_frame:0000000000009C36                 db    0
.eh_frame:0000000000009C37                 db    0
.eh_frame:0000000000009C38                 db    0
.eh_frame:0000000000009C39                 db  42h ; B
.eh_frame:0000000000009C3A                 db  0Eh
.eh_frame:0000000000009C3B                 db  10h
.eh_frame:0000000000009C3C                 db  8Ch
.eh_frame:0000000000009C3D                 db    2
.eh_frame:0000000000009C3E                 db  41h ; A
.eh_frame:0000000000009C3F                 db  0Eh
.eh_frame:0000000000009C40                 db  18h
.eh_frame:0000000000009C41                 db  86h
.eh_frame:0000000000009C42                 db    3
.eh_frame:0000000000009C43                 db  44h ; D
.eh_frame:0000000000009C44                 db  0Eh
.eh_frame:0000000000009C45                 db  20h
.eh_frame:0000000000009C46                 db  83h
.eh_frame:0000000000009C47                 db    4
.eh_frame:0000000000009C48                 db  69h ; i
.eh_frame:0000000000009C49                 db  0Ah
.eh_frame:0000000000009C4A                 db  0Eh
.eh_frame:0000000000009C4B                 db  18h
.eh_frame:0000000000009C4C                 db  41h ; A
.eh_frame:0000000000009C4D                 db  0Eh
.eh_frame:0000000000009C4E                 db  10h
.eh_frame:0000000000009C4F                 db  42h ; B
.eh_frame:0000000000009C50                 db  0Eh
.eh_frame:0000000000009C51                 db    8
.eh_frame:0000000000009C52                 db  45h ; E
.eh_frame:0000000000009C53                 db  0Bh
.eh_frame:0000000000009C54                 db  55h ; U
.eh_frame:0000000000009C55                 db  0Ah
.eh_frame:0000000000009C56                 db  0Eh
.eh_frame:0000000000009C57                 db  18h
.eh_frame:0000000000009C58                 db  41h ; A
.eh_frame:0000000000009C59                 db  0Eh
.eh_frame:0000000000009C5A                 db  10h
.eh_frame:0000000000009C5B                 db  42h ; B
.eh_frame:0000000000009C5C                 db  0Eh
.eh_frame:0000000000009C5D                 db    8
.eh_frame:0000000000009C5E                 db  48h ; H
.eh_frame:0000000000009C5F                 db  0Bh
.eh_frame:0000000000009C60                 db  41h ; A
.eh_frame:0000000000009C61                 db  0Ah
.eh_frame:0000000000009C62                 db  0Eh
.eh_frame:0000000000009C63                 db  18h
.eh_frame:0000000000009C64                 db  46h ; F
.eh_frame:0000000000009C65                 db  0Eh
.eh_frame:0000000000009C66                 db  10h
.eh_frame:0000000000009C67                 db  42h ; B
.eh_frame:0000000000009C68                 db  0Eh
.eh_frame:0000000000009C69                 db    8
.eh_frame:0000000000009C6A                 db  47h ; G
.eh_frame:0000000000009C6B                 db  0Bh
.eh_frame:0000000000009C6C                 db  49h ; I
.eh_frame:0000000000009C6D                 db  0Eh
.eh_frame:0000000000009C6E                 db  18h
.eh_frame:0000000000009C6F                 db  41h ; A
.eh_frame:0000000000009C70                 db  0Eh
.eh_frame:0000000000009C71                 db  10h
.eh_frame:0000000000009C72                 db  42h ; B
.eh_frame:0000000000009C73                 db  0Eh
.eh_frame:0000000000009C74                 db    8
.eh_frame:0000000000009C75                 db    0
.eh_frame:0000000000009C76                 db    0
.eh_frame:0000000000009C77                 db    0
.eh_frame:0000000000009C78                 db  1Ch
.eh_frame:0000000000009C79                 db    0
.eh_frame:0000000000009C7A                 db    0
.eh_frame:0000000000009C7B                 db    0
.eh_frame:0000000000009C7C                 db  6Ch ; l
.eh_frame:0000000000009C7D                 db  0Fh
.eh_frame:0000000000009C7E                 db    0
.eh_frame:0000000000009C7F                 db    0
.eh_frame:0000000000009C80                 db 0E0h
.eh_frame:0000000000009C81                 db 0D3h
.eh_frame:0000000000009C82                 db 0FFh
.eh_frame:0000000000009C83                 db 0FFh
.eh_frame:0000000000009C84                 db  3Ch ; <
.eh_frame:0000000000009C85                 db    0
.eh_frame:0000000000009C86                 db    0
.eh_frame:0000000000009C87                 db    0
.eh_frame:0000000000009C88                 db    0
.eh_frame:0000000000009C89                 db  44h ; D
.eh_frame:0000000000009C8A                 db  0Eh
.eh_frame:0000000000009C8B                 db  10h
.eh_frame:0000000000009C8C                 db  61h ; a
.eh_frame:0000000000009C8D                 db  0Ah
.eh_frame:0000000000009C8E                 db  0Eh
.eh_frame:0000000000009C8F                 db    8
.eh_frame:0000000000009C90                 db  4Bh ; K
.eh_frame:0000000000009C91                 db  0Bh
.eh_frame:0000000000009C92                 db  4Bh ; K
.eh_frame:0000000000009C93                 db  0Eh
.eh_frame:0000000000009C94                 db    8
.eh_frame:0000000000009C95                 db    0
.eh_frame:0000000000009C96                 db    0
.eh_frame:0000000000009C97                 db    0
.eh_frame:0000000000009C98                 db  74h ; t
.eh_frame:0000000000009C99                 db    0
.eh_frame:0000000000009C9A                 db    0
.eh_frame:0000000000009C9B                 db    0
.eh_frame:0000000000009C9C                 db  8Ch
.eh_frame:0000000000009C9D                 db  0Fh
.eh_frame:0000000000009C9E                 db    0
.eh_frame:0000000000009C9F                 db    0
.eh_frame:0000000000009CA0                 db    0
.eh_frame:0000000000009CA1                 db 0D4h
.eh_frame:0000000000009CA2                 db 0FFh
.eh_frame:0000000000009CA3                 db 0FFh
.eh_frame:0000000000009CA4                 db 0B4h
.eh_frame:0000000000009CA5                 db    0
.eh_frame:0000000000009CA6                 db    0
.eh_frame:0000000000009CA7                 db    0
.eh_frame:0000000000009CA8                 db    0
.eh_frame:0000000000009CA9                 db  42h ; B
.eh_frame:0000000000009CAA                 db  0Eh
.eh_frame:0000000000009CAB                 db  10h
.eh_frame:0000000000009CAC                 db  8Fh
.eh_frame:0000000000009CAD                 db    2
.eh_frame:0000000000009CAE                 db  42h ; B
.eh_frame:0000000000009CAF                 db  0Eh
.eh_frame:0000000000009CB0                 db  18h
.eh_frame:0000000000009CB1                 db  8Eh
.eh_frame:0000000000009CB2                 db    3
.eh_frame:0000000000009CB3                 db  45h ; E
.eh_frame:0000000000009CB4                 db  0Eh
.eh_frame:0000000000009CB5                 db  20h
.eh_frame:0000000000009CB6                 db  8Dh
.eh_frame:0000000000009CB7                 db    4
.eh_frame:0000000000009CB8                 db  42h ; B
.eh_frame:0000000000009CB9                 db  0Eh
.eh_frame:0000000000009CBA                 db  28h ; (
.eh_frame:0000000000009CBB                 db  8Ch
.eh_frame:0000000000009CBC                 db    5
.eh_frame:0000000000009CBD                 db  44h ; D
.eh_frame:0000000000009CBE                 db  0Eh
.eh_frame:0000000000009CBF                 db  30h ; 0
.eh_frame:0000000000009CC0                 db  86h
.eh_frame:0000000000009CC1                 db    6
.eh_frame:0000000000009CC2                 db  41h ; A
.eh_frame:0000000000009CC3                 db  0Eh
.eh_frame:0000000000009CC4                 db  38h ; 8
.eh_frame:0000000000009CC5                 db  83h
.eh_frame:0000000000009CC6                 db    7
.eh_frame:0000000000009CC7                 db  4Ah ; J
.eh_frame:0000000000009CC8                 db  0Eh
.eh_frame:0000000000009CC9                 db  40h ; @
.eh_frame:0000000000009CCA                 db    2
.eh_frame:0000000000009CCB                 db  53h ; S
.eh_frame:0000000000009CCC                 db  0Ah
.eh_frame:0000000000009CCD                 db  0Eh
.eh_frame:0000000000009CCE                 db  38h ; 8
.eh_frame:0000000000009CCF                 db  41h ; A
.eh_frame:0000000000009CD0                 db  0Eh
.eh_frame:0000000000009CD1                 db  30h ; 0
.eh_frame:0000000000009CD2                 db  41h ; A
.eh_frame:0000000000009CD3                 db  0Eh
.eh_frame:0000000000009CD4                 db  28h ; (
.eh_frame:0000000000009CD5                 db  42h ; B
.eh_frame:0000000000009CD6                 db  0Eh
.eh_frame:0000000000009CD7                 db  20h
.eh_frame:0000000000009CD8                 db  42h ; B
.eh_frame:0000000000009CD9                 db  0Eh
.eh_frame:0000000000009CDA                 db  18h
.eh_frame:0000000000009CDB                 db  42h ; B
.eh_frame:0000000000009CDC                 db  0Eh
.eh_frame:0000000000009CDD                 db  10h
.eh_frame:0000000000009CDE                 db  42h ; B
.eh_frame:0000000000009CDF                 db  0Eh
.eh_frame:0000000000009CE0                 db    8
.eh_frame:0000000000009CE1                 db  49h ; I
.eh_frame:0000000000009CE2                 db  0Bh
.eh_frame:0000000000009CE3                 db  4Ch ; L
.eh_frame:0000000000009CE4                 db  0Ah
.eh_frame:0000000000009CE5                 db  0Eh
.eh_frame:0000000000009CE6                 db  38h ; 8
.eh_frame:0000000000009CE7                 db  41h ; A
.eh_frame:0000000000009CE8                 db  0Eh
.eh_frame:0000000000009CE9                 db  30h ; 0
.eh_frame:0000000000009CEA                 db  43h ; C
.eh_frame:0000000000009CEB                 db  0Eh
.eh_frame:0000000000009CEC                 db  28h ; (
.eh_frame:0000000000009CED                 db  42h ; B
.eh_frame:0000000000009CEE                 db  0Eh
.eh_frame:0000000000009CEF                 db  20h
.eh_frame:0000000000009CF0                 db  42h ; B
.eh_frame:0000000000009CF1                 db  0Eh
.eh_frame:0000000000009CF2                 db  18h
.eh_frame:0000000000009CF3                 db  42h ; B
.eh_frame:0000000000009CF4                 db  0Eh
.eh_frame:0000000000009CF5                 db  10h
.eh_frame:0000000000009CF6                 db  42h ; B
.eh_frame:0000000000009CF7                 db  0Eh
.eh_frame:0000000000009CF8                 db    8
.eh_frame:0000000000009CF9                 db  48h ; H
.eh_frame:0000000000009CFA                 db  0Bh
.eh_frame:0000000000009CFB                 db  44h ; D
.eh_frame:0000000000009CFC                 db  0Eh
.eh_frame:0000000000009CFD                 db  38h ; 8
.eh_frame:0000000000009CFE                 db  46h ; F
.eh_frame:0000000000009CFF                 db  0Eh
.eh_frame:0000000000009D00                 db  30h ; 0
.eh_frame:0000000000009D01                 db  41h ; A
.eh_frame:0000000000009D02                 db  0Eh
.eh_frame:0000000000009D03                 db  28h ; (
.eh_frame:0000000000009D04                 db  42h ; B
.eh_frame:0000000000009D05                 db  0Eh
.eh_frame:0000000000009D06                 db  20h
.eh_frame:0000000000009D07                 db  42h ; B
.eh_frame:0000000000009D08                 db  0Eh
.eh_frame:0000000000009D09                 db  18h
.eh_frame:0000000000009D0A                 db  42h ; B
.eh_frame:0000000000009D0B                 db  0Eh
.eh_frame:0000000000009D0C                 db  10h
.eh_frame:0000000000009D0D                 db  42h ; B
.eh_frame:0000000000009D0E                 db  0Eh
.eh_frame:0000000000009D0F                 db    8
.eh_frame:0000000000009D10                 db  48h ; H
.eh_frame:0000000000009D11                 db    0
.eh_frame:0000000000009D12                 db    0
.eh_frame:0000000000009D13                 db    0
.eh_frame:0000000000009D14                 db    4
.eh_frame:0000000000009D15                 db  10h
.eh_frame:0000000000009D16                 db    0
.eh_frame:0000000000009D17                 db    0
.eh_frame:0000000000009D18                 db  48h ; H
.eh_frame:0000000000009D19                 db 0D4h
.eh_frame:0000000000009D1A                 db 0FFh
.eh_frame:0000000000009D1B                 db 0FFh
.eh_frame:0000000000009D1C                 db 0A9h
.eh_frame:0000000000009D1D                 db    0
.eh_frame:0000000000009D1E                 db    0
.eh_frame:0000000000009D1F                 db    0
.eh_frame:0000000000009D20                 db    0
.eh_frame:0000000000009D21                 db  42h ; B
.eh_frame:0000000000009D22                 db  0Eh
.eh_frame:0000000000009D23                 db  10h
.eh_frame:0000000000009D24                 db  8Fh
.eh_frame:0000000000009D25                 db    2
.eh_frame:0000000000009D26                 db  42h ; B
.eh_frame:0000000000009D27                 db  0Eh
.eh_frame:0000000000009D28                 db  18h
.eh_frame:0000000000009D29                 db  8Eh
.eh_frame:0000000000009D2A                 db    3
.eh_frame:0000000000009D2B                 db  45h ; E
.eh_frame:0000000000009D2C                 db  0Eh
.eh_frame:0000000000009D2D                 db  20h
.eh_frame:0000000000009D2E                 db  8Dh
.eh_frame:0000000000009D2F                 db    4
.eh_frame:0000000000009D30                 db  42h ; B
.eh_frame:0000000000009D31                 db  0Eh
.eh_frame:0000000000009D32                 db  28h ; (
.eh_frame:0000000000009D33                 db  8Ch
.eh_frame:0000000000009D34                 db    5
.eh_frame:0000000000009D35                 db  44h ; D
.eh_frame:0000000000009D36                 db  0Eh
.eh_frame:0000000000009D37                 db  30h ; 0
.eh_frame:0000000000009D38                 db  86h
.eh_frame:0000000000009D39                 db    6
.eh_frame:0000000000009D3A                 db  41h ; A
.eh_frame:0000000000009D3B                 db  0Eh
.eh_frame:0000000000009D3C                 db  38h ; 8
.eh_frame:0000000000009D3D                 db  83h
.eh_frame:0000000000009D3E                 db    7
.eh_frame:0000000000009D3F                 db  4Ah ; J
.eh_frame:0000000000009D40                 db  0Eh
.eh_frame:0000000000009D41                 db  50h ; P
.eh_frame:0000000000009D42                 db    2
.eh_frame:0000000000009D43                 db  6Bh ; k
.eh_frame:0000000000009D44                 db  0Ah
.eh_frame:0000000000009D45                 db  0Eh
.eh_frame:0000000000009D46                 db  38h ; 8
.eh_frame:0000000000009D47                 db  43h ; C
.eh_frame:0000000000009D48                 db  0Eh
.eh_frame:0000000000009D49                 db  30h ; 0
.eh_frame:0000000000009D4A                 db  41h ; A
.eh_frame:0000000000009D4B                 db  0Eh
.eh_frame:0000000000009D4C                 db  28h ; (
.eh_frame:0000000000009D4D                 db  42h ; B
.eh_frame:0000000000009D4E                 db  0Eh
.eh_frame:0000000000009D4F                 db  20h
.eh_frame:0000000000009D50                 db  42h ; B
.eh_frame:0000000000009D51                 db  0Eh
.eh_frame:0000000000009D52                 db  18h
.eh_frame:0000000000009D53                 db  42h ; B
.eh_frame:0000000000009D54                 db  0Eh
.eh_frame:0000000000009D55                 db  10h
.eh_frame:0000000000009D56                 db  42h ; B
.eh_frame:0000000000009D57                 db  0Eh
.eh_frame:0000000000009D58                 db    8
.eh_frame:0000000000009D59                 db  47h ; G
.eh_frame:0000000000009D5A                 db  0Bh
.eh_frame:0000000000009D5B                 db    0
.eh_frame:0000000000009D5C                 db  40h ; @
.eh_frame:0000000000009D5D                 db    0
.eh_frame:0000000000009D5E                 db    0
.eh_frame:0000000000009D5F                 db    0
.eh_frame:0000000000009D60                 db  50h ; P
.eh_frame:0000000000009D61                 db  10h
.eh_frame:0000000000009D62                 db    0
.eh_frame:0000000000009D63                 db    0
.eh_frame:0000000000009D64                 db 0ACh
.eh_frame:0000000000009D65                 db 0D4h
.eh_frame:0000000000009D66                 db 0FFh
.eh_frame:0000000000009D67                 db 0FFh
.eh_frame:0000000000009D68                 db  5Eh ; ^
.eh_frame:0000000000009D69                 db    0
.eh_frame:0000000000009D6A                 db    0
.eh_frame:0000000000009D6B                 db    0
.eh_frame:0000000000009D6C                 db    0
.eh_frame:0000000000009D6D                 db  42h ; B
.eh_frame:0000000000009D6E                 db  0Eh
.eh_frame:0000000000009D6F                 db  10h
.eh_frame:0000000000009D70                 db  8Ch
.eh_frame:0000000000009D71                 db    2
.eh_frame:0000000000009D72                 db  41h ; A
.eh_frame:0000000000009D73                 db  0Eh
.eh_frame:0000000000009D74                 db  18h
.eh_frame:0000000000009D75                 db  86h
.eh_frame:0000000000009D76                 db    3
.eh_frame:0000000000009D77                 db  44h ; D
.eh_frame:0000000000009D78                 db  0Eh
.eh_frame:0000000000009D79                 db  20h
.eh_frame:0000000000009D7A                 db  83h
.eh_frame:0000000000009D7B                 db    4
.eh_frame:0000000000009D7C                 db  4Ah ; J
.eh_frame:0000000000009D7D                 db  0Eh
.eh_frame:0000000000009D7E                 db  30h ; 0
.eh_frame:0000000000009D7F                 db  62h ; b
.eh_frame:0000000000009D80                 db  0Ah
.eh_frame:0000000000009D81                 db  0Eh
.eh_frame:0000000000009D82                 db  20h
.eh_frame:0000000000009D83                 db  4Ah ; J
.eh_frame:0000000000009D84                 db  0Eh
.eh_frame:0000000000009D85                 db  18h
.eh_frame:0000000000009D86                 db  41h ; A
.eh_frame:0000000000009D87                 db  0Eh
.eh_frame:0000000000009D88                 db  10h
.eh_frame:0000000000009D89                 db  42h ; B
.eh_frame:0000000000009D8A                 db  0Eh
.eh_frame:0000000000009D8B                 db    8
.eh_frame:0000000000009D8C                 db  48h ; H
.eh_frame:0000000000009D8D                 db  0Bh
.eh_frame:0000000000009D8E                 db  4Fh ; O
.eh_frame:0000000000009D8F                 db  0Eh
.eh_frame:0000000000009D90                 db  20h
.eh_frame:0000000000009D91                 db  43h ; C
.eh_frame:0000000000009D92                 db  0Eh
.eh_frame:0000000000009D93                 db  18h
.eh_frame:0000000000009D94                 db  41h ; A
.eh_frame:0000000000009D95                 db  0Eh
.eh_frame:0000000000009D96                 db  10h
.eh_frame:0000000000009D97                 db  42h ; B
.eh_frame:0000000000009D98                 db  0Eh
.eh_frame:0000000000009D99                 db    8
.eh_frame:0000000000009D9A                 db    0
.eh_frame:0000000000009D9B                 db    0
.eh_frame:0000000000009D9C                 db    0
.eh_frame:0000000000009D9D                 db    0
.eh_frame:0000000000009D9E                 db    0
.eh_frame:0000000000009D9F                 db    0
.eh_frame:0000000000009DA0                 db  44h ; D
.eh_frame:0000000000009DA1                 db    0
.eh_frame:0000000000009DA2                 db    0
.eh_frame:0000000000009DA3                 db    0
.eh_frame:0000000000009DA4                 db  94h
.eh_frame:0000000000009DA5                 db  10h
.eh_frame:0000000000009DA6                 db    0
.eh_frame:0000000000009DA7                 db    0
.eh_frame:0000000000009DA8                 db 0C8h
.eh_frame:0000000000009DA9                 db 0D4h
.eh_frame:0000000000009DAA                 db 0FFh
.eh_frame:0000000000009DAB                 db 0FFh
.eh_frame:0000000000009DAC                 db  65h ; e
.eh_frame:0000000000009DAD                 db    0
.eh_frame:0000000000009DAE                 db    0
.eh_frame:0000000000009DAF                 db    0
.eh_frame:0000000000009DB0                 db    0
.eh_frame:0000000000009DB1                 db  42h ; B
.eh_frame:0000000000009DB2                 db  0Eh
.eh_frame:0000000000009DB3                 db  10h
.eh_frame:0000000000009DB4                 db  8Fh
.eh_frame:0000000000009DB5                 db    2
.eh_frame:0000000000009DB6                 db  42h ; B
.eh_frame:0000000000009DB7                 db  0Eh
.eh_frame:0000000000009DB8                 db  18h
.eh_frame:0000000000009DB9                 db  8Eh
.eh_frame:0000000000009DBA                 db    3
.eh_frame:0000000000009DBB                 db  45h ; E
.eh_frame:0000000000009DBC                 db  0Eh
.eh_frame:0000000000009DBD                 db  20h
.eh_frame:0000000000009DBE                 db  8Dh
.eh_frame:0000000000009DBF                 db    4
.eh_frame:0000000000009DC0                 db  42h ; B
.eh_frame:0000000000009DC1                 db  0Eh
.eh_frame:0000000000009DC2                 db  28h ; (
.eh_frame:0000000000009DC3                 db  8Ch
.eh_frame:0000000000009DC4                 db    5
.eh_frame:0000000000009DC5                 db  48h ; H
.eh_frame:0000000000009DC6                 db  0Eh
.eh_frame:0000000000009DC7                 db  30h ; 0
.eh_frame:0000000000009DC8                 db  86h
.eh_frame:0000000000009DC9                 db    6
.eh_frame:0000000000009DCA                 db  48h ; H
.eh_frame:0000000000009DCB                 db  0Eh
.eh_frame:0000000000009DCC                 db  38h ; 8
.eh_frame:0000000000009DCD                 db  83h
.eh_frame:0000000000009DCE                 db    7
.eh_frame:0000000000009DCF                 db  4Dh ; M
.eh_frame:0000000000009DD0                 db  0Eh
.eh_frame:0000000000009DD1                 db  40h ; @
.eh_frame:0000000000009DD2                 db  72h ; r
.eh_frame:0000000000009DD3                 db  0Eh
.eh_frame:0000000000009DD4                 db  38h ; 8
.eh_frame:0000000000009DD5                 db  41h ; A
.eh_frame:0000000000009DD6                 db  0Eh
.eh_frame:0000000000009DD7                 db  30h ; 0
.eh_frame:0000000000009DD8                 db  41h ; A
.eh_frame:0000000000009DD9                 db  0Eh
.eh_frame:0000000000009DDA                 db  28h ; (
.eh_frame:0000000000009DDB                 db  42h ; B
.eh_frame:0000000000009DDC                 db  0Eh
.eh_frame:0000000000009DDD                 db  20h
.eh_frame:0000000000009DDE                 db  42h ; B
.eh_frame:0000000000009DDF                 db  0Eh
.eh_frame:0000000000009DE0                 db  18h
.eh_frame:0000000000009DE1                 db  42h ; B
.eh_frame:0000000000009DE2                 db  0Eh
.eh_frame:0000000000009DE3                 db  10h
.eh_frame:0000000000009DE4                 db  42h ; B
.eh_frame:0000000000009DE5                 db  0Eh
.eh_frame:0000000000009DE6                 db    8
.eh_frame:0000000000009DE7                 db    0
.eh_frame:0000000000009DE8                 db  14h
.eh_frame:0000000000009DE9                 db    0
.eh_frame:0000000000009DEA                 db    0
.eh_frame:0000000000009DEB                 db    0
.eh_frame:0000000000009DEC                 db 0DCh
.eh_frame:0000000000009DED                 db  10h
.eh_frame:0000000000009DEE                 db    0
.eh_frame:0000000000009DEF                 db    0
.eh_frame:0000000000009DF0                 db 0F0h
.eh_frame:0000000000009DF1                 db 0D4h
.eh_frame:0000000000009DF2                 db 0FFh
.eh_frame:0000000000009DF3                 db 0FFh
.eh_frame:0000000000009DF4                 db    2
.eh_frame:0000000000009DF5                 db    0
.eh_frame:0000000000009DF6                 db    0
.eh_frame:0000000000009DF7                 db    0
.eh_frame:0000000000009DF8                 db    0
.eh_frame:0000000000009DF9                 db    0
.eh_frame:0000000000009DFA                 db    0
.eh_frame:0000000000009DFB                 db    0
.eh_frame:0000000000009DFC                 db    0
.eh_frame:0000000000009DFD                 db    0
.eh_frame:0000000000009DFE                 db    0
.eh_frame:0000000000009DFF                 db    0
.eh_frame:0000000000009E00                 db  10h
.eh_frame:0000000000009E01                 db    0
.eh_frame:0000000000009E02                 db    0
.eh_frame:0000000000009E03                 db    0
.eh_frame:0000000000009E04                 db 0F4h
.eh_frame:0000000000009E05                 db  10h
.eh_frame:0000000000009E06                 db    0
.eh_frame:0000000000009E07                 db    0
.eh_frame:0000000000009E08                 db 0E8h
.eh_frame:0000000000009E09                 db 0D4h
.eh_frame:0000000000009E0A                 db 0FFh
.eh_frame:0000000000009E0B                 db 0FFh
.eh_frame:0000000000009E0C                 db  0Eh
.eh_frame:0000000000009E0D                 db    0
.eh_frame:0000000000009E0E                 db    0
.eh_frame:0000000000009E0F                 db    0
.eh_frame:0000000000009E10                 db    0
.eh_frame:0000000000009E11                 db    0
.eh_frame:0000000000009E12                 db    0
.eh_frame:0000000000009E13                 db    0
.eh_frame:0000000000009E14 __FRAME_END__   db    0
.eh_frame:0000000000009E15                 db    0
.eh_frame:0000000000009E16                 db    0
.eh_frame:0000000000009E17                 db    0
.eh_frame:0000000000009E17 _eh_frame       ends
.eh_frame:0000000000009E17
.init_array:000000000020AAB0 ; ELF Initialization Function Table
.init_array:000000000020AAB0 ; ===========================================================================
.init_array:000000000020AAB0
.init_array:000000000020AAB0 ; Segment type: Pure data
.init_array:000000000020AAB0 ; Segment permissions: Read/Write
.init_array:000000000020AAB0 _init_array     segment qword public 'DATA' use64
.init_array:000000000020AAB0                 assume cs:_init_array
.init_array:000000000020AAB0                 ;org 20AAB0h
.init_array:000000000020AAB0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020AAB0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020AAB0                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020AAB0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020AAB0
.fini_array:000000000020AAB8 ; ELF Termination Function Table
.fini_array:000000000020AAB8 ; ===========================================================================
.fini_array:000000000020AAB8
.fini_array:000000000020AAB8 ; Segment type: Pure data
.fini_array:000000000020AAB8 ; Segment permissions: Read/Write
.fini_array:000000000020AAB8 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020AAB8                 assume cs:_fini_array
.fini_array:000000000020AAB8                 ;org 20AAB8h
.fini_array:000000000020AAB8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020AAB8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020AAB8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020AAB8
.data.rel.ro:000000000020AAC0 ; ===========================================================================
.data.rel.ro:000000000020AAC0
.data.rel.ro:000000000020AAC0 ; Segment type: Pure data
.data.rel.ro:000000000020AAC0 ; Segment permissions: Read/Write
.data.rel.ro:000000000020AAC0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020AAC0                 assume cs:_data_rel_ro
.data.rel.ro:000000000020AAC0                 ;org 20AAC0h
.data.rel.ro:000000000020AAC0 ; struct option longopts
.data.rel.ro:000000000020AAC0 longopts        dq offset aIgnoreCase   ; name
.data.rel.ro:000000000020AAC0                                         ; DATA XREF: main:loc_1AE4↑o
.data.rel.ro:000000000020AAC0                 dd 0                    ; has_arg ; "ignore-case"
.data.rel.ro:000000000020AAC0                 db 4 dup(0)
.data.rel.ro:000000000020AAC0                 dq 0                    ; flag
.data.rel.ro:000000000020AAC0                 dd 69h                  ; val
.data.rel.ro:000000000020AAC0                 db 4 dup(0)
.data.rel.ro:000000000020AAE0                 dq offset aNocheckOrder+2 ; "check-order"
.data.rel.ro:000000000020AAE8                 db    0
.data.rel.ro:000000000020AAE9                 db    0
.data.rel.ro:000000000020AAEA                 db    0
.data.rel.ro:000000000020AAEB                 db    0
.data.rel.ro:000000000020AAEC                 db    0
.data.rel.ro:000000000020AAED                 db    0
.data.rel.ro:000000000020AAEE                 db    0
.data.rel.ro:000000000020AAEF                 db    0
.data.rel.ro:000000000020AAF0                 db    0
.data.rel.ro:000000000020AAF1                 db    0
.data.rel.ro:000000000020AAF2                 db    0
.data.rel.ro:000000000020AAF3                 db    0
.data.rel.ro:000000000020AAF4                 db    0
.data.rel.ro:000000000020AAF5                 db    0
.data.rel.ro:000000000020AAF6                 db    0
.data.rel.ro:000000000020AAF7                 db    0
.data.rel.ro:000000000020AAF8                 db  80h
.data.rel.ro:000000000020AAF9                 db    0
.data.rel.ro:000000000020AAFA                 db    0
.data.rel.ro:000000000020AAFB                 db    0
.data.rel.ro:000000000020AAFC                 db    0
.data.rel.ro:000000000020AAFD                 db    0
.data.rel.ro:000000000020AAFE                 db    0
.data.rel.ro:000000000020AAFF                 db    0
.data.rel.ro:000000000020AB00                 dq offset aNocheckOrder ; "nocheck-order"
.data.rel.ro:000000000020AB08                 db    0
.data.rel.ro:000000000020AB09                 db    0
.data.rel.ro:000000000020AB0A                 db    0
.data.rel.ro:000000000020AB0B                 db    0
.data.rel.ro:000000000020AB0C                 db    0
.data.rel.ro:000000000020AB0D                 db    0
.data.rel.ro:000000000020AB0E                 db    0
.data.rel.ro:000000000020AB0F                 db    0
.data.rel.ro:000000000020AB10                 db    0
.data.rel.ro:000000000020AB11                 db    0
.data.rel.ro:000000000020AB12                 db    0
.data.rel.ro:000000000020AB13                 db    0
.data.rel.ro:000000000020AB14                 db    0
.data.rel.ro:000000000020AB15                 db    0
.data.rel.ro:000000000020AB16                 db    0
.data.rel.ro:000000000020AB17                 db    0
.data.rel.ro:000000000020AB18                 db  81h
.data.rel.ro:000000000020AB19                 db    0
.data.rel.ro:000000000020AB1A                 db    0
.data.rel.ro:000000000020AB1B                 db    0
.data.rel.ro:000000000020AB1C                 db    0
.data.rel.ro:000000000020AB1D                 db    0
.data.rel.ro:000000000020AB1E                 db    0
.data.rel.ro:000000000020AB1F                 db    0
.data.rel.ro:000000000020AB20                 dq offset aZeroTerminated ; "zero-terminated"
.data.rel.ro:000000000020AB28                 db    0
.data.rel.ro:000000000020AB29                 db    0
.data.rel.ro:000000000020AB2A                 db    0
.data.rel.ro:000000000020AB2B                 db    0
.data.rel.ro:000000000020AB2C                 db    0
.data.rel.ro:000000000020AB2D                 db    0
.data.rel.ro:000000000020AB2E                 db    0
.data.rel.ro:000000000020AB2F                 db    0
.data.rel.ro:000000000020AB30                 db    0
.data.rel.ro:000000000020AB31                 db    0
.data.rel.ro:000000000020AB32                 db    0
.data.rel.ro:000000000020AB33                 db    0
.data.rel.ro:000000000020AB34                 db    0
.data.rel.ro:000000000020AB35                 db    0
.data.rel.ro:000000000020AB36                 db    0
.data.rel.ro:000000000020AB37                 db    0
.data.rel.ro:000000000020AB38                 db  7Ah ; z
.data.rel.ro:000000000020AB39                 db    0
.data.rel.ro:000000000020AB3A                 db    0
.data.rel.ro:000000000020AB3B                 db    0
.data.rel.ro:000000000020AB3C                 db    0
.data.rel.ro:000000000020AB3D                 db    0
.data.rel.ro:000000000020AB3E                 db    0
.data.rel.ro:000000000020AB3F                 db    0
.data.rel.ro:000000000020AB40                 dq offset aHeader       ; "header"
.data.rel.ro:000000000020AB48                 db    0
.data.rel.ro:000000000020AB49                 db    0
.data.rel.ro:000000000020AB4A                 db    0
.data.rel.ro:000000000020AB4B                 db    0
.data.rel.ro:000000000020AB4C                 db    0
.data.rel.ro:000000000020AB4D                 db    0
.data.rel.ro:000000000020AB4E                 db    0
.data.rel.ro:000000000020AB4F                 db    0
.data.rel.ro:000000000020AB50                 db    0
.data.rel.ro:000000000020AB51                 db    0
.data.rel.ro:000000000020AB52                 db    0
.data.rel.ro:000000000020AB53                 db    0
.data.rel.ro:000000000020AB54                 db    0
.data.rel.ro:000000000020AB55                 db    0
.data.rel.ro:000000000020AB56                 db    0
.data.rel.ro:000000000020AB57                 db    0
.data.rel.ro:000000000020AB58                 db  82h
.data.rel.ro:000000000020AB59                 db    0
.data.rel.ro:000000000020AB5A                 db    0
.data.rel.ro:000000000020AB5B                 db    0
.data.rel.ro:000000000020AB5C                 db    0
.data.rel.ro:000000000020AB5D                 db    0
.data.rel.ro:000000000020AB5E                 db    0
.data.rel.ro:000000000020AB5F                 db    0
.data.rel.ro:000000000020AB60                 dq offset aHelp         ; "help"
.data.rel.ro:000000000020AB68                 db    0
.data.rel.ro:000000000020AB69                 db    0
.data.rel.ro:000000000020AB6A                 db    0
.data.rel.ro:000000000020AB6B                 db    0
.data.rel.ro:000000000020AB6C                 db    0
.data.rel.ro:000000000020AB6D                 db    0
.data.rel.ro:000000000020AB6E                 db    0
.data.rel.ro:000000000020AB6F                 db    0
.data.rel.ro:000000000020AB70                 db    0
.data.rel.ro:000000000020AB71                 db    0
.data.rel.ro:000000000020AB72                 db    0
.data.rel.ro:000000000020AB73                 db    0
.data.rel.ro:000000000020AB74                 db    0
.data.rel.ro:000000000020AB75                 db    0
.data.rel.ro:000000000020AB76                 db    0
.data.rel.ro:000000000020AB77                 db    0
.data.rel.ro:000000000020AB78                 db  7Eh ; ~
.data.rel.ro:000000000020AB79                 db 0FFh
.data.rel.ro:000000000020AB7A                 db 0FFh
.data.rel.ro:000000000020AB7B                 db 0FFh
.data.rel.ro:000000000020AB7C                 db    0
.data.rel.ro:000000000020AB7D                 db    0
.data.rel.ro:000000000020AB7E                 db    0
.data.rel.ro:000000000020AB7F                 db    0
.data.rel.ro:000000000020AB80                 dq offset aVersion      ; "version"
.data.rel.ro:000000000020AB88                 db    0
.data.rel.ro:000000000020AB89                 db    0
.data.rel.ro:000000000020AB8A                 db    0
.data.rel.ro:000000000020AB8B                 db    0
.data.rel.ro:000000000020AB8C                 db    0
.data.rel.ro:000000000020AB8D                 db    0
.data.rel.ro:000000000020AB8E                 db    0
.data.rel.ro:000000000020AB8F                 db    0
.data.rel.ro:000000000020AB90                 db    0
.data.rel.ro:000000000020AB91                 db    0
.data.rel.ro:000000000020AB92                 db    0
.data.rel.ro:000000000020AB93                 db    0
.data.rel.ro:000000000020AB94                 db    0
.data.rel.ro:000000000020AB95                 db    0
.data.rel.ro:000000000020AB96                 db    0
.data.rel.ro:000000000020AB97                 db    0
.data.rel.ro:000000000020AB98                 db  7Dh ; }
.data.rel.ro:000000000020AB99                 db 0FFh
.data.rel.ro:000000000020AB9A                 db 0FFh
.data.rel.ro:000000000020AB9B                 db 0FFh
.data.rel.ro:000000000020AB9C                 db    0
.data.rel.ro:000000000020AB9D                 db    0
.data.rel.ro:000000000020AB9E                 db    0
.data.rel.ro:000000000020AB9F                 db    0
.data.rel.ro:000000000020ABA0                 db    0
.data.rel.ro:000000000020ABA1                 db    0
.data.rel.ro:000000000020ABA2                 db    0
.data.rel.ro:000000000020ABA3                 db    0
.data.rel.ro:000000000020ABA4                 db    0
.data.rel.ro:000000000020ABA5                 db    0
.data.rel.ro:000000000020ABA6                 db    0
.data.rel.ro:000000000020ABA7                 db    0
.data.rel.ro:000000000020ABA8                 db    0
.data.rel.ro:000000000020ABA9                 db    0
.data.rel.ro:000000000020ABAA                 db    0
.data.rel.ro:000000000020ABAB                 db    0
.data.rel.ro:000000000020ABAC                 db    0
.data.rel.ro:000000000020ABAD                 db    0
.data.rel.ro:000000000020ABAE                 db    0
.data.rel.ro:000000000020ABAF                 db    0
.data.rel.ro:000000000020ABB0                 db    0
.data.rel.ro:000000000020ABB1                 db    0
.data.rel.ro:000000000020ABB2                 db    0
.data.rel.ro:000000000020ABB3                 db    0
.data.rel.ro:000000000020ABB4                 db    0
.data.rel.ro:000000000020ABB5                 db    0
.data.rel.ro:000000000020ABB6                 db    0
.data.rel.ro:000000000020ABB7                 db    0
.data.rel.ro:000000000020ABB8                 db    0
.data.rel.ro:000000000020ABB9                 db    0
.data.rel.ro:000000000020ABBA                 db    0
.data.rel.ro:000000000020ABBB                 db    0
.data.rel.ro:000000000020ABBC                 db    0
.data.rel.ro:000000000020ABBD                 db    0
.data.rel.ro:000000000020ABBE                 db    0
.data.rel.ro:000000000020ABBF                 db    0
.data.rel.ro:000000000020ABC0                 public quoting_style_args
.data.rel.ro:000000000020ABC0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020ABC8                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020ABD0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020ABD8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020ABE0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020ABE8                 dq offset aC_1          ; "c"
.data.rel.ro:000000000020ABF0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020ABF8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020AC00                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020AC08                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020AC10                 db    0
.data.rel.ro:000000000020AC11                 db    0
.data.rel.ro:000000000020AC12                 db    0
.data.rel.ro:000000000020AC13                 db    0
.data.rel.ro:000000000020AC14                 db    0
.data.rel.ro:000000000020AC15                 db    0
.data.rel.ro:000000000020AC16                 db    0
.data.rel.ro:000000000020AC17                 db    0
.data.rel.ro:000000000020AC17 _data_rel_ro    ends
.data.rel.ro:000000000020AC17
LOAD:000000000020AC18 ; ELF Dynamic Information
LOAD:000000000020AC18 ; ===========================================================================
LOAD:000000000020AC18
LOAD:000000000020AC18 ; Segment type: Pure data
LOAD:000000000020AC18 ; Segment permissions: Read/Write
LOAD:000000000020AC18 LOAD            segment byte public 'DATA' use64
LOAD:000000000020AC18                 assume cs:LOAD
LOAD:000000000020AC18                 ;org 20AC18h
LOAD:000000000020AC18 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020AC18                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020AC18                                         ; DT_NEEDED libc.so.6
LOAD:000000000020AC28                 Elf64_Dyn <0Ch, 1600h>  ; DT_INIT
LOAD:000000000020AC38                 Elf64_Dyn <0Dh, 7300h>  ; DT_FINI
LOAD:000000000020AC48                 Elf64_Dyn <19h, 20AAB0h> ; DT_INIT_ARRAY
LOAD:000000000020AC58                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020AC68                 Elf64_Dyn <1Ah, 20AAB8h> ; DT_FINI_ARRAY
LOAD:000000000020AC78                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020AC88                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020AC98                 Elf64_Dyn <5, 970h>     ; DT_STRTAB
LOAD:000000000020ACA8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000020ACB8                 Elf64_Dyn <0Ah, 318h>   ; DT_STRSZ
LOAD:000000000020ACC8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020ACD8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020ACE8                 Elf64_Dyn <3, 20AE08h>  ; DT_PLTGOT
LOAD:000000000020ACF8                 Elf64_Dyn <2, 528h>     ; DT_PLTRELSZ
LOAD:000000000020AD08                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020AD18                 Elf64_Dyn <17h, 10D8h>  ; DT_JMPREL
LOAD:000000000020AD28                 Elf64_Dyn <7, 0D78h>    ; DT_RELA
LOAD:000000000020AD38                 Elf64_Dyn <8, 360h>     ; DT_RELASZ
LOAD:000000000020AD48                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020AD58                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020AD68                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020AD78                 Elf64_Dyn <6FFFFFFEh, 0D18h> ; DT_VERNEED
LOAD:000000000020AD88                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020AD98                 Elf64_Dyn <6FFFFFF0h, 0C88h> ; DT_VERSYM
LOAD:000000000020ADA8                 Elf64_Dyn <6FFFFFF9h, 18h> ; DT_RELACOUNT
LOAD:000000000020ADB8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020ADC8                 db    0
LOAD:000000000020ADC9                 db    0
LOAD:000000000020ADCA                 db    0
LOAD:000000000020ADCB                 db    0
LOAD:000000000020ADCC                 db    0
LOAD:000000000020ADCD                 db    0
LOAD:000000000020ADCE                 db    0
LOAD:000000000020ADCF                 db    0
LOAD:000000000020ADD0                 db    0
LOAD:000000000020ADD1                 db    0
LOAD:000000000020ADD2                 db    0
LOAD:000000000020ADD3                 db    0
LOAD:000000000020ADD4                 db    0
LOAD:000000000020ADD5                 db    0
LOAD:000000000020ADD6                 db    0
LOAD:000000000020ADD7                 db    0
LOAD:000000000020ADD8                 db    0
LOAD:000000000020ADD9                 db    0
LOAD:000000000020ADDA                 db    0
LOAD:000000000020ADDB                 db    0
LOAD:000000000020ADDC                 db    0
LOAD:000000000020ADDD                 db    0
LOAD:000000000020ADDE                 db    0
LOAD:000000000020ADDF                 db    0
LOAD:000000000020ADE0                 db    0
LOAD:000000000020ADE1                 db    0
LOAD:000000000020ADE2                 db    0
LOAD:000000000020ADE3                 db    0
LOAD:000000000020ADE4                 db    0
LOAD:000000000020ADE5                 db    0
LOAD:000000000020ADE6                 db    0
LOAD:000000000020ADE7                 db    0
LOAD:000000000020ADE8                 db    0
LOAD:000000000020ADE9                 db    0
LOAD:000000000020ADEA                 db    0
LOAD:000000000020ADEB                 db    0
LOAD:000000000020ADEC                 db    0
LOAD:000000000020ADED                 db    0
LOAD:000000000020ADEE                 db    0
LOAD:000000000020ADEF                 db    0
LOAD:000000000020ADF0                 db    0
LOAD:000000000020ADF1                 db    0
LOAD:000000000020ADF2                 db    0
LOAD:000000000020ADF3                 db    0
LOAD:000000000020ADF4                 db    0
LOAD:000000000020ADF5                 db    0
LOAD:000000000020ADF6                 db    0
LOAD:000000000020ADF7                 db    0
LOAD:000000000020ADF8                 db    0
LOAD:000000000020ADF9                 db    0
LOAD:000000000020ADFA                 db    0
LOAD:000000000020ADFB                 db    0
LOAD:000000000020ADFC                 db    0
LOAD:000000000020ADFD                 db    0
LOAD:000000000020ADFE                 db    0
LOAD:000000000020ADFF                 db    0
LOAD:000000000020AE00                 db    0
LOAD:000000000020AE01                 db    0
LOAD:000000000020AE02                 db    0
LOAD:000000000020AE03                 db    0
LOAD:000000000020AE04                 db    0
LOAD:000000000020AE05                 db    0
LOAD:000000000020AE06                 db    0
LOAD:000000000020AE07                 db    0
LOAD:000000000020AE07 LOAD            ends
LOAD:000000000020AE07
.got:000000000020AE08 ; ===========================================================================
.got:000000000020AE08
.got:000000000020AE08 ; Segment type: Pure data
.got:000000000020AE08 ; Segment permissions: Read/Write
.got:000000000020AE08 _got            segment qword public 'DATA' use64
.got:000000000020AE08                 assume cs:_got
.got:000000000020AE08                 ;org 20AE08h
.got:000000000020AE08 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020AE10 qword_20AE10    dq 0                    ; DATA XREF: sub_1620↑r
.got:000000000020AE18 qword_20AE18    dq 0                    ; DATA XREF: sub_1620+6↑r
.got:000000000020AE20 __ctype_toupper_loc_ptr dq offset __ctype_toupper_loc
.got:000000000020AE20                                         ; DATA XREF: ___ctype_toupper_loc↑r
.got:000000000020AE28 __uflow_ptr     dq offset __uflow       ; DATA XREF: ___uflow↑r
.got:000000000020AE30 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:000000000020AE38 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020AE40 __errno_location_ptr dq offset __errno_location
.got:000000000020AE40                                         ; DATA XREF: ___errno_location↑r
.got:000000000020AE48 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020AE50 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020AE58 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020AE60 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:000000000020AE68 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020AE70 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020AE78 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020AE78                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020AE80 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020AE88 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020AE88                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020AE90 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020AE98 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020AE98                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020AEA0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000020AEA8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020AEB0 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:000000000020AEB8 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:000000000020AEC0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020AEC8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020AED0 __assert_fail_ptr dq offset __assert_fail
.got:000000000020AED0                                         ; DATA XREF: ___assert_fail↑r
.got:000000000020AED8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020AEE0 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:000000000020AEE8 posix_fadvise_ptr dq offset posix_fadvise
.got:000000000020AEE8                                         ; DATA XREF: _posix_fadvise↑r
.got:000000000020AEF0 memchr_ptr      dq offset memchr        ; DATA XREF: _memchr↑r
.got:000000000020AEF8 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020AF00 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020AF00                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020AF08 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020AF10 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000020AF18 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020AF20 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020AF28 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020AF30 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020AF38 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020AF40 strcoll_ptr     dq offset strcoll       ; DATA XREF: _strcoll↑r
.got:000000000020AF48 strpbrk_ptr     dq offset strpbrk       ; DATA XREF: _strpbrk↑r
.got:000000000020AF50 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020AF58 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:000000000020AF58                                         ; DATA XREF: _fwrite_unlocked↑r
.got:000000000020AF60 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020AF68 fdopen_ptr      dq offset fdopen        ; DATA XREF: _fdopen↑r
.got:000000000020AF70 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020AF78 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020AF80 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020AF88 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020AF90 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:000000000020AF98 strtoul_ptr     dq offset strtoul       ; DATA XREF: _strtoul↑r
.got:000000000020AFA0 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020AFA8 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020AFB0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020AFB8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020AFB8                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020AFC0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020AFC8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020AFD0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020AFD0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020AFD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020AFD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020AFE0 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020AFE0                                         ; DATA XREF: start+24↑r
.got:000000000020AFE8 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020AFE8                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020AFF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020AFF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020AFF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020AFF8                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020AFF8                                         ; __do_global_dtors_aux+9↑r
.got:000000000020AFF8 _got            ends
.got:000000000020AFF8
.data:000000000020B000 ; ===========================================================================
.data:000000000020B000
.data:000000000020B000 ; Segment type: Pure data
.data:000000000020B000 ; Segment permissions: Read/Write
.data:000000000020B000 _data           segment align_32 public 'DATA' use64
.data:000000000020B000                 assume cs:_data
.data:000000000020B000                 ;org 20B000h
.data:000000000020B000                 public __data_start ; weak
.data:000000000020B000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020B000                                         ; data_start
.data:000000000020B001                 db    0
.data:000000000020B002                 db    0
.data:000000000020B003                 db    0
.data:000000000020B004                 db    0
.data:000000000020B005                 db    0
.data:000000000020B006                 db    0
.data:000000000020B007                 db    0
.data:000000000020B008                 public __dso_handle
.data:000000000020B008 ; void *_dso_handle
.data:000000000020B008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020B008                                         ; atexit↑r ...
.data:000000000020B010 eolchar         db 0Ah                  ; DATA XREF: main+3A9↑w
.data:000000000020B010                                         ; prjoin+FA↑r ...
.data:000000000020B011                 align 4
.data:000000000020B014 ; int tab
.data:000000000020B014 tab             dd 0FFFFFFFFh           ; DATA XREF: main:loc_1DA1↑r
.data:000000000020B014                                         ; main:loc_1DB3↑w ...
.data:000000000020B018 join_field_2    dq 0FFFFFFFFFFFFFFFFh   ; DATA XREF: main+1AC↑o
.data:000000000020B018                                         ; main+22B↑o ...
.data:000000000020B020 join_field_1    dq 0FFFFFFFFFFFFFFFFh   ; DATA XREF: main+215↑o
.data:000000000020B020                                         ; main+224↑r ...
.data:000000000020B028 outlist_end     dq offset outlist_head  ; DATA XREF: add_field_list+41↑r
.data:000000000020B028                                         ; add_field_list+59↑w
.data:000000000020B030                 public Version
.data:000000000020B030 Version         dq offset a831          ; DATA XREF: main+266↑r
.data:000000000020B030                                         ; "8.31"
.data:000000000020B038                 public exit_failure
.data:000000000020B038 ; int exit_failure
.data:000000000020B038 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_3D42↑r
.data:000000000020B038                                         ; xalloc_die+17↑r ...
.data:000000000020B03C                 align 20h
.data:000000000020B040                 public quote_quoting_options
.data:000000000020B040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020B040                                         ; quote_mem↑o ...
.data:000000000020B041                 db    0
.data:000000000020B042                 db    0
.data:000000000020B043                 db    0
.data:000000000020B044                 db    0
.data:000000000020B045                 db    0
.data:000000000020B046                 db    0
.data:000000000020B047                 db    0
.data:000000000020B048                 db    0
.data:000000000020B049                 db    0
.data:000000000020B04A                 db    0
.data:000000000020B04B                 db    0
.data:000000000020B04C                 db    0
.data:000000000020B04D                 db    0
.data:000000000020B04E                 db    0
.data:000000000020B04F                 db    0
.data:000000000020B050                 db    0
.data:000000000020B051                 db    0
.data:000000000020B052                 db    0
.data:000000000020B053                 db    0
.data:000000000020B054                 db    0
.data:000000000020B055                 db    0
.data:000000000020B056                 db    0
.data:000000000020B057                 db    0
.data:000000000020B058                 db    0
.data:000000000020B059                 db    0
.data:000000000020B05A                 db    0
.data:000000000020B05B                 db    0
.data:000000000020B05C                 db    0
.data:000000000020B05D                 db    0
.data:000000000020B05E                 db    0
.data:000000000020B05F                 db    0
.data:000000000020B060                 db    0
.data:000000000020B061                 db    0
.data:000000000020B062                 db    0
.data:000000000020B063                 db    0
.data:000000000020B064                 db    0
.data:000000000020B065                 db    0
.data:000000000020B066                 db    0
.data:000000000020B067                 db    0
.data:000000000020B068                 db    0
.data:000000000020B069                 db    0
.data:000000000020B06A                 db    0
.data:000000000020B06B                 db    0
.data:000000000020B06C                 db    0
.data:000000000020B06D                 db    0
.data:000000000020B06E                 db    0
.data:000000000020B06F                 db    0
.data:000000000020B070                 db    0
.data:000000000020B071                 db    0
.data:000000000020B072                 db    0
.data:000000000020B073                 db    0
.data:000000000020B074                 db    0
.data:000000000020B075                 db    0
.data:000000000020B076                 db    0
.data:000000000020B077                 db    0
.data:000000000020B078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020B078                                         ; quotearg_n_options:loc_548D↑r ...
.data:000000000020B07C                 align 20h
.data:000000000020B080 ; void *slotvec
.data:000000000020B080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020B080                                         ; quotearg_n_options+76↑w ...
.data:000000000020B088                 align 10h
.data:000000000020B090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020B090                                         ; quotearg_n_options+187↑r ...
.data:000000000020B098 off_20B098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020B098 _data           ends
.data:000000000020B098
.bss:000000000020B0A0 ; ===========================================================================
.bss:000000000020B0A0
.bss:000000000020B0A0 ; Segment type: Uninitialized
.bss:000000000020B0A0 ; Segment permissions: Read/Write
.bss:000000000020B0A0 _bss            segment align_32 public 'BSS' use64
.bss:000000000020B0A0                 assume cs:_bss
.bss:000000000020B0A0                 ;org 20B0A0h
.bss:000000000020B0A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020B0A0                 public __bss_start ; weak
.bss:000000000020B0A0 __bss_start     dq ?                    ; DATA XREF: LOAD:00000000000008B0↑o
.bss:000000000020B0A0                                         ; LOAD:0000000000000910↑o ...
.bss:000000000020B0A0                                         ; Alternative name is '__TMC_END__'
.bss:000000000020B0A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020B0A0                                         ; _edata
.bss:000000000020B0A0                                         ; Copy of shared data
.bss:000000000020B0A8                 public stdout@@GLIBC_2_2_5
.bss:000000000020B0A8 ; FILE *stdout
.bss:000000000020B0A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000898↑o
.bss:000000000020B0A8                                         ; main+25F↑r ...
.bss:000000000020B0A8                                         ; Alternative name is 'stdout'
.bss:000000000020B0A8                                         ; Copy of shared data
.bss:000000000020B0B0                 public stdin@@GLIBC_2_2_5
.bss:000000000020B0B0 ; FILE *stdin
.bss:000000000020B0B0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:00000000000008C8↑o
.bss:000000000020B0B0                                         ; main+579↑r ...
.bss:000000000020B0B0                                         ; Alternative name is 'stdin'
.bss:000000000020B0B0                                         ; Copy of shared data
.bss:000000000020B0B8                 public optind@@GLIBC_2_2_5
.bss:000000000020B0B8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000940↑o
.bss:000000000020B0B8                                         ; main+1F7↑r ...
.bss:000000000020B0B8                                         ; Alternative name is 'optind'
.bss:000000000020B0B8                                         ; Copy of shared data
.bss:000000000020B0BC                 align 20h
.bss:000000000020B0C0                 public optarg@@GLIBC_2_2_5
.bss:000000000020B0C0 ; char *optarg
.bss:000000000020B0C0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000958↑o
.bss:000000000020B0C0                                         ; main:loc_1B50↑r ...
.bss:000000000020B0C0                                         ; Alternative name is 'optarg'
.bss:000000000020B0C0                                         ; Copy of shared data
.bss:000000000020B0C8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020B0C8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020B0C8                                         ; DATA XREF: LOAD:00000000000008E0↑o
.bss:000000000020B0C8                                         ; LOAD:00000000000008F8↑o ...
.bss:000000000020B0C8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020B0C8                                         ; Copy of shared data
.bss:000000000020B0D0                 align 20h
.bss:000000000020B0E0                 public stderr@@GLIBC_2_2_5
.bss:000000000020B0E0 ; FILE *stderr
.bss:000000000020B0E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000928↑o
.bss:000000000020B0E0                                         ; usage+3D↑r ...
.bss:000000000020B0E0                                         ; Alternative name is 'stderr'
.bss:000000000020B0E0                                         ; Copy of shared data
.bss:000000000020B0E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020B0E8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020B0E9                 align 20h
.bss:000000000020B100 join_header_lines db ?                  ; DATA XREF: main+122↑w
.bss:000000000020B100                                         ; main:loc_202D↑r
.bss:000000000020B101 ignore_case     db ?                    ; DATA XREF: main:loc_1DE8↑w
.bss:000000000020B101                                         ; keycmp_isra_4+3B↑r
.bss:000000000020B102                 align 20h
.bss:000000000020B120 uni_blank       db    ? ;               ; DATA XREF: main+AB5↑o
.bss:000000000020B120                                         ; main+B7C↑o ...
.bss:000000000020B121                 db    ? ;
.bss:000000000020B122                 db    ? ;
.bss:000000000020B123                 db    ? ;
.bss:000000000020B124                 db    ? ;
.bss:000000000020B125                 db    ? ;
.bss:000000000020B126                 db    ? ;
.bss:000000000020B127                 db    ? ;
.bss:000000000020B128                 db    ? ;
.bss:000000000020B129                 db    ? ;
.bss:000000000020B12A                 db    ? ;
.bss:000000000020B12B                 db    ? ;
.bss:000000000020B12C                 db    ? ;
.bss:000000000020B12D                 db    ? ;
.bss:000000000020B12E                 db    ? ;
.bss:000000000020B12F                 db    ? ;
.bss:000000000020B130                 db    ? ;
.bss:000000000020B131                 db    ? ;
.bss:000000000020B132                 db    ? ;
.bss:000000000020B133                 db    ? ;
.bss:000000000020B134                 db    ? ;
.bss:000000000020B135                 db    ? ;
.bss:000000000020B136                 db    ? ;
.bss:000000000020B137                 db    ? ;
.bss:000000000020B138                 db    ? ;
.bss:000000000020B139                 db    ? ;
.bss:000000000020B13A                 db    ? ;
.bss:000000000020B13B                 db    ? ;
.bss:000000000020B13C                 db    ? ;
.bss:000000000020B13D                 db    ? ;
.bss:000000000020B13E                 db    ? ;
.bss:000000000020B13F                 db    ? ;
.bss:000000000020B140                 db    ? ;
.bss:000000000020B141                 db    ? ;
.bss:000000000020B142                 db    ? ;
.bss:000000000020B143                 db    ? ;
.bss:000000000020B144                 db    ? ;
.bss:000000000020B145                 db    ? ;
.bss:000000000020B146                 db    ? ;
.bss:000000000020B147                 db    ? ;
.bss:000000000020B148                 db    ? ;
.bss:000000000020B149                 db    ? ;
.bss:000000000020B14A                 db    ? ;
.bss:000000000020B14B                 db    ? ;
.bss:000000000020B14C                 db    ? ;
.bss:000000000020B14D                 db    ? ;
.bss:000000000020B14E                 db    ? ;
.bss:000000000020B14F                 db    ? ;
.bss:000000000020B150 check_input_order dd ?                  ; DATA XREF: main+D6↑w
.bss:000000000020B150                                         ; main:loc_1D70↑w ...
.bss:000000000020B154                 align 20h
.bss:000000000020B160 outlist_head    db    ? ;               ; DATA XREF: .data:outlist_end↑o
.bss:000000000020B161                 db    ? ;
.bss:000000000020B162                 db    ? ;
.bss:000000000020B163                 db    ? ;
.bss:000000000020B164                 db    ? ;
.bss:000000000020B165                 db    ? ;
.bss:000000000020B166                 db    ? ;
.bss:000000000020B167                 db    ? ;
.bss:000000000020B168                 db    ? ;
.bss:000000000020B169                 db    ? ;
.bss:000000000020B16A                 db    ? ;
.bss:000000000020B16B                 db    ? ;
.bss:000000000020B16C                 db    ? ;
.bss:000000000020B16D                 db    ? ;
.bss:000000000020B16E                 db    ? ;
.bss:000000000020B16F                 db    ? ;
.bss:000000000020B170 qword_20B170    dq ?                    ; DATA XREF: prjoin+1A↑r
.bss:000000000020B178 autocount_2     dq ?                    ; DATA XREF: main:loc_2026↑w
.bss:000000000020B178                                         ; prjoin+DD↑r
.bss:000000000020B180 autocount_1     dq ?                    ; DATA XREF: main:loc_2009↑w
.bss:000000000020B180                                         ; prjoin+C7↑r
.bss:000000000020B188 autoformat      db ?                    ; DATA XREF: main+318↑w
.bss:000000000020B188                                         ; main+63A↑r ...
.bss:000000000020B189                 align 10h
.bss:000000000020B190 ; char *empty_filler
.bss:000000000020B190 empty_filler    dq ?                    ; DATA XREF: main:loc_1D18↑r
.bss:000000000020B190                                         ; main:loc_1D3B↑w ...
.bss:000000000020B198 issued_disorder_warning db ?            ; DATA XREF: main+C5↑w
.bss:000000000020B198                                         ; main+6B8↑r ...
.bss:000000000020B199 byte_20B199     db ?                    ; DATA XREF: main+BE↑w
.bss:000000000020B199                                         ; main+6C5↑r ...
.bss:000000000020B19A seen_unpairable db ?                    ; DATA XREF: main+B7↑w
.bss:000000000020B19A                                         ; main+93A↑w ...
.bss:000000000020B19B print_pairables db ?                    ; DATA XREF: main+B0↑w
.bss:000000000020B19B                                         ; main:loc_1C48↑w ...
.bss:000000000020B19C print_unpairables_2 db ?                ; DATA XREF: main+2E1↑w
.bss:000000000020B19C                                         ; main+6DF↑r ...
.bss:000000000020B19D print_unpairables_1 db ?                ; DATA XREF: main:loc_1E11↑w
.bss:000000000020B19D                                         ; main:loc_2082↑r ...
.bss:000000000020B19E hard_LC_COLLATE db ?                    ; DATA XREF: main+94↑w
.bss:000000000020B19E                                         ; keycmp_isra_4+4B↑r
.bss:000000000020B19F                 align 20h
.bss:000000000020B1A0 ; void *spareline
.bss:000000000020B1A0 spareline       dq ?                    ; DATA XREF: _ZN10idAASBuild12ShutdownHashEv+1↑r
.bss:000000000020B1A0                                         ; get_line:loc_3500↑o
.bss:000000000020B1A8 ; void *ptr
.bss:000000000020B1A8 ptr             dq ?                    ; DATA XREF: _ZN10idAASBuild12ShutdownHashEv:loc_2CBD↑r
.bss:000000000020B1B0 ; char *g_names
.bss:000000000020B1B0 g_names         dq ?                    ; DATA XREF: main:loc_1F0B↑r
.bss:000000000020B1B0                                         ; main:loc_27D6↑r ...
.bss:000000000020B1B8 ; char *s1
.bss:000000000020B1B8 s1              dq ?                    ; DATA XREF: main+589↑r
.bss:000000000020B1B8                                         ; main:loc_2777↑r ...
.bss:000000000020B1C0 line_no         db    ? ;               ; DATA XREF: get_line+5E↑o
.bss:000000000020B1C0                                         ; get_line:loc_33F7↑o
.bss:000000000020B1C1                 db    ? ;
.bss:000000000020B1C2                 db    ? ;
.bss:000000000020B1C3                 db    ? ;
.bss:000000000020B1C4                 db    ? ;
.bss:000000000020B1C5                 db    ? ;
.bss:000000000020B1C6                 db    ? ;
.bss:000000000020B1C7                 db    ? ;
.bss:000000000020B1C8                 db    ? ;
.bss:000000000020B1C9                 db    ? ;
.bss:000000000020B1CA                 db    ? ;
.bss:000000000020B1CB                 db    ? ;
.bss:000000000020B1CC                 db    ? ;
.bss:000000000020B1CD                 db    ? ;
.bss:000000000020B1CE                 db    ? ;
.bss:000000000020B1CF                 db    ? ;
.bss:000000000020B1D0 prevline        dq ?                    ; DATA XREF: main+C4C↑w
.bss:000000000020B1D0                                         ; get_line+B↑o
.bss:000000000020B1D8 qword_20B1D8    dq ?                    ; DATA XREF: main+C57↑w
.bss:000000000020B1E0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020B1E0                                         ; close_stdout+1B↑r
.bss:000000000020B1E1                 align 8
.bss:000000000020B1E8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020B1E8                                         ; close_stdout+56↑r
.bss:000000000020B1F0                 public program_name
.bss:000000000020B1F0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020B1F0                                         ; set_program_name:loc_40AD↑w
.bss:000000000020B1F8                 align 20h
.bss:000000000020B200 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020B200                                         ; quotearg_free+46↑o ...
.bss:000000000020B201                 db    ? ;
.bss:000000000020B202                 db    ? ;
.bss:000000000020B203                 db    ? ;
.bss:000000000020B204                 db    ? ;
.bss:000000000020B205                 db    ? ;
.bss:000000000020B206                 db    ? ;
.bss:000000000020B207                 db    ? ;
.bss:000000000020B208                 db    ? ;
.bss:000000000020B209                 db    ? ;
.bss:000000000020B20A                 db    ? ;
.bss:000000000020B20B                 db    ? ;
.bss:000000000020B20C                 db    ? ;
.bss:000000000020B20D                 db    ? ;
.bss:000000000020B20E                 db    ? ;
.bss:000000000020B20F                 db    ? ;
.bss:000000000020B210                 db    ? ;
.bss:000000000020B211                 db    ? ;
.bss:000000000020B212                 db    ? ;
.bss:000000000020B213                 db    ? ;
.bss:000000000020B214                 db    ? ;
.bss:000000000020B215                 db    ? ;
.bss:000000000020B216                 db    ? ;
.bss:000000000020B217                 db    ? ;
.bss:000000000020B218                 db    ? ;
.bss:000000000020B219                 db    ? ;
.bss:000000000020B21A                 db    ? ;
.bss:000000000020B21B                 db    ? ;
.bss:000000000020B21C                 db    ? ;
.bss:000000000020B21D                 db    ? ;
.bss:000000000020B21E                 db    ? ;
.bss:000000000020B21F                 db    ? ;
.bss:000000000020B220                 db    ? ;
.bss:000000000020B221                 db    ? ;
.bss:000000000020B222                 db    ? ;
.bss:000000000020B223                 db    ? ;
.bss:000000000020B224                 db    ? ;
.bss:000000000020B225                 db    ? ;
.bss:000000000020B226                 db    ? ;
.bss:000000000020B227                 db    ? ;
.bss:000000000020B228                 db    ? ;
.bss:000000000020B229                 db    ? ;
.bss:000000000020B22A                 db    ? ;
.bss:000000000020B22B                 db    ? ;
.bss:000000000020B22C                 db    ? ;
.bss:000000000020B22D                 db    ? ;
.bss:000000000020B22E                 db    ? ;
.bss:000000000020B22F                 db    ? ;
.bss:000000000020B230                 db    ? ;
.bss:000000000020B231                 db    ? ;
.bss:000000000020B232                 db    ? ;
.bss:000000000020B233                 db    ? ;
.bss:000000000020B234                 db    ? ;
.bss:000000000020B235                 db    ? ;
.bss:000000000020B236                 db    ? ;
.bss:000000000020B237                 db    ? ;
.bss:000000000020B238                 db    ? ;
.bss:000000000020B239                 db    ? ;
.bss:000000000020B23A                 db    ? ;
.bss:000000000020B23B                 db    ? ;
.bss:000000000020B23C                 db    ? ;
.bss:000000000020B23D                 db    ? ;
.bss:000000000020B23E                 db    ? ;
.bss:000000000020B23F                 db    ? ;
.bss:000000000020B240                 db    ? ;
.bss:000000000020B241                 db    ? ;
.bss:000000000020B242                 db    ? ;
.bss:000000000020B243                 db    ? ;
.bss:000000000020B244                 db    ? ;
.bss:000000000020B245                 db    ? ;
.bss:000000000020B246                 db    ? ;
.bss:000000000020B247                 db    ? ;
.bss:000000000020B248                 db    ? ;
.bss:000000000020B249                 db    ? ;
.bss:000000000020B24A                 db    ? ;
.bss:000000000020B24B                 db    ? ;
.bss:000000000020B24C                 db    ? ;
.bss:000000000020B24D                 db    ? ;
.bss:000000000020B24E                 db    ? ;
.bss:000000000020B24F                 db    ? ;
.bss:000000000020B250                 db    ? ;
.bss:000000000020B251                 db    ? ;
.bss:000000000020B252                 db    ? ;
.bss:000000000020B253                 db    ? ;
.bss:000000000020B254                 db    ? ;
.bss:000000000020B255                 db    ? ;
.bss:000000000020B256                 db    ? ;
.bss:000000000020B257                 db    ? ;
.bss:000000000020B258                 db    ? ;
.bss:000000000020B259                 db    ? ;
.bss:000000000020B25A                 db    ? ;
.bss:000000000020B25B                 db    ? ;
.bss:000000000020B25C                 db    ? ;
.bss:000000000020B25D                 db    ? ;
.bss:000000000020B25E                 db    ? ;
.bss:000000000020B25F                 db    ? ;
.bss:000000000020B260                 db    ? ;
.bss:000000000020B261                 db    ? ;
.bss:000000000020B262                 db    ? ;
.bss:000000000020B263                 db    ? ;
.bss:000000000020B264                 db    ? ;
.bss:000000000020B265                 db    ? ;
.bss:000000000020B266                 db    ? ;
.bss:000000000020B267                 db    ? ;
.bss:000000000020B268                 db    ? ;
.bss:000000000020B269                 db    ? ;
.bss:000000000020B26A                 db    ? ;
.bss:000000000020B26B                 db    ? ;
.bss:000000000020B26C                 db    ? ;
.bss:000000000020B26D                 db    ? ;
.bss:000000000020B26E                 db    ? ;
.bss:000000000020B26F                 db    ? ;
.bss:000000000020B270                 db    ? ;
.bss:000000000020B271                 db    ? ;
.bss:000000000020B272                 db    ? ;
.bss:000000000020B273                 db    ? ;
.bss:000000000020B274                 db    ? ;
.bss:000000000020B275                 db    ? ;
.bss:000000000020B276                 db    ? ;
.bss:000000000020B277                 db    ? ;
.bss:000000000020B278                 db    ? ;
.bss:000000000020B279                 db    ? ;
.bss:000000000020B27A                 db    ? ;
.bss:000000000020B27B                 db    ? ;
.bss:000000000020B27C                 db    ? ;
.bss:000000000020B27D                 db    ? ;
.bss:000000000020B27E                 db    ? ;
.bss:000000000020B27F                 db    ? ;
.bss:000000000020B280                 db    ? ;
.bss:000000000020B281                 db    ? ;
.bss:000000000020B282                 db    ? ;
.bss:000000000020B283                 db    ? ;
.bss:000000000020B284                 db    ? ;
.bss:000000000020B285                 db    ? ;
.bss:000000000020B286                 db    ? ;
.bss:000000000020B287                 db    ? ;
.bss:000000000020B288                 db    ? ;
.bss:000000000020B289                 db    ? ;
.bss:000000000020B28A                 db    ? ;
.bss:000000000020B28B                 db    ? ;
.bss:000000000020B28C                 db    ? ;
.bss:000000000020B28D                 db    ? ;
.bss:000000000020B28E                 db    ? ;
.bss:000000000020B28F                 db    ? ;
.bss:000000000020B290                 db    ? ;
.bss:000000000020B291                 db    ? ;
.bss:000000000020B292                 db    ? ;
.bss:000000000020B293                 db    ? ;
.bss:000000000020B294                 db    ? ;
.bss:000000000020B295                 db    ? ;
.bss:000000000020B296                 db    ? ;
.bss:000000000020B297                 db    ? ;
.bss:000000000020B298                 db    ? ;
.bss:000000000020B299                 db    ? ;
.bss:000000000020B29A                 db    ? ;
.bss:000000000020B29B                 db    ? ;
.bss:000000000020B29C                 db    ? ;
.bss:000000000020B29D                 db    ? ;
.bss:000000000020B29E                 db    ? ;
.bss:000000000020B29F                 db    ? ;
.bss:000000000020B2A0                 db    ? ;
.bss:000000000020B2A1                 db    ? ;
.bss:000000000020B2A2                 db    ? ;
.bss:000000000020B2A3                 db    ? ;
.bss:000000000020B2A4                 db    ? ;
.bss:000000000020B2A5                 db    ? ;
.bss:000000000020B2A6                 db    ? ;
.bss:000000000020B2A7                 db    ? ;
.bss:000000000020B2A8                 db    ? ;
.bss:000000000020B2A9                 db    ? ;
.bss:000000000020B2AA                 db    ? ;
.bss:000000000020B2AB                 db    ? ;
.bss:000000000020B2AC                 db    ? ;
.bss:000000000020B2AD                 db    ? ;
.bss:000000000020B2AE                 db    ? ;
.bss:000000000020B2AF                 db    ? ;
.bss:000000000020B2B0                 db    ? ;
.bss:000000000020B2B1                 db    ? ;
.bss:000000000020B2B2                 db    ? ;
.bss:000000000020B2B3                 db    ? ;
.bss:000000000020B2B4                 db    ? ;
.bss:000000000020B2B5                 db    ? ;
.bss:000000000020B2B6                 db    ? ;
.bss:000000000020B2B7                 db    ? ;
.bss:000000000020B2B8                 db    ? ;
.bss:000000000020B2B9                 db    ? ;
.bss:000000000020B2BA                 db    ? ;
.bss:000000000020B2BB                 db    ? ;
.bss:000000000020B2BC                 db    ? ;
.bss:000000000020B2BD                 db    ? ;
.bss:000000000020B2BE                 db    ? ;
.bss:000000000020B2BF                 db    ? ;
.bss:000000000020B2C0                 db    ? ;
.bss:000000000020B2C1                 db    ? ;
.bss:000000000020B2C2                 db    ? ;
.bss:000000000020B2C3                 db    ? ;
.bss:000000000020B2C4                 db    ? ;
.bss:000000000020B2C5                 db    ? ;
.bss:000000000020B2C6                 db    ? ;
.bss:000000000020B2C7                 db    ? ;
.bss:000000000020B2C8                 db    ? ;
.bss:000000000020B2C9                 db    ? ;
.bss:000000000020B2CA                 db    ? ;
.bss:000000000020B2CB                 db    ? ;
.bss:000000000020B2CC                 db    ? ;
.bss:000000000020B2CD                 db    ? ;
.bss:000000000020B2CE                 db    ? ;
.bss:000000000020B2CF                 db    ? ;
.bss:000000000020B2D0                 db    ? ;
.bss:000000000020B2D1                 db    ? ;
.bss:000000000020B2D2                 db    ? ;
.bss:000000000020B2D3                 db    ? ;
.bss:000000000020B2D4                 db    ? ;
.bss:000000000020B2D5                 db    ? ;
.bss:000000000020B2D6                 db    ? ;
.bss:000000000020B2D7                 db    ? ;
.bss:000000000020B2D8                 db    ? ;
.bss:000000000020B2D9                 db    ? ;
.bss:000000000020B2DA                 db    ? ;
.bss:000000000020B2DB                 db    ? ;
.bss:000000000020B2DC                 db    ? ;
.bss:000000000020B2DD                 db    ? ;
.bss:000000000020B2DE                 db    ? ;
.bss:000000000020B2DF                 db    ? ;
.bss:000000000020B2E0                 db    ? ;
.bss:000000000020B2E1                 db    ? ;
.bss:000000000020B2E2                 db    ? ;
.bss:000000000020B2E3                 db    ? ;
.bss:000000000020B2E4                 db    ? ;
.bss:000000000020B2E5                 db    ? ;
.bss:000000000020B2E6                 db    ? ;
.bss:000000000020B2E7                 db    ? ;
.bss:000000000020B2E8                 db    ? ;
.bss:000000000020B2E9                 db    ? ;
.bss:000000000020B2EA                 db    ? ;
.bss:000000000020B2EB                 db    ? ;
.bss:000000000020B2EC                 db    ? ;
.bss:000000000020B2ED                 db    ? ;
.bss:000000000020B2EE                 db    ? ;
.bss:000000000020B2EF                 db    ? ;
.bss:000000000020B2F0                 db    ? ;
.bss:000000000020B2F1                 db    ? ;
.bss:000000000020B2F2                 db    ? ;
.bss:000000000020B2F3                 db    ? ;
.bss:000000000020B2F4                 db    ? ;
.bss:000000000020B2F5                 db    ? ;
.bss:000000000020B2F6                 db    ? ;
.bss:000000000020B2F7                 db    ? ;
.bss:000000000020B2F8                 db    ? ;
.bss:000000000020B2F9                 db    ? ;
.bss:000000000020B2FA                 db    ? ;
.bss:000000000020B2FB                 db    ? ;
.bss:000000000020B2FC                 db    ? ;
.bss:000000000020B2FD                 db    ? ;
.bss:000000000020B2FE                 db    ? ;
.bss:000000000020B2FF                 db    ? ;
.bss:000000000020B300 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020B300                                         ; get_quoting_style↑o ...
.bss:000000000020B310 xmmword_20B310  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020B310                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020B320 xmmword_20B320  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020B320                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020B330 qword_20B330    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020B330                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020B338 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:000000000020B338                                         ; rpl_fcntl:loc_6CBF↑w ...
.bss:000000000020B33C                 align 20h
.bss:000000000020B33C _bss            ends
.bss:000000000020B33C
.prgend:000000000020B340 ; ===========================================================================
.prgend:000000000020B340
.prgend:000000000020B340 ; Segment type: Zero-length
.prgend:000000000020B340 _prgend         segment byte public '' use64
.prgend:000000000020B340 _end            label byte
.prgend:000000000020B340 _prgend         ends
.prgend:000000000020B340
extern:000000000020B348 ; ===========================================================================
extern:000000000020B348
extern:000000000020B348 ; Segment type: Externs
extern:000000000020B348 ; extern
extern:000000000020B348 ; const __int32_t **_ctype_toupper_loc(void)
extern:000000000020B348                 extrn __ctype_toupper_loc:near
extern:000000000020B348                                         ; CODE XREF: ___ctype_toupper_loc↑j
extern:000000000020B348                                         ; DATA XREF: .got:__ctype_toupper_loc_ptr↑o
extern:000000000020B350 ; int _uflow(_IO_FILE *)
extern:000000000020B350                 extrn __uflow:near      ; CODE XREF: ___uflow↑j
extern:000000000020B350                                         ; DATA XREF: .got:__uflow_ptr↑o
extern:000000000020B358 ; void free(void *ptr)
extern:000000000020B358                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020B358                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020B360 ; void __noreturn abort(void)
extern:000000000020B360                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020B360                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020B368 ; int *_errno_location(void)
extern:000000000020B368                 extrn __errno_location:near
extern:000000000020B368                                         ; CODE XREF: ___errno_location↑j
extern:000000000020B368                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020B370 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020B370                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020B370                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020B378 ; void __noreturn exit(int status)
extern:000000000020B378                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020B378                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020B380 ; size_t _fpending(FILE *fp)
extern:000000000020B380                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020B380                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020B388 ; int fcntl(int fd, int cmd, ...)
extern:000000000020B388                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:000000000020B388                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:000000000020B390 ; char *textdomain(const char *domainname)
extern:000000000020B390                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020B390                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020B398 ; int fclose(FILE *stream)
extern:000000000020B398                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020B398                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020B3A0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020B3A0                 extrn bindtextdomain:near
extern:000000000020B3A0                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020B3A0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020B3A8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020B3A8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020B3A8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020B3B0 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020B3B0                 extrn __ctype_get_mb_cur_max:near
extern:000000000020B3B0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020B3B0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020B3B8 ; size_t strlen(const char *s)
extern:000000000020B3B8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020B3B8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020B3C0                 extrn __stack_chk_fail:near
extern:000000000020B3C0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020B3C0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020B3C8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020B3C8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020B3C8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020B3D0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020B3D0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020B3D0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020B3D8 ; char *strchr(const char *s, int c)
extern:000000000020B3D8                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000020B3D8                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000020B3E0 ; int _overflow(_IO_FILE *, int)
extern:000000000020B3E0                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:000000000020B3E0                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:000000000020B3E8 ; char *strrchr(const char *s, int c)
extern:000000000020B3E8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020B3E8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020B3F0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020B3F0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020B3F0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020B3F8 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000020B3F8                 extrn __assert_fail:near
extern:000000000020B3F8                                         ; CODE XREF: ___assert_fail↑j
extern:000000000020B3F8                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000020B400 ; void *memset(void *s, int c, size_t n)
extern:000000000020B400                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020B400                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020B408 ; int close(int fd)
extern:000000000020B408                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000020B408                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000020B410 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:000000000020B410                 extrn posix_fadvise:near
extern:000000000020B410                                         ; CODE XREF: _posix_fadvise↑j
extern:000000000020B410                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:000000000020B418 ; void *memchr(const void *s, int c, size_t n)
extern:000000000020B418                 extrn memchr:near       ; CODE XREF: _memchr↑j
extern:000000000020B418                                         ; DATA XREF: .got:memchr_ptr↑o
extern:000000000020B420 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020B420                 extrn __libc_start_main:near
extern:000000000020B420                                         ; CODE XREF: start+24↑p
extern:000000000020B420                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020B428 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020B428                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020B428                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020B430 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020B430                 extrn fputs_unlocked:near
extern:000000000020B430                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020B430                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020B438 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020B438                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020B438                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020B440 ; int strcmp(const char *s1, const char *s2)
extern:000000000020B440                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020B440                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020B448 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020B448                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020B448                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020B450 ; int fileno(FILE *stream)
extern:000000000020B450                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020B450                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020B458 ; void *malloc(size_t size)
extern:000000000020B458                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020B458                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020B460 ; int fflush(FILE *stream)
extern:000000000020B460                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020B460                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020B468 ; char *nl_langinfo(nl_item item)
extern:000000000020B468                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020B468                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020B470 ; int strcoll(const char *s1, const char *s2)
extern:000000000020B470                 extrn strcoll:near      ; CODE XREF: _strcoll↑j
extern:000000000020B470                                         ; DATA XREF: .got:strcoll_ptr↑o
extern:000000000020B478 ; char *strpbrk(const char *s, const char *accept)
extern:000000000020B478                 extrn strpbrk:near      ; CODE XREF: _strpbrk↑j
extern:000000000020B478                                         ; DATA XREF: .got:strpbrk_ptr↑o
extern:000000000020B480 ; int _freading(FILE *fp)
extern:000000000020B480                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020B480                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020B488 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000020B488                 extrn fwrite_unlocked:near
extern:000000000020B488                                         ; CODE XREF: _fwrite_unlocked↑j
extern:000000000020B488                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:000000000020B490 ; void *realloc(void *ptr, size_t size)
extern:000000000020B490                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020B490                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020B498 ; FILE *fdopen(int fd, const char *modes)
extern:000000000020B498                 extrn fdopen:near       ; CODE XREF: _fdopen↑j
extern:000000000020B498                                         ; DATA XREF: .got:fdopen_ptr↑o
extern:000000000020B4A0 ; char *setlocale(int category, const char *locale)
extern:000000000020B4A0                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020B4A0                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020B4A8                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020B4A8                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020B4B0 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020B4B0                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020B4B0                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020B4B8 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020B4B8                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020B4B8                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020B4C0 ; FILE *fopen(const char *filename, const char *modes)
extern:000000000020B4C0                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:000000000020B4C0                                         ; DATA XREF: .got:fopen_ptr↑o
extern:000000000020B4C8 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
extern:000000000020B4C8                 extrn strtoul:near      ; CODE XREF: _strtoul↑j
extern:000000000020B4C8                                         ; DATA XREF: .got:strtoul_ptr↑o
extern:000000000020B4D0 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020B4D0                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020B4D0                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020B4D8 ; void __noreturn exit(int status)
extern:000000000020B4D8                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020B4D8                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020B4E0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020B4E0                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020B4E0                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020B4E8                 extrn __fprintf_chk:near
extern:000000000020B4E8                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020B4E8                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020B4F0 ; int mbsinit(const mbstate_t *ps)
extern:000000000020B4F0                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020B4F0                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020B4F8 ; int iswprint(wint_t wc)
extern:000000000020B4F8                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020B4F8                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020B500 ; int __fastcall __cxa_finalize(void *)
extern:000000000020B500                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020B500                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020B500                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020B508 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020B508                 extrn __ctype_b_loc:near
extern:000000000020B508                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020B508                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020B510                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020B510                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020B518                 extrn __gmon_start__:near ; weak
extern:000000000020B518                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020B518                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020B520                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020B520                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020B520
extern:000000000020B520
extern:000000000020B520                 end start
