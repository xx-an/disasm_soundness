LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 880D18504B4AAD29A630FAC4DE62A7F0A250D45C2D1615EBF86D022CA97D1E5A
LOAD:0000000000000000 ; Input MD5    : EDDD72DBCC3BBDBA67756E677DF22A97
LOAD:0000000000000000 ; Input CRC32  : A38BEC1A
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/yes
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'yes.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'full-write.c'
LOAD:0000000000000000 ; Source File : 'long-options.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'safe-write.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 23BD0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 6210h                ; Size in file image
LOAD:00000000000000D8                 dq 6210h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 6BB0h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 206BB0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 4D0h                 ; Size in file image
LOAD:0000000000000110                 dq 688h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 6C78h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 206C78h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 53F0h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 53F0h                ; Physical address
LOAD:00000000000001B0                 dq 25Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 25Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 6BB0h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 206BB0h              ; Physical address
LOAD:0000000000000220                 dq 450h                 ; Size in file image
LOAD:0000000000000228                 dq 450h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0BEh, 4Eh, 11h, 39h, 97h, 22h, 0EAh, 0C1h, 68h, 8Ah ; Desc
LOAD:0000000000000284                 db 61h, 18h, 22h, 1Bh, 59h, 8Eh, 0D7h, 0Dh, 0Fh, 0D6h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 2Eh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121801200041C906h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 2Eh, 2Fh, 35h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 12F7B3C0h, 1C8BF239h, 12F7C433h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_7F0, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_7F0, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_7F0, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_7F0, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_7F0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_7F0, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aFpending - offset byte_7F0, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFwrite+1 - offset byte_7F0, 12h, 0, 0, \ ; "write"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_7F0, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFclose - offset byte_7F0, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain - offset byte_7F0, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aDcgettext - offset byte_7F0, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_7F0, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aStrlen - offset byte_7F0, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStackChkFail - offset byte_7F0, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aGetoptLong - offset byte_7F0, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aMbrtowc - offset byte_7F0, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aStrrchr - offset byte_7F0, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aLseek - offset byte_7F0, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004A8                            0>
LOAD:00000000000004C0                 Elf64_Sym <offset aMemset - offset byte_7F0, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aLibcStartMain - offset byte_7F0, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aMemcmp - offset byte_7F0, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aFputsUnlocked - offset byte_7F0, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aCalloc - offset byte_7F0, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aGmonStart - offset byte_7F0, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aMemcpy - offset byte_7F0, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aFileno - offset byte_7F0, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aMalloc - offset byte_7F0, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aFflush - offset byte_7F0, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aNlLanginfo - offset byte_7F0, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aFreading - offset byte_7F0, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aRealloc - offset byte_7F0, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aSetlocale - offset byte_7F0, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aPrintfChk - offset byte_7F0, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aError - offset byte_7F0, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000628                            0>
LOAD:0000000000000640                 Elf64_Sym <offset aFseeko - offset byte_7F0, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aCxaAtexit - offset byte_7F0, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aExit+1 - offset byte_7F0, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aFwrite - offset byte_7F0, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aFprintfChk - offset byte_7F0, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aItmRegistertmc - offset byte_7F0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aMbsinit - offset byte_7F0, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aIswprint - offset byte_7F0, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aCxaFinalize - offset byte_7F0, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aCtypeBLoc - offset byte_7F0, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aStdout - offset byte_7F0, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000730                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000748                 Elf64_Sym <offset aProgname - offset byte_7F0, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000748                            offset __bss_start, 8>
LOAD:0000000000000760                 Elf64_Sym <offset aProgramInvocat - offset byte_7F0, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000760                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000778                 Elf64_Sym <offset aPrognameFull - offset byte_7F0, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000778                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000790                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_7F0, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000790                            offset __bss_start, 8>
LOAD:00000000000007A8                 Elf64_Sym <offset aOpterr - offset byte_7F0, 11h, 0, 19h, \ ; "opterr"
LOAD:00000000000007A8                            offset opterr@@GLIBC_2_2_5, 4>
LOAD:00000000000007C0                 Elf64_Sym <offset aStderr - offset byte_7F0, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000007C0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000007D8                 Elf64_Sym <offset aOptind - offset byte_7F0, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000007D8                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000007F0 ; ELF String Table
LOAD:00000000000007F0 byte_7F0        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000007F0                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000007F1 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000AE0↓o
LOAD:00000000000007FB aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000802 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000610↑o
LOAD:000000000000080F aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000819 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000821 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000829 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000830 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000838 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000842 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000848 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000859 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000862 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:000000000000086A aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000870 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000870                                         ; LOAD:0000000000000670↑o
LOAD:0000000000000876 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000876                                         ; DATA XREF: LOAD:0000000000000760↑o
LOAD:000000000000088E aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:000000000000088E                                         ; DATA XREF: LOAD:0000000000000418↑o
LOAD:00000000000008A5 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:00000000000008AC aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000430↑o
LOAD:00000000000008B3 aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:00000000000008BA aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:00000000000008CB aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:00000000000008D2 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:00000000000008E0 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000730↑o
LOAD:00000000000008E7 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:00000000000008ED aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:00000000000008F4 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:00000000000008FB aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000902 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:000000000000090A aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000916 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000924 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:000000000000092F aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000936 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000942 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000949 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000949                                         ; LOAD:00000000000003A0↑o
LOAD:0000000000000950 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000388↑o
LOAD:000000000000095B aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:000000000000095B                                         ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000979 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000988 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000988                                         ; LOAD:00000000000003B8↑o
LOAD:0000000000000997 aOpterr         db 'opterr',0           ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:000000000000099E aLibcStartMain  db '__libc_start_main',0
LOAD:000000000000099E                                         ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:00000000000009B0 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:00000000000009B7 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000508↑o
LOAD:00000000000009C6 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000009CB aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000748↑o
LOAD:00000000000009D6 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000778↑o
LOAD:00000000000009E6 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000658↑o
LOAD:00000000000009F3 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000AF0↓o
LOAD:00000000000009FD aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000B00↓o
LOAD:0000000000000A09 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000B10↓o
LOAD:0000000000000A14 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000B20↓o
LOAD:0000000000000A1E aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000B30↓o
LOAD:0000000000000A2A aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000A2A                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000A46 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000A55 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000A55                                         ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000A6F                 align 10h
LOAD:0000000000000A70 ; ELF GNU Symbol Version Table
LOAD:0000000000000A70                 dw 0
LOAD:0000000000000A72                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000A74                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000A76                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000A78                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000A7A                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000A7C                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000A7E                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000A80                 dw 2                    ; write@@GLIBC_2.2.5
LOAD:0000000000000A82                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000A84                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000A86                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000A88                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000A8A                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000A8C                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000A8E                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000A90                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000A92                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000A94                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000A96                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000A98                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000A9A                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000A9C                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000A9E                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000AA0                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000AA2                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000AA4                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000AA6                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000AA8                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000AAA                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000AAC                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000AAE                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000AB0                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000AB2                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000AB4                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000AB6                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000AB8                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000ABA                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000ABC                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000ABE                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000AC0                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000AC2                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000AC4                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000AC6                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000AC8                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000ACA                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000ACC                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000ACE                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000AD0                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000AD2                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000AD4                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000AD6                 dw 2                    ; opterr@@GLIBC_2.2.5
LOAD:0000000000000AD8                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000ADA                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000ADC                 dw 0
LOAD:0000000000000ADE                 dw 0
LOAD:0000000000000AE0 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000AE0                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_7F0, 10h, 0> ; "libc.so.6"
LOAD:0000000000000AF0                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_7F0, \ ; "GLIBC_2.3"
LOAD:0000000000000AF0                                10h>
LOAD:0000000000000B00                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_7F0, \ ; "GLIBC_2.3.4"
LOAD:0000000000000B00                                10h>
LOAD:0000000000000B10                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_7F0, \ ; "GLIBC_2.14"
LOAD:0000000000000B10                                10h>
LOAD:0000000000000B20                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_7F0, \ ; "GLIBC_2.4"
LOAD:0000000000000B20                                10h>
LOAD:0000000000000B30                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_7F0, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000B40 ; ELF RELA Relocation Table
LOAD:0000000000000B40                 Elf64_Rela <206BB0h, 8, 17B0h> ; R_X86_64_RELATIVE +17B0h
LOAD:0000000000000B58                 Elf64_Rela <206BB8h, 8, 1770h> ; R_X86_64_RELATIVE +1770h
LOAD:0000000000000B70                 Elf64_Rela <206BC0h, 8, 4B45h> ; R_X86_64_RELATIVE +4B45h
LOAD:0000000000000B88                 Elf64_Rela <206BE0h, 8, 4B4Ah> ; R_X86_64_RELATIVE +4B4Ah
LOAD:0000000000000BA0                 Elf64_Rela <206C20h, 8, 4BB1h> ; R_X86_64_RELATIVE +4BB1h
LOAD:0000000000000BB8                 Elf64_Rela <206C28h, 8, 4BB9h> ; R_X86_64_RELATIVE +4BB9h
LOAD:0000000000000BD0                 Elf64_Rela <206C30h, 8, 4BBFh> ; R_X86_64_RELATIVE +4BBFh
LOAD:0000000000000BE8                 Elf64_Rela <206C38h, 8, 4BCCh> ; R_X86_64_RELATIVE +4BCCh
LOAD:0000000000000C00                 Elf64_Rela <206C40h, 8, 4BD9h> ; R_X86_64_RELATIVE +4BD9h
LOAD:0000000000000C18                 Elf64_Rela <206C48h, 8, 4BEDh> ; R_X86_64_RELATIVE +4BEDh
LOAD:0000000000000C30                 Elf64_Rela <206C50h, 8, 4BEFh> ; R_X86_64_RELATIVE +4BEFh
LOAD:0000000000000C48                 Elf64_Rela <206C58h, 8, 4BD2h> ; R_X86_64_RELATIVE +4BD2h
LOAD:0000000000000C60                 Elf64_Rela <206C60h, 8, 495Ch> ; R_X86_64_RELATIVE +495Ch
LOAD:0000000000000C78                 Elf64_Rela <206C68h, 8, 4BF7h> ; R_X86_64_RELATIVE +4BF7h
LOAD:0000000000000C90                 Elf64_Rela <207008h, 8, 207008h> ; R_X86_64_RELATIVE +207008h
LOAD:0000000000000CA8                 Elf64_Rela <207010h, 8, 4B2Bh> ; R_X86_64_RELATIVE +4B2Bh
LOAD:0000000000000CC0                 Elf64_Rela <207060h, 8, 207070h> ; R_X86_64_RELATIVE +207070h
LOAD:0000000000000CD8                 Elf64_Rela <207078h, 8, 207100h> ; R_X86_64_RELATIVE +207100h
LOAD:0000000000000CF0                 Elf64_Rela <206FC0h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000D08                 Elf64_Rela <206FC8h, 1500000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000D20                 Elf64_Rela <206FD0h, 1900000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000D38                 Elf64_Rela <206FD8h, 2900000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000D50                 Elf64_Rela <206FE0h, 2C00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000D68                 Elf64_Rela <207080h, 2F00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000D80                 Elf64_Rela <207088h, 2E00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000D98                 Elf64_Rela <207090h, 3500000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000DB0                 Elf64_Rela <207098h, 3100000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000DC8                 Elf64_Rela <2070A0h, 3300000005h, 0> ; R_X86_64_COPY opterr
LOAD:0000000000000DE0                 Elf64_Rela <2070C0h, 3400000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000DF8 ; ELF JMPREL Relocation Table
LOAD:0000000000000DF8                 Elf64_Rela <206E80h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000E10                 Elf64_Rela <206E88h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000E28                 Elf64_Rela <206E90h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000E40                 Elf64_Rela <206E98h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000E58                 Elf64_Rela <206EA0h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000E70                 Elf64_Rela <206EA8h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000E88                 Elf64_Rela <206EB0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT write
LOAD:0000000000000EA0                 Elf64_Rela <206EB8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000EB8                 Elf64_Rela <206EC0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000ED0                 Elf64_Rela <206EC8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000EE8                 Elf64_Rela <206ED0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000F00                 Elf64_Rela <206ED8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000F18                 Elf64_Rela <206EE0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000000F30                 Elf64_Rela <206EE8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000F48                 Elf64_Rela <206EF0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000000F60                 Elf64_Rela <206EF8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000000F78                 Elf64_Rela <206F00h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000000F90                 Elf64_Rela <206F08h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000000FA8                 Elf64_Rela <206F10h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000000FC0                 Elf64_Rela <206F18h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000000FD8                 Elf64_Rela <206F20h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000000FF0                 Elf64_Rela <206F28h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001008                 Elf64_Rela <206F30h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001020                 Elf64_Rela <206F38h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001038                 Elf64_Rela <206F40h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001050                 Elf64_Rela <206F48h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001068                 Elf64_Rela <206F50h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001080                 Elf64_Rela <206F58h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001098                 Elf64_Rela <206F60h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000010B0                 Elf64_Rela <206F68h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000010C8                 Elf64_Rela <206F70h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000010E0                 Elf64_Rela <206F78h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000010F8                 Elf64_Rela <206F80h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001110                 Elf64_Rela <206F88h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001128                 Elf64_Rela <206F90h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001140                 Elf64_Rela <206F98h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001158                 Elf64_Rela <206FA0h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001170                 Elf64_Rela <206FA8h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001188                 Elf64_Rela <206FB0h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000011A0                 Elf64_Rela <206FB8h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000011A0 LOAD            ends
LOAD:00000000000011A0
.init:00000000000011B8 ; ===========================================================================
.init:00000000000011B8
.init:00000000000011B8 ; Segment type: Pure code
.init:00000000000011B8 ; Segment permissions: Read/Execute
.init:00000000000011B8 _init           segment dword public 'CODE' use64
.init:00000000000011B8                 assume cs:_init
.init:00000000000011B8                 ;org 11B8h
.init:00000000000011B8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000011B8
.init:00000000000011B8 ; =============== S U B R O U T I N E =======================================
.init:00000000000011B8
.init:00000000000011B8
.init:00000000000011B8                 public _init_proc
.init:00000000000011B8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000011B8                 sub     rsp, 8          ; _init
.init:00000000000011BC                 mov     rax, cs:__gmon_start___ptr
.init:00000000000011C3                 test    rax, rax
.init:00000000000011C6                 jz      short loc_11CA
.init:00000000000011C8                 call    rax ; __gmon_start__
.init:00000000000011CA
.init:00000000000011CA loc_11CA:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000011CA                 add     rsp, 8
.init:00000000000011CE                 retn
.init:00000000000011CE _init_proc      endp
.init:00000000000011CE
.init:00000000000011CE _init           ends
.init:00000000000011CE
LOAD:00000000000011CF ; ===========================================================================
LOAD:00000000000011CF
LOAD:00000000000011CF ; Segment type: Pure code
LOAD:00000000000011CF ; Segment permissions: Read/Execute
LOAD:00000000000011CF LOAD            segment byte public 'CODE' use64
LOAD:00000000000011CF                 assume cs:LOAD
LOAD:00000000000011CF                 ;org 11CFh
LOAD:00000000000011CF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000011CF                 align 10h
LOAD:00000000000011CF LOAD            ends
LOAD:00000000000011CF
.plt:00000000000011D0 ; ===========================================================================
.plt:00000000000011D0
.plt:00000000000011D0 ; Segment type: Pure code
.plt:00000000000011D0 ; Segment permissions: Read/Execute
.plt:00000000000011D0 _plt            segment para public 'CODE' use64
.plt:00000000000011D0                 assume cs:_plt
.plt:00000000000011D0                 ;org 11D0h
.plt:00000000000011D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000011D0
.plt:00000000000011D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011D0
.plt:00000000000011D0
.plt:00000000000011D0 sub_11D0        proc near               ; CODE XREF: .plt:00000000000011EB↓j
.plt:00000000000011D0                                         ; .plt:00000000000011FB↓j ...
.plt:00000000000011D0 ; __unwind {
.plt:00000000000011D0                 push    cs:qword_206E70
.plt:00000000000011D6                 jmp     cs:qword_206E78
.plt:00000000000011D6 sub_11D0        endp
.plt:00000000000011D6
.plt:00000000000011D6 ; ---------------------------------------------------------------------------
.plt:00000000000011DC                 align 20h
.plt:00000000000011E0
.plt:00000000000011E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011E0
.plt:00000000000011E0 ; Attributes: thunk
.plt:00000000000011E0
.plt:00000000000011E0 ; void free(void *ptr)
.plt:00000000000011E0 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:00000000000011E0                                         ; quotearg_free+37↓p ...
.plt:00000000000011E0                 jmp     cs:free_ptr
.plt:00000000000011E0 _free           endp
.plt:00000000000011E0
.plt:00000000000011E6 ; ---------------------------------------------------------------------------
.plt:00000000000011E6                 push    0
.plt:00000000000011EB                 jmp     sub_11D0
.plt:00000000000011F0
.plt:00000000000011F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011F0
.plt:00000000000011F0 ; Attributes: noreturn thunk
.plt:00000000000011F0
.plt:00000000000011F0 ; void __noreturn abort(void)
.plt:00000000000011F0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000011F0                                         ; quotearg_buffer_restyled:def_2101↓p ...
.plt:00000000000011F0                 jmp     cs:abort_ptr
.plt:00000000000011F0 _abort          endp
.plt:00000000000011F0
.plt:00000000000011F6 ; ---------------------------------------------------------------------------
.plt:00000000000011F6                 push    1
.plt:00000000000011FB                 jmp     sub_11D0
.plt:0000000000001200
.plt:0000000000001200 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001200
.plt:0000000000001200 ; Attributes: thunk
.plt:0000000000001200
.plt:0000000000001200 ; int *__errno_location(void)
.plt:0000000000001200 ___errno_location proc near             ; CODE XREF: main+201↓p
.plt:0000000000001200                                         ; close_stdout+16↓p ...
.plt:0000000000001200                 jmp     cs:__errno_location_ptr
.plt:0000000000001200 ___errno_location endp
.plt:0000000000001200
.plt:0000000000001206 ; ---------------------------------------------------------------------------
.plt:0000000000001206                 push    2
.plt:000000000000120B                 jmp     sub_11D0
.plt:0000000000001210
.plt:0000000000001210 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001210
.plt:0000000000001210 ; Attributes: thunk
.plt:0000000000001210
.plt:0000000000001210 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001210 _strncmp        proc near               ; CODE XREF: usage+204↓p
.plt:0000000000001210                                         ; usage+2C5↓p
.plt:0000000000001210                 jmp     cs:strncmp_ptr
.plt:0000000000001210 _strncmp        endp
.plt:0000000000001210
.plt:0000000000001216 ; ---------------------------------------------------------------------------
.plt:0000000000001216                 push    3
.plt:000000000000121B                 jmp     sub_11D0
.plt:0000000000001220
.plt:0000000000001220 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001220
.plt:0000000000001220 ; Attributes: noreturn thunk
.plt:0000000000001220
.plt:0000000000001220 ; void __noreturn _exit(int status)
.plt:0000000000001220 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001220                 jmp     cs:_exit_ptr
.plt:0000000000001220 __exit          endp
.plt:0000000000001220
.plt:0000000000001226 ; ---------------------------------------------------------------------------
.plt:0000000000001226                 push    4
.plt:000000000000122B                 jmp     sub_11D0
.plt:0000000000001230
.plt:0000000000001230 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001230
.plt:0000000000001230 ; Attributes: thunk
.plt:0000000000001230
.plt:0000000000001230 ; size_t __fpending(FILE *fp)
.plt:0000000000001230 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001230                 jmp     cs:__fpending_ptr
.plt:0000000000001230 ___fpending     endp
.plt:0000000000001230
.plt:0000000000001236 ; ---------------------------------------------------------------------------
.plt:0000000000001236                 push    5
.plt:000000000000123B                 jmp     sub_11D0
.plt:0000000000001240
.plt:0000000000001240 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001240
.plt:0000000000001240 ; Attributes: thunk
.plt:0000000000001240
.plt:0000000000001240 ; ssize_t write(int fd, const void *buf, size_t n)
.plt:0000000000001240 _write          proc near               ; CODE XREF: safe_write+21↓p
.plt:0000000000001240                 jmp     cs:write_ptr
.plt:0000000000001240 _write          endp
.plt:0000000000001240
.plt:0000000000001246 ; ---------------------------------------------------------------------------
.plt:0000000000001246                 push    6
.plt:000000000000124B                 jmp     sub_11D0
.plt:0000000000001250
.plt:0000000000001250 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001250
.plt:0000000000001250 ; Attributes: thunk
.plt:0000000000001250
.plt:0000000000001250 ; char *textdomain(const char *domainname)
.plt:0000000000001250 _textdomain     proc near               ; CODE XREF: main+47↓p
.plt:0000000000001250                 jmp     cs:textdomain_ptr
.plt:0000000000001250 _textdomain     endp
.plt:0000000000001250
.plt:0000000000001256 ; ---------------------------------------------------------------------------
.plt:0000000000001256                 push    7
.plt:000000000000125B                 jmp     sub_11D0
.plt:0000000000001260
.plt:0000000000001260 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001260
.plt:0000000000001260 ; Attributes: thunk
.plt:0000000000001260
.plt:0000000000001260 ; int fclose(FILE *stream)
.plt:0000000000001260 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001260                                         ; rpl_fclose+6B↓j
.plt:0000000000001260                 jmp     cs:fclose_ptr
.plt:0000000000001260 _fclose         endp
.plt:0000000000001260
.plt:0000000000001266 ; ---------------------------------------------------------------------------
.plt:0000000000001266                 push    8
.plt:000000000000126B                 jmp     sub_11D0
.plt:0000000000001270
.plt:0000000000001270 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001270
.plt:0000000000001270 ; Attributes: thunk
.plt:0000000000001270
.plt:0000000000001270 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001270 _bindtextdomain proc near               ; CODE XREF: main+3B↓p
.plt:0000000000001270                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001270 _bindtextdomain endp
.plt:0000000000001270
.plt:0000000000001276 ; ---------------------------------------------------------------------------
.plt:0000000000001276                 push    9
.plt:000000000000127B                 jmp     sub_11D0
.plt:0000000000001280
.plt:0000000000001280 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001280
.plt:0000000000001280 ; Attributes: thunk
.plt:0000000000001280
.plt:0000000000001280 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001280 _dcgettext      proc near               ; CODE XREF: main+1F9↓p
.plt:0000000000001280                                         ; usage+38↓p ...
.plt:0000000000001280                 jmp     cs:dcgettext_ptr
.plt:0000000000001280 _dcgettext      endp
.plt:0000000000001280
.plt:0000000000001286 ; ---------------------------------------------------------------------------
.plt:0000000000001286                 push    0Ah
.plt:000000000000128B                 jmp     sub_11D0
.plt:0000000000001290
.plt:0000000000001290 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001290
.plt:0000000000001290 ; Attributes: thunk
.plt:0000000000001290
.plt:0000000000001290 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001290 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001290                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001290 ___ctype_get_mb_cur_max endp
.plt:0000000000001290
.plt:0000000000001296 ; ---------------------------------------------------------------------------
.plt:0000000000001296                 push    0Bh
.plt:000000000000129B                 jmp     sub_11D0
.plt:00000000000012A0
.plt:00000000000012A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012A0
.plt:00000000000012A0 ; Attributes: thunk
.plt:00000000000012A0
.plt:00000000000012A0 ; size_t strlen(const char *s)
.plt:00000000000012A0 _strlen         proc near               ; CODE XREF: main+F3↓p
.plt:00000000000012A0                                         ; main+15C↓p ...
.plt:00000000000012A0                 jmp     cs:strlen_ptr
.plt:00000000000012A0 _strlen         endp
.plt:00000000000012A0
.plt:00000000000012A6 ; ---------------------------------------------------------------------------
.plt:00000000000012A6                 push    0Ch
.plt:00000000000012AB                 jmp     sub_11D0
.plt:00000000000012B0
.plt:00000000000012B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012B0
.plt:00000000000012B0 ; Attributes: noreturn thunk
.plt:00000000000012B0
.plt:00000000000012B0 ___stack_chk_fail proc near             ; CODE XREF: parse_long_options:loc_1D9A↓p
.plt:00000000000012B0                                         ; parse_gnu_standard_options_only:loc_1ED6↓p ...
.plt:00000000000012B0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000012B0 ___stack_chk_fail endp
.plt:00000000000012B0
.plt:00000000000012B6 ; ---------------------------------------------------------------------------
.plt:00000000000012B6                 push    0Dh
.plt:00000000000012BB                 jmp     sub_11D0
.plt:00000000000012C0
.plt:00000000000012C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012C0
.plt:00000000000012C0 ; Attributes: thunk
.plt:00000000000012C0
.plt:00000000000012C0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000012C0 _getopt_long    proc near               ; CODE XREF: parse_long_options+C6↓p
.plt:00000000000012C0                                         ; parse_gnu_standard_options_only+9A↓p
.plt:00000000000012C0                 jmp     cs:getopt_long_ptr
.plt:00000000000012C0 _getopt_long    endp
.plt:00000000000012C0
.plt:00000000000012C6 ; ---------------------------------------------------------------------------
.plt:00000000000012C6                 push    0Eh
.plt:00000000000012CB                 jmp     sub_11D0
.plt:00000000000012D0
.plt:00000000000012D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012D0
.plt:00000000000012D0 ; Attributes: thunk
.plt:00000000000012D0
.plt:00000000000012D0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000012D0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000012D0                 jmp     cs:mbrtowc_ptr
.plt:00000000000012D0 _mbrtowc        endp
.plt:00000000000012D0
.plt:00000000000012D6 ; ---------------------------------------------------------------------------
.plt:00000000000012D6                 push    0Fh
.plt:00000000000012DB                 jmp     sub_11D0
.plt:00000000000012E0
.plt:00000000000012E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012E0
.plt:00000000000012E0 ; Attributes: thunk
.plt:00000000000012E0
.plt:00000000000012E0 ; char *strrchr(const char *s, int c)
.plt:00000000000012E0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000012E0                 jmp     cs:strrchr_ptr
.plt:00000000000012E0 _strrchr        endp
.plt:00000000000012E0
.plt:00000000000012E6 ; ---------------------------------------------------------------------------
.plt:00000000000012E6                 push    10h
.plt:00000000000012EB                 jmp     sub_11D0
.plt:00000000000012F0
.plt:00000000000012F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012F0
.plt:00000000000012F0 ; Attributes: thunk
.plt:00000000000012F0
.plt:00000000000012F0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000012F0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000012F0                                         ; rpl_fseeko+3B↓p
.plt:00000000000012F0                 jmp     cs:lseek_ptr
.plt:00000000000012F0 _lseek          endp
.plt:00000000000012F0
.plt:00000000000012F6 ; ---------------------------------------------------------------------------
.plt:00000000000012F6                 push    11h
.plt:00000000000012FB                 jmp     sub_11D0
.plt:0000000000001300
.plt:0000000000001300 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001300
.plt:0000000000001300 ; Attributes: thunk
.plt:0000000000001300
.plt:0000000000001300 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001300 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001300                                         ; xzalloc+12↓j
.plt:0000000000001300                 jmp     cs:memset_ptr
.plt:0000000000001300 _memset         endp
.plt:0000000000001300
.plt:0000000000001306 ; ---------------------------------------------------------------------------
.plt:0000000000001306                 push    12h
.plt:000000000000130B                 jmp     sub_11D0
.plt:0000000000001310
.plt:0000000000001310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001310
.plt:0000000000001310 ; Attributes: thunk
.plt:0000000000001310
.plt:0000000000001310 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001310 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001310                 jmp     cs:memcmp_ptr
.plt:0000000000001310 _memcmp         endp
.plt:0000000000001310
.plt:0000000000001316 ; ---------------------------------------------------------------------------
.plt:0000000000001316                 push    13h
.plt:000000000000131B                 jmp     sub_11D0
.plt:0000000000001320
.plt:0000000000001320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001320
.plt:0000000000001320 ; Attributes: thunk
.plt:0000000000001320
.plt:0000000000001320 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001320 _fputs_unlocked proc near               ; CODE XREF: usage+A0↓p
.plt:0000000000001320                                         ; usage+C5↓p ...
.plt:0000000000001320                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001320 _fputs_unlocked endp
.plt:0000000000001320
.plt:0000000000001326 ; ---------------------------------------------------------------------------
.plt:0000000000001326                 push    14h
.plt:000000000000132B                 jmp     sub_11D0
.plt:0000000000001330
.plt:0000000000001330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001330
.plt:0000000000001330 ; Attributes: thunk
.plt:0000000000001330
.plt:0000000000001330 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001330 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001330                 jmp     cs:calloc_ptr
.plt:0000000000001330 _calloc         endp
.plt:0000000000001330
.plt:0000000000001336 ; ---------------------------------------------------------------------------
.plt:0000000000001336                 push    15h
.plt:000000000000133B                 jmp     sub_11D0
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340 ; Attributes: thunk
.plt:0000000000001340
.plt:0000000000001340 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001340 _memcpy         proc near               ; CODE XREF: main+176↓p
.plt:0000000000001340                                         ; main+1C1↓p ...
.plt:0000000000001340                 jmp     cs:memcpy_ptr
.plt:0000000000001340 _memcpy         endp
.plt:0000000000001340
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:0000000000001346                 push    16h
.plt:000000000000134B                 jmp     sub_11D0
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: thunk
.plt:0000000000001350
.plt:0000000000001350 ; int fileno(FILE *stream)
.plt:0000000000001350 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001350                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001350                 jmp     cs:fileno_ptr
.plt:0000000000001350 _fileno         endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    17h
.plt:000000000000135B                 jmp     sub_11D0
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: thunk
.plt:0000000000001360
.plt:0000000000001360 ; void *malloc(size_t size)
.plt:0000000000001360 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001360                 jmp     cs:malloc_ptr
.plt:0000000000001360 _malloc         endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    18h
.plt:000000000000136B                 jmp     sub_11D0
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370 ; Attributes: thunk
.plt:0000000000001370
.plt:0000000000001370 ; int fflush(FILE *stream)
.plt:0000000000001370 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001370                                         ; rpl_fflush+3B↓j
.plt:0000000000001370                 jmp     cs:fflush_ptr
.plt:0000000000001370 _fflush         endp
.plt:0000000000001370
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:0000000000001376                 push    19h
.plt:000000000000137B                 jmp     sub_11D0
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: thunk
.plt:0000000000001380
.plt:0000000000001380 ; char *nl_langinfo(nl_item item)
.plt:0000000000001380 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001380                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001380 _nl_langinfo    endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    1Ah
.plt:000000000000138B                 jmp     sub_11D0
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: thunk
.plt:0000000000001390
.plt:0000000000001390 ; int __freading(FILE *fp)
.plt:0000000000001390 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001390                                         ; rpl_fflush+9↓p
.plt:0000000000001390                 jmp     cs:__freading_ptr
.plt:0000000000001390 ___freading     endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    1Bh
.plt:000000000000139B                 jmp     sub_11D0
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000013A0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000013A0                 jmp     cs:realloc_ptr
.plt:00000000000013A0 _realloc        endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    1Ch
.plt:00000000000013AB                 jmp     sub_11D0
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ; char *setlocale(int category, const char *locale)
.plt:00000000000013B0 _setlocale      proc near               ; CODE XREF: main+28↓p
.plt:00000000000013B0                                         ; usage+1EB↓p ...
.plt:00000000000013B0                 jmp     cs:setlocale_ptr
.plt:00000000000013B0 _setlocale      endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    1Dh
.plt:00000000000013BB                 jmp     sub_11D0
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ___printf_chk   proc near               ; CODE XREF: usage+7B↓p
.plt:00000000000013C0                                         ; usage+1DF↓p ...
.plt:00000000000013C0                 jmp     cs:__printf_chk_ptr
.plt:00000000000013C0 ___printf_chk   endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    1Eh
.plt:00000000000013CB                 jmp     sub_11D0
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000013D0 _error          proc near               ; CODE XREF: main+20F↓p
.plt:00000000000013D0                                         ; close_stdout+7D↓p ...
.plt:00000000000013D0                 jmp     cs:error_ptr
.plt:00000000000013D0 _error          endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    1Fh
.plt:00000000000013DB                 jmp     sub_11D0
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000013E0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_479A↓j
.plt:00000000000013E0                 jmp     cs:fseeko_ptr
.plt:00000000000013E0 _fseeko         endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    20h ; ' '
.plt:00000000000013EB                 jmp     sub_11D0
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:00000000000013F0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:00000000000013F0                 jmp     cs:__cxa_atexit_ptr
.plt:00000000000013F0 ___cxa_atexit   endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    21h ; '!'
.plt:00000000000013FB                 jmp     sub_11D0
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: noreturn thunk
.plt:0000000000001400
.plt:0000000000001400 ; void __noreturn exit(int status)
.plt:0000000000001400 _exit           proc near               ; CODE XREF: usage+58↓p
.plt:0000000000001400                                         ; parse_long_options+122↓p ...
.plt:0000000000001400                 jmp     cs:exit_ptr
.plt:0000000000001400 _exit           endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    22h ; '"'
.plt:000000000000140B                 jmp     sub_11D0
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001410 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001410                 jmp     cs:fwrite_ptr
.plt:0000000000001410 _fwrite         endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    23h ; '#'
.plt:000000000000141B                 jmp     sub_11D0
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001420                                         ; version_etc_arn+37↓p ...
.plt:0000000000001420                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001420 ___fprintf_chk  endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    24h ; '$'
.plt:000000000000142B                 jmp     sub_11D0
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001430 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001430                 jmp     cs:mbsinit_ptr
.plt:0000000000001430 _mbsinit        endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    25h ; '%'
.plt:000000000000143B                 jmp     sub_11D0
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; int iswprint(wint_t wc)
.plt:0000000000001440 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001440                 jmp     cs:iswprint_ptr
.plt:0000000000001440 _iswprint       endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    26h ; '&'
.plt:000000000000144B                 jmp     sub_11D0
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001450 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001450                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001450 ___ctype_b_loc  endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    27h ; '''
.plt:000000000000145B                 jmp     sub_11D0
.plt:000000000000145B ; } // starts at 11D0
.plt:000000000000145B _plt            ends
.plt:000000000000145B
.plt.got:0000000000001460 ; ===========================================================================
.plt.got:0000000000001460
.plt.got:0000000000001460 ; Segment type: Pure code
.plt.got:0000000000001460 ; Segment permissions: Read/Execute
.plt.got:0000000000001460 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001460                 assume cs:_plt_got
.plt.got:0000000000001460                 ;org 1460h
.plt.got:0000000000001460                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001460
.plt.got:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001460
.plt.got:0000000000001460 ; Attributes: thunk
.plt.got:0000000000001460
.plt.got:0000000000001460 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001460 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001460 ; __unwind {
.plt.got:0000000000001460                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001460 __cxa_finalize  endp
.plt.got:0000000000001460
.plt.got:0000000000001460 ; ---------------------------------------------------------------------------
.plt.got:0000000000001466                 align 8
.plt.got:0000000000001466 ; } // starts at 1460
.plt.got:0000000000001466 _plt_got        ends
.plt.got:0000000000001466
LOAD:0000000000001468 ; ===========================================================================
LOAD:0000000000001468
LOAD:0000000000001468 ; Segment type: Pure code
LOAD:0000000000001468 ; Segment permissions: Read/Execute
LOAD:0000000000001468 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001468                 assume cs:LOAD
LOAD:0000000000001468                 ;org 1468h
LOAD:0000000000001468                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001468                 align 10h
LOAD:0000000000001468 LOAD            ends
LOAD:0000000000001468
.text:0000000000001470 ; ===========================================================================
.text:0000000000001470
.text:0000000000001470 ; Segment type: Pure code
.text:0000000000001470 ; Segment permissions: Read/Execute
.text:0000000000001470 _text           segment para public 'CODE' use64
.text:0000000000001470                 assume cs:_text
.text:0000000000001470                 ;org 1470h
.text:0000000000001470                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001470
.text:0000000000001470 ; =============== S U B R O U T I N E =======================================
.text:0000000000001470
.text:0000000000001470
.text:0000000000001470 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001470                 public main
.text:0000000000001470 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001470
.text:0000000000001470 var_48          = qword ptr -48h
.text:0000000000001470 src             = qword ptr -40h
.text:0000000000001470
.text:0000000000001470 ; __unwind {
.text:0000000000001470                 push    r15
.text:0000000000001472                 push    r14
.text:0000000000001474                 push    r13
.text:0000000000001476                 push    r12
.text:0000000000001478                 mov     r12d, edi
.text:000000000000147B                 push    rbp
.text:000000000000147C                 push    rbx
.text:000000000000147D                 mov     rbx, rsi
.text:0000000000001480                 sub     rsp, 18h
.text:0000000000001484                 mov     rdi, [rsi]
.text:0000000000001487                 call    set_program_name
.text:000000000000148C                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001493                 mov     edi, 6          ; category
.text:0000000000001498                 call    _setlocale
.text:000000000000149D                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:00000000000014A4                 lea     rdi, domainname ; "coreutils"
.text:00000000000014AB                 call    _bindtextdomain
.text:00000000000014B0                 lea     rdi, domainname ; "coreutils"
.text:00000000000014B7                 call    _textdomain
.text:00000000000014BC                 lea     rdi, close_stdout
.text:00000000000014C3                 call    atexit
.text:00000000000014C8                 lea     rax, aDavidMackenzie ; "David MacKenzie"
.text:00000000000014CF                 sub     rsp, 8
.text:00000000000014D3                 mov     r8, cs:Version
.text:00000000000014DA                 push    0
.text:00000000000014DC                 lea     rdx, unk_48A4
.text:00000000000014E3                 lea     rcx, unk_491E
.text:00000000000014EA                 push    rax
.text:00000000000014EB                 lea     rax, usage
.text:00000000000014F2                 mov     r9d, 1
.text:00000000000014F8                 mov     rsi, rbx
.text:00000000000014FB                 mov     edi, r12d
.text:00000000000014FE                 push    rax
.text:00000000000014FF                 xor     eax, eax
.text:0000000000001501                 call    parse_gnu_standard_options_only
.text:0000000000001506                 movsxd  rdx, cs:optind@@GLIBC_2_2_5
.text:000000000000150D                 mov     rax, rdx
.text:0000000000001510                 lea     rbp, [rbx+rdx*8]
.text:0000000000001514                 movsxd  rdx, r12d
.text:0000000000001517                 lea     rdx, [rbx+rdx*8]
.text:000000000000151B                 mov     [rsp+68h+var_48], rdx
.text:0000000000001520                 add     rsp, 20h
.text:0000000000001524                 cmp     eax, r12d
.text:0000000000001527                 jnz     short loc_153F
.text:0000000000001529                 mov     rax, rdx
.text:000000000000152C                 lea     rdx, aY         ; "y"
.text:0000000000001533                 add     rax, 8
.text:0000000000001537                 mov     [rax-8], rdx
.text:000000000000153B                 mov     [rsp+48h+var_48], rax
.text:000000000000153F
.text:000000000000153F loc_153F:                               ; CODE XREF: main+B7↑j
.text:000000000000153F                 cmp     [rsp+48h+var_48], rbp
.text:0000000000001543                 jbe     loc_16A0
.text:0000000000001549                 mov     r13, [rbp+0]
.text:000000000000154D                 mov     rbx, rbp
.text:0000000000001550                 mov     r15d, 1
.text:0000000000001556                 xor     r12d, r12d
.text:0000000000001559                 mov     r14, r13
.text:000000000000155C
.text:000000000000155C loc_155C:                               ; CODE XREF: main+117↓j
.text:000000000000155C                 mov     rdi, r14        ; s
.text:000000000000155F                 add     rbx, 8
.text:0000000000001563                 call    _strlen
.text:0000000000001568                 add     rax, 1
.text:000000000000156C                 add     r12, rax
.text:000000000000156F                 cmp     rbx, [rsp+48h+var_48]
.text:0000000000001573                 jnb     short loc_1590
.text:0000000000001575                 add     rax, r14
.text:0000000000001578                 mov     r14, [rbx]
.text:000000000000157B                 cmp     rax, r14
.text:000000000000157E                 mov     eax, 0
.text:0000000000001583                 cmovnz  r15d, eax
.text:0000000000001587                 jmp     short loc_155C
.text:0000000000001587 ; ---------------------------------------------------------------------------
.text:0000000000001589                 align 10h
.text:0000000000001590
.text:0000000000001590 loc_1590:                               ; CODE XREF: main+103↑j
.text:0000000000001590                 cmp     r12, 1000h
.text:0000000000001597                 jbe     short loc_15ED
.text:0000000000001599                 test    r15b, r15b
.text:000000000000159C                 jz      short loc_15F3
.text:000000000000159E
.text:000000000000159E loc_159E:                               ; CODE XREF: main+191↓j
.text:000000000000159E                 xor     ebx, ebx
.text:00000000000015A0                 jmp     short loc_15C0
.text:00000000000015A0 ; ---------------------------------------------------------------------------
.text:00000000000015A2                 align 8
.text:00000000000015A8
.text:00000000000015A8 loc_15A8:                               ; CODE XREF: main+16C↓j
.text:00000000000015A8                                         ; main+17B↓j
.text:00000000000015A8                 lea     rax, [r14+rbx]
.text:00000000000015AC                 add     rbp, 8
.text:00000000000015B0                 lea     rbx, [rax+1]
.text:00000000000015B4                 add     rax, r13
.text:00000000000015B7                 cmp     [rsp+48h+var_48], rbp
.text:00000000000015BB                 mov     byte ptr [rax], 20h ; ' '
.text:00000000000015BE                 jbe     short loc_1608
.text:00000000000015C0
.text:00000000000015C0 loc_15C0:                               ; CODE XREF: main+130↑j
.text:00000000000015C0                 mov     rsi, [rbp+0]
.text:00000000000015C4                 mov     rdi, rsi        ; s
.text:00000000000015C7                 mov     [rsp+48h+src], rsi
.text:00000000000015CC                 call    _strlen
.text:00000000000015D1                 test    r15b, r15b
.text:00000000000015D4                 mov     r14, rax
.text:00000000000015D7                 mov     rsi, [rsp+48h+src] ; src
.text:00000000000015DC                 jnz     short loc_15A8
.text:00000000000015DE                 lea     rdi, [r13+rbx+0] ; dest
.text:00000000000015E3                 mov     rdx, rax        ; n
.text:00000000000015E6                 call    _memcpy
.text:00000000000015EB                 jmp     short loc_15A8
.text:00000000000015ED ; ---------------------------------------------------------------------------
.text:00000000000015ED
.text:00000000000015ED loc_15ED:                               ; CODE XREF: main+127↑j
.text:00000000000015ED                 mov     r12d, 2000h
.text:00000000000015F3
.text:00000000000015F3 loc_15F3:                               ; CODE XREF: main+12C↑j
.text:00000000000015F3                 mov     rdi, r12
.text:00000000000015F6                 xor     r15d, r15d
.text:00000000000015F9                 call    xmalloc
.text:00000000000015FE                 mov     r13, rax
.text:0000000000001601                 jmp     short loc_159E
.text:0000000000001601 ; ---------------------------------------------------------------------------
.text:0000000000001603                 align 8
.text:0000000000001608
.text:0000000000001608 loc_1608:                               ; CODE XREF: main+14E↑j
.text:0000000000001608                 xor     edx, edx
.text:000000000000160A                 mov     byte ptr [rax], 0Ah
.text:000000000000160D                 mov     rax, r12
.text:0000000000001610                 div     rbx
.text:0000000000001613                 mov     rbp, rax
.text:0000000000001616                 mov     r12, rax
.text:0000000000001619                 sub     rbp, 1
.text:000000000000161D                 jz      short loc_1646
.text:000000000000161F                 lea     rcx, [r13+rbx+0]
.text:0000000000001624                 nop     dword ptr [rax+00h]
.text:0000000000001628
.text:0000000000001628 loc_1628:                               ; CODE XREF: main+1D0↓j
.text:0000000000001628                 mov     rdi, rcx        ; dest
.text:000000000000162B                 mov     rdx, rbx        ; n
.text:000000000000162E                 mov     rsi, r13        ; src
.text:0000000000001631                 call    _memcpy
.text:0000000000001636                 mov     rcx, rax
.text:0000000000001639                 add     rcx, rbx
.text:000000000000163C                 sub     rbp, 1
.text:0000000000001640                 jnz     short loc_1628
.text:0000000000001642                 imul    rbx, r12
.text:0000000000001646
.text:0000000000001646 loc_1646:                               ; CODE XREF: main+1AD↑j
.text:0000000000001646                                         ; main+1E9↓j
.text:0000000000001646                 mov     rdx, rbx        ; n
.text:0000000000001649                 mov     rsi, r13        ; buf
.text:000000000000164C                 mov     edi, 1          ; fd
.text:0000000000001651                 call    full_write
.text:0000000000001656                 cmp     rax, rbx
.text:0000000000001659                 jz      short loc_1646
.text:000000000000165B                 lea     rsi, msgid      ; "standard output"
.text:0000000000001662                 mov     edx, 5          ; category
.text:0000000000001667                 xor     edi, edi        ; domainname
.text:0000000000001669                 call    _dcgettext
.text:000000000000166E                 mov     rbx, rax
.text:0000000000001671                 call    ___errno_location
.text:0000000000001676                 mov     esi, [rax]      ; errnum
.text:0000000000001678                 mov     rdx, rbx        ; format
.text:000000000000167B                 xor     eax, eax
.text:000000000000167D                 xor     edi, edi        ; status
.text:000000000000167F                 call    _error
.text:0000000000001684                 add     rsp, 18h
.text:0000000000001688                 mov     eax, 1
.text:000000000000168D                 pop     rbx
.text:000000000000168E                 pop     rbp
.text:000000000000168F                 pop     r12
.text:0000000000001691                 pop     r13
.text:0000000000001693                 pop     r14
.text:0000000000001695                 pop     r15
.text:0000000000001697                 retn
.text:0000000000001697 ; ---------------------------------------------------------------------------
.text:0000000000001698                 align 20h
.text:00000000000016A0
.text:00000000000016A0 loc_16A0:                               ; CODE XREF: main+D3↑j
.text:00000000000016A0                 mov     edi, 2000h
.text:00000000000016A5                 call    xmalloc
.text:00000000000016AA                 mov     byte ptr [rax-1], 0Ah
.text:00000000000016AE                 ud2
.text:00000000000016AE ; } // starts at 1470
.text:00000000000016AE main            endp
.text:00000000000016AE
.text:00000000000016B0
.text:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000016B0
.text:00000000000016B0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000016B0
.text:00000000000016B0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000016B0                 public start
.text:00000000000016B0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000016B0 ; __unwind {
.text:00000000000016B0                 xor     ebp, ebp
.text:00000000000016B2                 mov     r9, rdx         ; rtld_fini
.text:00000000000016B5                 pop     rsi             ; argc
.text:00000000000016B6                 mov     rdx, rsp        ; ubp_av
.text:00000000000016B9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000016BD                 push    rax
.text:00000000000016BE                 push    rsp             ; stack_end
.text:00000000000016BF                 lea     r8, __libc_csu_fini ; fini
.text:00000000000016C6                 lea     rcx, __libc_csu_init ; init
.text:00000000000016CD                 lea     rdi, main       ; main
.text:00000000000016D4                 call    cs:__libc_start_main_ptr
.text:00000000000016DA                 hlt
.text:00000000000016DA ; } // starts at 16B0
.text:00000000000016DA start           endp
.text:00000000000016DA
.text:00000000000016DA ; ---------------------------------------------------------------------------
.text:00000000000016DB                 align 20h
.text:00000000000016E0
.text:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000016E0
.text:00000000000016E0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000016E0
.text:00000000000016E0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1793↓p
.text:00000000000016E0                 lea     rdi, __bss_start
.text:00000000000016E7                 push    rbp
.text:00000000000016E8                 lea     rax, __bss_start
.text:00000000000016EF                 cmp     rax, rdi
.text:00000000000016F2                 mov     rbp, rsp
.text:00000000000016F5                 jz      short loc_1710
.text:00000000000016F7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000016FE                 test    rax, rax
.text:0000000000001701                 jz      short loc_1710
.text:0000000000001703                 pop     rbp
.text:0000000000001704                 jmp     rax
.text:0000000000001704 ; ---------------------------------------------------------------------------
.text:0000000000001706                 align 10h
.text:0000000000001710
.text:0000000000001710 loc_1710:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001710                                         ; deregister_tm_clones+21↑j
.text:0000000000001710                 pop     rbp
.text:0000000000001711                 retn
.text:0000000000001711 deregister_tm_clones endp
.text:0000000000001711
.text:0000000000001711 ; ---------------------------------------------------------------------------
.text:0000000000001712                 align 20h
.text:0000000000001720
.text:0000000000001720 ; =============== S U B R O U T I N E =======================================
.text:0000000000001720
.text:0000000000001720 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001720
.text:0000000000001720 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001720                 lea     rdi, __bss_start
.text:0000000000001727                 lea     rsi, __bss_start
.text:000000000000172E                 push    rbp
.text:000000000000172F                 sub     rsi, rdi
.text:0000000000001732                 mov     rbp, rsp
.text:0000000000001735                 sar     rsi, 3
.text:0000000000001739                 mov     rax, rsi
.text:000000000000173C                 shr     rax, 3Fh
.text:0000000000001740                 add     rsi, rax
.text:0000000000001743                 sar     rsi, 1
.text:0000000000001746                 jz      short loc_1760
.text:0000000000001748                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000174F                 test    rax, rax
.text:0000000000001752                 jz      short loc_1760
.text:0000000000001754                 pop     rbp
.text:0000000000001755                 jmp     rax
.text:0000000000001755 ; ---------------------------------------------------------------------------
.text:0000000000001757                 align 20h
.text:0000000000001760
.text:0000000000001760 loc_1760:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001760                                         ; register_tm_clones+32↑j
.text:0000000000001760                 pop     rbp
.text:0000000000001761                 retn
.text:0000000000001761 register_tm_clones endp
.text:0000000000001761
.text:0000000000001761 ; ---------------------------------------------------------------------------
.text:0000000000001762                 align 10h
.text:0000000000001770
.text:0000000000001770 ; =============== S U B R O U T I N E =======================================
.text:0000000000001770
.text:0000000000001770 ; Attributes: info_from_lumina
.text:0000000000001770
.text:0000000000001770 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001770                 cmp     cs:completed_7697, 0
.text:0000000000001777                 jnz     short locret_17A8
.text:0000000000001779                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001781                 push    rbp
.text:0000000000001782                 mov     rbp, rsp
.text:0000000000001785                 jz      short loc_1793
.text:0000000000001787                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000178E                 call    __cxa_finalize
.text:0000000000001793
.text:0000000000001793 loc_1793:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001793                 call    deregister_tm_clones
.text:0000000000001798                 mov     cs:completed_7697, 1
.text:000000000000179F                 pop     rbp
.text:00000000000017A0                 retn
.text:00000000000017A0 ; ---------------------------------------------------------------------------
.text:00000000000017A1                 align 8
.text:00000000000017A8
.text:00000000000017A8 locret_17A8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000017A8                 rep retn
.text:00000000000017A8 __do_global_dtors_aux endp
.text:00000000000017A8
.text:00000000000017A8 ; ---------------------------------------------------------------------------
.text:00000000000017AA                 align 10h
.text:00000000000017B0
.text:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000017B0
.text:00000000000017B0 ; Attributes: bp-based frame
.text:00000000000017B0
.text:00000000000017B0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000017B0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000017B0                 push    rbp
.text:00000000000017B1                 mov     rbp, rsp
.text:00000000000017B4                 pop     rbp
.text:00000000000017B5                 jmp     register_tm_clones
.text:00000000000017B5 frame_dummy     endp
.text:00000000000017B5
.text:00000000000017B5 ; ---------------------------------------------------------------------------
.text:00000000000017BA                 align 20h
.text:00000000000017C0
.text:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000017C0
.text:00000000000017C0 ; Attributes: noreturn
.text:00000000000017C0
.text:00000000000017C0 ; void __fastcall __noreturn usage(int status)
.text:00000000000017C0                 public usage
.text:00000000000017C0 usage           proc near               ; DATA XREF: main+7B↑o
.text:00000000000017C0
.text:00000000000017C0 var_A8          = qword ptr -0A8h
.text:00000000000017C0 var_A0          = qword ptr -0A0h
.text:00000000000017C0 var_98          = qword ptr -98h
.text:00000000000017C0 var_90          = qword ptr -90h
.text:00000000000017C0 var_88          = qword ptr -88h
.text:00000000000017C0 var_80          = qword ptr -80h
.text:00000000000017C0 var_78          = qword ptr -78h
.text:00000000000017C0 var_70          = qword ptr -70h
.text:00000000000017C0 var_68          = qword ptr -68h
.text:00000000000017C0 var_60          = qword ptr -60h
.text:00000000000017C0 var_58          = qword ptr -58h
.text:00000000000017C0 var_50          = qword ptr -50h
.text:00000000000017C0 var_48          = qword ptr -48h
.text:00000000000017C0 var_40          = qword ptr -40h
.text:00000000000017C0 var_30          = qword ptr -30h
.text:00000000000017C0
.text:00000000000017C0 ; __unwind {
.text:00000000000017C0                 push    r13
.text:00000000000017C2                 push    r12
.text:00000000000017C4                 mov     edx, 5          ; category
.text:00000000000017C9                 push    rbp
.text:00000000000017CA                 push    rbx
.text:00000000000017CB                 mov     ebp, edi
.text:00000000000017CD                 sub     rsp, 88h
.text:00000000000017D4                 mov     rbx, cs:program_name
.text:00000000000017DB                 mov     rax, fs:28h
.text:00000000000017E4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000017E9                 xor     eax, eax
.text:00000000000017EB                 test    edi, edi
.text:00000000000017ED                 jz      short loc_181D
.text:00000000000017EF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000017F6                 xor     edi, edi        ; domainname
.text:00000000000017F8                 call    _dcgettext
.text:00000000000017FD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001804                 mov     rdx, rax
.text:0000000000001807                 mov     rcx, rbx
.text:000000000000180A                 mov     esi, 1
.text:000000000000180F                 xor     eax, eax
.text:0000000000001811                 call    ___fprintf_chk
.text:0000000000001816
.text:0000000000001816 loc_1816:                               ; CODE XREF: usage+27E↓j
.text:0000000000001816                 mov     edi, ebp        ; status
.text:0000000000001818                 call    _exit
.text:000000000000181D ; ---------------------------------------------------------------------------
.text:000000000000181D
.text:000000000000181D loc_181D:                               ; CODE XREF: usage+2D↑j
.text:000000000000181D                 lea     rsi, aUsageSStringOr ; "Usage: %s [STRING]...\n  or:  %s OPTION"...
.text:0000000000001824                 xor     edi, edi        ; domainname
.text:0000000000001826                 call    _dcgettext
.text:000000000000182B                 mov     rcx, rbx
.text:000000000000182E                 mov     rdx, rbx
.text:0000000000001831                 mov     rsi, rax
.text:0000000000001834                 mov     edi, 1
.text:0000000000001839                 xor     eax, eax
.text:000000000000183B                 call    ___printf_chk
.text:0000000000001840                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001847                 lea     rsi, aRepeatedlyOutp ; "Repeatedly output a line with all speci"...
.text:000000000000184E                 mov     edx, 5          ; category
.text:0000000000001853                 xor     edi, edi        ; domainname
.text:0000000000001855                 call    _dcgettext
.text:000000000000185A                 mov     rsi, rbx        ; stream
.text:000000000000185D                 mov     rdi, rax        ; s
.text:0000000000001860                 call    _fputs_unlocked
.text:0000000000001865                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000186C                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000001873                 mov     edx, 5          ; category
.text:0000000000001878                 xor     edi, edi        ; domainname
.text:000000000000187A                 call    _dcgettext
.text:000000000000187F                 mov     rsi, rbx        ; stream
.text:0000000000001882                 mov     rdi, rax        ; s
.text:0000000000001885                 call    _fputs_unlocked
.text:000000000000188A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001891                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001898                 mov     edx, 5          ; category
.text:000000000000189D                 xor     edi, edi        ; domainname
.text:000000000000189F                 call    _dcgettext
.text:00000000000018A4                 mov     rsi, rbx        ; stream
.text:00000000000018A7                 mov     rdi, rax        ; s
.text:00000000000018AA                 lea     rbx, unk_48A4
.text:00000000000018B1                 call    _fputs_unlocked
.text:00000000000018B6                 lea     rax, unk_48A8
.text:00000000000018BD                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000018C4                 mov     [rsp+0A8h+var_48], 0
.text:00000000000018CD                 mov     [rsp+0A8h+var_40], 0
.text:00000000000018D6                 mov     rdx, rsp
.text:00000000000018D9                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000018DD                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000018E4                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000018E9                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000018F0                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000018F5                 lea     rax, domainname ; "coreutils"
.text:00000000000018FC                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000001901                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000001908                 mov     [rsp+0A8h+var_98], rax
.text:000000000000190D                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001914                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000001919                 mov     [rsp+0A8h+var_90], rax
.text:000000000000191E                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000001925                 mov     [rsp+0A8h+var_88], rax
.text:000000000000192A                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000001931                 mov     [rsp+0A8h+var_80], rax
.text:0000000000001936                 mov     [rsp+0A8h+var_70], rax
.text:000000000000193B                 mov     [rsp+0A8h+var_60], rax
.text:0000000000001940                 mov     [rsp+0A8h+var_50], rax
.text:0000000000001945                 nop     dword ptr [rax]
.text:0000000000001948
.text:0000000000001948 loc_1948:                               ; CODE XREF: usage+1A5↓j
.text:0000000000001948                 add     rdx, 10h
.text:000000000000194C                 mov     rdi, [rdx]
.text:000000000000194F                 test    rdi, rdi
.text:0000000000001952                 jz      short loc_1967
.text:0000000000001954                 mov     ecx, 4
.text:0000000000001959                 mov     rsi, rbx
.text:000000000000195C                 repe cmpsb
.text:000000000000195E                 setnbe  al
.text:0000000000001961                 sbb     al, 0
.text:0000000000001963                 test    al, al
.text:0000000000001965                 jnz     short loc_1948
.text:0000000000001967
.text:0000000000001967 loc_1967:                               ; CODE XREF: usage+192↑j
.text:0000000000001967                 mov     r12, [rdx+8]
.text:000000000000196B                 xor     edi, edi        ; domainname
.text:000000000000196D                 mov     edx, 5          ; category
.text:0000000000001972                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000001979                 test    r12, r12
.text:000000000000197C                 jz      loc_1A43
.text:0000000000001982                 call    _dcgettext
.text:0000000000001987                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000198E                 lea     rdx, unk_491E
.text:0000000000001995                 mov     rsi, rax
.text:0000000000001998                 mov     edi, 1
.text:000000000000199D                 xor     eax, eax
.text:000000000000199F                 call    ___printf_chk
.text:00000000000019A4                 xor     esi, esi        ; locale
.text:00000000000019A6                 mov     edi, 5          ; category
.text:00000000000019AB                 call    _setlocale
.text:00000000000019B0                 test    rax, rax
.text:00000000000019B3                 jz      short loc_19D1
.text:00000000000019B5                 lea     rsi, s2         ; "en_"
.text:00000000000019BC                 mov     edx, 3          ; n
.text:00000000000019C1                 mov     rdi, rax        ; s1
.text:00000000000019C4                 call    _strncmp
.text:00000000000019C9                 test    eax, eax
.text:00000000000019CB                 jnz     loc_1AD8
.text:00000000000019D1
.text:00000000000019D1 loc_19D1:                               ; CODE XREF: usage+1F3↑j
.text:00000000000019D1                                         ; usage+33D↓j
.text:00000000000019D1                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000019D8                 xor     edi, edi        ; domainname
.text:00000000000019DA                 mov     edx, 5          ; category
.text:00000000000019DF                 call    _dcgettext
.text:00000000000019E4                 lea     rcx, unk_48A4
.text:00000000000019EB                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000019F2                 mov     rsi, rax
.text:00000000000019F5                 mov     edi, 1
.text:00000000000019FA                 xor     eax, eax
.text:00000000000019FC                 call    ___printf_chk
.text:0000000000001A01                 cmp     r12, rbx
.text:0000000000001A04                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001A0B                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001A12                 cmovz   rbx, rcx
.text:0000000000001A16
.text:0000000000001A16 loc_1A16:                               ; CODE XREF: usage+30C↓j
.text:0000000000001A16                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000001A1D                 xor     edi, edi        ; domainname
.text:0000000000001A1F                 mov     edx, 5          ; category
.text:0000000000001A24                 call    _dcgettext
.text:0000000000001A29                 mov     rcx, rbx
.text:0000000000001A2C                 mov     rsi, rax
.text:0000000000001A2F                 mov     rdx, r12
.text:0000000000001A32                 mov     edi, 1
.text:0000000000001A37                 xor     eax, eax
.text:0000000000001A39                 call    ___printf_chk
.text:0000000000001A3E                 jmp     loc_1816
.text:0000000000001A43 ; ---------------------------------------------------------------------------
.text:0000000000001A43
.text:0000000000001A43 loc_1A43:                               ; CODE XREF: usage+1BC↑j
.text:0000000000001A43                 call    _dcgettext
.text:0000000000001A48                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001A4F                 lea     rdx, unk_491E
.text:0000000000001A56                 mov     rsi, rax
.text:0000000000001A59                 mov     edi, 1
.text:0000000000001A5E                 xor     eax, eax
.text:0000000000001A60                 call    ___printf_chk
.text:0000000000001A65                 xor     esi, esi        ; locale
.text:0000000000001A67                 mov     edi, 5          ; category
.text:0000000000001A6C                 call    _setlocale
.text:0000000000001A71                 test    rax, rax
.text:0000000000001A74                 jz      short loc_1A8E
.text:0000000000001A76                 lea     rsi, s2         ; "en_"
.text:0000000000001A7D                 mov     edx, 3          ; n
.text:0000000000001A82                 mov     rdi, rax        ; s1
.text:0000000000001A85                 call    _strncmp
.text:0000000000001A8A                 test    eax, eax
.text:0000000000001A8C                 jnz     short loc_1AD1
.text:0000000000001A8E
.text:0000000000001A8E loc_1A8E:                               ; CODE XREF: usage+2B4↑j
.text:0000000000001A8E                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001A95                 mov     edx, 5          ; category
.text:0000000000001A9A                 xor     edi, edi        ; domainname
.text:0000000000001A9C                 lea     r12, unk_48A4
.text:0000000000001AA3                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001AAA                 call    _dcgettext
.text:0000000000001AAF                 lea     rcx, unk_48A4
.text:0000000000001AB6                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001ABD                 mov     rsi, rax
.text:0000000000001AC0                 mov     edi, 1
.text:0000000000001AC5                 xor     eax, eax
.text:0000000000001AC7                 call    ___printf_chk
.text:0000000000001ACC                 jmp     loc_1A16
.text:0000000000001AD1 ; ---------------------------------------------------------------------------
.text:0000000000001AD1
.text:0000000000001AD1 loc_1AD1:                               ; CODE XREF: usage+2CC↑j
.text:0000000000001AD1                 lea     r12, unk_48A4
.text:0000000000001AD8
.text:0000000000001AD8 loc_1AD8:                               ; CODE XREF: usage+20B↑j
.text:0000000000001AD8                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001ADF                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001AE6                 xor     edi, edi        ; domainname
.text:0000000000001AE8                 mov     edx, 5          ; category
.text:0000000000001AED                 call    _dcgettext
.text:0000000000001AF2                 mov     rsi, r13        ; stream
.text:0000000000001AF5                 mov     rdi, rax        ; s
.text:0000000000001AF8                 call    _fputs_unlocked
.text:0000000000001AFD                 jmp     loc_19D1
.text:0000000000001AFD ; } // starts at 17C0
.text:0000000000001AFD usage           endp
.text:0000000000001AFD
.text:0000000000001AFD ; ---------------------------------------------------------------------------
.text:0000000000001B02                 align 10h
.text:0000000000001B10
.text:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B10
.text:0000000000001B10
.text:0000000000001B10                 public close_stdout_set_file_name
.text:0000000000001B10 close_stdout_set_file_name proc near
.text:0000000000001B10 ; __unwind {
.text:0000000000001B10                 mov     cs:file_name, rdi
.text:0000000000001B17                 retn
.text:0000000000001B17 ; } // starts at 1B10
.text:0000000000001B17 close_stdout_set_file_name endp
.text:0000000000001B17
.text:0000000000001B17 ; ---------------------------------------------------------------------------
.text:0000000000001B18                 align 20h
.text:0000000000001B20
.text:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B20
.text:0000000000001B20
.text:0000000000001B20                 public close_stdout_set_ignore_EPIPE
.text:0000000000001B20 close_stdout_set_ignore_EPIPE proc near
.text:0000000000001B20 ; __unwind {
.text:0000000000001B20                 mov     cs:ignore_EPIPE, dil
.text:0000000000001B27                 retn
.text:0000000000001B27 ; } // starts at 1B20
.text:0000000000001B27 close_stdout_set_ignore_EPIPE endp
.text:0000000000001B27
.text:0000000000001B27 ; ---------------------------------------------------------------------------
.text:0000000000001B28                 align 10h
.text:0000000000001B30
.text:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B30
.text:0000000000001B30 ; Attributes: info_from_lumina
.text:0000000000001B30
.text:0000000000001B30 ; void __cdecl close_stdout()
.text:0000000000001B30                 public close_stdout
.text:0000000000001B30 close_stdout    proc near               ; DATA XREF: main+4C↑o
.text:0000000000001B30 ; __unwind {
.text:0000000000001B30                 push    rbp
.text:0000000000001B31                 push    rbx
.text:0000000000001B32                 sub     rsp, 8
.text:0000000000001B36                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001B3D                 call    close_stream
.text:0000000000001B42                 test    eax, eax
.text:0000000000001B44                 jz      short loc_1B5C
.text:0000000000001B46                 call    ___errno_location
.text:0000000000001B4B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000001B52                 mov     rbx, rax
.text:0000000000001B55                 jz      short loc_1B73
.text:0000000000001B57                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000001B5A                 jnz     short loc_1B73
.text:0000000000001B5C
.text:0000000000001B5C loc_1B5C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000001B5C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000001B63                 call    close_stream
.text:0000000000001B68                 test    eax, eax
.text:0000000000001B6A                 jnz     short loc_1BB2
.text:0000000000001B6C                 add     rsp, 8
.text:0000000000001B70                 pop     rbx
.text:0000000000001B71                 pop     rbp
.text:0000000000001B72                 retn
.text:0000000000001B73 ; ---------------------------------------------------------------------------
.text:0000000000001B73
.text:0000000000001B73 loc_1B73:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000001B73                                         ; close_stdout+2A↑j
.text:0000000000001B73                 lea     rsi, aWriteError ; "write error"
.text:0000000000001B7A                 xor     edi, edi        ; domainname
.text:0000000000001B7C                 mov     edx, 5          ; category
.text:0000000000001B81                 call    _dcgettext
.text:0000000000001B86                 mov     rdi, cs:file_name
.text:0000000000001B8D                 mov     rbp, rax
.text:0000000000001B90                 test    rdi, rdi
.text:0000000000001B93                 jz      short loc_1BBD
.text:0000000000001B95                 call    quotearg_colon
.text:0000000000001B9A                 mov     esi, [rbx]      ; errnum
.text:0000000000001B9C                 lea     rdx, format     ; "%s: %s"
.text:0000000000001BA3                 mov     rcx, rax
.text:0000000000001BA6                 mov     r8, rbp
.text:0000000000001BA9                 xor     edi, edi        ; status
.text:0000000000001BAB                 xor     eax, eax
.text:0000000000001BAD                 call    _error
.text:0000000000001BB2
.text:0000000000001BB2 loc_1BB2:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000001BB2                                         ; close_stdout+A2↓j
.text:0000000000001BB2                 mov     edi, cs:exit_failure ; status
.text:0000000000001BB8                 call    __exit
.text:0000000000001BBD ; ---------------------------------------------------------------------------
.text:0000000000001BBD
.text:0000000000001BBD loc_1BBD:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000001BBD                 mov     esi, [rbx]      ; errnum
.text:0000000000001BBF                 lea     rdx, format+4   ; format
.text:0000000000001BC6                 mov     rcx, rax
.text:0000000000001BC9                 xor     edi, edi        ; status
.text:0000000000001BCB                 xor     eax, eax
.text:0000000000001BCD                 call    _error
.text:0000000000001BD2                 jmp     short loc_1BB2
.text:0000000000001BD2 ; } // starts at 1B30
.text:0000000000001BD2 close_stdout    endp
.text:0000000000001BD2
.text:0000000000001BD2 ; ---------------------------------------------------------------------------
.text:0000000000001BD4                 align 20h
.text:0000000000001BE0
.text:0000000000001BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001BE0
.text:0000000000001BE0
.text:0000000000001BE0 ; __int64 __fastcall full_write(int fd, void *buf, size_t n)
.text:0000000000001BE0                 public full_write
.text:0000000000001BE0 full_write      proc near               ; CODE XREF: main+1E1↑p
.text:0000000000001BE0 ; __unwind {
.text:0000000000001BE0                 push    r13
.text:0000000000001BE2                 push    r12
.text:0000000000001BE4                 push    rbp
.text:0000000000001BE5                 push    rbx
.text:0000000000001BE6                 sub     rsp, 8
.text:0000000000001BEA                 test    rdx, rdx
.text:0000000000001BED                 jz      short loc_1C51
.text:0000000000001BEF                 mov     r13d, edi
.text:0000000000001BF2                 mov     rbp, rsi
.text:0000000000001BF5                 mov     rbx, rdx
.text:0000000000001BF8                 xor     r12d, r12d
.text:0000000000001BFB                 jmp     short loc_1C10
.text:0000000000001BFB ; ---------------------------------------------------------------------------
.text:0000000000001BFD                 align 20h
.text:0000000000001C00
.text:0000000000001C00 loc_1C00:                               ; CODE XREF: full_write+42↓j
.text:0000000000001C00                 test    rax, rax
.text:0000000000001C03                 jz      short loc_1C38
.text:0000000000001C05                 add     r12, rax
.text:0000000000001C08                 add     rbp, rax
.text:0000000000001C0B                 sub     rbx, rax
.text:0000000000001C0E                 jz      short loc_1C24
.text:0000000000001C10
.text:0000000000001C10 loc_1C10:                               ; CODE XREF: full_write+1B↑j
.text:0000000000001C10                 mov     rdx, rbx        ; n
.text:0000000000001C13                 mov     rsi, rbp        ; buf
.text:0000000000001C16                 mov     edi, r13d       ; fd
.text:0000000000001C19                 call    safe_write
.text:0000000000001C1E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000001C22                 jnz     short loc_1C00
.text:0000000000001C24
.text:0000000000001C24 loc_1C24:                               ; CODE XREF: full_write+2E↑j
.text:0000000000001C24                                         ; full_write+74↓j
.text:0000000000001C24                 add     rsp, 8
.text:0000000000001C28                 mov     rax, r12
.text:0000000000001C2B                 pop     rbx
.text:0000000000001C2C                 pop     rbp
.text:0000000000001C2D                 pop     r12
.text:0000000000001C2F                 pop     r13
.text:0000000000001C31                 retn
.text:0000000000001C31 ; ---------------------------------------------------------------------------
.text:0000000000001C32                 align 8
.text:0000000000001C38
.text:0000000000001C38 loc_1C38:                               ; CODE XREF: full_write+23↑j
.text:0000000000001C38                 call    ___errno_location
.text:0000000000001C3D                 mov     dword ptr [rax], 1Ch
.text:0000000000001C43                 add     rsp, 8
.text:0000000000001C47                 mov     rax, r12
.text:0000000000001C4A                 pop     rbx
.text:0000000000001C4B                 pop     rbp
.text:0000000000001C4C                 pop     r12
.text:0000000000001C4E                 pop     r13
.text:0000000000001C50                 retn
.text:0000000000001C51 ; ---------------------------------------------------------------------------
.text:0000000000001C51
.text:0000000000001C51 loc_1C51:                               ; CODE XREF: full_write+D↑j
.text:0000000000001C51                 xor     r12d, r12d
.text:0000000000001C54                 jmp     short loc_1C24
.text:0000000000001C54 ; } // starts at 1BE0
.text:0000000000001C54 full_write      endp
.text:0000000000001C54
.text:0000000000001C54 ; ---------------------------------------------------------------------------
.text:0000000000001C56                 align 20h
.text:0000000000001C60
.text:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C60
.text:0000000000001C60
.text:0000000000001C60                 public parse_long_options
.text:0000000000001C60 parse_long_options proc near
.text:0000000000001C60
.text:0000000000001C60 var_100         = qword ptr -100h
.text:0000000000001C60 var_F8          = dword ptr -0F8h
.text:0000000000001C60 var_F4          = dword ptr -0F4h
.text:0000000000001C60 var_F0          = qword ptr -0F0h
.text:0000000000001C60 var_E8          = qword ptr -0E8h
.text:0000000000001C60 var_E0          = qword ptr -0E0h
.text:0000000000001C60 var_D8          = byte ptr -0D8h
.text:0000000000001C60 var_A8          = xmmword ptr -0A8h
.text:0000000000001C60 var_98          = xmmword ptr -98h
.text:0000000000001C60 var_88          = xmmword ptr -88h
.text:0000000000001C60 var_78          = xmmword ptr -78h
.text:0000000000001C60 var_68          = xmmword ptr -68h
.text:0000000000001C60 var_58          = xmmword ptr -58h
.text:0000000000001C60 var_48          = xmmword ptr -48h
.text:0000000000001C60 var_38          = xmmword ptr -38h
.text:0000000000001C60 arg_0           = byte ptr  8
.text:0000000000001C60
.text:0000000000001C60 ; __unwind {
.text:0000000000001C60                 push    r13
.text:0000000000001C62                 push    r12
.text:0000000000001C64                 mov     r13, r8
.text:0000000000001C67                 push    rbp
.text:0000000000001C68                 push    rbx
.text:0000000000001C69                 mov     rbp, rdx
.text:0000000000001C6C                 mov     r12, rcx
.text:0000000000001C6F                 sub     rsp, 0E8h
.text:0000000000001C76                 test    al, al
.text:0000000000001C78                 jz      short loc_1CB4
.text:0000000000001C7A                 movaps  [rsp+108h+var_A8], xmm0
.text:0000000000001C7F                 movaps  [rsp+108h+var_98], xmm1
.text:0000000000001C84                 movaps  [rsp+108h+var_88], xmm2
.text:0000000000001C8C                 movaps  [rsp+108h+var_78], xmm3
.text:0000000000001C94                 movaps  [rsp+108h+var_68], xmm4
.text:0000000000001C9C                 movaps  [rsp+108h+var_58], xmm5
.text:0000000000001CA4                 movaps  [rsp+108h+var_48], xmm6
.text:0000000000001CAC                 movaps  [rsp+108h+var_38], xmm7
.text:0000000000001CB4
.text:0000000000001CB4 loc_1CB4:                               ; CODE XREF: parse_long_options+18↑j
.text:0000000000001CB4                 mov     rax, fs:28h
.text:0000000000001CBD                 mov     [rsp+108h+var_E0], rax
.text:0000000000001CC2                 xor     eax, eax
.text:0000000000001CC4                 cmp     edi, 2
.text:0000000000001CC7                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000001CCD                 mov     cs:opterr@@GLIBC_2_2_5, 0
.text:0000000000001CD7                 jz      short loc_1D10
.text:0000000000001CD9
.text:0000000000001CD9 loc_1CD9:                               ; CODE XREF: parse_long_options+CE↓j
.text:0000000000001CD9                                         ; parse_long_options+DD↓j ...
.text:0000000000001CD9                 mov     rax, [rsp+108h+var_E0]
.text:0000000000001CDE                 xor     rax, fs:28h
.text:0000000000001CE7                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:0000000000001CED                 mov     cs:optind@@GLIBC_2_2_5, 0
.text:0000000000001CF7                 jnz     loc_1D9A
.text:0000000000001CFD                 add     rsp, 0E8h
.text:0000000000001D04                 pop     rbx
.text:0000000000001D05                 pop     rbp
.text:0000000000001D06                 pop     r12
.text:0000000000001D08                 pop     r13
.text:0000000000001D0A                 retn
.text:0000000000001D0A ; ---------------------------------------------------------------------------
.text:0000000000001D0B                 align 10h
.text:0000000000001D10
.text:0000000000001D10 loc_1D10:                               ; CODE XREF: parse_long_options+77↑j
.text:0000000000001D10                 lea     rcx, long_options ; longopts
.text:0000000000001D17                 lea     rdx, shortopts  ; "+"
.text:0000000000001D1E                 xor     r8d, r8d        ; longind
.text:0000000000001D21                 mov     [rsp+108h+var_100], r9
.text:0000000000001D26                 call    _getopt_long
.text:0000000000001D2B                 cmp     eax, 0FFFFFFFFh
.text:0000000000001D2E                 jz      short loc_1CD9
.text:0000000000001D30                 cmp     eax, 68h ; 'h'
.text:0000000000001D33                 mov     r9, [rsp+108h+var_100]
.text:0000000000001D38                 jz      short loc_1D90
.text:0000000000001D3A                 cmp     eax, 76h ; 'v'
.text:0000000000001D3D                 jnz     short loc_1CD9
.text:0000000000001D3F                 lea     rax, [rsp+108h+arg_0]
.text:0000000000001D47                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001D4E                 lea     r8, [rsp+108h+var_F8]
.text:0000000000001D53                 mov     rcx, r13
.text:0000000000001D56                 mov     rdx, r12
.text:0000000000001D59                 mov     rsi, rbp
.text:0000000000001D5C                 mov     [rsp+108h+var_F0], rax
.text:0000000000001D61                 lea     rax, [rsp+108h+var_D8]
.text:0000000000001D66                 mov     [rsp+108h+var_F8], 30h ; '0'
.text:0000000000001D6E                 mov     [rsp+108h+var_F4], 30h ; '0'
.text:0000000000001D76                 mov     [rsp+108h+var_E8], rax
.text:0000000000001D7B                 call    version_etc_va
.text:0000000000001D80                 xor     edi, edi        ; status
.text:0000000000001D82                 call    _exit
.text:0000000000001D82 ; ---------------------------------------------------------------------------
.text:0000000000001D87                 align 10h
.text:0000000000001D90
.text:0000000000001D90 loc_1D90:                               ; CODE XREF: parse_long_options+D8↑j
.text:0000000000001D90                 xor     edi, edi
.text:0000000000001D92                 call    r9
.text:0000000000001D95                 jmp     loc_1CD9
.text:0000000000001D9A ; ---------------------------------------------------------------------------
.text:0000000000001D9A
.text:0000000000001D9A loc_1D9A:                               ; CODE XREF: parse_long_options+97↑j
.text:0000000000001D9A                 call    ___stack_chk_fail
.text:0000000000001D9A ; } // starts at 1C60
.text:0000000000001D9A parse_long_options endp
.text:0000000000001D9A
.text:0000000000001D9A ; ---------------------------------------------------------------------------
.text:0000000000001D9F                 align 20h
.text:0000000000001DA0
.text:0000000000001DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DA0
.text:0000000000001DA0
.text:0000000000001DA0                 public parse_gnu_standard_options_only
.text:0000000000001DA0 parse_gnu_standard_options_only proc near
.text:0000000000001DA0                                         ; CODE XREF: main+91↑p
.text:0000000000001DA0
.text:0000000000001DA0 var_F8          = dword ptr -0F8h
.text:0000000000001DA0 var_F4          = dword ptr -0F4h
.text:0000000000001DA0 var_F0          = qword ptr -0F0h
.text:0000000000001DA0 var_E8          = qword ptr -0E8h
.text:0000000000001DA0 var_E0          = qword ptr -0E0h
.text:0000000000001DA0 var_D8          = byte ptr -0D8h
.text:0000000000001DA0 var_A8          = xmmword ptr -0A8h
.text:0000000000001DA0 var_98          = xmmword ptr -98h
.text:0000000000001DA0 var_88          = xmmword ptr -88h
.text:0000000000001DA0 var_78          = xmmword ptr -78h
.text:0000000000001DA0 var_68          = xmmword ptr -68h
.text:0000000000001DA0 var_58          = xmmword ptr -58h
.text:0000000000001DA0 var_48          = xmmword ptr -48h
.text:0000000000001DA0 var_38          = xmmword ptr -38h
.text:0000000000001DA0 arg_0           = qword ptr  8
.text:0000000000001DA0 arg_8           = byte ptr  10h
.text:0000000000001DA0
.text:0000000000001DA0 ; __unwind {
.text:0000000000001DA0                 push    r14
.text:0000000000001DA2                 push    r13
.text:0000000000001DA4                 mov     r14, r8
.text:0000000000001DA7                 push    r12
.text:0000000000001DA9                 push    rbp
.text:0000000000001DAA                 mov     r12, rdx
.text:0000000000001DAD                 push    rbx
.text:0000000000001DAE                 mov     r13, rcx
.text:0000000000001DB1                 sub     rsp, 0D0h
.text:0000000000001DB8                 test    al, al
.text:0000000000001DBA                 mov     rbp, [rsp+0F8h+arg_0]
.text:0000000000001DC2                 jz      short loc_1DFB
.text:0000000000001DC4                 movaps  [rsp+0F8h+var_A8], xmm0
.text:0000000000001DC9                 movaps  [rsp+0F8h+var_98], xmm1
.text:0000000000001DCE                 movaps  [rsp+0F8h+var_88], xmm2
.text:0000000000001DD3                 movaps  [rsp+0F8h+var_78], xmm3
.text:0000000000001DDB                 movaps  [rsp+0F8h+var_68], xmm4
.text:0000000000001DE3                 movaps  [rsp+0F8h+var_58], xmm5
.text:0000000000001DEB                 movaps  [rsp+0F8h+var_48], xmm6
.text:0000000000001DF3                 movaps  [rsp+0F8h+var_38], xmm7
.text:0000000000001DFB
.text:0000000000001DFB loc_1DFB:                               ; CODE XREF: parse_gnu_standard_options_only+22↑j
.text:0000000000001DFB                 mov     rax, fs:28h
.text:0000000000001E04                 mov     [rsp+0F8h+var_E0], rax
.text:0000000000001E09                 xor     eax, eax
.text:0000000000001E0B                 lea     rdx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001E12                 lea     rax, shortopts  ; "+"
.text:0000000000001E19                 test    r9b, r9b
.text:0000000000001E1C                 lea     rcx, long_options ; longopts
.text:0000000000001E23                 cmovz   rdx, rax        ; shortopts
.text:0000000000001E27                 xor     r8d, r8d        ; longind
.text:0000000000001E2A                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000001E30                 mov     cs:opterr@@GLIBC_2_2_5, 1
.text:0000000000001E3A                 call    _getopt_long
.text:0000000000001E3F                 cmp     eax, 0FFFFFFFFh
.text:0000000000001E42                 jz      short loc_1EA8
.text:0000000000001E44                 cmp     eax, 68h ; 'h'
.text:0000000000001E47                 jz      loc_1ED0
.text:0000000000001E4D                 cmp     eax, 76h ; 'v'
.text:0000000000001E50                 jnz     short loc_1EA0
.text:0000000000001E52                 lea     rax, [rsp+0F8h+arg_8]
.text:0000000000001E5A                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001E61                 mov     r8, rsp
.text:0000000000001E64                 mov     rcx, r14
.text:0000000000001E67                 mov     rdx, r13
.text:0000000000001E6A                 mov     rsi, r12
.text:0000000000001E6D                 mov     [rsp+0F8h+var_F0], rax
.text:0000000000001E72                 lea     rax, [rsp+0F8h+var_D8]
.text:0000000000001E77                 mov     [rsp+0F8h+var_F8], 30h ; '0'
.text:0000000000001E7E                 mov     [rsp+0F8h+var_F4], 30h ; '0'
.text:0000000000001E86                 mov     [rsp+0F8h+var_E8], rax
.text:0000000000001E8B                 call    version_etc_va
.text:0000000000001E90                 xor     edi, edi        ; status
.text:0000000000001E92                 call    _exit
.text:0000000000001E92 ; ---------------------------------------------------------------------------
.text:0000000000001E97                 align 20h
.text:0000000000001EA0
.text:0000000000001EA0 loc_1EA0:                               ; CODE XREF: parse_gnu_standard_options_only+B0↑j
.text:0000000000001EA0                 mov     edi, cs:exit_failure
.text:0000000000001EA6                 call    rbp
.text:0000000000001EA8
.text:0000000000001EA8 loc_1EA8:                               ; CODE XREF: parse_gnu_standard_options_only+A2↑j
.text:0000000000001EA8                                         ; parse_gnu_standard_options_only+134↓j
.text:0000000000001EA8                 mov     rax, [rsp+0F8h+var_E0]
.text:0000000000001EAD                 xor     rax, fs:28h
.text:0000000000001EB6                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:0000000000001EBC                 jnz     short loc_1ED6
.text:0000000000001EBE                 add     rsp, 0D0h
.text:0000000000001EC5                 pop     rbx
.text:0000000000001EC6                 pop     rbp
.text:0000000000001EC7                 pop     r12
.text:0000000000001EC9                 pop     r13
.text:0000000000001ECB                 pop     r14
.text:0000000000001ECD                 retn
.text:0000000000001ECD ; ---------------------------------------------------------------------------
.text:0000000000001ECE                 align 10h
.text:0000000000001ED0
.text:0000000000001ED0 loc_1ED0:                               ; CODE XREF: parse_gnu_standard_options_only+A7↑j
.text:0000000000001ED0                 xor     edi, edi
.text:0000000000001ED2                 call    rbp
.text:0000000000001ED4                 jmp     short loc_1EA8
.text:0000000000001ED6 ; ---------------------------------------------------------------------------
.text:0000000000001ED6
.text:0000000000001ED6 loc_1ED6:                               ; CODE XREF: parse_gnu_standard_options_only+11C↑j
.text:0000000000001ED6                 call    ___stack_chk_fail
.text:0000000000001ED6 ; } // starts at 1DA0
.text:0000000000001ED6 parse_gnu_standard_options_only endp
.text:0000000000001ED6
.text:0000000000001ED6 ; ---------------------------------------------------------------------------
.text:0000000000001EDB                 align 20h
.text:0000000000001EE0
.text:0000000000001EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001EE0
.text:0000000000001EE0
.text:0000000000001EE0                 public set_program_name
.text:0000000000001EE0 set_program_name proc near              ; CODE XREF: main+17↑p
.text:0000000000001EE0 ; __unwind {
.text:0000000000001EE0                 test    rdi, rdi
.text:0000000000001EE3                 push    rbx
.text:0000000000001EE4                 jz      short loc_1F5D
.text:0000000000001EE6                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000001EEB                 mov     rbx, rdi
.text:0000000000001EEE                 call    _strrchr
.text:0000000000001EF3                 test    rax, rax
.text:0000000000001EF6                 jz      short loc_1F4D
.text:0000000000001EF8                 lea     r8, [rax+1]
.text:0000000000001EFC                 mov     rdx, r8
.text:0000000000001EFF                 sub     rdx, rbx
.text:0000000000001F02                 cmp     rdx, 6
.text:0000000000001F06                 jle     short loc_1F4D
.text:0000000000001F08                 lea     rsi, [rax-6]
.text:0000000000001F0C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000001F13                 mov     ecx, 7
.text:0000000000001F18                 repe cmpsb
.text:0000000000001F1A                 setnbe  dl
.text:0000000000001F1D                 sbb     dl, 0
.text:0000000000001F20                 test    dl, dl
.text:0000000000001F22                 jnz     short loc_1F4D
.text:0000000000001F24                 lea     rdi, aLt        ; "lt-"
.text:0000000000001F2B                 mov     ecx, 3
.text:0000000000001F30                 mov     rsi, r8
.text:0000000000001F33                 mov     rbx, r8
.text:0000000000001F36                 repe cmpsb
.text:0000000000001F38                 setnbe  dl
.text:0000000000001F3B                 sbb     dl, 0
.text:0000000000001F3E                 test    dl, dl
.text:0000000000001F40                 jnz     short loc_1F4D
.text:0000000000001F42                 lea     rbx, [rax+4]
.text:0000000000001F46                 mov     cs:__bss_start, rbx
.text:0000000000001F4D
.text:0000000000001F4D loc_1F4D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000001F4D                                         ; set_program_name+26↑j ...
.text:0000000000001F4D                 mov     cs:program_name, rbx
.text:0000000000001F54                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000001F5B                 pop     rbx
.text:0000000000001F5C                 retn
.text:0000000000001F5D ; ---------------------------------------------------------------------------
.text:0000000000001F5D
.text:0000000000001F5D loc_1F5D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000001F5D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000001F64                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000001F6B                 mov     edx, 37h ; '7'  ; n
.text:0000000000001F70                 mov     esi, 1          ; size
.text:0000000000001F75                 call    _fwrite
.text:0000000000001F7A                 call    _abort
.text:0000000000001F7A ; } // starts at 1EE0
.text:0000000000001F7A set_program_name endp
.text:0000000000001F7A
.text:0000000000001F7A ; ---------------------------------------------------------------------------
.text:0000000000001F7F                 align 20h
.text:0000000000001F80
.text:0000000000001F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F80
.text:0000000000001F80 ; Attributes: info_from_lumina
.text:0000000000001F80
.text:0000000000001F80 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000001F80 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000001F80                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000001F80 ; __unwind {
.text:0000000000001F80                 push    rbp
.text:0000000000001F81                 push    rbx
.text:0000000000001F82                 mov     rbp, rdi
.text:0000000000001F85                 mov     ebx, esi
.text:0000000000001F87                 sub     rsp, 8
.text:0000000000001F8B                 call    locale_charset
.text:0000000000001F90                 movzx   edx, byte ptr [rax]
.text:0000000000001F93                 and     edx, 0FFFFFFDFh
.text:0000000000001F96                 cmp     dl, 55h ; 'U'
.text:0000000000001F99                 jz      short loc_2010
.text:0000000000001F9B                 cmp     dl, 47h ; 'G'
.text:0000000000001F9E                 jz      short loc_1FC0
.text:0000000000001FA0
.text:0000000000001FA0 loc_1FA0:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000001FA0                                         ; gettext_quote+50↓j ...
.text:0000000000001FA0                 lea     rax, unk_4BAB
.text:0000000000001FA7                 lea     rdx, asc_4BAD   ; "'"
.text:0000000000001FAE                 cmp     ebx, 9
.text:0000000000001FB1                 cmovnz  rax, rdx
.text:0000000000001FB5                 add     rsp, 8
.text:0000000000001FB9                 pop     rbx
.text:0000000000001FBA                 pop     rbp
.text:0000000000001FBB                 retn
.text:0000000000001FBB ; ---------------------------------------------------------------------------
.text:0000000000001FBC                 align 20h
.text:0000000000001FC0
.text:0000000000001FC0 loc_1FC0:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000001FC0                 movzx   edx, byte ptr [rax+1]
.text:0000000000001FC4                 and     edx, 0FFFFFFDFh
.text:0000000000001FC7                 cmp     dl, 42h ; 'B'
.text:0000000000001FCA                 jnz     short loc_1FA0
.text:0000000000001FCC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000001FD0                 jnz     short loc_1FA0
.text:0000000000001FD2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000001FD6                 jnz     short loc_1FA0
.text:0000000000001FD8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000001FDC                 jnz     short loc_1FA0
.text:0000000000001FDE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000001FE2                 jnz     short loc_1FA0
.text:0000000000001FE4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000001FE8                 jnz     short loc_1FA0
.text:0000000000001FEA                 cmp     byte ptr [rax+7], 0
.text:0000000000001FEE                 jnz     short loc_1FA0
.text:0000000000001FF0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000001FF4                 lea     rax, unk_4BA4
.text:0000000000001FFB                 lea     rdx, unk_4BA8
.text:0000000000002002                 cmovnz  rax, rdx
.text:0000000000002006                 add     rsp, 8
.text:000000000000200A                 pop     rbx
.text:000000000000200B                 pop     rbp
.text:000000000000200C                 retn
.text:000000000000200C ; ---------------------------------------------------------------------------
.text:000000000000200D                 align 10h
.text:0000000000002010
.text:0000000000002010 loc_2010:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002010                 movzx   edx, byte ptr [rax+1]
.text:0000000000002014                 and     edx, 0FFFFFFDFh
.text:0000000000002017                 cmp     dl, 54h ; 'T'
.text:000000000000201A                 jnz     short loc_1FA0
.text:000000000000201C                 movzx   edx, byte ptr [rax+2]
.text:0000000000002020                 and     edx, 0FFFFFFDFh
.text:0000000000002023                 cmp     dl, 46h ; 'F'
.text:0000000000002026                 jnz     loc_1FA0
.text:000000000000202C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002030                 jnz     loc_1FA0
.text:0000000000002036                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000203A                 jnz     loc_1FA0
.text:0000000000002040                 cmp     byte ptr [rax+5], 0
.text:0000000000002044                 jnz     loc_1FA0
.text:000000000000204A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000204E                 lea     rax, unk_4B9C
.text:0000000000002055                 lea     rdx, unk_4BA0
.text:000000000000205C                 cmovnz  rax, rdx
.text:0000000000002060                 add     rsp, 8
.text:0000000000002064                 pop     rbx
.text:0000000000002065                 pop     rbp
.text:0000000000002066                 retn
.text:0000000000002066 ; } // starts at 1F80
.text:0000000000002066 gettext_quote   endp
.text:0000000000002066
.text:0000000000002066 ; ---------------------------------------------------------------------------
.text:0000000000002067                 align 10h
.text:0000000000002070
.text:0000000000002070 ; =============== S U B R O U T I N E =======================================
.text:0000000000002070
.text:0000000000002070 ; Attributes: info_from_lumina
.text:0000000000002070
.text:0000000000002070 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002070 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002070                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002070
.text:0000000000002070 var_E0          = dword ptr -0E0h
.text:0000000000002070 var_DB          = byte ptr -0DBh
.text:0000000000002070 var_DA          = byte ptr -0DAh
.text:0000000000002070 var_D9          = byte ptr -0D9h
.text:0000000000002070 s               = qword ptr -0D8h
.text:0000000000002070 n               = qword ptr -0D0h
.text:0000000000002070 var_C8          = qword ptr -0C8h
.text:0000000000002070 ps              = qword ptr -0C0h
.text:0000000000002070 var_B8          = qword ptr -0B8h
.text:0000000000002070 var_B0          = qword ptr -0B0h
.text:0000000000002070 var_A8          = qword ptr -0A8h
.text:0000000000002070 s2              = qword ptr -0A0h
.text:0000000000002070 var_98          = qword ptr -98h
.text:0000000000002070 var_90          = qword ptr -90h
.text:0000000000002070 var_88          = qword ptr -88h
.text:0000000000002070 var_80          = qword ptr -80h
.text:0000000000002070 var_78          = qword ptr -78h
.text:0000000000002070 var_70          = dword ptr -70h
.text:0000000000002070 var_6C          = byte ptr -6Ch
.text:0000000000002070 var_6B          = byte ptr -6Bh
.text:0000000000002070 var_6A          = byte ptr -6Ah
.text:0000000000002070 var_69          = byte ptr -69h
.text:0000000000002070 var_68          = qword ptr -68h
.text:0000000000002070 var_60          = qword ptr -60h
.text:0000000000002070 wc              = dword ptr -4Ch
.text:0000000000002070 var_48          = qword ptr -48h
.text:0000000000002070 var_40          = qword ptr -40h
.text:0000000000002070 arg_0           = qword ptr  8
.text:0000000000002070 arg_8           = qword ptr  10h
.text:0000000000002070 arg_10          = qword ptr  18h
.text:0000000000002070
.text:0000000000002070 ; __unwind {
.text:0000000000002070                 push    r15
.text:0000000000002072                 push    r14
.text:0000000000002074                 mov     r15d, r8d
.text:0000000000002077                 push    r13
.text:0000000000002079                 push    r12
.text:000000000000207B                 mov     r14, rdi
.text:000000000000207E                 push    rbp
.text:000000000000207F                 push    rbx
.text:0000000000002080                 mov     ebx, r9d
.text:0000000000002083                 mov     r13, rsi
.text:0000000000002086                 mov     rbp, rcx
.text:0000000000002089                 and     ebx, 2
.text:000000000000208C                 sub     rsp, 0B8h
.text:0000000000002093                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000209B                 mov     [rsp+0E8h+s], rdx
.text:00000000000020A0                 mov     [rsp+0E8h+var_E0], r8d
.text:00000000000020A5                 mov     [rsp+0E8h+var_70], r9d
.text:00000000000020AA                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000020AF                 mov     rax, [rsp+0E8h+arg_8]
.text:00000000000020B7                 mov     [rsp+0E8h+var_80], rax
.text:00000000000020BC                 mov     rax, [rsp+0E8h+arg_10]
.text:00000000000020C4                 mov     [rsp+0E8h+var_88], rax
.text:00000000000020C9                 mov     rax, fs:28h
.text:00000000000020D2                 mov     [rsp+0E8h+var_40], rax
.text:00000000000020DA                 xor     eax, eax
.text:00000000000020DC                 call    ___ctype_get_mb_cur_max
.text:00000000000020E1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:00000000000020E5                 mov     [rsp+0E8h+var_90], rax
.text:00000000000020EA                 ja      def_2101        ; jumptable 00000000000121F1 default case
.text:00000000000020F0                 lea     rcx, jpt_2101
.text:00000000000020F7                 mov     edx, r15d
.text:00000000000020FA                 movsxd  rax, ds:(jpt_2101 - 4C00h)[rcx+rdx*4]
.text:00000000000020FE                 add     rax, rcx
.text:0000000000002101                 jmp     rax             ; switch jump
.text:0000000000002103 ; ---------------------------------------------------------------------------
.text:0000000000002103
.text:0000000000002103 loc_2103:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002103                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002103                                         ; DATA XREF: ...
.text:0000000000002103                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002108                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000210D                 xor     r12d, r12d
.text:0000000000002110                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002119                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000211E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002123
.text:0000000000002123 loc_2123:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002123                 lea     rax, asc_4BAD   ; "'"
.text:000000000000212A                 mov     [rsp+0E8h+n], 1
.text:0000000000002133                 xor     r15d, r15d
.text:0000000000002136                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000213E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002143
.text:0000000000002143 loc_2143:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002143                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002143                 xor     r11d, r11d
.text:0000000000002146                 mov     rax, rbp
.text:0000000000002149                 mov     r8d, r12d
.text:000000000000214C                 mov     rbp, r11
.text:000000000000214F                 mov     r11, rax
.text:0000000000002152                 nop     word ptr [rax+rax+00h]
.text:0000000000002158
.text:0000000000002158 loc_2158:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002158                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002158                 cmp     r11, rbp
.text:000000000000215B                 setnz   r12b
.text:000000000000215F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002163                 jnz     short loc_2172
.text:0000000000002165                 mov     rax, [rsp+0E8h+s]
.text:000000000000216A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000216E                 setnz   r12b
.text:0000000000002172
.text:0000000000002172 loc_2172:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002172                 test    r12b, r12b
.text:0000000000002175                 jz      loc_27D0
.text:000000000000217B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002180                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002185                 lea     r9, [rdi+rbp]
.text:0000000000002189                 setnz   al
.text:000000000000218C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002190                 mov     r10d, eax
.text:0000000000002193                 jz      loc_2240
.text:0000000000002199                 mov     rax, [rsp+0E8h+n]
.text:000000000000219E                 test    rax, rax
.text:00000000000021A1                 jz      loc_25D0
.text:00000000000021A7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000021AB                 lea     rbx, [rbp+rax+0]
.text:00000000000021B0                 jnz     short loc_21E0
.text:00000000000021B2                 cmp     rax, 1
.text:00000000000021B6                 jbe     short loc_21E0
.text:00000000000021B8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000021BD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000021C2                 mov     [rsp+0E8h+ps], r9
.text:00000000000021C7                 call    _strlen
.text:00000000000021CC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000021D2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000021D8                 mov     r11, rax
.text:00000000000021DB                 mov     r9, [rsp+0E8h+ps]
.text:00000000000021E0
.text:00000000000021E0 loc_21E0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:00000000000021E0                                         ; quotearg_buffer_restyled+146↑j
.text:00000000000021E0                 cmp     rbx, r11
.text:00000000000021E3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000021E8                 ja      loc_27A0
.text:00000000000021EE                 mov     rdx, [rsp+0E8h+n] ; n
.text:00000000000021F3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:00000000000021F8                 mov     rdi, r9         ; s1
.text:00000000000021FB                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002200                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002205                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000220A                 call    _memcmp
.text:000000000000220F                 test    eax, eax
.text:0000000000002211                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002216                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000221C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002221                 jnz     loc_27A0
.text:0000000000002227                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000222C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002232                 jnz     loc_31B5
.text:0000000000002238                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002240
.text:0000000000002240 loc_2240:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002240                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002240                 movzx   ebx, byte ptr [r9]
.text:0000000000002244                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002247                 ja      def_225E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000224D                 lea     rcx, jpt_225E
.text:0000000000002254                 movzx   edx, bl
.text:0000000000002257                 movsxd  rax, ds:(jpt_225E - 4C2Ch)[rcx+rdx*4]
.text:000000000000225B                 add     rax, rcx
.text:000000000000225E                 jmp     rax             ; switch jump
.text:0000000000002260 ; ---------------------------------------------------------------------------
.text:0000000000002260
.text:0000000000002260 loc_2260:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002260                                         ; DATA XREF: .rodata:jpt_25EA↓o
.text:0000000000002260                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002263
.text:0000000000002263 loc_2263:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002263                                         ; DATA XREF: .rodata:jpt_225E↓o
.text:0000000000002263                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002267                 setnz   al
.text:000000000000226A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000226E                 jnz     short loc_227C
.text:0000000000002270                 mov     rax, [rsp+0E8h+s]
.text:0000000000002275                 cmp     byte ptr [rax+1], 0
.text:0000000000002279                 setnz   al
.text:000000000000227C
.text:000000000000227C loc_227C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000227C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002281                 setz    dl
.text:0000000000002284                 test    al, al
.text:0000000000002286                 jz      loc_24D8
.text:000000000000228C
.text:000000000000228C loc_228C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000228C                 xor     r12d, r12d
.text:000000000000228F                 xor     eax, eax
.text:0000000000002291                 nop     dword ptr [rax+00000000h]
.text:0000000000002298
.text:0000000000002298 loc_2298:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002298                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002298                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000229D                 jnz     loc_23B2
.text:00000000000022A3                 test    dl, dl
.text:00000000000022A5                 jnz     loc_23B2
.text:00000000000022AB
.text:00000000000022AB loc_22AB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000022AB                 mov     rsi, [rsp+0E8h+var_C8]
.text:00000000000022B0                 test    rsi, rsi
.text:00000000000022B3                 jz      short loc_22C9
.text:00000000000022B5                 mov     edx, ebx
.text:00000000000022B7                 shr     dl, 5
.text:00000000000022BA                 movzx   edx, dl
.text:00000000000022BD                 mov     edx, [rsi+rdx*4]
.text:00000000000022C0                 bt      edx, ebx
.text:00000000000022C3                 jb      loc_2413
.text:00000000000022C9
.text:00000000000022C9 loc_22C9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:00000000000022C9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:00000000000022C9                 test    r10b, r10b
.text:00000000000022CC                 jnz     loc_2413
.text:00000000000022D2                 xor     eax, 1
.text:00000000000022D5                 add     rbp, 1
.text:00000000000022D9                 and     eax, r8d
.text:00000000000022DC
.text:00000000000022DC loc_22DC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:00000000000022DC                                         ; quotearg_buffer_restyled+AE8↓j
.text:00000000000022DC                 test    al, al
.text:00000000000022DE                 jz      short loc_2300
.text:00000000000022E0                 cmp     r13, r15
.text:00000000000022E3                 jbe     short loc_22EA
.text:00000000000022E5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000022EA
.text:00000000000022EA loc_22EA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:00000000000022EA                 lea     rax, [r15+1]
.text:00000000000022EE                 cmp     r13, rax
.text:00000000000022F1                 jbe     short loc_22F9
.text:00000000000022F3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000022F9
.text:00000000000022F9 loc_22F9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:00000000000022F9                 add     r15, 2
.text:00000000000022FD                 xor     r8d, r8d
.text:0000000000002300
.text:0000000000002300 loc_2300:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002300                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002300                 cmp     r15, r13
.text:0000000000002303                 jnb     short loc_2309
.text:0000000000002305                 mov     [r14+r15], bl
.text:0000000000002309
.text:0000000000002309 loc_2309:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002309                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000230E                 add     r15, 1
.text:0000000000002312                 mov     eax, 0
.text:0000000000002317                 test    r12b, r12b
.text:000000000000231A                 cmovz   edi, eax
.text:000000000000231D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002322                 jmp     loc_2158
.text:0000000000002322 ; ---------------------------------------------------------------------------
.text:0000000000002327                 align 10h
.text:0000000000002330
.text:0000000000002330 loc_2330:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002330                                         ; DATA XREF: .rodata:jpt_25EA↓o
.text:0000000000002330                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002333
.text:0000000000002333 loc_2333:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002333                                         ; DATA XREF: .rodata:jpt_225E↓o
.text:0000000000002333                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002337                 cmp     eax, 2
.text:000000000000233A                 jz      loc_28F8
.text:0000000000002340                 cmp     eax, 5
.text:0000000000002343                 jz      loc_28B8
.text:0000000000002349                 cmp     eax, 2
.text:000000000000234C                 mov     ebx, 3Fh ; '?'
.text:0000000000002351                 setz    dl
.text:0000000000002354                 xor     r12d, r12d
.text:0000000000002357                 xor     eax, eax
.text:0000000000002359                 jmp     loc_2298
.text:0000000000002359 ; ---------------------------------------------------------------------------
.text:000000000000235E                 align 20h
.text:0000000000002360
.text:0000000000002360 loc_2360:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002360                                         ; DATA XREF: .rodata:jpt_25EA↓o
.text:0000000000002360                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002363
.text:0000000000002363 loc_2363:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002363                                         ; DATA XREF: .rodata:jpt_225E↓o
.text:0000000000002363                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002368                 jz      loc_2870
.text:000000000000236E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002373                 xor     edx, edx
.text:0000000000002375                 xor     eax, eax
.text:0000000000002377                 mov     ebx, 27h ; '''
.text:000000000000237C                 jmp     loc_2298
.text:000000000000237C ; ---------------------------------------------------------------------------
.text:0000000000002381                 align 8
.text:0000000000002388
.text:0000000000002388 loc_2388:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002388                                         ; DATA XREF: .rodata:jpt_225E↓o
.text:0000000000002388                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000238D                 mov     ebx, 74h ; 't'
.text:0000000000002392
.text:0000000000002392 loc_2392:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002392                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002392                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002397                 setz    al
.text:000000000000239A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000239E                 jnz     loc_24EE
.text:00000000000023A4
.text:00000000000023A4 loc_23A4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000023A4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000023A4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000023A9                 jnz     short loc_2410
.text:00000000000023AB
.text:00000000000023AB loc_23AB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000023AB                 mov     ebx, edx
.text:00000000000023AD                 xor     r12d, r12d
.text:00000000000023B0                 xor     eax, eax
.text:00000000000023B2
.text:00000000000023B2 loc_23B2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:00000000000023B2                                         ; quotearg_buffer_restyled+235↑j
.text:00000000000023B2                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000023B7                 jnz     loc_22AB
.text:00000000000023BD                 jmp     loc_22C9
.text:00000000000023BD ; ---------------------------------------------------------------------------
.text:00000000000023C2                 align 8
.text:00000000000023C8
.text:00000000000023C8 loc_23C8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023C8                                         ; DATA XREF: .rodata:jpt_225E↓o
.text:00000000000023C8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000023CD                 mov     ebx, 62h ; 'b'
.text:00000000000023D2                 jmp     short loc_23A4
.text:00000000000023D2 ; ---------------------------------------------------------------------------
.text:00000000000023D4                 align 8
.text:00000000000023D8
.text:00000000000023D8 loc_23D8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023D8                                         ; DATA XREF: .rodata:jpt_225E↓o
.text:00000000000023D8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:00000000000023DD                 jz      loc_27B0
.text:00000000000023E3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000023E8                 jz      loc_2600
.text:00000000000023EE
.text:00000000000023EE loc_23EE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:00000000000023EE                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000023F3                 jz      loc_2600
.text:00000000000023F9                 cmp     [rsp+0E8h+n], 0
.text:00000000000023FF                 jnz     loc_27BB
.text:0000000000002405                 mov     ebx, 5Ch ; '\'
.text:000000000000240A                 nop     word ptr [rax+rax+00h]
.text:0000000000002410
.text:0000000000002410 loc_2410:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002410                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002410                 xor     r12d, r12d
.text:0000000000002413
.text:0000000000002413 loc_2413:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002413                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002413                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002418                 setz    dl
.text:000000000000241B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002420                 mov     eax, edx
.text:0000000000002422                 jnz     loc_2C78
.text:0000000000002428                 mov     eax, r8d
.text:000000000000242B                 xor     eax, 1
.text:000000000000242E                 and     al, dl
.text:0000000000002430                 jz      short loc_2461
.text:0000000000002432                 cmp     r13, r15
.text:0000000000002435                 jbe     short loc_243C
.text:0000000000002437                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000243C
.text:000000000000243C loc_243C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000243C                 lea     rdx, [r15+1]
.text:0000000000002440                 cmp     r13, rdx
.text:0000000000002443                 jbe     short loc_244B
.text:0000000000002445                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000244B
.text:000000000000244B loc_244B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000244B                 lea     rdx, [r15+2]
.text:000000000000244F                 cmp     r13, rdx
.text:0000000000002452                 jbe     short loc_245A
.text:0000000000002454                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000245A
.text:000000000000245A loc_245A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000245A                 add     r15, 3
.text:000000000000245E                 mov     r8d, eax
.text:0000000000002461
.text:0000000000002461 loc_2461:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002461                 cmp     r13, r15
.text:0000000000002464                 jbe     short loc_246B
.text:0000000000002466                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000246B
.text:000000000000246B loc_246B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000246B                 add     r15, 1
.text:000000000000246F                 add     rbp, 1
.text:0000000000002473                 jmp     loc_2300
.text:0000000000002473 ; ---------------------------------------------------------------------------
.text:0000000000002478                 align 20h
.text:0000000000002480
.text:0000000000002480 loc_2480:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002480                                         ; DATA XREF: .rodata:jpt_225E↓o
.text:0000000000002480                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002485                 jnz     loc_2653
.text:000000000000248B                 xor     edx, edx
.text:000000000000248D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002492                 jz      loc_23AB
.text:0000000000002498                 add     rbp, 1
.text:000000000000249C                 jmp     loc_2158
.text:000000000000249C ; ---------------------------------------------------------------------------
.text:00000000000024A1                 align 8
.text:00000000000024A8
.text:00000000000024A8 loc_24A8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000024A8                                         ; DATA XREF: .rodata:jpt_225E↓o
.text:00000000000024A8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000024AD                 setz    dl
.text:00000000000024B0                 xor     eax, eax
.text:00000000000024B2                 jmp     loc_2298
.text:00000000000024B2 ; ---------------------------------------------------------------------------
.text:00000000000024B7                 align 20h
.text:00000000000024C0
.text:00000000000024C0 loc_24C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000024C0                                         ; DATA XREF: .rodata:jpt_225E↓o
.text:00000000000024C0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000024C5                 mov     ebx, 61h ; 'a'
.text:00000000000024CA                 jmp     loc_23A4
.text:00000000000024CA ; ---------------------------------------------------------------------------
.text:00000000000024CF                 align 10h
.text:00000000000024D0
.text:00000000000024D0 loc_24D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000024D0                                         ; DATA XREF: .rodata:jpt_225E↓o
.text:00000000000024D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000024D5                 setz    dl
.text:00000000000024D8
.text:00000000000024D8 loc_24D8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000024D8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000024D8                 test    rbp, rbp
.text:00000000000024DB                 jnz     loc_228C
.text:00000000000024E1
.text:00000000000024E1 loc_24E1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000024E1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000024E1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000024E6                 and     al, dl
.text:00000000000024E8                 jz      loc_2298
.text:00000000000024EE
.text:00000000000024EE loc_24EE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000024EE                 mov     rbp, r11
.text:00000000000024F1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000024F9                 jmp     loc_2BF9
.text:00000000000024F9 ; ---------------------------------------------------------------------------
.text:00000000000024FE                 align 20h
.text:0000000000002500
.text:0000000000002500 loc_2500:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002500                                         ; DATA XREF: .rodata:jpt_225E↓o
.text:0000000000002500                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002505                 setz    dl
.text:0000000000002508                 xor     r12d, r12d
.text:000000000000250B                 jmp     short loc_24E1
.text:000000000000250B ; ---------------------------------------------------------------------------
.text:000000000000250D                 align 10h
.text:0000000000002510
.text:0000000000002510 loc_2510:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002510                                         ; DATA XREF: .rodata:jpt_225E↓o
.text:0000000000002510                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002515                 mov     ebx, 20h ; ' '
.text:000000000000251A                 setz    dl
.text:000000000000251D                 jmp     short loc_24E1
.text:000000000000251D ; ---------------------------------------------------------------------------
.text:000000000000251F                 align 20h
.text:0000000000002520
.text:0000000000002520 loc_2520:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002520                                         ; DATA XREF: .rodata:jpt_225E↓o
.text:0000000000002520                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002525                 mov     ebx, 72h ; 'r'
.text:000000000000252A                 jmp     loc_2392
.text:000000000000252A ; ---------------------------------------------------------------------------
.text:000000000000252F                 align 10h
.text:0000000000002530
.text:0000000000002530 loc_2530:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002530                                         ; DATA XREF: .rodata:jpt_225E↓o
.text:0000000000002530                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002535                 mov     ebx, 66h ; 'f'
.text:000000000000253A                 jmp     loc_23A4
.text:000000000000253A ; ---------------------------------------------------------------------------
.text:000000000000253F                 align 20h
.text:0000000000002540
.text:0000000000002540 loc_2540:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002540                                         ; DATA XREF: .rodata:jpt_225E↓o
.text:0000000000002540                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002545                 mov     ebx, 76h ; 'v'
.text:000000000000254A                 jmp     loc_23A4
.text:000000000000254A ; ---------------------------------------------------------------------------
.text:000000000000254F                 align 10h
.text:0000000000002550
.text:0000000000002550 loc_2550:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002550                                         ; DATA XREF: .rodata:jpt_225E↓o
.text:0000000000002550                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002555                 mov     ebx, 6Eh ; 'n'
.text:000000000000255A                 jmp     loc_2392
.text:000000000000255A ; ---------------------------------------------------------------------------
.text:000000000000255F                 align 20h
.text:0000000000002560
.text:0000000000002560 def_25EA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002560                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002560                                         ; DATA XREF: ...
.text:0000000000002560                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002563                 nop     dword ptr [rax+rax+00h]
.text:0000000000002568
.text:0000000000002568 def_225E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002568                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002568                                         ; DATA XREF: ...
.text:0000000000002568                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000256E                 jnz     loc_2918
.text:0000000000002574                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002579                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000257E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002583                 call    ___ctype_b_loc
.text:0000000000002588                 mov     rcx, [rax]
.text:000000000000258B                 movzx   edx, bl
.text:000000000000258E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002594                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000259A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000259F                 mov     edi, 1
.text:00000000000025A4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000025A8                 and     ax, 4000h
.text:00000000000025AC                 setnz   r12b
.text:00000000000025B0                 setz    al
.text:00000000000025B3                 and     al, [rsp+0E8h+var_DB]
.text:00000000000025B7
.text:00000000000025B7 loc_25B7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:00000000000025B7                 test    al, al
.text:00000000000025B9                 jnz     loc_2F51
.text:00000000000025BF                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000025C4                 setz    dl
.text:00000000000025C7                 jmp     loc_2298
.text:00000000000025C7 ; ---------------------------------------------------------------------------
.text:00000000000025CC                 align 10h
.text:00000000000025D0
.text:00000000000025D0 loc_25D0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000025D0                 movzx   ebx, byte ptr [r9]
.text:00000000000025D4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000025D7                 ja      short def_25EA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000025D9                 lea     rcx, jpt_25EA
.text:00000000000025E0                 movzx   edx, bl
.text:00000000000025E3                 movsxd  rax, ds:(jpt_25EA - 4E28h)[rcx+rdx*4]
.text:00000000000025E7                 add     rax, rcx
.text:00000000000025EA                 jmp     rax             ; switch jump
.text:00000000000025EA ; ---------------------------------------------------------------------------
.text:00000000000025EC                 align 10h
.text:00000000000025F0
.text:00000000000025F0 loc_25F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000025F0                                         ; DATA XREF: .rodata:jpt_25EA↓o
.text:00000000000025F0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000025F3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000025F8                 jnz     loc_23EE
.text:00000000000025FE                 xchg    ax, ax
.text:0000000000002600
.text:0000000000002600 loc_2600:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002600                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002600                 mov     edx, 5Ch ; '\'
.text:0000000000002605                 mov     ebx, 5Ch ; '\'
.text:000000000000260A                 jmp     loc_23A4
.text:000000000000260A ; ---------------------------------------------------------------------------
.text:000000000000260F                 align 10h
.text:0000000000002610
.text:0000000000002610 loc_2610:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002610                                         ; DATA XREF: .rodata:jpt_25EA↓o
.text:0000000000002610                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002615                 xor     r10d, r10d
.text:0000000000002618                 mov     ebx, 66h ; 'f'
.text:000000000000261D                 jmp     loc_23A4
.text:000000000000261D ; ---------------------------------------------------------------------------
.text:0000000000002622                 align 8
.text:0000000000002628
.text:0000000000002628 loc_2628:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002628                                         ; DATA XREF: .rodata:jpt_25EA↓o
.text:0000000000002628                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000262D                 xor     r10d, r10d
.text:0000000000002630                 mov     ebx, 6Eh ; 'n'
.text:0000000000002635                 jmp     loc_2392
.text:0000000000002635 ; ---------------------------------------------------------------------------
.text:000000000000263A                 align 20h
.text:0000000000002640
.text:0000000000002640 loc_2640:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002640                                         ; DATA XREF: .rodata:jpt_25EA↓o
.text:0000000000002640                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002645                 jmp     loc_2410
.text:0000000000002645 ; ---------------------------------------------------------------------------
.text:000000000000264A                 align 10h
.text:0000000000002650
.text:0000000000002650 loc_2650:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002650                                         ; DATA XREF: .rodata:jpt_25EA↓o
.text:0000000000002650                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002653
.text:0000000000002653 loc_2653:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002653                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002658                 setz    dl
.text:000000000000265B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002660                 jnz     loc_31FA
.text:0000000000002666                 mov     eax, r8d
.text:0000000000002669                 mov     rcx, r15
.text:000000000000266C                 xor     eax, 1
.text:000000000000266F                 and     al, dl
.text:0000000000002671                 jz      short loc_26A0
.text:0000000000002673                 cmp     r13, r15
.text:0000000000002676                 jbe     short loc_267D
.text:0000000000002678                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000267D
.text:000000000000267D loc_267D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000267D                 lea     rcx, [r15+1]
.text:0000000000002681                 cmp     r13, rcx
.text:0000000000002684                 jbe     short loc_268C
.text:0000000000002686                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000268C
.text:000000000000268C loc_268C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000268C                 lea     rcx, [r15+2]
.text:0000000000002690                 cmp     r13, rcx
.text:0000000000002693                 ja      loc_2CC9
.text:0000000000002699
.text:0000000000002699 loc_2699:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000002699                 lea     rcx, [r15+3]
.text:000000000000269D                 mov     r8d, eax
.text:00000000000026A0
.text:00000000000026A0 loc_26A0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000026A0                 cmp     r13, rcx
.text:00000000000026A3                 jbe     short loc_26AA
.text:00000000000026A5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000026AA
.text:00000000000026AA loc_26AA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000026AA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000026AF                 lea     r15, [rcx+1]
.text:00000000000026B3                 jz      loc_2CB9
.text:00000000000026B9                 lea     rax, [rbp+1]
.text:00000000000026BD                 cmp     rax, r11
.text:00000000000026C0                 jnb     short loc_26DB
.text:00000000000026C2                 mov     rax, [rsp+0E8h+s]
.text:00000000000026C7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000026CC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000026D0                 sub     eax, 30h ; '0'
.text:00000000000026D3                 cmp     al, 9
.text:00000000000026D5                 jbe     loc_2F09
.text:00000000000026DB
.text:00000000000026DB loc_26DB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000026DB                 mov     eax, r12d
.text:00000000000026DE                 mov     ebx, 30h ; '0'
.text:00000000000026E3                 xor     r12d, r12d
.text:00000000000026E6                 jmp     loc_2298
.text:00000000000026E6 ; ---------------------------------------------------------------------------
.text:00000000000026EB                 align 10h
.text:00000000000026F0
.text:00000000000026F0 loc_26F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000026F0                                         ; DATA XREF: .rodata:jpt_25EA↓o
.text:00000000000026F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000026F5                 mov     r12d, r10d
.text:00000000000026F8                 setz    dl
.text:00000000000026FB                 xor     r10d, r10d
.text:00000000000026FE                 xor     eax, eax
.text:0000000000002700                 jmp     loc_2298
.text:0000000000002700 ; ---------------------------------------------------------------------------
.text:0000000000002705                 align 8
.text:0000000000002708
.text:0000000000002708 loc_2708:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002708                                         ; DATA XREF: .rodata:jpt_25EA↓o
.text:0000000000002708                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000270D                 setz    dl
.text:0000000000002710                 xor     r10d, r10d
.text:0000000000002713                 jmp     loc_24D8
.text:0000000000002713 ; ---------------------------------------------------------------------------
.text:0000000000002718                 align 20h
.text:0000000000002720
.text:0000000000002720 loc_2720:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002720                                         ; DATA XREF: .rodata:jpt_25EA↓o
.text:0000000000002720                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002725                 setz    dl
.text:0000000000002728                 xor     r10d, r10d
.text:000000000000272B                 xor     r12d, r12d
.text:000000000000272E                 jmp     loc_24E1
.text:000000000000272E ; ---------------------------------------------------------------------------
.text:0000000000002733                 align 8
.text:0000000000002738
.text:0000000000002738 loc_2738:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002738                                         ; DATA XREF: .rodata:jpt_25EA↓o
.text:0000000000002738                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000273D                 mov     r12d, r10d
.text:0000000000002740                 mov     ebx, 20h ; ' '
.text:0000000000002745                 setz    dl
.text:0000000000002748                 xor     r10d, r10d
.text:000000000000274B                 jmp     loc_24E1
.text:0000000000002750 ; ---------------------------------------------------------------------------
.text:0000000000002750
.text:0000000000002750 loc_2750:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002750                                         ; DATA XREF: .rodata:jpt_25EA↓o
.text:0000000000002750                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002755                 xor     r10d, r10d
.text:0000000000002758                 mov     ebx, 72h ; 'r'
.text:000000000000275D                 jmp     loc_2392
.text:000000000000275D ; ---------------------------------------------------------------------------
.text:0000000000002762                 align 8
.text:0000000000002768
.text:0000000000002768 loc_2768:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002768                                         ; DATA XREF: .rodata:jpt_25EA↓o
.text:0000000000002768                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000276D                 jmp     loc_2410
.text:000000000000276D ; ---------------------------------------------------------------------------
.text:0000000000002772                 align 8
.text:0000000000002778
.text:0000000000002778 loc_2778:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002778                                         ; DATA XREF: .rodata:jpt_25EA↓o
.text:0000000000002778                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000277D                 xor     r10d, r10d
.text:0000000000002780                 mov     ebx, 74h ; 't'
.text:0000000000002785                 jmp     loc_2392
.text:0000000000002785 ; ---------------------------------------------------------------------------
.text:000000000000278A                 align 10h
.text:0000000000002790
.text:0000000000002790 loc_2790:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002790                                         ; DATA XREF: .rodata:jpt_25EA↓o
.text:0000000000002790                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000002795                 jmp     loc_2410
.text:0000000000002795 ; ---------------------------------------------------------------------------
.text:000000000000279A                 align 20h
.text:00000000000027A0
.text:00000000000027A0 loc_27A0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000027A0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000027A0                 xor     r10d, r10d
.text:00000000000027A3                 jmp     loc_2240
.text:00000000000027A3 ; ---------------------------------------------------------------------------
.text:00000000000027A8                 align 10h
.text:00000000000027B0
.text:00000000000027B0 loc_27B0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000027B0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000027B5                 jnz     loc_3120
.text:00000000000027BB
.text:00000000000027BB loc_27BB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000027BB                 add     rbp, 1
.text:00000000000027BF                 mov     eax, r8d
.text:00000000000027C2                 xor     r12d, r12d
.text:00000000000027C5                 mov     ebx, 5Ch ; '\'
.text:00000000000027CA                 jmp     loc_22DC
.text:00000000000027CA ; ---------------------------------------------------------------------------
.text:00000000000027CF                 align 10h
.text:00000000000027D0
.text:00000000000027D0 loc_27D0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000027D0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000027D5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000027DA                 mov     r12d, r8d
.text:00000000000027DD                 mov     rbp, r11
.text:00000000000027E0                 setz    dl
.text:00000000000027E3                 mov     eax, ebx
.text:00000000000027E5                 test    r15, r15
.text:00000000000027E8                 setz    cl
.text:00000000000027EB                 and     eax, edx
.text:00000000000027ED                 and     al, cl
.text:00000000000027EF                 jnz     loc_3256
.text:00000000000027F5                 mov     eax, ebx
.text:00000000000027F7                 xor     eax, 1
.text:00000000000027FA                 and     dl, al
.text:00000000000027FC                 jz      loc_316C
.text:0000000000002802                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002807                 jz      loc_316A
.text:000000000000280D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002812                 jnz     loc_320D
.text:0000000000002818                 test    r13, r13
.text:000000000000281B                 setz    al
.text:000000000000281E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002824                 setnz   dl
.text:0000000000002827                 and     al, dl
.text:0000000000002829                 jz      loc_324C
.text:000000000000282F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002834
.text:0000000000002834 loc_2834:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000002834                 lea     rbx, asc_4BAD   ; "'"
.text:000000000000283B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000283F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002847                 mov     r15d, 1
.text:000000000000284D                 mov     [rsp+0E8h+n], 1
.text:0000000000002856                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000285B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002860                 mov     [rsp+0E8h+var_6C], al
.text:0000000000002864                 jmp     loc_2143
.text:0000000000002864 ; ---------------------------------------------------------------------------
.text:0000000000002869                 align 10h
.text:0000000000002870
.text:0000000000002870 loc_2870:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000002870                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002875                 jnz     loc_3120
.text:000000000000287B                 test    r13, r13
.text:000000000000287E                 jz      loc_2C80
.text:0000000000002884                 xor     edx, edx
.text:0000000000002886                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000288C                 jnz     loc_2C80
.text:0000000000002892
.text:0000000000002892 loc_2892:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000002892                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000002892                 mov     [rsp+0E8h+var_98], r13
.text:0000000000002897                 add     r15, 3
.text:000000000000289B                 xor     eax, eax
.text:000000000000289D                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000028A2                 xor     r8d, r8d
.text:00000000000028A5                 mov     r13, rdx
.text:00000000000028A8                 mov     ebx, 27h ; '''
.text:00000000000028AD                 jmp     loc_22C9
.text:00000000000028AD ; ---------------------------------------------------------------------------
.text:00000000000028B2                 align 8
.text:00000000000028B8
.text:00000000000028B8 loc_28B8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:00000000000028B8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:00000000000028BD                 jz      short loc_28E0
.text:00000000000028BF                 lea     rcx, [rbp+2]
.text:00000000000028C3                 cmp     rcx, r11
.text:00000000000028C6                 jnb     short loc_28E0
.text:00000000000028C8                 mov     rax, [rsp+0E8h+s]
.text:00000000000028CD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000028D2                 jz      loc_3062
.text:00000000000028D8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000028E0
.text:00000000000028E0 loc_28E0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000028E0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000028E0                 xor     edx, edx
.text:00000000000028E2                 xor     r12d, r12d
.text:00000000000028E5                 xor     eax, eax
.text:00000000000028E7                 mov     ebx, 3Fh ; '?'
.text:00000000000028EC                 jmp     loc_2298
.text:00000000000028EC ; ---------------------------------------------------------------------------
.text:00000000000028F1                 align 8
.text:00000000000028F8
.text:00000000000028F8 loc_28F8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000028F8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000028FD                 jnz     loc_3120
.text:0000000000002903                 xor     r12d, r12d
.text:0000000000002906                 xor     eax, eax
.text:0000000000002908                 mov     ebx, 3Fh ; '?'
.text:000000000000290D                 jmp     loc_22C9
.text:000000000000290D ; ---------------------------------------------------------------------------
.text:0000000000002912                 align 8
.text:0000000000002918
.text:0000000000002918 loc_2918:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000002918                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002920                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002924                 mov     [rsp+0E8h+var_48], 0
.text:0000000000002930                 mov     [rsp+0E8h+ps], rax
.text:0000000000002935                 jnz     short loc_2964
.text:0000000000002937                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000293C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000002941                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000002946                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000294B                 call    _strlen
.text:0000000000002950                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000002956                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000295C                 mov     r11, rax
.text:000000000000295F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002964
.text:0000000000002964 loc_2964:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000002964                 lea     rax, [rsp+0E8h+wc]
.text:000000000000296C                 xor     ecx, ecx
.text:000000000000296E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000002972                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000002977                 mov     rbx, rcx
.text:000000000000297A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000002982                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000002987                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000298C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000002994                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000002999                 mov     [rsp+0E8h+var_78], r13
.text:000000000000299E                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000029A3
.text:00000000000029A3 loc_29A3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000029A3                 mov     rax, [rsp+0E8h+s]
.text:00000000000029A8                 lea     r14, [rbp+rbx+0]
.text:00000000000029AD                 mov     rdx, [rsp+0E8h+var_B8]
.text:00000000000029B2                 mov     rcx, [rsp+0E8h+ps]
.text:00000000000029B7                 mov     rdi, [rsp+0E8h+var_B0]
.text:00000000000029BC                 lea     r13, [rax+r14]
.text:00000000000029C0                 sub     rdx, r14
.text:00000000000029C3                 mov     rsi, r13
.text:00000000000029C6                 call    rpl_mbrtowc
.text:00000000000029CB                 test    rax, rax
.text:00000000000029CE                 mov     r15, rax
.text:00000000000029D1                 jz      short loc_2A21
.text:00000000000029D3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000029D7                 jz      loc_2FF5
.text:00000000000029DD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000029E1                 jz      loc_2F81
.text:00000000000029E7                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000029EC                 setz    al
.text:00000000000029EF                 and     al, [rsp+0E8h+var_D9]
.text:00000000000029F3                 jnz     loc_2B90
.text:00000000000029F9
.text:00000000000029F9 loc_29F9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000029F9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000029F9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000002A00                 call    _iswprint
.text:0000000000002A05                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000002A0A                 test    eax, eax
.text:0000000000002A0C                 mov     eax, 0
.text:0000000000002A11                 cmovz   r12d, eax
.text:0000000000002A15                 add     rbx, r15
.text:0000000000002A18                 call    _mbsinit
.text:0000000000002A1D                 test    eax, eax
.text:0000000000002A1F                 jz      short loc_29A3
.text:0000000000002A21
.text:0000000000002A21 loc_2A21:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002A21                 mov     edx, r12d
.text:0000000000002A24                 mov     rdi, rbx
.text:0000000000002A27                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002A2D                 xor     edx, 1
.text:0000000000002A30                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002A35                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002A3B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000002A3F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002A47                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002A4C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002A51                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002A56
.text:0000000000002A56 loc_2A56:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000002A56                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000002A56                 cmp     rdi, 1
.text:0000000000002A5A                 jbe     loc_305B
.text:0000000000002A60
.text:0000000000002A60 loc_2A60:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000002A60                 mov     rcx, rdi
.text:0000000000002A63                 xor     esi, esi
.text:0000000000002A65                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000002A6B                 add     rcx, rbp
.text:0000000000002A6E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002A73                 jmp     loc_2B2E
.text:0000000000002A73 ; ---------------------------------------------------------------------------
.text:0000000000002A78                 align 20h
.text:0000000000002A80
.text:0000000000002A80 loc_2A80:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000002A80                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002A85                 setz    al
.text:0000000000002A88                 test    r9b, r9b
.text:0000000000002A8B                 jnz     loc_2F40
.text:0000000000002A91                 mov     esi, r8d
.text:0000000000002A94                 xor     esi, 1
.text:0000000000002A97                 and     al, sil
.text:0000000000002A9A                 jz      short loc_2ACB
.text:0000000000002A9C                 cmp     r13, r15
.text:0000000000002A9F                 jbe     short loc_2AA6
.text:0000000000002AA1                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002AA6
.text:0000000000002AA6 loc_2AA6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000002AA6                 lea     rsi, [r15+1]
.text:0000000000002AAA                 cmp     r13, rsi
.text:0000000000002AAD                 jbe     short loc_2AB5
.text:0000000000002AAF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002AB5
.text:0000000000002AB5 loc_2AB5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000002AB5                 lea     rsi, [r15+2]
.text:0000000000002AB9                 cmp     r13, rsi
.text:0000000000002ABC                 jbe     short loc_2AC4
.text:0000000000002ABE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002AC4
.text:0000000000002AC4 loc_2AC4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000002AC4                 add     r15, 3
.text:0000000000002AC8                 mov     r8d, eax
.text:0000000000002ACB
.text:0000000000002ACB loc_2ACB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000002ACB                 cmp     r13, r15
.text:0000000000002ACE                 jbe     short loc_2AD5
.text:0000000000002AD0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002AD5
.text:0000000000002AD5 loc_2AD5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000002AD5                 lea     rax, [r15+1]
.text:0000000000002AD9                 cmp     r13, rax
.text:0000000000002ADC                 jbe     short loc_2AEB
.text:0000000000002ADE                 mov     eax, ebx
.text:0000000000002AE0                 shr     al, 6
.text:0000000000002AE3                 add     eax, 30h ; '0'
.text:0000000000002AE6                 mov     [r14+r15+1], al
.text:0000000000002AEB
.text:0000000000002AEB loc_2AEB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000002AEB                 lea     rax, [r15+2]
.text:0000000000002AEF                 cmp     r13, rax
.text:0000000000002AF2                 jbe     short loc_2B04
.text:0000000000002AF4                 mov     eax, ebx
.text:0000000000002AF6                 shr     al, 3
.text:0000000000002AF9                 and     eax, 7
.text:0000000000002AFC                 add     eax, 30h ; '0'
.text:0000000000002AFF                 mov     [r14+r15+2], al
.text:0000000000002B04
.text:0000000000002B04 loc_2B04:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002B04                 and     ebx, 7
.text:0000000000002B07                 add     rbp, 1
.text:0000000000002B0B                 add     r15, 3
.text:0000000000002B0F                 add     ebx, 30h ; '0'
.text:0000000000002B12                 cmp     rbp, rcx
.text:0000000000002B15                 jnb     loc_2300
.text:0000000000002B1B                 mov     esi, edx
.text:0000000000002B1D
.text:0000000000002B1D loc_2B1D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000002B1D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000002B1D                 cmp     r13, r15
.text:0000000000002B20                 jbe     short loc_2B26
.text:0000000000002B22                 mov     [r14+r15], bl
.text:0000000000002B26
.text:0000000000002B26 loc_2B26:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000002B26                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000002B2A                 add     r15, 1
.text:0000000000002B2E
.text:0000000000002B2E loc_2B2E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000002B2E                 test    dl, dl
.text:0000000000002B30                 jnz     loc_2A80
.text:0000000000002B36                 mov     eax, esi
.text:0000000000002B38                 xor     eax, 1
.text:0000000000002B3B                 and     eax, r8d
.text:0000000000002B3E                 test    r10b, r10b
.text:0000000000002B41                 jz      short loc_2B51
.text:0000000000002B43                 cmp     r13, r15
.text:0000000000002B46                 jbe     short loc_2B4D
.text:0000000000002B48                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002B4D
.text:0000000000002B4D loc_2B4D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000002B4D                 add     r15, 1
.text:0000000000002B51
.text:0000000000002B51 loc_2B51:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000002B51                 add     rbp, 1
.text:0000000000002B55                 cmp     rbp, rcx
.text:0000000000002B58                 jnb     loc_22DC
.text:0000000000002B5E                 test    al, al
.text:0000000000002B60                 jz      loc_2F5E
.text:0000000000002B66                 cmp     r13, r15
.text:0000000000002B69                 jbe     short loc_2B70
.text:0000000000002B6B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002B70
.text:0000000000002B70 loc_2B70:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000002B70                 lea     rax, [r15+1]
.text:0000000000002B74                 cmp     r13, rax
.text:0000000000002B77                 jbe     short loc_2B7F
.text:0000000000002B79                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002B7F
.text:0000000000002B7F loc_2B7F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000002B7F                 add     r15, 2
.text:0000000000002B83                 xor     r10d, r10d
.text:0000000000002B86                 xor     r8d, r8d
.text:0000000000002B89                 jmp     short loc_2B1D
.text:0000000000002B89 ; ---------------------------------------------------------------------------
.text:0000000000002B8B                 align 10h
.text:0000000000002B90
.text:0000000000002B90 loc_2B90:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000002B90                 cmp     r15, 1
.text:0000000000002B94                 jz      loc_29F9
.text:0000000000002B9A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002B9F                 lea     rcx, [rdi+r15]
.text:0000000000002BA3                 lea     rdx, [rdi+r14+1]
.text:0000000000002BA8                 lea     r8, [rcx+r14]
.text:0000000000002BAC                 jmp     short loc_2BBD
.text:0000000000002BAC ; ---------------------------------------------------------------------------
.text:0000000000002BAE                 align 10h
.text:0000000000002BB0
.text:0000000000002BB0 loc_2BB0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000002BB0                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000002BB0                 add     rdx, 1
.text:0000000000002BB4                 cmp     r8, rdx
.text:0000000000002BB7                 jz      loc_29F9
.text:0000000000002BBD
.text:0000000000002BBD loc_2BBD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000002BBD                 movzx   ecx, byte ptr [rdx]
.text:0000000000002BC0                 sub     ecx, 5Bh ; '['
.text:0000000000002BC3                 cmp     cl, 21h ; '!'
.text:0000000000002BC6                 ja      short loc_2BB0
.text:0000000000002BC8                 mov     esi, 1
.text:0000000000002BCD                 shl     rsi, cl
.text:0000000000002BD0                 mov     rcx, rsi
.text:0000000000002BD3                 mov     rsi, 20000002Bh
.text:0000000000002BDD                 test    rcx, rsi
.text:0000000000002BE0                 jz      short loc_2BB0
.text:0000000000002BE2                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002BE7                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002BEC                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000002BF1                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002BF9
.text:0000000000002BF9 loc_2BF9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000002BF9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000002BF9                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002BFE                 jz      short loc_2C10
.text:0000000000002C00                 test    al, al
.text:0000000000002C02                 mov     eax, 4
.text:0000000000002C07                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000002C0C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000002C10
.text:0000000000002C10 loc_2C10:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000002C10                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000002C10                 sub     rsp, 8
.text:0000000000002C14                 mov     rcx, rbp
.text:0000000000002C17                 mov     rsi, r13
.text:0000000000002C1A                 push    [rsp+0F0h+var_88]
.text:0000000000002C1E                 push    [rsp+0F8h+var_80]
.text:0000000000002C22                 mov     rdi, r14
.text:0000000000002C25                 push    0
.text:0000000000002C27                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002C2F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000002C34                 mov     rdx, [rsp+108h+s]
.text:0000000000002C39                 and     r9d, 0FFFFFFFDh
.text:0000000000002C3D                 call    quotearg_buffer_restyled
.text:0000000000002C42                 add     rsp, 20h
.text:0000000000002C46                 mov     r15, rax
.text:0000000000002C49
.text:0000000000002C49 loc_2C49:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000002C49                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000002C49                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000002C51                 xor     rbx, fs:28h
.text:0000000000002C5A                 mov     rax, r15
.text:0000000000002C5D                 jnz     loc_3263
.text:0000000000002C63                 add     rsp, 0B8h
.text:0000000000002C6A                 pop     rbx
.text:0000000000002C6B                 pop     rbp
.text:0000000000002C6C                 pop     r12
.text:0000000000002C6E                 pop     r13
.text:0000000000002C70                 pop     r14
.text:0000000000002C72                 pop     r15
.text:0000000000002C74                 retn
.text:0000000000002C74 ; ---------------------------------------------------------------------------
.text:0000000000002C75                 align 8
.text:0000000000002C78
.text:0000000000002C78 loc_2C78:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000002C78                 mov     rbp, r11
.text:0000000000002C7B                 jmp     loc_2BF9
.text:0000000000002C80 ; ---------------------------------------------------------------------------
.text:0000000000002C80
.text:0000000000002C80 loc_2C80:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000002C80                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000002C80                 cmp     r13, r15
.text:0000000000002C83                 jbe     short loc_2C8A
.text:0000000000002C85                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002C8A
.text:0000000000002C8A loc_2C8A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000002C8A                 lea     rax, [r15+1]
.text:0000000000002C8E                 cmp     r13, rax
.text:0000000000002C91                 jbe     short loc_2C99
.text:0000000000002C93                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000002C99
.text:0000000000002C99 loc_2C99:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000002C99                 lea     rax, [r15+2]
.text:0000000000002C9D                 cmp     r13, rax
.text:0000000000002CA0                 jbe     loc_3292
.text:0000000000002CA6                 mov     rdx, r13
.text:0000000000002CA9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002CAF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002CB4                 jmp     loc_2892
.text:0000000000002CB9 ; ---------------------------------------------------------------------------
.text:0000000000002CB9
.text:0000000000002CB9 loc_2CB9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002CB9                 mov     eax, r12d
.text:0000000000002CBC                 mov     ebx, 30h ; '0'
.text:0000000000002CC1                 xor     r12d, r12d
.text:0000000000002CC4                 jmp     loc_22C9
.text:0000000000002CC9 ; ---------------------------------------------------------------------------
.text:0000000000002CC9
.text:0000000000002CC9 loc_2CC9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000002CC9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002CCF                 jmp     loc_2699
.text:0000000000002CD4 ; ---------------------------------------------------------------------------
.text:0000000000002CD4
.text:0000000000002CD4 loc_2CD4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002CD4                                         ; DATA XREF: .rodata:jpt_2101↓o
.text:0000000000002CD4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000002CD6                 jnz     loc_2103        ; jumptable 00000000000121F1 case 1
.text:0000000000002CDC                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002CE1
.text:0000000000002CE1 loc_2CE1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000002CE1                 test    r13, r13
.text:0000000000002CE4                 jnz     loc_327A
.text:0000000000002CEA                 lea     rax, asc_4BAD   ; "'"
.text:0000000000002CF1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002CFA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002CFF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002D04                 xor     r12d, r12d
.text:0000000000002D07                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002D0C                 mov     [rsp+0E8h+n], 1
.text:0000000000002D15                 mov     [rsp+0E8h+s2], rax
.text:0000000000002D1A                 mov     r15d, 1
.text:0000000000002D20                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002D28                 jmp     loc_2143
.text:0000000000002D28 ; ---------------------------------------------------------------------------
.text:0000000000002D2D                 align 10h
.text:0000000000002D30
.text:0000000000002D30 loc_2D30:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002D30                                         ; DATA XREF: .rodata:jpt_2101↓o
.text:0000000000002D30                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000002D32                 jnz     loc_312D
.text:0000000000002D38                 test    r13, r13
.text:0000000000002D3B                 jz      loc_2F66
.text:0000000000002D41                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000002D45                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002D4A                 xor     r12d, r12d
.text:0000000000002D4D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002D52                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002D5B
.text:0000000000002D5B loc_2D5B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000002D5B                 lea     rax, unk_4BAB
.text:0000000000002D62                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002D67                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002D6C                 mov     [rsp+0E8h+n], 1
.text:0000000000002D75                 mov     r15d, 1
.text:0000000000002D7B                 mov     [rsp+0E8h+s2], rax
.text:0000000000002D80                 jmp     loc_2143
.text:0000000000002D85 ; ---------------------------------------------------------------------------
.text:0000000000002D85
.text:0000000000002D85 loc_2D85:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002D85                                         ; DATA XREF: .rodata:jpt_2101↓o
.text:0000000000002D85                 lea     rax, unk_4BAB   ; jumptable 00000000000121F1 case 6
.text:0000000000002D8C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002D91                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002D96                 xor     r12d, r12d
.text:0000000000002D99                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002DA2                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002DA7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002DAC                 mov     [rsp+0E8h+n], 1
.text:0000000000002DB5                 xor     r15d, r15d
.text:0000000000002DB8                 mov     [rsp+0E8h+s2], rax
.text:0000000000002DBD                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000002DC5                 jmp     loc_2143
.text:0000000000002DCA ; ---------------------------------------------------------------------------
.text:0000000000002DCA
.text:0000000000002DCA loc_2DCA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002DCA                                         ; DATA XREF: .rodata:jpt_2101↓o
.text:0000000000002DCA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000002DCF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002DD4                 xor     r12d, r12d
.text:0000000000002DD7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002DE0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002DE5                 xor     r15d, r15d
.text:0000000000002DE8                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002DED                 mov     [rsp+0E8h+n], 0
.text:0000000000002DF6                 mov     [rsp+0E8h+s2], 0
.text:0000000000002DFF                 jmp     loc_2143
.text:0000000000002E04 ; ---------------------------------------------------------------------------
.text:0000000000002E04
.text:0000000000002E04 loc_2E04:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002E04                                         ; DATA XREF: .rodata:jpt_2101↓o
.text:0000000000002E04                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000002E09                 jz      short loc_2E61
.text:0000000000002E0B                 lea     rsi, asc_4BAF   ; "`"
.text:0000000000002E12                 xor     edi, edi        ; domainname
.text:0000000000002E14                 mov     edx, 5          ; category
.text:0000000000002E19                 call    _dcgettext
.text:0000000000002E1E                 mov     rcx, rax
.text:0000000000002E21                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002E26                 lea     rax, asc_4BAF   ; "`"
.text:0000000000002E2D                 cmp     rcx, rax
.text:0000000000002E30                 jz      loc_31CE
.text:0000000000002E36
.text:0000000000002E36 loc_2E36:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000002E36                 lea     rsi, asc_4BAD   ; "'"
.text:0000000000002E3D                 xor     edi, edi        ; domainname
.text:0000000000002E3F                 mov     edx, 5          ; category
.text:0000000000002E44                 call    _dcgettext
.text:0000000000002E49                 mov     rcx, rax
.text:0000000000002E4C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002E51                 lea     rax, asc_4BAD   ; "'"
.text:0000000000002E58                 cmp     rcx, rax
.text:0000000000002E5B                 jz      loc_31E4
.text:0000000000002E61
.text:0000000000002E61 loc_2E61:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000002E61                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000002E61                 xor     r15d, r15d
.text:0000000000002E64                 test    ebx, ebx
.text:0000000000002E66                 jz      loc_302D
.text:0000000000002E6C
.text:0000000000002E6C loc_2E6C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000002E6C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000002E6C                 test    ebx, ebx
.text:0000000000002E6E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000002E73                 setnz   [rsp+0E8h+var_D9]
.text:0000000000002E78                 xor     r12d, r12d
.text:0000000000002E7B                 mov     rdi, rbx        ; s
.text:0000000000002E7E                 call    _strlen
.text:0000000000002E83                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002E88                 mov     [rsp+0E8h+n], rax
.text:0000000000002E8D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002E92                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002E97                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002EA0                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002EA5                 jmp     loc_2143
.text:0000000000002EAA ; ---------------------------------------------------------------------------
.text:0000000000002EAA
.text:0000000000002EAA loc_2EAA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002EAA                                         ; DATA XREF: .rodata:jpt_2101↓o
.text:0000000000002EAA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000002EAF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002EB4                 xor     r12d, r12d
.text:0000000000002EB7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002EC0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002EC5                 xor     r15d, r15d
.text:0000000000002EC8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002ECD                 mov     [rsp+0E8h+n], 0
.text:0000000000002ED6                 mov     [rsp+0E8h+s2], 0
.text:0000000000002EDF                 jmp     loc_2143
.text:0000000000002EE4 ; ---------------------------------------------------------------------------
.text:0000000000002EE4
.text:0000000000002EE4 loc_2EE4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002EE4                                         ; DATA XREF: .rodata:jpt_2101↓o
.text:0000000000002EE4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000002EE9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002EEE                 xor     r12d, r12d
.text:0000000000002EF1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002EFA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002EFF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002F04                 jmp     loc_2123
.text:0000000000002F09 ; ---------------------------------------------------------------------------
.text:0000000000002F09
.text:0000000000002F09 loc_2F09:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000002F09                 cmp     r13, r15
.text:0000000000002F0C                 jbe     short loc_2F13
.text:0000000000002F0E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000002F13
.text:0000000000002F13 loc_2F13:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000002F13                 lea     rax, [rcx+2]
.text:0000000000002F17                 cmp     r13, rax
.text:0000000000002F1A                 jbe     short loc_2F22
.text:0000000000002F1C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000002F22
.text:0000000000002F22 loc_2F22:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000002F22                 mov     eax, r12d
.text:0000000000002F25                 lea     r15, [rcx+3]
.text:0000000000002F29                 xor     r12d, r12d
.text:0000000000002F2C                 mov     ebx, 30h ; '0'
.text:0000000000002F31                 jmp     loc_2298
.text:0000000000002F31 ; ---------------------------------------------------------------------------
.text:0000000000002F36                 align 20h
.text:0000000000002F40
.text:0000000000002F40 loc_2F40:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000002F40                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002F45                 mov     rbp, r11
.text:0000000000002F48                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000002F4C                 jmp     loc_2BF9
.text:0000000000002F51 ; ---------------------------------------------------------------------------
.text:0000000000002F51
.text:0000000000002F51 loc_2F51:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000002F51                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002F56                 xor     r12d, r12d
.text:0000000000002F59                 jmp     loc_2A60
.text:0000000000002F5E ; ---------------------------------------------------------------------------
.text:0000000000002F5E
.text:0000000000002F5E loc_2F5E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000002F5E                 xor     r10d, r10d
.text:0000000000002F61                 jmp     loc_2B1D
.text:0000000000002F66 ; ---------------------------------------------------------------------------
.text:0000000000002F66
.text:0000000000002F66 loc_2F66:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000002F66                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F6F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002F74                 xor     r12d, r12d
.text:0000000000002F77                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F7C                 jmp     loc_2D5B
.text:0000000000002F81 ; ---------------------------------------------------------------------------
.text:0000000000002F81
.text:0000000000002F81 loc_2F81:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000002F81                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002F86                 mov     rsi, r14
.text:0000000000002F89                 mov     rcx, r13
.text:0000000000002F8C                 mov     rax, rbx
.text:0000000000002F8F                 mov     rdi, rbx
.text:0000000000002F92                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002F98                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002F9D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000002FA5                 cmp     rsi, r11
.text:0000000000002FA8                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002FAE                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002FB6                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002FBB                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002FC0                 jnb     short loc_2FE8
.text:0000000000002FC2                 cmp     byte ptr [rcx], 0
.text:0000000000002FC5                 jnz     short loc_2FD7
.text:0000000000002FC7                 jmp     short loc_2FE8
.text:0000000000002FC7 ; ---------------------------------------------------------------------------
.text:0000000000002FC9                 align 10h
.text:0000000000002FD0
.text:0000000000002FD0 loc_2FD0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000002FD0                 cmp     byte ptr [r9+rax], 0
.text:0000000000002FD5                 jz      short loc_2FE5
.text:0000000000002FD7
.text:0000000000002FD7 loc_2FD7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000002FD7                 add     rax, 1
.text:0000000000002FDB                 lea     rdx, [rbp+rax+0]
.text:0000000000002FE0                 cmp     r11, rdx
.text:0000000000002FE3                 ja      short loc_2FD0
.text:0000000000002FE5
.text:0000000000002FE5 loc_2FE5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000002FE5                 mov     rdi, rax
.text:0000000000002FE8
.text:0000000000002FE8 loc_2FE8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000002FE8                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000002FE8                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002FED                 xor     r12d, r12d
.text:0000000000002FF0                 jmp     loc_2A56
.text:0000000000002FF5 ; ---------------------------------------------------------------------------
.text:0000000000002FF5
.text:0000000000002FF5 loc_2FF5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000002FF5                 mov     rdi, rbx
.text:0000000000002FF8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002FFE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003003                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003009                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003011                 xor     r12d, r12d
.text:0000000000003014                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003019                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000301E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003023                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003028                 jmp     loc_2A56
.text:000000000000302D ; ---------------------------------------------------------------------------
.text:000000000000302D
.text:000000000000302D loc_302D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000302D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003032                 movzx   eax, byte ptr [rdx]
.text:0000000000003035                 test    al, al
.text:0000000000003037                 jz      loc_2E6C
.text:000000000000303D                 nop     dword ptr [rax]
.text:0000000000003040
.text:0000000000003040 loc_3040:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003040                 cmp     r13, r15
.text:0000000000003043                 jbe     short loc_3049
.text:0000000000003045                 mov     [r14+r15], al
.text:0000000000003049
.text:0000000000003049 loc_3049:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003049                 add     r15, 1
.text:000000000000304D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003052                 test    al, al
.text:0000000000003054                 jnz     short loc_3040
.text:0000000000003056                 jmp     loc_2E6C
.text:000000000000305B ; ---------------------------------------------------------------------------
.text:000000000000305B
.text:000000000000305B loc_305B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000305B                 mov     eax, edx
.text:000000000000305D                 jmp     loc_25B7
.text:0000000000003062 ; ---------------------------------------------------------------------------
.text:0000000000003062
.text:0000000000003062 loc_3062:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003062                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003066                 cmp     bl, 3Eh ; '>'
.text:0000000000003069                 ja      loc_28E0
.text:000000000000306F                 mov     rax, 7000A38200000000h
.text:0000000000003079                 bt      rax, rbx
.text:000000000000307D                 jnb     loc_28E0
.text:0000000000003083                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003088                 jnz     loc_3272
.text:000000000000308E                 cmp     r13, r15
.text:0000000000003091                 jbe     short loc_3098
.text:0000000000003093                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003098
.text:0000000000003098 loc_3098:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003098                 lea     rax, [r15+1]
.text:000000000000309C                 cmp     r13, rax
.text:000000000000309F                 jbe     short loc_30A7
.text:00000000000030A1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:00000000000030A7
.text:00000000000030A7 loc_30A7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:00000000000030A7                 lea     rax, [r15+2]
.text:00000000000030AB                 cmp     r13, rax
.text:00000000000030AE                 jbe     short loc_30B6
.text:00000000000030B0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:00000000000030B6
.text:00000000000030B6 loc_30B6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:00000000000030B6                 lea     rax, [r15+3]
.text:00000000000030BA                 cmp     r13, rax
.text:00000000000030BD                 jbe     short loc_30C5
.text:00000000000030BF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:00000000000030C5
.text:00000000000030C5 loc_30C5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:00000000000030C5                 add     r15, 4
.text:00000000000030C9                 xor     edx, edx
.text:00000000000030CB                 xor     r12d, r12d
.text:00000000000030CE                 xor     eax, eax
.text:00000000000030D0                 mov     rbp, rcx
.text:00000000000030D3                 jmp     loc_2298
.text:00000000000030D8 ; ---------------------------------------------------------------------------
.text:00000000000030D8
.text:00000000000030D8 loc_30D8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000030D8                                         ; DATA XREF: .rodata:jpt_2101↓o
.text:00000000000030D8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:00000000000030DA                 jz      loc_3268
.text:00000000000030E0                 lea     rax, asc_4BAD   ; "'"
.text:00000000000030E7                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000030EC                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000030F1                 xor     r12d, r12d
.text:00000000000030F4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000030FD                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003102                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003107                 mov     [rsp+0E8h+n], 1
.text:0000000000003110                 xor     r15d, r15d
.text:0000000000003113                 mov     [rsp+0E8h+s2], rax
.text:0000000000003118                 jmp     loc_2143
.text:0000000000003118 ; ---------------------------------------------------------------------------
.text:000000000000311D                 align 20h
.text:0000000000003120
.text:0000000000003120 loc_3120:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003120                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003120                 mov     rbp, r11
.text:0000000000003123                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003128                 jmp     loc_2BF9
.text:000000000000312D ; ---------------------------------------------------------------------------
.text:000000000000312D
.text:000000000000312D loc_312D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000312D                 lea     rax, unk_4BAB
.text:0000000000003134                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003139                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000313E                 xor     r12d, r12d
.text:0000000000003141                 mov     [rsp+0E8h+var_98], 0
.text:000000000000314A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000314F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003154                 mov     [rsp+0E8h+n], 1
.text:000000000000315D                 xor     r15d, r15d
.text:0000000000003160                 mov     [rsp+0E8h+s2], rax
.text:0000000000003165                 jmp     loc_2143
.text:000000000000316A ; ---------------------------------------------------------------------------
.text:000000000000316A
.text:000000000000316A loc_316A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000316A                 mov     eax, edx
.text:000000000000316C
.text:000000000000316C loc_316C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000316C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000316C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003171                 test    rbx, rbx
.text:0000000000003174                 jz      short loc_31A2
.text:0000000000003176                 test    al, al
.text:0000000000003178                 jz      short loc_31A2
.text:000000000000317A                 movzx   ecx, byte ptr [rbx]
.text:000000000000317D                 mov     rax, rbx
.text:0000000000003180                 test    cl, cl
.text:0000000000003182                 jz      short loc_31A2
.text:0000000000003184                 mov     rdx, r15
.text:0000000000003187                 sub     rax, r15
.text:000000000000318A
.text:000000000000318A loc_318A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000318A                 cmp     r13, rdx
.text:000000000000318D                 jbe     short loc_3193
.text:000000000000318F                 mov     [r14+rdx], cl
.text:0000000000003193
.text:0000000000003193 loc_3193:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003193                 add     rdx, 1
.text:0000000000003197                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000319B                 test    cl, cl
.text:000000000000319D                 jnz     short loc_318A
.text:000000000000319F                 mov     r15, rdx
.text:00000000000031A2
.text:00000000000031A2 loc_31A2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000031A2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000031A2                 cmp     r13, r15
.text:00000000000031A5                 jbe     loc_2C49
.text:00000000000031AB                 mov     byte ptr [r14+r15], 0
.text:00000000000031B0                 jmp     loc_2C49
.text:00000000000031B5 ; ---------------------------------------------------------------------------
.text:00000000000031B5
.text:00000000000031B5 loc_31B5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:00000000000031B5                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000031BA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000031BF                 mov     rbp, r11
.text:00000000000031C2                 setz    al
.text:00000000000031C5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000031C9                 jmp     loc_2BF9
.text:00000000000031CE ; ---------------------------------------------------------------------------
.text:00000000000031CE
.text:00000000000031CE loc_31CE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000031CE                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000031D2                 mov     rdi, rcx
.text:00000000000031D5                 call    gettext_quote
.text:00000000000031DA                 mov     [rsp+0E8h+var_80], rax
.text:00000000000031DF                 jmp     loc_2E36
.text:00000000000031E4 ; ---------------------------------------------------------------------------
.text:00000000000031E4
.text:00000000000031E4 loc_31E4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:00000000000031E4                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000031E8                 mov     rdi, rcx
.text:00000000000031EB                 call    gettext_quote
.text:00000000000031F0                 mov     [rsp+0E8h+var_88], rax
.text:00000000000031F5                 jmp     loc_2E61
.text:00000000000031FA ; ---------------------------------------------------------------------------
.text:00000000000031FA
.text:00000000000031FA loc_31FA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:00000000000031FA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000031FF                 mov     rbp, r11
.text:0000000000003202                 mov     eax, edx
.text:0000000000003204                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003208                 jmp     loc_2BF9
.text:000000000000320D ; ---------------------------------------------------------------------------
.text:000000000000320D
.text:000000000000320D loc_320D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000320D                 sub     rsp, 8
.text:0000000000003211                 mov     r8d, 5
.text:0000000000003217                 mov     rcx, r11
.text:000000000000321A                 push    [rsp+0F0h+var_88]
.text:000000000000321E                 push    [rsp+0F8h+var_80]
.text:0000000000003222                 mov     rdi, r14
.text:0000000000003225                 push    [rsp+100h+var_C8]
.text:0000000000003229                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003231                 mov     rdx, [rsp+108h+s]
.text:0000000000003236                 mov     rsi, [rsp+108h+var_98]
.text:000000000000323B                 call    quotearg_buffer_restyled
.text:0000000000003240                 add     rsp, 20h
.text:0000000000003244                 mov     r15, rax
.text:0000000000003247                 jmp     loc_2C49
.text:000000000000324C ; ---------------------------------------------------------------------------
.text:000000000000324C
.text:000000000000324C loc_324C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000324C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003251                 jmp     loc_316C
.text:0000000000003256 ; ---------------------------------------------------------------------------
.text:0000000000003256
.text:0000000000003256 loc_3256:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003256                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000325E                 jmp     loc_2BF9
.text:0000000000003263 ; ---------------------------------------------------------------------------
.text:0000000000003263
.text:0000000000003263 loc_3263:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003263                 call    ___stack_chk_fail
.text:0000000000003268 ; ---------------------------------------------------------------------------
.text:0000000000003268
.text:0000000000003268 loc_3268:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003268                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000326D                 jmp     loc_2CE1
.text:0000000000003272 ; ---------------------------------------------------------------------------
.text:0000000000003272
.text:0000000000003272 loc_3272:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003272                 mov     rbp, r11
.text:0000000000003275                 jmp     loc_2C10
.text:000000000000327A ; ---------------------------------------------------------------------------
.text:000000000000327A
.text:000000000000327A loc_327A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000327A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000327F                 xor     eax, eax
.text:0000000000003281                 xor     r12d, r12d
.text:0000000000003284                 mov     [rsp+0E8h+var_98], 0
.text:000000000000328D                 jmp     loc_2834
.text:0000000000003292 ; ---------------------------------------------------------------------------
.text:0000000000003292
.text:0000000000003292 loc_3292:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003292                 mov     rdx, r13
.text:0000000000003295                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000329A                 jmp     loc_2892
.text:000000000000329F ; ---------------------------------------------------------------------------
.text:000000000000329F
.text:000000000000329F def_2101:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000329F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000329F ; } // starts at 2070
.text:000000000000329F quotearg_buffer_restyled endp
.text:000000000000329F
.text:000000000000329F ; ---------------------------------------------------------------------------
.text:00000000000032A4                 align 10h
.text:00000000000032B0
.text:00000000000032B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032B0
.text:00000000000032B0
.text:00000000000032B0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:00000000000032B0                                         ; quotearg_n_mem+7↓j ...
.text:00000000000032B0
.text:00000000000032B0 var_50          = qword ptr -50h
.text:00000000000032B0 var_48          = qword ptr -48h
.text:00000000000032B0 var_40          = dword ptr -40h
.text:00000000000032B0 var_3C          = dword ptr -3Ch
.text:00000000000032B0
.text:00000000000032B0 ; __unwind {
.text:00000000000032B0                 push    r15
.text:00000000000032B2                 push    r14
.text:00000000000032B4                 movsxd  r15, edi
.text:00000000000032B7                 push    r13
.text:00000000000032B9                 push    r12
.text:00000000000032BB                 mov     r14, rdx
.text:00000000000032BE                 push    rbp
.text:00000000000032BF                 push    rbx
.text:00000000000032C0                 mov     rbp, rcx
.text:00000000000032C3                 sub     rsp, 28h
.text:00000000000032C7                 mov     [rsp+58h+var_50], rsi
.text:00000000000032CC                 call    ___errno_location
.text:00000000000032D1                 mov     r13, rax
.text:00000000000032D4                 mov     eax, [rax]
.text:00000000000032D6                 test    r15d, r15d
.text:00000000000032D9                 mov     rbx, cs:slotvec
.text:00000000000032E0                 mov     [rsp+58h+var_40], eax
.text:00000000000032E4                 js      loc_3451
.text:00000000000032EA                 cmp     cs:nslots, r15d
.text:00000000000032F1                 jg      short loc_3355
.text:00000000000032F3                 cmp     r15d, 7FFFFFFFh
.text:00000000000032FA                 jz      loc_3456
.text:0000000000003300                 lea     r12d, [r15+1]
.text:0000000000003304                 lea     rax, slotvec0
.text:000000000000330B                 movsxd  rsi, r12d
.text:000000000000330E                 shl     rsi, 4
.text:0000000000003312                 cmp     rbx, rax
.text:0000000000003315                 jz      loc_3430
.text:000000000000331B                 mov     rdi, rbx
.text:000000000000331E                 call    xrealloc
.text:0000000000003323                 mov     rbx, rax
.text:0000000000003326                 mov     cs:slotvec, rax
.text:000000000000332D
.text:000000000000332D loc_332D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000332D                 movsxd  rdi, cs:nslots
.text:0000000000003334                 mov     edx, r12d
.text:0000000000003337                 xor     esi, esi        ; c
.text:0000000000003339                 sub     edx, edi
.text:000000000000333B                 shl     rdi, 4
.text:000000000000333F                 movsxd  rdx, edx
.text:0000000000003342                 add     rdi, rbx        ; s
.text:0000000000003345                 shl     rdx, 4          ; n
.text:0000000000003349                 call    _memset
.text:000000000000334E                 mov     cs:nslots, r12d
.text:0000000000003355
.text:0000000000003355 loc_3355:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003355                 mov     eax, [rbp+4]
.text:0000000000003358                 shl     r15, 4
.text:000000000000335C                 sub     rsp, 8
.text:0000000000003360                 add     rbx, r15
.text:0000000000003363                 lea     r15, [rbp+8]
.text:0000000000003367                 mov     r8d, [rbp+0]
.text:000000000000336B                 mov     r11, [rbx]
.text:000000000000336E                 mov     r12, [rbx+8]
.text:0000000000003372                 mov     rcx, r14
.text:0000000000003375                 or      eax, 1
.text:0000000000003378                 mov     [rsp+60h+var_3C], eax
.text:000000000000337C                 push    qword ptr [rbp+30h]
.text:000000000000337F                 mov     r9d, eax
.text:0000000000003382                 push    qword ptr [rbp+28h]
.text:0000000000003385                 push    r15
.text:0000000000003387                 mov     rsi, r11
.text:000000000000338A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000338F                 mov     rdi, r12
.text:0000000000003392                 mov     [rsp+78h+var_48], r11
.text:0000000000003397                 call    quotearg_buffer_restyled
.text:000000000000339C                 add     rsp, 20h
.text:00000000000033A0                 mov     r11, [rsp+58h+var_48]
.text:00000000000033A5                 cmp     r11, rax
.text:00000000000033A8                 ja      short loc_3411
.text:00000000000033AA                 lea     rsi, [rax+1]
.text:00000000000033AE                 lea     rax, slot0
.text:00000000000033B5                 cmp     r12, rax
.text:00000000000033B8                 mov     [rbx], rsi
.text:00000000000033BB                 jz      short loc_33CF
.text:00000000000033BD                 mov     rdi, r12        ; ptr
.text:00000000000033C0                 mov     [rsp+58h+var_48], rsi
.text:00000000000033C5                 call    _free
.text:00000000000033CA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000033CF
.text:00000000000033CF loc_33CF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000033CF                 mov     rdi, rsi
.text:00000000000033D2                 mov     [rsp+58h+var_48], rsi
.text:00000000000033D7                 call    xmalloc
.text:00000000000033DC                 sub     rsp, 8
.text:00000000000033E0                 mov     [rbx+8], rax
.text:00000000000033E4                 mov     r8d, [rbp+0]
.text:00000000000033E8                 push    qword ptr [rbp+30h]
.text:00000000000033EB                 push    qword ptr [rbp+28h]
.text:00000000000033EE                 mov     rcx, r14
.text:00000000000033F1                 push    r15
.text:00000000000033F3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000033F8                 mov     rdi, rax
.text:00000000000033FB                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003400                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003405                 mov     r12, rax
.text:0000000000003408                 call    quotearg_buffer_restyled
.text:000000000000340D                 add     rsp, 20h
.text:0000000000003411
.text:0000000000003411 loc_3411:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003411                 mov     eax, [rsp+58h+var_40]
.text:0000000000003415                 mov     [r13+0], eax
.text:0000000000003419                 add     rsp, 28h
.text:000000000000341D                 mov     rax, r12
.text:0000000000003420                 pop     rbx
.text:0000000000003421                 pop     rbp
.text:0000000000003422                 pop     r12
.text:0000000000003424                 pop     r13
.text:0000000000003426                 pop     r14
.text:0000000000003428                 pop     r15
.text:000000000000342A                 retn
.text:000000000000342A ; ---------------------------------------------------------------------------
.text:000000000000342B                 align 10h
.text:0000000000003430
.text:0000000000003430 loc_3430:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003430                 xor     edi, edi
.text:0000000000003432                 call    xrealloc
.text:0000000000003437                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000343F                 mov     rbx, rax
.text:0000000000003442                 mov     cs:slotvec, rax
.text:0000000000003449                 movups  xmmword ptr [rax], xmm0
.text:000000000000344C                 jmp     loc_332D
.text:0000000000003451 ; ---------------------------------------------------------------------------
.text:0000000000003451
.text:0000000000003451 loc_3451:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003451                 call    _abort
.text:0000000000003456 ; ---------------------------------------------------------------------------
.text:0000000000003456
.text:0000000000003456 loc_3456:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003456                 call    xalloc_die
.text:0000000000003456 ; } // starts at 32B0
.text:0000000000003456 quotearg_n_options endp
.text:0000000000003456
.text:0000000000003456 ; ---------------------------------------------------------------------------
.text:000000000000345B                 align 20h
.text:0000000000003460
.text:0000000000003460 ; =============== S U B R O U T I N E =======================================
.text:0000000000003460
.text:0000000000003460 ; Attributes: info_from_lumina
.text:0000000000003460
.text:0000000000003460 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003460                 public clone_quoting_options
.text:0000000000003460 clone_quoting_options proc near
.text:0000000000003460 ; __unwind {
.text:0000000000003460                 push    r12
.text:0000000000003462                 push    rbp
.text:0000000000003463                 push    rbx
.text:0000000000003464                 mov     rbx, rdi
.text:0000000000003467                 call    ___errno_location
.text:000000000000346C                 mov     r12d, [rax]
.text:000000000000346F                 mov     rbp, rax
.text:0000000000003472                 lea     rax, default_quoting_options
.text:0000000000003479                 test    rbx, rbx
.text:000000000000347C                 mov     esi, 38h ; '8'  ; n
.text:0000000000003481                 cmovz   rbx, rax
.text:0000000000003485                 mov     rdi, rbx        ; src
.text:0000000000003488                 call    xmemdup
.text:000000000000348D                 mov     [rbp+0], r12d
.text:0000000000003491                 pop     rbx
.text:0000000000003492                 pop     rbp
.text:0000000000003493                 pop     r12
.text:0000000000003495                 retn
.text:0000000000003495 ; } // starts at 3460
.text:0000000000003495 clone_quoting_options endp
.text:0000000000003495
.text:0000000000003495 ; ---------------------------------------------------------------------------
.text:0000000000003496                 align 20h
.text:00000000000034A0
.text:00000000000034A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034A0
.text:00000000000034A0
.text:00000000000034A0                 public get_quoting_style
.text:00000000000034A0 get_quoting_style proc near
.text:00000000000034A0 ; __unwind {
.text:00000000000034A0                 lea     rax, default_quoting_options
.text:00000000000034A7                 test    rdi, rdi
.text:00000000000034AA                 cmovz   rdi, rax
.text:00000000000034AE                 mov     eax, [rdi]
.text:00000000000034B0                 retn
.text:00000000000034B0 ; } // starts at 34A0
.text:00000000000034B0 get_quoting_style endp
.text:00000000000034B0
.text:00000000000034B0 ; ---------------------------------------------------------------------------
.text:00000000000034B1                 align 20h
.text:00000000000034C0
.text:00000000000034C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034C0
.text:00000000000034C0
.text:00000000000034C0                 public set_quoting_style
.text:00000000000034C0 set_quoting_style proc near
.text:00000000000034C0 ; __unwind {
.text:00000000000034C0                 lea     rax, default_quoting_options
.text:00000000000034C7                 test    rdi, rdi
.text:00000000000034CA                 cmovz   rdi, rax
.text:00000000000034CE                 mov     [rdi], esi
.text:00000000000034D0                 retn
.text:00000000000034D0 ; } // starts at 34C0
.text:00000000000034D0 set_quoting_style endp
.text:00000000000034D0
.text:00000000000034D0 ; ---------------------------------------------------------------------------
.text:00000000000034D1                 align 20h
.text:00000000000034E0
.text:00000000000034E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034E0
.text:00000000000034E0 ; Attributes: info_from_lumina
.text:00000000000034E0
.text:00000000000034E0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000034E0                 public set_char_quoting
.text:00000000000034E0 set_char_quoting proc near
.text:00000000000034E0 ; __unwind {
.text:00000000000034E0                 lea     rax, default_quoting_options
.text:00000000000034E7                 test    rdi, rdi
.text:00000000000034EA                 mov     ecx, esi
.text:00000000000034EC                 cmovz   rdi, rax
.text:00000000000034F0                 mov     eax, esi
.text:00000000000034F2                 and     ecx, 1Fh
.text:00000000000034F5                 shr     al, 5
.text:00000000000034F8                 movzx   eax, al
.text:00000000000034FB                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003500                 mov     esi, [rdi]
.text:0000000000003502                 mov     eax, esi
.text:0000000000003504                 shr     eax, cl
.text:0000000000003506                 xor     edx, eax
.text:0000000000003508                 and     eax, 1
.text:000000000000350B                 and     edx, 1
.text:000000000000350E                 shl     edx, cl
.text:0000000000003510                 xor     edx, esi
.text:0000000000003512                 mov     [rdi], edx
.text:0000000000003514                 retn
.text:0000000000003514 ; } // starts at 34E0
.text:0000000000003514 set_char_quoting endp
.text:0000000000003514
.text:0000000000003514 ; ---------------------------------------------------------------------------
.text:0000000000003515                 align 20h
.text:0000000000003520
.text:0000000000003520 ; =============== S U B R O U T I N E =======================================
.text:0000000000003520
.text:0000000000003520
.text:0000000000003520                 public set_quoting_flags
.text:0000000000003520 set_quoting_flags proc near
.text:0000000000003520 ; __unwind {
.text:0000000000003520                 lea     rax, default_quoting_options
.text:0000000000003527                 test    rdi, rdi
.text:000000000000352A                 cmovz   rdi, rax
.text:000000000000352E                 mov     eax, [rdi+4]
.text:0000000000003531                 mov     [rdi+4], esi
.text:0000000000003534                 retn
.text:0000000000003534 ; } // starts at 3520
.text:0000000000003534 set_quoting_flags endp
.text:0000000000003534
.text:0000000000003534 ; ---------------------------------------------------------------------------
.text:0000000000003535                 align 20h
.text:0000000000003540
.text:0000000000003540 ; =============== S U B R O U T I N E =======================================
.text:0000000000003540
.text:0000000000003540 ; Attributes: info_from_lumina
.text:0000000000003540
.text:0000000000003540 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003540                 public set_custom_quoting
.text:0000000000003540 set_custom_quoting proc near
.text:0000000000003540 ; __unwind {
.text:0000000000003540                 lea     rax, default_quoting_options
.text:0000000000003547                 test    rdi, rdi
.text:000000000000354A                 cmovz   rdi, rax
.text:000000000000354E                 test    rsi, rsi
.text:0000000000003551                 mov     dword ptr [rdi], 0Ah
.text:0000000000003557                 jz      short loc_3567
.text:0000000000003559                 test    rdx, rdx
.text:000000000000355C                 jz      short loc_3567
.text:000000000000355E                 mov     [rdi+28h], rsi
.text:0000000000003562                 mov     [rdi+30h], rdx
.text:0000000000003566                 retn
.text:0000000000003567 ; ---------------------------------------------------------------------------
.text:0000000000003567
.text:0000000000003567 loc_3567:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003567                                         ; set_custom_quoting+1C↑j
.text:0000000000003567                 sub     rsp, 8
.text:000000000000356B                 call    _abort
.text:000000000000356B ; } // starts at 3540
.text:000000000000356B set_custom_quoting endp
.text:000000000000356B
.text:0000000000003570
.text:0000000000003570 ; =============== S U B R O U T I N E =======================================
.text:0000000000003570
.text:0000000000003570 ; Attributes: info_from_lumina
.text:0000000000003570
.text:0000000000003570 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003570                 public quotearg_buffer
.text:0000000000003570 quotearg_buffer proc near
.text:0000000000003570
.text:0000000000003570 var_40          = qword ptr -40h
.text:0000000000003570
.text:0000000000003570 ; __unwind {
.text:0000000000003570                 push    r15
.text:0000000000003572                 push    r14
.text:0000000000003574                 lea     rax, default_quoting_options
.text:000000000000357B                 push    r13
.text:000000000000357D                 push    r12
.text:000000000000357F                 mov     r13, rdi
.text:0000000000003582                 push    rbp
.text:0000000000003583                 push    rbx
.text:0000000000003584                 mov     rbx, r8
.text:0000000000003587                 mov     r14, rsi
.text:000000000000358A                 mov     r15, rdx
.text:000000000000358D                 sub     rsp, 18h
.text:0000000000003591                 test    r8, r8
.text:0000000000003594                 cmovz   rbx, rax
.text:0000000000003598                 mov     [rsp+48h+var_40], rcx
.text:000000000000359D                 call    ___errno_location
.text:00000000000035A2                 mov     r12d, [rax]
.text:00000000000035A5                 mov     rbp, rax
.text:00000000000035A8                 lea     rax, [rbx+8]
.text:00000000000035AC                 sub     rsp, 8
.text:00000000000035B0                 mov     r9d, [rbx+4]
.text:00000000000035B4                 push    qword ptr [rbx+30h]
.text:00000000000035B7                 mov     r8d, [rbx]
.text:00000000000035BA                 push    qword ptr [rbx+28h]
.text:00000000000035BD                 mov     rdx, r15
.text:00000000000035C0                 push    rax
.text:00000000000035C1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000035C6                 mov     rsi, r14
.text:00000000000035C9                 mov     rdi, r13
.text:00000000000035CC                 call    quotearg_buffer_restyled
.text:00000000000035D1                 mov     [rbp+0], r12d
.text:00000000000035D5                 add     rsp, 38h
.text:00000000000035D9                 pop     rbx
.text:00000000000035DA                 pop     rbp
.text:00000000000035DB                 pop     r12
.text:00000000000035DD                 pop     r13
.text:00000000000035DF                 pop     r14
.text:00000000000035E1                 pop     r15
.text:00000000000035E3                 retn
.text:00000000000035E3 ; } // starts at 3570
.text:00000000000035E3 quotearg_buffer endp
.text:00000000000035E3
.text:00000000000035E3 ; ---------------------------------------------------------------------------
.text:00000000000035E4                 align 10h
.text:00000000000035F0
.text:00000000000035F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035F0
.text:00000000000035F0 ; Attributes: info_from_lumina
.text:00000000000035F0
.text:00000000000035F0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000035F0                 public quotearg_alloc_mem
.text:00000000000035F0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000035F0
.text:00000000000035F0 var_5C          = dword ptr -5Ch
.text:00000000000035F0 var_58          = qword ptr -58h
.text:00000000000035F0 var_50          = qword ptr -50h
.text:00000000000035F0 var_48          = qword ptr -48h
.text:00000000000035F0 var_40          = qword ptr -40h
.text:00000000000035F0
.text:00000000000035F0 ; __unwind {
.text:00000000000035F0                 push    r15
.text:00000000000035F2                 push    r14
.text:00000000000035F4                 lea     rax, default_quoting_options
.text:00000000000035FB                 push    r13
.text:00000000000035FD                 push    r12
.text:00000000000035FF                 mov     r12, rdx
.text:0000000000003602                 push    rbp
.text:0000000000003603                 push    rbx
.text:0000000000003604                 mov     rbx, rcx
.text:0000000000003607                 mov     r14, rdi
.text:000000000000360A                 mov     r15, rsi
.text:000000000000360D                 sub     rsp, 38h
.text:0000000000003611                 test    rcx, rcx
.text:0000000000003614                 cmovz   rbx, rax
.text:0000000000003618                 xor     ebp, ebp
.text:000000000000361A                 call    ___errno_location
.text:000000000000361F                 test    r12, r12
.text:0000000000003622                 mov     r13, rax
.text:0000000000003625                 mov     eax, [rax]
.text:0000000000003627                 setz    bpl
.text:000000000000362B                 or      ebp, [rbx+4]
.text:000000000000362E                 lea     r10, [rbx+8]
.text:0000000000003632                 sub     rsp, 8
.text:0000000000003636                 mov     r8d, [rbx]
.text:0000000000003639                 mov     rcx, r15
.text:000000000000363C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003640                 push    qword ptr [rbx+30h]
.text:0000000000003643                 mov     rdx, r14
.text:0000000000003646                 push    qword ptr [rbx+28h]
.text:0000000000003649                 push    r10
.text:000000000000364B                 xor     esi, esi
.text:000000000000364D                 mov     r9d, ebp
.text:0000000000003650                 xor     edi, edi
.text:0000000000003652                 mov     [rsp+88h+var_48], r10
.text:0000000000003657                 call    quotearg_buffer_restyled
.text:000000000000365C                 lea     rsi, [rax+1]
.text:0000000000003660                 mov     [rsp+88h+var_40], rax
.text:0000000000003665                 add     rsp, 20h
.text:0000000000003669                 mov     rdi, rsi
.text:000000000000366C                 mov     [rsp+68h+var_50], rsi
.text:0000000000003671                 call    xmalloc
.text:0000000000003676                 mov     [rsp+68h+var_58], rax
.text:000000000000367B                 sub     rsp, 8
.text:000000000000367F                 push    qword ptr [rbx+30h]
.text:0000000000003682                 push    qword ptr [rbx+28h]
.text:0000000000003685                 mov     r10, [rsp+80h+var_48]
.text:000000000000368A                 mov     r9d, ebp
.text:000000000000368D                 mov     r8d, [rbx]
.text:0000000000003690                 mov     rcx, r15
.text:0000000000003693                 mov     rdx, r14
.text:0000000000003696                 mov     rdi, rax
.text:0000000000003699                 push    r10
.text:000000000000369B                 mov     rsi, [rsp+88h+var_50]
.text:00000000000036A0                 call    quotearg_buffer_restyled
.text:00000000000036A5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000036A9                 add     rsp, 20h
.text:00000000000036AD                 test    r12, r12
.text:00000000000036B0                 mov     [r13+0], eax
.text:00000000000036B4                 jz      short loc_36BF
.text:00000000000036B6                 mov     r11, [rsp+68h+var_40]
.text:00000000000036BB                 mov     [r12], r11
.text:00000000000036BF
.text:00000000000036BF loc_36BF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000036BF                 mov     rax, [rsp+68h+var_58]
.text:00000000000036C4                 add     rsp, 38h
.text:00000000000036C8                 pop     rbx
.text:00000000000036C9                 pop     rbp
.text:00000000000036CA                 pop     r12
.text:00000000000036CC                 pop     r13
.text:00000000000036CE                 pop     r14
.text:00000000000036D0                 pop     r15
.text:00000000000036D2                 retn
.text:00000000000036D2 ; } // starts at 35F0
.text:00000000000036D2 quotearg_alloc_mem endp
.text:00000000000036D2
.text:00000000000036D2 ; ---------------------------------------------------------------------------
.text:00000000000036D3                 align 20h
.text:00000000000036E0
.text:00000000000036E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036E0
.text:00000000000036E0
.text:00000000000036E0                 public quotearg_alloc
.text:00000000000036E0 quotearg_alloc  proc near
.text:00000000000036E0 ; __unwind {
.text:00000000000036E0                 mov     rcx, rdx
.text:00000000000036E3                 xor     edx, edx
.text:00000000000036E5                 jmp     quotearg_alloc_mem
.text:00000000000036E5 ; } // starts at 36E0
.text:00000000000036E5 quotearg_alloc  endp
.text:00000000000036E5
.text:00000000000036E5 ; ---------------------------------------------------------------------------
.text:00000000000036EA                 align 10h
.text:00000000000036F0
.text:00000000000036F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036F0
.text:00000000000036F0 ; Attributes: info_from_lumina
.text:00000000000036F0
.text:00000000000036F0 ; void __cdecl quotearg_free()
.text:00000000000036F0                 public quotearg_free
.text:00000000000036F0 quotearg_free   proc near
.text:00000000000036F0 ; __unwind {
.text:00000000000036F0                 mov     eax, cs:nslots
.text:00000000000036F6                 push    r12
.text:00000000000036F8                 mov     r12, cs:slotvec
.text:00000000000036FF                 push    rbp
.text:0000000000003700                 push    rbx
.text:0000000000003701                 cmp     eax, 1
.text:0000000000003704                 jle     short loc_3731
.text:0000000000003706                 sub     eax, 2
.text:0000000000003709                 lea     rbx, [r12+18h]
.text:000000000000370E                 shl     rax, 4
.text:0000000000003712                 lea     rbp, [r12+rax+28h]
.text:0000000000003717                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003720
.text:0000000000003720 loc_3720:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003720                 mov     rdi, [rbx]      ; ptr
.text:0000000000003723                 add     rbx, 10h
.text:0000000000003727                 call    _free
.text:000000000000372C                 cmp     rbx, rbp
.text:000000000000372F                 jnz     short loc_3720
.text:0000000000003731
.text:0000000000003731 loc_3731:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003731                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003736                 lea     rbx, slot0
.text:000000000000373D                 cmp     rdi, rbx
.text:0000000000003740                 jz      short loc_3759
.text:0000000000003742                 call    _free
.text:0000000000003747                 mov     cs:slotvec0, 100h
.text:0000000000003752                 mov     cs:off_207078, rbx
.text:0000000000003759
.text:0000000000003759 loc_3759:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003759                 lea     rbx, slotvec0
.text:0000000000003760                 cmp     r12, rbx
.text:0000000000003763                 jz      short loc_3774
.text:0000000000003765                 mov     rdi, r12        ; ptr
.text:0000000000003768                 call    _free
.text:000000000000376D                 mov     cs:slotvec, rbx
.text:0000000000003774
.text:0000000000003774 loc_3774:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003774                 pop     rbx
.text:0000000000003775                 mov     cs:nslots, 1
.text:000000000000377F                 pop     rbp
.text:0000000000003780                 pop     r12
.text:0000000000003782                 retn
.text:0000000000003782 ; } // starts at 36F0
.text:0000000000003782 quotearg_free   endp
.text:0000000000003782
.text:0000000000003782 ; ---------------------------------------------------------------------------
.text:0000000000003783                 align 10h
.text:0000000000003790
.text:0000000000003790 ; =============== S U B R O U T I N E =======================================
.text:0000000000003790
.text:0000000000003790
.text:0000000000003790                 public quotearg_n
.text:0000000000003790 quotearg_n      proc near
.text:0000000000003790 ; __unwind {
.text:0000000000003790                 lea     rcx, default_quoting_options
.text:0000000000003797                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000379E                 jmp     quotearg_n_options
.text:000000000000379E ; } // starts at 3790
.text:000000000000379E quotearg_n      endp
.text:000000000000379E
.text:000000000000379E ; ---------------------------------------------------------------------------
.text:00000000000037A3                 align 10h
.text:00000000000037B0
.text:00000000000037B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037B0
.text:00000000000037B0
.text:00000000000037B0                 public quotearg_n_mem
.text:00000000000037B0 quotearg_n_mem  proc near
.text:00000000000037B0 ; __unwind {
.text:00000000000037B0                 lea     rcx, default_quoting_options
.text:00000000000037B7                 jmp     quotearg_n_options
.text:00000000000037B7 ; } // starts at 37B0
.text:00000000000037B7 quotearg_n_mem  endp
.text:00000000000037B7
.text:00000000000037B7 ; ---------------------------------------------------------------------------
.text:00000000000037BC                 align 20h
.text:00000000000037C0
.text:00000000000037C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037C0
.text:00000000000037C0
.text:00000000000037C0                 public quotearg
.text:00000000000037C0 quotearg        proc near
.text:00000000000037C0 ; __unwind {
.text:00000000000037C0                 lea     rcx, default_quoting_options
.text:00000000000037C7                 mov     rsi, rdi
.text:00000000000037CA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000037D1                 xor     edi, edi
.text:00000000000037D3                 jmp     quotearg_n_options
.text:00000000000037D3 ; } // starts at 37C0
.text:00000000000037D3 quotearg        endp
.text:00000000000037D3
.text:00000000000037D3 ; ---------------------------------------------------------------------------
.text:00000000000037D8                 align 20h
.text:00000000000037E0
.text:00000000000037E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037E0
.text:00000000000037E0
.text:00000000000037E0                 public quotearg_mem
.text:00000000000037E0 quotearg_mem    proc near
.text:00000000000037E0 ; __unwind {
.text:00000000000037E0                 lea     rcx, default_quoting_options
.text:00000000000037E7                 mov     rdx, rsi
.text:00000000000037EA                 mov     rsi, rdi
.text:00000000000037ED                 xor     edi, edi
.text:00000000000037EF                 jmp     quotearg_n_options
.text:00000000000037EF ; } // starts at 37E0
.text:00000000000037EF quotearg_mem    endp
.text:00000000000037EF
.text:00000000000037EF ; ---------------------------------------------------------------------------
.text:00000000000037F4                 align 20h
.text:0000000000003800
.text:0000000000003800 ; =============== S U B R O U T I N E =======================================
.text:0000000000003800
.text:0000000000003800 ; Attributes: info_from_lumina
.text:0000000000003800
.text:0000000000003800 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003800                 public quotearg_n_style
.text:0000000000003800 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000003800
.text:0000000000003800 var_48          = dword ptr -48h
.text:0000000000003800 var_44          = qword ptr -44h
.text:0000000000003800 var_3C          = qword ptr -3Ch
.text:0000000000003800 var_34          = qword ptr -34h
.text:0000000000003800 var_2C          = qword ptr -2Ch
.text:0000000000003800 var_24          = qword ptr -24h
.text:0000000000003800 var_1C          = qword ptr -1Ch
.text:0000000000003800 var_14          = dword ptr -14h
.text:0000000000003800 var_10          = qword ptr -10h
.text:0000000000003800
.text:0000000000003800 ; __unwind {
.text:0000000000003800                 sub     rsp, 48h
.text:0000000000003804                 mov     rax, rdx
.text:0000000000003807                 mov     rdx, fs:28h
.text:0000000000003810                 mov     [rsp+48h+var_10], rdx
.text:0000000000003815                 xor     edx, edx
.text:0000000000003817                 cmp     esi, 0Ah
.text:000000000000381A                 jz      short loc_3884
.text:000000000000381C                 mov     [rsp+48h+var_48], esi
.text:000000000000381F                 mov     rcx, rsp
.text:0000000000003822                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003829                 mov     rsi, rax
.text:000000000000382C                 mov     [rsp+48h+var_44], 0
.text:0000000000003835                 mov     [rsp+48h+var_3C], 0
.text:000000000000383E                 mov     [rsp+48h+var_34], 0
.text:0000000000003847                 mov     [rsp+48h+var_2C], 0
.text:0000000000003850                 mov     [rsp+48h+var_24], 0
.text:0000000000003859                 mov     [rsp+48h+var_1C], 0
.text:0000000000003862                 mov     [rsp+48h+var_14], 0
.text:000000000000386A                 call    quotearg_n_options
.text:000000000000386F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003874                 xor     rcx, fs:28h
.text:000000000000387D                 jnz     short loc_3889
.text:000000000000387F                 add     rsp, 48h
.text:0000000000003883                 retn
.text:0000000000003884 ; ---------------------------------------------------------------------------
.text:0000000000003884
.text:0000000000003884 loc_3884:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000003884                 call    _abort
.text:0000000000003889 ; ---------------------------------------------------------------------------
.text:0000000000003889
.text:0000000000003889 loc_3889:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000003889                 call    ___stack_chk_fail
.text:0000000000003889 ; } // starts at 3800
.text:0000000000003889 quotearg_n_style endp
.text:0000000000003889
.text:0000000000003889 ; ---------------------------------------------------------------------------
.text:000000000000388E                 align 10h
.text:0000000000003890
.text:0000000000003890 ; =============== S U B R O U T I N E =======================================
.text:0000000000003890
.text:0000000000003890 ; Attributes: info_from_lumina
.text:0000000000003890
.text:0000000000003890 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000003890                 public quotearg_n_style_mem
.text:0000000000003890 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000003890
.text:0000000000003890 var_48          = dword ptr -48h
.text:0000000000003890 var_44          = qword ptr -44h
.text:0000000000003890 var_3C          = qword ptr -3Ch
.text:0000000000003890 var_34          = qword ptr -34h
.text:0000000000003890 var_2C          = qword ptr -2Ch
.text:0000000000003890 var_24          = qword ptr -24h
.text:0000000000003890 var_1C          = qword ptr -1Ch
.text:0000000000003890 var_14          = dword ptr -14h
.text:0000000000003890 var_10          = qword ptr -10h
.text:0000000000003890
.text:0000000000003890 ; __unwind {
.text:0000000000003890                 sub     rsp, 48h
.text:0000000000003894                 mov     rax, rdx
.text:0000000000003897                 mov     rdx, rcx
.text:000000000000389A                 mov     rcx, fs:28h
.text:00000000000038A3                 mov     [rsp+48h+var_10], rcx
.text:00000000000038A8                 xor     ecx, ecx
.text:00000000000038AA                 cmp     esi, 0Ah
.text:00000000000038AD                 jz      short loc_3910
.text:00000000000038AF                 mov     [rsp+48h+var_48], esi
.text:00000000000038B2                 mov     rcx, rsp
.text:00000000000038B5                 mov     rsi, rax
.text:00000000000038B8                 mov     [rsp+48h+var_44], 0
.text:00000000000038C1                 mov     [rsp+48h+var_3C], 0
.text:00000000000038CA                 mov     [rsp+48h+var_34], 0
.text:00000000000038D3                 mov     [rsp+48h+var_2C], 0
.text:00000000000038DC                 mov     [rsp+48h+var_24], 0
.text:00000000000038E5                 mov     [rsp+48h+var_1C], 0
.text:00000000000038EE                 mov     [rsp+48h+var_14], 0
.text:00000000000038F6                 call    quotearg_n_options
.text:00000000000038FB                 mov     rdx, [rsp+48h+var_10]
.text:0000000000003900                 xor     rdx, fs:28h
.text:0000000000003909                 jnz     short loc_3915
.text:000000000000390B                 add     rsp, 48h
.text:000000000000390F                 retn
.text:0000000000003910 ; ---------------------------------------------------------------------------
.text:0000000000003910
.text:0000000000003910 loc_3910:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000003910                 call    _abort
.text:0000000000003915 ; ---------------------------------------------------------------------------
.text:0000000000003915
.text:0000000000003915 loc_3915:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000003915                 call    ___stack_chk_fail
.text:0000000000003915 ; } // starts at 3890
.text:0000000000003915 quotearg_n_style_mem endp
.text:0000000000003915
.text:0000000000003915 ; ---------------------------------------------------------------------------
.text:000000000000391A                 align 20h
.text:0000000000003920
.text:0000000000003920 ; =============== S U B R O U T I N E =======================================
.text:0000000000003920
.text:0000000000003920
.text:0000000000003920                 public quotearg_style
.text:0000000000003920 quotearg_style  proc near
.text:0000000000003920 ; __unwind {
.text:0000000000003920                 mov     rdx, rsi
.text:0000000000003923                 mov     esi, edi
.text:0000000000003925                 xor     edi, edi
.text:0000000000003927                 jmp     quotearg_n_style
.text:0000000000003927 ; } // starts at 3920
.text:0000000000003927 quotearg_style  endp
.text:0000000000003927
.text:0000000000003927 ; ---------------------------------------------------------------------------
.text:000000000000392C                 align 10h
.text:0000000000003930
.text:0000000000003930 ; =============== S U B R O U T I N E =======================================
.text:0000000000003930
.text:0000000000003930
.text:0000000000003930                 public quotearg_style_mem
.text:0000000000003930 quotearg_style_mem proc near
.text:0000000000003930 ; __unwind {
.text:0000000000003930                 mov     rcx, rdx
.text:0000000000003933                 mov     rdx, rsi
.text:0000000000003936                 mov     esi, edi
.text:0000000000003938                 xor     edi, edi
.text:000000000000393A                 jmp     quotearg_n_style_mem
.text:000000000000393A ; } // starts at 3930
.text:000000000000393A quotearg_style_mem endp
.text:000000000000393A
.text:000000000000393A ; ---------------------------------------------------------------------------
.text:000000000000393F                 align 20h
.text:0000000000003940
.text:0000000000003940 ; =============== S U B R O U T I N E =======================================
.text:0000000000003940
.text:0000000000003940 ; Attributes: info_from_lumina
.text:0000000000003940
.text:0000000000003940 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000003940                 public quotearg_char_mem
.text:0000000000003940 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000003940                                         ; quotearg_colon+C↓j ...
.text:0000000000003940
.text:0000000000003940 var_48          = xmmword ptr -48h
.text:0000000000003940 var_38          = xmmword ptr -38h
.text:0000000000003940 var_28          = xmmword ptr -28h
.text:0000000000003940 var_18          = qword ptr -18h
.text:0000000000003940 var_10          = qword ptr -10h
.text:0000000000003940
.text:0000000000003940 ; __unwind {
.text:0000000000003940                 sub     rsp, 48h
.text:0000000000003944                 mov     ecx, edx
.text:0000000000003946                 mov     rax, fs:28h
.text:000000000000394F                 mov     [rsp+48h+var_10], rax
.text:0000000000003954                 xor     eax, eax
.text:0000000000003956                 mov     rax, cs:qword_207230
.text:000000000000395D                 mov     r8, rsp
.text:0000000000003960                 and     ecx, 1Fh
.text:0000000000003963                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000396B                 mov     [rsp+48h+var_18], rax
.text:0000000000003970                 mov     eax, edx
.text:0000000000003972                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003976                 shr     al, 5
.text:0000000000003979                 movzx   eax, al
.text:000000000000397C                 lea     r9, [r8+rax*4+8]
.text:0000000000003981                 movdqa  xmm0, cs:xmmword_207210
.text:0000000000003989                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000398E                 movdqa  xmm0, cs:xmmword_207220
.text:0000000000003996                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000399B                 mov     edx, [r9]
.text:000000000000399E                 mov     eax, edx
.text:00000000000039A0                 shr     eax, cl
.text:00000000000039A2                 not     eax
.text:00000000000039A4                 and     eax, 1
.text:00000000000039A7                 shl     eax, cl
.text:00000000000039A9                 mov     rcx, r8
.text:00000000000039AC                 xor     eax, edx
.text:00000000000039AE                 mov     rdx, rsi
.text:00000000000039B1                 mov     rsi, rdi
.text:00000000000039B4                 mov     [r9], eax
.text:00000000000039B7                 xor     edi, edi
.text:00000000000039B9                 call    quotearg_n_options
.text:00000000000039BE                 mov     rsi, [rsp+48h+var_10]
.text:00000000000039C3                 xor     rsi, fs:28h
.text:00000000000039CC                 jnz     short loc_39D3
.text:00000000000039CE                 add     rsp, 48h
.text:00000000000039D2                 retn
.text:00000000000039D3 ; ---------------------------------------------------------------------------
.text:00000000000039D3
.text:00000000000039D3 loc_39D3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000039D3                 call    ___stack_chk_fail
.text:00000000000039D3 ; } // starts at 3940
.text:00000000000039D3 quotearg_char_mem endp
.text:00000000000039D3
.text:00000000000039D3 ; ---------------------------------------------------------------------------
.text:00000000000039D8                 align 20h
.text:00000000000039E0
.text:00000000000039E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039E0
.text:00000000000039E0
.text:00000000000039E0                 public quotearg_char
.text:00000000000039E0 quotearg_char   proc near
.text:00000000000039E0 ; __unwind {
.text:00000000000039E0                 movsx   edx, sil
.text:00000000000039E4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000039EB                 jmp     quotearg_char_mem
.text:00000000000039EB ; } // starts at 39E0
.text:00000000000039EB quotearg_char   endp
.text:00000000000039EB
.text:00000000000039F0
.text:00000000000039F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039F0
.text:00000000000039F0
.text:00000000000039F0                 public quotearg_colon
.text:00000000000039F0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000039F0 ; __unwind {
.text:00000000000039F0                 mov     edx, 3Ah ; ':'
.text:00000000000039F5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000039FC                 jmp     quotearg_char_mem
.text:00000000000039FC ; } // starts at 39F0
.text:00000000000039FC quotearg_colon  endp
.text:00000000000039FC
.text:00000000000039FC ; ---------------------------------------------------------------------------
.text:0000000000003A01                 align 10h
.text:0000000000003A10
.text:0000000000003A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A10
.text:0000000000003A10
.text:0000000000003A10                 public quotearg_colon_mem
.text:0000000000003A10 quotearg_colon_mem proc near
.text:0000000000003A10 ; __unwind {
.text:0000000000003A10                 mov     edx, 3Ah ; ':'
.text:0000000000003A15                 jmp     quotearg_char_mem
.text:0000000000003A15 ; } // starts at 3A10
.text:0000000000003A15 quotearg_colon_mem endp
.text:0000000000003A15
.text:0000000000003A15 ; ---------------------------------------------------------------------------
.text:0000000000003A1A                 align 20h
.text:0000000000003A20
.text:0000000000003A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A20
.text:0000000000003A20 ; Attributes: info_from_lumina
.text:0000000000003A20
.text:0000000000003A20 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003A20                 public quotearg_n_style_colon
.text:0000000000003A20 quotearg_n_style_colon proc near
.text:0000000000003A20
.text:0000000000003A20 var_48          = dword ptr -48h
.text:0000000000003A20 var_44          = qword ptr -44h
.text:0000000000003A20 var_3C          = qword ptr -3Ch
.text:0000000000003A20 var_34          = qword ptr -34h
.text:0000000000003A20 var_2C          = qword ptr -2Ch
.text:0000000000003A20 var_24          = qword ptr -24h
.text:0000000000003A20 var_1C          = qword ptr -1Ch
.text:0000000000003A20 var_14          = dword ptr -14h
.text:0000000000003A20 var_10          = qword ptr -10h
.text:0000000000003A20
.text:0000000000003A20 ; __unwind {
.text:0000000000003A20                 sub     rsp, 48h
.text:0000000000003A24                 mov     rax, rdx
.text:0000000000003A27                 mov     rdx, fs:28h
.text:0000000000003A30                 mov     [rsp+48h+var_10], rdx
.text:0000000000003A35                 xor     edx, edx
.text:0000000000003A37                 cmp     esi, 0Ah
.text:0000000000003A3A                 jz      short loc_3AA4
.text:0000000000003A3C                 mov     [rsp+48h+var_48], esi
.text:0000000000003A3F                 mov     rcx, rsp
.text:0000000000003A42                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A49                 mov     rsi, rax
.text:0000000000003A4C                 mov     [rsp+48h+var_44], 0
.text:0000000000003A55                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000003A5E                 mov     [rsp+48h+var_34], 0
.text:0000000000003A67                 mov     [rsp+48h+var_2C], 0
.text:0000000000003A70                 mov     [rsp+48h+var_24], 0
.text:0000000000003A79                 mov     [rsp+48h+var_1C], 0
.text:0000000000003A82                 mov     [rsp+48h+var_14], 0
.text:0000000000003A8A                 call    quotearg_n_options
.text:0000000000003A8F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003A94                 xor     rcx, fs:28h
.text:0000000000003A9D                 jnz     short loc_3AA9
.text:0000000000003A9F                 add     rsp, 48h
.text:0000000000003AA3                 retn
.text:0000000000003AA4 ; ---------------------------------------------------------------------------
.text:0000000000003AA4
.text:0000000000003AA4 loc_3AA4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000003AA4                 call    _abort
.text:0000000000003AA9 ; ---------------------------------------------------------------------------
.text:0000000000003AA9
.text:0000000000003AA9 loc_3AA9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000003AA9                 call    ___stack_chk_fail
.text:0000000000003AA9 ; } // starts at 3A20
.text:0000000000003AA9 quotearg_n_style_colon endp
.text:0000000000003AA9
.text:0000000000003AA9 ; ---------------------------------------------------------------------------
.text:0000000000003AAE                 align 10h
.text:0000000000003AB0
.text:0000000000003AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AB0
.text:0000000000003AB0 ; Attributes: info_from_lumina
.text:0000000000003AB0
.text:0000000000003AB0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000003AB0                 public quotearg_n_custom_mem
.text:0000000000003AB0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000003AB0                                         ; quotearg_custom+12↓j ...
.text:0000000000003AB0
.text:0000000000003AB0 var_48          = xmmword ptr -48h
.text:0000000000003AB0 var_38          = xmmword ptr -38h
.text:0000000000003AB0 var_28          = xmmword ptr -28h
.text:0000000000003AB0 var_18          = qword ptr -18h
.text:0000000000003AB0 var_10          = qword ptr -10h
.text:0000000000003AB0
.text:0000000000003AB0 ; __unwind {
.text:0000000000003AB0                 sub     rsp, 48h
.text:0000000000003AB4                 mov     r9, rcx
.text:0000000000003AB7                 mov     rcx, cs:qword_207230
.text:0000000000003ABE                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003AC6                 mov     rax, fs:28h
.text:0000000000003ACF                 mov     [rsp+48h+var_10], rax
.text:0000000000003AD4                 xor     eax, eax
.text:0000000000003AD6                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003ADA                 test    rsi, rsi
.text:0000000000003ADD                 mov     [rsp+48h+var_18], rcx
.text:0000000000003AE2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003AE9                 movdqa  xmm0, cs:xmmword_207210
.text:0000000000003AF1                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003AF6                 movdqa  xmm0, cs:xmmword_207220
.text:0000000000003AFE                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003B03                 jz      short loc_3B37
.text:0000000000003B05                 test    rdx, rdx
.text:0000000000003B08                 jz      short loc_3B37
.text:0000000000003B0A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000003B0F                 mov     [rsp+48h+var_18], rdx
.text:0000000000003B14                 mov     rcx, rsp
.text:0000000000003B17                 mov     rdx, r8
.text:0000000000003B1A                 mov     rsi, r9
.text:0000000000003B1D                 call    quotearg_n_options
.text:0000000000003B22                 mov     rdi, [rsp+48h+var_10]
.text:0000000000003B27                 xor     rdi, fs:28h
.text:0000000000003B30                 jnz     short loc_3B3C
.text:0000000000003B32                 add     rsp, 48h
.text:0000000000003B36                 retn
.text:0000000000003B37 ; ---------------------------------------------------------------------------
.text:0000000000003B37
.text:0000000000003B37 loc_3B37:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000003B37                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000003B37                 call    _abort
.text:0000000000003B3C ; ---------------------------------------------------------------------------
.text:0000000000003B3C
.text:0000000000003B3C loc_3B3C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000003B3C                 call    ___stack_chk_fail
.text:0000000000003B3C ; } // starts at 3AB0
.text:0000000000003B3C quotearg_n_custom_mem endp
.text:0000000000003B3C
.text:0000000000003B3C ; ---------------------------------------------------------------------------
.text:0000000000003B41                 align 10h
.text:0000000000003B50
.text:0000000000003B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B50
.text:0000000000003B50
.text:0000000000003B50                 public quotearg_n_custom
.text:0000000000003B50 quotearg_n_custom proc near
.text:0000000000003B50 ; __unwind {
.text:0000000000003B50                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003B57                 jmp     quotearg_n_custom_mem
.text:0000000000003B57 ; } // starts at 3B50
.text:0000000000003B57 quotearg_n_custom endp
.text:0000000000003B57
.text:0000000000003B57 ; ---------------------------------------------------------------------------
.text:0000000000003B5C                 align 20h
.text:0000000000003B60
.text:0000000000003B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B60
.text:0000000000003B60
.text:0000000000003B60                 public quotearg_custom
.text:0000000000003B60 quotearg_custom proc near
.text:0000000000003B60 ; __unwind {
.text:0000000000003B60                 mov     rcx, rdx
.text:0000000000003B63                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003B6A                 mov     rdx, rsi
.text:0000000000003B6D                 mov     rsi, rdi
.text:0000000000003B70                 xor     edi, edi
.text:0000000000003B72                 jmp     quotearg_n_custom_mem
.text:0000000000003B72 ; } // starts at 3B60
.text:0000000000003B72 quotearg_custom endp
.text:0000000000003B72
.text:0000000000003B72 ; ---------------------------------------------------------------------------
.text:0000000000003B77                 align 20h
.text:0000000000003B80
.text:0000000000003B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B80
.text:0000000000003B80
.text:0000000000003B80                 public quotearg_custom_mem
.text:0000000000003B80 quotearg_custom_mem proc near
.text:0000000000003B80 ; __unwind {
.text:0000000000003B80                 mov     r8, rcx
.text:0000000000003B83                 mov     rcx, rdx
.text:0000000000003B86                 mov     rdx, rsi
.text:0000000000003B89                 mov     rsi, rdi
.text:0000000000003B8C                 xor     edi, edi
.text:0000000000003B8E                 jmp     quotearg_n_custom_mem
.text:0000000000003B8E ; } // starts at 3B80
.text:0000000000003B8E quotearg_custom_mem endp
.text:0000000000003B8E
.text:0000000000003B8E ; ---------------------------------------------------------------------------
.text:0000000000003B93                 align 20h
.text:0000000000003BA0
.text:0000000000003BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BA0
.text:0000000000003BA0
.text:0000000000003BA0                 public quote_n_mem
.text:0000000000003BA0 quote_n_mem     proc near
.text:0000000000003BA0 ; __unwind {
.text:0000000000003BA0                 lea     rcx, quote_quoting_options
.text:0000000000003BA7                 jmp     quotearg_n_options
.text:0000000000003BA7 ; } // starts at 3BA0
.text:0000000000003BA7 quote_n_mem     endp
.text:0000000000003BA7
.text:0000000000003BA7 ; ---------------------------------------------------------------------------
.text:0000000000003BAC                 align 10h
.text:0000000000003BB0
.text:0000000000003BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BB0
.text:0000000000003BB0
.text:0000000000003BB0                 public quote_mem
.text:0000000000003BB0 quote_mem       proc near
.text:0000000000003BB0 ; __unwind {
.text:0000000000003BB0                 lea     rcx, quote_quoting_options
.text:0000000000003BB7                 mov     rdx, rsi
.text:0000000000003BBA                 mov     rsi, rdi
.text:0000000000003BBD                 xor     edi, edi
.text:0000000000003BBF                 jmp     quotearg_n_options
.text:0000000000003BBF ; } // starts at 3BB0
.text:0000000000003BBF quote_mem       endp
.text:0000000000003BBF
.text:0000000000003BBF ; ---------------------------------------------------------------------------
.text:0000000000003BC4                 align 10h
.text:0000000000003BD0
.text:0000000000003BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BD0
.text:0000000000003BD0
.text:0000000000003BD0                 public quote_n
.text:0000000000003BD0 quote_n         proc near
.text:0000000000003BD0 ; __unwind {
.text:0000000000003BD0                 lea     rcx, quote_quoting_options
.text:0000000000003BD7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003BDE                 jmp     quotearg_n_options
.text:0000000000003BDE ; } // starts at 3BD0
.text:0000000000003BDE quote_n         endp
.text:0000000000003BDE
.text:0000000000003BDE ; ---------------------------------------------------------------------------
.text:0000000000003BE3                 align 10h
.text:0000000000003BF0
.text:0000000000003BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BF0
.text:0000000000003BF0
.text:0000000000003BF0                 public quote
.text:0000000000003BF0 quote           proc near
.text:0000000000003BF0 ; __unwind {
.text:0000000000003BF0                 lea     rcx, quote_quoting_options
.text:0000000000003BF7                 mov     rsi, rdi
.text:0000000000003BFA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C01                 xor     edi, edi
.text:0000000000003C03                 jmp     quotearg_n_options
.text:0000000000003C03 ; } // starts at 3BF0
.text:0000000000003C03 quote           endp
.text:0000000000003C03
.text:0000000000003C03 ; ---------------------------------------------------------------------------
.text:0000000000003C08                 align 10h
.text:0000000000003C10
.text:0000000000003C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C10
.text:0000000000003C10
.text:0000000000003C10 ; __int64 __fastcall safe_write(int fd, void *buf, size_t n)
.text:0000000000003C10                 public safe_write
.text:0000000000003C10 safe_write      proc near               ; CODE XREF: full_write+39↑p
.text:0000000000003C10 ; __unwind {
.text:0000000000003C10                 push    r13
.text:0000000000003C12                 push    r12
.text:0000000000003C14                 mov     r13d, edi
.text:0000000000003C17                 push    rbp
.text:0000000000003C18                 push    rbx
.text:0000000000003C19                 mov     r12, rsi
.text:0000000000003C1C                 mov     rbx, rdx
.text:0000000000003C1F                 sub     rsp, 8
.text:0000000000003C23                 nop     dword ptr [rax+rax+00h]
.text:0000000000003C28
.text:0000000000003C28 loc_3C28:                               ; CODE XREF: safe_write+38↓j
.text:0000000000003C28                                         ; safe_write+4D↓j
.text:0000000000003C28                 mov     rdx, rbx        ; n
.text:0000000000003C2B                 mov     rsi, r12        ; buf
.text:0000000000003C2E                 mov     edi, r13d       ; fd
.text:0000000000003C31                 call    _write
.text:0000000000003C36                 test    rax, rax
.text:0000000000003C39                 mov     rbp, rax
.text:0000000000003C3C                 jns     short loc_3C60
.text:0000000000003C3E                 call    ___errno_location
.text:0000000000003C43                 mov     eax, [rax]
.text:0000000000003C45                 cmp     eax, 4
.text:0000000000003C48                 jz      short loc_3C28
.text:0000000000003C4A                 cmp     eax, 16h
.text:0000000000003C4D                 jnz     short loc_3C60
.text:0000000000003C4F                 cmp     rbx, 7FF00000h
.text:0000000000003C56                 jbe     short loc_3C60
.text:0000000000003C58                 mov     ebx, 7FF00000h
.text:0000000000003C5D                 jmp     short loc_3C28
.text:0000000000003C5D ; ---------------------------------------------------------------------------
.text:0000000000003C5F                 align 20h
.text:0000000000003C60
.text:0000000000003C60 loc_3C60:                               ; CODE XREF: safe_write+2C↑j
.text:0000000000003C60                                         ; safe_write+3D↑j ...
.text:0000000000003C60                 add     rsp, 8
.text:0000000000003C64                 mov     rax, rbp
.text:0000000000003C67                 pop     rbx
.text:0000000000003C68                 pop     rbp
.text:0000000000003C69                 pop     r12
.text:0000000000003C6B                 pop     r13
.text:0000000000003C6D                 retn
.text:0000000000003C6D ; } // starts at 3C10
.text:0000000000003C6D safe_write      endp
.text:0000000000003C6D
.text:0000000000003C6D ; ---------------------------------------------------------------------------
.text:0000000000003C6E                 align 10h
.text:0000000000003C70
.text:0000000000003C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C70
.text:0000000000003C70
.text:0000000000003C70 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000003C70                 public version_etc_arn
.text:0000000000003C70 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_40AB↓j
.text:0000000000003C70                                         ; version_etc_va:loc_40FB↓p ...
.text:0000000000003C70
.text:0000000000003C70 var_58          = qword ptr -58h
.text:0000000000003C70 var_50          = qword ptr -50h
.text:0000000000003C70 var_48          = qword ptr -48h
.text:0000000000003C70 var_40          = qword ptr -40h
.text:0000000000003C70
.text:0000000000003C70 ; __unwind {
.text:0000000000003C70                 push    r15
.text:0000000000003C72                 push    r14
.text:0000000000003C74                 push    r13
.text:0000000000003C76                 push    r12
.text:0000000000003C78                 mov     r12, r9
.text:0000000000003C7B                 push    rbp
.text:0000000000003C7C                 push    rbx
.text:0000000000003C7D                 mov     rbp, rdi
.text:0000000000003C80                 mov     rbx, r8
.text:0000000000003C83                 sub     rsp, 28h
.text:0000000000003C87                 test    rsi, rsi
.text:0000000000003C8A                 jz      loc_3DA8
.text:0000000000003C90                 mov     r8, rdx
.text:0000000000003C93                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000003C9A                 mov     r9, rcx
.text:0000000000003C9D                 xor     eax, eax
.text:0000000000003C9F                 mov     rcx, rsi
.text:0000000000003CA2                 mov     esi, 1
.text:0000000000003CA7                 call    ___fprintf_chk
.text:0000000000003CAC
.text:0000000000003CAC loc_3CAC:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000003CAC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000003CB3                 xor     edi, edi        ; domainname
.text:0000000000003CB5                 mov     edx, 5          ; category
.text:0000000000003CBA                 call    _dcgettext
.text:0000000000003CBF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000003CC6                 mov     rcx, rax
.text:0000000000003CC9                 mov     r8d, 7E3h
.text:0000000000003CCF                 mov     esi, 1
.text:0000000000003CD4                 mov     rdi, rbp
.text:0000000000003CD7                 xor     eax, eax
.text:0000000000003CD9                 call    ___fprintf_chk
.text:0000000000003CDE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000003CE5                 xor     edi, edi        ; domainname
.text:0000000000003CE7                 mov     edx, 5          ; category
.text:0000000000003CEC                 call    _dcgettext
.text:0000000000003CF1                 mov     rsi, rbp        ; stream
.text:0000000000003CF4                 mov     rdi, rax        ; s
.text:0000000000003CF7                 call    _fputs_unlocked
.text:0000000000003CFC                 cmp     r12, 9          ; switch 10 cases
.text:0000000000003D00                 ja      def_3D14        ; jumptable 0000000000003D14 default case
.text:0000000000003D06                 lea     rdx, jpt_3D14
.text:0000000000003D0D                 movsxd  rax, ds:(jpt_3D14 - 5368h)[rdx+r12*4]
.text:0000000000003D11                 add     rax, rdx
.text:0000000000003D14                 jmp     rax             ; switch jump
.text:0000000000003D14 ; ---------------------------------------------------------------------------
.text:0000000000003D16                 align 20h
.text:0000000000003D20
.text:0000000000003D20 loc_3D20:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003D20                                         ; DATA XREF: .rodata:jpt_3D14↓o
.text:0000000000003D20                 mov     r9, [rbx+38h]   ; jumptable 0000000000003D14 case 8
.text:0000000000003D24                 mov     rax, [rbx+10h]
.text:0000000000003D28                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003D2F                 mov     r8, [rbx+8]
.text:0000000000003D33                 mov     edx, 5          ; category
.text:0000000000003D38                 xor     edi, edi        ; domainname
.text:0000000000003D3A                 mov     r13, [rbx+30h]
.text:0000000000003D3E                 mov     r12, [rbx+28h]
.text:0000000000003D42                 mov     [rsp+58h+var_48], r9
.text:0000000000003D47                 mov     r15, [rbx+20h]
.text:0000000000003D4B                 mov     r14, [rbx+18h]
.text:0000000000003D4F                 mov     [rsp+58h+var_58], rax
.text:0000000000003D53                 mov     [rsp+58h+var_50], r8
.text:0000000000003D58                 mov     rbx, [rbx]
.text:0000000000003D5B                 call    _dcgettext
.text:0000000000003D60                 sub     rsp, 8
.text:0000000000003D64
.text:0000000000003D64 loc_3D64:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000003D64                 mov     r9, [rsp+60h+var_48]
.text:0000000000003D69                 mov     rdx, rax
.text:0000000000003D6C                 mov     rcx, rbx
.text:0000000000003D6F                 mov     esi, 1
.text:0000000000003D74                 mov     rdi, rbp
.text:0000000000003D77                 xor     eax, eax
.text:0000000000003D79                 push    r9
.text:0000000000003D7B                 push    r13
.text:0000000000003D7D                 push    r12
.text:0000000000003D7F                 push    r15
.text:0000000000003D81                 push    r14
.text:0000000000003D83                 mov     r9, [rsp+88h+var_58]
.text:0000000000003D88                 mov     r8, [rsp+88h+var_50]
.text:0000000000003D8D                 call    ___fprintf_chk
.text:0000000000003D92                 add     rsp, 30h
.text:0000000000003D96
.text:0000000000003D96 loc_3D96:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003D96                                         ; DATA XREF: .rodata:jpt_3D14↓o
.text:0000000000003D96                 add     rsp, 28h        ; jumptable 0000000000003D14 case 0
.text:0000000000003D9A                 pop     rbx
.text:0000000000003D9B                 pop     rbp
.text:0000000000003D9C                 pop     r12
.text:0000000000003D9E                 pop     r13
.text:0000000000003DA0                 pop     r14
.text:0000000000003DA2                 pop     r15
.text:0000000000003DA4                 retn
.text:0000000000003DA4 ; ---------------------------------------------------------------------------
.text:0000000000003DA5                 align 8
.text:0000000000003DA8
.text:0000000000003DA8 loc_3DA8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000003DA8                 mov     r8, rcx
.text:0000000000003DAB                 mov     rcx, rdx
.text:0000000000003DAE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000003DB5                 mov     esi, 1
.text:0000000000003DBA                 xor     eax, eax
.text:0000000000003DBC                 call    ___fprintf_chk
.text:0000000000003DC1                 jmp     loc_3CAC
.text:0000000000003DC1 ; ---------------------------------------------------------------------------
.text:0000000000003DC6                 align 10h
.text:0000000000003DD0
.text:0000000000003DD0 loc_3DD0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003DD0                                         ; DATA XREF: .rodata:jpt_3D14↓o
.text:0000000000003DD0                 mov     r10, [rbx+40h]  ; jumptable 0000000000003D14 case 9
.text:0000000000003DD4                 mov     r9, [rbx+38h]
.text:0000000000003DD8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003DDF                 mov     rax, [rbx+10h]
.text:0000000000003DE3                 mov     r8, [rbx+8]
.text:0000000000003DE7                 mov     edx, 5          ; category
.text:0000000000003DEC                 mov     r13, [rbx+30h]
.text:0000000000003DF0                 mov     r12, [rbx+28h]
.text:0000000000003DF4                 mov     r15, [rbx+20h]
.text:0000000000003DF8                 mov     r14, [rbx+18h]
.text:0000000000003DFC                 mov     rbx, [rbx]
.text:0000000000003DFF                 mov     [rsp+58h+var_40], r10
.text:0000000000003E04                 mov     [rsp+58h+var_48], r9
.text:0000000000003E09                 mov     [rsp+58h+var_58], rax
.text:0000000000003E0D                 mov     [rsp+58h+var_50], r8
.text:0000000000003E12
.text:0000000000003E12 loc_3E12:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000003E12                 xor     edi, edi        ; domainname
.text:0000000000003E14                 call    _dcgettext
.text:0000000000003E19                 mov     r10, [rsp+58h+var_40]
.text:0000000000003E1E                 push    r10
.text:0000000000003E20                 jmp     loc_3D64
.text:0000000000003E20 ; ---------------------------------------------------------------------------
.text:0000000000003E25                 align 8
.text:0000000000003E28
.text:0000000000003E28 loc_3E28:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E28                                         ; DATA XREF: .rodata:jpt_3D14↓o
.text:0000000000003E28                 mov     rbx, [rbx]      ; jumptable 0000000000003D14 case 1
.text:0000000000003E2B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000003E32                 mov     edx, 5          ; category
.text:0000000000003E37                 xor     edi, edi        ; domainname
.text:0000000000003E39                 call    _dcgettext
.text:0000000000003E3E                 add     rsp, 28h
.text:0000000000003E42                 mov     rcx, rbx
.text:0000000000003E45                 mov     rdi, rbp
.text:0000000000003E48                 pop     rbx
.text:0000000000003E49                 pop     rbp
.text:0000000000003E4A                 pop     r12
.text:0000000000003E4C                 pop     r13
.text:0000000000003E4E                 pop     r14
.text:0000000000003E50                 pop     r15
.text:0000000000003E52                 mov     rdx, rax
.text:0000000000003E55                 mov     esi, 1
.text:0000000000003E5A                 xor     eax, eax
.text:0000000000003E5C                 jmp     ___fprintf_chk
.text:0000000000003E5C ; ---------------------------------------------------------------------------
.text:0000000000003E61                 align 8
.text:0000000000003E68
.text:0000000000003E68 loc_3E68:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E68                                         ; DATA XREF: .rodata:jpt_3D14↓o
.text:0000000000003E68                 mov     r12, [rbx+8]    ; jumptable 0000000000003D14 case 2
.text:0000000000003E6C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000003E73                 mov     rbx, [rbx]
.text:0000000000003E76                 mov     edx, 5          ; category
.text:0000000000003E7B                 xor     edi, edi        ; domainname
.text:0000000000003E7D                 call    _dcgettext
.text:0000000000003E82                 add     rsp, 28h
.text:0000000000003E86                 mov     r8, r12
.text:0000000000003E89                 mov     rcx, rbx
.text:0000000000003E8C                 mov     rdi, rbp
.text:0000000000003E8F                 mov     rdx, rax
.text:0000000000003E92                 mov     esi, 1
.text:0000000000003E97                 pop     rbx
.text:0000000000003E98                 pop     rbp
.text:0000000000003E99                 pop     r12
.text:0000000000003E9B                 pop     r13
.text:0000000000003E9D                 pop     r14
.text:0000000000003E9F                 pop     r15
.text:0000000000003EA1                 xor     eax, eax
.text:0000000000003EA3                 jmp     ___fprintf_chk
.text:0000000000003EA3 ; ---------------------------------------------------------------------------
.text:0000000000003EA8                 align 10h
.text:0000000000003EB0
.text:0000000000003EB0 loc_3EB0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003EB0                                         ; DATA XREF: .rodata:jpt_3D14↓o
.text:0000000000003EB0                 mov     r13, [rbx+10h]  ; jumptable 0000000000003D14 case 3
.text:0000000000003EB4                 mov     r12, [rbx+8]
.text:0000000000003EB8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000003EBF                 mov     rbx, [rbx]
.text:0000000000003EC2                 mov     edx, 5          ; category
.text:0000000000003EC7                 xor     edi, edi        ; domainname
.text:0000000000003EC9                 call    _dcgettext
.text:0000000000003ECE                 add     rsp, 28h
.text:0000000000003ED2                 mov     r9, r13
.text:0000000000003ED5                 mov     r8, r12
.text:0000000000003ED8                 mov     rcx, rbx
.text:0000000000003EDB                 mov     rdi, rbp
.text:0000000000003EDE                 mov     rdx, rax
.text:0000000000003EE1                 pop     rbx
.text:0000000000003EE2                 pop     rbp
.text:0000000000003EE3                 pop     r12
.text:0000000000003EE5                 pop     r13
.text:0000000000003EE7                 pop     r14
.text:0000000000003EE9                 pop     r15
.text:0000000000003EEB                 mov     esi, 1
.text:0000000000003EF0                 xor     eax, eax
.text:0000000000003EF2                 jmp     ___fprintf_chk
.text:0000000000003EF2 ; ---------------------------------------------------------------------------
.text:0000000000003EF7                 align 20h
.text:0000000000003F00
.text:0000000000003F00 loc_3F00:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F00                                         ; DATA XREF: .rodata:jpt_3D14↓o
.text:0000000000003F00                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003D14 case 4
.text:0000000000003F07                 mov     edx, 5          ; category
.text:0000000000003F0C                 xor     edi, edi        ; domainname
.text:0000000000003F0E                 mov     r14, [rbx+18h]
.text:0000000000003F12                 mov     r13, [rbx+10h]
.text:0000000000003F16                 mov     r12, [rbx+8]
.text:0000000000003F1A                 mov     rbx, [rbx]
.text:0000000000003F1D                 call    _dcgettext
.text:0000000000003F22                 sub     rsp, 8
.text:0000000000003F26
.text:0000000000003F26 loc_3F26:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000003F26                 push    r14
.text:0000000000003F28                 mov     rdx, rax
.text:0000000000003F2B                 mov     r9, r13
.text:0000000000003F2E                 mov     r8, r12
.text:0000000000003F31                 mov     rcx, rbx
.text:0000000000003F34                 mov     rdi, rbp
.text:0000000000003F37                 mov     esi, 1
.text:0000000000003F3C                 xor     eax, eax
.text:0000000000003F3E                 call    ___fprintf_chk
.text:0000000000003F43                 pop     rax
.text:0000000000003F44                 pop     rdx
.text:0000000000003F45                 add     rsp, 28h
.text:0000000000003F49                 pop     rbx
.text:0000000000003F4A                 pop     rbp
.text:0000000000003F4B                 pop     r12
.text:0000000000003F4D                 pop     r13
.text:0000000000003F4F                 pop     r14
.text:0000000000003F51                 pop     r15
.text:0000000000003F53                 retn
.text:0000000000003F53 ; ---------------------------------------------------------------------------
.text:0000000000003F54                 align 8
.text:0000000000003F58
.text:0000000000003F58 loc_3F58:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F58                                         ; DATA XREF: .rodata:jpt_3D14↓o
.text:0000000000003F58                 mov     r15, [rbx+20h]  ; jumptable 0000000000003D14 case 5
.text:0000000000003F5C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000003F63                 mov     edx, 5          ; category
.text:0000000000003F68                 xor     edi, edi        ; domainname
.text:0000000000003F6A                 mov     r14, [rbx+18h]
.text:0000000000003F6E                 mov     r13, [rbx+10h]
.text:0000000000003F72                 mov     r12, [rbx+8]
.text:0000000000003F76                 mov     rbx, [rbx]
.text:0000000000003F79                 call    _dcgettext
.text:0000000000003F7E                 push    r15
.text:0000000000003F80                 jmp     short loc_3F26
.text:0000000000003F80 ; ---------------------------------------------------------------------------
.text:0000000000003F82                 align 8
.text:0000000000003F88
.text:0000000000003F88 loc_3F88:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F88                                         ; DATA XREF: .rodata:jpt_3D14↓o
.text:0000000000003F88                 mov     r8, [rbx+8]     ; jumptable 0000000000003D14 case 6
.text:0000000000003F8C                 mov     r12, [rbx+28h]
.text:0000000000003F90                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000003F97                 mov     r15, [rbx+20h]
.text:0000000000003F9B                 mov     r14, [rbx+18h]
.text:0000000000003F9F                 mov     edx, 5          ; category
.text:0000000000003FA4                 mov     r13, [rbx+10h]
.text:0000000000003FA8                 xor     edi, edi        ; domainname
.text:0000000000003FAA                 mov     rbx, [rbx]
.text:0000000000003FAD                 mov     [rsp+58h+var_58], r8
.text:0000000000003FB1                 call    _dcgettext
.text:0000000000003FB6                 sub     rsp, 8
.text:0000000000003FBA                 mov     r9, r13
.text:0000000000003FBD                 push    r12
.text:0000000000003FBF                 push    r15
.text:0000000000003FC1                 push    r14
.text:0000000000003FC3
.text:0000000000003FC3 loc_3FC3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000003FC3                 mov     r8, [rsp+78h+var_58]
.text:0000000000003FC8                 mov     rcx, rbx
.text:0000000000003FCB                 mov     rdx, rax
.text:0000000000003FCE                 mov     rdi, rbp
.text:0000000000003FD1                 mov     esi, 1
.text:0000000000003FD6                 xor     eax, eax
.text:0000000000003FD8                 call    ___fprintf_chk
.text:0000000000003FDD                 add     rsp, 20h
.text:0000000000003FE1                 add     rsp, 28h
.text:0000000000003FE5                 pop     rbx
.text:0000000000003FE6                 pop     rbp
.text:0000000000003FE7                 pop     r12
.text:0000000000003FE9                 pop     r13
.text:0000000000003FEB                 pop     r14
.text:0000000000003FED                 pop     r15
.text:0000000000003FEF                 retn
.text:0000000000003FF0 ; ---------------------------------------------------------------------------
.text:0000000000003FF0
.text:0000000000003FF0 loc_3FF0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003FF0                                         ; DATA XREF: .rodata:jpt_3D14↓o
.text:0000000000003FF0                 mov     r9, [rbx+10h]   ; jumptable 0000000000003D14 case 7
.text:0000000000003FF4                 mov     r13, [rbx+30h]
.text:0000000000003FF8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000003FFF                 mov     r12, [rbx+28h]
.text:0000000000004003                 mov     r15, [rbx+20h]
.text:0000000000004007                 mov     edx, 5          ; category
.text:000000000000400C                 mov     r14, [rbx+18h]
.text:0000000000004010                 mov     r8, [rbx+8]
.text:0000000000004014                 xor     edi, edi        ; domainname
.text:0000000000004016                 mov     [rsp+58h+var_50], r9
.text:000000000000401B                 mov     rbx, [rbx]
.text:000000000000401E                 mov     [rsp+58h+var_58], r8
.text:0000000000004022                 call    _dcgettext
.text:0000000000004027                 push    r13
.text:0000000000004029                 push    r12
.text:000000000000402B                 push    r15
.text:000000000000402D                 push    r14
.text:000000000000402F                 mov     r9, [rsp+78h+var_50]
.text:0000000000004034                 jmp     short loc_3FC3
.text:0000000000004034 ; ---------------------------------------------------------------------------
.text:0000000000004036                 align 20h
.text:0000000000004040
.text:0000000000004040 def_3D14:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004040                 mov     r10, [rbx+40h]  ; jumptable 0000000000003D14 default case
.text:0000000000004044                 mov     r9, [rbx+38h]
.text:0000000000004048                 mov     edx, 5
.text:000000000000404D                 mov     rax, [rbx+10h]
.text:0000000000004051                 mov     r8, [rbx+8]
.text:0000000000004055                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000405C                 mov     r13, [rbx+30h]
.text:0000000000004060                 mov     r12, [rbx+28h]
.text:0000000000004064                 mov     r15, [rbx+20h]
.text:0000000000004068                 mov     r14, [rbx+18h]
.text:000000000000406C                 mov     [rsp+58h+var_40], r10
.text:0000000000004071                 mov     [rsp+58h+var_48], r9
.text:0000000000004076                 mov     [rsp+58h+var_58], rax
.text:000000000000407A                 mov     [rsp+58h+var_50], r8
.text:000000000000407F                 mov     rbx, [rbx]
.text:0000000000004082                 jmp     loc_3E12
.text:0000000000004082 ; } // starts at 3C70
.text:0000000000004082 version_etc_arn endp
.text:0000000000004082
.text:0000000000004082 ; ---------------------------------------------------------------------------
.text:0000000000004087                 align 10h
.text:0000000000004090
.text:0000000000004090 ; =============== S U B R O U T I N E =======================================
.text:0000000000004090
.text:0000000000004090 ; Attributes: info_from_lumina
.text:0000000000004090
.text:0000000000004090 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004090                 public version_etc_ar
.text:0000000000004090 version_etc_ar  proc near
.text:0000000000004090 ; __unwind {
.text:0000000000004090                 xor     r9d, r9d
.text:0000000000004093                 cmp     qword ptr [r8], 0
.text:0000000000004097                 jz      short loc_40AB
.text:0000000000004099                 nop     dword ptr [rax+00000000h]
.text:00000000000040A0
.text:00000000000040A0 loc_40A0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000040A0                 add     r9, 1
.text:00000000000040A4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000040A9                 jnz     short loc_40A0
.text:00000000000040AB
.text:00000000000040AB loc_40AB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000040AB                 jmp     version_etc_arn
.text:00000000000040AB ; } // starts at 4090
.text:00000000000040AB version_etc_ar  endp
.text:00000000000040AB
.text:00000000000040B0
.text:00000000000040B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040B0
.text:00000000000040B0 ; Attributes: info_from_lumina
.text:00000000000040B0
.text:00000000000040B0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000040B0                 public version_etc_va
.text:00000000000040B0 version_etc_va  proc near               ; CODE XREF: parse_long_options+11B↑p
.text:00000000000040B0                                         ; parse_gnu_standard_options_only+EB↑p
.text:00000000000040B0
.text:00000000000040B0 authtab         = qword ptr -68h
.text:00000000000040B0 var_10          = qword ptr -10h
.text:00000000000040B0
.text:00000000000040B0 ; __unwind {
.text:00000000000040B0                 sub     rsp, 68h
.text:00000000000040B4                 mov     r10, r8
.text:00000000000040B7                 xor     r9d, r9d
.text:00000000000040BA                 mov     rax, fs:28h
.text:00000000000040C3                 mov     [rsp+68h+var_10], rax
.text:00000000000040C8                 xor     eax, eax
.text:00000000000040CA                 mov     r8, rsp
.text:00000000000040CD                 nop     dword ptr [rax]
.text:00000000000040D0
.text:00000000000040D0 loc_40D0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000040D0                 mov     eax, [r10]
.text:00000000000040D3                 cmp     eax, 2Fh ; '/'
.text:00000000000040D6                 ja      short loc_411A
.text:00000000000040D8                 mov     r11d, eax
.text:00000000000040DB                 add     r11, [r10+10h]
.text:00000000000040DF                 add     eax, 8
.text:00000000000040E2                 mov     [r10], eax
.text:00000000000040E5
.text:00000000000040E5 loc_40E5:                               ; CODE XREF: version_etc_va+76↓j
.text:00000000000040E5                 mov     rax, [r11]
.text:00000000000040E8                 test    rax, rax
.text:00000000000040EB                 mov     [r8+r9*8], rax
.text:00000000000040EF                 jz      short loc_40FB
.text:00000000000040F1                 add     r9, 1
.text:00000000000040F5                 cmp     r9, 0Ah
.text:00000000000040F9                 jnz     short loc_40D0
.text:00000000000040FB
.text:00000000000040FB loc_40FB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000040FB                 call    version_etc_arn
.text:0000000000004100                 mov     rax, [rsp+68h+var_10]
.text:0000000000004105                 xor     rax, fs:28h
.text:000000000000410E                 jnz     short loc_4115
.text:0000000000004110                 add     rsp, 68h
.text:0000000000004114                 retn
.text:0000000000004115 ; ---------------------------------------------------------------------------
.text:0000000000004115
.text:0000000000004115 loc_4115:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004115                 call    ___stack_chk_fail
.text:000000000000411A ; ---------------------------------------------------------------------------
.text:000000000000411A
.text:000000000000411A loc_411A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000411A                 mov     r11, [r10+8]
.text:000000000000411E                 lea     rax, [r11+8]
.text:0000000000004122                 mov     [r10+8], rax
.text:0000000000004126                 jmp     short loc_40E5
.text:0000000000004126 ; } // starts at 40B0
.text:0000000000004126 version_etc_va  endp
.text:0000000000004126
.text:0000000000004126 ; ---------------------------------------------------------------------------
.text:0000000000004128                 align 10h
.text:0000000000004130
.text:0000000000004130 ; =============== S U B R O U T I N E =======================================
.text:0000000000004130
.text:0000000000004130 ; Attributes: info_from_lumina
.text:0000000000004130
.text:0000000000004130 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000004130                 public version_etc
.text:0000000000004130 version_etc     proc near
.text:0000000000004130
.text:0000000000004130 var_C0          = dword ptr -0C0h
.text:0000000000004130 var_B8          = qword ptr -0B8h
.text:0000000000004130 var_B0          = qword ptr -0B0h
.text:0000000000004130 var_A8          = byte ptr -0A8h
.text:0000000000004130 var_50          = qword ptr -50h
.text:0000000000004130 var_48          = byte ptr -48h
.text:0000000000004130 var_28          = qword ptr -28h
.text:0000000000004130 var_20          = qword ptr -20h
.text:0000000000004130 arg_0           = byte ptr  8
.text:0000000000004130
.text:0000000000004130 ; __unwind {
.text:0000000000004130                 push    rbp
.text:0000000000004131                 push    rbx
.text:0000000000004132                 mov     r10d, 20h ; ' '
.text:0000000000004138                 xor     r11d, r11d
.text:000000000000413B                 sub     rsp, 0B8h
.text:0000000000004142                 mov     rax, fs:28h
.text:000000000000414B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000004150                 xor     eax, eax
.text:0000000000004152                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000415A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004162                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000416A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000416F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004177                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000417F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004184                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000418C                 xor     r9d, r9d
.text:000000000000418F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004194                 mov     rbp, rax
.text:0000000000004197                 nop     word ptr [rax+rax+00000000h]
.text:00000000000041A0
.text:00000000000041A0 loc_41A0:                               ; CODE XREF: version_etc+9A↓j
.text:00000000000041A0                 cmp     r10d, 2Fh ; '/'
.text:00000000000041A4                 ja      short loc_41FC
.text:00000000000041A6                 mov     eax, r10d
.text:00000000000041A9                 mov     r11d, 1
.text:00000000000041AF                 add     r10d, 8
.text:00000000000041B3                 add     rax, rbp
.text:00000000000041B6
.text:00000000000041B6 loc_41B6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000041B6                 mov     rax, [rax]
.text:00000000000041B9                 test    rax, rax
.text:00000000000041BC                 mov     [r8+r9*8], rax
.text:00000000000041C0                 jz      short loc_41CC
.text:00000000000041C2                 add     r9, 1
.text:00000000000041C6                 cmp     r9, 0Ah
.text:00000000000041CA                 jnz     short loc_41A0
.text:00000000000041CC
.text:00000000000041CC loc_41CC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000041CC                 test    r11b, r11b
.text:00000000000041CF                 jnz     short loc_41F5
.text:00000000000041D1
.text:00000000000041D1 loc_41D1:                               ; CODE XREF: version_etc+CA↓j
.text:00000000000041D1                 call    version_etc_arn
.text:00000000000041D6                 mov     rax, [rsp+0C8h+var_50]
.text:00000000000041DB                 xor     rax, fs:28h
.text:00000000000041E4                 jnz     short loc_41F0
.text:00000000000041E6                 add     rsp, 0B8h
.text:00000000000041ED                 pop     rbx
.text:00000000000041EE                 pop     rbp
.text:00000000000041EF                 retn
.text:00000000000041F0 ; ---------------------------------------------------------------------------
.text:00000000000041F0
.text:00000000000041F0 loc_41F0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000041F0                 call    ___stack_chk_fail
.text:00000000000041F5 ; ---------------------------------------------------------------------------
.text:00000000000041F5
.text:00000000000041F5 loc_41F5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000041F5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000041FA                 jmp     short loc_41D1
.text:00000000000041FC ; ---------------------------------------------------------------------------
.text:00000000000041FC
.text:00000000000041FC loc_41FC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000041FC                 mov     rax, rbx
.text:00000000000041FF                 add     rbx, 8
.text:0000000000004203                 jmp     short loc_41B6
.text:0000000000004203 ; } // starts at 4130
.text:0000000000004203 version_etc     endp
.text:0000000000004203
.text:0000000000004203 ; ---------------------------------------------------------------------------
.text:0000000000004205                 align 10h
.text:0000000000004210
.text:0000000000004210 ; =============== S U B R O U T I N E =======================================
.text:0000000000004210
.text:0000000000004210 ; Attributes: info_from_lumina
.text:0000000000004210
.text:0000000000004210 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004210                 public emit_bug_reporting_address
.text:0000000000004210 emit_bug_reporting_address proc near
.text:0000000000004210 ; __unwind {
.text:0000000000004210                 push    rbx
.text:0000000000004211                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004218                 mov     edx, 5          ; category
.text:000000000000421D                 xor     edi, edi        ; domainname
.text:000000000000421F                 call    _dcgettext
.text:0000000000004224                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000422B                 mov     rsi, rax
.text:000000000000422E                 mov     edi, 1
.text:0000000000004233                 xor     eax, eax
.text:0000000000004235                 call    ___printf_chk
.text:000000000000423A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004241                 mov     edx, 5          ; category
.text:0000000000004246                 xor     edi, edi        ; domainname
.text:0000000000004248                 call    _dcgettext
.text:000000000000424D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004254                 lea     rdx, unk_491E
.text:000000000000425B                 mov     rsi, rax
.text:000000000000425E                 mov     edi, 1
.text:0000000000004263                 xor     eax, eax
.text:0000000000004265                 call    ___printf_chk
.text:000000000000426A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004271                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004278                 xor     edi, edi        ; domainname
.text:000000000000427A                 mov     edx, 5          ; category
.text:000000000000427F                 call    _dcgettext
.text:0000000000004284                 mov     rsi, rbx        ; stream
.text:0000000000004287                 mov     rdi, rax        ; s
.text:000000000000428A                 pop     rbx
.text:000000000000428B                 jmp     _fputs_unlocked
.text:000000000000428B ; } // starts at 4210
.text:000000000000428B emit_bug_reporting_address endp
.text:000000000000428B
.text:0000000000004290
.text:0000000000004290 ; =============== S U B R O U T I N E =======================================
.text:0000000000004290
.text:0000000000004290
.text:0000000000004290                 public xmalloc
.text:0000000000004290 xmalloc         proc near               ; CODE XREF: main+189↑p
.text:0000000000004290                                         ; main+235↑p ...
.text:0000000000004290 ; __unwind {
.text:0000000000004290                 push    rbx
.text:0000000000004291                 mov     rbx, rdi
.text:0000000000004294                 call    _malloc
.text:0000000000004299                 test    rax, rax
.text:000000000000429C                 jnz     short loc_42A3
.text:000000000000429E                 test    rbx, rbx
.text:00000000000042A1                 jnz     short loc_42A5
.text:00000000000042A3
.text:00000000000042A3 loc_42A3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000042A3                 pop     rbx
.text:00000000000042A4                 retn
.text:00000000000042A5 ; ---------------------------------------------------------------------------
.text:00000000000042A5
.text:00000000000042A5 loc_42A5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000042A5                 call    xalloc_die
.text:00000000000042A5 ; } // starts at 4290
.text:00000000000042A5 xmalloc         endp
.text:00000000000042A5
.text:00000000000042A5 ; ---------------------------------------------------------------------------
.text:00000000000042AA                 align 10h
.text:00000000000042B0
.text:00000000000042B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042B0
.text:00000000000042B0 ; Attributes: info_from_lumina
.text:00000000000042B0
.text:00000000000042B0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000042B0                 public xnmalloc
.text:00000000000042B0 xnmalloc        proc near
.text:00000000000042B0 ; __unwind {
.text:00000000000042B0                 mov     rax, rdi
.text:00000000000042B3                 mul     rsi
.text:00000000000042B6                 mov     rdi, rax
.text:00000000000042B9                 seto    al
.text:00000000000042BC                 test    rdi, rdi
.text:00000000000042BF                 js      short loc_42CB
.text:00000000000042C1                 movzx   eax, al
.text:00000000000042C4                 test    rax, rax
.text:00000000000042C7                 jnz     short loc_42CB
.text:00000000000042C9                 jmp     short xmalloc
.text:00000000000042CB ; ---------------------------------------------------------------------------
.text:00000000000042CB
.text:00000000000042CB loc_42CB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000042CB                                         ; xnmalloc+17↑j
.text:00000000000042CB                 sub     rsp, 8
.text:00000000000042CF                 call    xalloc_die
.text:00000000000042CF ; } // starts at 42B0
.text:00000000000042CF xnmalloc        endp
.text:00000000000042CF
.text:00000000000042CF ; ---------------------------------------------------------------------------
.text:00000000000042D4                 align 20h
.text:00000000000042E0
.text:00000000000042E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042E0
.text:00000000000042E0
.text:00000000000042E0                 public xcharalloc
.text:00000000000042E0 xcharalloc      proc near
.text:00000000000042E0 ; __unwind {
.text:00000000000042E0                 jmp     short xmalloc
.text:00000000000042E0 ; } // starts at 42E0
.text:00000000000042E0 xcharalloc      endp
.text:00000000000042E0
.text:00000000000042E0 ; ---------------------------------------------------------------------------
.text:00000000000042E2                 align 10h
.text:00000000000042F0
.text:00000000000042F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042F0
.text:00000000000042F0 ; Attributes: info_from_lumina
.text:00000000000042F0
.text:00000000000042F0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000042F0                 public xrealloc
.text:00000000000042F0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:00000000000042F0                                         ; quotearg_n_options+182↑p ...
.text:00000000000042F0 ; __unwind {
.text:00000000000042F0                 test    rsi, rsi
.text:00000000000042F3                 push    rbx
.text:00000000000042F4                 mov     rbx, rsi
.text:00000000000042F7                 jnz     short loc_42FE
.text:00000000000042F9                 test    rdi, rdi
.text:00000000000042FC                 jnz     short loc_4318
.text:00000000000042FE
.text:00000000000042FE loc_42FE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000042FE                 mov     rsi, rbx        ; size
.text:0000000000004301                 call    _realloc
.text:0000000000004306                 test    rax, rax
.text:0000000000004309                 jnz     short loc_4310
.text:000000000000430B                 test    rbx, rbx
.text:000000000000430E                 jnz     short loc_4321
.text:0000000000004310
.text:0000000000004310 loc_4310:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004310                 pop     rbx
.text:0000000000004311                 retn
.text:0000000000004311 ; ---------------------------------------------------------------------------
.text:0000000000004312                 align 8
.text:0000000000004318
.text:0000000000004318 loc_4318:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004318                 call    _free
.text:000000000000431D                 xor     eax, eax
.text:000000000000431F                 pop     rbx
.text:0000000000004320                 retn
.text:0000000000004321 ; ---------------------------------------------------------------------------
.text:0000000000004321
.text:0000000000004321 loc_4321:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004321                 call    xalloc_die
.text:0000000000004321 ; } // starts at 42F0
.text:0000000000004321 xrealloc        endp
.text:0000000000004321
.text:0000000000004321 ; ---------------------------------------------------------------------------
.text:0000000000004326                 align 10h
.text:0000000000004330
.text:0000000000004330 ; =============== S U B R O U T I N E =======================================
.text:0000000000004330
.text:0000000000004330 ; Attributes: info_from_lumina
.text:0000000000004330
.text:0000000000004330 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004330                 public xnrealloc
.text:0000000000004330 xnrealloc       proc near
.text:0000000000004330 ; __unwind {
.text:0000000000004330                 mov     rax, rsi
.text:0000000000004333                 mul     rdx
.text:0000000000004336                 mov     rsi, rax
.text:0000000000004339                 seto    al
.text:000000000000433C                 test    rsi, rsi
.text:000000000000433F                 js      short loc_434B
.text:0000000000004341                 movzx   eax, al
.text:0000000000004344                 test    rax, rax
.text:0000000000004347                 jnz     short loc_434B
.text:0000000000004349                 jmp     short xrealloc
.text:000000000000434B ; ---------------------------------------------------------------------------
.text:000000000000434B
.text:000000000000434B loc_434B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000434B                                         ; xnrealloc+17↑j
.text:000000000000434B                 sub     rsp, 8
.text:000000000000434F                 call    xalloc_die
.text:000000000000434F ; } // starts at 4330
.text:000000000000434F xnrealloc       endp
.text:000000000000434F
.text:000000000000434F ; ---------------------------------------------------------------------------
.text:0000000000004354                 align 20h
.text:0000000000004360
.text:0000000000004360 ; =============== S U B R O U T I N E =======================================
.text:0000000000004360
.text:0000000000004360 ; Attributes: info_from_lumina
.text:0000000000004360
.text:0000000000004360 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004360                 public x2nrealloc
.text:0000000000004360 x2nrealloc      proc near
.text:0000000000004360 ; __unwind {
.text:0000000000004360                 test    rdi, rdi
.text:0000000000004363                 mov     r9, rdx
.text:0000000000004366                 mov     rcx, [rsi]
.text:0000000000004369                 jz      short loc_43A0
.text:000000000000436B                 xor     edx, edx
.text:000000000000436D                 mov     rax, 5555555555555554h
.text:0000000000004377                 div     r9
.text:000000000000437A                 cmp     rax, rcx
.text:000000000000437D                 jbe     short loc_43BB
.text:000000000000437F                 mov     rax, rcx
.text:0000000000004382                 shr     rax, 1
.text:0000000000004385                 lea     rcx, [rax+rcx+1]
.text:000000000000438A
.text:000000000000438A loc_438A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000438A                 mov     [rsi], rcx
.text:000000000000438D                 imul    rcx, r9
.text:0000000000004391                 mov     rsi, rcx
.text:0000000000004394                 jmp     xrealloc
.text:0000000000004394 ; ---------------------------------------------------------------------------
.text:0000000000004399                 align 20h
.text:00000000000043A0
.text:00000000000043A0 loc_43A0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000043A0                 test    rcx, rcx
.text:00000000000043A3                 jz      short loc_43C8
.text:00000000000043A5
.text:00000000000043A5 loc_43A5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000043A5                 mov     rax, rcx
.text:00000000000043A8                 mul     r9
.text:00000000000043AB                 seto    dl
.text:00000000000043AE                 test    rax, rax
.text:00000000000043B1                 movzx   edx, dl
.text:00000000000043B4                 js      short loc_43BB
.text:00000000000043B6                 test    rdx, rdx
.text:00000000000043B9                 jz      short loc_438A
.text:00000000000043BB
.text:00000000000043BB loc_43BB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000043BB                                         ; x2nrealloc+54↑j
.text:00000000000043BB                 sub     rsp, 8
.text:00000000000043BF                 call    xalloc_die
.text:00000000000043BF ; ---------------------------------------------------------------------------
.text:00000000000043C4                 align 8
.text:00000000000043C8
.text:00000000000043C8 loc_43C8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000043C8                 xor     edx, edx
.text:00000000000043CA                 mov     eax, 80h
.text:00000000000043CF                 xor     r8d, r8d
.text:00000000000043D2                 div     r9
.text:00000000000043D5                 test    rax, rax
.text:00000000000043D8                 setz    r8b
.text:00000000000043DC                 lea     rcx, [r8+rax]
.text:00000000000043E0                 jmp     short loc_43A5
.text:00000000000043E0 ; } // starts at 4360
.text:00000000000043E0 x2nrealloc      endp
.text:00000000000043E0
.text:00000000000043E0 ; ---------------------------------------------------------------------------
.text:00000000000043E2                 align 10h
.text:00000000000043F0
.text:00000000000043F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043F0
.text:00000000000043F0 ; Attributes: info_from_lumina
.text:00000000000043F0
.text:00000000000043F0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000043F0                 public x2realloc
.text:00000000000043F0 x2realloc       proc near
.text:00000000000043F0 ; __unwind {
.text:00000000000043F0                 test    rdi, rdi
.text:00000000000043F3                 mov     rax, [rsi]
.text:00000000000043F6                 jz      short loc_4420
.text:00000000000043F8                 mov     rdx, 5555555555555553h
.text:0000000000004402                 cmp     rax, rdx
.text:0000000000004405                 ja      short loc_4431
.text:0000000000004407                 mov     rdx, rax
.text:000000000000440A                 shr     rdx, 1
.text:000000000000440D                 lea     rax, [rdx+rax+1]
.text:0000000000004412
.text:0000000000004412 loc_4412:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004412                 mov     [rsi], rax
.text:0000000000004415                 mov     rsi, rax
.text:0000000000004418                 jmp     xrealloc
.text:0000000000004418 ; ---------------------------------------------------------------------------
.text:000000000000441D                 align 20h
.text:0000000000004420
.text:0000000000004420 loc_4420:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000004420                 test    rax, rax
.text:0000000000004423                 mov     edx, 80h
.text:0000000000004428                 cmovz   rax, rdx
.text:000000000000442C                 test    rax, rax
.text:000000000000442F                 jns     short loc_4412
.text:0000000000004431
.text:0000000000004431 loc_4431:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000004431                 sub     rsp, 8
.text:0000000000004435                 call    xalloc_die
.text:0000000000004435 ; } // starts at 43F0
.text:0000000000004435 x2realloc       endp
.text:0000000000004435
.text:0000000000004435 ; ---------------------------------------------------------------------------
.text:000000000000443A                 align 20h
.text:0000000000004440
.text:0000000000004440 ; =============== S U B R O U T I N E =======================================
.text:0000000000004440
.text:0000000000004440
.text:0000000000004440 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004440                 public xzalloc
.text:0000000000004440 xzalloc         proc near
.text:0000000000004440 ; __unwind {
.text:0000000000004440                 push    rbx
.text:0000000000004441                 mov     rbx, rdi
.text:0000000000004444                 call    xmalloc
.text:0000000000004449                 mov     rdx, rbx        ; n
.text:000000000000444C                 xor     esi, esi        ; c
.text:000000000000444E                 mov     rdi, rax        ; s
.text:0000000000004451                 pop     rbx
.text:0000000000004452                 jmp     _memset
.text:0000000000004452 ; } // starts at 4440
.text:0000000000004452 xzalloc         endp
.text:0000000000004452
.text:0000000000004452 ; ---------------------------------------------------------------------------
.text:0000000000004457                 align 20h
.text:0000000000004460
.text:0000000000004460 ; =============== S U B R O U T I N E =======================================
.text:0000000000004460
.text:0000000000004460 ; Attributes: info_from_lumina
.text:0000000000004460
.text:0000000000004460 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004460                 public xcalloc
.text:0000000000004460 xcalloc         proc near
.text:0000000000004460 ; __unwind {
.text:0000000000004460                 mov     rax, rdi
.text:0000000000004463                 sub     rsp, 8
.text:0000000000004467                 mul     rsi
.text:000000000000446A                 seto    dl
.text:000000000000446D                 test    rax, rax
.text:0000000000004470                 js      short loc_4489
.text:0000000000004472                 movzx   edx, dl
.text:0000000000004475                 test    rdx, rdx
.text:0000000000004478                 jnz     short loc_4489
.text:000000000000447A                 call    _calloc
.text:000000000000447F                 test    rax, rax
.text:0000000000004482                 jz      short loc_4489
.text:0000000000004484                 add     rsp, 8
.text:0000000000004488                 retn
.text:0000000000004489 ; ---------------------------------------------------------------------------
.text:0000000000004489
.text:0000000000004489 loc_4489:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004489                                         ; xcalloc+18↑j ...
.text:0000000000004489                 call    xalloc_die
.text:0000000000004489 ; } // starts at 4460
.text:0000000000004489 xcalloc         endp
.text:0000000000004489
.text:0000000000004489 ; ---------------------------------------------------------------------------
.text:000000000000448E                 align 10h
.text:0000000000004490
.text:0000000000004490 ; =============== S U B R O U T I N E =======================================
.text:0000000000004490
.text:0000000000004490 ; Attributes: info_from_lumina
.text:0000000000004490
.text:0000000000004490 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004490                 public xmemdup
.text:0000000000004490 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004490                                         ; xstrdup+11↓j
.text:0000000000004490 ; __unwind {
.text:0000000000004490                 push    rbp
.text:0000000000004491                 push    rbx
.text:0000000000004492                 mov     rbp, rdi
.text:0000000000004495                 mov     rdi, rsi
.text:0000000000004498                 mov     rbx, rsi
.text:000000000000449B                 sub     rsp, 8
.text:000000000000449F                 call    xmalloc
.text:00000000000044A4                 add     rsp, 8
.text:00000000000044A8                 mov     rdx, rbx        ; n
.text:00000000000044AB                 mov     rsi, rbp        ; src
.text:00000000000044AE                 pop     rbx
.text:00000000000044AF                 pop     rbp
.text:00000000000044B0                 mov     rdi, rax        ; dest
.text:00000000000044B3                 jmp     _memcpy
.text:00000000000044B3 ; } // starts at 4490
.text:00000000000044B3 xmemdup         endp
.text:00000000000044B3
.text:00000000000044B3 ; ---------------------------------------------------------------------------
.text:00000000000044B8                 align 20h
.text:00000000000044C0
.text:00000000000044C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044C0
.text:00000000000044C0
.text:00000000000044C0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000044C0                 public xstrdup
.text:00000000000044C0 xstrdup         proc near
.text:00000000000044C0 ; __unwind {
.text:00000000000044C0                 push    rbx
.text:00000000000044C1                 mov     rbx, rdi
.text:00000000000044C4                 call    _strlen
.text:00000000000044C9                 mov     rdi, rbx        ; src
.text:00000000000044CC                 lea     rsi, [rax+1]    ; n
.text:00000000000044D0                 pop     rbx
.text:00000000000044D1                 jmp     short xmemdup
.text:00000000000044D1 ; } // starts at 44C0
.text:00000000000044D1 xstrdup         endp
.text:00000000000044D1
.text:00000000000044D1 ; ---------------------------------------------------------------------------
.text:00000000000044D3                 align 20h
.text:00000000000044E0
.text:00000000000044E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044E0
.text:00000000000044E0 ; Attributes: noreturn info_from_lumina
.text:00000000000044E0
.text:00000000000044E0 ; void __cdecl xalloc_die()
.text:00000000000044E0                 public xalloc_die
.text:00000000000044E0 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_3456↑p
.text:00000000000044E0                                         ; xmalloc:loc_42A5↑p ...
.text:00000000000044E0 ; __unwind {
.text:00000000000044E0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000044E7                 sub     rsp, 8
.text:00000000000044EB                 mov     edx, 5          ; category
.text:00000000000044F0                 xor     edi, edi        ; domainname
.text:00000000000044F2                 call    _dcgettext
.text:00000000000044F7                 mov     edi, cs:exit_failure ; status
.text:00000000000044FD                 lea     rdx, format+4   ; format
.text:0000000000004504                 mov     rcx, rax
.text:0000000000004507                 xor     esi, esi        ; errnum
.text:0000000000004509                 xor     eax, eax
.text:000000000000450B                 call    _error
.text:0000000000004510                 call    _abort
.text:0000000000004510 ; } // starts at 44E0
.text:0000000000004510 xalloc_die      endp
.text:0000000000004510
.text:0000000000004510 ; ---------------------------------------------------------------------------
.text:0000000000004515                 align 20h
.text:0000000000004520
.text:0000000000004520 ; =============== S U B R O U T I N E =======================================
.text:0000000000004520
.text:0000000000004520 ; Attributes: info_from_lumina
.text:0000000000004520
.text:0000000000004520 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000004520                 public rpl_mbrtowc
.text:0000000000004520 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000004520
.text:0000000000004520 pwc             = dword ptr -34h
.text:0000000000004520 var_30          = qword ptr -30h
.text:0000000000004520
.text:0000000000004520 ; __unwind {
.text:0000000000004520                 push    r13
.text:0000000000004522                 push    r12
.text:0000000000004524                 mov     r13, rsi
.text:0000000000004527                 push    rbp
.text:0000000000004528                 push    rbx
.text:0000000000004529                 mov     rbx, rdi
.text:000000000000452C                 mov     r12, rdx
.text:000000000000452F                 sub     rsp, 18h
.text:0000000000004533                 mov     rax, fs:28h
.text:000000000000453C                 mov     [rsp+38h+var_30], rax
.text:0000000000004541                 xor     eax, eax
.text:0000000000004543                 lea     rax, [rsp+38h+pwc]
.text:0000000000004548                 test    rdi, rdi
.text:000000000000454B                 cmovz   rbx, rax
.text:000000000000454F                 mov     rdi, rbx        ; pwc
.text:0000000000004552                 call    _mbrtowc
.text:0000000000004557                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000455B                 mov     rbp, rax
.text:000000000000455E                 jbe     short loc_4580
.text:0000000000004560                 test    r12, r12
.text:0000000000004563                 jz      short loc_4580
.text:0000000000004565                 xor     edi, edi
.text:0000000000004567                 call    hard_locale
.text:000000000000456C                 test    al, al
.text:000000000000456E                 jnz     short loc_4580
.text:0000000000004570                 movzx   eax, byte ptr [r13+0]
.text:0000000000004575                 mov     ebp, 1
.text:000000000000457A                 mov     [rbx], eax
.text:000000000000457C                 nop     dword ptr [rax+00h]
.text:0000000000004580
.text:0000000000004580 loc_4580:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000004580                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000004580                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004585                 xor     rdx, fs:28h
.text:000000000000458E                 mov     rax, rbp
.text:0000000000004591                 jnz     short loc_459E
.text:0000000000004593                 add     rsp, 18h
.text:0000000000004597                 pop     rbx
.text:0000000000004598                 pop     rbp
.text:0000000000004599                 pop     r12
.text:000000000000459B                 pop     r13
.text:000000000000459D                 retn
.text:000000000000459E ; ---------------------------------------------------------------------------
.text:000000000000459E
.text:000000000000459E loc_459E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000459E                 call    ___stack_chk_fail
.text:000000000000459E ; } // starts at 4520
.text:000000000000459E rpl_mbrtowc     endp
.text:000000000000459E
.text:000000000000459E ; ---------------------------------------------------------------------------
.text:00000000000045A3                 align 10h
.text:00000000000045B0
.text:00000000000045B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045B0
.text:00000000000045B0 ; Attributes: info_from_lumina
.text:00000000000045B0
.text:00000000000045B0 ; int __fastcall close_stream(FILE *stream)
.text:00000000000045B0                 public close_stream
.text:00000000000045B0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:00000000000045B0                                         ; close_stdout+33↑p
.text:00000000000045B0 ; __unwind {
.text:00000000000045B0                 push    r12
.text:00000000000045B2                 push    rbp
.text:00000000000045B3                 mov     rbp, rdi
.text:00000000000045B6                 push    rbx
.text:00000000000045B7                 call    ___fpending
.text:00000000000045BC                 mov     ebx, [rbp+0]
.text:00000000000045BF                 mov     rdi, rbp        ; stream
.text:00000000000045C2                 mov     r12, rax
.text:00000000000045C5                 call    rpl_fclose
.text:00000000000045CA                 and     ebx, 20h
.text:00000000000045CD                 test    ebx, ebx
.text:00000000000045CF                 jnz     short loc_45E8
.text:00000000000045D1                 test    eax, eax
.text:00000000000045D3                 jz      short loc_45DF
.text:00000000000045D5                 test    r12, r12
.text:00000000000045D8                 mov     eax, 0FFFFFFFFh
.text:00000000000045DD                 jz      short loc_4618
.text:00000000000045DF
.text:00000000000045DF loc_45DF:                               ; CODE XREF: close_stream+23↑j
.text:00000000000045DF                 pop     rbx
.text:00000000000045E0                 pop     rbp
.text:00000000000045E1                 pop     r12
.text:00000000000045E3                 retn
.text:00000000000045E3 ; ---------------------------------------------------------------------------
.text:00000000000045E4                 align 8
.text:00000000000045E8
.text:00000000000045E8 loc_45E8:                               ; CODE XREF: close_stream+1F↑j
.text:00000000000045E8                 test    eax, eax
.text:00000000000045EA                 jnz     short loc_4608
.text:00000000000045EC                 call    ___errno_location
.text:00000000000045F1                 mov     dword ptr [rax], 0
.text:00000000000045F7                 mov     eax, 0FFFFFFFFh
.text:00000000000045FC                 pop     rbx
.text:00000000000045FD                 pop     rbp
.text:00000000000045FE                 pop     r12
.text:0000000000004600                 retn
.text:0000000000004600 ; ---------------------------------------------------------------------------
.text:0000000000004601                 align 8
.text:0000000000004608
.text:0000000000004608 loc_4608:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000004608                 pop     rbx
.text:0000000000004609                 mov     eax, 0FFFFFFFFh
.text:000000000000460E                 pop     rbp
.text:000000000000460F                 pop     r12
.text:0000000000004611                 retn
.text:0000000000004611 ; ---------------------------------------------------------------------------
.text:0000000000004612                 align 8
.text:0000000000004618
.text:0000000000004618 loc_4618:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000004618                 call    ___errno_location
.text:000000000000461D                 cmp     dword ptr [rax], 9
.text:0000000000004620                 pop     rbx
.text:0000000000004621                 pop     rbp
.text:0000000000004622                 pop     r12
.text:0000000000004624                 setnz   al
.text:0000000000004627                 movzx   eax, al
.text:000000000000462A                 neg     eax
.text:000000000000462C                 retn
.text:000000000000462C ; } // starts at 45B0
.text:000000000000462C close_stream    endp
.text:000000000000462C
.text:000000000000462C ; ---------------------------------------------------------------------------
.text:000000000000462D                 align 10h
.text:0000000000004630
.text:0000000000004630 ; =============== S U B R O U T I N E =======================================
.text:0000000000004630
.text:0000000000004630
.text:0000000000004630                 public hard_locale
.text:0000000000004630 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000004630 ; __unwind {
.text:0000000000004630                 sub     rsp, 8
.text:0000000000004634                 xor     esi, esi        ; locale
.text:0000000000004636                 call    _setlocale
.text:000000000000463B                 mov     rdx, rax
.text:000000000000463E                 mov     eax, 1
.text:0000000000004643                 test    rdx, rdx
.text:0000000000004646                 jz      short loc_4665
.text:0000000000004648                 lea     rdi, aC         ; "C"
.text:000000000000464F                 mov     ecx, 2
.text:0000000000004654                 mov     rsi, rdx
.text:0000000000004657                 repe cmpsb
.text:0000000000004659                 setnbe  cl
.text:000000000000465C                 sbb     cl, 0
.text:000000000000465F                 xor     eax, eax
.text:0000000000004661                 test    cl, cl
.text:0000000000004663                 jnz     short loc_4670
.text:0000000000004665
.text:0000000000004665 loc_4665:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000004665                 add     rsp, 8
.text:0000000000004669                 retn
.text:0000000000004669 ; ---------------------------------------------------------------------------
.text:000000000000466A                 align 10h
.text:0000000000004670
.text:0000000000004670 loc_4670:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000004670                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000004677                 mov     ecx, 6
.text:000000000000467C                 mov     rsi, rdx
.text:000000000000467F                 repe cmpsb
.text:0000000000004681                 setnbe  al
.text:0000000000004684                 sbb     al, 0
.text:0000000000004686                 test    al, al
.text:0000000000004688                 setnz   al
.text:000000000000468B                 add     rsp, 8
.text:000000000000468F                 retn
.text:000000000000468F ; } // starts at 4630
.text:000000000000468F hard_locale     endp
.text:000000000000468F
.text:0000000000004690
.text:0000000000004690 ; =============== S U B R O U T I N E =======================================
.text:0000000000004690
.text:0000000000004690
.text:0000000000004690                 public locale_charset
.text:0000000000004690 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004690 ; __unwind {
.text:0000000000004690                 sub     rsp, 8
.text:0000000000004694                 mov     edi, 0Eh        ; item
.text:0000000000004699                 call    _nl_langinfo
.text:000000000000469E                 test    rax, rax
.text:00000000000046A1                 jz      short loc_46C0
.text:00000000000046A3                 cmp     byte ptr [rax], 0
.text:00000000000046A6                 lea     rdx, aAscii     ; "ASCII"
.text:00000000000046AD                 cmovz   rax, rdx
.text:00000000000046B1                 add     rsp, 8
.text:00000000000046B5                 retn
.text:00000000000046B5 ; ---------------------------------------------------------------------------
.text:00000000000046B6                 align 20h
.text:00000000000046C0
.text:00000000000046C0 loc_46C0:                               ; CODE XREF: locale_charset+11↑j
.text:00000000000046C0                 lea     rax, aAscii     ; "ASCII"
.text:00000000000046C7                 add     rsp, 8
.text:00000000000046CB                 retn
.text:00000000000046CB ; } // starts at 4690
.text:00000000000046CB locale_charset  endp
.text:00000000000046CB
.text:00000000000046CB ; ---------------------------------------------------------------------------
.text:00000000000046CC                 align 10h
.text:00000000000046D0
.text:00000000000046D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046D0
.text:00000000000046D0 ; Attributes: info_from_lumina
.text:00000000000046D0
.text:00000000000046D0 ; int __fastcall rpl_fclose(FILE *fp)
.text:00000000000046D0                 public rpl_fclose
.text:00000000000046D0 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:00000000000046D0 ; __unwind {
.text:00000000000046D0                 push    r12
.text:00000000000046D2                 push    rbp
.text:00000000000046D3                 push    rbx
.text:00000000000046D4                 mov     rbx, rdi
.text:00000000000046D7                 call    _fileno
.text:00000000000046DC                 test    eax, eax
.text:00000000000046DE                 mov     rdi, rbx        ; fp
.text:00000000000046E1                 js      short loc_4737
.text:00000000000046E3                 call    ___freading
.text:00000000000046E8                 test    eax, eax
.text:00000000000046EA                 jnz     short loc_4718
.text:00000000000046EC
.text:00000000000046EC loc_46EC:                               ; CODE XREF: rpl_fclose+62↓j
.text:00000000000046EC                 mov     rdi, rbx        ; stream
.text:00000000000046EF                 call    rpl_fflush
.text:00000000000046F4                 test    eax, eax
.text:00000000000046F6                 jz      short loc_4734
.text:00000000000046F8                 call    ___errno_location
.text:00000000000046FD                 mov     r12d, [rax]
.text:0000000000004700                 mov     rdi, rbx        ; stream
.text:0000000000004703                 mov     rbp, rax
.text:0000000000004706                 call    _fclose
.text:000000000000470B                 test    r12d, r12d
.text:000000000000470E                 jnz     short loc_4740
.text:0000000000004710
.text:0000000000004710 loc_4710:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004710                 pop     rbx
.text:0000000000004711                 pop     rbp
.text:0000000000004712                 pop     r12
.text:0000000000004714                 retn
.text:0000000000004714 ; ---------------------------------------------------------------------------
.text:0000000000004715                 align 8
.text:0000000000004718
.text:0000000000004718 loc_4718:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004718                 mov     rdi, rbx        ; stream
.text:000000000000471B                 call    _fileno
.text:0000000000004720                 xor     esi, esi        ; offset
.text:0000000000004722                 mov     edx, 1          ; whence
.text:0000000000004727                 mov     edi, eax        ; fd
.text:0000000000004729                 call    _lseek
.text:000000000000472E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004732                 jnz     short loc_46EC
.text:0000000000004734
.text:0000000000004734 loc_4734:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000004734                 mov     rdi, rbx        ; stream
.text:0000000000004737
.text:0000000000004737 loc_4737:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000004737                 pop     rbx
.text:0000000000004738                 pop     rbp
.text:0000000000004739                 pop     r12
.text:000000000000473B                 jmp     _fclose
.text:0000000000004740 ; ---------------------------------------------------------------------------
.text:0000000000004740
.text:0000000000004740 loc_4740:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004740                 mov     [rbp+0], r12d
.text:0000000000004744                 mov     eax, 0FFFFFFFFh
.text:0000000000004749                 jmp     short loc_4710
.text:0000000000004749 ; } // starts at 46D0
.text:0000000000004749 rpl_fclose      endp
.text:0000000000004749
.text:0000000000004749 ; ---------------------------------------------------------------------------
.text:000000000000474B                 align 10h
.text:0000000000004750
.text:0000000000004750 ; =============== S U B R O U T I N E =======================================
.text:0000000000004750
.text:0000000000004750 ; Attributes: info_from_lumina
.text:0000000000004750
.text:0000000000004750 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000004750                 public rpl_fflush
.text:0000000000004750 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000004750 ; __unwind {
.text:0000000000004750                 test    rdi, rdi
.text:0000000000004753                 push    rbx
.text:0000000000004754                 mov     rbx, rdi
.text:0000000000004757                 jz      short loc_476A
.text:0000000000004759                 call    ___freading
.text:000000000000475E                 test    eax, eax
.text:0000000000004760                 jz      short loc_476A
.text:0000000000004762                 test    dword ptr [rbx], 100h
.text:0000000000004768                 jnz     short loc_4778
.text:000000000000476A
.text:000000000000476A loc_476A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000476A                                         ; rpl_fflush+10↑j
.text:000000000000476A                 mov     rdi, rbx        ; stream
.text:000000000000476D                 pop     rbx
.text:000000000000476E                 jmp     _fflush
.text:000000000000476E ; ---------------------------------------------------------------------------
.text:0000000000004773                 align 8
.text:0000000000004778
.text:0000000000004778 loc_4778:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000004778                 mov     rdi, rbx
.text:000000000000477B                 mov     edx, 1
.text:0000000000004780                 xor     esi, esi
.text:0000000000004782                 call    rpl_fseeko
.text:0000000000004787                 mov     rdi, rbx        ; stream
.text:000000000000478A                 pop     rbx
.text:000000000000478B                 jmp     _fflush
.text:000000000000478B ; } // starts at 4750
.text:000000000000478B rpl_fflush      endp
.text:000000000000478B
.text:0000000000004790
.text:0000000000004790 ; =============== S U B R O U T I N E =======================================
.text:0000000000004790
.text:0000000000004790 ; Attributes: info_from_lumina
.text:0000000000004790
.text:0000000000004790 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004790                 public rpl_fseeko
.text:0000000000004790 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004790 ; __unwind {
.text:0000000000004790                 mov     rax, [rdi+8]
.text:0000000000004794                 cmp     [rdi+10h], rax
.text:0000000000004798                 jz      short loc_47A0
.text:000000000000479A
.text:000000000000479A loc_479A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000479A                                         ; rpl_fseeko+1F↓j
.text:000000000000479A                 jmp     _fseeko
.text:000000000000479A ; ---------------------------------------------------------------------------
.text:000000000000479F                 align 20h
.text:00000000000047A0
.text:00000000000047A0 loc_47A0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:00000000000047A0                 mov     rax, [rdi+20h]
.text:00000000000047A4                 cmp     [rdi+28h], rax
.text:00000000000047A8                 jnz     short loc_479A
.text:00000000000047AA                 cmp     qword ptr [rdi+48h], 0
.text:00000000000047AF                 jnz     short loc_479A
.text:00000000000047B1                 push    r12
.text:00000000000047B3                 push    rbp
.text:00000000000047B4                 mov     r12d, edx
.text:00000000000047B7                 push    rbx
.text:00000000000047B8                 mov     rbp, rsi
.text:00000000000047BB                 mov     rbx, rdi
.text:00000000000047BE                 call    _fileno
.text:00000000000047C3                 mov     edx, r12d       ; whence
.text:00000000000047C6                 mov     rsi, rbp        ; offset
.text:00000000000047C9                 mov     edi, eax        ; fd
.text:00000000000047CB                 call    _lseek
.text:00000000000047D0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000047D4                 jz      short loc_47E2
.text:00000000000047D6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:00000000000047D9                 mov     [rbx+90h], rax
.text:00000000000047E0                 xor     eax, eax
.text:00000000000047E2
.text:00000000000047E2 loc_47E2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:00000000000047E2                 pop     rbx
.text:00000000000047E3                 pop     rbp
.text:00000000000047E4                 pop     r12
.text:00000000000047E6                 retn
.text:00000000000047E6 ; } // starts at 4790
.text:00000000000047E6 rpl_fseeko      endp
.text:00000000000047E6
.text:00000000000047E6 ; ---------------------------------------------------------------------------
.text:00000000000047E7                 align 10h
.text:00000000000047F0
.text:00000000000047F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047F0
.text:00000000000047F0 ; Attributes: info_from_lumina
.text:00000000000047F0
.text:00000000000047F0 ; void _libc_csu_init(void)
.text:00000000000047F0                 public __libc_csu_init
.text:00000000000047F0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000047F0 ; __unwind {
.text:00000000000047F0                 push    r15
.text:00000000000047F2                 push    r14
.text:00000000000047F4                 mov     r15, rdx
.text:00000000000047F7                 push    r13
.text:00000000000047F9                 push    r12
.text:00000000000047FB                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000004802                 push    rbp
.text:0000000000004803                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000480A                 push    rbx
.text:000000000000480B                 mov     r13d, edi
.text:000000000000480E                 mov     r14, rsi
.text:0000000000004811                 sub     rbp, r12
.text:0000000000004814                 sub     rsp, 8
.text:0000000000004818                 sar     rbp, 3
.text:000000000000481C                 call    _init_proc
.text:0000000000004821                 test    rbp, rbp
.text:0000000000004824                 jz      short loc_4846
.text:0000000000004826                 xor     ebx, ebx
.text:0000000000004828                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004830
.text:0000000000004830 loc_4830:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000004830                 mov     rdx, r15
.text:0000000000004833                 mov     rsi, r14
.text:0000000000004836                 mov     edi, r13d
.text:0000000000004839                 call    ds:(__frame_dummy_init_array_entry - 206BB0h)[r12+rbx*8]
.text:000000000000483D                 add     rbx, 1
.text:0000000000004841                 cmp     rbp, rbx
.text:0000000000004844                 jnz     short loc_4830
.text:0000000000004846
.text:0000000000004846 loc_4846:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000004846                 add     rsp, 8
.text:000000000000484A                 pop     rbx
.text:000000000000484B                 pop     rbp
.text:000000000000484C                 pop     r12
.text:000000000000484E                 pop     r13
.text:0000000000004850                 pop     r14
.text:0000000000004852                 pop     r15
.text:0000000000004854                 retn
.text:0000000000004854 ; } // starts at 47F0
.text:0000000000004854 __libc_csu_init endp
.text:0000000000004854
.text:0000000000004854 ; ---------------------------------------------------------------------------
.text:0000000000004855                 align 20h
.text:0000000000004860
.text:0000000000004860 ; =============== S U B R O U T I N E =======================================
.text:0000000000004860
.text:0000000000004860
.text:0000000000004860 ; void _libc_csu_fini(void)
.text:0000000000004860                 public __libc_csu_fini
.text:0000000000004860 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000004860 ; __unwind {
.text:0000000000004860                 rep retn
.text:0000000000004860 ; } // starts at 4860
.text:0000000000004860 __libc_csu_fini endp
.text:0000000000004860
.text:0000000000004860 ; ---------------------------------------------------------------------------
.text:0000000000004862                 align 10h
.text:0000000000004870
.text:0000000000004870 ; =============== S U B R O U T I N E =======================================
.text:0000000000004870
.text:0000000000004870
.text:0000000000004870 atexit          proc near               ; CODE XREF: main+53↑p
.text:0000000000004870 ; __unwind {
.text:0000000000004870                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000004877                 xor     esi, esi        ; obj
.text:0000000000004879                 jmp     ___cxa_atexit
.text:0000000000004879 ; } // starts at 4870
.text:0000000000004879 atexit          endp
.text:0000000000004879
.text:0000000000004879 _text           ends
.text:0000000000004879
LOAD:000000000000487E ; ===========================================================================
LOAD:000000000000487E
LOAD:000000000000487E ; Segment type: Pure code
LOAD:000000000000487E ; Segment permissions: Read/Execute
LOAD:000000000000487E LOAD            segment byte public 'CODE' use64
LOAD:000000000000487E                 assume cs:LOAD
LOAD:000000000000487E                 ;org 487Eh
LOAD:000000000000487E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000487E                 align 20h
LOAD:000000000000487E LOAD            ends
LOAD:000000000000487E
.fini:0000000000004880 ; ===========================================================================
.fini:0000000000004880
.fini:0000000000004880 ; Segment type: Pure code
.fini:0000000000004880 ; Segment permissions: Read/Execute
.fini:0000000000004880 _fini           segment dword public 'CODE' use64
.fini:0000000000004880                 assume cs:_fini
.fini:0000000000004880                 ;org 4880h
.fini:0000000000004880                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000004880
.fini:0000000000004880 ; =============== S U B R O U T I N E =======================================
.fini:0000000000004880
.fini:0000000000004880
.fini:0000000000004880                 public _term_proc
.fini:0000000000004880 _term_proc      proc near
.fini:0000000000004880                 sub     rsp, 8          ; _fini
.fini:0000000000004884                 add     rsp, 8
.fini:0000000000004888                 retn
.fini:0000000000004888 _term_proc      endp
.fini:0000000000004888
.fini:0000000000004888 _fini           ends
.fini:0000000000004888
LOAD:0000000000004889 ; ===========================================================================
LOAD:0000000000004889
LOAD:0000000000004889 ; Segment type: Pure code
LOAD:0000000000004889 ; Segment permissions: Read/Execute
LOAD:0000000000004889 LOAD            segment byte public 'CODE' use64
LOAD:0000000000004889                 assume cs:LOAD
LOAD:0000000000004889                 ;org 4889h
LOAD:0000000000004889                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004889                 align 20h
LOAD:0000000000004889 LOAD            ends
LOAD:0000000000004889
.rodata:00000000000048A0 ; ===========================================================================
.rodata:00000000000048A0
.rodata:00000000000048A0 ; Segment type: Pure data
.rodata:00000000000048A0 ; Segment permissions: Read
.rodata:00000000000048A0 _rodata         segment align_32 public 'CONST' use64
.rodata:00000000000048A0                 assume cs:_rodata
.rodata:00000000000048A0                 ;org 48A0h
.rodata:00000000000048A0                 public _IO_stdin_used
.rodata:00000000000048A0 _IO_stdin_used  db    1
.rodata:00000000000048A1                 db    0
.rodata:00000000000048A2                 db    2
.rodata:00000000000048A3                 db    0
.rodata:00000000000048A4 unk_48A4        db  79h ; y             ; DATA XREF: main+6C↑o
.rodata:00000000000048A4                                         ; usage+EA↑o ...
.rodata:00000000000048A5                 db  65h ; e
.rodata:00000000000048A6                 db  73h ; s
.rodata:00000000000048A7                 db    0
.rodata:00000000000048A8 unk_48A8        db  5Bh ; [             ; DATA XREF: usage+F6↑o
.rodata:00000000000048A9                 db    0
.rodata:00000000000048AA aTestInvocation db 'test invocation',0  ; DATA XREF: usage+11D↑o
.rodata:00000000000048BA aMultiCallInvoc db 'Multi-call invocation',0
.rodata:00000000000048BA                                         ; DATA XREF: usage+14D↑o
.rodata:00000000000048BA                                         ; usage+244↑o ...
.rodata:00000000000048D0 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+15E↑o
.rodata:00000000000048DA aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+16A↑o
.rodata:00000000000048E9 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+FD↑o
.rodata:00000000000048F3 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+129↑o
.rodata:00000000000048FD aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+141↑o
.rodata:0000000000004907 ; const char aSOnlineHelpS[]
.rodata:0000000000004907 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1B2↑o
.rodata:0000000000004907                 db '%s online help: <%s>',0Ah,0
.rodata:000000000000491E unk_491E        db  47h ; G             ; DATA XREF: main+73↑o
.rodata:000000000000491E                                         ; usage+1CE↑o ...
.rodata:000000000000491F                 db  4Eh ; N
.rodata:0000000000004920                 db  55h ; U
.rodata:0000000000004921                 db  20h
.rodata:0000000000004922 ; const char domainname[]
.rodata:0000000000004922 domainname      db 'coreutils',0        ; DATA XREF: main+34↑o
.rodata:0000000000004922                                         ; main+40↑o ...
.rodata:000000000000492C ; const char s2[]
.rodata:000000000000492C s2              db 'en_',0              ; DATA XREF: usage+1F5↑o
.rodata:000000000000492C                                         ; usage+2B6↑o
.rodata:0000000000004930 ; const char aFullDocumentat[]
.rodata:0000000000004930 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000004930                                         ; DATA XREF: usage:loc_19D1↑o
.rodata:0000000000004930                                         ; usage:loc_1A8E↑o
.rodata:000000000000494B ; const char dirname[]
.rodata:000000000000494B dirname         db '/usr/local/share/locale',0
.rodata:000000000000494B                                         ; DATA XREF: main+2D↑o
.rodata:0000000000004963 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+58↑o
.rodata:0000000000004973 aY              db 'y',0                ; DATA XREF: main+BC↑o
.rodata:0000000000004975 ; const char msgid[]
.rodata:0000000000004975 msgid           db 'standard output',0  ; DATA XREF: main+1EB↑o
.rodata:0000000000004985                 align 8
.rodata:0000000000004988 ; const char aTrySHelpForMor[]
.rodata:0000000000004988 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000004988                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000049AF                 align 10h
.rodata:00000000000049B0 ; const char aUsageSStringOr[]
.rodata:00000000000049B0 aUsageSStringOr db 'Usage: %s [STRING]...',0Ah
.rodata:00000000000049B0                                         ; DATA XREF: usage:loc_181D↑o
.rodata:00000000000049B0                 db '  or:  %s OPTION',0Ah,0
.rodata:00000000000049D8 ; const char aRepeatedlyOutp[]
.rodata:00000000000049D8 aRepeatedlyOutp db 'Repeatedly output a line with all specified STRING(s), or ',27h,'y'
.rodata:00000000000049D8                                         ; DATA XREF: usage+87↑o
.rodata:00000000000049D8                 db 27h,'.',0Ah
.rodata:00000000000049D8                 db 0Ah,0
.rodata:0000000000004A19                 align 20h
.rodata:0000000000004A20 ; const char aHelpDisplayThi[]
.rodata:0000000000004A20 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000004A20                                         ; DATA XREF: usage+AC↑o
.rodata:0000000000004A4D                 align 10h
.rodata:0000000000004A50 ; const char aVersionOutputV[]
.rodata:0000000000004A50 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000004A50                                         ; DATA XREF: usage+D1↑o
.rodata:0000000000004A86                 align 8
.rodata:0000000000004A88 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000004A88                                         ; DATA XREF: usage+1C7↑o
.rodata:0000000000004A88                                         ; usage+22B↑o ...
.rodata:0000000000004AB0 ; const char aReportAnyTrans[]
.rodata:0000000000004AB0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000004AB0                                         ; DATA XREF: usage+31F↑o
.rodata:0000000000004AB0                 db 'am/>',0Ah,0
.rodata:0000000000004AF7                 align 8
.rodata:0000000000004AF8 ; const char aOrAvailableLoc[]
.rodata:0000000000004AF8 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000004AF8                                         ; DATA XREF: usage:loc_1A16↑o
.rodata:0000000000004B2B a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000004B30 ; const char aWriteError[]
.rodata:0000000000004B30 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_1B73↑o
.rodata:0000000000004B3C ; const char format[]
.rodata:0000000000004B3C format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000004B3C                                         ; close_stdout+8F↑o ...
.rodata:0000000000004B43 ; const char shortopts[]
.rodata:0000000000004B43 shortopts       db '+',0                ; DATA XREF: parse_long_options+B7↑o
.rodata:0000000000004B43                                         ; parse_gnu_standard_options_only+72↑o
.rodata:0000000000004B45 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:0000000000004B4A aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000206BE0↓o
.rodata:0000000000004B52                 align 8
.rodata:0000000000004B58 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000004B58                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000004B90 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000004B98 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000004B9C unk_4B9C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000004B9D                 db  80h
.rodata:0000000000004B9E                 db  98h
.rodata:0000000000004B9F                 db    0
.rodata:0000000000004BA0 unk_4BA0        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000004BA1                 db  80h
.rodata:0000000000004BA2                 db  99h
.rodata:0000000000004BA3                 db    0
.rodata:0000000000004BA4 unk_4BA4        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000004BA5                 db    7
.rodata:0000000000004BA6                 db  65h ; e
.rodata:0000000000004BA7                 db    0
.rodata:0000000000004BA8 unk_4BA8        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000004BA9                 db 0AFh
.rodata:0000000000004BAA                 db    0
.rodata:0000000000004BAB unk_4BAB        db  22h ; "             ; DATA XREF: gettext_quote:loc_1FA0↑o
.rodata:0000000000004BAB                                         ; quotearg_buffer_restyled:loc_2D5B↑o ...
.rodata:0000000000004BAC                 db    0
.rodata:0000000000004BAD ; const char asc_4BAD[2]
.rodata:0000000000004BAD asc_4BAD        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000004BAD                                         ; quotearg_buffer_restyled:loc_2123↑o ...
.rodata:0000000000004BAF ; const char asc_4BAF[2]
.rodata:0000000000004BAF asc_4BAF        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000004BAF                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000004BB1 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000004BB9 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000206C28↓o
.rodata:0000000000004BBF aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000206C30↓o
.rodata:0000000000004BCC aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000206C38↓o
.rodata:0000000000004BCC                                         ; .data.rel.ro:0000000000206C58↓o
.rodata:0000000000004BD9 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000004BD9                                         ; DATA XREF: .data.rel.ro:0000000000206C40↓o
.rodata:0000000000004BED aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000206C48↓o
.rodata:0000000000004BEF aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000206C50↓o
.rodata:0000000000004BF7 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000206C68↓o
.rodata:0000000000004BFF                 align 20h
.rodata:0000000000004C00 jpt_2101        dd offset loc_2EAA - 4C00h
.rodata:0000000000004C00                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000004C00                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000004C00                 dd offset loc_2103 - 4C00h ; jump table for switch statement
.rodata:0000000000004C00                 dd offset loc_30D8 - 4C00h
.rodata:0000000000004C00                 dd offset loc_2EE4 - 4C00h
.rodata:0000000000004C00                 dd offset loc_2CD4 - 4C00h
.rodata:0000000000004C00                 dd offset loc_2D30 - 4C00h
.rodata:0000000000004C00                 dd offset loc_2D85 - 4C00h
.rodata:0000000000004C00                 dd offset loc_2DCA - 4C00h
.rodata:0000000000004C00                 dd offset loc_2E04 - 4C00h
.rodata:0000000000004C00                 dd offset loc_2E04 - 4C00h
.rodata:0000000000004C00                 dd offset loc_2E04 - 4C00h
.rodata:0000000000004C2C jpt_225E        dd offset loc_2480 - 4C2Ch, offset def_225E - 4C2Ch, offset def_225E - 4C2Ch
.rodata:0000000000004C2C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000004C2C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000004C2C                 dd offset def_225E - 4C2Ch, offset def_225E - 4C2Ch, offset def_225E - 4C2Ch ; jump table for switch statement
.rodata:0000000000004C2C                 dd offset def_225E - 4C2Ch, offset loc_24C0 - 4C2Ch, offset loc_23C8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_2388 - 4C2Ch, offset loc_2550 - 4C2Ch, offset loc_2540 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_2530 - 4C2Ch, offset loc_2520 - 4C2Ch, offset def_225E - 4C2Ch
.rodata:0000000000004C2C                 dd offset def_225E - 4C2Ch, offset def_225E - 4C2Ch, offset def_225E - 4C2Ch
.rodata:0000000000004C2C                 dd offset def_225E - 4C2Ch, offset def_225E - 4C2Ch, offset def_225E - 4C2Ch
.rodata:0000000000004C2C                 dd offset def_225E - 4C2Ch, offset def_225E - 4C2Ch, offset def_225E - 4C2Ch
.rodata:0000000000004C2C                 dd offset def_225E - 4C2Ch, offset def_225E - 4C2Ch, offset def_225E - 4C2Ch
.rodata:0000000000004C2C                 dd offset def_225E - 4C2Ch, offset def_225E - 4C2Ch, offset def_225E - 4C2Ch
.rodata:0000000000004C2C                 dd offset def_225E - 4C2Ch, offset def_225E - 4C2Ch, offset loc_2510 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_2500 - 4C2Ch, offset loc_2500 - 4C2Ch, offset loc_24D0 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_2500 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_2500 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_2363 - 4C2Ch, offset loc_2500 - 4C2Ch, offset loc_2500 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_2500 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_2500 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_2500 - 4C2Ch, offset loc_2500 - 4C2Ch, offset loc_2500 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_2333 - 4C2Ch, offset def_225E - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_2500 - 4C2Ch, offset loc_23D8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_2500 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_2500 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch, offset loc_24A8 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_2263 - 4C2Ch, offset loc_2500 - 4C2Ch, offset loc_2263 - 4C2Ch
.rodata:0000000000004C2C                 dd offset loc_24D0 - 4C2Ch
.rodata:0000000000004E28 jpt_25EA        dd offset loc_2650 - 4E28h, offset def_25EA - 4E28h, offset def_25EA - 4E28h
.rodata:0000000000004E28                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000004E28                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000004E28                 dd offset def_25EA - 4E28h, offset def_25EA - 4E28h, offset def_25EA - 4E28h ; jump table for switch statement
.rodata:0000000000004E28                 dd offset def_25EA - 4E28h, offset loc_2640 - 4E28h, offset loc_2790 - 4E28h
.rodata:0000000000004E28                 dd offset loc_2778 - 4E28h, offset loc_2628 - 4E28h, offset loc_2768 - 4E28h
.rodata:0000000000004E28                 dd offset loc_2610 - 4E28h, offset loc_2750 - 4E28h, offset def_25EA - 4E28h
.rodata:0000000000004E28                 dd offset def_25EA - 4E28h, offset def_25EA - 4E28h, offset def_25EA - 4E28h
.rodata:0000000000004E28                 dd offset def_25EA - 4E28h, offset def_25EA - 4E28h, offset def_25EA - 4E28h
.rodata:0000000000004E28                 dd offset def_25EA - 4E28h, offset def_25EA - 4E28h, offset def_25EA - 4E28h
.rodata:0000000000004E28                 dd offset def_25EA - 4E28h, offset def_25EA - 4E28h, offset def_25EA - 4E28h
.rodata:0000000000004E28                 dd offset def_25EA - 4E28h, offset def_25EA - 4E28h, offset def_25EA - 4E28h
.rodata:0000000000004E28                 dd offset def_25EA - 4E28h, offset def_25EA - 4E28h, offset loc_2738 - 4E28h
.rodata:0000000000004E28                 dd offset loc_2720 - 4E28h, offset loc_2720 - 4E28h, offset loc_2708 - 4E28h
.rodata:0000000000004E28                 dd offset loc_2720 - 4E28h, offset loc_26F0 - 4E28h, offset loc_2720 - 4E28h
.rodata:0000000000004E28                 dd offset loc_2360 - 4E28h, offset loc_2720 - 4E28h, offset loc_2720 - 4E28h
.rodata:0000000000004E28                 dd offset loc_2720 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_2720 - 4E28h
.rodata:0000000000004E28                 dd offset loc_2720 - 4E28h, offset loc_2720 - 4E28h, offset loc_2720 - 4E28h
.rodata:0000000000004E28                 dd offset loc_2330 - 4E28h, offset def_25EA - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_2720 - 4E28h, offset loc_25F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_2720 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_2720 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h, offset loc_26F0 - 4E28h
.rodata:0000000000004E28                 dd offset loc_2260 - 4E28h, offset loc_2720 - 4E28h, offset loc_2260 - 4E28h
.rodata:0000000000004E28                 dd offset loc_2708 - 4E28h
.rodata:0000000000005024                 align 20h
.rodata:0000000000005040                 public quoting_style_vals
.rodata:0000000000005040 quoting_style_vals db    0
.rodata:0000000000005041                 db    0
.rodata:0000000000005042                 db    0
.rodata:0000000000005043                 db    0
.rodata:0000000000005044                 db    1
.rodata:0000000000005045                 db    0
.rodata:0000000000005046                 db    0
.rodata:0000000000005047                 db    0
.rodata:0000000000005048                 db    2
.rodata:0000000000005049                 db    0
.rodata:000000000000504A                 db    0
.rodata:000000000000504B                 db    0
.rodata:000000000000504C                 db    3
.rodata:000000000000504D                 db    0
.rodata:000000000000504E                 db    0
.rodata:000000000000504F                 db    0
.rodata:0000000000005050                 db    4
.rodata:0000000000005051                 db    0
.rodata:0000000000005052                 db    0
.rodata:0000000000005053                 db    0
.rodata:0000000000005054                 db    5
.rodata:0000000000005055                 db    0
.rodata:0000000000005056                 db    0
.rodata:0000000000005057                 db    0
.rodata:0000000000005058                 db    6
.rodata:0000000000005059                 db    0
.rodata:000000000000505A                 db    0
.rodata:000000000000505B                 db    0
.rodata:000000000000505C                 db    7
.rodata:000000000000505D                 db    0
.rodata:000000000000505E                 db    0
.rodata:000000000000505F                 db    0
.rodata:0000000000005060                 db    8
.rodata:0000000000005061                 db    0
.rodata:0000000000005062                 db    0
.rodata:0000000000005063                 db    0
.rodata:0000000000005064                 db    9
.rodata:0000000000005065                 db    0
.rodata:0000000000005066                 db    0
.rodata:0000000000005067                 db    0
.rodata:0000000000005068 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000005074 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000507B ; const char aC_0[]
.rodata:000000000000507B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_3CAC↑o
.rodata:000000000000507F ; const char aWrittenByS[]
.rodata:000000000000507F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000507F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000508F ; const char aWrittenBySAndS[]
.rodata:000000000000508F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000508F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000050A6 ; const char aWrittenBySSAnd[]
.rodata:00000000000050A6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000050A6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:00000000000050C2 ; const char aReportBugsToS[]
.rodata:00000000000050C2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:00000000000050C2                 db 'Report bugs to: %s',0Ah,0
.rodata:00000000000050D7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:00000000000050D7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:00000000000050ED ; const char aSHomePageS[]
.rodata:00000000000050ED aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:00000000000050ED                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000005101                 align 8
.rodata:0000000000005108 ; const char aLicenseGplv3Gn[]
.rodata:0000000000005108 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000005108                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000005108                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000005108                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000005108                 db '.',0Ah
.rodata:0000000000005108                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000005108                 db 0Ah,0
.rodata:00000000000051D4                 align 8
.rodata:00000000000051D8 ; const char aWrittenBySSSAn[]
.rodata:00000000000051D8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000051D8                                         ; DATA XREF: version_etc_arn:loc_3F00↑o
.rodata:00000000000051D8                 db 'and %s.',0Ah,0
.rodata:00000000000051F8 ; const char aWrittenBySSSSA[]
.rodata:00000000000051F8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000051F8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:00000000000051F8                 db '%s, and %s.',0Ah,0
.rodata:000000000000521C                 align 20h
.rodata:0000000000005220 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000005220 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005220                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000005220                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000005248 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000005248 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005248                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000005248                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000005274                 align 8
.rodata:0000000000005278 ; const char aWrittenBySSSSS[]
.rodata:0000000000005278 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005278                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000005278                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005278                 db 'and %s.',0Ah,0
.rodata:00000000000052A8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000052A8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000052A8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000052A8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000052A8                 db '%s, and %s.',0Ah,0
.rodata:00000000000052DC                 align 20h
.rodata:00000000000052E0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000052E0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:00000000000052E0                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000052E0                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000531C                 align 20h
.rodata:0000000000005320 ; const char aGeneralHelpUsi[]
.rodata:0000000000005320 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000005320                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000005320                 db 0
.rodata:0000000000005361                 align 8
.rodata:0000000000005368 jpt_3D14        dd offset loc_3D96 - 5368h
.rodata:0000000000005368                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000005368                                         ; version_etc_arn+9D↑r
.rodata:0000000000005368                 dd offset loc_3E28 - 5368h ; jump table for switch statement
.rodata:0000000000005368                 dd offset loc_3E68 - 5368h
.rodata:0000000000005368                 dd offset loc_3EB0 - 5368h
.rodata:0000000000005368                 dd offset loc_3F00 - 5368h
.rodata:0000000000005368                 dd offset loc_3F58 - 5368h
.rodata:0000000000005368                 dd offset loc_3F88 - 5368h
.rodata:0000000000005368                 dd offset loc_3FF0 - 5368h
.rodata:0000000000005368                 dd offset loc_3D20 - 5368h
.rodata:0000000000005368                 dd offset loc_3DD0 - 5368h
.rodata:0000000000005390                 align 20h
.rodata:00000000000053A0                 public version_etc_copyright
.rodata:00000000000053A0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000053A0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:00000000000053CF ; const char aMemoryExhauste[]
.rodata:00000000000053CF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:00000000000053E0 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:00000000000053E2 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_4670↑o
.rodata:00000000000053E8 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000053E8                                         ; locale_charset:loc_46C0↑o
.rodata:00000000000053E8 _rodata         ends
.rodata:00000000000053E8
LOAD:00000000000053EE ; ===========================================================================
LOAD:00000000000053EE
LOAD:00000000000053EE ; Segment type: Pure code
LOAD:00000000000053EE ; Segment permissions: Read/Execute
LOAD:00000000000053EE LOAD            segment byte public 'CODE' use64
LOAD:00000000000053EE                 assume cs:LOAD
LOAD:00000000000053EE                 ;org 53EEh
LOAD:00000000000053EE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000053EE                 align 10h
LOAD:00000000000053EE LOAD            ends
LOAD:00000000000053EE
.eh_frame_hdr:00000000000053F0 ; ===========================================================================
.eh_frame_hdr:00000000000053F0
.eh_frame_hdr:00000000000053F0 ; Segment type: Pure data
.eh_frame_hdr:00000000000053F0 ; Segment permissions: Read
.eh_frame_hdr:00000000000053F0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000053F0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000053F0                 ;org 53F0h
.eh_frame_hdr:00000000000053F0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000053F1                 db  1Bh
.eh_frame_hdr:00000000000053F2                 db    3
.eh_frame_hdr:00000000000053F3                 db  3Bh ; ;
.eh_frame_hdr:00000000000053F4                 db  5Ch ; \
.eh_frame_hdr:00000000000053F5                 db    2
.eh_frame_hdr:00000000000053F6                 db    0
.eh_frame_hdr:00000000000053F7                 db    0
.eh_frame_hdr:00000000000053F8                 db  4Ah ; J
.eh_frame_hdr:00000000000053F9                 db    0
.eh_frame_hdr:00000000000053FA                 db    0
.eh_frame_hdr:00000000000053FB                 db    0
.eh_frame_hdr:00000000000053FC                 db 0E0h
.eh_frame_hdr:00000000000053FD                 db 0BDh
.eh_frame_hdr:00000000000053FE                 db 0FFh
.eh_frame_hdr:00000000000053FF                 db 0FFh
.eh_frame_hdr:0000000000005400                 db 0A8h
.eh_frame_hdr:0000000000005401                 db    2
.eh_frame_hdr:0000000000005402                 db    0
.eh_frame_hdr:0000000000005403                 db    0
.eh_frame_hdr:0000000000005404                 db  70h ; p
.eh_frame_hdr:0000000000005405                 db 0C0h
.eh_frame_hdr:0000000000005406                 db 0FFh
.eh_frame_hdr:0000000000005407                 db 0FFh
.eh_frame_hdr:0000000000005408                 db 0D0h
.eh_frame_hdr:0000000000005409                 db    2
.eh_frame_hdr:000000000000540A                 db    0
.eh_frame_hdr:000000000000540B                 db    0
.eh_frame_hdr:000000000000540C                 db  80h
.eh_frame_hdr:000000000000540D                 db 0C0h
.eh_frame_hdr:000000000000540E                 db 0FFh
.eh_frame_hdr:000000000000540F                 db 0FFh
.eh_frame_hdr:0000000000005410                 db  14h
.eh_frame_hdr:0000000000005411                 db    3
.eh_frame_hdr:0000000000005412                 db    0
.eh_frame_hdr:0000000000005413                 db    0
.eh_frame_hdr:0000000000005414                 db 0C0h
.eh_frame_hdr:0000000000005415                 db 0C2h
.eh_frame_hdr:0000000000005416                 db 0FFh
.eh_frame_hdr:0000000000005417                 db 0FFh
.eh_frame_hdr:0000000000005418                 db  78h ; x
.eh_frame_hdr:0000000000005419                 db    2
.eh_frame_hdr:000000000000541A                 db    0
.eh_frame_hdr:000000000000541B                 db    0
.eh_frame_hdr:000000000000541C                 db 0D0h
.eh_frame_hdr:000000000000541D                 db 0C3h
.eh_frame_hdr:000000000000541E                 db 0FFh
.eh_frame_hdr:000000000000541F                 db 0FFh
.eh_frame_hdr:0000000000005420                 db 0E8h
.eh_frame_hdr:0000000000005421                 db    2
.eh_frame_hdr:0000000000005422                 db    0
.eh_frame_hdr:0000000000005423                 db    0
.eh_frame_hdr:0000000000005424                 db  20h
.eh_frame_hdr:0000000000005425                 db 0C7h
.eh_frame_hdr:0000000000005426                 db 0FFh
.eh_frame_hdr:0000000000005427                 db 0FFh
.eh_frame_hdr:0000000000005428                 db  70h ; p
.eh_frame_hdr:0000000000005429                 db    3
.eh_frame_hdr:000000000000542A                 db    0
.eh_frame_hdr:000000000000542B                 db    0
.eh_frame_hdr:000000000000542C                 db  30h ; 0
.eh_frame_hdr:000000000000542D                 db 0C7h
.eh_frame_hdr:000000000000542E                 db 0FFh
.eh_frame_hdr:000000000000542F                 db 0FFh
.eh_frame_hdr:0000000000005430                 db  84h
.eh_frame_hdr:0000000000005431                 db    3
.eh_frame_hdr:0000000000005432                 db    0
.eh_frame_hdr:0000000000005433                 db    0
.eh_frame_hdr:0000000000005434                 db  40h ; @
.eh_frame_hdr:0000000000005435                 db 0C7h
.eh_frame_hdr:0000000000005436                 db 0FFh
.eh_frame_hdr:0000000000005437                 db 0FFh
.eh_frame_hdr:0000000000005438                 db  98h
.eh_frame_hdr:0000000000005439                 db    3
.eh_frame_hdr:000000000000543A                 db    0
.eh_frame_hdr:000000000000543B                 db    0
.eh_frame_hdr:000000000000543C                 db 0F0h
.eh_frame_hdr:000000000000543D                 db 0C7h
.eh_frame_hdr:000000000000543E                 db 0FFh
.eh_frame_hdr:000000000000543F                 db 0FFh
.eh_frame_hdr:0000000000005440                 db 0C8h
.eh_frame_hdr:0000000000005441                 db    3
.eh_frame_hdr:0000000000005442                 db    0
.eh_frame_hdr:0000000000005443                 db    0
.eh_frame_hdr:0000000000005444                 db  70h ; p
.eh_frame_hdr:0000000000005445                 db 0C8h
.eh_frame_hdr:0000000000005446                 db 0FFh
.eh_frame_hdr:0000000000005447                 db 0FFh
.eh_frame_hdr:0000000000005448                 db  18h
.eh_frame_hdr:0000000000005449                 db    4
.eh_frame_hdr:000000000000544A                 db    0
.eh_frame_hdr:000000000000544B                 db    0
.eh_frame_hdr:000000000000544C                 db 0B0h
.eh_frame_hdr:000000000000544D                 db 0C9h
.eh_frame_hdr:000000000000544E                 db 0FFh
.eh_frame_hdr:000000000000544F                 db 0FFh
.eh_frame_hdr:0000000000005450                 db  54h ; T
.eh_frame_hdr:0000000000005451                 db    4
.eh_frame_hdr:0000000000005452                 db    0
.eh_frame_hdr:0000000000005453                 db    0
.eh_frame_hdr:0000000000005454                 db 0F0h
.eh_frame_hdr:0000000000005455                 db 0CAh
.eh_frame_hdr:0000000000005456                 db 0FFh
.eh_frame_hdr:0000000000005457                 db 0FFh
.eh_frame_hdr:0000000000005458                 db 0A0h
.eh_frame_hdr:0000000000005459                 db    4
.eh_frame_hdr:000000000000545A                 db    0
.eh_frame_hdr:000000000000545B                 db    0
.eh_frame_hdr:000000000000545C                 db  90h
.eh_frame_hdr:000000000000545D                 db 0CBh
.eh_frame_hdr:000000000000545E                 db 0FFh
.eh_frame_hdr:000000000000545F                 db 0FFh
.eh_frame_hdr:0000000000005460                 db 0C0h
.eh_frame_hdr:0000000000005461                 db    4
.eh_frame_hdr:0000000000005462                 db    0
.eh_frame_hdr:0000000000005463                 db    0
.eh_frame_hdr:0000000000005464                 db  80h
.eh_frame_hdr:0000000000005465                 db 0CCh
.eh_frame_hdr:0000000000005466                 db 0FFh
.eh_frame_hdr:0000000000005467                 db 0FFh
.eh_frame_hdr:0000000000005468                 db    4
.eh_frame_hdr:0000000000005469                 db    5
.eh_frame_hdr:000000000000546A                 db    0
.eh_frame_hdr:000000000000546B                 db    0
.eh_frame_hdr:000000000000546C                 db 0C0h
.eh_frame_hdr:000000000000546D                 db 0DEh
.eh_frame_hdr:000000000000546E                 db 0FFh
.eh_frame_hdr:000000000000546F                 db 0FFh
.eh_frame_hdr:0000000000005470                 db  7Ch ; |
.eh_frame_hdr:0000000000005471                 db    5
.eh_frame_hdr:0000000000005472                 db    0
.eh_frame_hdr:0000000000005473                 db    0
.eh_frame_hdr:0000000000005474                 db  70h ; p
.eh_frame_hdr:0000000000005475                 db 0E0h
.eh_frame_hdr:0000000000005476                 db 0FFh
.eh_frame_hdr:0000000000005477                 db 0FFh
.eh_frame_hdr:0000000000005478                 db 0E8h
.eh_frame_hdr:0000000000005479                 db    5
.eh_frame_hdr:000000000000547A                 db    0
.eh_frame_hdr:000000000000547B                 db    0
.eh_frame_hdr:000000000000547C                 db 0B0h
.eh_frame_hdr:000000000000547D                 db 0E0h
.eh_frame_hdr:000000000000547E                 db 0FFh
.eh_frame_hdr:000000000000547F                 db 0FFh
.eh_frame_hdr:0000000000005480                 db  14h
.eh_frame_hdr:0000000000005481                 db    6
.eh_frame_hdr:0000000000005482                 db    0
.eh_frame_hdr:0000000000005483                 db    0
.eh_frame_hdr:0000000000005484                 db 0D0h
.eh_frame_hdr:0000000000005485                 db 0E0h
.eh_frame_hdr:0000000000005486                 db 0FFh
.eh_frame_hdr:0000000000005487                 db 0FFh
.eh_frame_hdr:0000000000005488                 db  28h ; (
.eh_frame_hdr:0000000000005489                 db    6
.eh_frame_hdr:000000000000548A                 db    0
.eh_frame_hdr:000000000000548B                 db    0
.eh_frame_hdr:000000000000548C                 db 0F0h
.eh_frame_hdr:000000000000548D                 db 0E0h
.eh_frame_hdr:000000000000548E                 db 0FFh
.eh_frame_hdr:000000000000548F                 db 0FFh
.eh_frame_hdr:0000000000005490                 db  3Ch ; <
.eh_frame_hdr:0000000000005491                 db    6
.eh_frame_hdr:0000000000005492                 db    0
.eh_frame_hdr:0000000000005493                 db    0
.eh_frame_hdr:0000000000005494                 db  30h ; 0
.eh_frame_hdr:0000000000005495                 db 0E1h
.eh_frame_hdr:0000000000005496                 db 0FFh
.eh_frame_hdr:0000000000005497                 db 0FFh
.eh_frame_hdr:0000000000005498                 db  50h ; P
.eh_frame_hdr:0000000000005499                 db    6
.eh_frame_hdr:000000000000549A                 db    0
.eh_frame_hdr:000000000000549B                 db    0
.eh_frame_hdr:000000000000549C                 db  50h ; P
.eh_frame_hdr:000000000000549D                 db 0E1h
.eh_frame_hdr:000000000000549E                 db 0FFh
.eh_frame_hdr:000000000000549F                 db 0FFh
.eh_frame_hdr:00000000000054A0                 db  64h ; d
.eh_frame_hdr:00000000000054A1                 db    6
.eh_frame_hdr:00000000000054A2                 db    0
.eh_frame_hdr:00000000000054A3                 db    0
.eh_frame_hdr:00000000000054A4                 db  80h
.eh_frame_hdr:00000000000054A5                 db 0E1h
.eh_frame_hdr:00000000000054A6                 db 0FFh
.eh_frame_hdr:00000000000054A7                 db 0FFh
.eh_frame_hdr:00000000000054A8                 db  78h ; x
.eh_frame_hdr:00000000000054A9                 db    6
.eh_frame_hdr:00000000000054AA                 db    0
.eh_frame_hdr:00000000000054AB                 db    0
.eh_frame_hdr:00000000000054AC                 db    0
.eh_frame_hdr:00000000000054AD                 db 0E2h
.eh_frame_hdr:00000000000054AE                 db 0FFh
.eh_frame_hdr:00000000000054AF                 db 0FFh
.eh_frame_hdr:00000000000054B0                 db 0CCh
.eh_frame_hdr:00000000000054B1                 db    6
.eh_frame_hdr:00000000000054B2                 db    0
.eh_frame_hdr:00000000000054B3                 db    0
.eh_frame_hdr:00000000000054B4                 db 0F0h
.eh_frame_hdr:00000000000054B5                 db 0E2h
.eh_frame_hdr:00000000000054B6                 db 0FFh
.eh_frame_hdr:00000000000054B7                 db 0FFh
.eh_frame_hdr:00000000000054B8                 db  38h ; 8
.eh_frame_hdr:00000000000054B9                 db    7
.eh_frame_hdr:00000000000054BA                 db    0
.eh_frame_hdr:00000000000054BB                 db    0
.eh_frame_hdr:00000000000054BC                 db    0
.eh_frame_hdr:00000000000054BD                 db 0E3h
.eh_frame_hdr:00000000000054BE                 db 0FFh
.eh_frame_hdr:00000000000054BF                 db 0FFh
.eh_frame_hdr:00000000000054C0                 db  4Ch ; L
.eh_frame_hdr:00000000000054C1                 db    7
.eh_frame_hdr:00000000000054C2                 db    0
.eh_frame_hdr:00000000000054C3                 db    0
.eh_frame_hdr:00000000000054C4                 db 0A0h
.eh_frame_hdr:00000000000054C5                 db 0E3h
.eh_frame_hdr:00000000000054C6                 db 0FFh
.eh_frame_hdr:00000000000054C7                 db 0FFh
.eh_frame_hdr:00000000000054C8                 db  78h ; x
.eh_frame_hdr:00000000000054C9                 db    7
.eh_frame_hdr:00000000000054CA                 db    0
.eh_frame_hdr:00000000000054CB                 db    0
.eh_frame_hdr:00000000000054CC                 db 0C0h
.eh_frame_hdr:00000000000054CD                 db 0E3h
.eh_frame_hdr:00000000000054CE                 db 0FFh
.eh_frame_hdr:00000000000054CF                 db 0FFh
.eh_frame_hdr:00000000000054D0                 db  8Ch
.eh_frame_hdr:00000000000054D1                 db    7
.eh_frame_hdr:00000000000054D2                 db    0
.eh_frame_hdr:00000000000054D3                 db    0
.eh_frame_hdr:00000000000054D4                 db 0D0h
.eh_frame_hdr:00000000000054D5                 db 0E3h
.eh_frame_hdr:00000000000054D6                 db 0FFh
.eh_frame_hdr:00000000000054D7                 db 0FFh
.eh_frame_hdr:00000000000054D8                 db 0A0h
.eh_frame_hdr:00000000000054D9                 db    7
.eh_frame_hdr:00000000000054DA                 db    0
.eh_frame_hdr:00000000000054DB                 db    0
.eh_frame_hdr:00000000000054DC                 db 0F0h
.eh_frame_hdr:00000000000054DD                 db 0E3h
.eh_frame_hdr:00000000000054DE                 db 0FFh
.eh_frame_hdr:00000000000054DF                 db 0FFh
.eh_frame_hdr:00000000000054E0                 db 0B4h
.eh_frame_hdr:00000000000054E1                 db    7
.eh_frame_hdr:00000000000054E2                 db    0
.eh_frame_hdr:00000000000054E3                 db    0
.eh_frame_hdr:00000000000054E4                 db  10h
.eh_frame_hdr:00000000000054E5                 db 0E4h
.eh_frame_hdr:00000000000054E6                 db 0FFh
.eh_frame_hdr:00000000000054E7                 db 0FFh
.eh_frame_hdr:00000000000054E8                 db 0C8h
.eh_frame_hdr:00000000000054E9                 db    7
.eh_frame_hdr:00000000000054EA                 db    0
.eh_frame_hdr:00000000000054EB                 db    0
.eh_frame_hdr:00000000000054EC                 db 0A0h
.eh_frame_hdr:00000000000054ED                 db 0E4h
.eh_frame_hdr:00000000000054EE                 db 0FFh
.eh_frame_hdr:00000000000054EF                 db 0FFh
.eh_frame_hdr:00000000000054F0                 db 0E4h
.eh_frame_hdr:00000000000054F1                 db    7
.eh_frame_hdr:00000000000054F2                 db    0
.eh_frame_hdr:00000000000054F3                 db    0
.eh_frame_hdr:00000000000054F4                 db  30h ; 0
.eh_frame_hdr:00000000000054F5                 db 0E5h
.eh_frame_hdr:00000000000054F6                 db 0FFh
.eh_frame_hdr:00000000000054F7                 db 0FFh
.eh_frame_hdr:00000000000054F8                 db    0
.eh_frame_hdr:00000000000054F9                 db    8
.eh_frame_hdr:00000000000054FA                 db    0
.eh_frame_hdr:00000000000054FB                 db    0
.eh_frame_hdr:00000000000054FC                 db  40h ; @
.eh_frame_hdr:00000000000054FD                 db 0E5h
.eh_frame_hdr:00000000000054FE                 db 0FFh
.eh_frame_hdr:00000000000054FF                 db 0FFh
.eh_frame_hdr:0000000000005500                 db  14h
.eh_frame_hdr:0000000000005501                 db    8
.eh_frame_hdr:0000000000005502                 db    0
.eh_frame_hdr:0000000000005503                 db    0
.eh_frame_hdr:0000000000005504                 db  50h ; P
.eh_frame_hdr:0000000000005505                 db 0E5h
.eh_frame_hdr:0000000000005506                 db 0FFh
.eh_frame_hdr:0000000000005507                 db 0FFh
.eh_frame_hdr:0000000000005508                 db  28h ; (
.eh_frame_hdr:0000000000005509                 db    8
.eh_frame_hdr:000000000000550A                 db    0
.eh_frame_hdr:000000000000550B                 db    0
.eh_frame_hdr:000000000000550C                 db 0F0h
.eh_frame_hdr:000000000000550D                 db 0E5h
.eh_frame_hdr:000000000000550E                 db 0FFh
.eh_frame_hdr:000000000000550F                 db 0FFh
.eh_frame_hdr:0000000000005510                 db  44h ; D
.eh_frame_hdr:0000000000005511                 db    8
.eh_frame_hdr:0000000000005512                 db    0
.eh_frame_hdr:0000000000005513                 db    0
.eh_frame_hdr:0000000000005514                 db    0
.eh_frame_hdr:0000000000005515                 db 0E6h
.eh_frame_hdr:0000000000005516                 db 0FFh
.eh_frame_hdr:0000000000005517                 db 0FFh
.eh_frame_hdr:0000000000005518                 db  58h ; X
.eh_frame_hdr:0000000000005519                 db    8
.eh_frame_hdr:000000000000551A                 db    0
.eh_frame_hdr:000000000000551B                 db    0
.eh_frame_hdr:000000000000551C                 db  20h
.eh_frame_hdr:000000000000551D                 db 0E6h
.eh_frame_hdr:000000000000551E                 db 0FFh
.eh_frame_hdr:000000000000551F                 db 0FFh
.eh_frame_hdr:0000000000005520                 db  6Ch ; l
.eh_frame_hdr:0000000000005521                 db    8
.eh_frame_hdr:0000000000005522                 db    0
.eh_frame_hdr:0000000000005523                 db    0
.eh_frame_hdr:0000000000005524                 db  30h ; 0
.eh_frame_hdr:0000000000005525                 db 0E6h
.eh_frame_hdr:0000000000005526                 db 0FFh
.eh_frame_hdr:0000000000005527                 db 0FFh
.eh_frame_hdr:0000000000005528                 db  80h
.eh_frame_hdr:0000000000005529                 db    8
.eh_frame_hdr:000000000000552A                 db    0
.eh_frame_hdr:000000000000552B                 db    0
.eh_frame_hdr:000000000000552C                 db 0C0h
.eh_frame_hdr:000000000000552D                 db 0E6h
.eh_frame_hdr:000000000000552E                 db 0FFh
.eh_frame_hdr:000000000000552F                 db 0FFh
.eh_frame_hdr:0000000000005530                 db  9Ch
.eh_frame_hdr:0000000000005531                 db    8
.eh_frame_hdr:0000000000005532                 db    0
.eh_frame_hdr:0000000000005533                 db    0
.eh_frame_hdr:0000000000005534                 db  60h ; `
.eh_frame_hdr:0000000000005535                 db 0E7h
.eh_frame_hdr:0000000000005536                 db 0FFh
.eh_frame_hdr:0000000000005537                 db 0FFh
.eh_frame_hdr:0000000000005538                 db 0B8h
.eh_frame_hdr:0000000000005539                 db    8
.eh_frame_hdr:000000000000553A                 db    0
.eh_frame_hdr:000000000000553B                 db    0
.eh_frame_hdr:000000000000553C                 db  70h ; p
.eh_frame_hdr:000000000000553D                 db 0E7h
.eh_frame_hdr:000000000000553E                 db 0FFh
.eh_frame_hdr:000000000000553F                 db 0FFh
.eh_frame_hdr:0000000000005540                 db 0CCh
.eh_frame_hdr:0000000000005541                 db    8
.eh_frame_hdr:0000000000005542                 db    0
.eh_frame_hdr:0000000000005543                 db    0
.eh_frame_hdr:0000000000005544                 db  90h
.eh_frame_hdr:0000000000005545                 db 0E7h
.eh_frame_hdr:0000000000005546                 db 0FFh
.eh_frame_hdr:0000000000005547                 db 0FFh
.eh_frame_hdr:0000000000005548                 db 0E0h
.eh_frame_hdr:0000000000005549                 db    8
.eh_frame_hdr:000000000000554A                 db    0
.eh_frame_hdr:000000000000554B                 db    0
.eh_frame_hdr:000000000000554C                 db 0B0h
.eh_frame_hdr:000000000000554D                 db 0E7h
.eh_frame_hdr:000000000000554E                 db 0FFh
.eh_frame_hdr:000000000000554F                 db 0FFh
.eh_frame_hdr:0000000000005550                 db 0F4h
.eh_frame_hdr:0000000000005551                 db    8
.eh_frame_hdr:0000000000005552                 db    0
.eh_frame_hdr:0000000000005553                 db    0
.eh_frame_hdr:0000000000005554                 db 0C0h
.eh_frame_hdr:0000000000005555                 db 0E7h
.eh_frame_hdr:0000000000005556                 db 0FFh
.eh_frame_hdr:0000000000005557                 db 0FFh
.eh_frame_hdr:0000000000005558                 db    8
.eh_frame_hdr:0000000000005559                 db    9
.eh_frame_hdr:000000000000555A                 db    0
.eh_frame_hdr:000000000000555B                 db    0
.eh_frame_hdr:000000000000555C                 db 0E0h
.eh_frame_hdr:000000000000555D                 db 0E7h
.eh_frame_hdr:000000000000555E                 db 0FFh
.eh_frame_hdr:000000000000555F                 db 0FFh
.eh_frame_hdr:0000000000005560                 db  1Ch
.eh_frame_hdr:0000000000005561                 db    9
.eh_frame_hdr:0000000000005562                 db    0
.eh_frame_hdr:0000000000005563                 db    0
.eh_frame_hdr:0000000000005564                 db    0
.eh_frame_hdr:0000000000005565                 db 0E8h
.eh_frame_hdr:0000000000005566                 db 0FFh
.eh_frame_hdr:0000000000005567                 db 0FFh
.eh_frame_hdr:0000000000005568                 db  30h ; 0
.eh_frame_hdr:0000000000005569                 db    9
.eh_frame_hdr:000000000000556A                 db    0
.eh_frame_hdr:000000000000556B                 db    0
.eh_frame_hdr:000000000000556C                 db  20h
.eh_frame_hdr:000000000000556D                 db 0E8h
.eh_frame_hdr:000000000000556E                 db 0FFh
.eh_frame_hdr:000000000000556F                 db 0FFh
.eh_frame_hdr:0000000000005570                 db  48h ; H
.eh_frame_hdr:0000000000005571                 db    9
.eh_frame_hdr:0000000000005572                 db    0
.eh_frame_hdr:0000000000005573                 db    0
.eh_frame_hdr:0000000000005574                 db  80h
.eh_frame_hdr:0000000000005575                 db 0E8h
.eh_frame_hdr:0000000000005576                 db 0FFh
.eh_frame_hdr:0000000000005577                 db 0FFh
.eh_frame_hdr:0000000000005578                 db  80h
.eh_frame_hdr:0000000000005579                 db    9
.eh_frame_hdr:000000000000557A                 db    0
.eh_frame_hdr:000000000000557B                 db    0
.eh_frame_hdr:000000000000557C                 db 0A0h
.eh_frame_hdr:000000000000557D                 db 0ECh
.eh_frame_hdr:000000000000557E                 db 0FFh
.eh_frame_hdr:000000000000557F                 db 0FFh
.eh_frame_hdr:0000000000005580                 db  94h
.eh_frame_hdr:0000000000005581                 db  0Ah
.eh_frame_hdr:0000000000005582                 db    0
.eh_frame_hdr:0000000000005583                 db    0
.eh_frame_hdr:0000000000005584                 db 0C0h
.eh_frame_hdr:0000000000005585                 db 0ECh
.eh_frame_hdr:0000000000005586                 db 0FFh
.eh_frame_hdr:0000000000005587                 db 0FFh
.eh_frame_hdr:0000000000005588                 db 0A8h
.eh_frame_hdr:0000000000005589                 db  0Ah
.eh_frame_hdr:000000000000558A                 db    0
.eh_frame_hdr:000000000000558B                 db    0
.eh_frame_hdr:000000000000558C                 db  40h ; @
.eh_frame_hdr:000000000000558D                 db 0EDh
.eh_frame_hdr:000000000000558E                 db 0FFh
.eh_frame_hdr:000000000000558F                 db 0FFh
.eh_frame_hdr:0000000000005590                 db 0C4h
.eh_frame_hdr:0000000000005591                 db  0Ah
.eh_frame_hdr:0000000000005592                 db    0
.eh_frame_hdr:0000000000005593                 db    0
.eh_frame_hdr:0000000000005594                 db  20h
.eh_frame_hdr:0000000000005595                 db 0EEh
.eh_frame_hdr:0000000000005596                 db 0FFh
.eh_frame_hdr:0000000000005597                 db 0FFh
.eh_frame_hdr:0000000000005598                 db 0F0h
.eh_frame_hdr:0000000000005599                 db  0Ah
.eh_frame_hdr:000000000000559A                 db    0
.eh_frame_hdr:000000000000559B                 db    0
.eh_frame_hdr:000000000000559C                 db 0A0h
.eh_frame_hdr:000000000000559D                 db 0EEh
.eh_frame_hdr:000000000000559E                 db 0FFh
.eh_frame_hdr:000000000000559F                 db 0FFh
.eh_frame_hdr:00000000000055A0                 db  10h
.eh_frame_hdr:00000000000055A1                 db  0Bh
.eh_frame_hdr:00000000000055A2                 db    0
.eh_frame_hdr:00000000000055A3                 db    0
.eh_frame_hdr:00000000000055A4                 db 0C0h
.eh_frame_hdr:00000000000055A5                 db 0EEh
.eh_frame_hdr:00000000000055A6                 db 0FFh
.eh_frame_hdr:00000000000055A7                 db 0FFh
.eh_frame_hdr:00000000000055A8                 db  2Ch ; ,
.eh_frame_hdr:00000000000055A9                 db  0Bh
.eh_frame_hdr:00000000000055AA                 db    0
.eh_frame_hdr:00000000000055AB                 db    0
.eh_frame_hdr:00000000000055AC                 db 0F0h
.eh_frame_hdr:00000000000055AD                 db 0EEh
.eh_frame_hdr:00000000000055AE                 db 0FFh
.eh_frame_hdr:00000000000055AF                 db 0FFh
.eh_frame_hdr:00000000000055B0                 db  40h ; @
.eh_frame_hdr:00000000000055B1                 db  0Bh
.eh_frame_hdr:00000000000055B2                 db    0
.eh_frame_hdr:00000000000055B3                 db    0
.eh_frame_hdr:00000000000055B4                 db    0
.eh_frame_hdr:00000000000055B5                 db 0EFh
.eh_frame_hdr:00000000000055B6                 db 0FFh
.eh_frame_hdr:00000000000055B7                 db 0FFh
.eh_frame_hdr:00000000000055B8                 db  54h ; T
.eh_frame_hdr:00000000000055B9                 db  0Bh
.eh_frame_hdr:00000000000055BA                 db    0
.eh_frame_hdr:00000000000055BB                 db    0
.eh_frame_hdr:00000000000055BC                 db  40h ; @
.eh_frame_hdr:00000000000055BD                 db 0EFh
.eh_frame_hdr:00000000000055BE                 db 0FFh
.eh_frame_hdr:00000000000055BF                 db 0FFh
.eh_frame_hdr:00000000000055C0                 db  78h ; x
.eh_frame_hdr:00000000000055C1                 db  0Bh
.eh_frame_hdr:00000000000055C2                 db    0
.eh_frame_hdr:00000000000055C3                 db    0
.eh_frame_hdr:00000000000055C4                 db  70h ; p
.eh_frame_hdr:00000000000055C5                 db 0EFh
.eh_frame_hdr:00000000000055C6                 db 0FFh
.eh_frame_hdr:00000000000055C7                 db 0FFh
.eh_frame_hdr:00000000000055C8                 db  8Ch
.eh_frame_hdr:00000000000055C9                 db  0Bh
.eh_frame_hdr:00000000000055CA                 db    0
.eh_frame_hdr:00000000000055CB                 db    0
.eh_frame_hdr:00000000000055CC                 db    0
.eh_frame_hdr:00000000000055CD                 db 0F0h
.eh_frame_hdr:00000000000055CE                 db 0FFh
.eh_frame_hdr:00000000000055CF                 db 0FFh
.eh_frame_hdr:00000000000055D0                 db 0A4h
.eh_frame_hdr:00000000000055D1                 db  0Bh
.eh_frame_hdr:00000000000055D2                 db    0
.eh_frame_hdr:00000000000055D3                 db    0
.eh_frame_hdr:00000000000055D4                 db  50h ; P
.eh_frame_hdr:00000000000055D5                 db 0F0h
.eh_frame_hdr:00000000000055D6                 db 0FFh
.eh_frame_hdr:00000000000055D7                 db 0FFh
.eh_frame_hdr:00000000000055D8                 db 0BCh
.eh_frame_hdr:00000000000055D9                 db  0Bh
.eh_frame_hdr:00000000000055DA                 db    0
.eh_frame_hdr:00000000000055DB                 db    0
.eh_frame_hdr:00000000000055DC                 db  70h ; p
.eh_frame_hdr:00000000000055DD                 db 0F0h
.eh_frame_hdr:00000000000055DE                 db 0FFh
.eh_frame_hdr:00000000000055DF                 db 0FFh
.eh_frame_hdr:00000000000055E0                 db 0D8h
.eh_frame_hdr:00000000000055E1                 db  0Bh
.eh_frame_hdr:00000000000055E2                 db    0
.eh_frame_hdr:00000000000055E3                 db    0
.eh_frame_hdr:00000000000055E4                 db 0A0h
.eh_frame_hdr:00000000000055E5                 db 0F0h
.eh_frame_hdr:00000000000055E6                 db 0FFh
.eh_frame_hdr:00000000000055E7                 db 0FFh
.eh_frame_hdr:00000000000055E8                 db 0F4h
.eh_frame_hdr:00000000000055E9                 db  0Bh
.eh_frame_hdr:00000000000055EA                 db    0
.eh_frame_hdr:00000000000055EB                 db    0
.eh_frame_hdr:00000000000055EC                 db 0D0h
.eh_frame_hdr:00000000000055ED                 db 0F0h
.eh_frame_hdr:00000000000055EE                 db 0FFh
.eh_frame_hdr:00000000000055EF                 db 0FFh
.eh_frame_hdr:00000000000055F0                 db  1Ch
.eh_frame_hdr:00000000000055F1                 db  0Ch
.eh_frame_hdr:00000000000055F2                 db    0
.eh_frame_hdr:00000000000055F3                 db    0
.eh_frame_hdr:00000000000055F4                 db 0F0h
.eh_frame_hdr:00000000000055F5                 db 0F0h
.eh_frame_hdr:00000000000055F6                 db 0FFh
.eh_frame_hdr:00000000000055F7                 db 0FFh
.eh_frame_hdr:00000000000055F8                 db  38h ; 8
.eh_frame_hdr:00000000000055F9                 db  0Ch
.eh_frame_hdr:00000000000055FA                 db    0
.eh_frame_hdr:00000000000055FB                 db    0
.eh_frame_hdr:00000000000055FC                 db  30h ; 0
.eh_frame_hdr:00000000000055FD                 db 0F1h
.eh_frame_hdr:00000000000055FE                 db 0FFh
.eh_frame_hdr:00000000000055FF                 db 0FFh
.eh_frame_hdr:0000000000005600                 db  50h ; P
.eh_frame_hdr:0000000000005601                 db  0Ch
.eh_frame_hdr:0000000000005602                 db    0
.eh_frame_hdr:0000000000005603                 db    0
.eh_frame_hdr:0000000000005604                 db 0C0h
.eh_frame_hdr:0000000000005605                 db 0F1h
.eh_frame_hdr:0000000000005606                 db 0FFh
.eh_frame_hdr:0000000000005607                 db 0FFh
.eh_frame_hdr:0000000000005608                 db  90h
.eh_frame_hdr:0000000000005609                 db  0Ch
.eh_frame_hdr:000000000000560A                 db    0
.eh_frame_hdr:000000000000560B                 db    0
.eh_frame_hdr:000000000000560C                 db  40h ; @
.eh_frame_hdr:000000000000560D                 db 0F2h
.eh_frame_hdr:000000000000560E                 db 0FFh
.eh_frame_hdr:000000000000560F                 db 0FFh
.eh_frame_hdr:0000000000005610                 db 0E0h
.eh_frame_hdr:0000000000005611                 db  0Ch
.eh_frame_hdr:0000000000005612                 db    0
.eh_frame_hdr:0000000000005613                 db    0
.eh_frame_hdr:0000000000005614                 db 0A0h
.eh_frame_hdr:0000000000005615                 db 0F2h
.eh_frame_hdr:0000000000005616                 db 0FFh
.eh_frame_hdr:0000000000005617                 db 0FFh
.eh_frame_hdr:0000000000005618                 db    0
.eh_frame_hdr:0000000000005619                 db  0Dh
.eh_frame_hdr:000000000000561A                 db    0
.eh_frame_hdr:000000000000561B                 db    0
.eh_frame_hdr:000000000000561C                 db 0E0h
.eh_frame_hdr:000000000000561D                 db 0F2h
.eh_frame_hdr:000000000000561E                 db 0FFh
.eh_frame_hdr:000000000000561F                 db 0FFh
.eh_frame_hdr:0000000000005620                 db  20h
.eh_frame_hdr:0000000000005621                 db  0Dh
.eh_frame_hdr:0000000000005622                 db    0
.eh_frame_hdr:0000000000005623                 db    0
.eh_frame_hdr:0000000000005624                 db  60h ; `
.eh_frame_hdr:0000000000005625                 db 0F3h
.eh_frame_hdr:0000000000005626                 db 0FFh
.eh_frame_hdr:0000000000005627                 db 0FFh
.eh_frame_hdr:0000000000005628                 db  58h ; X
.eh_frame_hdr:0000000000005629                 db  0Dh
.eh_frame_hdr:000000000000562A                 db    0
.eh_frame_hdr:000000000000562B                 db    0
.eh_frame_hdr:000000000000562C                 db 0A0h
.eh_frame_hdr:000000000000562D                 db 0F3h
.eh_frame_hdr:000000000000562E                 db 0FFh
.eh_frame_hdr:000000000000562F                 db 0FFh
.eh_frame_hdr:0000000000005630                 db  78h ; x
.eh_frame_hdr:0000000000005631                 db  0Dh
.eh_frame_hdr:0000000000005632                 db    0
.eh_frame_hdr:0000000000005633                 db    0
.eh_frame_hdr:0000000000005634                 db    0
.eh_frame_hdr:0000000000005635                 db 0F4h
.eh_frame_hdr:0000000000005636                 db 0FFh
.eh_frame_hdr:0000000000005637                 db 0FFh
.eh_frame_hdr:0000000000005638                 db 0A8h
.eh_frame_hdr:0000000000005639                 db  0Dh
.eh_frame_hdr:000000000000563A                 db    0
.eh_frame_hdr:000000000000563B                 db    0
.eh_frame_hdr:000000000000563C                 db  70h ; p
.eh_frame_hdr:000000000000563D                 db 0F4h
.eh_frame_hdr:000000000000563E                 db 0FFh
.eh_frame_hdr:000000000000563F                 db 0FFh
.eh_frame_hdr:0000000000005640                 db 0F0h
.eh_frame_hdr:0000000000005641                 db  0Dh
.eh_frame_hdr:0000000000005642                 db    0
.eh_frame_hdr:0000000000005643                 db    0
.eh_frame_hdr:0000000000005644                 db  80h
.eh_frame_hdr:0000000000005645                 db 0F4h
.eh_frame_hdr:0000000000005646                 db 0FFh
.eh_frame_hdr:0000000000005647                 db 0FFh
.eh_frame_hdr:0000000000005648                 db    8
.eh_frame_hdr:0000000000005649                 db  0Eh
.eh_frame_hdr:000000000000564A                 db    0
.eh_frame_hdr:000000000000564B                 db    0
.eh_frame_hdr:000000000000564B _eh_frame_hdr   ends
.eh_frame_hdr:000000000000564B
LOAD:000000000000564C ; ===========================================================================
LOAD:000000000000564C
LOAD:000000000000564C ; Segment type: Pure code
LOAD:000000000000564C ; Segment permissions: Read/Execute
LOAD:000000000000564C LOAD            segment byte public 'CODE' use64
LOAD:000000000000564C                 assume cs:LOAD
LOAD:000000000000564C                 ;org 564Ch
LOAD:000000000000564C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000564C                 align 10h
LOAD:000000000000564C LOAD            ends
LOAD:000000000000564C
.eh_frame:0000000000005650 ; ===========================================================================
.eh_frame:0000000000005650
.eh_frame:0000000000005650 ; Segment type: Pure data
.eh_frame:0000000000005650 ; Segment permissions: Read
.eh_frame:0000000000005650 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000005650                 assume cs:_eh_frame
.eh_frame:0000000000005650                 ;org 5650h
.eh_frame:0000000000005650                 db  14h
.eh_frame:0000000000005651                 db    0
.eh_frame:0000000000005652                 db    0
.eh_frame:0000000000005653                 db    0
.eh_frame:0000000000005654                 db    0
.eh_frame:0000000000005655                 db    0
.eh_frame:0000000000005656                 db    0
.eh_frame:0000000000005657                 db    0
.eh_frame:0000000000005658                 db    1
.eh_frame:0000000000005659                 db  7Ah ; z
.eh_frame:000000000000565A                 db  52h ; R
.eh_frame:000000000000565B                 db    0
.eh_frame:000000000000565C                 db    1
.eh_frame:000000000000565D                 db  78h ; x
.eh_frame:000000000000565E                 db  10h
.eh_frame:000000000000565F                 db    1
.eh_frame:0000000000005660                 db  1Bh
.eh_frame:0000000000005661                 db  0Ch
.eh_frame:0000000000005662                 db    7
.eh_frame:0000000000005663                 db    8
.eh_frame:0000000000005664                 db  90h
.eh_frame:0000000000005665                 db    1
.eh_frame:0000000000005666                 db    7
.eh_frame:0000000000005667                 db  10h
.eh_frame:0000000000005668                 db  14h
.eh_frame:0000000000005669                 db    0
.eh_frame:000000000000566A                 db    0
.eh_frame:000000000000566B                 db    0
.eh_frame:000000000000566C                 db  1Ch
.eh_frame:000000000000566D                 db    0
.eh_frame:000000000000566E                 db    0
.eh_frame:000000000000566F                 db    0
.eh_frame:0000000000005670                 db  40h ; @
.eh_frame:0000000000005671                 db 0C0h
.eh_frame:0000000000005672                 db 0FFh
.eh_frame:0000000000005673                 db 0FFh
.eh_frame:0000000000005674                 db  2Bh ; +
.eh_frame:0000000000005675                 db    0
.eh_frame:0000000000005676                 db    0
.eh_frame:0000000000005677                 db    0
.eh_frame:0000000000005678                 db    0
.eh_frame:0000000000005679                 db    0
.eh_frame:000000000000567A                 db    0
.eh_frame:000000000000567B                 db    0
.eh_frame:000000000000567C                 db    0
.eh_frame:000000000000567D                 db    0
.eh_frame:000000000000567E                 db    0
.eh_frame:000000000000567F                 db    0
.eh_frame:0000000000005680                 db  14h
.eh_frame:0000000000005681                 db    0
.eh_frame:0000000000005682                 db    0
.eh_frame:0000000000005683                 db    0
.eh_frame:0000000000005684                 db    0
.eh_frame:0000000000005685                 db    0
.eh_frame:0000000000005686                 db    0
.eh_frame:0000000000005687                 db    0
.eh_frame:0000000000005688                 db    1
.eh_frame:0000000000005689                 db  7Ah ; z
.eh_frame:000000000000568A                 db  52h ; R
.eh_frame:000000000000568B                 db    0
.eh_frame:000000000000568C                 db    1
.eh_frame:000000000000568D                 db  78h ; x
.eh_frame:000000000000568E                 db  10h
.eh_frame:000000000000568F                 db    1
.eh_frame:0000000000005690                 db  1Bh
.eh_frame:0000000000005691                 db  0Ch
.eh_frame:0000000000005692                 db    7
.eh_frame:0000000000005693                 db    8
.eh_frame:0000000000005694                 db  90h
.eh_frame:0000000000005695                 db    1
.eh_frame:0000000000005696                 db    0
.eh_frame:0000000000005697                 db    0
.eh_frame:0000000000005698                 db  24h ; $
.eh_frame:0000000000005699                 db    0
.eh_frame:000000000000569A                 db    0
.eh_frame:000000000000569B                 db    0
.eh_frame:000000000000569C                 db  1Ch
.eh_frame:000000000000569D                 db    0
.eh_frame:000000000000569E                 db    0
.eh_frame:000000000000569F                 db    0
.eh_frame:00000000000056A0                 db  30h ; 0
.eh_frame:00000000000056A1                 db 0BBh
.eh_frame:00000000000056A2                 db 0FFh
.eh_frame:00000000000056A3                 db 0FFh
.eh_frame:00000000000056A4                 db  90h
.eh_frame:00000000000056A5                 db    2
.eh_frame:00000000000056A6                 db    0
.eh_frame:00000000000056A7                 db    0
.eh_frame:00000000000056A8                 db    0
.eh_frame:00000000000056A9                 db  0Eh
.eh_frame:00000000000056AA                 db  10h
.eh_frame:00000000000056AB                 db  46h ; F
.eh_frame:00000000000056AC                 db  0Eh
.eh_frame:00000000000056AD                 db  18h
.eh_frame:00000000000056AE                 db  4Ah ; J
.eh_frame:00000000000056AF                 db  0Fh
.eh_frame:00000000000056B0                 db  0Bh
.eh_frame:00000000000056B1                 db  77h ; w
.eh_frame:00000000000056B2                 db    8
.eh_frame:00000000000056B3                 db  80h
.eh_frame:00000000000056B4                 db    0
.eh_frame:00000000000056B5                 db  3Fh ; ?
.eh_frame:00000000000056B6                 db  1Ah
.eh_frame:00000000000056B7                 db  3Bh ; ;
.eh_frame:00000000000056B8                 db  2Ah ; *
.eh_frame:00000000000056B9                 db  33h ; 3
.eh_frame:00000000000056BA                 db  24h ; $
.eh_frame:00000000000056BB                 db  22h ; "
.eh_frame:00000000000056BC                 db    0
.eh_frame:00000000000056BD                 db    0
.eh_frame:00000000000056BE                 db    0
.eh_frame:00000000000056BF                 db    0
.eh_frame:00000000000056C0                 db  14h
.eh_frame:00000000000056C1                 db    0
.eh_frame:00000000000056C2                 db    0
.eh_frame:00000000000056C3                 db    0
.eh_frame:00000000000056C4                 db  44h ; D
.eh_frame:00000000000056C5                 db    0
.eh_frame:00000000000056C6                 db    0
.eh_frame:00000000000056C7                 db    0
.eh_frame:00000000000056C8                 db  98h
.eh_frame:00000000000056C9                 db 0BDh
.eh_frame:00000000000056CA                 db 0FFh
.eh_frame:00000000000056CB                 db 0FFh
.eh_frame:00000000000056CC                 db    8
.eh_frame:00000000000056CD                 db    0
.eh_frame:00000000000056CE                 db    0
.eh_frame:00000000000056CF                 db    0
.eh_frame:00000000000056D0                 db    0
.eh_frame:00000000000056D1                 db    0
.eh_frame:00000000000056D2                 db    0
.eh_frame:00000000000056D3                 db    0
.eh_frame:00000000000056D4                 db    0
.eh_frame:00000000000056D5                 db    0
.eh_frame:00000000000056D6                 db    0
.eh_frame:00000000000056D7                 db    0
.eh_frame:00000000000056D8                 db  28h ; (
.eh_frame:00000000000056D9                 db    0
.eh_frame:00000000000056DA                 db    0
.eh_frame:00000000000056DB                 db    0
.eh_frame:00000000000056DC                 db  5Ch ; \
.eh_frame:00000000000056DD                 db    0
.eh_frame:00000000000056DE                 db    0
.eh_frame:00000000000056DF                 db    0
.eh_frame:00000000000056E0                 db 0E0h
.eh_frame:00000000000056E1                 db 0C0h
.eh_frame:00000000000056E2                 db 0FFh
.eh_frame:00000000000056E3                 db 0FFh
.eh_frame:00000000000056E4                 db  42h ; B
.eh_frame:00000000000056E5                 db    3
.eh_frame:00000000000056E6                 db    0
.eh_frame:00000000000056E7                 db    0
.eh_frame:00000000000056E8                 db    0
.eh_frame:00000000000056E9                 db  42h ; B
.eh_frame:00000000000056EA                 db  0Eh
.eh_frame:00000000000056EB                 db  10h
.eh_frame:00000000000056EC                 db  8Dh
.eh_frame:00000000000056ED                 db    2
.eh_frame:00000000000056EE                 db  42h ; B
.eh_frame:00000000000056EF                 db  0Eh
.eh_frame:00000000000056F0                 db  18h
.eh_frame:00000000000056F1                 db  8Ch
.eh_frame:00000000000056F2                 db    3
.eh_frame:00000000000056F3                 db  46h ; F
.eh_frame:00000000000056F4                 db  0Eh
.eh_frame:00000000000056F5                 db  20h
.eh_frame:00000000000056F6                 db  86h
.eh_frame:00000000000056F7                 db    4
.eh_frame:00000000000056F8                 db  41h ; A
.eh_frame:00000000000056F9                 db  0Eh
.eh_frame:00000000000056FA                 db  28h ; (
.eh_frame:00000000000056FB                 db  83h
.eh_frame:00000000000056FC                 db    5
.eh_frame:00000000000056FD                 db  49h ; I
.eh_frame:00000000000056FE                 db  0Eh
.eh_frame:00000000000056FF                 db 0B0h
.eh_frame:0000000000005700                 db    1
.eh_frame:0000000000005701                 db    0
.eh_frame:0000000000005702                 db    0
.eh_frame:0000000000005703                 db    0
.eh_frame:0000000000005704                 db  58h ; X
.eh_frame:0000000000005705                 db    0
.eh_frame:0000000000005706                 db    0
.eh_frame:0000000000005707                 db    0
.eh_frame:0000000000005708                 db  88h
.eh_frame:0000000000005709                 db    0
.eh_frame:000000000000570A                 db    0
.eh_frame:000000000000570B                 db    0
.eh_frame:000000000000570C                 db  64h ; d
.eh_frame:000000000000570D                 db 0BDh
.eh_frame:000000000000570E                 db 0FFh
.eh_frame:000000000000570F                 db 0FFh
.eh_frame:0000000000005710                 db  40h ; @
.eh_frame:0000000000005711                 db    2
.eh_frame:0000000000005712                 db    0
.eh_frame:0000000000005713                 db    0
.eh_frame:0000000000005714                 db    0
.eh_frame:0000000000005715                 db  42h ; B
.eh_frame:0000000000005716                 db  0Eh
.eh_frame:0000000000005717                 db  10h
.eh_frame:0000000000005718                 db  8Fh
.eh_frame:0000000000005719                 db    2
.eh_frame:000000000000571A                 db  42h ; B
.eh_frame:000000000000571B                 db  0Eh
.eh_frame:000000000000571C                 db  18h
.eh_frame:000000000000571D                 db  8Eh
.eh_frame:000000000000571E                 db    3
.eh_frame:000000000000571F                 db  42h ; B
.eh_frame:0000000000005720                 db  0Eh
.eh_frame:0000000000005721                 db  20h
.eh_frame:0000000000005722                 db  8Dh
.eh_frame:0000000000005723                 db    4
.eh_frame:0000000000005724                 db  42h ; B
.eh_frame:0000000000005725                 db  0Eh
.eh_frame:0000000000005726                 db  28h ; (
.eh_frame:0000000000005727                 db  8Ch
.eh_frame:0000000000005728                 db    5
.eh_frame:0000000000005729                 db  44h ; D
.eh_frame:000000000000572A                 db  0Eh
.eh_frame:000000000000572B                 db  30h ; 0
.eh_frame:000000000000572C                 db  86h
.eh_frame:000000000000572D                 db    6
.eh_frame:000000000000572E                 db  41h ; A
.eh_frame:000000000000572F                 db  0Eh
.eh_frame:0000000000005730                 db  38h ; 8
.eh_frame:0000000000005731                 db  83h
.eh_frame:0000000000005732                 db    7
.eh_frame:0000000000005733                 db  47h ; G
.eh_frame:0000000000005734                 db  0Eh
.eh_frame:0000000000005735                 db  50h ; P
.eh_frame:0000000000005736                 db    2
.eh_frame:0000000000005737                 db  4Fh ; O
.eh_frame:0000000000005738                 db  0Eh
.eh_frame:0000000000005739                 db  58h ; X
.eh_frame:000000000000573A                 db  49h ; I
.eh_frame:000000000000573B                 db  0Eh
.eh_frame:000000000000573C                 db  60h ; `
.eh_frame:000000000000573D                 db  4Fh ; O
.eh_frame:000000000000573E                 db  0Eh
.eh_frame:000000000000573F                 db  68h ; h
.eh_frame:0000000000005740                 db  54h ; T
.eh_frame:0000000000005741                 db  0Eh
.eh_frame:0000000000005742                 db  70h ; p
.eh_frame:0000000000005743                 db  65h ; e
.eh_frame:0000000000005744                 db  0Eh
.eh_frame:0000000000005745                 db  50h ; P
.eh_frame:0000000000005746                 db    3
.eh_frame:0000000000005747                 db  64h ; d
.eh_frame:0000000000005748                 db    1
.eh_frame:0000000000005749                 db  0Ah
.eh_frame:000000000000574A                 db  0Eh
.eh_frame:000000000000574B                 db  38h ; 8
.eh_frame:000000000000574C                 db  46h ; F
.eh_frame:000000000000574D                 db  0Eh
.eh_frame:000000000000574E                 db  30h ; 0
.eh_frame:000000000000574F                 db  41h ; A
.eh_frame:0000000000005750                 db  0Eh
.eh_frame:0000000000005751                 db  28h ; (
.eh_frame:0000000000005752                 db  42h ; B
.eh_frame:0000000000005753                 db  0Eh
.eh_frame:0000000000005754                 db  20h
.eh_frame:0000000000005755                 db  42h ; B
.eh_frame:0000000000005756                 db  0Eh
.eh_frame:0000000000005757                 db  18h
.eh_frame:0000000000005758                 db  42h ; B
.eh_frame:0000000000005759                 db  0Eh
.eh_frame:000000000000575A                 db  10h
.eh_frame:000000000000575B                 db  42h ; B
.eh_frame:000000000000575C                 db  0Eh
.eh_frame:000000000000575D                 db    8
.eh_frame:000000000000575E                 db  49h ; I
.eh_frame:000000000000575F                 db  0Bh
.eh_frame:0000000000005760                 db  10h
.eh_frame:0000000000005761                 db    0
.eh_frame:0000000000005762                 db    0
.eh_frame:0000000000005763                 db    0
.eh_frame:0000000000005764                 db 0E4h
.eh_frame:0000000000005765                 db    0
.eh_frame:0000000000005766                 db    0
.eh_frame:0000000000005767                 db    0
.eh_frame:0000000000005768                 db 0A8h
.eh_frame:0000000000005769                 db 0C3h
.eh_frame:000000000000576A                 db 0FFh
.eh_frame:000000000000576B                 db 0FFh
.eh_frame:000000000000576C                 db    8
.eh_frame:000000000000576D                 db    0
.eh_frame:000000000000576E                 db    0
.eh_frame:000000000000576F                 db    0
.eh_frame:0000000000005770                 db    0
.eh_frame:0000000000005771                 db    0
.eh_frame:0000000000005772                 db    0
.eh_frame:0000000000005773                 db    0
.eh_frame:0000000000005774                 db  10h
.eh_frame:0000000000005775                 db    0
.eh_frame:0000000000005776                 db    0
.eh_frame:0000000000005777                 db    0
.eh_frame:0000000000005778                 db 0F8h
.eh_frame:0000000000005779                 db    0
.eh_frame:000000000000577A                 db    0
.eh_frame:000000000000577B                 db    0
.eh_frame:000000000000577C                 db 0A4h
.eh_frame:000000000000577D                 db 0C3h
.eh_frame:000000000000577E                 db 0FFh
.eh_frame:000000000000577F                 db 0FFh
.eh_frame:0000000000005780                 db    8
.eh_frame:0000000000005781                 db    0
.eh_frame:0000000000005782                 db    0
.eh_frame:0000000000005783                 db    0
.eh_frame:0000000000005784                 db    0
.eh_frame:0000000000005785                 db    0
.eh_frame:0000000000005786                 db    0
.eh_frame:0000000000005787                 db    0
.eh_frame:0000000000005788                 db  2Ch ; ,
.eh_frame:0000000000005789                 db    0
.eh_frame:000000000000578A                 db    0
.eh_frame:000000000000578B                 db    0
.eh_frame:000000000000578C                 db  0Ch
.eh_frame:000000000000578D                 db    1
.eh_frame:000000000000578E                 db    0
.eh_frame:000000000000578F                 db    0
.eh_frame:0000000000005790                 db 0A0h
.eh_frame:0000000000005791                 db 0C3h
.eh_frame:0000000000005792                 db 0FFh
.eh_frame:0000000000005793                 db 0FFh
.eh_frame:0000000000005794                 db 0A4h
.eh_frame:0000000000005795                 db    0
.eh_frame:0000000000005796                 db    0
.eh_frame:0000000000005797                 db    0
.eh_frame:0000000000005798                 db    0
.eh_frame:0000000000005799                 db  41h ; A
.eh_frame:000000000000579A                 db  0Eh
.eh_frame:000000000000579B                 db  10h
.eh_frame:000000000000579C                 db  86h
.eh_frame:000000000000579D                 db    2
.eh_frame:000000000000579E                 db  41h ; A
.eh_frame:000000000000579F                 db  0Eh
.eh_frame:00000000000057A0                 db  18h
.eh_frame:00000000000057A1                 db  83h
.eh_frame:00000000000057A2                 db    3
.eh_frame:00000000000057A3                 db  44h ; D
.eh_frame:00000000000057A4                 db  0Eh
.eh_frame:00000000000057A5                 db  20h
.eh_frame:00000000000057A6                 db  7Ah ; z
.eh_frame:00000000000057A7                 db  0Ah
.eh_frame:00000000000057A8                 db  0Eh
.eh_frame:00000000000057A9                 db  18h
.eh_frame:00000000000057AA                 db  41h ; A
.eh_frame:00000000000057AB                 db  0Eh
.eh_frame:00000000000057AC                 db  10h
.eh_frame:00000000000057AD                 db  41h ; A
.eh_frame:00000000000057AE                 db  0Eh
.eh_frame:00000000000057AF                 db    8
.eh_frame:00000000000057B0                 db  41h ; A
.eh_frame:00000000000057B1                 db  0Bh
.eh_frame:00000000000057B2                 db    0
.eh_frame:00000000000057B3                 db    0
.eh_frame:00000000000057B4                 db    0
.eh_frame:00000000000057B5                 db    0
.eh_frame:00000000000057B6                 db    0
.eh_frame:00000000000057B7                 db    0
.eh_frame:00000000000057B8                 db  4Ch ; L
.eh_frame:00000000000057B9                 db    0
.eh_frame:00000000000057BA                 db    0
.eh_frame:00000000000057BB                 db    0
.eh_frame:00000000000057BC                 db  3Ch ; <
.eh_frame:00000000000057BD                 db    1
.eh_frame:00000000000057BE                 db    0
.eh_frame:00000000000057BF                 db    0
.eh_frame:00000000000057C0                 db  20h
.eh_frame:00000000000057C1                 db 0C4h
.eh_frame:00000000000057C2                 db 0FFh
.eh_frame:00000000000057C3                 db 0FFh
.eh_frame:00000000000057C4                 db  76h ; v
.eh_frame:00000000000057C5                 db    0
.eh_frame:00000000000057C6                 db    0
.eh_frame:00000000000057C7                 db    0
.eh_frame:00000000000057C8                 db    0
.eh_frame:00000000000057C9                 db  42h ; B
.eh_frame:00000000000057CA                 db  0Eh
.eh_frame:00000000000057CB                 db  10h
.eh_frame:00000000000057CC                 db  8Dh
.eh_frame:00000000000057CD                 db    2
.eh_frame:00000000000057CE                 db  42h ; B
.eh_frame:00000000000057CF                 db  0Eh
.eh_frame:00000000000057D0                 db  18h
.eh_frame:00000000000057D1                 db  8Ch
.eh_frame:00000000000057D2                 db    3
.eh_frame:00000000000057D3                 db  41h ; A
.eh_frame:00000000000057D4                 db  0Eh
.eh_frame:00000000000057D5                 db  20h
.eh_frame:00000000000057D6                 db  86h
.eh_frame:00000000000057D7                 db    4
.eh_frame:00000000000057D8                 db  41h ; A
.eh_frame:00000000000057D9                 db  0Eh
.eh_frame:00000000000057DA                 db  28h ; (
.eh_frame:00000000000057DB                 db  83h
.eh_frame:00000000000057DC                 db    5
.eh_frame:00000000000057DD                 db  44h ; D
.eh_frame:00000000000057DE                 db  0Eh
.eh_frame:00000000000057DF                 db  30h ; 0
.eh_frame:00000000000057E0                 db  7Eh ; ~
.eh_frame:00000000000057E1                 db  0Ah
.eh_frame:00000000000057E2                 db  0Eh
.eh_frame:00000000000057E3                 db  28h ; (
.eh_frame:00000000000057E4                 db  44h ; D
.eh_frame:00000000000057E5                 db  0Eh
.eh_frame:00000000000057E6                 db  20h
.eh_frame:00000000000057E7                 db  41h ; A
.eh_frame:00000000000057E8                 db  0Eh
.eh_frame:00000000000057E9                 db  18h
.eh_frame:00000000000057EA                 db  42h ; B
.eh_frame:00000000000057EB                 db  0Eh
.eh_frame:00000000000057EC                 db  10h
.eh_frame:00000000000057ED                 db  42h ; B
.eh_frame:00000000000057EE                 db  0Eh
.eh_frame:00000000000057EF                 db    8
.eh_frame:00000000000057F0                 db  47h ; G
.eh_frame:00000000000057F1                 db  0Bh
.eh_frame:00000000000057F2                 db  4Fh ; O
.eh_frame:00000000000057F3                 db  0Ah
.eh_frame:00000000000057F4                 db  0Eh
.eh_frame:00000000000057F5                 db  28h ; (
.eh_frame:00000000000057F6                 db  44h ; D
.eh_frame:00000000000057F7                 db  0Eh
.eh_frame:00000000000057F8                 db  20h
.eh_frame:00000000000057F9                 db  41h ; A
.eh_frame:00000000000057FA                 db  0Eh
.eh_frame:00000000000057FB                 db  18h
.eh_frame:00000000000057FC                 db  42h ; B
.eh_frame:00000000000057FD                 db  0Eh
.eh_frame:00000000000057FE                 db  10h
.eh_frame:00000000000057FF                 db  42h ; B
.eh_frame:0000000000005800                 db  0Eh
.eh_frame:0000000000005801                 db    8
.eh_frame:0000000000005802                 db  41h ; A
.eh_frame:0000000000005803                 db  0Bh
.eh_frame:0000000000005804                 db    0
.eh_frame:0000000000005805                 db    0
.eh_frame:0000000000005806                 db    0
.eh_frame:0000000000005807                 db    0
.eh_frame:0000000000005808                 db  38h ; 8
.eh_frame:0000000000005809                 db    0
.eh_frame:000000000000580A                 db    0
.eh_frame:000000000000580B                 db    0
.eh_frame:000000000000580C                 db  8Ch
.eh_frame:000000000000580D                 db    1
.eh_frame:000000000000580E                 db    0
.eh_frame:000000000000580F                 db    0
.eh_frame:0000000000005810                 db  50h ; P
.eh_frame:0000000000005811                 db 0C4h
.eh_frame:0000000000005812                 db 0FFh
.eh_frame:0000000000005813                 db 0FFh
.eh_frame:0000000000005814                 db  3Fh ; ?
.eh_frame:0000000000005815                 db    1
.eh_frame:0000000000005816                 db    0
.eh_frame:0000000000005817                 db    0
.eh_frame:0000000000005818                 db    0
.eh_frame:0000000000005819                 db  42h ; B
.eh_frame:000000000000581A                 db  0Eh
.eh_frame:000000000000581B                 db  10h
.eh_frame:000000000000581C                 db  8Dh
.eh_frame:000000000000581D                 db    2
.eh_frame:000000000000581E                 db  42h ; B
.eh_frame:000000000000581F                 db  0Eh
.eh_frame:0000000000005820                 db  18h
.eh_frame:0000000000005821                 db  8Ch
.eh_frame:0000000000005822                 db    3
.eh_frame:0000000000005823                 db  44h ; D
.eh_frame:0000000000005824                 db  0Eh
.eh_frame:0000000000005825                 db  20h
.eh_frame:0000000000005826                 db  86h
.eh_frame:0000000000005827                 db    4
.eh_frame:0000000000005828                 db  41h ; A
.eh_frame:0000000000005829                 db  0Eh
.eh_frame:000000000000582A                 db  28h ; (
.eh_frame:000000000000582B                 db  83h
.eh_frame:000000000000582C                 db    5
.eh_frame:000000000000582D                 db  4Dh ; M
.eh_frame:000000000000582E                 db  0Eh
.eh_frame:000000000000582F                 db  90h
.eh_frame:0000000000005830                 db    2
.eh_frame:0000000000005831                 db    2
.eh_frame:0000000000005832                 db  8Eh
.eh_frame:0000000000005833                 db  0Ah
.eh_frame:0000000000005834                 db  0Eh
.eh_frame:0000000000005835                 db  28h ; (
.eh_frame:0000000000005836                 db  41h ; A
.eh_frame:0000000000005837                 db  0Eh
.eh_frame:0000000000005838                 db  20h
.eh_frame:0000000000005839                 db  41h ; A
.eh_frame:000000000000583A                 db  0Eh
.eh_frame:000000000000583B                 db  18h
.eh_frame:000000000000583C                 db  42h ; B
.eh_frame:000000000000583D                 db  0Eh
.eh_frame:000000000000583E                 db  10h
.eh_frame:000000000000583F                 db  42h ; B
.eh_frame:0000000000005840                 db  0Eh
.eh_frame:0000000000005841                 db    8
.eh_frame:0000000000005842                 db  46h ; F
.eh_frame:0000000000005843                 db  0Bh
.eh_frame:0000000000005844                 db  48h ; H
.eh_frame:0000000000005845                 db    0
.eh_frame:0000000000005846                 db    0
.eh_frame:0000000000005847                 db    0
.eh_frame:0000000000005848                 db 0C8h
.eh_frame:0000000000005849                 db    1
.eh_frame:000000000000584A                 db    0
.eh_frame:000000000000584B                 db    0
.eh_frame:000000000000584C                 db  54h ; T
.eh_frame:000000000000584D                 db 0C5h
.eh_frame:000000000000584E                 db 0FFh
.eh_frame:000000000000584F                 db 0FFh
.eh_frame:0000000000005850                 db  3Bh ; ;
.eh_frame:0000000000005851                 db    1
.eh_frame:0000000000005852                 db    0
.eh_frame:0000000000005853                 db    0
.eh_frame:0000000000005854                 db    0
.eh_frame:0000000000005855                 db  42h ; B
.eh_frame:0000000000005856                 db  0Eh
.eh_frame:0000000000005857                 db  10h
.eh_frame:0000000000005858                 db  8Eh
.eh_frame:0000000000005859                 db    2
.eh_frame:000000000000585A                 db  42h ; B
.eh_frame:000000000000585B                 db  0Eh
.eh_frame:000000000000585C                 db  18h
.eh_frame:000000000000585D                 db  8Dh
.eh_frame:000000000000585E                 db    3
.eh_frame:000000000000585F                 db  45h ; E
.eh_frame:0000000000005860                 db  0Eh
.eh_frame:0000000000005861                 db  20h
.eh_frame:0000000000005862                 db  8Ch
.eh_frame:0000000000005863                 db    4
.eh_frame:0000000000005864                 db  41h ; A
.eh_frame:0000000000005865                 db  0Eh
.eh_frame:0000000000005866                 db  28h ; (
.eh_frame:0000000000005867                 db  86h
.eh_frame:0000000000005868                 db    5
.eh_frame:0000000000005869                 db  44h ; D
.eh_frame:000000000000586A                 db  0Eh
.eh_frame:000000000000586B                 db  30h ; 0
.eh_frame:000000000000586C                 db  83h
.eh_frame:000000000000586D                 db    6
.eh_frame:000000000000586E                 db  4Ah ; J
.eh_frame:000000000000586F                 db  0Eh
.eh_frame:0000000000005870                 db  80h
.eh_frame:0000000000005871                 db    2
.eh_frame:0000000000005872                 db    3
.eh_frame:0000000000005873                 db  0Dh
.eh_frame:0000000000005874                 db    1
.eh_frame:0000000000005875                 db  0Ah
.eh_frame:0000000000005876                 db  0Eh
.eh_frame:0000000000005877                 db  30h ; 0
.eh_frame:0000000000005878                 db  41h ; A
.eh_frame:0000000000005879                 db  0Eh
.eh_frame:000000000000587A                 db  28h ; (
.eh_frame:000000000000587B                 db  41h ; A
.eh_frame:000000000000587C                 db  0Eh
.eh_frame:000000000000587D                 db  20h
.eh_frame:000000000000587E                 db  42h ; B
.eh_frame:000000000000587F                 db  0Eh
.eh_frame:0000000000005880                 db  18h
.eh_frame:0000000000005881                 db  42h ; B
.eh_frame:0000000000005882                 db  0Eh
.eh_frame:0000000000005883                 db  10h
.eh_frame:0000000000005884                 db  42h ; B
.eh_frame:0000000000005885                 db  0Eh
.eh_frame:0000000000005886                 db    8
.eh_frame:0000000000005887                 db  43h ; C
.eh_frame:0000000000005888                 db  0Bh
.eh_frame:0000000000005889                 db    0
.eh_frame:000000000000588A                 db    0
.eh_frame:000000000000588B                 db    0
.eh_frame:000000000000588C                 db    0
.eh_frame:000000000000588D                 db    0
.eh_frame:000000000000588E                 db    0
.eh_frame:000000000000588F                 db    0
.eh_frame:0000000000005890                 db  1Ch
.eh_frame:0000000000005891                 db    0
.eh_frame:0000000000005892                 db    0
.eh_frame:0000000000005893                 db    0
.eh_frame:0000000000005894                 db  14h
.eh_frame:0000000000005895                 db    2
.eh_frame:0000000000005896                 db    0
.eh_frame:0000000000005897                 db    0
.eh_frame:0000000000005898                 db  48h ; H
.eh_frame:0000000000005899                 db 0C6h
.eh_frame:000000000000589A                 db 0FFh
.eh_frame:000000000000589B                 db 0FFh
.eh_frame:000000000000589C                 db  9Fh
.eh_frame:000000000000589D                 db    0
.eh_frame:000000000000589E                 db    0
.eh_frame:000000000000589F                 db    0
.eh_frame:00000000000058A0                 db    0
.eh_frame:00000000000058A1                 db  44h ; D
.eh_frame:00000000000058A2                 db  0Eh
.eh_frame:00000000000058A3                 db  10h
.eh_frame:00000000000058A4                 db  83h
.eh_frame:00000000000058A5                 db    2
.eh_frame:00000000000058A6                 db    2
.eh_frame:00000000000058A7                 db  78h ; x
.eh_frame:00000000000058A8                 db  0Ah
.eh_frame:00000000000058A9                 db  0Eh
.eh_frame:00000000000058AA                 db    8
.eh_frame:00000000000058AB                 db  41h ; A
.eh_frame:00000000000058AC                 db  0Bh
.eh_frame:00000000000058AD                 db    0
.eh_frame:00000000000058AE                 db    0
.eh_frame:00000000000058AF                 db    0
.eh_frame:00000000000058B0                 db  40h ; @
.eh_frame:00000000000058B1                 db    0
.eh_frame:00000000000058B2                 db    0
.eh_frame:00000000000058B3                 db    0
.eh_frame:00000000000058B4                 db  34h ; 4
.eh_frame:00000000000058B5                 db    2
.eh_frame:00000000000058B6                 db    0
.eh_frame:00000000000058B7                 db    0
.eh_frame:00000000000058B8                 db 0C8h
.eh_frame:00000000000058B9                 db 0C6h
.eh_frame:00000000000058BA                 db 0FFh
.eh_frame:00000000000058BB                 db 0FFh
.eh_frame:00000000000058BC                 db 0E7h
.eh_frame:00000000000058BD                 db    0
.eh_frame:00000000000058BE                 db    0
.eh_frame:00000000000058BF                 db    0
.eh_frame:00000000000058C0                 db    0
.eh_frame:00000000000058C1                 db  41h ; A
.eh_frame:00000000000058C2                 db  0Eh
.eh_frame:00000000000058C3                 db  10h
.eh_frame:00000000000058C4                 db  86h
.eh_frame:00000000000058C5                 db    2
.eh_frame:00000000000058C6                 db  41h ; A
.eh_frame:00000000000058C7                 db  0Eh
.eh_frame:00000000000058C8                 db  18h
.eh_frame:00000000000058C9                 db  83h
.eh_frame:00000000000058CA                 db    3
.eh_frame:00000000000058CB                 db  49h ; I
.eh_frame:00000000000058CC                 db  0Eh
.eh_frame:00000000000058CD                 db  20h
.eh_frame:00000000000058CE                 db  6Eh ; n
.eh_frame:00000000000058CF                 db  0Ah
.eh_frame:00000000000058D0                 db  0Eh
.eh_frame:00000000000058D1                 db  18h
.eh_frame:00000000000058D2                 db  41h ; A
.eh_frame:00000000000058D3                 db  0Eh
.eh_frame:00000000000058D4                 db  10h
.eh_frame:00000000000058D5                 db  41h ; A
.eh_frame:00000000000058D6                 db  0Eh
.eh_frame:00000000000058D7                 db    8
.eh_frame:00000000000058D8                 db  45h ; E
.eh_frame:00000000000058D9                 db  0Bh
.eh_frame:00000000000058DA                 db    2
.eh_frame:00000000000058DB                 db  4Ah ; J
.eh_frame:00000000000058DC                 db  0Ah
.eh_frame:00000000000058DD                 db  0Eh
.eh_frame:00000000000058DE                 db  18h
.eh_frame:00000000000058DF                 db  41h ; A
.eh_frame:00000000000058E0                 db  0Eh
.eh_frame:00000000000058E1                 db  10h
.eh_frame:00000000000058E2                 db  41h ; A
.eh_frame:00000000000058E3                 db  0Eh
.eh_frame:00000000000058E4                 db    8
.eh_frame:00000000000058E5                 db  44h ; D
.eh_frame:00000000000058E6                 db  0Bh
.eh_frame:00000000000058E7                 db    2
.eh_frame:00000000000058E8                 db  54h ; T
.eh_frame:00000000000058E9                 db  0Eh
.eh_frame:00000000000058EA                 db  18h
.eh_frame:00000000000058EB                 db  41h ; A
.eh_frame:00000000000058EC                 db  0Eh
.eh_frame:00000000000058ED                 db  10h
.eh_frame:00000000000058EE                 db  41h ; A
.eh_frame:00000000000058EF                 db  0Eh
.eh_frame:00000000000058F0                 db    8
.eh_frame:00000000000058F1                 db    0
.eh_frame:00000000000058F2                 db    0
.eh_frame:00000000000058F3                 db    0
.eh_frame:00000000000058F4                 db  74h ; t
.eh_frame:00000000000058F5                 db    0
.eh_frame:00000000000058F6                 db    0
.eh_frame:00000000000058F7                 db    0
.eh_frame:00000000000058F8                 db  78h ; x
.eh_frame:00000000000058F9                 db    2
.eh_frame:00000000000058FA                 db    0
.eh_frame:00000000000058FB                 db    0
.eh_frame:00000000000058FC                 db  74h ; t
.eh_frame:00000000000058FD                 db 0C7h
.eh_frame:00000000000058FE                 db 0FFh
.eh_frame:00000000000058FF                 db 0FFh
.eh_frame:0000000000005900                 db  34h ; 4
.eh_frame:0000000000005901                 db  12h
.eh_frame:0000000000005902                 db    0
.eh_frame:0000000000005903                 db    0
.eh_frame:0000000000005904                 db    0
.eh_frame:0000000000005905                 db  42h ; B
.eh_frame:0000000000005906                 db  0Eh
.eh_frame:0000000000005907                 db  10h
.eh_frame:0000000000005908                 db  8Fh
.eh_frame:0000000000005909                 db    2
.eh_frame:000000000000590A                 db  42h ; B
.eh_frame:000000000000590B                 db  0Eh
.eh_frame:000000000000590C                 db  18h
.eh_frame:000000000000590D                 db  8Eh
.eh_frame:000000000000590E                 db    3
.eh_frame:000000000000590F                 db  45h ; E
.eh_frame:0000000000005910                 db  0Eh
.eh_frame:0000000000005911                 db  20h
.eh_frame:0000000000005912                 db  8Dh
.eh_frame:0000000000005913                 db    4
.eh_frame:0000000000005914                 db  42h ; B
.eh_frame:0000000000005915                 db  0Eh
.eh_frame:0000000000005916                 db  28h ; (
.eh_frame:0000000000005917                 db  8Ch
.eh_frame:0000000000005918                 db    5
.eh_frame:0000000000005919                 db  44h ; D
.eh_frame:000000000000591A                 db  0Eh
.eh_frame:000000000000591B                 db  30h ; 0
.eh_frame:000000000000591C                 db  86h
.eh_frame:000000000000591D                 db    6
.eh_frame:000000000000591E                 db  41h ; A
.eh_frame:000000000000591F                 db  0Eh
.eh_frame:0000000000005920                 db  38h ; 8
.eh_frame:0000000000005921                 db  83h
.eh_frame:0000000000005922                 db    7
.eh_frame:0000000000005923                 db  53h ; S
.eh_frame:0000000000005924                 db  0Eh
.eh_frame:0000000000005925                 db 0F0h
.eh_frame:0000000000005926                 db    1
.eh_frame:0000000000005927                 db    3
.eh_frame:0000000000005928                 db  81h
.eh_frame:0000000000005929                 db  0Bh
.eh_frame:000000000000592A                 db  0Eh
.eh_frame:000000000000592B                 db 0F8h
.eh_frame:000000000000592C                 db    1
.eh_frame:000000000000592D                 db  4Ah ; J
.eh_frame:000000000000592E                 db  0Eh
.eh_frame:000000000000592F                 db  80h
.eh_frame:0000000000005930                 db    2
.eh_frame:0000000000005931                 db  44h ; D
.eh_frame:0000000000005932                 db  0Eh
.eh_frame:0000000000005933                 db  88h
.eh_frame:0000000000005934                 db    2
.eh_frame:0000000000005935                 db  45h ; E
.eh_frame:0000000000005936                 db  0Eh
.eh_frame:0000000000005937                 db  90h
.eh_frame:0000000000005938                 db    2
.eh_frame:0000000000005939                 db  5Fh ; _
.eh_frame:000000000000593A                 db  0Eh
.eh_frame:000000000000593B                 db 0F0h
.eh_frame:000000000000593C                 db    1
.eh_frame:000000000000593D                 db  64h ; d
.eh_frame:000000000000593E                 db  0Ah
.eh_frame:000000000000593F                 db  0Eh
.eh_frame:0000000000005940                 db  38h ; 8
.eh_frame:0000000000005941                 db  41h ; A
.eh_frame:0000000000005942                 db  0Eh
.eh_frame:0000000000005943                 db  30h ; 0
.eh_frame:0000000000005944                 db  41h ; A
.eh_frame:0000000000005945                 db  0Eh
.eh_frame:0000000000005946                 db  28h ; (
.eh_frame:0000000000005947                 db  42h ; B
.eh_frame:0000000000005948                 db  0Eh
.eh_frame:0000000000005949                 db  20h
.eh_frame:000000000000594A                 db  42h ; B
.eh_frame:000000000000594B                 db  0Eh
.eh_frame:000000000000594C                 db  18h
.eh_frame:000000000000594D                 db  42h ; B
.eh_frame:000000000000594E                 db  0Eh
.eh_frame:000000000000594F                 db  10h
.eh_frame:0000000000005950                 db  42h ; B
.eh_frame:0000000000005951                 db  0Eh
.eh_frame:0000000000005952                 db    8
.eh_frame:0000000000005953                 db  44h ; D
.eh_frame:0000000000005954                 db  0Bh
.eh_frame:0000000000005955                 db    3
.eh_frame:0000000000005956                 db  99h
.eh_frame:0000000000005957                 db    5
.eh_frame:0000000000005958                 db  0Eh
.eh_frame:0000000000005959                 db 0F8h
.eh_frame:000000000000595A                 db    1
.eh_frame:000000000000595B                 db  4Dh ; M
.eh_frame:000000000000595C                 db  0Eh
.eh_frame:000000000000595D                 db  80h
.eh_frame:000000000000595E                 db    2
.eh_frame:000000000000595F                 db  44h ; D
.eh_frame:0000000000005960                 db  0Eh
.eh_frame:0000000000005961                 db  88h
.eh_frame:0000000000005962                 db    2
.eh_frame:0000000000005963                 db  47h ; G
.eh_frame:0000000000005964                 db  0Eh
.eh_frame:0000000000005965                 db  90h
.eh_frame:0000000000005966                 db    2
.eh_frame:0000000000005967                 db  5Bh ; [
.eh_frame:0000000000005968                 db  0Eh
.eh_frame:0000000000005969                 db 0F0h
.eh_frame:000000000000596A                 db    1
.eh_frame:000000000000596B                 db    0
.eh_frame:000000000000596C                 db  68h ; h
.eh_frame:000000000000596D                 db    0
.eh_frame:000000000000596E                 db    0
.eh_frame:000000000000596F                 db    0
.eh_frame:0000000000005970                 db 0F0h
.eh_frame:0000000000005971                 db    2
.eh_frame:0000000000005972                 db    0
.eh_frame:0000000000005973                 db    0
.eh_frame:0000000000005974                 db  3Ch ; <
.eh_frame:0000000000005975                 db 0D9h
.eh_frame:0000000000005976                 db 0FFh
.eh_frame:0000000000005977                 db 0FFh
.eh_frame:0000000000005978                 db 0ABh
.eh_frame:0000000000005979                 db    1
.eh_frame:000000000000597A                 db    0
.eh_frame:000000000000597B                 db    0
.eh_frame:000000000000597C                 db    0
.eh_frame:000000000000597D                 db  42h ; B
.eh_frame:000000000000597E                 db  0Eh
.eh_frame:000000000000597F                 db  10h
.eh_frame:0000000000005980                 db  8Fh
.eh_frame:0000000000005981                 db    2
.eh_frame:0000000000005982                 db  42h ; B
.eh_frame:0000000000005983                 db  0Eh
.eh_frame:0000000000005984                 db  18h
.eh_frame:0000000000005985                 db  8Eh
.eh_frame:0000000000005986                 db    3
.eh_frame:0000000000005987                 db  45h ; E
.eh_frame:0000000000005988                 db  0Eh
.eh_frame:0000000000005989                 db  20h
.eh_frame:000000000000598A                 db  8Dh
.eh_frame:000000000000598B                 db    4
.eh_frame:000000000000598C                 db  42h ; B
.eh_frame:000000000000598D                 db  0Eh
.eh_frame:000000000000598E                 db  28h ; (
.eh_frame:000000000000598F                 db  8Ch
.eh_frame:0000000000005990                 db    5
.eh_frame:0000000000005991                 db  44h ; D
.eh_frame:0000000000005992                 db  0Eh
.eh_frame:0000000000005993                 db  30h ; 0
.eh_frame:0000000000005994                 db  86h
.eh_frame:0000000000005995                 db    6
.eh_frame:0000000000005996                 db  41h ; A
.eh_frame:0000000000005997                 db  0Eh
.eh_frame:0000000000005998                 db  38h ; 8
.eh_frame:0000000000005999                 db  83h
.eh_frame:000000000000599A                 db    7
.eh_frame:000000000000599B                 db  47h ; G
.eh_frame:000000000000599C                 db  0Eh
.eh_frame:000000000000599D                 db  60h ; `
.eh_frame:000000000000599E                 db    2
.eh_frame:000000000000599F                 db  99h
.eh_frame:00000000000059A0                 db  0Eh
.eh_frame:00000000000059A1                 db  68h ; h
.eh_frame:00000000000059A2                 db  5Fh ; _
.eh_frame:00000000000059A3                 db  0Eh
.eh_frame:00000000000059A4                 db  70h ; p
.eh_frame:00000000000059A5                 db  46h ; F
.eh_frame:00000000000059A6                 db  0Eh
.eh_frame:00000000000059A7                 db  78h ; x
.eh_frame:00000000000059A8                 db  42h ; B
.eh_frame:00000000000059A9                 db  0Eh
.eh_frame:00000000000059AA                 db  80h
.eh_frame:00000000000059AB                 db    1
.eh_frame:00000000000059AC                 db  59h ; Y
.eh_frame:00000000000059AD                 db  0Eh
.eh_frame:00000000000059AE                 db  60h ; `
.eh_frame:00000000000059AF                 db    2
.eh_frame:00000000000059B0                 db  40h ; @
.eh_frame:00000000000059B1                 db  0Eh
.eh_frame:00000000000059B2                 db  68h ; h
.eh_frame:00000000000059B3                 db  4Bh ; K
.eh_frame:00000000000059B4                 db  0Eh
.eh_frame:00000000000059B5                 db  70h ; p
.eh_frame:00000000000059B6                 db  43h ; C
.eh_frame:00000000000059B7                 db  0Eh
.eh_frame:00000000000059B8                 db  78h ; x
.eh_frame:00000000000059B9                 db  45h ; E
.eh_frame:00000000000059BA                 db  0Eh
.eh_frame:00000000000059BB                 db  80h
.eh_frame:00000000000059BC                 db    1
.eh_frame:00000000000059BD                 db  5Eh ; ^
.eh_frame:00000000000059BE                 db  0Eh
.eh_frame:00000000000059BF                 db  60h ; `
.eh_frame:00000000000059C0                 db  4Ch ; L
.eh_frame:00000000000059C1                 db  0Ah
.eh_frame:00000000000059C2                 db  0Eh
.eh_frame:00000000000059C3                 db  38h ; 8
.eh_frame:00000000000059C4                 db  44h ; D
.eh_frame:00000000000059C5                 db  0Eh
.eh_frame:00000000000059C6                 db  30h ; 0
.eh_frame:00000000000059C7                 db  41h ; A
.eh_frame:00000000000059C8                 db  0Eh
.eh_frame:00000000000059C9                 db  28h ; (
.eh_frame:00000000000059CA                 db  42h ; B
.eh_frame:00000000000059CB                 db  0Eh
.eh_frame:00000000000059CC                 db  20h
.eh_frame:00000000000059CD                 db  42h ; B
.eh_frame:00000000000059CE                 db  0Eh
.eh_frame:00000000000059CF                 db  18h
.eh_frame:00000000000059D0                 db  42h ; B
.eh_frame:00000000000059D1                 db  0Eh
.eh_frame:00000000000059D2                 db  10h
.eh_frame:00000000000059D3                 db  42h ; B
.eh_frame:00000000000059D4                 db  0Eh
.eh_frame:00000000000059D5                 db    8
.eh_frame:00000000000059D6                 db  46h ; F
.eh_frame:00000000000059D7                 db  0Bh
.eh_frame:00000000000059D8                 db  28h ; (
.eh_frame:00000000000059D9                 db    0
.eh_frame:00000000000059DA                 db    0
.eh_frame:00000000000059DB                 db    0
.eh_frame:00000000000059DC                 db  5Ch ; \
.eh_frame:00000000000059DD                 db    3
.eh_frame:00000000000059DE                 db    0
.eh_frame:00000000000059DF                 db    0
.eh_frame:00000000000059E0                 db  80h
.eh_frame:00000000000059E1                 db 0DAh
.eh_frame:00000000000059E2                 db 0FFh
.eh_frame:00000000000059E3                 db 0FFh
.eh_frame:00000000000059E4                 db  36h ; 6
.eh_frame:00000000000059E5                 db    0
.eh_frame:00000000000059E6                 db    0
.eh_frame:00000000000059E7                 db    0
.eh_frame:00000000000059E8                 db    0
.eh_frame:00000000000059E9                 db  42h ; B
.eh_frame:00000000000059EA                 db  0Eh
.eh_frame:00000000000059EB                 db  10h
.eh_frame:00000000000059EC                 db  8Ch
.eh_frame:00000000000059ED                 db    2
.eh_frame:00000000000059EE                 db  41h ; A
.eh_frame:00000000000059EF                 db  0Eh
.eh_frame:00000000000059F0                 db  18h
.eh_frame:00000000000059F1                 db  86h
.eh_frame:00000000000059F2                 db    3
.eh_frame:00000000000059F3                 db  41h ; A
.eh_frame:00000000000059F4                 db  0Eh
.eh_frame:00000000000059F5                 db  20h
.eh_frame:00000000000059F6                 db  83h
.eh_frame:00000000000059F7                 db    4
.eh_frame:00000000000059F8                 db  6Eh ; n
.eh_frame:00000000000059F9                 db  0Eh
.eh_frame:00000000000059FA                 db  18h
.eh_frame:00000000000059FB                 db  41h ; A
.eh_frame:00000000000059FC                 db  0Eh
.eh_frame:00000000000059FD                 db  10h
.eh_frame:00000000000059FE                 db  42h ; B
.eh_frame:00000000000059FF                 db  0Eh
.eh_frame:0000000000005A00                 db    8
.eh_frame:0000000000005A01                 db    0
.eh_frame:0000000000005A02                 db    0
.eh_frame:0000000000005A03                 db    0
.eh_frame:0000000000005A04                 db  10h
.eh_frame:0000000000005A05                 db    0
.eh_frame:0000000000005A06                 db    0
.eh_frame:0000000000005A07                 db    0
.eh_frame:0000000000005A08                 db  88h
.eh_frame:0000000000005A09                 db    3
.eh_frame:0000000000005A0A                 db    0
.eh_frame:0000000000005A0B                 db    0
.eh_frame:0000000000005A0C                 db  94h
.eh_frame:0000000000005A0D                 db 0DAh
.eh_frame:0000000000005A0E                 db 0FFh
.eh_frame:0000000000005A0F                 db 0FFh
.eh_frame:0000000000005A10                 db  11h
.eh_frame:0000000000005A11                 db    0
.eh_frame:0000000000005A12                 db    0
.eh_frame:0000000000005A13                 db    0
.eh_frame:0000000000005A14                 db    0
.eh_frame:0000000000005A15                 db    0
.eh_frame:0000000000005A16                 db    0
.eh_frame:0000000000005A17                 db    0
.eh_frame:0000000000005A18                 db  10h
.eh_frame:0000000000005A19                 db    0
.eh_frame:0000000000005A1A                 db    0
.eh_frame:0000000000005A1B                 db    0
.eh_frame:0000000000005A1C                 db  9Ch
.eh_frame:0000000000005A1D                 db    3
.eh_frame:0000000000005A1E                 db    0
.eh_frame:0000000000005A1F                 db    0
.eh_frame:0000000000005A20                 db 0A0h
.eh_frame:0000000000005A21                 db 0DAh
.eh_frame:0000000000005A22                 db 0FFh
.eh_frame:0000000000005A23                 db 0FFh
.eh_frame:0000000000005A24                 db  11h
.eh_frame:0000000000005A25                 db    0
.eh_frame:0000000000005A26                 db    0
.eh_frame:0000000000005A27                 db    0
.eh_frame:0000000000005A28                 db    0
.eh_frame:0000000000005A29                 db    0
.eh_frame:0000000000005A2A                 db    0
.eh_frame:0000000000005A2B                 db    0
.eh_frame:0000000000005A2C                 db  10h
.eh_frame:0000000000005A2D                 db    0
.eh_frame:0000000000005A2E                 db    0
.eh_frame:0000000000005A2F                 db    0
.eh_frame:0000000000005A30                 db 0B0h
.eh_frame:0000000000005A31                 db    3
.eh_frame:0000000000005A32                 db    0
.eh_frame:0000000000005A33                 db    0
.eh_frame:0000000000005A34                 db 0ACh
.eh_frame:0000000000005A35                 db 0DAh
.eh_frame:0000000000005A36                 db 0FFh
.eh_frame:0000000000005A37                 db 0FFh
.eh_frame:0000000000005A38                 db  35h ; 5
.eh_frame:0000000000005A39                 db    0
.eh_frame:0000000000005A3A                 db    0
.eh_frame:0000000000005A3B                 db    0
.eh_frame:0000000000005A3C                 db    0
.eh_frame:0000000000005A3D                 db    0
.eh_frame:0000000000005A3E                 db    0
.eh_frame:0000000000005A3F                 db    0
.eh_frame:0000000000005A40                 db  10h
.eh_frame:0000000000005A41                 db    0
.eh_frame:0000000000005A42                 db    0
.eh_frame:0000000000005A43                 db    0
.eh_frame:0000000000005A44                 db 0C4h
.eh_frame:0000000000005A45                 db    3
.eh_frame:0000000000005A46                 db    0
.eh_frame:0000000000005A47                 db    0
.eh_frame:0000000000005A48                 db 0D8h
.eh_frame:0000000000005A49                 db 0DAh
.eh_frame:0000000000005A4A                 db 0FFh
.eh_frame:0000000000005A4B                 db 0FFh
.eh_frame:0000000000005A4C                 db  15h
.eh_frame:0000000000005A4D                 db    0
.eh_frame:0000000000005A4E                 db    0
.eh_frame:0000000000005A4F                 db    0
.eh_frame:0000000000005A50                 db    0
.eh_frame:0000000000005A51                 db    0
.eh_frame:0000000000005A52                 db    0
.eh_frame:0000000000005A53                 db    0
.eh_frame:0000000000005A54                 db  10h
.eh_frame:0000000000005A55                 db    0
.eh_frame:0000000000005A56                 db    0
.eh_frame:0000000000005A57                 db    0
.eh_frame:0000000000005A58                 db 0D8h
.eh_frame:0000000000005A59                 db    3
.eh_frame:0000000000005A5A                 db    0
.eh_frame:0000000000005A5B                 db    0
.eh_frame:0000000000005A5C                 db 0E4h
.eh_frame:0000000000005A5D                 db 0DAh
.eh_frame:0000000000005A5E                 db 0FFh
.eh_frame:0000000000005A5F                 db 0FFh
.eh_frame:0000000000005A60                 db  30h ; 0
.eh_frame:0000000000005A61                 db    0
.eh_frame:0000000000005A62                 db    0
.eh_frame:0000000000005A63                 db    0
.eh_frame:0000000000005A64                 db    0
.eh_frame:0000000000005A65                 db  6Bh ; k
.eh_frame:0000000000005A66                 db  0Eh
.eh_frame:0000000000005A67                 db  10h
.eh_frame:0000000000005A68                 db  50h ; P
.eh_frame:0000000000005A69                 db    0
.eh_frame:0000000000005A6A                 db    0
.eh_frame:0000000000005A6B                 db    0
.eh_frame:0000000000005A6C                 db 0ECh
.eh_frame:0000000000005A6D                 db    3
.eh_frame:0000000000005A6E                 db    0
.eh_frame:0000000000005A6F                 db    0
.eh_frame:0000000000005A70                 db    0
.eh_frame:0000000000005A71                 db 0DBh
.eh_frame:0000000000005A72                 db 0FFh
.eh_frame:0000000000005A73                 db 0FFh
.eh_frame:0000000000005A74                 db  74h ; t
.eh_frame:0000000000005A75                 db    0
.eh_frame:0000000000005A76                 db    0
.eh_frame:0000000000005A77                 db    0
.eh_frame:0000000000005A78                 db    0
.eh_frame:0000000000005A79                 db  42h ; B
.eh_frame:0000000000005A7A                 db  0Eh
.eh_frame:0000000000005A7B                 db  10h
.eh_frame:0000000000005A7C                 db  8Fh
.eh_frame:0000000000005A7D                 db    2
.eh_frame:0000000000005A7E                 db  42h ; B
.eh_frame:0000000000005A7F                 db  0Eh
.eh_frame:0000000000005A80                 db  18h
.eh_frame:0000000000005A81                 db  8Eh
.eh_frame:0000000000005A82                 db    3
.eh_frame:0000000000005A83                 db  49h ; I
.eh_frame:0000000000005A84                 db  0Eh
.eh_frame:0000000000005A85                 db  20h
.eh_frame:0000000000005A86                 db  8Dh
.eh_frame:0000000000005A87                 db    4
.eh_frame:0000000000005A88                 db  42h ; B
.eh_frame:0000000000005A89                 db  0Eh
.eh_frame:0000000000005A8A                 db  28h ; (
.eh_frame:0000000000005A8B                 db  8Ch
.eh_frame:0000000000005A8C                 db    5
.eh_frame:0000000000005A8D                 db  44h ; D
.eh_frame:0000000000005A8E                 db  0Eh
.eh_frame:0000000000005A8F                 db  30h ; 0
.eh_frame:0000000000005A90                 db  86h
.eh_frame:0000000000005A91                 db    6
.eh_frame:0000000000005A92                 db  41h ; A
.eh_frame:0000000000005A93                 db  0Eh
.eh_frame:0000000000005A94                 db  38h ; 8
.eh_frame:0000000000005A95                 db  83h
.eh_frame:0000000000005A96                 db    7
.eh_frame:0000000000005A97                 db  4Dh ; M
.eh_frame:0000000000005A98                 db  0Eh
.eh_frame:0000000000005A99                 db  50h ; P
.eh_frame:0000000000005A9A                 db  5Fh ; _
.eh_frame:0000000000005A9B                 db  0Eh
.eh_frame:0000000000005A9C                 db  58h ; X
.eh_frame:0000000000005A9D                 db  47h ; G
.eh_frame:0000000000005A9E                 db  0Eh
.eh_frame:0000000000005A9F                 db  60h ; `
.eh_frame:0000000000005AA0                 db  46h ; F
.eh_frame:0000000000005AA1                 db  0Eh
.eh_frame:0000000000005AA2                 db  68h ; h
.eh_frame:0000000000005AA3                 db  44h ; D
.eh_frame:0000000000005AA4                 db  0Eh
.eh_frame:0000000000005AA5                 db  70h ; p
.eh_frame:0000000000005AA6                 db  58h ; X
.eh_frame:0000000000005AA7                 db  0Eh
.eh_frame:0000000000005AA8                 db  38h ; 8
.eh_frame:0000000000005AA9                 db  41h ; A
.eh_frame:0000000000005AAA                 db  0Eh
.eh_frame:0000000000005AAB                 db  30h ; 0
.eh_frame:0000000000005AAC                 db  41h ; A
.eh_frame:0000000000005AAD                 db  0Eh
.eh_frame:0000000000005AAE                 db  28h ; (
.eh_frame:0000000000005AAF                 db  42h ; B
.eh_frame:0000000000005AB0                 db  0Eh
.eh_frame:0000000000005AB1                 db  20h
.eh_frame:0000000000005AB2                 db  42h ; B
.eh_frame:0000000000005AB3                 db  0Eh
.eh_frame:0000000000005AB4                 db  18h
.eh_frame:0000000000005AB5                 db  42h ; B
.eh_frame:0000000000005AB6                 db  0Eh
.eh_frame:0000000000005AB7                 db  10h
.eh_frame:0000000000005AB8                 db  42h ; B
.eh_frame:0000000000005AB9                 db  0Eh
.eh_frame:0000000000005ABA                 db    8
.eh_frame:0000000000005ABB                 db    0
.eh_frame:0000000000005ABC                 db  68h ; h
.eh_frame:0000000000005ABD                 db    0
.eh_frame:0000000000005ABE                 db    0
.eh_frame:0000000000005ABF                 db    0
.eh_frame:0000000000005AC0                 db  40h ; @
.eh_frame:0000000000005AC1                 db    4
.eh_frame:0000000000005AC2                 db    0
.eh_frame:0000000000005AC3                 db    0
.eh_frame:0000000000005AC4                 db  2Ch ; ,
.eh_frame:0000000000005AC5                 db 0DBh
.eh_frame:0000000000005AC6                 db 0FFh
.eh_frame:0000000000005AC7                 db 0FFh
.eh_frame:0000000000005AC8                 db 0E3h
.eh_frame:0000000000005AC9                 db    0
.eh_frame:0000000000005ACA                 db    0
.eh_frame:0000000000005ACB                 db    0
.eh_frame:0000000000005ACC                 db    0
.eh_frame:0000000000005ACD                 db  42h ; B
.eh_frame:0000000000005ACE                 db  0Eh
.eh_frame:0000000000005ACF                 db  10h
.eh_frame:0000000000005AD0                 db  8Fh
.eh_frame:0000000000005AD1                 db    2
.eh_frame:0000000000005AD2                 db  42h ; B
.eh_frame:0000000000005AD3                 db  0Eh
.eh_frame:0000000000005AD4                 db  18h
.eh_frame:0000000000005AD5                 db  8Eh
.eh_frame:0000000000005AD6                 db    3
.eh_frame:0000000000005AD7                 db  49h ; I
.eh_frame:0000000000005AD8                 db  0Eh
.eh_frame:0000000000005AD9                 db  20h
.eh_frame:0000000000005ADA                 db  8Dh
.eh_frame:0000000000005ADB                 db    4
.eh_frame:0000000000005ADC                 db  42h ; B
.eh_frame:0000000000005ADD                 db  0Eh
.eh_frame:0000000000005ADE                 db  28h ; (
.eh_frame:0000000000005ADF                 db  8Ch
.eh_frame:0000000000005AE0                 db    5
.eh_frame:0000000000005AE1                 db  44h ; D
.eh_frame:0000000000005AE2                 db  0Eh
.eh_frame:0000000000005AE3                 db  30h ; 0
.eh_frame:0000000000005AE4                 db  86h
.eh_frame:0000000000005AE5                 db    6
.eh_frame:0000000000005AE6                 db  41h ; A
.eh_frame:0000000000005AE7                 db  0Eh
.eh_frame:0000000000005AE8                 db  38h ; 8
.eh_frame:0000000000005AE9                 db  83h
.eh_frame:0000000000005AEA                 db    7
.eh_frame:0000000000005AEB                 db  4Dh ; M
.eh_frame:0000000000005AEC                 db  0Eh
.eh_frame:0000000000005AED                 db  70h ; p
.eh_frame:0000000000005AEE                 db  65h ; e
.eh_frame:0000000000005AEF                 db  0Eh
.eh_frame:0000000000005AF0                 db  78h ; x
.eh_frame:0000000000005AF1                 db  4Dh ; M
.eh_frame:0000000000005AF2                 db  0Eh
.eh_frame:0000000000005AF3                 db  80h
.eh_frame:0000000000005AF4                 db    1
.eh_frame:0000000000005AF5                 db  46h ; F
.eh_frame:0000000000005AF6                 db  0Eh
.eh_frame:0000000000005AF7                 db  88h
.eh_frame:0000000000005AF8                 db    1
.eh_frame:0000000000005AF9                 db  42h ; B
.eh_frame:0000000000005AFA                 db  0Eh
.eh_frame:0000000000005AFB                 db  90h
.eh_frame:0000000000005AFC                 db    1
.eh_frame:0000000000005AFD                 db  5Eh ; ^
.eh_frame:0000000000005AFE                 db  0Eh
.eh_frame:0000000000005AFF                 db  70h ; p
.eh_frame:0000000000005B00                 db  56h ; V
.eh_frame:0000000000005B01                 db  0Eh
.eh_frame:0000000000005B02                 db  78h ; x
.eh_frame:0000000000005B03                 db  43h ; C
.eh_frame:0000000000005B04                 db  0Eh
.eh_frame:0000000000005B05                 db  80h
.eh_frame:0000000000005B06                 db    1
.eh_frame:0000000000005B07                 db  43h ; C
.eh_frame:0000000000005B08                 db  0Eh
.eh_frame:0000000000005B09                 db  88h
.eh_frame:0000000000005B0A                 db    1
.eh_frame:0000000000005B0B                 db  56h ; V
.eh_frame:0000000000005B0C                 db  0Eh
.eh_frame:0000000000005B0D                 db  90h
.eh_frame:0000000000005B0E                 db    1
.eh_frame:0000000000005B0F                 db  52h ; R
.eh_frame:0000000000005B10                 db  0Eh
.eh_frame:0000000000005B11                 db  70h ; p
.eh_frame:0000000000005B12                 db  5Bh ; [
.eh_frame:0000000000005B13                 db  0Eh
.eh_frame:0000000000005B14                 db  38h ; 8
.eh_frame:0000000000005B15                 db  41h ; A
.eh_frame:0000000000005B16                 db  0Eh
.eh_frame:0000000000005B17                 db  30h ; 0
.eh_frame:0000000000005B18                 db  41h ; A
.eh_frame:0000000000005B19                 db  0Eh
.eh_frame:0000000000005B1A                 db  28h ; (
.eh_frame:0000000000005B1B                 db  42h ; B
.eh_frame:0000000000005B1C                 db  0Eh
.eh_frame:0000000000005B1D                 db  20h
.eh_frame:0000000000005B1E                 db  42h ; B
.eh_frame:0000000000005B1F                 db  0Eh
.eh_frame:0000000000005B20                 db  18h
.eh_frame:0000000000005B21                 db  42h ; B
.eh_frame:0000000000005B22                 db  0Eh
.eh_frame:0000000000005B23                 db  10h
.eh_frame:0000000000005B24                 db  42h ; B
.eh_frame:0000000000005B25                 db  0Eh
.eh_frame:0000000000005B26                 db    8
.eh_frame:0000000000005B27                 db    0
.eh_frame:0000000000005B28                 db  10h
.eh_frame:0000000000005B29                 db    0
.eh_frame:0000000000005B2A                 db    0
.eh_frame:0000000000005B2B                 db    0
.eh_frame:0000000000005B2C                 db 0ACh
.eh_frame:0000000000005B2D                 db    4
.eh_frame:0000000000005B2E                 db    0
.eh_frame:0000000000005B2F                 db    0
.eh_frame:0000000000005B30                 db 0B0h
.eh_frame:0000000000005B31                 db 0DBh
.eh_frame:0000000000005B32                 db 0FFh
.eh_frame:0000000000005B33                 db 0FFh
.eh_frame:0000000000005B34                 db  0Ah
.eh_frame:0000000000005B35                 db    0
.eh_frame:0000000000005B36                 db    0
.eh_frame:0000000000005B37                 db    0
.eh_frame:0000000000005B38                 db    0
.eh_frame:0000000000005B39                 db    0
.eh_frame:0000000000005B3A                 db    0
.eh_frame:0000000000005B3B                 db    0
.eh_frame:0000000000005B3C                 db  28h ; (
.eh_frame:0000000000005B3D                 db    0
.eh_frame:0000000000005B3E                 db    0
.eh_frame:0000000000005B3F                 db    0
.eh_frame:0000000000005B40                 db 0C0h
.eh_frame:0000000000005B41                 db    4
.eh_frame:0000000000005B42                 db    0
.eh_frame:0000000000005B43                 db    0
.eh_frame:0000000000005B44                 db 0ACh
.eh_frame:0000000000005B45                 db 0DBh
.eh_frame:0000000000005B46                 db 0FFh
.eh_frame:0000000000005B47                 db 0FFh
.eh_frame:0000000000005B48                 db  93h
.eh_frame:0000000000005B49                 db    0
.eh_frame:0000000000005B4A                 db    0
.eh_frame:0000000000005B4B                 db    0
.eh_frame:0000000000005B4C                 db    0
.eh_frame:0000000000005B4D                 db  48h ; H
.eh_frame:0000000000005B4E                 db  0Eh
.eh_frame:0000000000005B4F                 db  10h
.eh_frame:0000000000005B50                 db  8Ch
.eh_frame:0000000000005B51                 db    2
.eh_frame:0000000000005B52                 db  48h ; H
.eh_frame:0000000000005B53                 db  0Eh
.eh_frame:0000000000005B54                 db  18h
.eh_frame:0000000000005B55                 db  86h
.eh_frame:0000000000005B56                 db    3
.eh_frame:0000000000005B57                 db  41h ; A
.eh_frame:0000000000005B58                 db  0Eh
.eh_frame:0000000000005B59                 db  20h
.eh_frame:0000000000005B5A                 db  83h
.eh_frame:0000000000005B5B                 db    4
.eh_frame:0000000000005B5C                 db    2
.eh_frame:0000000000005B5D                 db  74h ; t
.eh_frame:0000000000005B5E                 db  0Eh
.eh_frame:0000000000005B5F                 db  18h
.eh_frame:0000000000005B60                 db  4Bh ; K
.eh_frame:0000000000005B61                 db  0Eh
.eh_frame:0000000000005B62                 db  10h
.eh_frame:0000000000005B63                 db  42h ; B
.eh_frame:0000000000005B64                 db  0Eh
.eh_frame:0000000000005B65                 db    8
.eh_frame:0000000000005B66                 db    0
.eh_frame:0000000000005B67                 db    0
.eh_frame:0000000000005B68                 db  10h
.eh_frame:0000000000005B69                 db    0
.eh_frame:0000000000005B6A                 db    0
.eh_frame:0000000000005B6B                 db    0
.eh_frame:0000000000005B6C                 db 0ECh
.eh_frame:0000000000005B6D                 db    4
.eh_frame:0000000000005B6E                 db    0
.eh_frame:0000000000005B6F                 db    0
.eh_frame:0000000000005B70                 db  20h
.eh_frame:0000000000005B71                 db 0DCh
.eh_frame:0000000000005B72                 db 0FFh
.eh_frame:0000000000005B73                 db 0FFh
.eh_frame:0000000000005B74                 db  13h
.eh_frame:0000000000005B75                 db    0
.eh_frame:0000000000005B76                 db    0
.eh_frame:0000000000005B77                 db    0
.eh_frame:0000000000005B78                 db    0
.eh_frame:0000000000005B79                 db    0
.eh_frame:0000000000005B7A                 db    0
.eh_frame:0000000000005B7B                 db    0
.eh_frame:0000000000005B7C                 db  10h
.eh_frame:0000000000005B7D                 db    0
.eh_frame:0000000000005B7E                 db    0
.eh_frame:0000000000005B7F                 db    0
.eh_frame:0000000000005B80                 db    0
.eh_frame:0000000000005B81                 db    5
.eh_frame:0000000000005B82                 db    0
.eh_frame:0000000000005B83                 db    0
.eh_frame:0000000000005B84                 db  2Ch ; ,
.eh_frame:0000000000005B85                 db 0DCh
.eh_frame:0000000000005B86                 db 0FFh
.eh_frame:0000000000005B87                 db 0FFh
.eh_frame:0000000000005B88                 db  0Ch
.eh_frame:0000000000005B89                 db    0
.eh_frame:0000000000005B8A                 db    0
.eh_frame:0000000000005B8B                 db    0
.eh_frame:0000000000005B8C                 db    0
.eh_frame:0000000000005B8D                 db    0
.eh_frame:0000000000005B8E                 db    0
.eh_frame:0000000000005B8F                 db    0
.eh_frame:0000000000005B90                 db  10h
.eh_frame:0000000000005B91                 db    0
.eh_frame:0000000000005B92                 db    0
.eh_frame:0000000000005B93                 db    0
.eh_frame:0000000000005B94                 db  14h
.eh_frame:0000000000005B95                 db    5
.eh_frame:0000000000005B96                 db    0
.eh_frame:0000000000005B97                 db    0
.eh_frame:0000000000005B98                 db  28h ; (
.eh_frame:0000000000005B99                 db 0DCh
.eh_frame:0000000000005B9A                 db 0FFh
.eh_frame:0000000000005B9B                 db 0FFh
.eh_frame:0000000000005B9C                 db  18h
.eh_frame:0000000000005B9D                 db    0
.eh_frame:0000000000005B9E                 db    0
.eh_frame:0000000000005B9F                 db    0
.eh_frame:0000000000005BA0                 db    0
.eh_frame:0000000000005BA1                 db    0
.eh_frame:0000000000005BA2                 db    0
.eh_frame:0000000000005BA3                 db    0
.eh_frame:0000000000005BA4                 db  10h
.eh_frame:0000000000005BA5                 db    0
.eh_frame:0000000000005BA6                 db    0
.eh_frame:0000000000005BA7                 db    0
.eh_frame:0000000000005BA8                 db  28h ; (
.eh_frame:0000000000005BA9                 db    5
.eh_frame:0000000000005BAA                 db    0
.eh_frame:0000000000005BAB                 db    0
.eh_frame:0000000000005BAC                 db  34h ; 4
.eh_frame:0000000000005BAD                 db 0DCh
.eh_frame:0000000000005BAE                 db 0FFh
.eh_frame:0000000000005BAF                 db 0FFh
.eh_frame:0000000000005BB0                 db  14h
.eh_frame:0000000000005BB1                 db    0
.eh_frame:0000000000005BB2                 db    0
.eh_frame:0000000000005BB3                 db    0
.eh_frame:0000000000005BB4                 db    0
.eh_frame:0000000000005BB5                 db    0
.eh_frame:0000000000005BB6                 db    0
.eh_frame:0000000000005BB7                 db    0
.eh_frame:0000000000005BB8                 db  18h
.eh_frame:0000000000005BB9                 db    0
.eh_frame:0000000000005BBA                 db    0
.eh_frame:0000000000005BBB                 db    0
.eh_frame:0000000000005BBC                 db  3Ch ; <
.eh_frame:0000000000005BBD                 db    5
.eh_frame:0000000000005BBE                 db    0
.eh_frame:0000000000005BBF                 db    0
.eh_frame:0000000000005BC0                 db  40h ; @
.eh_frame:0000000000005BC1                 db 0DCh
.eh_frame:0000000000005BC2                 db 0FFh
.eh_frame:0000000000005BC3                 db 0FFh
.eh_frame:0000000000005BC4                 db  8Eh
.eh_frame:0000000000005BC5                 db    0
.eh_frame:0000000000005BC6                 db    0
.eh_frame:0000000000005BC7                 db    0
.eh_frame:0000000000005BC8                 db    0
.eh_frame:0000000000005BC9                 db  44h ; D
.eh_frame:0000000000005BCA                 db  0Eh
.eh_frame:0000000000005BCB                 db  50h ; P
.eh_frame:0000000000005BCC                 db    2
.eh_frame:0000000000005BCD                 db  7Fh ; 
.eh_frame:0000000000005BCE                 db  0Ah
.eh_frame:0000000000005BCF                 db  0Eh
.eh_frame:0000000000005BD0                 db    8
.eh_frame:0000000000005BD1                 db  41h ; A
.eh_frame:0000000000005BD2                 db  0Bh
.eh_frame:0000000000005BD3                 db    0
.eh_frame:0000000000005BD4                 db  18h
.eh_frame:0000000000005BD5                 db    0
.eh_frame:0000000000005BD6                 db    0
.eh_frame:0000000000005BD7                 db    0
.eh_frame:0000000000005BD8                 db  58h ; X
.eh_frame:0000000000005BD9                 db    5
.eh_frame:0000000000005BDA                 db    0
.eh_frame:0000000000005BDB                 db    0
.eh_frame:0000000000005BDC                 db 0B4h
.eh_frame:0000000000005BDD                 db 0DCh
.eh_frame:0000000000005BDE                 db 0FFh
.eh_frame:0000000000005BDF                 db 0FFh
.eh_frame:0000000000005BE0                 db  8Ah
.eh_frame:0000000000005BE1                 db    0
.eh_frame:0000000000005BE2                 db    0
.eh_frame:0000000000005BE3                 db    0
.eh_frame:0000000000005BE4                 db    0
.eh_frame:0000000000005BE5                 db  44h ; D
.eh_frame:0000000000005BE6                 db  0Eh
.eh_frame:0000000000005BE7                 db  50h ; P
.eh_frame:0000000000005BE8                 db    2
.eh_frame:0000000000005BE9                 db  7Bh ; {
.eh_frame:0000000000005BEA                 db  0Ah
.eh_frame:0000000000005BEB                 db  0Eh
.eh_frame:0000000000005BEC                 db    8
.eh_frame:0000000000005BED                 db  41h ; A
.eh_frame:0000000000005BEE                 db  0Bh
.eh_frame:0000000000005BEF                 db    0
.eh_frame:0000000000005BF0                 db  10h
.eh_frame:0000000000005BF1                 db    0
.eh_frame:0000000000005BF2                 db    0
.eh_frame:0000000000005BF3                 db    0
.eh_frame:0000000000005BF4                 db  74h ; t
.eh_frame:0000000000005BF5                 db    5
.eh_frame:0000000000005BF6                 db    0
.eh_frame:0000000000005BF7                 db    0
.eh_frame:0000000000005BF8                 db  28h ; (
.eh_frame:0000000000005BF9                 db 0DDh
.eh_frame:0000000000005BFA                 db 0FFh
.eh_frame:0000000000005BFB                 db 0FFh
.eh_frame:0000000000005BFC                 db  0Ch
.eh_frame:0000000000005BFD                 db    0
.eh_frame:0000000000005BFE                 db    0
.eh_frame:0000000000005BFF                 db    0
.eh_frame:0000000000005C00                 db    0
.eh_frame:0000000000005C01                 db    0
.eh_frame:0000000000005C02                 db    0
.eh_frame:0000000000005C03                 db    0
.eh_frame:0000000000005C04                 db  10h
.eh_frame:0000000000005C05                 db    0
.eh_frame:0000000000005C06                 db    0
.eh_frame:0000000000005C07                 db    0
.eh_frame:0000000000005C08                 db  88h
.eh_frame:0000000000005C09                 db    5
.eh_frame:0000000000005C0A                 db    0
.eh_frame:0000000000005C0B                 db    0
.eh_frame:0000000000005C0C                 db  24h ; $
.eh_frame:0000000000005C0D                 db 0DDh
.eh_frame:0000000000005C0E                 db 0FFh
.eh_frame:0000000000005C0F                 db 0FFh
.eh_frame:0000000000005C10                 db  0Fh
.eh_frame:0000000000005C11                 db    0
.eh_frame:0000000000005C12                 db    0
.eh_frame:0000000000005C13                 db    0
.eh_frame:0000000000005C14                 db    0
.eh_frame:0000000000005C15                 db    0
.eh_frame:0000000000005C16                 db    0
.eh_frame:0000000000005C17                 db    0
.eh_frame:0000000000005C18                 db  18h
.eh_frame:0000000000005C19                 db    0
.eh_frame:0000000000005C1A                 db    0
.eh_frame:0000000000005C1B                 db    0
.eh_frame:0000000000005C1C                 db  9Ch
.eh_frame:0000000000005C1D                 db    5
.eh_frame:0000000000005C1E                 db    0
.eh_frame:0000000000005C1F                 db    0
.eh_frame:0000000000005C20                 db  20h
.eh_frame:0000000000005C21                 db 0DDh
.eh_frame:0000000000005C22                 db 0FFh
.eh_frame:0000000000005C23                 db 0FFh
.eh_frame:0000000000005C24                 db  98h
.eh_frame:0000000000005C25                 db    0
.eh_frame:0000000000005C26                 db    0
.eh_frame:0000000000005C27                 db    0
.eh_frame:0000000000005C28                 db    0
.eh_frame:0000000000005C29                 db  44h ; D
.eh_frame:0000000000005C2A                 db  0Eh
.eh_frame:0000000000005C2B                 db  50h ; P
.eh_frame:0000000000005C2C                 db    2
.eh_frame:0000000000005C2D                 db  8Eh
.eh_frame:0000000000005C2E                 db  0Ah
.eh_frame:0000000000005C2F                 db  0Eh
.eh_frame:0000000000005C30                 db    8
.eh_frame:0000000000005C31                 db  41h ; A
.eh_frame:0000000000005C32                 db  0Bh
.eh_frame:0000000000005C33                 db    0
.eh_frame:0000000000005C34                 db  10h
.eh_frame:0000000000005C35                 db    0
.eh_frame:0000000000005C36                 db    0
.eh_frame:0000000000005C37                 db    0
.eh_frame:0000000000005C38                 db 0B8h
.eh_frame:0000000000005C39                 db    5
.eh_frame:0000000000005C3A                 db    0
.eh_frame:0000000000005C3B                 db    0
.eh_frame:0000000000005C3C                 db 0A4h
.eh_frame:0000000000005C3D                 db 0DDh
.eh_frame:0000000000005C3E                 db 0FFh
.eh_frame:0000000000005C3F                 db 0FFh
.eh_frame:0000000000005C40                 db  10h
.eh_frame:0000000000005C41                 db    0
.eh_frame:0000000000005C42                 db    0
.eh_frame:0000000000005C43                 db    0
.eh_frame:0000000000005C44                 db    0
.eh_frame:0000000000005C45                 db    0
.eh_frame:0000000000005C46                 db    0
.eh_frame:0000000000005C47                 db    0
.eh_frame:0000000000005C48                 db  10h
.eh_frame:0000000000005C49                 db    0
.eh_frame:0000000000005C4A                 db    0
.eh_frame:0000000000005C4B                 db    0
.eh_frame:0000000000005C4C                 db 0CCh
.eh_frame:0000000000005C4D                 db    5
.eh_frame:0000000000005C4E                 db    0
.eh_frame:0000000000005C4F                 db    0
.eh_frame:0000000000005C50                 db 0A0h
.eh_frame:0000000000005C51                 db 0DDh
.eh_frame:0000000000005C52                 db 0FFh
.eh_frame:0000000000005C53                 db 0FFh
.eh_frame:0000000000005C54                 db  11h
.eh_frame:0000000000005C55                 db    0
.eh_frame:0000000000005C56                 db    0
.eh_frame:0000000000005C57                 db    0
.eh_frame:0000000000005C58                 db    0
.eh_frame:0000000000005C59                 db    0
.eh_frame:0000000000005C5A                 db    0
.eh_frame:0000000000005C5B                 db    0
.eh_frame:0000000000005C5C                 db  10h
.eh_frame:0000000000005C5D                 db    0
.eh_frame:0000000000005C5E                 db    0
.eh_frame:0000000000005C5F                 db    0
.eh_frame:0000000000005C60                 db 0E0h
.eh_frame:0000000000005C61                 db    5
.eh_frame:0000000000005C62                 db    0
.eh_frame:0000000000005C63                 db    0
.eh_frame:0000000000005C64                 db 0ACh
.eh_frame:0000000000005C65                 db 0DDh
.eh_frame:0000000000005C66                 db 0FFh
.eh_frame:0000000000005C67                 db 0FFh
.eh_frame:0000000000005C68                 db  0Ah
.eh_frame:0000000000005C69                 db    0
.eh_frame:0000000000005C6A                 db    0
.eh_frame:0000000000005C6B                 db    0
.eh_frame:0000000000005C6C                 db    0
.eh_frame:0000000000005C6D                 db    0
.eh_frame:0000000000005C6E                 db    0
.eh_frame:0000000000005C6F                 db    0
.eh_frame:0000000000005C70                 db  18h
.eh_frame:0000000000005C71                 db    0
.eh_frame:0000000000005C72                 db    0
.eh_frame:0000000000005C73                 db    0
.eh_frame:0000000000005C74                 db 0F4h
.eh_frame:0000000000005C75                 db    5
.eh_frame:0000000000005C76                 db    0
.eh_frame:0000000000005C77                 db    0
.eh_frame:0000000000005C78                 db 0A8h
.eh_frame:0000000000005C79                 db 0DDh
.eh_frame:0000000000005C7A                 db 0FFh
.eh_frame:0000000000005C7B                 db 0FFh
.eh_frame:0000000000005C7C                 db  8Eh
.eh_frame:0000000000005C7D                 db    0
.eh_frame:0000000000005C7E                 db    0
.eh_frame:0000000000005C7F                 db    0
.eh_frame:0000000000005C80                 db    0
.eh_frame:0000000000005C81                 db  44h ; D
.eh_frame:0000000000005C82                 db  0Eh
.eh_frame:0000000000005C83                 db  50h ; P
.eh_frame:0000000000005C84                 db    2
.eh_frame:0000000000005C85                 db  7Fh ; 
.eh_frame:0000000000005C86                 db  0Ah
.eh_frame:0000000000005C87                 db  0Eh
.eh_frame:0000000000005C88                 db    8
.eh_frame:0000000000005C89                 db  41h ; A
.eh_frame:0000000000005C8A                 db  0Bh
.eh_frame:0000000000005C8B                 db    0
.eh_frame:0000000000005C8C                 db  18h
.eh_frame:0000000000005C8D                 db    0
.eh_frame:0000000000005C8E                 db    0
.eh_frame:0000000000005C8F                 db    0
.eh_frame:0000000000005C90                 db  10h
.eh_frame:0000000000005C91                 db    6
.eh_frame:0000000000005C92                 db    0
.eh_frame:0000000000005C93                 db    0
.eh_frame:0000000000005C94                 db  1Ch
.eh_frame:0000000000005C95                 db 0DEh
.eh_frame:0000000000005C96                 db 0FFh
.eh_frame:0000000000005C97                 db 0FFh
.eh_frame:0000000000005C98                 db  91h
.eh_frame:0000000000005C99                 db    0
.eh_frame:0000000000005C9A                 db    0
.eh_frame:0000000000005C9B                 db    0
.eh_frame:0000000000005C9C                 db    0
.eh_frame:0000000000005C9D                 db  44h ; D
.eh_frame:0000000000005C9E                 db  0Eh
.eh_frame:0000000000005C9F                 db  50h ; P
.eh_frame:0000000000005CA0                 db    2
.eh_frame:0000000000005CA1                 db  82h
.eh_frame:0000000000005CA2                 db  0Ah
.eh_frame:0000000000005CA3                 db  0Eh
.eh_frame:0000000000005CA4                 db    8
.eh_frame:0000000000005CA5                 db  41h ; A
.eh_frame:0000000000005CA6                 db  0Bh
.eh_frame:0000000000005CA7                 db    0
.eh_frame:0000000000005CA8                 db  10h
.eh_frame:0000000000005CA9                 db    0
.eh_frame:0000000000005CAA                 db    0
.eh_frame:0000000000005CAB                 db    0
.eh_frame:0000000000005CAC                 db  2Ch ; ,
.eh_frame:0000000000005CAD                 db    6
.eh_frame:0000000000005CAE                 db    0
.eh_frame:0000000000005CAF                 db    0
.eh_frame:0000000000005CB0                 db 0A0h
.eh_frame:0000000000005CB1                 db 0DEh
.eh_frame:0000000000005CB2                 db 0FFh
.eh_frame:0000000000005CB3                 db 0FFh
.eh_frame:0000000000005CB4                 db  0Ch
.eh_frame:0000000000005CB5                 db    0
.eh_frame:0000000000005CB6                 db    0
.eh_frame:0000000000005CB7                 db    0
.eh_frame:0000000000005CB8                 db    0
.eh_frame:0000000000005CB9                 db    0
.eh_frame:0000000000005CBA                 db    0
.eh_frame:0000000000005CBB                 db    0
.eh_frame:0000000000005CBC                 db  10h
.eh_frame:0000000000005CBD                 db    0
.eh_frame:0000000000005CBE                 db    0
.eh_frame:0000000000005CBF                 db    0
.eh_frame:0000000000005CC0                 db  40h ; @
.eh_frame:0000000000005CC1                 db    6
.eh_frame:0000000000005CC2                 db    0
.eh_frame:0000000000005CC3                 db    0
.eh_frame:0000000000005CC4                 db  9Ch
.eh_frame:0000000000005CC5                 db 0DEh
.eh_frame:0000000000005CC6                 db 0FFh
.eh_frame:0000000000005CC7                 db 0FFh
.eh_frame:0000000000005CC8                 db  17h
.eh_frame:0000000000005CC9                 db    0
.eh_frame:0000000000005CCA                 db    0
.eh_frame:0000000000005CCB                 db    0
.eh_frame:0000000000005CCC                 db    0
.eh_frame:0000000000005CCD                 db    0
.eh_frame:0000000000005CCE                 db    0
.eh_frame:0000000000005CCF                 db    0
.eh_frame:0000000000005CD0                 db  10h
.eh_frame:0000000000005CD1                 db    0
.eh_frame:0000000000005CD2                 db    0
.eh_frame:0000000000005CD3                 db    0
.eh_frame:0000000000005CD4                 db  54h ; T
.eh_frame:0000000000005CD5                 db    6
.eh_frame:0000000000005CD6                 db    0
.eh_frame:0000000000005CD7                 db    0
.eh_frame:0000000000005CD8                 db 0A8h
.eh_frame:0000000000005CD9                 db 0DEh
.eh_frame:0000000000005CDA                 db 0FFh
.eh_frame:0000000000005CDB                 db 0FFh
.eh_frame:0000000000005CDC                 db  13h
.eh_frame:0000000000005CDD                 db    0
.eh_frame:0000000000005CDE                 db    0
.eh_frame:0000000000005CDF                 db    0
.eh_frame:0000000000005CE0                 db    0
.eh_frame:0000000000005CE1                 db    0
.eh_frame:0000000000005CE2                 db    0
.eh_frame:0000000000005CE3                 db    0
.eh_frame:0000000000005CE4                 db  10h
.eh_frame:0000000000005CE5                 db    0
.eh_frame:0000000000005CE6                 db    0
.eh_frame:0000000000005CE7                 db    0
.eh_frame:0000000000005CE8                 db  68h ; h
.eh_frame:0000000000005CE9                 db    6
.eh_frame:0000000000005CEA                 db    0
.eh_frame:0000000000005CEB                 db    0
.eh_frame:0000000000005CEC                 db 0B4h
.eh_frame:0000000000005CED                 db 0DEh
.eh_frame:0000000000005CEE                 db 0FFh
.eh_frame:0000000000005CEF                 db 0FFh
.eh_frame:0000000000005CF0                 db  0Ch
.eh_frame:0000000000005CF1                 db    0
.eh_frame:0000000000005CF2                 db    0
.eh_frame:0000000000005CF3                 db    0
.eh_frame:0000000000005CF4                 db    0
.eh_frame:0000000000005CF5                 db    0
.eh_frame:0000000000005CF6                 db    0
.eh_frame:0000000000005CF7                 db    0
.eh_frame:0000000000005CF8                 db  10h
.eh_frame:0000000000005CF9                 db    0
.eh_frame:0000000000005CFA                 db    0
.eh_frame:0000000000005CFB                 db    0
.eh_frame:0000000000005CFC                 db  7Ch ; |
.eh_frame:0000000000005CFD                 db    6
.eh_frame:0000000000005CFE                 db    0
.eh_frame:0000000000005CFF                 db    0
.eh_frame:0000000000005D00                 db 0B0h
.eh_frame:0000000000005D01                 db 0DEh
.eh_frame:0000000000005D02                 db 0FFh
.eh_frame:0000000000005D03                 db 0FFh
.eh_frame:0000000000005D04                 db  14h
.eh_frame:0000000000005D05                 db    0
.eh_frame:0000000000005D06                 db    0
.eh_frame:0000000000005D07                 db    0
.eh_frame:0000000000005D08                 db    0
.eh_frame:0000000000005D09                 db    0
.eh_frame:0000000000005D0A                 db    0
.eh_frame:0000000000005D0B                 db    0
.eh_frame:0000000000005D0C                 db  10h
.eh_frame:0000000000005D0D                 db    0
.eh_frame:0000000000005D0E                 db    0
.eh_frame:0000000000005D0F                 db    0
.eh_frame:0000000000005D10                 db  90h
.eh_frame:0000000000005D11                 db    6
.eh_frame:0000000000005D12                 db    0
.eh_frame:0000000000005D13                 db    0
.eh_frame:0000000000005D14                 db 0BCh
.eh_frame:0000000000005D15                 db 0DEh
.eh_frame:0000000000005D16                 db 0FFh
.eh_frame:0000000000005D17                 db 0FFh
.eh_frame:0000000000005D18                 db  13h
.eh_frame:0000000000005D19                 db    0
.eh_frame:0000000000005D1A                 db    0
.eh_frame:0000000000005D1B                 db    0
.eh_frame:0000000000005D1C                 db    0
.eh_frame:0000000000005D1D                 db    0
.eh_frame:0000000000005D1E                 db    0
.eh_frame:0000000000005D1F                 db    0
.eh_frame:0000000000005D20                 db  14h
.eh_frame:0000000000005D21                 db    0
.eh_frame:0000000000005D22                 db    0
.eh_frame:0000000000005D23                 db    0
.eh_frame:0000000000005D24                 db 0A4h
.eh_frame:0000000000005D25                 db    6
.eh_frame:0000000000005D26                 db    0
.eh_frame:0000000000005D27                 db    0
.eh_frame:0000000000005D28                 db 0C8h
.eh_frame:0000000000005D29                 db 0DEh
.eh_frame:0000000000005D2A                 db 0FFh
.eh_frame:0000000000005D2B                 db 0FFh
.eh_frame:0000000000005D2C                 db  18h
.eh_frame:0000000000005D2D                 db    0
.eh_frame:0000000000005D2E                 db    0
.eh_frame:0000000000005D2F                 db    0
.eh_frame:0000000000005D30                 db    0
.eh_frame:0000000000005D31                 db    0
.eh_frame:0000000000005D32                 db    0
.eh_frame:0000000000005D33                 db    0
.eh_frame:0000000000005D34                 db    0
.eh_frame:0000000000005D35                 db    0
.eh_frame:0000000000005D36                 db    0
.eh_frame:0000000000005D37                 db    0
.eh_frame:0000000000005D38                 db  34h ; 4
.eh_frame:0000000000005D39                 db    0
.eh_frame:0000000000005D3A                 db    0
.eh_frame:0000000000005D3B                 db    0
.eh_frame:0000000000005D3C                 db 0BCh
.eh_frame:0000000000005D3D                 db    6
.eh_frame:0000000000005D3E                 db    0
.eh_frame:0000000000005D3F                 db    0
.eh_frame:0000000000005D40                 db 0D0h
.eh_frame:0000000000005D41                 db 0DEh
.eh_frame:0000000000005D42                 db 0FFh
.eh_frame:0000000000005D43                 db 0FFh
.eh_frame:0000000000005D44                 db  5Eh ; ^
.eh_frame:0000000000005D45                 db    0
.eh_frame:0000000000005D46                 db    0
.eh_frame:0000000000005D47                 db    0
.eh_frame:0000000000005D48                 db    0
.eh_frame:0000000000005D49                 db  42h ; B
.eh_frame:0000000000005D4A                 db  0Eh
.eh_frame:0000000000005D4B                 db  10h
.eh_frame:0000000000005D4C                 db  8Dh
.eh_frame:0000000000005D4D                 db    2
.eh_frame:0000000000005D4E                 db  42h ; B
.eh_frame:0000000000005D4F                 db  0Eh
.eh_frame:0000000000005D50                 db  18h
.eh_frame:0000000000005D51                 db  8Ch
.eh_frame:0000000000005D52                 db    3
.eh_frame:0000000000005D53                 db  44h ; D
.eh_frame:0000000000005D54                 db  0Eh
.eh_frame:0000000000005D55                 db  20h
.eh_frame:0000000000005D56                 db  86h
.eh_frame:0000000000005D57                 db    4
.eh_frame:0000000000005D58                 db  41h ; A
.eh_frame:0000000000005D59                 db  0Eh
.eh_frame:0000000000005D5A                 db  28h ; (
.eh_frame:0000000000005D5B                 db  83h
.eh_frame:0000000000005D5C                 db    5
.eh_frame:0000000000005D5D                 db  4Ah ; J
.eh_frame:0000000000005D5E                 db  0Eh
.eh_frame:0000000000005D5F                 db  30h ; 0
.eh_frame:0000000000005D60                 db    2
.eh_frame:0000000000005D61                 db  41h ; A
.eh_frame:0000000000005D62                 db  0Eh
.eh_frame:0000000000005D63                 db  28h ; (
.eh_frame:0000000000005D64                 db  44h ; D
.eh_frame:0000000000005D65                 db  0Eh
.eh_frame:0000000000005D66                 db  20h
.eh_frame:0000000000005D67                 db  41h ; A
.eh_frame:0000000000005D68                 db  0Eh
.eh_frame:0000000000005D69                 db  18h
.eh_frame:0000000000005D6A                 db  42h ; B
.eh_frame:0000000000005D6B                 db  0Eh
.eh_frame:0000000000005D6C                 db  10h
.eh_frame:0000000000005D6D                 db  42h ; B
.eh_frame:0000000000005D6E                 db  0Eh
.eh_frame:0000000000005D6F                 db    8
.eh_frame:0000000000005D70                 db  10h
.eh_frame:0000000000005D71                 db    1
.eh_frame:0000000000005D72                 db    0
.eh_frame:0000000000005D73                 db    0
.eh_frame:0000000000005D74                 db 0F4h
.eh_frame:0000000000005D75                 db    6
.eh_frame:0000000000005D76                 db    0
.eh_frame:0000000000005D77                 db    0
.eh_frame:0000000000005D78                 db 0F8h
.eh_frame:0000000000005D79                 db 0DEh
.eh_frame:0000000000005D7A                 db 0FFh
.eh_frame:0000000000005D7B                 db 0FFh
.eh_frame:0000000000005D7C                 db  17h
.eh_frame:0000000000005D7D                 db    4
.eh_frame:0000000000005D7E                 db    0
.eh_frame:0000000000005D7F                 db    0
.eh_frame:0000000000005D80                 db    0
.eh_frame:0000000000005D81                 db  42h ; B
.eh_frame:0000000000005D82                 db  0Eh
.eh_frame:0000000000005D83                 db  10h
.eh_frame:0000000000005D84                 db  8Fh
.eh_frame:0000000000005D85                 db    2
.eh_frame:0000000000005D86                 db  42h ; B
.eh_frame:0000000000005D87                 db  0Eh
.eh_frame:0000000000005D88                 db  18h
.eh_frame:0000000000005D89                 db  8Eh
.eh_frame:0000000000005D8A                 db    3
.eh_frame:0000000000005D8B                 db  42h ; B
.eh_frame:0000000000005D8C                 db  0Eh
.eh_frame:0000000000005D8D                 db  20h
.eh_frame:0000000000005D8E                 db  8Dh
.eh_frame:0000000000005D8F                 db    4
.eh_frame:0000000000005D90                 db  42h ; B
.eh_frame:0000000000005D91                 db  0Eh
.eh_frame:0000000000005D92                 db  28h ; (
.eh_frame:0000000000005D93                 db  8Ch
.eh_frame:0000000000005D94                 db    5
.eh_frame:0000000000005D95                 db  44h ; D
.eh_frame:0000000000005D96                 db  0Eh
.eh_frame:0000000000005D97                 db  30h ; 0
.eh_frame:0000000000005D98                 db  86h
.eh_frame:0000000000005D99                 db    6
.eh_frame:0000000000005D9A                 db  41h ; A
.eh_frame:0000000000005D9B                 db  0Eh
.eh_frame:0000000000005D9C                 db  38h ; 8
.eh_frame:0000000000005D9D                 db  83h
.eh_frame:0000000000005D9E                 db    7
.eh_frame:0000000000005D9F                 db  4Ah ; J
.eh_frame:0000000000005DA0                 db  0Eh
.eh_frame:0000000000005DA1                 db  60h ; `
.eh_frame:0000000000005DA2                 db    2
.eh_frame:0000000000005DA3                 db 0DDh
.eh_frame:0000000000005DA4                 db  0Eh
.eh_frame:0000000000005DA5                 db  68h ; h
.eh_frame:0000000000005DA6                 db  57h ; W
.eh_frame:0000000000005DA7                 db  0Eh
.eh_frame:0000000000005DA8                 db  70h ; p
.eh_frame:0000000000005DA9                 db  42h ; B
.eh_frame:0000000000005DAA                 db  0Eh
.eh_frame:0000000000005DAB                 db  78h ; x
.eh_frame:0000000000005DAC                 db  42h ; B
.eh_frame:0000000000005DAD                 db  0Eh
.eh_frame:0000000000005DAE                 db  80h
.eh_frame:0000000000005DAF                 db    1
.eh_frame:0000000000005DB0                 db  42h ; B
.eh_frame:0000000000005DB1                 db  0Eh
.eh_frame:0000000000005DB2                 db  88h
.eh_frame:0000000000005DB3                 db    1
.eh_frame:0000000000005DB4                 db  42h ; B
.eh_frame:0000000000005DB5                 db  0Eh
.eh_frame:0000000000005DB6                 db  90h
.eh_frame:0000000000005DB7                 db    1
.eh_frame:0000000000005DB8                 db  53h ; S
.eh_frame:0000000000005DB9                 db  0Eh
.eh_frame:0000000000005DBA                 db  60h ; `
.eh_frame:0000000000005DBB                 db  44h ; D
.eh_frame:0000000000005DBC                 db  0Ah
.eh_frame:0000000000005DBD                 db  0Eh
.eh_frame:0000000000005DBE                 db  38h ; 8
.eh_frame:0000000000005DBF                 db  41h ; A
.eh_frame:0000000000005DC0                 db  0Eh
.eh_frame:0000000000005DC1                 db  30h ; 0
.eh_frame:0000000000005DC2                 db  41h ; A
.eh_frame:0000000000005DC3                 db  0Eh
.eh_frame:0000000000005DC4                 db  28h ; (
.eh_frame:0000000000005DC5                 db  42h ; B
.eh_frame:0000000000005DC6                 db  0Eh
.eh_frame:0000000000005DC7                 db  20h
.eh_frame:0000000000005DC8                 db  42h ; B
.eh_frame:0000000000005DC9                 db  0Eh
.eh_frame:0000000000005DCA                 db  18h
.eh_frame:0000000000005DCB                 db  42h ; B
.eh_frame:0000000000005DCC                 db  0Eh
.eh_frame:0000000000005DCD                 db  10h
.eh_frame:0000000000005DCE                 db  42h ; B
.eh_frame:0000000000005DCF                 db  0Eh
.eh_frame:0000000000005DD0                 db    8
.eh_frame:0000000000005DD1                 db  44h ; D
.eh_frame:0000000000005DD2                 db  0Bh
.eh_frame:0000000000005DD3                 db    2
.eh_frame:0000000000005DD4                 db  78h ; x
.eh_frame:0000000000005DD5                 db  0Ah
.eh_frame:0000000000005DD6                 db  0Eh
.eh_frame:0000000000005DD7                 db  68h ; h
.eh_frame:0000000000005DD8                 db  48h ; H
.eh_frame:0000000000005DD9                 db  0Bh
.eh_frame:0000000000005DDA                 db  5Ah ; Z
.eh_frame:0000000000005DDB                 db  0Ah
.eh_frame:0000000000005DDC                 db  0Eh
.eh_frame:0000000000005DDD                 db  38h ; 8
.eh_frame:0000000000005DDE                 db  47h ; G
.eh_frame:0000000000005DDF                 db  0Eh
.eh_frame:0000000000005DE0                 db  30h ; 0
.eh_frame:0000000000005DE1                 db  41h ; A
.eh_frame:0000000000005DE2                 db  0Eh
.eh_frame:0000000000005DE3                 db  28h ; (
.eh_frame:0000000000005DE4                 db  42h ; B
.eh_frame:0000000000005DE5                 db  0Eh
.eh_frame:0000000000005DE6                 db  20h
.eh_frame:0000000000005DE7                 db  42h ; B
.eh_frame:0000000000005DE8                 db  0Eh
.eh_frame:0000000000005DE9                 db  18h
.eh_frame:0000000000005DEA                 db  42h ; B
.eh_frame:0000000000005DEB                 db  0Eh
.eh_frame:0000000000005DEC                 db  10h
.eh_frame:0000000000005DED                 db  42h ; B
.eh_frame:0000000000005DEE                 db  0Eh
.eh_frame:0000000000005DEF                 db    8
.eh_frame:0000000000005DF0                 db  56h ; V
.eh_frame:0000000000005DF1                 db  0Bh
.eh_frame:0000000000005DF2                 db  5Eh ; ^
.eh_frame:0000000000005DF3                 db  0Ah
.eh_frame:0000000000005DF4                 db  0Eh
.eh_frame:0000000000005DF5                 db  38h ; 8
.eh_frame:0000000000005DF6                 db  52h ; R
.eh_frame:0000000000005DF7                 db  0Eh
.eh_frame:0000000000005DF8                 db  30h ; 0
.eh_frame:0000000000005DF9                 db  41h ; A
.eh_frame:0000000000005DFA                 db  0Eh
.eh_frame:0000000000005DFB                 db  28h ; (
.eh_frame:0000000000005DFC                 db  42h ; B
.eh_frame:0000000000005DFD                 db  0Eh
.eh_frame:0000000000005DFE                 db  20h
.eh_frame:0000000000005DFF                 db  42h ; B
.eh_frame:0000000000005E00                 db  0Eh
.eh_frame:0000000000005E01                 db  18h
.eh_frame:0000000000005E02                 db  42h ; B
.eh_frame:0000000000005E03                 db  0Eh
.eh_frame:0000000000005E04                 db  10h
.eh_frame:0000000000005E05                 db  42h ; B
.eh_frame:0000000000005E06                 db  0Eh
.eh_frame:0000000000005E07                 db    8
.eh_frame:0000000000005E08                 db  4Fh ; O
.eh_frame:0000000000005E09                 db  0Bh
.eh_frame:0000000000005E0A                 db  62h ; b
.eh_frame:0000000000005E0B                 db  0Ah
.eh_frame:0000000000005E0C                 db  0Eh
.eh_frame:0000000000005E0D                 db  38h ; 8
.eh_frame:0000000000005E0E                 db  50h ; P
.eh_frame:0000000000005E0F                 db  0Eh
.eh_frame:0000000000005E10                 db  30h ; 0
.eh_frame:0000000000005E11                 db  41h ; A
.eh_frame:0000000000005E12                 db  0Eh
.eh_frame:0000000000005E13                 db  28h ; (
.eh_frame:0000000000005E14                 db  42h ; B
.eh_frame:0000000000005E15                 db  0Eh
.eh_frame:0000000000005E16                 db  20h
.eh_frame:0000000000005E17                 db  42h ; B
.eh_frame:0000000000005E18                 db  0Eh
.eh_frame:0000000000005E19                 db  18h
.eh_frame:0000000000005E1A                 db  42h ; B
.eh_frame:0000000000005E1B                 db  0Eh
.eh_frame:0000000000005E1C                 db  10h
.eh_frame:0000000000005E1D                 db  42h ; B
.eh_frame:0000000000005E1E                 db  0Eh
.eh_frame:0000000000005E1F                 db    8
.eh_frame:0000000000005E20                 db  55h ; U
.eh_frame:0000000000005E21                 db  0Bh
.eh_frame:0000000000005E22                 db  66h ; f
.eh_frame:0000000000005E23                 db  0Eh
.eh_frame:0000000000005E24                 db  68h ; h
.eh_frame:0000000000005E25                 db  42h ; B
.eh_frame:0000000000005E26                 db  0Eh
.eh_frame:0000000000005E27                 db  70h ; p
.eh_frame:0000000000005E28                 db  5Ch ; \
.eh_frame:0000000000005E29                 db  0Eh
.eh_frame:0000000000005E2A                 db  68h ; h
.eh_frame:0000000000005E2B                 db  41h ; A
.eh_frame:0000000000005E2C                 db  0Eh
.eh_frame:0000000000005E2D                 db  60h ; `
.eh_frame:0000000000005E2E                 db  44h ; D
.eh_frame:0000000000005E2F                 db  0Ah
.eh_frame:0000000000005E30                 db  0Eh
.eh_frame:0000000000005E31                 db  38h ; 8
.eh_frame:0000000000005E32                 db  41h ; A
.eh_frame:0000000000005E33                 db  0Eh
.eh_frame:0000000000005E34                 db  30h ; 0
.eh_frame:0000000000005E35                 db  41h ; A
.eh_frame:0000000000005E36                 db  0Eh
.eh_frame:0000000000005E37                 db  28h ; (
.eh_frame:0000000000005E38                 db  42h ; B
.eh_frame:0000000000005E39                 db  0Eh
.eh_frame:0000000000005E3A                 db  20h
.eh_frame:0000000000005E3B                 db  42h ; B
.eh_frame:0000000000005E3C                 db  0Eh
.eh_frame:0000000000005E3D                 db  18h
.eh_frame:0000000000005E3E                 db  42h ; B
.eh_frame:0000000000005E3F                 db  0Eh
.eh_frame:0000000000005E40                 db  10h
.eh_frame:0000000000005E41                 db  42h ; B
.eh_frame:0000000000005E42                 db  0Eh
.eh_frame:0000000000005E43                 db    8
.eh_frame:0000000000005E44                 db  45h ; E
.eh_frame:0000000000005E45                 db  0Bh
.eh_frame:0000000000005E46                 db  68h ; h
.eh_frame:0000000000005E47                 db  0Ah
.eh_frame:0000000000005E48                 db  0Eh
.eh_frame:0000000000005E49                 db  68h ; h
.eh_frame:0000000000005E4A                 db  48h ; H
.eh_frame:0000000000005E4B                 db  0Bh
.eh_frame:0000000000005E4C                 db  72h ; r
.eh_frame:0000000000005E4D                 db  0Eh
.eh_frame:0000000000005E4E                 db  68h ; h
.eh_frame:0000000000005E4F                 db  45h ; E
.eh_frame:0000000000005E50                 db  0Eh
.eh_frame:0000000000005E51                 db  70h ; p
.eh_frame:0000000000005E52                 db  42h ; B
.eh_frame:0000000000005E53                 db  0Eh
.eh_frame:0000000000005E54                 db  78h ; x
.eh_frame:0000000000005E55                 db  42h ; B
.eh_frame:0000000000005E56                 db  0Eh
.eh_frame:0000000000005E57                 db  80h
.eh_frame:0000000000005E58                 db    1
.eh_frame:0000000000005E59                 db  5Eh ; ^
.eh_frame:0000000000005E5A                 db  0Eh
.eh_frame:0000000000005E5B                 db  60h ; `
.eh_frame:0000000000005E5C                 db  44h ; D
.eh_frame:0000000000005E5D                 db  0Ah
.eh_frame:0000000000005E5E                 db  0Eh
.eh_frame:0000000000005E5F                 db  38h ; 8
.eh_frame:0000000000005E60                 db  41h ; A
.eh_frame:0000000000005E61                 db  0Eh
.eh_frame:0000000000005E62                 db  30h ; 0
.eh_frame:0000000000005E63                 db  41h ; A
.eh_frame:0000000000005E64                 db  0Eh
.eh_frame:0000000000005E65                 db  28h ; (
.eh_frame:0000000000005E66                 db  42h ; B
.eh_frame:0000000000005E67                 db  0Eh
.eh_frame:0000000000005E68                 db  20h
.eh_frame:0000000000005E69                 db  42h ; B
.eh_frame:0000000000005E6A                 db  0Eh
.eh_frame:0000000000005E6B                 db  18h
.eh_frame:0000000000005E6C                 db  42h ; B
.eh_frame:0000000000005E6D                 db  0Eh
.eh_frame:0000000000005E6E                 db  10h
.eh_frame:0000000000005E6F                 db  42h ; B
.eh_frame:0000000000005E70                 db  0Eh
.eh_frame:0000000000005E71                 db    8
.eh_frame:0000000000005E72                 db  41h ; A
.eh_frame:0000000000005E73                 db  0Bh
.eh_frame:0000000000005E74                 db  79h ; y
.eh_frame:0000000000005E75                 db  0Ah
.eh_frame:0000000000005E76                 db  0Eh
.eh_frame:0000000000005E77                 db  68h ; h
.eh_frame:0000000000005E78                 db  42h ; B
.eh_frame:0000000000005E79                 db  0Eh
.eh_frame:0000000000005E7A                 db  70h ; p
.eh_frame:0000000000005E7B                 db  42h ; B
.eh_frame:0000000000005E7C                 db  0Eh
.eh_frame:0000000000005E7D                 db  78h ; x
.eh_frame:0000000000005E7E                 db  42h ; B
.eh_frame:0000000000005E7F                 db  0Eh
.eh_frame:0000000000005E80                 db  80h
.eh_frame:0000000000005E81                 db    1
.eh_frame:0000000000005E82                 db  51h ; Q
.eh_frame:0000000000005E83                 db  0Bh
.eh_frame:0000000000005E84                 db  10h
.eh_frame:0000000000005E85                 db    0
.eh_frame:0000000000005E86                 db    0
.eh_frame:0000000000005E87                 db    0
.eh_frame:0000000000005E88                 db    8
.eh_frame:0000000000005E89                 db    8
.eh_frame:0000000000005E8A                 db    0
.eh_frame:0000000000005E8B                 db    0
.eh_frame:0000000000005E8C                 db    4
.eh_frame:0000000000005E8D                 db 0E2h
.eh_frame:0000000000005E8E                 db 0FFh
.eh_frame:0000000000005E8F                 db 0FFh
.eh_frame:0000000000005E90                 db  20h
.eh_frame:0000000000005E91                 db    0
.eh_frame:0000000000005E92                 db    0
.eh_frame:0000000000005E93                 db    0
.eh_frame:0000000000005E94                 db    0
.eh_frame:0000000000005E95                 db    0
.eh_frame:0000000000005E96                 db    0
.eh_frame:0000000000005E97                 db    0
.eh_frame:0000000000005E98                 db  18h
.eh_frame:0000000000005E99                 db    0
.eh_frame:0000000000005E9A                 db    0
.eh_frame:0000000000005E9B                 db    0
.eh_frame:0000000000005E9C                 db  1Ch
.eh_frame:0000000000005E9D                 db    8
.eh_frame:0000000000005E9E                 db    0
.eh_frame:0000000000005E9F                 db    0
.eh_frame:0000000000005EA0                 db  10h
.eh_frame:0000000000005EA1                 db 0E2h
.eh_frame:0000000000005EA2                 db 0FFh
.eh_frame:0000000000005EA3                 db 0FFh
.eh_frame:0000000000005EA4                 db  78h ; x
.eh_frame:0000000000005EA5                 db    0
.eh_frame:0000000000005EA6                 db    0
.eh_frame:0000000000005EA7                 db    0
.eh_frame:0000000000005EA8                 db    0
.eh_frame:0000000000005EA9                 db  44h ; D
.eh_frame:0000000000005EAA                 db  0Eh
.eh_frame:0000000000005EAB                 db  70h ; p
.eh_frame:0000000000005EAC                 db    2
.eh_frame:0000000000005EAD                 db  60h ; `
.eh_frame:0000000000005EAE                 db  0Ah
.eh_frame:0000000000005EAF                 db  0Eh
.eh_frame:0000000000005EB0                 db    8
.eh_frame:0000000000005EB1                 db  41h ; A
.eh_frame:0000000000005EB2                 db  0Bh
.eh_frame:0000000000005EB3                 db    0
.eh_frame:0000000000005EB4                 db  28h ; (
.eh_frame:0000000000005EB5                 db    0
.eh_frame:0000000000005EB6                 db    0
.eh_frame:0000000000005EB7                 db    0
.eh_frame:0000000000005EB8                 db  38h ; 8
.eh_frame:0000000000005EB9                 db    8
.eh_frame:0000000000005EBA                 db    0
.eh_frame:0000000000005EBB                 db    0
.eh_frame:0000000000005EBC                 db  74h ; t
.eh_frame:0000000000005EBD                 db 0E2h
.eh_frame:0000000000005EBE                 db 0FFh
.eh_frame:0000000000005EBF                 db 0FFh
.eh_frame:0000000000005EC0                 db 0D5h
.eh_frame:0000000000005EC1                 db    0
.eh_frame:0000000000005EC2                 db    0
.eh_frame:0000000000005EC3                 db    0
.eh_frame:0000000000005EC4                 db    0
.eh_frame:0000000000005EC5                 db  41h ; A
.eh_frame:0000000000005EC6                 db  0Eh
.eh_frame:0000000000005EC7                 db  10h
.eh_frame:0000000000005EC8                 db  86h
.eh_frame:0000000000005EC9                 db    2
.eh_frame:0000000000005ECA                 db  41h ; A
.eh_frame:0000000000005ECB                 db  0Eh
.eh_frame:0000000000005ECC                 db  18h
.eh_frame:0000000000005ECD                 db  83h
.eh_frame:0000000000005ECE                 db    3
.eh_frame:0000000000005ECF                 db  50h ; P
.eh_frame:0000000000005ED0                 db  0Eh
.eh_frame:0000000000005ED1                 db 0D0h
.eh_frame:0000000000005ED2                 db    1
.eh_frame:0000000000005ED3                 db    2
.eh_frame:0000000000005ED4                 db 0ABh
.eh_frame:0000000000005ED5                 db  0Ah
.eh_frame:0000000000005ED6                 db  0Eh
.eh_frame:0000000000005ED7                 db  18h
.eh_frame:0000000000005ED8                 db  41h ; A
.eh_frame:0000000000005ED9                 db  0Eh
.eh_frame:0000000000005EDA                 db  10h
.eh_frame:0000000000005EDB                 db  41h ; A
.eh_frame:0000000000005EDC                 db  0Eh
.eh_frame:0000000000005EDD                 db    8
.eh_frame:0000000000005EDE                 db  41h ; A
.eh_frame:0000000000005EDF                 db  0Bh
.eh_frame:0000000000005EE0                 db  1Ch
.eh_frame:0000000000005EE1                 db    0
.eh_frame:0000000000005EE2                 db    0
.eh_frame:0000000000005EE3                 db    0
.eh_frame:0000000000005EE4                 db  64h ; d
.eh_frame:0000000000005EE5                 db    8
.eh_frame:0000000000005EE6                 db    0
.eh_frame:0000000000005EE7                 db    0
.eh_frame:0000000000005EE8                 db  28h ; (
.eh_frame:0000000000005EE9                 db 0E3h
.eh_frame:0000000000005EEA                 db 0FFh
.eh_frame:0000000000005EEB                 db 0FFh
.eh_frame:0000000000005EEC                 db  80h
.eh_frame:0000000000005EED                 db    0
.eh_frame:0000000000005EEE                 db    0
.eh_frame:0000000000005EEF                 db    0
.eh_frame:0000000000005EF0                 db    0
.eh_frame:0000000000005EF1                 db  41h ; A
.eh_frame:0000000000005EF2                 db  0Eh
.eh_frame:0000000000005EF3                 db  10h
.eh_frame:0000000000005EF4                 db  83h
.eh_frame:0000000000005EF5                 db    2
.eh_frame:0000000000005EF6                 db    2
.eh_frame:0000000000005EF7                 db  7Ah ; z
.eh_frame:0000000000005EF8                 db  0Eh
.eh_frame:0000000000005EF9                 db    8
.eh_frame:0000000000005EFA                 db    0
.eh_frame:0000000000005EFB                 db    0
.eh_frame:0000000000005EFC                 db    0
.eh_frame:0000000000005EFD                 db    0
.eh_frame:0000000000005EFE                 db    0
.eh_frame:0000000000005EFF                 db    0
.eh_frame:0000000000005F00                 db  18h
.eh_frame:0000000000005F01                 db    0
.eh_frame:0000000000005F02                 db    0
.eh_frame:0000000000005F03                 db    0
.eh_frame:0000000000005F04                 db  84h
.eh_frame:0000000000005F05                 db    8
.eh_frame:0000000000005F06                 db    0
.eh_frame:0000000000005F07                 db    0
.eh_frame:0000000000005F08                 db  88h
.eh_frame:0000000000005F09                 db 0E3h
.eh_frame:0000000000005F0A                 db 0FFh
.eh_frame:0000000000005F0B                 db 0FFh
.eh_frame:0000000000005F0C                 db  1Ah
.eh_frame:0000000000005F0D                 db    0
.eh_frame:0000000000005F0E                 db    0
.eh_frame:0000000000005F0F                 db    0
.eh_frame:0000000000005F10                 db    0
.eh_frame:0000000000005F11                 db  41h ; A
.eh_frame:0000000000005F12                 db  0Eh
.eh_frame:0000000000005F13                 db  10h
.eh_frame:0000000000005F14                 db  83h
.eh_frame:0000000000005F15                 db    2
.eh_frame:0000000000005F16                 db  53h ; S
.eh_frame:0000000000005F17                 db  0Ah
.eh_frame:0000000000005F18                 db  0Eh
.eh_frame:0000000000005F19                 db    8
.eh_frame:0000000000005F1A                 db  41h ; A
.eh_frame:0000000000005F1B                 db  0Bh
.eh_frame:0000000000005F1C                 db  10h
.eh_frame:0000000000005F1D                 db    0
.eh_frame:0000000000005F1E                 db    0
.eh_frame:0000000000005F1F                 db    0
.eh_frame:0000000000005F20                 db 0A0h
.eh_frame:0000000000005F21                 db    8
.eh_frame:0000000000005F22                 db    0
.eh_frame:0000000000005F23                 db    0
.eh_frame:0000000000005F24                 db  8Ch
.eh_frame:0000000000005F25                 db 0E3h
.eh_frame:0000000000005F26                 db 0FFh
.eh_frame:0000000000005F27                 db 0FFh
.eh_frame:0000000000005F28                 db  24h ; $
.eh_frame:0000000000005F29                 db    0
.eh_frame:0000000000005F2A                 db    0
.eh_frame:0000000000005F2B                 db    0
.eh_frame:0000000000005F2C                 db    0
.eh_frame:0000000000005F2D                 db  5Fh ; _
.eh_frame:0000000000005F2E                 db  0Eh
.eh_frame:0000000000005F2F                 db  10h
.eh_frame:0000000000005F30                 db  10h
.eh_frame:0000000000005F31                 db    0
.eh_frame:0000000000005F32                 db    0
.eh_frame:0000000000005F33                 db    0
.eh_frame:0000000000005F34                 db 0B4h
.eh_frame:0000000000005F35                 db    8
.eh_frame:0000000000005F36                 db    0
.eh_frame:0000000000005F37                 db    0
.eh_frame:0000000000005F38                 db 0A8h
.eh_frame:0000000000005F39                 db 0E3h
.eh_frame:0000000000005F3A                 db 0FFh
.eh_frame:0000000000005F3B                 db 0FFh
.eh_frame:0000000000005F3C                 db    2
.eh_frame:0000000000005F3D                 db    0
.eh_frame:0000000000005F3E                 db    0
.eh_frame:0000000000005F3F                 db    0
.eh_frame:0000000000005F40                 db    0
.eh_frame:0000000000005F41                 db    0
.eh_frame:0000000000005F42                 db    0
.eh_frame:0000000000005F43                 db    0
.eh_frame:0000000000005F44                 db  20h
.eh_frame:0000000000005F45                 db    0
.eh_frame:0000000000005F46                 db    0
.eh_frame:0000000000005F47                 db    0
.eh_frame:0000000000005F48                 db 0C8h
.eh_frame:0000000000005F49                 db    8
.eh_frame:0000000000005F4A                 db    0
.eh_frame:0000000000005F4B                 db    0
.eh_frame:0000000000005F4C                 db 0A4h
.eh_frame:0000000000005F4D                 db 0E3h
.eh_frame:0000000000005F4E                 db 0FFh
.eh_frame:0000000000005F4F                 db 0FFh
.eh_frame:0000000000005F50                 db  36h ; 6
.eh_frame:0000000000005F51                 db    0
.eh_frame:0000000000005F52                 db    0
.eh_frame:0000000000005F53                 db    0
.eh_frame:0000000000005F54                 db    0
.eh_frame:0000000000005F55                 db  44h ; D
.eh_frame:0000000000005F56                 db  0Eh
.eh_frame:0000000000005F57                 db  10h
.eh_frame:0000000000005F58                 db  83h
.eh_frame:0000000000005F59                 db    2
.eh_frame:0000000000005F5A                 db  5Dh ; ]
.eh_frame:0000000000005F5B                 db  0Ah
.eh_frame:0000000000005F5C                 db  0Eh
.eh_frame:0000000000005F5D                 db    8
.eh_frame:0000000000005F5E                 db  47h ; G
.eh_frame:0000000000005F5F                 db  0Bh
.eh_frame:0000000000005F60                 db  48h ; H
.eh_frame:0000000000005F61                 db  0Ah
.eh_frame:0000000000005F62                 db  0Eh
.eh_frame:0000000000005F63                 db    8
.eh_frame:0000000000005F64                 db  41h ; A
.eh_frame:0000000000005F65                 db  0Bh
.eh_frame:0000000000005F66                 db    0
.eh_frame:0000000000005F67                 db    0
.eh_frame:0000000000005F68                 db  10h
.eh_frame:0000000000005F69                 db    0
.eh_frame:0000000000005F6A                 db    0
.eh_frame:0000000000005F6B                 db    0
.eh_frame:0000000000005F6C                 db 0ECh
.eh_frame:0000000000005F6D                 db    8
.eh_frame:0000000000005F6E                 db    0
.eh_frame:0000000000005F6F                 db    0
.eh_frame:0000000000005F70                 db 0C0h
.eh_frame:0000000000005F71                 db 0E3h
.eh_frame:0000000000005F72                 db 0FFh
.eh_frame:0000000000005F73                 db 0FFh
.eh_frame:0000000000005F74                 db  24h ; $
.eh_frame:0000000000005F75                 db    0
.eh_frame:0000000000005F76                 db    0
.eh_frame:0000000000005F77                 db    0
.eh_frame:0000000000005F78                 db    0
.eh_frame:0000000000005F79                 db  5Fh ; _
.eh_frame:0000000000005F7A                 db  0Eh
.eh_frame:0000000000005F7B                 db  10h
.eh_frame:0000000000005F7C                 db  14h
.eh_frame:0000000000005F7D                 db    0
.eh_frame:0000000000005F7E                 db    0
.eh_frame:0000000000005F7F                 db    0
.eh_frame:0000000000005F80                 db    0
.eh_frame:0000000000005F81                 db    9
.eh_frame:0000000000005F82                 db    0
.eh_frame:0000000000005F83                 db    0
.eh_frame:0000000000005F84                 db 0DCh
.eh_frame:0000000000005F85                 db 0E3h
.eh_frame:0000000000005F86                 db 0FFh
.eh_frame:0000000000005F87                 db 0FFh
.eh_frame:0000000000005F88                 db  82h
.eh_frame:0000000000005F89                 db    0
.eh_frame:0000000000005F8A                 db    0
.eh_frame:0000000000005F8B                 db    0
.eh_frame:0000000000005F8C                 db    0
.eh_frame:0000000000005F8D                 db    2
.eh_frame:0000000000005F8E                 db  5Fh ; _
.eh_frame:0000000000005F8F                 db  0Eh
.eh_frame:0000000000005F90                 db  10h
.eh_frame:0000000000005F91                 db  49h ; I
.eh_frame:0000000000005F92                 db  0Eh
.eh_frame:0000000000005F93                 db    8
.eh_frame:0000000000005F94                 db  14h
.eh_frame:0000000000005F95                 db    0
.eh_frame:0000000000005F96                 db    0
.eh_frame:0000000000005F97                 db    0
.eh_frame:0000000000005F98                 db  18h
.eh_frame:0000000000005F99                 db    9
.eh_frame:0000000000005F9A                 db    0
.eh_frame:0000000000005F9B                 db    0
.eh_frame:0000000000005F9C                 db  54h ; T
.eh_frame:0000000000005F9D                 db 0E4h
.eh_frame:0000000000005F9E                 db 0FFh
.eh_frame:0000000000005F9F                 db 0FFh
.eh_frame:0000000000005FA0                 db  4Ah ; J
.eh_frame:0000000000005FA1                 db    0
.eh_frame:0000000000005FA2                 db    0
.eh_frame:0000000000005FA3                 db    0
.eh_frame:0000000000005FA4                 db    0
.eh_frame:0000000000005FA5                 db    2
.eh_frame:0000000000005FA6                 db  45h ; E
.eh_frame:0000000000005FA7                 db  0Eh
.eh_frame:0000000000005FA8                 db  10h
.eh_frame:0000000000005FA9                 db    0
.eh_frame:0000000000005FAA                 db    0
.eh_frame:0000000000005FAB                 db    0
.eh_frame:0000000000005FAC                 db  18h
.eh_frame:0000000000005FAD                 db    0
.eh_frame:0000000000005FAE                 db    0
.eh_frame:0000000000005FAF                 db    0
.eh_frame:0000000000005FB0                 db  30h ; 0
.eh_frame:0000000000005FB1                 db    9
.eh_frame:0000000000005FB2                 db    0
.eh_frame:0000000000005FB3                 db    0
.eh_frame:0000000000005FB4                 db  8Ch
.eh_frame:0000000000005FB5                 db 0E4h
.eh_frame:0000000000005FB6                 db 0FFh
.eh_frame:0000000000005FB7                 db 0FFh
.eh_frame:0000000000005FB8                 db  17h
.eh_frame:0000000000005FB9                 db    0
.eh_frame:0000000000005FBA                 db    0
.eh_frame:0000000000005FBB                 db    0
.eh_frame:0000000000005FBC                 db    0
.eh_frame:0000000000005FBD                 db  41h ; A
.eh_frame:0000000000005FBE                 db  0Eh
.eh_frame:0000000000005FBF                 db  10h
.eh_frame:0000000000005FC0                 db  83h
.eh_frame:0000000000005FC1                 db    2
.eh_frame:0000000000005FC2                 db  51h ; Q
.eh_frame:0000000000005FC3                 db  0Eh
.eh_frame:0000000000005FC4                 db    8
.eh_frame:0000000000005FC5                 db    0
.eh_frame:0000000000005FC6                 db    0
.eh_frame:0000000000005FC7                 db    0
.eh_frame:0000000000005FC8                 db  18h
.eh_frame:0000000000005FC9                 db    0
.eh_frame:0000000000005FCA                 db    0
.eh_frame:0000000000005FCB                 db    0
.eh_frame:0000000000005FCC                 db  4Ch ; L
.eh_frame:0000000000005FCD                 db    9
.eh_frame:0000000000005FCE                 db    0
.eh_frame:0000000000005FCF                 db    0
.eh_frame:0000000000005FD0                 db  90h
.eh_frame:0000000000005FD1                 db 0E4h
.eh_frame:0000000000005FD2                 db 0FFh
.eh_frame:0000000000005FD3                 db 0FFh
.eh_frame:0000000000005FD4                 db  2Eh ; .
.eh_frame:0000000000005FD5                 db    0
.eh_frame:0000000000005FD6                 db    0
.eh_frame:0000000000005FD7                 db    0
.eh_frame:0000000000005FD8                 db    0
.eh_frame:0000000000005FD9                 db  47h ; G
.eh_frame:0000000000005FDA                 db  0Eh
.eh_frame:0000000000005FDB                 db  10h
.eh_frame:0000000000005FDC                 db  61h ; a
.eh_frame:0000000000005FDD                 db  0Ah
.eh_frame:0000000000005FDE                 db  0Eh
.eh_frame:0000000000005FDF                 db    8
.eh_frame:0000000000005FE0                 db  41h ; A
.eh_frame:0000000000005FE1                 db  0Bh
.eh_frame:0000000000005FE2                 db    0
.eh_frame:0000000000005FE3                 db    0
.eh_frame:0000000000005FE4                 db  24h ; $
.eh_frame:0000000000005FE5                 db    0
.eh_frame:0000000000005FE6                 db    0
.eh_frame:0000000000005FE7                 db    0
.eh_frame:0000000000005FE8                 db  68h ; h
.eh_frame:0000000000005FE9                 db    9
.eh_frame:0000000000005FEA                 db    0
.eh_frame:0000000000005FEB                 db    0
.eh_frame:0000000000005FEC                 db 0A4h
.eh_frame:0000000000005FED                 db 0E4h
.eh_frame:0000000000005FEE                 db 0FFh
.eh_frame:0000000000005FEF                 db 0FFh
.eh_frame:0000000000005FF0                 db  28h ; (
.eh_frame:0000000000005FF1                 db    0
.eh_frame:0000000000005FF2                 db    0
.eh_frame:0000000000005FF3                 db    0
.eh_frame:0000000000005FF4                 db    0
.eh_frame:0000000000005FF5                 db  41h ; A
.eh_frame:0000000000005FF6                 db  0Eh
.eh_frame:0000000000005FF7                 db  10h
.eh_frame:0000000000005FF8                 db  86h
.eh_frame:0000000000005FF9                 db    2
.eh_frame:0000000000005FFA                 db  41h ; A
.eh_frame:0000000000005FFB                 db  0Eh
.eh_frame:0000000000005FFC                 db  18h
.eh_frame:0000000000005FFD                 db  83h
.eh_frame:0000000000005FFE                 db    3
.eh_frame:0000000000005FFF                 db  4Dh ; M
.eh_frame:0000000000006000                 db  0Eh
.eh_frame:0000000000006001                 db  20h
.eh_frame:0000000000006002                 db  49h ; I
.eh_frame:0000000000006003                 db  0Eh
.eh_frame:0000000000006004                 db  18h
.eh_frame:0000000000006005                 db  47h ; G
.eh_frame:0000000000006006                 db  0Eh
.eh_frame:0000000000006007                 db  10h
.eh_frame:0000000000006008                 db  41h ; A
.eh_frame:0000000000006009                 db  0Eh
.eh_frame:000000000000600A                 db    8
.eh_frame:000000000000600B                 db    0
.eh_frame:000000000000600C                 db  18h
.eh_frame:000000000000600D                 db    0
.eh_frame:000000000000600E                 db    0
.eh_frame:000000000000600F                 db    0
.eh_frame:0000000000006010                 db  90h
.eh_frame:0000000000006011                 db    9
.eh_frame:0000000000006012                 db    0
.eh_frame:0000000000006013                 db    0
.eh_frame:0000000000006014                 db 0ACh
.eh_frame:0000000000006015                 db 0E4h
.eh_frame:0000000000006016                 db 0FFh
.eh_frame:0000000000006017                 db 0FFh
.eh_frame:0000000000006018                 db  13h
.eh_frame:0000000000006019                 db    0
.eh_frame:000000000000601A                 db    0
.eh_frame:000000000000601B                 db    0
.eh_frame:000000000000601C                 db    0
.eh_frame:000000000000601D                 db  41h ; A
.eh_frame:000000000000601E                 db  0Eh
.eh_frame:000000000000601F                 db  10h
.eh_frame:0000000000006020                 db  83h
.eh_frame:0000000000006021                 db    2
.eh_frame:0000000000006022                 db  50h ; P
.eh_frame:0000000000006023                 db  0Eh
.eh_frame:0000000000006024                 db    8
.eh_frame:0000000000006025                 db    0
.eh_frame:0000000000006026                 db    0
.eh_frame:0000000000006027                 db    0
.eh_frame:0000000000006028                 db  14h
.eh_frame:0000000000006029                 db    0
.eh_frame:000000000000602A                 db    0
.eh_frame:000000000000602B                 db    0
.eh_frame:000000000000602C                 db 0ACh
.eh_frame:000000000000602D                 db    9
.eh_frame:000000000000602E                 db    0
.eh_frame:000000000000602F                 db    0
.eh_frame:0000000000006030                 db 0B0h
.eh_frame:0000000000006031                 db 0E4h
.eh_frame:0000000000006032                 db 0FFh
.eh_frame:0000000000006033                 db 0FFh
.eh_frame:0000000000006034                 db  35h ; 5
.eh_frame:0000000000006035                 db    0
.eh_frame:0000000000006036                 db    0
.eh_frame:0000000000006037                 db    0
.eh_frame:0000000000006038                 db    0
.eh_frame:0000000000006039                 db  4Bh ; K
.eh_frame:000000000000603A                 db  0Eh
.eh_frame:000000000000603B                 db  10h
.eh_frame:000000000000603C                 db    0
.eh_frame:000000000000603D                 db    0
.eh_frame:000000000000603E                 db    0
.eh_frame:000000000000603F                 db    0
.eh_frame:0000000000006040                 db  3Ch ; <
.eh_frame:0000000000006041                 db    0
.eh_frame:0000000000006042                 db    0
.eh_frame:0000000000006043                 db    0
.eh_frame:0000000000006044                 db 0C4h
.eh_frame:0000000000006045                 db    9
.eh_frame:0000000000006046                 db    0
.eh_frame:0000000000006047                 db    0
.eh_frame:0000000000006048                 db 0D8h
.eh_frame:0000000000006049                 db 0E4h
.eh_frame:000000000000604A                 db 0FFh
.eh_frame:000000000000604B                 db 0FFh
.eh_frame:000000000000604C                 db  83h
.eh_frame:000000000000604D                 db    0
.eh_frame:000000000000604E                 db    0
.eh_frame:000000000000604F                 db    0
.eh_frame:0000000000006050                 db    0
.eh_frame:0000000000006051                 db  42h ; B
.eh_frame:0000000000006052                 db  0Eh
.eh_frame:0000000000006053                 db  10h
.eh_frame:0000000000006054                 db  8Dh
.eh_frame:0000000000006055                 db    2
.eh_frame:0000000000006056                 db  42h ; B
.eh_frame:0000000000006057                 db  0Eh
.eh_frame:0000000000006058                 db  18h
.eh_frame:0000000000006059                 db  8Ch
.eh_frame:000000000000605A                 db    3
.eh_frame:000000000000605B                 db  44h ; D
.eh_frame:000000000000605C                 db  0Eh
.eh_frame:000000000000605D                 db  20h
.eh_frame:000000000000605E                 db  86h
.eh_frame:000000000000605F                 db    4
.eh_frame:0000000000006060                 db  41h ; A
.eh_frame:0000000000006061                 db  0Eh
.eh_frame:0000000000006062                 db  28h ; (
.eh_frame:0000000000006063                 db  83h
.eh_frame:0000000000006064                 db    5
.eh_frame:0000000000006065                 db  4Ah ; J
.eh_frame:0000000000006066                 db  0Eh
.eh_frame:0000000000006067                 db  40h ; @
.eh_frame:0000000000006068                 db    2
.eh_frame:0000000000006069                 db  64h ; d
.eh_frame:000000000000606A                 db  0Ah
.eh_frame:000000000000606B                 db  0Eh
.eh_frame:000000000000606C                 db  28h ; (
.eh_frame:000000000000606D                 db  41h ; A
.eh_frame:000000000000606E                 db  0Eh
.eh_frame:000000000000606F                 db  20h
.eh_frame:0000000000006070                 db  41h ; A
.eh_frame:0000000000006071                 db  0Eh
.eh_frame:0000000000006072                 db  18h
.eh_frame:0000000000006073                 db  42h ; B
.eh_frame:0000000000006074                 db  0Eh
.eh_frame:0000000000006075                 db  10h
.eh_frame:0000000000006076                 db  42h ; B
.eh_frame:0000000000006077                 db  0Eh
.eh_frame:0000000000006078                 db    8
.eh_frame:0000000000006079                 db  41h ; A
.eh_frame:000000000000607A                 db  0Bh
.eh_frame:000000000000607B                 db    0
.eh_frame:000000000000607C                 db    0
.eh_frame:000000000000607D                 db    0
.eh_frame:000000000000607E                 db    0
.eh_frame:000000000000607F                 db    0
.eh_frame:0000000000006080                 db  4Ch ; L
.eh_frame:0000000000006081                 db    0
.eh_frame:0000000000006082                 db    0
.eh_frame:0000000000006083                 db    0
.eh_frame:0000000000006084                 db    4
.eh_frame:0000000000006085                 db  0Ah
.eh_frame:0000000000006086                 db    0
.eh_frame:0000000000006087                 db    0
.eh_frame:0000000000006088                 db  28h ; (
.eh_frame:0000000000006089                 db 0E5h
.eh_frame:000000000000608A                 db 0FFh
.eh_frame:000000000000608B                 db 0FFh
.eh_frame:000000000000608C                 db  7Dh ; }
.eh_frame:000000000000608D                 db    0
.eh_frame:000000000000608E                 db    0
.eh_frame:000000000000608F                 db    0
.eh_frame:0000000000006090                 db    0
.eh_frame:0000000000006091                 db  42h ; B
.eh_frame:0000000000006092                 db  0Eh
.eh_frame:0000000000006093                 db  10h
.eh_frame:0000000000006094                 db  8Ch
.eh_frame:0000000000006095                 db    2
.eh_frame:0000000000006096                 db  41h ; A
.eh_frame:0000000000006097                 db  0Eh
.eh_frame:0000000000006098                 db  18h
.eh_frame:0000000000006099                 db  86h
.eh_frame:000000000000609A                 db    3
.eh_frame:000000000000609B                 db  44h ; D
.eh_frame:000000000000609C                 db  0Eh
.eh_frame:000000000000609D                 db  20h
.eh_frame:000000000000609E                 db  83h
.eh_frame:000000000000609F                 db    4
.eh_frame:00000000000060A0                 db  69h ; i
.eh_frame:00000000000060A1                 db  0Ah
.eh_frame:00000000000060A2                 db  0Eh
.eh_frame:00000000000060A3                 db  18h
.eh_frame:00000000000060A4                 db  41h ; A
.eh_frame:00000000000060A5                 db  0Eh
.eh_frame:00000000000060A6                 db  10h
.eh_frame:00000000000060A7                 db  42h ; B
.eh_frame:00000000000060A8                 db  0Eh
.eh_frame:00000000000060A9                 db    8
.eh_frame:00000000000060AA                 db  45h ; E
.eh_frame:00000000000060AB                 db  0Bh
.eh_frame:00000000000060AC                 db  55h ; U
.eh_frame:00000000000060AD                 db  0Ah
.eh_frame:00000000000060AE                 db  0Eh
.eh_frame:00000000000060AF                 db  18h
.eh_frame:00000000000060B0                 db  41h ; A
.eh_frame:00000000000060B1                 db  0Eh
.eh_frame:00000000000060B2                 db  10h
.eh_frame:00000000000060B3                 db  42h ; B
.eh_frame:00000000000060B4                 db  0Eh
.eh_frame:00000000000060B5                 db    8
.eh_frame:00000000000060B6                 db  48h ; H
.eh_frame:00000000000060B7                 db  0Bh
.eh_frame:00000000000060B8                 db  41h ; A
.eh_frame:00000000000060B9                 db  0Ah
.eh_frame:00000000000060BA                 db  0Eh
.eh_frame:00000000000060BB                 db  18h
.eh_frame:00000000000060BC                 db  46h ; F
.eh_frame:00000000000060BD                 db  0Eh
.eh_frame:00000000000060BE                 db  10h
.eh_frame:00000000000060BF                 db  42h ; B
.eh_frame:00000000000060C0                 db  0Eh
.eh_frame:00000000000060C1                 db    8
.eh_frame:00000000000060C2                 db  47h ; G
.eh_frame:00000000000060C3                 db  0Bh
.eh_frame:00000000000060C4                 db  49h ; I
.eh_frame:00000000000060C5                 db  0Eh
.eh_frame:00000000000060C6                 db  18h
.eh_frame:00000000000060C7                 db  41h ; A
.eh_frame:00000000000060C8                 db  0Eh
.eh_frame:00000000000060C9                 db  10h
.eh_frame:00000000000060CA                 db  42h ; B
.eh_frame:00000000000060CB                 db  0Eh
.eh_frame:00000000000060CC                 db    8
.eh_frame:00000000000060CD                 db    0
.eh_frame:00000000000060CE                 db    0
.eh_frame:00000000000060CF                 db    0
.eh_frame:00000000000060D0                 db  1Ch
.eh_frame:00000000000060D1                 db    0
.eh_frame:00000000000060D2                 db    0
.eh_frame:00000000000060D3                 db    0
.eh_frame:00000000000060D4                 db  54h ; T
.eh_frame:00000000000060D5                 db  0Ah
.eh_frame:00000000000060D6                 db    0
.eh_frame:00000000000060D7                 db    0
.eh_frame:00000000000060D8                 db  58h ; X
.eh_frame:00000000000060D9                 db 0E5h
.eh_frame:00000000000060DA                 db 0FFh
.eh_frame:00000000000060DB                 db 0FFh
.eh_frame:00000000000060DC                 db  60h ; `
.eh_frame:00000000000060DD                 db    0
.eh_frame:00000000000060DE                 db    0
.eh_frame:00000000000060DF                 db    0
.eh_frame:00000000000060E0                 db    0
.eh_frame:00000000000060E1                 db  44h ; D
.eh_frame:00000000000060E2                 db  0Eh
.eh_frame:00000000000060E3                 db  10h
.eh_frame:00000000000060E4                 db  75h ; u
.eh_frame:00000000000060E5                 db  0Ah
.eh_frame:00000000000060E6                 db  0Eh
.eh_frame:00000000000060E7                 db    8
.eh_frame:00000000000060E8                 db  47h ; G
.eh_frame:00000000000060E9                 db  0Bh
.eh_frame:00000000000060EA                 db  5Fh ; _
.eh_frame:00000000000060EB                 db  0Eh
.eh_frame:00000000000060EC                 db    8
.eh_frame:00000000000060ED                 db    0
.eh_frame:00000000000060EE                 db    0
.eh_frame:00000000000060EF                 db    0
.eh_frame:00000000000060F0                 db  1Ch
.eh_frame:00000000000060F1                 db    0
.eh_frame:00000000000060F2                 db    0
.eh_frame:00000000000060F3                 db    0
.eh_frame:00000000000060F4                 db  74h ; t
.eh_frame:00000000000060F5                 db  0Ah
.eh_frame:00000000000060F6                 db    0
.eh_frame:00000000000060F7                 db    0
.eh_frame:00000000000060F8                 db  98h
.eh_frame:00000000000060F9                 db 0E5h
.eh_frame:00000000000060FA                 db 0FFh
.eh_frame:00000000000060FB                 db 0FFh
.eh_frame:00000000000060FC                 db  3Ch ; <
.eh_frame:00000000000060FD                 db    0
.eh_frame:00000000000060FE                 db    0
.eh_frame:00000000000060FF                 db    0
.eh_frame:0000000000006100                 db    0
.eh_frame:0000000000006101                 db  44h ; D
.eh_frame:0000000000006102                 db  0Eh
.eh_frame:0000000000006103                 db  10h
.eh_frame:0000000000006104                 db  61h ; a
.eh_frame:0000000000006105                 db  0Ah
.eh_frame:0000000000006106                 db  0Eh
.eh_frame:0000000000006107                 db    8
.eh_frame:0000000000006108                 db  4Bh ; K
.eh_frame:0000000000006109                 db  0Bh
.eh_frame:000000000000610A                 db  4Bh ; K
.eh_frame:000000000000610B                 db  0Eh
.eh_frame:000000000000610C                 db    8
.eh_frame:000000000000610D                 db    0
.eh_frame:000000000000610E                 db    0
.eh_frame:000000000000610F                 db    0
.eh_frame:0000000000006110                 db  34h ; 4
.eh_frame:0000000000006111                 db    0
.eh_frame:0000000000006112                 db    0
.eh_frame:0000000000006113                 db    0
.eh_frame:0000000000006114                 db  94h
.eh_frame:0000000000006115                 db  0Ah
.eh_frame:0000000000006116                 db    0
.eh_frame:0000000000006117                 db    0
.eh_frame:0000000000006118                 db 0B8h
.eh_frame:0000000000006119                 db 0E5h
.eh_frame:000000000000611A                 db 0FFh
.eh_frame:000000000000611B                 db 0FFh
.eh_frame:000000000000611C                 db  7Bh ; {
.eh_frame:000000000000611D                 db    0
.eh_frame:000000000000611E                 db    0
.eh_frame:000000000000611F                 db    0
.eh_frame:0000000000006120                 db    0
.eh_frame:0000000000006121                 db  42h ; B
.eh_frame:0000000000006122                 db  0Eh
.eh_frame:0000000000006123                 db  10h
.eh_frame:0000000000006124                 db  8Ch
.eh_frame:0000000000006125                 db    2
.eh_frame:0000000000006126                 db  41h ; A
.eh_frame:0000000000006127                 db  0Eh
.eh_frame:0000000000006128                 db  18h
.eh_frame:0000000000006129                 db  86h
.eh_frame:000000000000612A                 db    3
.eh_frame:000000000000612B                 db  41h ; A
.eh_frame:000000000000612C                 db  0Eh
.eh_frame:000000000000612D                 db  20h
.eh_frame:000000000000612E                 db  83h
.eh_frame:000000000000612F                 db    4
.eh_frame:0000000000006130                 db  7Dh ; }
.eh_frame:0000000000006131                 db  0Ah
.eh_frame:0000000000006132                 db  0Eh
.eh_frame:0000000000006133                 db  18h
.eh_frame:0000000000006134                 db  41h ; A
.eh_frame:0000000000006135                 db  0Eh
.eh_frame:0000000000006136                 db  10h
.eh_frame:0000000000006137                 db  42h ; B
.eh_frame:0000000000006138                 db  0Eh
.eh_frame:0000000000006139                 db    8
.eh_frame:000000000000613A                 db  44h ; D
.eh_frame:000000000000613B                 db  0Bh
.eh_frame:000000000000613C                 db  60h ; `
.eh_frame:000000000000613D                 db  0Ah
.eh_frame:000000000000613E                 db  0Eh
.eh_frame:000000000000613F                 db  18h
.eh_frame:0000000000006140                 db  41h ; A
.eh_frame:0000000000006141                 db  0Eh
.eh_frame:0000000000006142                 db  10h
.eh_frame:0000000000006143                 db  42h ; B
.eh_frame:0000000000006144                 db  0Eh
.eh_frame:0000000000006145                 db    8
.eh_frame:0000000000006146                 db  45h ; E
.eh_frame:0000000000006147                 db  0Bh
.eh_frame:0000000000006148                 db  1Ch
.eh_frame:0000000000006149                 db    0
.eh_frame:000000000000614A                 db    0
.eh_frame:000000000000614B                 db    0
.eh_frame:000000000000614C                 db 0CCh
.eh_frame:000000000000614D                 db  0Ah
.eh_frame:000000000000614E                 db    0
.eh_frame:000000000000614F                 db    0
.eh_frame:0000000000006150                 db    0
.eh_frame:0000000000006151                 db 0E6h
.eh_frame:0000000000006152                 db 0FFh
.eh_frame:0000000000006153                 db 0FFh
.eh_frame:0000000000006154                 db  40h ; @
.eh_frame:0000000000006155                 db    0
.eh_frame:0000000000006156                 db    0
.eh_frame:0000000000006157                 db    0
.eh_frame:0000000000006158                 db    0
.eh_frame:0000000000006159                 db  44h ; D
.eh_frame:000000000000615A                 db  0Eh
.eh_frame:000000000000615B                 db  10h
.eh_frame:000000000000615C                 db  83h
.eh_frame:000000000000615D                 db    2
.eh_frame:000000000000615E                 db  5Ah ; Z
.eh_frame:000000000000615F                 db  0Ah
.eh_frame:0000000000006160                 db  0Eh
.eh_frame:0000000000006161                 db    8
.eh_frame:0000000000006162                 db  4Ah ; J
.eh_frame:0000000000006163                 db  0Bh
.eh_frame:0000000000006164                 db  53h ; S
.eh_frame:0000000000006165                 db  0Eh
.eh_frame:0000000000006166                 db    8
.eh_frame:0000000000006167                 db    0
.eh_frame:0000000000006168                 db  2Ch ; ,
.eh_frame:0000000000006169                 db    0
.eh_frame:000000000000616A                 db    0
.eh_frame:000000000000616B                 db    0
.eh_frame:000000000000616C                 db 0ECh
.eh_frame:000000000000616D                 db  0Ah
.eh_frame:000000000000616E                 db    0
.eh_frame:000000000000616F                 db    0
.eh_frame:0000000000006170                 db  20h
.eh_frame:0000000000006171                 db 0E6h
.eh_frame:0000000000006172                 db 0FFh
.eh_frame:0000000000006173                 db 0FFh
.eh_frame:0000000000006174                 db  57h ; W
.eh_frame:0000000000006175                 db    0
.eh_frame:0000000000006176                 db    0
.eh_frame:0000000000006177                 db    0
.eh_frame:0000000000006178                 db    0
.eh_frame:0000000000006179                 db  63h ; c
.eh_frame:000000000000617A                 db  0Eh
.eh_frame:000000000000617B                 db  10h
.eh_frame:000000000000617C                 db  8Ch
.eh_frame:000000000000617D                 db    2
.eh_frame:000000000000617E                 db  41h ; A
.eh_frame:000000000000617F                 db  0Eh
.eh_frame:0000000000006180                 db  18h
.eh_frame:0000000000006181                 db  86h
.eh_frame:0000000000006182                 db    3
.eh_frame:0000000000006183                 db  44h ; D
.eh_frame:0000000000006184                 db  0Eh
.eh_frame:0000000000006185                 db  20h
.eh_frame:0000000000006186                 db  83h
.eh_frame:0000000000006187                 db    4
.eh_frame:0000000000006188                 db  6Bh ; k
.eh_frame:0000000000006189                 db  0Eh
.eh_frame:000000000000618A                 db  18h
.eh_frame:000000000000618B                 db  41h ; A
.eh_frame:000000000000618C                 db  0Eh
.eh_frame:000000000000618D                 db  10h
.eh_frame:000000000000618E                 db  42h ; B
.eh_frame:000000000000618F                 db  0Eh
.eh_frame:0000000000006190                 db    8
.eh_frame:0000000000006191                 db    0
.eh_frame:0000000000006192                 db    0
.eh_frame:0000000000006193                 db    0
.eh_frame:0000000000006194                 db    0
.eh_frame:0000000000006195                 db    0
.eh_frame:0000000000006196                 db    0
.eh_frame:0000000000006197                 db    0
.eh_frame:0000000000006198                 db  44h ; D
.eh_frame:0000000000006199                 db    0
.eh_frame:000000000000619A                 db    0
.eh_frame:000000000000619B                 db    0
.eh_frame:000000000000619C                 db  1Ch
.eh_frame:000000000000619D                 db  0Bh
.eh_frame:000000000000619E                 db    0
.eh_frame:000000000000619F                 db    0
.eh_frame:00000000000061A0                 db  50h ; P
.eh_frame:00000000000061A1                 db 0E6h
.eh_frame:00000000000061A2                 db 0FFh
.eh_frame:00000000000061A3                 db 0FFh
.eh_frame:00000000000061A4                 db  65h ; e
.eh_frame:00000000000061A5                 db    0
.eh_frame:00000000000061A6                 db    0
.eh_frame:00000000000061A7                 db    0
.eh_frame:00000000000061A8                 db    0
.eh_frame:00000000000061A9                 db  42h ; B
.eh_frame:00000000000061AA                 db  0Eh
.eh_frame:00000000000061AB                 db  10h
.eh_frame:00000000000061AC                 db  8Fh
.eh_frame:00000000000061AD                 db    2
.eh_frame:00000000000061AE                 db  42h ; B
.eh_frame:00000000000061AF                 db  0Eh
.eh_frame:00000000000061B0                 db  18h
.eh_frame:00000000000061B1                 db  8Eh
.eh_frame:00000000000061B2                 db    3
.eh_frame:00000000000061B3                 db  45h ; E
.eh_frame:00000000000061B4                 db  0Eh
.eh_frame:00000000000061B5                 db  20h
.eh_frame:00000000000061B6                 db  8Dh
.eh_frame:00000000000061B7                 db    4
.eh_frame:00000000000061B8                 db  42h ; B
.eh_frame:00000000000061B9                 db  0Eh
.eh_frame:00000000000061BA                 db  28h ; (
.eh_frame:00000000000061BB                 db  8Ch
.eh_frame:00000000000061BC                 db    5
.eh_frame:00000000000061BD                 db  48h ; H
.eh_frame:00000000000061BE                 db  0Eh
.eh_frame:00000000000061BF                 db  30h ; 0
.eh_frame:00000000000061C0                 db  86h
.eh_frame:00000000000061C1                 db    6
.eh_frame:00000000000061C2                 db  48h ; H
.eh_frame:00000000000061C3                 db  0Eh
.eh_frame:00000000000061C4                 db  38h ; 8
.eh_frame:00000000000061C5                 db  83h
.eh_frame:00000000000061C6                 db    7
.eh_frame:00000000000061C7                 db  4Dh ; M
.eh_frame:00000000000061C8                 db  0Eh
.eh_frame:00000000000061C9                 db  40h ; @
.eh_frame:00000000000061CA                 db  72h ; r
.eh_frame:00000000000061CB                 db  0Eh
.eh_frame:00000000000061CC                 db  38h ; 8
.eh_frame:00000000000061CD                 db  41h ; A
.eh_frame:00000000000061CE                 db  0Eh
.eh_frame:00000000000061CF                 db  30h ; 0
.eh_frame:00000000000061D0                 db  41h ; A
.eh_frame:00000000000061D1                 db  0Eh
.eh_frame:00000000000061D2                 db  28h ; (
.eh_frame:00000000000061D3                 db  42h ; B
.eh_frame:00000000000061D4                 db  0Eh
.eh_frame:00000000000061D5                 db  20h
.eh_frame:00000000000061D6                 db  42h ; B
.eh_frame:00000000000061D7                 db  0Eh
.eh_frame:00000000000061D8                 db  18h
.eh_frame:00000000000061D9                 db  42h ; B
.eh_frame:00000000000061DA                 db  0Eh
.eh_frame:00000000000061DB                 db  10h
.eh_frame:00000000000061DC                 db  42h ; B
.eh_frame:00000000000061DD                 db  0Eh
.eh_frame:00000000000061DE                 db    8
.eh_frame:00000000000061DF                 db    0
.eh_frame:00000000000061E0                 db  14h
.eh_frame:00000000000061E1                 db    0
.eh_frame:00000000000061E2                 db    0
.eh_frame:00000000000061E3                 db    0
.eh_frame:00000000000061E4                 db  64h ; d
.eh_frame:00000000000061E5                 db  0Bh
.eh_frame:00000000000061E6                 db    0
.eh_frame:00000000000061E7                 db    0
.eh_frame:00000000000061E8                 db  78h ; x
.eh_frame:00000000000061E9                 db 0E6h
.eh_frame:00000000000061EA                 db 0FFh
.eh_frame:00000000000061EB                 db 0FFh
.eh_frame:00000000000061EC                 db    2
.eh_frame:00000000000061ED                 db    0
.eh_frame:00000000000061EE                 db    0
.eh_frame:00000000000061EF                 db    0
.eh_frame:00000000000061F0                 db    0
.eh_frame:00000000000061F1                 db    0
.eh_frame:00000000000061F2                 db    0
.eh_frame:00000000000061F3                 db    0
.eh_frame:00000000000061F4                 db    0
.eh_frame:00000000000061F5                 db    0
.eh_frame:00000000000061F6                 db    0
.eh_frame:00000000000061F7                 db    0
.eh_frame:00000000000061F8                 db  10h
.eh_frame:00000000000061F9                 db    0
.eh_frame:00000000000061FA                 db    0
.eh_frame:00000000000061FB                 db    0
.eh_frame:00000000000061FC                 db  7Ch ; |
.eh_frame:00000000000061FD                 db  0Bh
.eh_frame:00000000000061FE                 db    0
.eh_frame:00000000000061FF                 db    0
.eh_frame:0000000000006200                 db  70h ; p
.eh_frame:0000000000006201                 db 0E6h
.eh_frame:0000000000006202                 db 0FFh
.eh_frame:0000000000006203                 db 0FFh
.eh_frame:0000000000006204                 db  0Eh
.eh_frame:0000000000006205                 db    0
.eh_frame:0000000000006206                 db    0
.eh_frame:0000000000006207                 db    0
.eh_frame:0000000000006208                 db    0
.eh_frame:0000000000006209                 db    0
.eh_frame:000000000000620A                 db    0
.eh_frame:000000000000620B                 db    0
.eh_frame:000000000000620C __FRAME_END__   db    0
.eh_frame:000000000000620D                 db    0
.eh_frame:000000000000620E                 db    0
.eh_frame:000000000000620F                 db    0
.eh_frame:000000000000620F _eh_frame       ends
.eh_frame:000000000000620F
.init_array:0000000000206BB0 ; ELF Initialization Function Table
.init_array:0000000000206BB0 ; ===========================================================================
.init_array:0000000000206BB0
.init_array:0000000000206BB0 ; Segment type: Pure data
.init_array:0000000000206BB0 ; Segment permissions: Read/Write
.init_array:0000000000206BB0 _init_array     segment qword public 'DATA' use64
.init_array:0000000000206BB0                 assume cs:_init_array
.init_array:0000000000206BB0                 ;org 206BB0h
.init_array:0000000000206BB0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000206BB0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000206BB0                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000206BB0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000206BB0
.fini_array:0000000000206BB8 ; ELF Termination Function Table
.fini_array:0000000000206BB8 ; ===========================================================================
.fini_array:0000000000206BB8
.fini_array:0000000000206BB8 ; Segment type: Pure data
.fini_array:0000000000206BB8 ; Segment permissions: Read/Write
.fini_array:0000000000206BB8 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000206BB8                 assume cs:_fini_array
.fini_array:0000000000206BB8                 ;org 206BB8h
.fini_array:0000000000206BB8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000206BB8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000206BB8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000206BB8
.data.rel.ro:0000000000206BC0 ; ===========================================================================
.data.rel.ro:0000000000206BC0
.data.rel.ro:0000000000206BC0 ; Segment type: Pure data
.data.rel.ro:0000000000206BC0 ; Segment permissions: Read/Write
.data.rel.ro:0000000000206BC0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000206BC0                 assume cs:_data_rel_ro
.data.rel.ro:0000000000206BC0                 ;org 206BC0h
.data.rel.ro:0000000000206BC0 ; struct option long_options
.data.rel.ro:0000000000206BC0 long_options    dq offset aHelp         ; name
.data.rel.ro:0000000000206BC0                                         ; DATA XREF: parse_long_options:loc_1D10↑o
.data.rel.ro:0000000000206BC0                                         ; parse_gnu_standard_options_only+7C↑o
.data.rel.ro:0000000000206BC0                 dd 0                    ; has_arg ; "help"
.data.rel.ro:0000000000206BC0                 db 4 dup(0)
.data.rel.ro:0000000000206BC0                 dq 0                    ; flag
.data.rel.ro:0000000000206BC0                 dd 68h                  ; val
.data.rel.ro:0000000000206BC0                 db 4 dup(0)
.data.rel.ro:0000000000206BE0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000206BE8                 db    0
.data.rel.ro:0000000000206BE9                 db    0
.data.rel.ro:0000000000206BEA                 db    0
.data.rel.ro:0000000000206BEB                 db    0
.data.rel.ro:0000000000206BEC                 db    0
.data.rel.ro:0000000000206BED                 db    0
.data.rel.ro:0000000000206BEE                 db    0
.data.rel.ro:0000000000206BEF                 db    0
.data.rel.ro:0000000000206BF0                 db    0
.data.rel.ro:0000000000206BF1                 db    0
.data.rel.ro:0000000000206BF2                 db    0
.data.rel.ro:0000000000206BF3                 db    0
.data.rel.ro:0000000000206BF4                 db    0
.data.rel.ro:0000000000206BF5                 db    0
.data.rel.ro:0000000000206BF6                 db    0
.data.rel.ro:0000000000206BF7                 db    0
.data.rel.ro:0000000000206BF8                 db  76h ; v
.data.rel.ro:0000000000206BF9                 db    0
.data.rel.ro:0000000000206BFA                 db    0
.data.rel.ro:0000000000206BFB                 db    0
.data.rel.ro:0000000000206BFC                 db    0
.data.rel.ro:0000000000206BFD                 db    0
.data.rel.ro:0000000000206BFE                 db    0
.data.rel.ro:0000000000206BFF                 db    0
.data.rel.ro:0000000000206C00                 db    0
.data.rel.ro:0000000000206C01                 db    0
.data.rel.ro:0000000000206C02                 db    0
.data.rel.ro:0000000000206C03                 db    0
.data.rel.ro:0000000000206C04                 db    0
.data.rel.ro:0000000000206C05                 db    0
.data.rel.ro:0000000000206C06                 db    0
.data.rel.ro:0000000000206C07                 db    0
.data.rel.ro:0000000000206C08                 db    0
.data.rel.ro:0000000000206C09                 db    0
.data.rel.ro:0000000000206C0A                 db    0
.data.rel.ro:0000000000206C0B                 db    0
.data.rel.ro:0000000000206C0C                 db    0
.data.rel.ro:0000000000206C0D                 db    0
.data.rel.ro:0000000000206C0E                 db    0
.data.rel.ro:0000000000206C0F                 db    0
.data.rel.ro:0000000000206C10                 db    0
.data.rel.ro:0000000000206C11                 db    0
.data.rel.ro:0000000000206C12                 db    0
.data.rel.ro:0000000000206C13                 db    0
.data.rel.ro:0000000000206C14                 db    0
.data.rel.ro:0000000000206C15                 db    0
.data.rel.ro:0000000000206C16                 db    0
.data.rel.ro:0000000000206C17                 db    0
.data.rel.ro:0000000000206C18                 db    0
.data.rel.ro:0000000000206C19                 db    0
.data.rel.ro:0000000000206C1A                 db    0
.data.rel.ro:0000000000206C1B                 db    0
.data.rel.ro:0000000000206C1C                 db    0
.data.rel.ro:0000000000206C1D                 db    0
.data.rel.ro:0000000000206C1E                 db    0
.data.rel.ro:0000000000206C1F                 db    0
.data.rel.ro:0000000000206C20                 public quoting_style_args
.data.rel.ro:0000000000206C20 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000206C28                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000206C30                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000206C38                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000206C40                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000206C48                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000206C50                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000206C58                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000206C60                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000206C68                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000206C70                 db    0
.data.rel.ro:0000000000206C71                 db    0
.data.rel.ro:0000000000206C72                 db    0
.data.rel.ro:0000000000206C73                 db    0
.data.rel.ro:0000000000206C74                 db    0
.data.rel.ro:0000000000206C75                 db    0
.data.rel.ro:0000000000206C76                 db    0
.data.rel.ro:0000000000206C77                 db    0
.data.rel.ro:0000000000206C77 _data_rel_ro    ends
.data.rel.ro:0000000000206C77
LOAD:0000000000206C78 ; ELF Dynamic Information
LOAD:0000000000206C78 ; ===========================================================================
LOAD:0000000000206C78
LOAD:0000000000206C78 ; Segment type: Pure data
LOAD:0000000000206C78 ; Segment permissions: Read/Write
LOAD:0000000000206C78 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206C78                 assume cs:LOAD
LOAD:0000000000206C78                 ;org 206C78h
LOAD:0000000000206C78 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000206C78                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000206C78                                         ; DT_NEEDED libc.so.6
LOAD:0000000000206C88                 Elf64_Dyn <0Ch, 11B8h>  ; DT_INIT
LOAD:0000000000206C98                 Elf64_Dyn <0Dh, 4880h>  ; DT_FINI
LOAD:0000000000206CA8                 Elf64_Dyn <19h, 206BB0h> ; DT_INIT_ARRAY
LOAD:0000000000206CB8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000206CC8                 Elf64_Dyn <1Ah, 206BB8h> ; DT_FINI_ARRAY
LOAD:0000000000206CD8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000206CE8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000206CF8                 Elf64_Dyn <5, 7F0h>     ; DT_STRTAB
LOAD:0000000000206D08                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000206D18                 Elf64_Dyn <0Ah, 27Fh>   ; DT_STRSZ
LOAD:0000000000206D28                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000206D38                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000206D48                 Elf64_Dyn <3, 206E68h>  ; DT_PLTGOT
LOAD:0000000000206D58                 Elf64_Dyn <2, 3C0h>     ; DT_PLTRELSZ
LOAD:0000000000206D68                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000206D78                 Elf64_Dyn <17h, 0DF8h>  ; DT_JMPREL
LOAD:0000000000206D88                 Elf64_Dyn <7, 0B40h>    ; DT_RELA
LOAD:0000000000206D98                 Elf64_Dyn <8, 2B8h>     ; DT_RELASZ
LOAD:0000000000206DA8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000206DB8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000206DC8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000206DD8                 Elf64_Dyn <6FFFFFFEh, 0AE0h> ; DT_VERNEED
LOAD:0000000000206DE8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000206DF8                 Elf64_Dyn <6FFFFFF0h, 0A70h> ; DT_VERSYM
LOAD:0000000000206E08                 Elf64_Dyn <6FFFFFF9h, 12h> ; DT_RELACOUNT
LOAD:0000000000206E18                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000206E28                 db    0
LOAD:0000000000206E29                 db    0
LOAD:0000000000206E2A                 db    0
LOAD:0000000000206E2B                 db    0
LOAD:0000000000206E2C                 db    0
LOAD:0000000000206E2D                 db    0
LOAD:0000000000206E2E                 db    0
LOAD:0000000000206E2F                 db    0
LOAD:0000000000206E30                 db    0
LOAD:0000000000206E31                 db    0
LOAD:0000000000206E32                 db    0
LOAD:0000000000206E33                 db    0
LOAD:0000000000206E34                 db    0
LOAD:0000000000206E35                 db    0
LOAD:0000000000206E36                 db    0
LOAD:0000000000206E37                 db    0
LOAD:0000000000206E38                 db    0
LOAD:0000000000206E39                 db    0
LOAD:0000000000206E3A                 db    0
LOAD:0000000000206E3B                 db    0
LOAD:0000000000206E3C                 db    0
LOAD:0000000000206E3D                 db    0
LOAD:0000000000206E3E                 db    0
LOAD:0000000000206E3F                 db    0
LOAD:0000000000206E40                 db    0
LOAD:0000000000206E41                 db    0
LOAD:0000000000206E42                 db    0
LOAD:0000000000206E43                 db    0
LOAD:0000000000206E44                 db    0
LOAD:0000000000206E45                 db    0
LOAD:0000000000206E46                 db    0
LOAD:0000000000206E47                 db    0
LOAD:0000000000206E48                 db    0
LOAD:0000000000206E49                 db    0
LOAD:0000000000206E4A                 db    0
LOAD:0000000000206E4B                 db    0
LOAD:0000000000206E4C                 db    0
LOAD:0000000000206E4D                 db    0
LOAD:0000000000206E4E                 db    0
LOAD:0000000000206E4F                 db    0
LOAD:0000000000206E50                 db    0
LOAD:0000000000206E51                 db    0
LOAD:0000000000206E52                 db    0
LOAD:0000000000206E53                 db    0
LOAD:0000000000206E54                 db    0
LOAD:0000000000206E55                 db    0
LOAD:0000000000206E56                 db    0
LOAD:0000000000206E57                 db    0
LOAD:0000000000206E58                 db    0
LOAD:0000000000206E59                 db    0
LOAD:0000000000206E5A                 db    0
LOAD:0000000000206E5B                 db    0
LOAD:0000000000206E5C                 db    0
LOAD:0000000000206E5D                 db    0
LOAD:0000000000206E5E                 db    0
LOAD:0000000000206E5F                 db    0
LOAD:0000000000206E60                 db    0
LOAD:0000000000206E61                 db    0
LOAD:0000000000206E62                 db    0
LOAD:0000000000206E63                 db    0
LOAD:0000000000206E64                 db    0
LOAD:0000000000206E65                 db    0
LOAD:0000000000206E66                 db    0
LOAD:0000000000206E67                 db    0
LOAD:0000000000206E67 LOAD            ends
LOAD:0000000000206E67
.got:0000000000206E68 ; ===========================================================================
.got:0000000000206E68
.got:0000000000206E68 ; Segment type: Pure data
.got:0000000000206E68 ; Segment permissions: Read/Write
.got:0000000000206E68 _got            segment qword public 'DATA' use64
.got:0000000000206E68                 assume cs:_got
.got:0000000000206E68                 ;org 206E68h
.got:0000000000206E68 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000206E70 qword_206E70    dq 0                    ; DATA XREF: sub_11D0↑r
.got:0000000000206E78 qword_206E78    dq 0                    ; DATA XREF: sub_11D0+6↑r
.got:0000000000206E80 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000206E88 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000206E90 __errno_location_ptr dq offset __errno_location
.got:0000000000206E90                                         ; DATA XREF: ___errno_location↑r
.got:0000000000206E98 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000206EA0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000206EA8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000206EB0 write_ptr       dq offset write         ; DATA XREF: _write↑r
.got:0000000000206EB8 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000206EC0 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000206EC8 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000206EC8                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000206ED0 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000206ED8 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000206ED8                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000206EE0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000206EE8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000206EE8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000206EF0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000206EF8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000206F00 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000206F08 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000206F10 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000206F18 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000206F20 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000206F20                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000206F28 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000206F30 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000206F38 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000206F40 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000206F48 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000206F50 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000206F58 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000206F60 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000206F68 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000206F70 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000206F78 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000206F80 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000206F88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000206F90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000206F98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000206FA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000206FA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000206FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000206FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000206FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000206FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000206FC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000206FC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000206FC8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000206FC8                                         ; DATA XREF: start+24↑r
.got:0000000000206FD0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000206FD0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000206FD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000206FD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000206FE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000206FE0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000206FE0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000206FE0 _got            ends
.got:0000000000206FE0
LOAD:0000000000206FE8 ; ===========================================================================
LOAD:0000000000206FE8
LOAD:0000000000206FE8 ; Segment type: Pure data
LOAD:0000000000206FE8 ; Segment permissions: Read/Write
LOAD:0000000000206FE8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206FE8                 assume cs:LOAD
LOAD:0000000000206FE8                 ;org 206FE8h
LOAD:0000000000206FE8                 align 20h
LOAD:0000000000206FE8 LOAD            ends
LOAD:0000000000206FE8
.data:0000000000207000 ; ===========================================================================
.data:0000000000207000
.data:0000000000207000 ; Segment type: Pure data
.data:0000000000207000 ; Segment permissions: Read/Write
.data:0000000000207000 _data           segment align_32 public 'DATA' use64
.data:0000000000207000                 assume cs:_data
.data:0000000000207000                 ;org 207000h
.data:0000000000207000                 public __data_start ; weak
.data:0000000000207000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000207000                                         ; data_start
.data:0000000000207001                 db    0
.data:0000000000207002                 db    0
.data:0000000000207003                 db    0
.data:0000000000207004                 db    0
.data:0000000000207005                 db    0
.data:0000000000207006                 db    0
.data:0000000000207007                 db    0
.data:0000000000207008                 public __dso_handle
.data:0000000000207008 ; void *_dso_handle
.data:0000000000207008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000207008                                         ; atexit↑r ...
.data:0000000000207010                 public Version
.data:0000000000207010 Version         dq offset a831          ; DATA XREF: main+63↑r
.data:0000000000207010                                         ; "8.31"
.data:0000000000207018                 public exit_failure
.data:0000000000207018 ; int exit_failure
.data:0000000000207018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_1BB2↑r
.data:0000000000207018                                         ; parse_gnu_standard_options_only:loc_1EA0↑r ...
.data:000000000020701C                 align 20h
.data:0000000000207020                 public quote_quoting_options
.data:0000000000207020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000207020                                         ; quote_mem↑o ...
.data:0000000000207021                 db    0
.data:0000000000207022                 db    0
.data:0000000000207023                 db    0
.data:0000000000207024                 db    0
.data:0000000000207025                 db    0
.data:0000000000207026                 db    0
.data:0000000000207027                 db    0
.data:0000000000207028                 db    0
.data:0000000000207029                 db    0
.data:000000000020702A                 db    0
.data:000000000020702B                 db    0
.data:000000000020702C                 db    0
.data:000000000020702D                 db    0
.data:000000000020702E                 db    0
.data:000000000020702F                 db    0
.data:0000000000207030                 db    0
.data:0000000000207031                 db    0
.data:0000000000207032                 db    0
.data:0000000000207033                 db    0
.data:0000000000207034                 db    0
.data:0000000000207035                 db    0
.data:0000000000207036                 db    0
.data:0000000000207037                 db    0
.data:0000000000207038                 db    0
.data:0000000000207039                 db    0
.data:000000000020703A                 db    0
.data:000000000020703B                 db    0
.data:000000000020703C                 db    0
.data:000000000020703D                 db    0
.data:000000000020703E                 db    0
.data:000000000020703F                 db    0
.data:0000000000207040                 db    0
.data:0000000000207041                 db    0
.data:0000000000207042                 db    0
.data:0000000000207043                 db    0
.data:0000000000207044                 db    0
.data:0000000000207045                 db    0
.data:0000000000207046                 db    0
.data:0000000000207047                 db    0
.data:0000000000207048                 db    0
.data:0000000000207049                 db    0
.data:000000000020704A                 db    0
.data:000000000020704B                 db    0
.data:000000000020704C                 db    0
.data:000000000020704D                 db    0
.data:000000000020704E                 db    0
.data:000000000020704F                 db    0
.data:0000000000207050                 db    0
.data:0000000000207051                 db    0
.data:0000000000207052                 db    0
.data:0000000000207053                 db    0
.data:0000000000207054                 db    0
.data:0000000000207055                 db    0
.data:0000000000207056                 db    0
.data:0000000000207057                 db    0
.data:0000000000207058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000207058                                         ; quotearg_n_options:loc_332D↑r ...
.data:000000000020705C                 align 20h
.data:0000000000207060 ; void *slotvec
.data:0000000000207060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000207060                                         ; quotearg_n_options+76↑w ...
.data:0000000000207068                 align 10h
.data:0000000000207070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000207070                                         ; quotearg_n_options+187↑r ...
.data:0000000000207078 off_207078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000207078 _data           ends
.data:0000000000207078
.bss:0000000000207080 ; ===========================================================================
.bss:0000000000207080
.bss:0000000000207080 ; Segment type: Uninitialized
.bss:0000000000207080 ; Segment permissions: Read/Write
.bss:0000000000207080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000207080                 assume cs:_bss
.bss:0000000000207080                 ;org 207080h
.bss:0000000000207080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000207080                 public __bss_start ; weak
.bss:0000000000207080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000748↑o
.bss:0000000000207080                                         ; LOAD:0000000000000790↑o ...
.bss:0000000000207080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000207080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000207080                                         ; _edata
.bss:0000000000207080                                         ; Copy of shared data
.bss:0000000000207088                 public stdout@@GLIBC_2_2_5
.bss:0000000000207088 ; FILE *stdout
.bss:0000000000207088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000730↑o
.bss:0000000000207088                                         ; usage+80↑r ...
.bss:0000000000207088                                         ; Alternative name is 'stdout'
.bss:0000000000207088                                         ; Copy of shared data
.bss:0000000000207090                 public optind@@GLIBC_2_2_5
.bss:0000000000207090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000007D8↑o
.bss:0000000000207090                                         ; main+96↑r ...
.bss:0000000000207090                                         ; Alternative name is 'optind'
.bss:0000000000207090                                         ; Copy of shared data
.bss:0000000000207094                 align 8
.bss:0000000000207098                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000207098 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000207098                                         ; DATA XREF: LOAD:0000000000000760↑o
.bss:0000000000207098                                         ; LOAD:0000000000000778↑o ...
.bss:0000000000207098                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000207098                                         ; Copy of shared data
.bss:00000000002070A0                 public opterr@@GLIBC_2_2_5
.bss:00000000002070A0 opterr@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000007A8↑o
.bss:00000000002070A0                                         ; parse_long_options+67↑r ...
.bss:00000000002070A0                                         ; Alternative name is 'opterr'
.bss:00000000002070A0                                         ; Copy of shared data
.bss:00000000002070A4                 align 20h
.bss:00000000002070C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002070C0 ; FILE *stderr
.bss:00000000002070C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007C0↑o
.bss:00000000002070C0                                         ; usage+3D↑r ...
.bss:00000000002070C0                                         ; Alternative name is 'stderr'
.bss:00000000002070C0                                         ; Copy of shared data
.bss:00000000002070C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002070C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002070C9                 align 10h
.bss:00000000002070D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002070D0                                         ; close_stdout+1B↑r
.bss:00000000002070D1                 align 8
.bss:00000000002070D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002070D8                                         ; close_stdout+56↑r
.bss:00000000002070E0                 public program_name
.bss:00000000002070E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002070E0                                         ; set_program_name:loc_1F4D↑w
.bss:00000000002070E8                 align 20h
.bss:0000000000207100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000207100                                         ; quotearg_free+46↑o ...
.bss:0000000000207101                 db    ? ;
.bss:0000000000207102                 db    ? ;
.bss:0000000000207103                 db    ? ;
.bss:0000000000207104                 db    ? ;
.bss:0000000000207105                 db    ? ;
.bss:0000000000207106                 db    ? ;
.bss:0000000000207107                 db    ? ;
.bss:0000000000207108                 db    ? ;
.bss:0000000000207109                 db    ? ;
.bss:000000000020710A                 db    ? ;
.bss:000000000020710B                 db    ? ;
.bss:000000000020710C                 db    ? ;
.bss:000000000020710D                 db    ? ;
.bss:000000000020710E                 db    ? ;
.bss:000000000020710F                 db    ? ;
.bss:0000000000207110                 db    ? ;
.bss:0000000000207111                 db    ? ;
.bss:0000000000207112                 db    ? ;
.bss:0000000000207113                 db    ? ;
.bss:0000000000207114                 db    ? ;
.bss:0000000000207115                 db    ? ;
.bss:0000000000207116                 db    ? ;
.bss:0000000000207117                 db    ? ;
.bss:0000000000207118                 db    ? ;
.bss:0000000000207119                 db    ? ;
.bss:000000000020711A                 db    ? ;
.bss:000000000020711B                 db    ? ;
.bss:000000000020711C                 db    ? ;
.bss:000000000020711D                 db    ? ;
.bss:000000000020711E                 db    ? ;
.bss:000000000020711F                 db    ? ;
.bss:0000000000207120                 db    ? ;
.bss:0000000000207121                 db    ? ;
.bss:0000000000207122                 db    ? ;
.bss:0000000000207123                 db    ? ;
.bss:0000000000207124                 db    ? ;
.bss:0000000000207125                 db    ? ;
.bss:0000000000207126                 db    ? ;
.bss:0000000000207127                 db    ? ;
.bss:0000000000207128                 db    ? ;
.bss:0000000000207129                 db    ? ;
.bss:000000000020712A                 db    ? ;
.bss:000000000020712B                 db    ? ;
.bss:000000000020712C                 db    ? ;
.bss:000000000020712D                 db    ? ;
.bss:000000000020712E                 db    ? ;
.bss:000000000020712F                 db    ? ;
.bss:0000000000207130                 db    ? ;
.bss:0000000000207131                 db    ? ;
.bss:0000000000207132                 db    ? ;
.bss:0000000000207133                 db    ? ;
.bss:0000000000207134                 db    ? ;
.bss:0000000000207135                 db    ? ;
.bss:0000000000207136                 db    ? ;
.bss:0000000000207137                 db    ? ;
.bss:0000000000207138                 db    ? ;
.bss:0000000000207139                 db    ? ;
.bss:000000000020713A                 db    ? ;
.bss:000000000020713B                 db    ? ;
.bss:000000000020713C                 db    ? ;
.bss:000000000020713D                 db    ? ;
.bss:000000000020713E                 db    ? ;
.bss:000000000020713F                 db    ? ;
.bss:0000000000207140                 db    ? ;
.bss:0000000000207141                 db    ? ;
.bss:0000000000207142                 db    ? ;
.bss:0000000000207143                 db    ? ;
.bss:0000000000207144                 db    ? ;
.bss:0000000000207145                 db    ? ;
.bss:0000000000207146                 db    ? ;
.bss:0000000000207147                 db    ? ;
.bss:0000000000207148                 db    ? ;
.bss:0000000000207149                 db    ? ;
.bss:000000000020714A                 db    ? ;
.bss:000000000020714B                 db    ? ;
.bss:000000000020714C                 db    ? ;
.bss:000000000020714D                 db    ? ;
.bss:000000000020714E                 db    ? ;
.bss:000000000020714F                 db    ? ;
.bss:0000000000207150                 db    ? ;
.bss:0000000000207151                 db    ? ;
.bss:0000000000207152                 db    ? ;
.bss:0000000000207153                 db    ? ;
.bss:0000000000207154                 db    ? ;
.bss:0000000000207155                 db    ? ;
.bss:0000000000207156                 db    ? ;
.bss:0000000000207157                 db    ? ;
.bss:0000000000207158                 db    ? ;
.bss:0000000000207159                 db    ? ;
.bss:000000000020715A                 db    ? ;
.bss:000000000020715B                 db    ? ;
.bss:000000000020715C                 db    ? ;
.bss:000000000020715D                 db    ? ;
.bss:000000000020715E                 db    ? ;
.bss:000000000020715F                 db    ? ;
.bss:0000000000207160                 db    ? ;
.bss:0000000000207161                 db    ? ;
.bss:0000000000207162                 db    ? ;
.bss:0000000000207163                 db    ? ;
.bss:0000000000207164                 db    ? ;
.bss:0000000000207165                 db    ? ;
.bss:0000000000207166                 db    ? ;
.bss:0000000000207167                 db    ? ;
.bss:0000000000207168                 db    ? ;
.bss:0000000000207169                 db    ? ;
.bss:000000000020716A                 db    ? ;
.bss:000000000020716B                 db    ? ;
.bss:000000000020716C                 db    ? ;
.bss:000000000020716D                 db    ? ;
.bss:000000000020716E                 db    ? ;
.bss:000000000020716F                 db    ? ;
.bss:0000000000207170                 db    ? ;
.bss:0000000000207171                 db    ? ;
.bss:0000000000207172                 db    ? ;
.bss:0000000000207173                 db    ? ;
.bss:0000000000207174                 db    ? ;
.bss:0000000000207175                 db    ? ;
.bss:0000000000207176                 db    ? ;
.bss:0000000000207177                 db    ? ;
.bss:0000000000207178                 db    ? ;
.bss:0000000000207179                 db    ? ;
.bss:000000000020717A                 db    ? ;
.bss:000000000020717B                 db    ? ;
.bss:000000000020717C                 db    ? ;
.bss:000000000020717D                 db    ? ;
.bss:000000000020717E                 db    ? ;
.bss:000000000020717F                 db    ? ;
.bss:0000000000207180                 db    ? ;
.bss:0000000000207181                 db    ? ;
.bss:0000000000207182                 db    ? ;
.bss:0000000000207183                 db    ? ;
.bss:0000000000207184                 db    ? ;
.bss:0000000000207185                 db    ? ;
.bss:0000000000207186                 db    ? ;
.bss:0000000000207187                 db    ? ;
.bss:0000000000207188                 db    ? ;
.bss:0000000000207189                 db    ? ;
.bss:000000000020718A                 db    ? ;
.bss:000000000020718B                 db    ? ;
.bss:000000000020718C                 db    ? ;
.bss:000000000020718D                 db    ? ;
.bss:000000000020718E                 db    ? ;
.bss:000000000020718F                 db    ? ;
.bss:0000000000207190                 db    ? ;
.bss:0000000000207191                 db    ? ;
.bss:0000000000207192                 db    ? ;
.bss:0000000000207193                 db    ? ;
.bss:0000000000207194                 db    ? ;
.bss:0000000000207195                 db    ? ;
.bss:0000000000207196                 db    ? ;
.bss:0000000000207197                 db    ? ;
.bss:0000000000207198                 db    ? ;
.bss:0000000000207199                 db    ? ;
.bss:000000000020719A                 db    ? ;
.bss:000000000020719B                 db    ? ;
.bss:000000000020719C                 db    ? ;
.bss:000000000020719D                 db    ? ;
.bss:000000000020719E                 db    ? ;
.bss:000000000020719F                 db    ? ;
.bss:00000000002071A0                 db    ? ;
.bss:00000000002071A1                 db    ? ;
.bss:00000000002071A2                 db    ? ;
.bss:00000000002071A3                 db    ? ;
.bss:00000000002071A4                 db    ? ;
.bss:00000000002071A5                 db    ? ;
.bss:00000000002071A6                 db    ? ;
.bss:00000000002071A7                 db    ? ;
.bss:00000000002071A8                 db    ? ;
.bss:00000000002071A9                 db    ? ;
.bss:00000000002071AA                 db    ? ;
.bss:00000000002071AB                 db    ? ;
.bss:00000000002071AC                 db    ? ;
.bss:00000000002071AD                 db    ? ;
.bss:00000000002071AE                 db    ? ;
.bss:00000000002071AF                 db    ? ;
.bss:00000000002071B0                 db    ? ;
.bss:00000000002071B1                 db    ? ;
.bss:00000000002071B2                 db    ? ;
.bss:00000000002071B3                 db    ? ;
.bss:00000000002071B4                 db    ? ;
.bss:00000000002071B5                 db    ? ;
.bss:00000000002071B6                 db    ? ;
.bss:00000000002071B7                 db    ? ;
.bss:00000000002071B8                 db    ? ;
.bss:00000000002071B9                 db    ? ;
.bss:00000000002071BA                 db    ? ;
.bss:00000000002071BB                 db    ? ;
.bss:00000000002071BC                 db    ? ;
.bss:00000000002071BD                 db    ? ;
.bss:00000000002071BE                 db    ? ;
.bss:00000000002071BF                 db    ? ;
.bss:00000000002071C0                 db    ? ;
.bss:00000000002071C1                 db    ? ;
.bss:00000000002071C2                 db    ? ;
.bss:00000000002071C3                 db    ? ;
.bss:00000000002071C4                 db    ? ;
.bss:00000000002071C5                 db    ? ;
.bss:00000000002071C6                 db    ? ;
.bss:00000000002071C7                 db    ? ;
.bss:00000000002071C8                 db    ? ;
.bss:00000000002071C9                 db    ? ;
.bss:00000000002071CA                 db    ? ;
.bss:00000000002071CB                 db    ? ;
.bss:00000000002071CC                 db    ? ;
.bss:00000000002071CD                 db    ? ;
.bss:00000000002071CE                 db    ? ;
.bss:00000000002071CF                 db    ? ;
.bss:00000000002071D0                 db    ? ;
.bss:00000000002071D1                 db    ? ;
.bss:00000000002071D2                 db    ? ;
.bss:00000000002071D3                 db    ? ;
.bss:00000000002071D4                 db    ? ;
.bss:00000000002071D5                 db    ? ;
.bss:00000000002071D6                 db    ? ;
.bss:00000000002071D7                 db    ? ;
.bss:00000000002071D8                 db    ? ;
.bss:00000000002071D9                 db    ? ;
.bss:00000000002071DA                 db    ? ;
.bss:00000000002071DB                 db    ? ;
.bss:00000000002071DC                 db    ? ;
.bss:00000000002071DD                 db    ? ;
.bss:00000000002071DE                 db    ? ;
.bss:00000000002071DF                 db    ? ;
.bss:00000000002071E0                 db    ? ;
.bss:00000000002071E1                 db    ? ;
.bss:00000000002071E2                 db    ? ;
.bss:00000000002071E3                 db    ? ;
.bss:00000000002071E4                 db    ? ;
.bss:00000000002071E5                 db    ? ;
.bss:00000000002071E6                 db    ? ;
.bss:00000000002071E7                 db    ? ;
.bss:00000000002071E8                 db    ? ;
.bss:00000000002071E9                 db    ? ;
.bss:00000000002071EA                 db    ? ;
.bss:00000000002071EB                 db    ? ;
.bss:00000000002071EC                 db    ? ;
.bss:00000000002071ED                 db    ? ;
.bss:00000000002071EE                 db    ? ;
.bss:00000000002071EF                 db    ? ;
.bss:00000000002071F0                 db    ? ;
.bss:00000000002071F1                 db    ? ;
.bss:00000000002071F2                 db    ? ;
.bss:00000000002071F3                 db    ? ;
.bss:00000000002071F4                 db    ? ;
.bss:00000000002071F5                 db    ? ;
.bss:00000000002071F6                 db    ? ;
.bss:00000000002071F7                 db    ? ;
.bss:00000000002071F8                 db    ? ;
.bss:00000000002071F9                 db    ? ;
.bss:00000000002071FA                 db    ? ;
.bss:00000000002071FB                 db    ? ;
.bss:00000000002071FC                 db    ? ;
.bss:00000000002071FD                 db    ? ;
.bss:00000000002071FE                 db    ? ;
.bss:00000000002071FF                 db    ? ;
.bss:0000000000207200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000207200                                         ; get_quoting_style↑o ...
.bss:0000000000207210 xmmword_207210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000207210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000207220 xmmword_207220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000207220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000207230 qword_207230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000207230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000207230 _bss            ends
.bss:0000000000207230
.prgend:0000000000207238 ; ===========================================================================
.prgend:0000000000207238
.prgend:0000000000207238 ; Segment type: Zero-length
.prgend:0000000000207238 _prgend         segment byte public '' use64
.prgend:0000000000207238 _end            label byte
.prgend:0000000000207238 _prgend         ends
.prgend:0000000000207238
extern:0000000000207240 ; ===========================================================================
extern:0000000000207240
extern:0000000000207240 ; Segment type: Externs
extern:0000000000207240 ; extern
extern:0000000000207240 ; void free(void *ptr)
extern:0000000000207240                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000207240                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000207248 ; void __noreturn abort(void)
extern:0000000000207248                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000207248                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000207250 ; int *_errno_location(void)
extern:0000000000207250                 extrn __errno_location:near
extern:0000000000207250                                         ; CODE XREF: ___errno_location↑j
extern:0000000000207250                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000207258 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000207258                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000207258                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000207260 ; void __noreturn exit(int status)
extern:0000000000207260                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000207260                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000207268 ; size_t _fpending(FILE *fp)
extern:0000000000207268                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000207268                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000207270 ; ssize_t write(int fd, const void *buf, size_t n)
extern:0000000000207270                 extrn write:near        ; CODE XREF: _write↑j
extern:0000000000207270                                         ; DATA XREF: .got:write_ptr↑o
extern:0000000000207278 ; char *textdomain(const char *domainname)
extern:0000000000207278                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000207278                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000207280 ; int fclose(FILE *stream)
extern:0000000000207280                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000207280                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000207288 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000207288                 extrn bindtextdomain:near
extern:0000000000207288                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000207288                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000207290 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000207290                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000207290                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000207298 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000207298                 extrn __ctype_get_mb_cur_max:near
extern:0000000000207298                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000207298                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002072A0 ; size_t strlen(const char *s)
extern:00000000002072A0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002072A0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002072A8                 extrn __stack_chk_fail:near
extern:00000000002072A8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002072A8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002072B0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002072B0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002072B0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002072B8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002072B8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002072B8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002072C0 ; char *strrchr(const char *s, int c)
extern:00000000002072C0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002072C0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002072C8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002072C8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002072C8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002072D0 ; void *memset(void *s, int c, size_t n)
extern:00000000002072D0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002072D0                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002072D8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002072D8                 extrn __libc_start_main:near
extern:00000000002072D8                                         ; CODE XREF: start+24↑p
extern:00000000002072D8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002072E0 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002072E0                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002072E0                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002072E8 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002072E8                 extrn fputs_unlocked:near
extern:00000000002072E8                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002072E8                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002072F0 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002072F0                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002072F0                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002072F8 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002072F8                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002072F8                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000207300 ; int fileno(FILE *stream)
extern:0000000000207300                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000207300                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000207308 ; void *malloc(size_t size)
extern:0000000000207308                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000207308                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000207310 ; int fflush(FILE *stream)
extern:0000000000207310                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000207310                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000207318 ; char *nl_langinfo(nl_item item)
extern:0000000000207318                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000207318                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000207320 ; int _freading(FILE *fp)
extern:0000000000207320                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000207320                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000207328 ; void *realloc(void *ptr, size_t size)
extern:0000000000207328                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000207328                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000207330 ; char *setlocale(int category, const char *locale)
extern:0000000000207330                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000207330                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000207338                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000207338                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000207340 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000207340                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000207340                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000207348 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000207348                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000207348                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000207350 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000207350                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000207350                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000207358 ; void __noreturn exit(int status)
extern:0000000000207358                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000207358                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000207360 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000207360                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000207360                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000207368                 extrn __fprintf_chk:near
extern:0000000000207368                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000207368                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000207370 ; int mbsinit(const mbstate_t *ps)
extern:0000000000207370                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000207370                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000207378 ; int iswprint(wint_t wc)
extern:0000000000207378                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000207378                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000207380 ; int __fastcall __cxa_finalize(void *)
extern:0000000000207380                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000207380                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000207380                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000207388 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000207388                 extrn __ctype_b_loc:near
extern:0000000000207388                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000207388                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000207390                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000207390                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000207398                 extrn __gmon_start__:near ; weak
extern:0000000000207398                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000207398                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002073A0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002073A0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002073A0
extern:00000000002073A0
extern:00000000002073A0                 end start
