LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 5E4DA597630D0BDDA6CDC5F14DF993162EE29272FB976F42F8A047685D666404
LOAD:0000000000000000 ; Input MD5    : AC272BC2991F9FC71551F8D55EC738C9
LOAD:0000000000000000 ; Input CRC32  : 75971067
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/test
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'test.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'umaxtostr.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'strintcmp.c'
LOAD:0000000000000000 ; Source File : 'verror.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xvasprintf.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'vasprintf.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'vasnprintf.c'
LOAD:0000000000000000 ; Source File : 'printf-args.c'
LOAD:0000000000000000 ; Source File : 'printf-parse.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000308↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 33188h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0A440h               ; Size in file image
LOAD:00000000000000D8                 dq 0A440h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0ABD0h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20ABD0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 4B0h                 ; Size in file image
LOAD:0000000000000110                 dq 648h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0AC38h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20AC38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 951Ch                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 951Ch                ; Physical address
LOAD:00000000000001B0                 dq 2BCh                 ; Size in file image
LOAD:00000000000001B8                 dq 2BCh                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0ABD0h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20ABD0h              ; Physical address
LOAD:0000000000000220                 dq 430h                 ; Size in file image
LOAD:0000000000000228                 dq 430h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 66h, 99h, 0CAh, 53h, 0FBh, 0C0h, 52h, 0B1h, 72h, 81h ; Desc
LOAD:0000000000000284                 db 0EFh, 66h, 5, 85h, 6Eh, 0EDh, 0BFh, 28h, 19h, 83h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 36h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 1218012000404904h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 36h, 37h, 0
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 0
LOAD:00000000000002D8 ; ELF Symbol Table
LOAD:00000000000002D8                 Elf64_Sym <0>
LOAD:00000000000002F0                 Elf64_Sym <offset aSnprintfChk - offset byte_878, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:00000000000002F0                            offset dword_0, 0>
LOAD:0000000000000308                 Elf64_Sym <offset aFree - offset byte_878, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000308                            0>
LOAD:0000000000000320                 Elf64_Sym <offset aAbort - offset byte_878, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000320                            0>
LOAD:0000000000000338                 Elf64_Sym <offset aErrnoLocation - offset byte_878, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000338                            offset dword_0, 0>
LOAD:0000000000000350                 Elf64_Sym <offset aErrorAtLine - offset byte_878, 12h, 0, 0, \ ; "error_at_line"
LOAD:0000000000000350                            offset dword_0, 0>
LOAD:0000000000000368                 Elf64_Sym <offset aStrncmp - offset byte_878, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000368                            offset dword_0, 0>
LOAD:0000000000000380                 Elf64_Sym <offset aItmDeregistert - offset byte_878, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000380                            offset dword_0, 0>
LOAD:0000000000000398                 Elf64_Sym <offset aExit - offset byte_878, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000398                            0>
LOAD:00000000000003B0                 Elf64_Sym <offset aFpending - offset byte_878, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003B0                            offset dword_0, 0>
LOAD:00000000000003C8                 Elf64_Sym <offset aIsatty - offset byte_878, 12h, 0, 0, \ ; "isatty"
LOAD:00000000000003C8                            offset dword_0, 0>
LOAD:00000000000003E0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_878, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003E0                            offset dword_0, 0>
LOAD:00000000000003F8                 Elf64_Sym <offset aFclose - offset byte_878, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003F8                            offset dword_0, 0>
LOAD:0000000000000410                 Elf64_Sym <offset aBindtextdomain - offset byte_878, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000410                            offset dword_0, 0>
LOAD:0000000000000428                 Elf64_Sym <offset aDcgettext - offset byte_878, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000428                            offset dword_0, 0>
LOAD:0000000000000440                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_878, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000440                            offset dword_0, 0>
LOAD:0000000000000458                 Elf64_Sym <offset aStrlen - offset byte_878, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000458                            offset dword_0, 0>
LOAD:0000000000000470                 Elf64_Sym <offset aLxstat - offset byte_878, 12h, 0, 0, \ ; "__lxstat"
LOAD:0000000000000470                            offset dword_0, 0>
LOAD:0000000000000488                 Elf64_Sym <offset aStackChkFail - offset byte_878, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000488                            offset dword_0, 0>
LOAD:00000000000004A0                 Elf64_Sym <offset aMbrtowc - offset byte_878, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004A0                            offset dword_0, 0>
LOAD:00000000000004B8                 Elf64_Sym <offset aStrrchr - offset byte_878, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004B8                            offset dword_0, 0>
LOAD:00000000000004D0                 Elf64_Sym <offset aLseek - offset byte_878, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004D0                            0>
LOAD:00000000000004E8                 Elf64_Sym <offset aMemset - offset byte_878, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004E8                            offset dword_0, 0>
LOAD:0000000000000500                 Elf64_Sym <offset aGeteuid - offset byte_878, 12h, 0, 0, \ ; "geteuid"
LOAD:0000000000000500                            offset dword_0, 0>
LOAD:0000000000000518                 Elf64_Sym <offset aLibcStartMain - offset byte_878, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000518                            offset dword_0, 0>
LOAD:0000000000000530                 Elf64_Sym <offset aMemcmp - offset byte_878, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000530                            offset dword_0, 0>
LOAD:0000000000000548                 Elf64_Sym <offset aFputsUnlocked - offset byte_878, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000548                            offset dword_0, 0>
LOAD:0000000000000560                 Elf64_Sym <offset aCalloc - offset byte_878, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000560                            offset dword_0, 0>
LOAD:0000000000000578                 Elf64_Sym <offset aStrcmp - offset byte_878, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000578                            offset dword_0, 0>
LOAD:0000000000000590                 Elf64_Sym <offset aGmonStart - offset byte_878, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000590                            offset dword_0, 0>
LOAD:00000000000005A8                 Elf64_Sym <offset aStrtol - offset byte_878, 12h, 0, 0, \ ; "strtol"
LOAD:00000000000005A8                            offset dword_0, 0>
LOAD:00000000000005C0                 Elf64_Sym <offset aMemcpy - offset byte_878, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005C0                            offset dword_0, 0>
LOAD:00000000000005D8                 Elf64_Sym <offset aFileno - offset byte_878, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005D8                            offset dword_0, 0>
LOAD:00000000000005F0                 Elf64_Sym <offset aXstat - offset byte_878, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:00000000000005F0                            0>
LOAD:0000000000000608                 Elf64_Sym <offset aMalloc - offset byte_878, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000608                            offset dword_0, 0>
LOAD:0000000000000620                 Elf64_Sym <offset aFflush - offset byte_878, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000620                            offset dword_0, 0>
LOAD:0000000000000638                 Elf64_Sym <offset aNlLanginfo - offset byte_878, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000638                            offset dword_0, 0>
LOAD:0000000000000650                 Elf64_Sym <offset aGetegid - offset byte_878, 12h, 0, 0, \ ; "getegid"
LOAD:0000000000000650                            offset dword_0, 0>
LOAD:0000000000000668                 Elf64_Sym <offset aFreading - offset byte_878, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000668                            offset dword_0, 0>
LOAD:0000000000000680                 Elf64_Sym <offset aRealloc - offset byte_878, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000680                            offset dword_0, 0>
LOAD:0000000000000698                 Elf64_Sym <offset aSetlocale - offset byte_878, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000698                            offset dword_0, 0>
LOAD:00000000000006B0                 Elf64_Sym <offset aPrintfChk - offset byte_878, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006B0                            offset dword_0, 0>
LOAD:00000000000006C8                 Elf64_Sym <offset aError - offset byte_878, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000006C8                            0>
LOAD:00000000000006E0                 Elf64_Sym <offset aFseeko - offset byte_878, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000006E0                            offset dword_0, 0>
LOAD:00000000000006F8                 Elf64_Sym <offset aEuidaccess - offset byte_878, 12h, 0, 0, \ ; "euidaccess"
LOAD:00000000000006F8                            offset dword_0, 0>
LOAD:0000000000000710                 Elf64_Sym <offset aCxaAtexit - offset byte_878, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000710                            offset dword_0, 0>
LOAD:0000000000000728                 Elf64_Sym <offset aExit+1 - offset byte_878, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000728                            offset dword_0, 0>
LOAD:0000000000000740                 Elf64_Sym <offset aFwrite - offset byte_878, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000740                            offset dword_0, 0>
LOAD:0000000000000758                 Elf64_Sym <offset aFprintfChk - offset byte_878, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000758                            offset dword_0, 0>
LOAD:0000000000000770                 Elf64_Sym <offset aItmRegistertmc - offset byte_878, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000770                            offset dword_0, 0>
LOAD:0000000000000788                 Elf64_Sym <offset aMbsinit - offset byte_878, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000788                            offset dword_0, 0>
LOAD:00000000000007A0                 Elf64_Sym <offset aIswprint - offset byte_878, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007A0                            offset dword_0, 0>
LOAD:00000000000007B8                 Elf64_Sym <offset aCxaFinalize - offset byte_878, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007B8                            offset dword_0, 0>
LOAD:00000000000007D0                 Elf64_Sym <offset aCtypeBLoc - offset byte_878, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000007D0                            offset dword_0, 0>
LOAD:00000000000007E8                 Elf64_Sym <offset aStdout - offset byte_878, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000007E8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000800                 Elf64_Sym <offset aProgname - offset byte_878, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000800                            offset __bss_start, 8>
LOAD:0000000000000818                 Elf64_Sym <offset aProgramInvocat - offset byte_878, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000818                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000830                 Elf64_Sym <offset aPrognameFull - offset byte_878, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000830                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000848                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_878, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000848                            offset __bss_start, 8>
LOAD:0000000000000860                 Elf64_Sym <offset aStderr - offset byte_878, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000860                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000878 ; ELF String Table
LOAD:0000000000000878 byte_878        db 0                    ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000878                                         ; LOAD:0000000000000308↑o ...
LOAD:0000000000000879 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000BB8↓o
LOAD:0000000000000883 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000620↑o
LOAD:000000000000088A aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006B0↑o
LOAD:0000000000000897 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000698↑o
LOAD:00000000000008A1 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004A0↑o
LOAD:00000000000008A9 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000368↑o
LOAD:00000000000008B1 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004B8↑o
LOAD:00000000000008B9 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000428↑o
LOAD:00000000000008C3 aError          db 'error',0            ; DATA XREF: LOAD:00000000000006C8↑o
LOAD:00000000000008C9 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000488↑o
LOAD:00000000000008DA aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:0000000000000470↑o
LOAD:00000000000008E3 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007A0↑o
LOAD:00000000000008EC aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000680↑o
LOAD:00000000000008F4 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000320↑o
LOAD:00000000000008FA aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000398↑o
LOAD:00000000000008FA                                         ; LOAD:0000000000000728↑o
LOAD:0000000000000900 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000900                                         ; DATA XREF: LOAD:0000000000000818↑o
LOAD:0000000000000918 aErrorAtLine    db 'error_at_line',0    ; DATA XREF: LOAD:0000000000000350↑o
LOAD:0000000000000926 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000926                                         ; DATA XREF: LOAD:0000000000000440↑o
LOAD:000000000000093D aStrtol         db 'strtol',0           ; DATA XREF: LOAD:00000000000005A8↑o
LOAD:0000000000000944 aIsatty         db 'isatty',0           ; DATA XREF: LOAD:00000000000003C8↑o
LOAD:000000000000094B aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000560↑o
LOAD:0000000000000952 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000458↑o
LOAD:0000000000000959 aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004E8↑o
LOAD:0000000000000960 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000338↑o
LOAD:0000000000000971 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000530↑o
LOAD:0000000000000978 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000758↑o
LOAD:0000000000000986 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000007E8↑o
LOAD:000000000000098D aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004D0↑o
LOAD:0000000000000993 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005C0↑o
LOAD:000000000000099A aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003F8↑o
LOAD:00000000000009A1 aEuidaccess     db 'euidaccess',0       ; DATA XREF: LOAD:00000000000006F8↑o
LOAD:00000000000009AC aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000608↑o
LOAD:00000000000009B3 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000788↑o
LOAD:00000000000009BB aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000638↑o
LOAD:00000000000009C7 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000007D0↑o
LOAD:00000000000009D5 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000668↑o
LOAD:00000000000009E0 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000860↑o
LOAD:00000000000009E7 aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:00000000000009F6 aGetegid        db 'getegid',0          ; DATA XREF: LOAD:0000000000000650↑o
LOAD:00000000000009FE aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005D8↑o
LOAD:0000000000000A05 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000740↑o
LOAD:0000000000000A0C aGeteuid        db 'geteuid',0          ; DATA XREF: LOAD:0000000000000500↑o
LOAD:0000000000000A14 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003B0↑o
LOAD:0000000000000A1F aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A1F                                         ; DATA XREF: LOAD:0000000000000848↑o
LOAD:0000000000000A3D aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007B8↑o
LOAD:0000000000000A4C aXstat          db '__xstat',0          ; DATA XREF: LOAD:00000000000005F0↑o
LOAD:0000000000000A54 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000410↑o
LOAD:0000000000000A54                                         ; LOAD:00000000000003E0↑o
LOAD:0000000000000A63 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000578↑o
LOAD:0000000000000A6A aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000A6A                                         ; DATA XREF: LOAD:0000000000000518↑o
LOAD:0000000000000A7C aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000006E0↑o
LOAD:0000000000000A83 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000548↑o
LOAD:0000000000000A92 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000308↑o
LOAD:0000000000000A97 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000800↑o
LOAD:0000000000000AA2 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000830↑o
LOAD:0000000000000AB2 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000710↑o
LOAD:0000000000000ABF aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000BC8↓o
LOAD:0000000000000AC9 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000BD8↓o
LOAD:0000000000000AD4 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000BE8↓o
LOAD:0000000000000ADE aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000BF8↓o
LOAD:0000000000000AEA aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000C08↓o
LOAD:0000000000000AF6 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000AF6                                         ; DATA XREF: LOAD:0000000000000380↑o
LOAD:0000000000000B12 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000590↑o
LOAD:0000000000000B21 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B21                                         ; DATA XREF: LOAD:0000000000000770↑o
LOAD:0000000000000B3B                 align 4
LOAD:0000000000000B3C ; ELF GNU Symbol Version Table
LOAD:0000000000000B3C                 dw 0
LOAD:0000000000000B3E                 dw 3                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000B40                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000B42                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000B44                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000B46                 dw 2                    ; error_at_line@@GLIBC_2.2.5
LOAD:0000000000000B48                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000B4A                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000B4C                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000B4E                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000B50                 dw 2                    ; isatty@@GLIBC_2.2.5
LOAD:0000000000000B52                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000B54                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000B56                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000B58                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000B5A                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000B5C                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000B5E                 dw 2                    ; __lxstat@@GLIBC_2.2.5
LOAD:0000000000000B60                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000B62                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000B64                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000B66                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000B68                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000B6A                 dw 2                    ; geteuid@@GLIBC_2.2.5
LOAD:0000000000000B6C                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000B6E                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000B70                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000B72                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000B74                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000B76                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000B78                 dw 2                    ; strtol@@GLIBC_2.2.5
LOAD:0000000000000B7A                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000B7C                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000B7E                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000B80                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000B82                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000B84                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000B86                 dw 2                    ; getegid@@GLIBC_2.2.5
LOAD:0000000000000B88                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000B8A                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000B8C                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000B8E                 dw 3                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000B90                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000B92                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000B94                 dw 2                    ; euidaccess@@GLIBC_2.2.5
LOAD:0000000000000B96                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000B98                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000B9A                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000B9C                 dw 3                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000B9E                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000BA0                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000BA2                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000BA4                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000BA6                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000BA8                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000BAA                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000BAC                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000BAE                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000BB0                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000BB2                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000BB4                 dw 0
LOAD:0000000000000BB6                 dw 0
LOAD:0000000000000BB8 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000BB8                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_878, 10h, 0> ; "libc.so.6"
LOAD:0000000000000BC8                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_878, \ ; "GLIBC_2.3"
LOAD:0000000000000BC8                                10h>
LOAD:0000000000000BD8                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_878, \ ; "GLIBC_2.14"
LOAD:0000000000000BD8                                10h>
LOAD:0000000000000BE8                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_878, \ ; "GLIBC_2.4"
LOAD:0000000000000BE8                                10h>
LOAD:0000000000000BF8                 Elf64_Vernaux <9691974h, 0, 3, offset aGlibc234 - offset byte_878, \ ; "GLIBC_2.3.4"
LOAD:0000000000000BF8                                10h>
LOAD:0000000000000C08                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_878, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000C18 ; ELF RELA Relocation Table
LOAD:0000000000000C18                 Elf64_Rela <20ABD0h, 8, 17F0h> ; R_X86_64_RELATIVE +17F0h
LOAD:0000000000000C30                 Elf64_Rela <20ABD8h, 8, 17B0h> ; R_X86_64_RELATIVE +17B0h
LOAD:0000000000000C48                 Elf64_Rela <20ABE0h, 8, 8DF1h> ; R_X86_64_RELATIVE +8DF1h
LOAD:0000000000000C60                 Elf64_Rela <20ABE8h, 8, 8DF9h> ; R_X86_64_RELATIVE +8DF9h
LOAD:0000000000000C78                 Elf64_Rela <20ABF0h, 8, 8DFFh> ; R_X86_64_RELATIVE +8DFFh
LOAD:0000000000000C90                 Elf64_Rela <20ABF8h, 8, 8E0Ch> ; R_X86_64_RELATIVE +8E0Ch
LOAD:0000000000000CA8                 Elf64_Rela <20AC00h, 8, 8E19h> ; R_X86_64_RELATIVE +8E19h
LOAD:0000000000000CC0                 Elf64_Rela <20AC08h, 8, 8E2Dh> ; R_X86_64_RELATIVE +8E2Dh
LOAD:0000000000000CD8                 Elf64_Rela <20AC10h, 8, 8E2Fh> ; R_X86_64_RELATIVE +8E2Fh
LOAD:0000000000000CF0                 Elf64_Rela <20AC18h, 8, 8E12h> ; R_X86_64_RELATIVE +8E12h
LOAD:0000000000000D08                 Elf64_Rela <20AC20h, 8, 7F26h> ; R_X86_64_RELATIVE +7F26h
LOAD:0000000000000D20                 Elf64_Rela <20AC28h, 8, 8E37h> ; R_X86_64_RELATIVE +8E37h
LOAD:0000000000000D38                 Elf64_Rela <20B008h, 8, 20B008h> ; R_X86_64_RELATIVE +20B008h
LOAD:0000000000000D50                 Elf64_Rela <20B060h, 8, 20B070h> ; R_X86_64_RELATIVE +20B070h
LOAD:0000000000000D68                 Elf64_Rela <20B078h, 8, 20B0E0h> ; R_X86_64_RELATIVE +20B0E0h
LOAD:0000000000000D80                 Elf64_Rela <20AFC0h, 700000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000D98                 Elf64_Rela <20AFC8h, 1800000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000DB0                 Elf64_Rela <20AFD0h, 1D00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000DC8                 Elf64_Rela <20AFD8h, 3100000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000DE0                 Elf64_Rela <20AFE0h, 3400000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000DF8                 Elf64_Rela <20B080h, 3700000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000E10                 Elf64_Rela <20B088h, 3600000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000E28                 Elf64_Rela <20B090h, 3900000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000E40                 Elf64_Rela <20B0A0h, 3B00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000E58 ; ELF JMPREL Relocation Table
LOAD:0000000000000E58                 Elf64_Rela <20AE40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:0000000000000E70                 Elf64_Rela <20AE48h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000E88                 Elf64_Rela <20AE50h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000EA0                 Elf64_Rela <20AE58h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000EB8                 Elf64_Rela <20AE60h, 500000007h, 0> ; R_X86_64_JUMP_SLOT error_at_line
LOAD:0000000000000ED0                 Elf64_Rela <20AE68h, 600000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000EE8                 Elf64_Rela <20AE70h, 800000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000F00                 Elf64_Rela <20AE78h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000F18                 Elf64_Rela <20AE80h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT isatty
LOAD:0000000000000F30                 Elf64_Rela <20AE88h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000F48                 Elf64_Rela <20AE90h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000F60                 Elf64_Rela <20AE98h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000F78                 Elf64_Rela <20AEA0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000F90                 Elf64_Rela <20AEA8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000FA8                 Elf64_Rela <20AEB0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000000FC0                 Elf64_Rela <20AEB8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:0000000000000FD8                 Elf64_Rela <20AEC0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000FF0                 Elf64_Rela <20AEC8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001008                 Elf64_Rela <20AED0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001020                 Elf64_Rela <20AED8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001038                 Elf64_Rela <20AEE0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001050                 Elf64_Rela <20AEE8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT geteuid
LOAD:0000000000001068                 Elf64_Rela <20AEF0h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001080                 Elf64_Rela <20AEF8h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001098                 Elf64_Rela <20AF00h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000010B0                 Elf64_Rela <20AF08h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:00000000000010C8                 Elf64_Rela <20AF10h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT strtol
LOAD:00000000000010E0                 Elf64_Rela <20AF18h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000010F8                 Elf64_Rela <20AF20h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001110                 Elf64_Rela <20AF28h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000001128                 Elf64_Rela <20AF30h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001140                 Elf64_Rela <20AF38h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001158                 Elf64_Rela <20AF40h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001170                 Elf64_Rela <20AF48h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT getegid
LOAD:0000000000001188                 Elf64_Rela <20AF50h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000011A0                 Elf64_Rela <20AF58h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000011B8                 Elf64_Rela <20AF60h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000011D0                 Elf64_Rela <20AF68h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000011E8                 Elf64_Rela <20AF70h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001200                 Elf64_Rela <20AF78h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001218                 Elf64_Rela <20AF80h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT euidaccess
LOAD:0000000000001230                 Elf64_Rela <20AF88h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001248                 Elf64_Rela <20AF90h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001260                 Elf64_Rela <20AF98h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001278                 Elf64_Rela <20AFA0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001290                 Elf64_Rela <20AFA8h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000012A8                 Elf64_Rela <20AFB0h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000012C0                 Elf64_Rela <20AFB8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000012C0 LOAD            ends
LOAD:00000000000012C0
.init:00000000000012D8 ; ===========================================================================
.init:00000000000012D8
.init:00000000000012D8 ; Segment type: Pure code
.init:00000000000012D8 ; Segment permissions: Read/Execute
.init:00000000000012D8 _init           segment dword public 'CODE' use64
.init:00000000000012D8                 assume cs:_init
.init:00000000000012D8                 ;org 12D8h
.init:00000000000012D8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000012D8
.init:00000000000012D8 ; =============== S U B R O U T I N E =======================================
.init:00000000000012D8
.init:00000000000012D8
.init:00000000000012D8                 public _init_proc
.init:00000000000012D8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000012D8                 sub     rsp, 8          ; _init
.init:00000000000012DC                 mov     rax, cs:__gmon_start___ptr
.init:00000000000012E3                 test    rax, rax
.init:00000000000012E6                 jz      short loc_12EA
.init:00000000000012E8                 call    rax ; __gmon_start__
.init:00000000000012EA
.init:00000000000012EA loc_12EA:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000012EA                 add     rsp, 8
.init:00000000000012EE                 retn
.init:00000000000012EE _init_proc      endp
.init:00000000000012EE
.init:00000000000012EE _init           ends
.init:00000000000012EE
LOAD:00000000000012EF ; ===========================================================================
LOAD:00000000000012EF
LOAD:00000000000012EF ; Segment type: Pure code
LOAD:00000000000012EF ; Segment permissions: Read/Execute
LOAD:00000000000012EF LOAD            segment byte public 'CODE' use64
LOAD:00000000000012EF                 assume cs:LOAD
LOAD:00000000000012EF                 ;org 12EFh
LOAD:00000000000012EF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000012EF                 align 10h
LOAD:00000000000012EF LOAD            ends
LOAD:00000000000012EF
.plt:00000000000012F0 ; ===========================================================================
.plt:00000000000012F0
.plt:00000000000012F0 ; Segment type: Pure code
.plt:00000000000012F0 ; Segment permissions: Read/Execute
.plt:00000000000012F0 _plt            segment para public 'CODE' use64
.plt:00000000000012F0                 assume cs:_plt
.plt:00000000000012F0                 ;org 12F0h
.plt:00000000000012F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000012F0
.plt:00000000000012F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012F0
.plt:00000000000012F0
.plt:00000000000012F0 sub_12F0        proc near               ; CODE XREF: .plt:000000000000130B↓j
.plt:00000000000012F0                                         ; .plt:000000000000131B↓j ...
.plt:00000000000012F0 ; __unwind {
.plt:00000000000012F0                 push    cs:qword_20AE30
.plt:00000000000012F6                 jmp     cs:qword_20AE38
.plt:00000000000012F6 sub_12F0        endp
.plt:00000000000012F6
.plt:00000000000012F6 ; ---------------------------------------------------------------------------
.plt:00000000000012FC                 align 20h
.plt:0000000000001300
.plt:0000000000001300 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001300
.plt:0000000000001300 ; Attributes: thunk
.plt:0000000000001300
.plt:0000000000001300 ___snprintf_chk proc near               ; CODE XREF: vasnprintf+5B8↓p
.plt:0000000000001300                                         ; vasnprintf+6F0↓p ...
.plt:0000000000001300                 jmp     cs:__snprintf_chk_ptr
.plt:0000000000001300 ___snprintf_chk endp
.plt:0000000000001300
.plt:0000000000001306 ; ---------------------------------------------------------------------------
.plt:0000000000001306                 push    0
.plt:000000000000130B                 jmp     sub_12F0
.plt:0000000000001310
.plt:0000000000001310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001310
.plt:0000000000001310 ; Attributes: thunk
.plt:0000000000001310
.plt:0000000000001310 ; void free(void *ptr)
.plt:0000000000001310 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:0000000000001310                                         ; quotearg_free+37↓p ...
.plt:0000000000001310                 jmp     cs:free_ptr
.plt:0000000000001310 _free           endp
.plt:0000000000001310
.plt:0000000000001316 ; ---------------------------------------------------------------------------
.plt:0000000000001316                 push    1
.plt:000000000000131B                 jmp     sub_12F0
.plt:0000000000001320
.plt:0000000000001320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001320
.plt:0000000000001320 ; Attributes: noreturn thunk
.plt:0000000000001320
.plt:0000000000001320 ; void __noreturn abort(void)
.plt:0000000000001320 _abort          proc near               ; CODE XREF: binary_operator:loc_209D↓p
.plt:0000000000001320                                         ; set_program_name+9A↓p ...
.plt:0000000000001320                 jmp     cs:abort_ptr
.plt:0000000000001320 _abort          endp
.plt:0000000000001320
.plt:0000000000001326 ; ---------------------------------------------------------------------------
.plt:0000000000001326                 push    2
.plt:000000000000132B                 jmp     sub_12F0
.plt:0000000000001330
.plt:0000000000001330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001330
.plt:0000000000001330 ; Attributes: thunk
.plt:0000000000001330
.plt:0000000000001330 ; int *__errno_location(void)
.plt:0000000000001330 ___errno_location proc near             ; CODE XREF: unary_operator+111↓p
.plt:0000000000001330                                         ; unary_operator+536↓p ...
.plt:0000000000001330                 jmp     cs:__errno_location_ptr
.plt:0000000000001330 ___errno_location endp
.plt:0000000000001330
.plt:0000000000001336 ; ---------------------------------------------------------------------------
.plt:0000000000001336                 push    3
.plt:000000000000133B                 jmp     sub_12F0
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340 ; Attributes: thunk
.plt:0000000000001340
.plt:0000000000001340 ; void error_at_line(int status, int errnum, const char *fname, unsigned int lineno, const char *format, ...)
.plt:0000000000001340 _error_at_line  proc near               ; CODE XREF: verror_at_line+44↓p
.plt:0000000000001340                 jmp     cs:error_at_line_ptr
.plt:0000000000001340 _error_at_line  endp
.plt:0000000000001340
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:0000000000001346                 push    4
.plt:000000000000134B                 jmp     sub_12F0
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: thunk
.plt:0000000000001350
.plt:0000000000001350 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001350 _strncmp        proc near               ; CODE XREF: usage+3FC↓p
.plt:0000000000001350                                         ; usage+4BD↓p
.plt:0000000000001350                 jmp     cs:strncmp_ptr
.plt:0000000000001350 _strncmp        endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    5
.plt:000000000000135B                 jmp     sub_12F0
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: noreturn thunk
.plt:0000000000001360
.plt:0000000000001360 ; void __noreturn _exit(int status)
.plt:0000000000001360 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001360                 jmp     cs:_exit_ptr
.plt:0000000000001360 __exit          endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    6
.plt:000000000000136B                 jmp     sub_12F0
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370 ; Attributes: thunk
.plt:0000000000001370
.plt:0000000000001370 ; size_t __fpending(FILE *fp)
.plt:0000000000001370 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001370                 jmp     cs:__fpending_ptr
.plt:0000000000001370 ___fpending     endp
.plt:0000000000001370
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:0000000000001376                 push    7
.plt:000000000000137B                 jmp     sub_12F0
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: thunk
.plt:0000000000001380
.plt:0000000000001380 ; int isatty(int fd)
.plt:0000000000001380 _isatty         proc near               ; CODE XREF: unary_operator+149↓p
.plt:0000000000001380                 jmp     cs:isatty_ptr
.plt:0000000000001380 _isatty         endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    8
.plt:000000000000138B                 jmp     sub_12F0
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: thunk
.plt:0000000000001390
.plt:0000000000001390 ; char *textdomain(const char *domainname)
.plt:0000000000001390 _textdomain     proc near               ; CODE XREF: main+3E↓p
.plt:0000000000001390                 jmp     cs:textdomain_ptr
.plt:0000000000001390 _textdomain     endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    9
.plt:000000000000139B                 jmp     sub_12F0
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; int fclose(FILE *stream)
.plt:00000000000013A0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000013A0                                         ; rpl_fclose+6B↓j
.plt:00000000000013A0                 jmp     cs:fclose_ptr
.plt:00000000000013A0 _fclose         endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    0Ah
.plt:00000000000013AB                 jmp     sub_12F0
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000013B0 _bindtextdomain proc near               ; CODE XREF: main+32↓p
.plt:00000000000013B0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000013B0 _bindtextdomain endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    0Bh
.plt:00000000000013BB                 jmp     sub_12F0
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000013C0 _dcgettext      proc near               ; CODE XREF: main+C1↓p
.plt:00000000000013C0                                         ; find_int+C2↓p ...
.plt:00000000000013C0                 jmp     cs:dcgettext_ptr
.plt:00000000000013C0 _dcgettext      endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    0Ch
.plt:00000000000013CB                 jmp     sub_12F0
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000013D0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000013D0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000013D0 ___ctype_get_mb_cur_max endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    0Dh
.plt:00000000000013DB                 jmp     sub_12F0
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; size_t strlen(const char *s)
.plt:00000000000013E0 _strlen         proc near               ; CODE XREF: binary_operator+33E↓p
.plt:00000000000013E0                                         ; binary_operator:loc_1FF0↓p ...
.plt:00000000000013E0                 jmp     cs:strlen_ptr
.plt:00000000000013E0 _strlen         endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    0Eh
.plt:00000000000013EB                 jmp     sub_12F0
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:00000000000013F0 ___lxstat       proc near               ; CODE XREF: unary_operator+4E1↓p
.plt:00000000000013F0                 jmp     cs:__lxstat_ptr
.plt:00000000000013F0 ___lxstat       endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    0Fh
.plt:00000000000013FB                 jmp     sub_12F0
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: noreturn thunk
.plt:0000000000001400
.plt:0000000000001400 ___stack_chk_fail proc near             ; CODE XREF: binary_operator:loc_2098↓p
.plt:0000000000001400                                         ; unary_operator:loc_26AC↓p ...
.plt:0000000000001400                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001400 ___stack_chk_fail endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    10h
.plt:000000000000140B                 jmp     sub_12F0
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001410 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001410                 jmp     cs:mbrtowc_ptr
.plt:0000000000001410 _mbrtowc        endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    11h
.plt:000000000000141B                 jmp     sub_12F0
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; char *strrchr(const char *s, int c)
.plt:0000000000001420 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001420                 jmp     cs:strrchr_ptr
.plt:0000000000001420 _strrchr        endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    12h
.plt:000000000000142B                 jmp     sub_12F0
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001430 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001430                                         ; rpl_fseeko+3B↓p
.plt:0000000000001430                 jmp     cs:lseek_ptr
.plt:0000000000001430 _lseek          endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    13h
.plt:000000000000143B                 jmp     sub_12F0
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001440 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001440                                         ; xzalloc+12↓j
.plt:0000000000001440                 jmp     cs:memset_ptr
.plt:0000000000001440 _memset         endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    14h
.plt:000000000000144B                 jmp     sub_12F0
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; __uid_t geteuid(void)
.plt:0000000000001450 _geteuid        proc near               ; CODE XREF: unary_operator+56E↓p
.plt:0000000000001450                 jmp     cs:geteuid_ptr
.plt:0000000000001450 _geteuid        endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    15h
.plt:000000000000145B                 jmp     sub_12F0
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001460 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001460                 jmp     cs:memcmp_ptr
.plt:0000000000001460 _memcmp         endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    16h
.plt:000000000000146B                 jmp     sub_12F0
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001470 _fputs_unlocked proc near               ; CODE XREF: usage+7D↓p
.plt:0000000000001470                                         ; usage+A2↓p ...
.plt:0000000000001470                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001470 _fputs_unlocked endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    17h
.plt:000000000000147B                 jmp     sub_12F0
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001480 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001480                 jmp     cs:calloc_ptr
.plt:0000000000001480 _calloc         endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    18h
.plt:000000000000148B                 jmp     sub_12F0
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001490 _strcmp         proc near               ; CODE XREF: binary_operator+CB↓p
.plt:0000000000001490                                         ; binary_operator+15F↓p
.plt:0000000000001490                 jmp     cs:strcmp_ptr
.plt:0000000000001490 _strcmp         endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    19h
.plt:000000000000149B                 jmp     sub_12F0
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; __int64 strtol(const char *nptr, char **endptr, int base)
.plt:00000000000014A0 _strtol         proc near               ; CODE XREF: unary_operator+129↓p
.plt:00000000000014A0                 jmp     cs:strtol_ptr
.plt:00000000000014A0 _strtol         endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    1Ah
.plt:00000000000014AB                 jmp     sub_12F0
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000014B0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:00000000000014B0                                         ; xstrcat+BA↓p ...
.plt:00000000000014B0                 jmp     cs:memcpy_ptr
.plt:00000000000014B0 _memcpy         endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    1Bh
.plt:00000000000014BB                 jmp     sub_12F0
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; int fileno(FILE *stream)
.plt:00000000000014C0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:00000000000014C0                                         ; rpl_fclose+4B↓p ...
.plt:00000000000014C0                 jmp     cs:fileno_ptr
.plt:00000000000014C0 _fileno         endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    1Ch
.plt:00000000000014CB                 jmp     sub_12F0
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:00000000000014D0 ___xstat        proc near               ; CODE XREF: binary_operator+1EA↓p
.plt:00000000000014D0                                         ; binary_operator+217↓p ...
.plt:00000000000014D0                 jmp     cs:__xstat_ptr
.plt:00000000000014D0 ___xstat        endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    1Dh
.plt:00000000000014DB                 jmp     sub_12F0
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; void *malloc(size_t size)
.plt:00000000000014E0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:00000000000014E0                                         ; vasnprintf+D2↓p ...
.plt:00000000000014E0                 jmp     cs:malloc_ptr
.plt:00000000000014E0 _malloc         endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    1Eh
.plt:00000000000014EB                 jmp     sub_12F0
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; int fflush(FILE *stream)
.plt:00000000000014F0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000014F0                                         ; rpl_fflush+3B↓j
.plt:00000000000014F0                 jmp     cs:fflush_ptr
.plt:00000000000014F0 _fflush         endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    1Fh
.plt:00000000000014FB                 jmp     sub_12F0
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; char *nl_langinfo(nl_item item)
.plt:0000000000001500 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001500                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001500 _nl_langinfo    endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    20h ; ' '
.plt:000000000000150B                 jmp     sub_12F0
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; __gid_t getegid(void)
.plt:0000000000001510 _getegid        proc near               ; CODE XREF: unary_operator+544↓p
.plt:0000000000001510                 jmp     cs:getegid_ptr
.plt:0000000000001510 _getegid        endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    21h ; '!'
.plt:000000000000151B                 jmp     sub_12F0
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; int __freading(FILE *fp)
.plt:0000000000001520 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001520                                         ; rpl_fflush+9↓p
.plt:0000000000001520                 jmp     cs:__freading_ptr
.plt:0000000000001520 ___freading     endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    22h ; '"'
.plt:000000000000152B                 jmp     sub_12F0
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001530 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001530                                         ; vasnprintf+285↓p ...
.plt:0000000000001530                 jmp     cs:realloc_ptr
.plt:0000000000001530 _realloc        endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    23h ; '#'
.plt:000000000000153B                 jmp     sub_12F0
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; char *setlocale(int category, const char *locale)
.plt:0000000000001540 _setlocale      proc near               ; CODE XREF: main+1F↓p
.plt:0000000000001540                                         ; usage+3E3↓p ...
.plt:0000000000001540                 jmp     cs:setlocale_ptr
.plt:0000000000001540 _setlocale      endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    24h ; '$'
.plt:000000000000154B                 jmp     sub_12F0
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ___printf_chk   proc near               ; CODE XREF: usage+2EA↓p
.plt:0000000000001550                                         ; usage+3D7↓p ...
.plt:0000000000001550                 jmp     cs:__printf_chk_ptr
.plt:0000000000001550 ___printf_chk   endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    25h ; '%'
.plt:000000000000155B                 jmp     sub_12F0
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001560 _error          proc near               ; CODE XREF: close_stdout+7D↓p
.plt:0000000000001560                                         ; close_stdout+9D↓p ...
.plt:0000000000001560                 jmp     cs:error_ptr
.plt:0000000000001560 _error          endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    26h ; '&'
.plt:000000000000156B                 jmp     sub_12F0
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001570 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_5C3A↓j
.plt:0000000000001570                 jmp     cs:fseeko_ptr
.plt:0000000000001570 _fseeko         endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    27h ; '''
.plt:000000000000157B                 jmp     sub_12F0
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; int euidaccess(const char *name, int type)
.plt:0000000000001580 _euidaccess     proc near               ; CODE XREF: unary_operator+AE↓p
.plt:0000000000001580                                         ; unary_operator+176↓p ...
.plt:0000000000001580                 jmp     cs:euidaccess_ptr
.plt:0000000000001580 _euidaccess     endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    28h ; '('
.plt:000000000000158B                 jmp     sub_12F0
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001590 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001590                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001590 ___cxa_atexit   endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    29h ; ')'
.plt:000000000000159B                 jmp     sub_12F0
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: noreturn thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; void __noreturn exit(int status)
.plt:00000000000015A0 _exit           proc near               ; CODE XREF: test_syntax_error+A5↓p
.plt:00000000000015A0                                         ; usage+58↓p
.plt:00000000000015A0                 jmp     cs:exit_ptr
.plt:00000000000015A0 _exit           endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    2Ah ; '*'
.plt:00000000000015AB                 jmp     sub_12F0
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000015B0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:00000000000015B0                 jmp     cs:fwrite_ptr
.plt:00000000000015B0 _fwrite         endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    2Bh ; '+'
.plt:00000000000015BB                 jmp     sub_12F0
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:00000000000015C0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000015C0 ___fprintf_chk  endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    2Ch ; ','
.plt:00000000000015CB                 jmp     sub_12F0
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000015D0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000015D0                 jmp     cs:mbsinit_ptr
.plt:00000000000015D0 _mbsinit        endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    2Dh ; '-'
.plt:00000000000015DB                 jmp     sub_12F0
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; int iswprint(wint_t wc)
.plt:00000000000015E0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000015E0                 jmp     cs:iswprint_ptr
.plt:00000000000015E0 _iswprint       endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    2Eh ; '.'
.plt:00000000000015EB                 jmp     sub_12F0
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000015F0 ___ctype_b_loc  proc near               ; CODE XREF: find_int+4↓p
.plt:00000000000015F0                                         ; quotearg_buffer_restyled+513↓p
.plt:00000000000015F0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000015F0 ___ctype_b_loc  endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    2Fh ; '/'
.plt:00000000000015FB                 jmp     sub_12F0
.plt:00000000000015FB ; } // starts at 12F0
.plt:00000000000015FB _plt            ends
.plt:00000000000015FB
.plt.got:0000000000001600 ; ===========================================================================
.plt.got:0000000000001600
.plt.got:0000000000001600 ; Segment type: Pure code
.plt.got:0000000000001600 ; Segment permissions: Read/Execute
.plt.got:0000000000001600 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001600                 assume cs:_plt_got
.plt.got:0000000000001600                 ;org 1600h
.plt.got:0000000000001600                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001600
.plt.got:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001600
.plt.got:0000000000001600 ; Attributes: thunk
.plt.got:0000000000001600
.plt.got:0000000000001600 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001600 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001600 ; __unwind {
.plt.got:0000000000001600                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001600 __cxa_finalize  endp
.plt.got:0000000000001600
.plt.got:0000000000001600 ; ---------------------------------------------------------------------------
.plt.got:0000000000001606                 align 8
.plt.got:0000000000001606 ; } // starts at 1600
.plt.got:0000000000001606 _plt_got        ends
.plt.got:0000000000001606
LOAD:0000000000001608 ; ===========================================================================
LOAD:0000000000001608
LOAD:0000000000001608 ; Segment type: Pure code
LOAD:0000000000001608 ; Segment permissions: Read/Execute
LOAD:0000000000001608 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001608                 assume cs:LOAD
LOAD:0000000000001608                 ;org 1608h
LOAD:0000000000001608                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001608                 align 10h
LOAD:0000000000001608 LOAD            ends
LOAD:0000000000001608
.text:0000000000001610 ; ===========================================================================
.text:0000000000001610
.text:0000000000001610 ; Segment type: Pure code
.text:0000000000001610 ; Segment permissions: Read/Execute
.text:0000000000001610 _text           segment para public 'CODE' use64
.text:0000000000001610                 assume cs:_text
.text:0000000000001610                 ;org 1610h
.text:0000000000001610                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001610
.text:0000000000001610 ; =============== S U B R O U T I N E =======================================
.text:0000000000001610
.text:0000000000001610
.text:0000000000001610 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001610                 public main
.text:0000000000001610 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001610 ; __unwind {
.text:0000000000001610                 push    rbp
.text:0000000000001611                 push    rbx
.text:0000000000001612                 mov     ebx, edi
.text:0000000000001614                 mov     rbp, rsi
.text:0000000000001617                 sub     rsp, 8
.text:000000000000161B                 mov     rdi, [rsi]
.text:000000000000161E                 call    set_program_name
.text:0000000000001623                 lea     rsi, aSOnlineHelpS+16h ; locale
.text:000000000000162A                 mov     edi, 6          ; category
.text:000000000000162F                 call    _setlocale
.text:0000000000001634                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:000000000000163B                 lea     rdi, domainname ; "coreutils"
.text:0000000000001642                 call    _bindtextdomain
.text:0000000000001647                 lea     rdi, domainname ; "coreutils"
.text:000000000000164E                 call    _textdomain
.text:0000000000001653                 lea     rdi, close_stdout
.text:000000000000165A                 mov     cs:exit_failure, 2
.text:0000000000001664                 call    atexit
.text:0000000000001669                 cmp     ebx, 1
.text:000000000000166C                 mov     cs:argv, rbp
.text:0000000000001673                 mov     cs:argc, ebx
.text:0000000000001679                 mov     cs:pos, 1
.text:0000000000001683                 jle     short loc_16A9
.text:0000000000001685                 lea     edi, [rbx-1]
.text:0000000000001688                 call    posixtest
.text:000000000000168D                 movsxd  rdx, cs:pos
.text:0000000000001694                 cmp     edx, cs:argc
.text:000000000000169A                 jnz     short loc_16B0
.text:000000000000169C                 xor     eax, 1
.text:000000000000169F                 movzx   eax, al
.text:00000000000016A2
.text:00000000000016A2 loc_16A2:                               ; CODE XREF: main+9E↓j
.text:00000000000016A2                 add     rsp, 8
.text:00000000000016A6                 pop     rbx
.text:00000000000016A7                 pop     rbp
.text:00000000000016A8                 retn
.text:00000000000016A9 ; ---------------------------------------------------------------------------
.text:00000000000016A9
.text:00000000000016A9 loc_16A9:                               ; CODE XREF: main+73↑j
.text:00000000000016A9                 mov     eax, 1
.text:00000000000016AE                 jmp     short loc_16A2
.text:00000000000016B0 ; ---------------------------------------------------------------------------
.text:00000000000016B0
.text:00000000000016B0 loc_16B0:                               ; CODE XREF: main+8A↑j
.text:00000000000016B0                 mov     rax, cs:argv
.text:00000000000016B7                 mov     rdi, [rax+rdx*8]
.text:00000000000016BB                 call    quote
.text:00000000000016C0                 lea     rsi, msgid      ; "extra argument %s"
.text:00000000000016C7                 mov     rbx, rax
.text:00000000000016CA                 xor     edi, edi        ; domainname
.text:00000000000016CC                 mov     edx, 5          ; category
.text:00000000000016D1                 call    _dcgettext
.text:00000000000016D6                 mov     rsi, rbx
.text:00000000000016D9                 mov     rdi, rax
.text:00000000000016DC                 xor     eax, eax
.text:00000000000016DE                 call    test_syntax_error
.text:00000000000016DE ; } // starts at 1610
.text:00000000000016DE main            endp
.text:00000000000016DE
.text:00000000000016DE ; ---------------------------------------------------------------------------
.text:00000000000016E3                 align 10h
.text:00000000000016F0
.text:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000016F0
.text:00000000000016F0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000016F0
.text:00000000000016F0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000016F0                 public start
.text:00000000000016F0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000016F0 ; __unwind {
.text:00000000000016F0                 xor     ebp, ebp
.text:00000000000016F2                 mov     r9, rdx         ; rtld_fini
.text:00000000000016F5                 pop     rsi             ; argc
.text:00000000000016F6                 mov     rdx, rsp        ; ubp_av
.text:00000000000016F9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000016FD                 push    rax
.text:00000000000016FE                 push    rsp             ; stack_end
.text:00000000000016FF                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001706                 lea     rcx, __libc_csu_init ; init
.text:000000000000170D                 lea     rdi, main       ; main
.text:0000000000001714                 call    cs:__libc_start_main_ptr
.text:000000000000171A                 hlt
.text:000000000000171A ; } // starts at 16F0
.text:000000000000171A start           endp
.text:000000000000171A
.text:000000000000171A ; ---------------------------------------------------------------------------
.text:000000000000171B                 align 20h
.text:0000000000001720
.text:0000000000001720 ; =============== S U B R O U T I N E =======================================
.text:0000000000001720
.text:0000000000001720 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001720
.text:0000000000001720 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_17D3↓p
.text:0000000000001720                 lea     rdi, __bss_start
.text:0000000000001727                 push    rbp
.text:0000000000001728                 lea     rax, __bss_start
.text:000000000000172F                 cmp     rax, rdi
.text:0000000000001732                 mov     rbp, rsp
.text:0000000000001735                 jz      short loc_1750
.text:0000000000001737                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000173E                 test    rax, rax
.text:0000000000001741                 jz      short loc_1750
.text:0000000000001743                 pop     rbp
.text:0000000000001744                 jmp     rax
.text:0000000000001744 ; ---------------------------------------------------------------------------
.text:0000000000001746                 align 10h
.text:0000000000001750
.text:0000000000001750 loc_1750:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001750                                         ; deregister_tm_clones+21↑j
.text:0000000000001750                 pop     rbp
.text:0000000000001751                 retn
.text:0000000000001751 deregister_tm_clones endp
.text:0000000000001751
.text:0000000000001751 ; ---------------------------------------------------------------------------
.text:0000000000001752                 align 20h
.text:0000000000001760
.text:0000000000001760 ; =============== S U B R O U T I N E =======================================
.text:0000000000001760
.text:0000000000001760 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001760
.text:0000000000001760 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001760                 lea     rdi, __bss_start
.text:0000000000001767                 lea     rsi, __bss_start
.text:000000000000176E                 push    rbp
.text:000000000000176F                 sub     rsi, rdi
.text:0000000000001772                 mov     rbp, rsp
.text:0000000000001775                 sar     rsi, 3
.text:0000000000001779                 mov     rax, rsi
.text:000000000000177C                 shr     rax, 3Fh
.text:0000000000001780                 add     rsi, rax
.text:0000000000001783                 sar     rsi, 1
.text:0000000000001786                 jz      short loc_17A0
.text:0000000000001788                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000178F                 test    rax, rax
.text:0000000000001792                 jz      short loc_17A0
.text:0000000000001794                 pop     rbp
.text:0000000000001795                 jmp     rax
.text:0000000000001795 ; ---------------------------------------------------------------------------
.text:0000000000001797                 align 20h
.text:00000000000017A0
.text:00000000000017A0 loc_17A0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000017A0                                         ; register_tm_clones+32↑j
.text:00000000000017A0                 pop     rbp
.text:00000000000017A1                 retn
.text:00000000000017A1 register_tm_clones endp
.text:00000000000017A1
.text:00000000000017A1 ; ---------------------------------------------------------------------------
.text:00000000000017A2                 align 10h
.text:00000000000017B0
.text:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000017B0
.text:00000000000017B0 ; Attributes: info_from_lumina
.text:00000000000017B0
.text:00000000000017B0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000017B0                 cmp     cs:completed_7697, 0
.text:00000000000017B7                 jnz     short locret_17E8
.text:00000000000017B9                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000017C1                 push    rbp
.text:00000000000017C2                 mov     rbp, rsp
.text:00000000000017C5                 jz      short loc_17D3
.text:00000000000017C7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000017CE                 call    __cxa_finalize
.text:00000000000017D3
.text:00000000000017D3 loc_17D3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000017D3                 call    deregister_tm_clones
.text:00000000000017D8                 mov     cs:completed_7697, 1
.text:00000000000017DF                 pop     rbp
.text:00000000000017E0                 retn
.text:00000000000017E0 ; ---------------------------------------------------------------------------
.text:00000000000017E1                 align 8
.text:00000000000017E8
.text:00000000000017E8 locret_17E8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000017E8                 rep retn
.text:00000000000017E8 __do_global_dtors_aux endp
.text:00000000000017E8
.text:00000000000017E8 ; ---------------------------------------------------------------------------
.text:00000000000017EA                 align 10h
.text:00000000000017F0
.text:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000017F0
.text:00000000000017F0 ; Attributes: bp-based frame
.text:00000000000017F0
.text:00000000000017F0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000017F0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000017F0                 push    rbp
.text:00000000000017F1                 mov     rbp, rsp
.text:00000000000017F4                 pop     rbp
.text:00000000000017F5                 jmp     register_tm_clones
.text:00000000000017F5 frame_dummy     endp
.text:00000000000017F5
.text:00000000000017F5 ; ---------------------------------------------------------------------------
.text:00000000000017FA                 align 20h
.text:0000000000001800
.text:0000000000001800 ; =============== S U B R O U T I N E =======================================
.text:0000000000001800
.text:0000000000001800
.text:0000000000001800 binop           proc near               ; CODE XREF: or+232↓p
.text:0000000000001800                                         ; or+244↓p ...
.text:0000000000001800 ; __unwind {
.text:0000000000001800                 mov     r8, rdi
.text:0000000000001803                 lea     rdi, unk_7D45
.text:000000000000180A                 mov     ecx, 2
.text:000000000000180F                 mov     rsi, r8
.text:0000000000001812                 mov     eax, 1
.text:0000000000001817                 repe cmpsb
.text:0000000000001819                 setnbe  dl
.text:000000000000181C                 sbb     dl, 0
.text:000000000000181F                 test    dl, dl
.text:0000000000001821                 jz      locret_1968
.text:0000000000001827                 lea     rdi, unk_7D44
.text:000000000000182E                 mov     ecx, 3
.text:0000000000001833                 mov     rsi, r8
.text:0000000000001836                 repe cmpsb
.text:0000000000001838                 setnbe  dl
.text:000000000000183B                 sbb     dl, 0
.text:000000000000183E                 test    dl, dl
.text:0000000000001840                 jz      locret_1968
.text:0000000000001846                 lea     rdi, unk_7D47
.text:000000000000184D                 mov     ecx, 3
.text:0000000000001852                 mov     rsi, r8
.text:0000000000001855                 repe cmpsb
.text:0000000000001857                 setnbe  dl
.text:000000000000185A                 sbb     dl, 0
.text:000000000000185D                 test    dl, dl
.text:000000000000185F                 jz      locret_1968
.text:0000000000001865                 lea     rdi, unk_7D4A
.text:000000000000186C                 mov     ecx, 4
.text:0000000000001871                 mov     rsi, r8
.text:0000000000001874                 repe cmpsb
.text:0000000000001876                 setnbe  dl
.text:0000000000001879                 sbb     dl, 0
.text:000000000000187C                 test    dl, dl
.text:000000000000187E                 jz      locret_1968
.text:0000000000001884                 lea     rdi, unk_7D4E
.text:000000000000188B                 mov     ecx, 4
.text:0000000000001890                 mov     rsi, r8
.text:0000000000001893                 repe cmpsb
.text:0000000000001895                 setnbe  dl
.text:0000000000001898                 sbb     dl, 0
.text:000000000000189B                 test    dl, dl
.text:000000000000189D                 jz      locret_1968
.text:00000000000018A3                 lea     rdi, unk_7D52
.text:00000000000018AA                 mov     ecx, 4
.text:00000000000018AF                 mov     rsi, r8
.text:00000000000018B2                 repe cmpsb
.text:00000000000018B4                 setnbe  dl
.text:00000000000018B7                 sbb     dl, 0
.text:00000000000018BA                 test    dl, dl
.text:00000000000018BC                 jz      locret_1968
.text:00000000000018C2                 lea     rdi, unk_7D56
.text:00000000000018C9                 mov     ecx, 4
.text:00000000000018CE                 mov     rsi, r8
.text:00000000000018D1                 repe cmpsb
.text:00000000000018D3                 setnbe  dl
.text:00000000000018D6                 sbb     dl, 0
.text:00000000000018D9                 test    dl, dl
.text:00000000000018DB                 jz      locret_1968
.text:00000000000018E1                 lea     rdi, unk_7D5A
.text:00000000000018E8                 mov     ecx, 4
.text:00000000000018ED                 mov     rsi, r8
.text:00000000000018F0                 repe cmpsb
.text:00000000000018F2                 setnbe  dl
.text:00000000000018F5                 sbb     dl, 0
.text:00000000000018F8                 test    dl, dl
.text:00000000000018FA                 jz      short locret_1968
.text:00000000000018FC                 lea     rdi, unk_7D5E
.text:0000000000001903                 mov     ecx, 4
.text:0000000000001908                 mov     rsi, r8
.text:000000000000190B                 repe cmpsb
.text:000000000000190D                 setnbe  dl
.text:0000000000001910                 sbb     dl, 0
.text:0000000000001913                 test    dl, dl
.text:0000000000001915                 jz      short locret_1968
.text:0000000000001917                 lea     rdi, unk_7D62
.text:000000000000191E                 mov     ecx, 4
.text:0000000000001923                 mov     rsi, r8
.text:0000000000001926                 repe cmpsb
.text:0000000000001928                 setnbe  dl
.text:000000000000192B                 sbb     dl, 0
.text:000000000000192E                 test    dl, dl
.text:0000000000001930                 jz      short locret_1968
.text:0000000000001932                 lea     rdi, unk_7D66
.text:0000000000001939                 mov     ecx, 4
.text:000000000000193E                 mov     rsi, r8
.text:0000000000001941                 repe cmpsb
.text:0000000000001943                 setnbe  dl
.text:0000000000001946                 sbb     dl, 0
.text:0000000000001949                 test    dl, dl
.text:000000000000194B                 jz      short locret_1968
.text:000000000000194D                 lea     rdi, unk_7D6A
.text:0000000000001954                 mov     ecx, 4
.text:0000000000001959                 mov     rsi, r8
.text:000000000000195C                 repe cmpsb
.text:000000000000195E                 setnbe  al
.text:0000000000001961                 sbb     al, 0
.text:0000000000001963                 test    al, al
.text:0000000000001965                 setz    al
.text:0000000000001968
.text:0000000000001968 locret_1968:                            ; CODE XREF: binop+21↑j
.text:0000000000001968                                         ; binop+40↑j ...
.text:0000000000001968                 rep retn
.text:0000000000001968 ; } // starts at 1800
.text:0000000000001968 binop           endp
.text:0000000000001968
.text:0000000000001968 ; ---------------------------------------------------------------------------
.text:000000000000196A                 align 10h
.text:0000000000001970
.text:0000000000001970 ; =============== S U B R O U T I N E =======================================
.text:0000000000001970
.text:0000000000001970 ; Attributes: noreturn
.text:0000000000001970
.text:0000000000001970 test_syntax_error proc near             ; CODE XREF: main+CE↑p
.text:0000000000001970                                         ; find_int+CF↓p ...
.text:0000000000001970
.text:0000000000001970 var_D8          = dword ptr -0D8h
.text:0000000000001970 var_D4          = dword ptr -0D4h
.text:0000000000001970 var_D0          = qword ptr -0D0h
.text:0000000000001970 var_C8          = qword ptr -0C8h
.text:0000000000001970 var_C0          = qword ptr -0C0h
.text:0000000000001970 var_B8          = byte ptr -0B8h
.text:0000000000001970 var_B0          = qword ptr -0B0h
.text:0000000000001970 var_A8          = qword ptr -0A8h
.text:0000000000001970 var_A0          = qword ptr -0A0h
.text:0000000000001970 var_98          = qword ptr -98h
.text:0000000000001970 var_90          = qword ptr -90h
.text:0000000000001970 var_88          = xmmword ptr -88h
.text:0000000000001970 var_78          = xmmword ptr -78h
.text:0000000000001970 var_68          = xmmword ptr -68h
.text:0000000000001970 var_58          = xmmword ptr -58h
.text:0000000000001970 var_48          = xmmword ptr -48h
.text:0000000000001970 var_38          = xmmword ptr -38h
.text:0000000000001970 var_28          = xmmword ptr -28h
.text:0000000000001970 var_18          = xmmword ptr -18h
.text:0000000000001970 arg_0           = byte ptr  8
.text:0000000000001970
.text:0000000000001970 ; __unwind {
.text:0000000000001970                 sub     rsp, 0D8h
.text:0000000000001977                 test    al, al
.text:0000000000001979                 mov     [rsp+0D8h+var_B0], rsi
.text:000000000000197E                 mov     [rsp+0D8h+var_A8], rdx
.text:0000000000001983                 mov     [rsp+0D8h+var_A0], rcx
.text:0000000000001988                 mov     [rsp+0D8h+var_98], r8
.text:000000000000198D                 mov     [rsp+0D8h+var_90], r9
.text:0000000000001992                 jz      short loc_19CB
.text:0000000000001994                 movaps  [rsp+0D8h+var_88], xmm0
.text:0000000000001999                 movaps  [rsp+0D8h+var_78], xmm1
.text:000000000000199E                 movaps  [rsp+0D8h+var_68], xmm2
.text:00000000000019A3                 movaps  [rsp+0D8h+var_58], xmm3
.text:00000000000019AB                 movaps  [rsp+0D8h+var_48], xmm4
.text:00000000000019B3                 movaps  [rsp+0D8h+var_38], xmm5
.text:00000000000019BB                 movaps  [rsp+0D8h+var_28], xmm6
.text:00000000000019C3                 movaps  [rsp+0D8h+var_18], xmm7
.text:00000000000019CB
.text:00000000000019CB loc_19CB:                               ; CODE XREF: test_syntax_error+22↑j
.text:00000000000019CB                 mov     rax, fs:28h
.text:00000000000019D4                 mov     [rsp+0D8h+var_C0], rax
.text:00000000000019D9                 xor     eax, eax
.text:00000000000019DB                 lea     rax, [rsp+0D8h+arg_0]
.text:00000000000019E3                 mov     rdx, rdi
.text:00000000000019E6                 mov     rcx, rsp
.text:00000000000019E9                 xor     edi, edi
.text:00000000000019EB                 xor     esi, esi
.text:00000000000019ED                 mov     [rsp+0D8h+var_D0], rax
.text:00000000000019F2                 lea     rax, [rsp+0D8h+var_B8]
.text:00000000000019F7                 mov     [rsp+0D8h+var_D8], 8
.text:00000000000019FE                 mov     [rsp+0D8h+var_D4], 30h ; '0'
.text:0000000000001A06                 mov     [rsp+0D8h+var_C8], rax
.text:0000000000001A0B                 call    verror
.text:0000000000001A10                 mov     edi, 2          ; status
.text:0000000000001A15                 call    _exit
.text:0000000000001A15 ; } // starts at 1970
.text:0000000000001A15 test_syntax_error endp
.text:0000000000001A15
.text:0000000000001A15 ; ---------------------------------------------------------------------------
.text:0000000000001A1A                 align 20h
.text:0000000000001A20
.text:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A20
.text:0000000000001A20
.text:0000000000001A20 find_int        proc near               ; CODE XREF: binary_operator+321↓p
.text:0000000000001A20                                         ; binary_operator+4A5↓p ...
.text:0000000000001A20 ; __unwind {
.text:0000000000001A20                 push    rbx
.text:0000000000001A21                 mov     rbx, rdi
.text:0000000000001A24                 call    ___ctype_b_loc
.text:0000000000001A29                 mov     r8, [rax]
.text:0000000000001A2C                 mov     rax, rbx
.text:0000000000001A2F
.text:0000000000001A2F loc_1A2F:                               ; CODE XREF: find_int+94↓j
.text:0000000000001A2F                 movzx   ecx, byte ptr [rax]
.text:0000000000001A32                 test    byte ptr [r8+rcx*2], 1
.text:0000000000001A37                 mov     rdx, rcx
.text:0000000000001A3A                 jnz     short loc_1AB0
.text:0000000000001A3C                 cmp     cl, 2Bh ; '+'
.text:0000000000001A3F                 jz      short loc_1AC0
.text:0000000000001A41                 xor     ecx, ecx
.text:0000000000001A43                 cmp     dl, 2Dh ; '-'
.text:0000000000001A46                 setz    cl
.text:0000000000001A49                 add     rcx, rax
.text:0000000000001A4C
.text:0000000000001A4C loc_1A4C:                               ; CODE XREF: find_int+A7↓j
.text:0000000000001A4C                 movsx   esi, byte ptr [rcx]
.text:0000000000001A4F                 lea     rdx, [rcx+1]
.text:0000000000001A53                 sub     esi, 30h ; '0'
.text:0000000000001A56                 cmp     esi, 9
.text:0000000000001A59                 ja      short loc_1AC9
.text:0000000000001A5B                 movsx   esi, byte ptr [rcx+1]
.text:0000000000001A5F                 mov     ecx, esi
.text:0000000000001A61                 sub     esi, 30h ; '0'
.text:0000000000001A64                 cmp     esi, 9
.text:0000000000001A67                 ja      short loc_1A81
.text:0000000000001A69                 nop     dword ptr [rax+00000000h]
.text:0000000000001A70
.text:0000000000001A70 loc_1A70:                               ; CODE XREF: find_int+5F↓j
.text:0000000000001A70                 add     rdx, 1
.text:0000000000001A74                 movsx   esi, byte ptr [rdx]
.text:0000000000001A77                 mov     ecx, esi
.text:0000000000001A79                 sub     esi, 30h ; '0'
.text:0000000000001A7C                 cmp     esi, 9
.text:0000000000001A7F                 jbe     short loc_1A70
.text:0000000000001A81
.text:0000000000001A81 loc_1A81:                               ; CODE XREF: find_int+47↑j
.text:0000000000001A81                 movzx   esi, cl
.text:0000000000001A84                 test    byte ptr [r8+rsi*2], 1
.text:0000000000001A89                 jz      short loc_1AA1
.text:0000000000001A8B                 nop     dword ptr [rax+rax+00h]
.text:0000000000001A90
.text:0000000000001A90 loc_1A90:                               ; CODE XREF: find_int+7F↓j
.text:0000000000001A90                 add     rdx, 1
.text:0000000000001A94                 movzx   esi, byte ptr [rdx]
.text:0000000000001A97                 test    byte ptr [r8+rsi*2], 1
.text:0000000000001A9C                 mov     rcx, rsi
.text:0000000000001A9F                 jnz     short loc_1A90
.text:0000000000001AA1
.text:0000000000001AA1 loc_1AA1:                               ; CODE XREF: find_int+69↑j
.text:0000000000001AA1                 test    cl, cl
.text:0000000000001AA3                 jnz     short loc_1AC9
.text:0000000000001AA5                 pop     rbx
.text:0000000000001AA6                 retn
.text:0000000000001AA6 ; ---------------------------------------------------------------------------
.text:0000000000001AA7                 align 10h
.text:0000000000001AB0
.text:0000000000001AB0 loc_1AB0:                               ; CODE XREF: find_int+1A↑j
.text:0000000000001AB0                 add     rax, 1
.text:0000000000001AB4                 jmp     loc_1A2F
.text:0000000000001AB4 ; ---------------------------------------------------------------------------
.text:0000000000001AB9                 align 20h
.text:0000000000001AC0
.text:0000000000001AC0 loc_1AC0:                               ; CODE XREF: find_int+1F↑j
.text:0000000000001AC0                 lea     rcx, [rax+1]
.text:0000000000001AC4                 mov     rax, rcx
.text:0000000000001AC7                 jmp     short loc_1A4C
.text:0000000000001AC9 ; ---------------------------------------------------------------------------
.text:0000000000001AC9
.text:0000000000001AC9 loc_1AC9:                               ; CODE XREF: find_int+39↑j
.text:0000000000001AC9                                         ; find_int+83↑j
.text:0000000000001AC9                 mov     rdi, rbx
.text:0000000000001ACC                 call    quote
.text:0000000000001AD1                 lea     rsi, aInvalidInteger ; "invalid integer %s"
.text:0000000000001AD8                 mov     rbx, rax
.text:0000000000001ADB                 xor     edi, edi        ; domainname
.text:0000000000001ADD                 mov     edx, 5          ; category
.text:0000000000001AE2                 call    _dcgettext
.text:0000000000001AE7                 mov     rsi, rbx
.text:0000000000001AEA                 mov     rdi, rax
.text:0000000000001AED                 xor     eax, eax
.text:0000000000001AEF                 call    test_syntax_error
.text:0000000000001AEF ; } // starts at 1A20
.text:0000000000001AEF find_int        endp
.text:0000000000001AEF
.text:0000000000001AEF ; ---------------------------------------------------------------------------
.text:0000000000001AF4                 align 20h
.text:0000000000001B00
.text:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B00
.text:0000000000001B00 ; Attributes: noreturn
.text:0000000000001B00
.text:0000000000001B00 beyond          proc near               ; CODE XREF: unary_advance+25↓p
.text:0000000000001B00                                         ; two_arguments+6B↓p ...
.text:0000000000001B00 ; __unwind {
.text:0000000000001B00                 movsxd  rdx, cs:argc
.text:0000000000001B07                 mov     rax, cs:argv
.text:0000000000001B0E                 push    rbx
.text:0000000000001B0F                 mov     rdi, [rax+rdx*8-8]
.text:0000000000001B14                 call    quote
.text:0000000000001B19                 lea     rsi, aMissingArgumen ; "missing argument after %s"
.text:0000000000001B20                 mov     rbx, rax
.text:0000000000001B23                 xor     edi, edi        ; domainname
.text:0000000000001B25                 mov     edx, 5          ; category
.text:0000000000001B2A                 call    _dcgettext
.text:0000000000001B2F                 mov     rsi, rbx
.text:0000000000001B32                 mov     rdi, rax
.text:0000000000001B35                 xor     eax, eax
.text:0000000000001B37                 call    test_syntax_error
.text:0000000000001B37 ; } // starts at 1B00
.text:0000000000001B37 beyond          endp
.text:0000000000001B37
.text:0000000000001B37 ; ---------------------------------------------------------------------------
.text:0000000000001B3C                 align 20h
.text:0000000000001B40
.text:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B40
.text:0000000000001B40
.text:0000000000001B40 unary_advance   proc near               ; CODE XREF: unary_operator:loc_2130↓p
.text:0000000000001B40                                         ; unary_operator:loc_2178↓p ...
.text:0000000000001B40 ; __unwind {
.text:0000000000001B40                 mov     eax, cs:pos
.text:0000000000001B46                 lea     edx, [rax+1]
.text:0000000000001B49                 cmp     edx, cs:argc
.text:0000000000001B4F                 mov     cs:pos, edx
.text:0000000000001B55                 jge     short loc_1B61
.text:0000000000001B57                 add     eax, 2
.text:0000000000001B5A                 mov     cs:pos, eax
.text:0000000000001B60                 retn
.text:0000000000001B61 ; ---------------------------------------------------------------------------
.text:0000000000001B61
.text:0000000000001B61 loc_1B61:                               ; CODE XREF: unary_advance+15↑j
.text:0000000000001B61                 sub     rsp, 8
.text:0000000000001B65                 call    beyond
.text:0000000000001B65 ; } // starts at 1B40
.text:0000000000001B65 unary_advance   endp
.text:0000000000001B65
.text:0000000000001B65 ; ---------------------------------------------------------------------------
.text:0000000000001B6A                 align 10h
.text:0000000000001B70
.text:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B70
.text:0000000000001B70
.text:0000000000001B70 binary_operator proc near               ; CODE XREF: or+302↓p
.text:0000000000001B70                                         ; or+31F↓p ...
.text:0000000000001B70
.text:0000000000001B70 var_1A0         = qword ptr -1A0h
.text:0000000000001B70 var_198         = stat ptr -198h
.text:0000000000001B70 stat_buf        = stat ptr -108h
.text:0000000000001B70 var_78          = byte ptr -78h
.text:0000000000001B70 var_58          = byte ptr -58h
.text:0000000000001B70 var_40          = qword ptr -40h
.text:0000000000001B70
.text:0000000000001B70 ; __unwind {
.text:0000000000001B70                 push    r15
.text:0000000000001B72                 push    r14
.text:0000000000001B74                 mov     eax, edi
.text:0000000000001B76                 push    r13
.text:0000000000001B78                 push    r12
.text:0000000000001B7A                 push    rbp
.text:0000000000001B7B                 push    rbx
.text:0000000000001B7C                 sub     rsp, 178h
.text:0000000000001B83                 mov     ecx, cs:pos
.text:0000000000001B89                 mov     rbx, fs:28h
.text:0000000000001B92                 mov     [rsp+1A8h+var_40], rbx
.text:0000000000001B9A                 xor     ebx, ebx
.text:0000000000001B9C                 test    dil, dil
.text:0000000000001B9F                 lea     edx, [rcx+1]
.text:0000000000001BA2                 jz      short loc_1BAD
.text:0000000000001BA4                 mov     cs:pos, edx
.text:0000000000001BAA                 lea     edx, [rcx+2]
.text:0000000000001BAD
.text:0000000000001BAD loc_1BAD:                               ; CODE XREF: binary_operator+32↑j
.text:0000000000001BAD                 mov     edi, cs:argc
.text:0000000000001BB3                 xor     r13d, r13d
.text:0000000000001BB6                 mov     rbx, cs:argv
.text:0000000000001BBD                 movsxd  r14, edx
.text:0000000000001BC0                 lea     ecx, [rdi-2]
.text:0000000000001BC3                 cmp     ecx, edx
.text:0000000000001BC5                 jle     short loc_1BE8
.text:0000000000001BC7                 mov     rsi, [rbx+r14*8+8]
.text:0000000000001BCC                 lea     rdi, aEfDoesNotAccep+14h ; "-l"
.text:0000000000001BD3                 mov     ecx, 3
.text:0000000000001BD8                 repe cmpsb
.text:0000000000001BDA                 setnbe  cl
.text:0000000000001BDD                 sbb     cl, 0
.text:0000000000001BE0                 test    cl, cl
.text:0000000000001BE2                 jz      loc_1C80
.text:0000000000001BE8
.text:0000000000001BE8 loc_1BE8:                               ; CODE XREF: binary_operator+55↑j
.text:0000000000001BE8                                         ; binary_operator+11C↓j
.text:0000000000001BE8                 mov     rsi, [rbx+r14*8]
.text:0000000000001BEC                 lea     r15, ds:0[r14*8]
.text:0000000000001BF4                 movzx   edx, byte ptr [rsi]
.text:0000000000001BF7                 cmp     dl, 2Dh ; '-'
.text:0000000000001BFA                 jz      loc_1CF0
.text:0000000000001C00                 cmp     dl, 3Dh ; '='
.text:0000000000001C03                 jz      loc_1C98
.text:0000000000001C09
.text:0000000000001C09 loc_1C09:                               ; CODE XREF: binary_operator+132↓j
.text:0000000000001C09                                         ; binary_operator+13C↓j
.text:0000000000001C09                 lea     rdi, unk_7D44
.text:0000000000001C10                 mov     ecx, 3
.text:0000000000001C15                 repe cmpsb
.text:0000000000001C17                 setnbe  al
.text:0000000000001C1A                 sbb     al, 0
.text:0000000000001C1C                 test    al, al
.text:0000000000001C1E                 jnz     loc_209D
.text:0000000000001C24                 movsxd  rax, cs:pos
.text:0000000000001C2B                 mov     rbp, rax
.text:0000000000001C2E                 add     rax, 2
.text:0000000000001C32                 mov     rsi, [rbx+rax*8] ; s2
.text:0000000000001C36                 mov     rdi, [rbx+rax*8-10h] ; s1
.text:0000000000001C3B                 call    _strcmp
.text:0000000000001C40                 test    eax, eax
.text:0000000000001C42                 setnz   r13b
.text:0000000000001C46                 add     ebp, 3
.text:0000000000001C49                 mov     cs:pos, ebp
.text:0000000000001C4F
.text:0000000000001C4F loc_1C4F:                               ; CODE XREF: binary_operator+173↓j
.text:0000000000001C4F                                         ; binary_operator+21E↓j ...
.text:0000000000001C4F                 mov     rbx, [rsp+1A8h+var_40]
.text:0000000000001C57                 xor     rbx, fs:28h
.text:0000000000001C60                 mov     eax, r13d
.text:0000000000001C63                 jnz     loc_2098
.text:0000000000001C69                 add     rsp, 178h
.text:0000000000001C70                 pop     rbx
.text:0000000000001C71                 pop     rbp
.text:0000000000001C72                 pop     r12
.text:0000000000001C74                 pop     r13
.text:0000000000001C76                 pop     r14
.text:0000000000001C78                 pop     r15
.text:0000000000001C7A                 retn
.text:0000000000001C7A ; ---------------------------------------------------------------------------
.text:0000000000001C7B                 align 20h
.text:0000000000001C80
.text:0000000000001C80 loc_1C80:                               ; CODE XREF: binary_operator+72↑j
.text:0000000000001C80                 mov     cs:pos, edx
.text:0000000000001C86                 mov     r13d, 1
.text:0000000000001C8C                 jmp     loc_1BE8
.text:0000000000001C8C ; ---------------------------------------------------------------------------
.text:0000000000001C91                 align 8
.text:0000000000001C98
.text:0000000000001C98 loc_1C98:                               ; CODE XREF: binary_operator+93↑j
.text:0000000000001C98                 movzx   eax, byte ptr [rsi+1]
.text:0000000000001C9C                 test    al, al
.text:0000000000001C9E                 jz      short loc_1CB8
.text:0000000000001CA0                 cmp     al, 3Dh ; '='
.text:0000000000001CA2                 jnz     loc_1C09
.text:0000000000001CA8                 cmp     byte ptr [rsi+2], 0
.text:0000000000001CAC                 jnz     loc_1C09
.text:0000000000001CB2                 nop     word ptr [rax+rax+00h]
.text:0000000000001CB8
.text:0000000000001CB8 loc_1CB8:                               ; CODE XREF: binary_operator+12E↑j
.text:0000000000001CB8                 movsxd  rax, cs:pos
.text:0000000000001CBF                 mov     rbp, rax
.text:0000000000001CC2                 add     rax, 2
.text:0000000000001CC6                 mov     rsi, [rbx+rax*8] ; s2
.text:0000000000001CCA                 mov     rdi, [rbx+rax*8-10h] ; s1
.text:0000000000001CCF                 call    _strcmp
.text:0000000000001CD4                 test    eax, eax
.text:0000000000001CD6                 setz    r13b
.text:0000000000001CDA                 add     ebp, 3
.text:0000000000001CDD                 mov     cs:pos, ebp
.text:0000000000001CE3                 jmp     loc_1C4F
.text:0000000000001CE3 ; ---------------------------------------------------------------------------
.text:0000000000001CE8                 align 10h
.text:0000000000001CF0
.text:0000000000001CF0 loc_1CF0:                               ; CODE XREF: binary_operator+8A↑j
.text:0000000000001CF0                 movzx   edx, byte ptr [rsi+1]
.text:0000000000001CF4                 cmp     dl, 6Ch ; 'l'
.text:0000000000001CF7                 jz      loc_1E68
.text:0000000000001CFD                 cmp     dl, 67h ; 'g'
.text:0000000000001D00                 jz      loc_1E68
.text:0000000000001D06
.text:0000000000001D06 loc_1D06:                               ; CODE XREF: binary_operator+304↓j
.text:0000000000001D06                 cmp     dl, 65h ; 'e'
.text:0000000000001D09                 jz      loc_1DD0
.text:0000000000001D0F                 cmp     dl, 6Eh ; 'n'
.text:0000000000001D12                 jz      loc_1F10
.text:0000000000001D18
.text:0000000000001D18 loc_1D18:                               ; CODE XREF: binary_operator+473↓j
.text:0000000000001D18                 cmp     dl, 6Fh ; 'o'
.text:0000000000001D1B                 jnz     loc_2070
.text:0000000000001D21                 cmp     byte ptr [rsi+2], 74h ; 't'
.text:0000000000001D25                 jnz     loc_1F9A
.text:0000000000001D2B                 cmp     byte ptr [rsi+3], 0
.text:0000000000001D2F                 jnz     loc_1F9A
.text:0000000000001D35                 add     cs:pos, 3
.text:0000000000001D3C                 or      r13b, al
.text:0000000000001D3F                 jnz     loc_20A2
.text:0000000000001D45                 lea     r14, [rsp+1A8h+stat_buf]
.text:0000000000001D4D                 mov     rsi, [rbx+r15-8] ; filename
.text:0000000000001D52                 mov     edi, 1          ; ver
.text:0000000000001D57                 mov     rdx, r14        ; stat_buf
.text:0000000000001D5A                 call    ___xstat
.text:0000000000001D5F                 test    eax, eax
.text:0000000000001D61                 mov     ebp, eax
.text:0000000000001D63                 jnz     short loc_1D7A
.text:0000000000001D65                 mov     rax, [rsp+1A8h+stat_buf.st_mtim.tv_nsec]
.text:0000000000001D6D                 mov     r12, [rsp+1A8h+stat_buf.st_mtim.tv_sec]
.text:0000000000001D75                 mov     [rsp+1A8h+var_1A0], rax
.text:0000000000001D7A
.text:0000000000001D7A loc_1D7A:                               ; CODE XREF: binary_operator+1F3↑j
.text:0000000000001D7A                 mov     rsi, [rbx+r15+8] ; filename
.text:0000000000001D7F                 mov     rdx, r14        ; stat_buf
.text:0000000000001D82                 mov     edi, 1          ; ver
.text:0000000000001D87                 call    ___xstat
.text:0000000000001D8C                 test    eax, eax
.text:0000000000001D8E                 jnz     loc_1C4F
.text:0000000000001D94                 mov     rdx, [rsp+1A8h+stat_buf.st_mtim.tv_sec]
.text:0000000000001D9C                 test    ebp, ebp
.text:0000000000001D9E                 mov     rsi, [rsp+1A8h+stat_buf.st_mtim.tv_nsec]
.text:0000000000001DA6                 setnz   r13b
.text:0000000000001DAA                 cmp     r12, rdx
.text:0000000000001DAD                 setl    al
.text:0000000000001DB0                 or      r13b, al
.text:0000000000001DB3                 jnz     loc_1C4F
.text:0000000000001DB9                 mov     ebp, dword ptr [rsp+1A8h+var_1A0]
.text:0000000000001DBD                 sub     ebp, esi
.text:0000000000001DBF                 shr     ebp, 1Fh
.text:0000000000001DC2                 cmp     r12, rdx
.text:0000000000001DC5                 cmovle  r13d, ebp
.text:0000000000001DC9                 jmp     loc_1C4F
.text:0000000000001DC9 ; ---------------------------------------------------------------------------
.text:0000000000001DCE                 align 10h
.text:0000000000001DD0
.text:0000000000001DD0 loc_1DD0:                               ; CODE XREF: binary_operator+199↑j
.text:0000000000001DD0                 movzx   edx, byte ptr [rsi+2]
.text:0000000000001DD4                 cmp     dl, 71h ; 'q'
.text:0000000000001DD7                 jz      loc_1F90
.text:0000000000001DDD
.text:0000000000001DDD loc_1DDD:                               ; CODE XREF: binary_operator+50D↓j
.text:0000000000001DDD                 cmp     dl, 66h ; 'f'
.text:0000000000001DE0                 jnz     loc_1F9A
.text:0000000000001DE6                 cmp     byte ptr [rsi+3], 0
.text:0000000000001DEA                 jnz     loc_1F9A
.text:0000000000001DF0                 add     cs:pos, 3
.text:0000000000001DF7                 or      r13b, al
.text:0000000000001DFA                 jnz     loc_20C1
.text:0000000000001E00                 mov     rsi, [rbx+r15-8] ; filename
.text:0000000000001E05                 lea     rdx, [rsp+1A8h+var_198] ; stat_buf
.text:0000000000001E0A                 mov     edi, 1          ; ver
.text:0000000000001E0F                 call    ___xstat
.text:0000000000001E14                 test    eax, eax
.text:0000000000001E16                 jnz     loc_1C4F
.text:0000000000001E1C                 mov     rsi, [rbx+r15+8] ; filename
.text:0000000000001E21                 lea     rdx, [rsp+1A8h+stat_buf] ; stat_buf
.text:0000000000001E29                 mov     edi, 1          ; ver
.text:0000000000001E2E                 call    ___xstat
.text:0000000000001E33                 test    eax, eax
.text:0000000000001E35                 jnz     loc_1C4F
.text:0000000000001E3B                 mov     rax, [rsp+1A8h+stat_buf.st_dev]
.text:0000000000001E43                 cmp     [rsp+1A8h+var_198.st_dev], rax
.text:0000000000001E48                 jnz     loc_1C4F
.text:0000000000001E4E                 mov     rax, [rsp+1A8h+stat_buf.st_ino]
.text:0000000000001E56                 cmp     [rsp+1A8h+var_198.st_ino], rax
.text:0000000000001E5B                 setz    r13b
.text:0000000000001E5F                 jmp     loc_1C4F
.text:0000000000001E5F ; ---------------------------------------------------------------------------
.text:0000000000001E64                 align 8
.text:0000000000001E68
.text:0000000000001E68 loc_1E68:                               ; CODE XREF: binary_operator+187↑j
.text:0000000000001E68                                         ; binary_operator+190↑j
.text:0000000000001E68                 movzx   ecx, byte ptr [rsi+2]
.text:0000000000001E6C                 cmp     cl, 65h ; 'e'
.text:0000000000001E6F                 jz      short loc_1E7A
.text:0000000000001E71                 cmp     cl, 74h ; 't'
.text:0000000000001E74                 jnz     loc_1D06
.text:0000000000001E7A
.text:0000000000001E7A loc_1E7A:                               ; CODE XREF: binary_operator+2FF↑j
.text:0000000000001E7A                 cmp     byte ptr [rsi+3], 0
.text:0000000000001E7E                 jnz     loc_1FE0
.text:0000000000001E84
.text:0000000000001E84 loc_1E84:                               ; CODE XREF: binary_operator+424↓j
.text:0000000000001E84                 test    al, al
.text:0000000000001E86                 mov     rdi, [rbx+r15-8] ; s
.text:0000000000001E8B                 jnz     loc_1FF0
.text:0000000000001E91                 call    find_int
.text:0000000000001E96                 mov     rbx, rax
.text:0000000000001E99
.text:0000000000001E99 loc_1E99:                               ; CODE XREF: binary_operator+498↓j
.text:0000000000001E99                 test    r13b, r13b
.text:0000000000001E9C                 mov     rax, cs:argv
.text:0000000000001EA3                 jz      loc_2010
.text:0000000000001EA9                 mov     rdi, [rax+r15+10h] ; s
.text:0000000000001EAE                 call    _strlen
.text:0000000000001EB3                 lea     rsi, [rsp+1A8h+var_58]
.text:0000000000001EBB                 mov     rdi, rax
.text:0000000000001EBE                 call    umaxtostr
.text:0000000000001EC3
.text:0000000000001EC3 loc_1EC3:                               ; CODE XREF: binary_operator+4AA↓j
.text:0000000000001EC3                 mov     rsi, rax
.text:0000000000001EC6                 mov     rdi, rbx
.text:0000000000001EC9                 call    strintcmp
.text:0000000000001ECE                 mov     rdx, cs:argv
.text:0000000000001ED5                 mov     rcx, [rdx+r14*8]
.text:0000000000001ED9                 cmp     byte ptr [rcx+2], 65h ; 'e'
.text:0000000000001EDD                 movzx   ecx, byte ptr [rcx+1]
.text:0000000000001EE1                 setz    dl
.text:0000000000001EE4                 add     cs:pos, 3
.text:0000000000001EEB                 cmp     cl, 6Ch ; 'l'
.text:0000000000001EEE                 jz      loc_2058
.text:0000000000001EF4                 cmp     cl, 67h ; 'g'
.text:0000000000001EF7                 jz      loc_2088
.text:0000000000001EFD                 test    eax, eax
.text:0000000000001EFF                 setnz   al
.text:0000000000001F02                 cmp     al, dl
.text:0000000000001F04                 setz    r13b
.text:0000000000001F08                 jmp     loc_1C4F
.text:0000000000001F08 ; ---------------------------------------------------------------------------
.text:0000000000001F0D                 align 10h
.text:0000000000001F10
.text:0000000000001F10 loc_1F10:                               ; CODE XREF: binary_operator+1A2↑j
.text:0000000000001F10                 movzx   ecx, byte ptr [rsi+2]
.text:0000000000001F14                 cmp     cl, 65h ; 'e'
.text:0000000000001F17                 jz      short loc_1F90
.text:0000000000001F19
.text:0000000000001F19 loc_1F19:                               ; CODE XREF: binary_operator+479↓j
.text:0000000000001F19                 cmp     cl, 74h ; 't'
.text:0000000000001F1C                 jnz     short loc_1F9A
.text:0000000000001F1E                 cmp     byte ptr [rsi+3], 0
.text:0000000000001F22                 jnz     short loc_1F9A
.text:0000000000001F24                 add     cs:pos, 3
.text:0000000000001F2B                 or      r13b, al
.text:0000000000001F2E                 jnz     loc_20CF
.text:0000000000001F34                 lea     rbp, [rsp+1A8h+stat_buf]
.text:0000000000001F3C                 mov     rsi, [rbx+r15-8] ; filename
.text:0000000000001F41                 mov     edi, 1          ; ver
.text:0000000000001F46                 mov     rdx, rbp        ; stat_buf
.text:0000000000001F49                 call    ___xstat
.text:0000000000001F4E                 test    eax, eax
.text:0000000000001F50                 lea     rcx, [rbx+r15+8]
.text:0000000000001F55                 jnz     short loc_1FC8
.text:0000000000001F57                 mov     rsi, [rcx]      ; filename
.text:0000000000001F5A                 mov     rdx, rbp        ; stat_buf
.text:0000000000001F5D                 mov     edi, 1          ; ver
.text:0000000000001F62                 mov     rbx, [rsp+1A8h+stat_buf.st_mtim.tv_sec]
.text:0000000000001F6A                 mov     r12, [rsp+1A8h+stat_buf.st_mtim.tv_nsec]
.text:0000000000001F72                 call    ___xstat
.text:0000000000001F77                 test    eax, eax
.text:0000000000001F79                 jz      loc_2020
.text:0000000000001F7F                 mov     r13d, 1
.text:0000000000001F85                 jmp     loc_1C4F
.text:0000000000001F85 ; ---------------------------------------------------------------------------
.text:0000000000001F8A                 align 10h
.text:0000000000001F90
.text:0000000000001F90 loc_1F90:                               ; CODE XREF: binary_operator+267↑j
.text:0000000000001F90                                         ; binary_operator+3A7↑j
.text:0000000000001F90                 cmp     byte ptr [rsi+3], 0
.text:0000000000001F94                 jz      loc_1E84
.text:0000000000001F9A
.text:0000000000001F9A loc_1F9A:                               ; CODE XREF: binary_operator+1B5↑j
.text:0000000000001F9A                                         ; binary_operator+1BF↑j ...
.text:0000000000001F9A                 mov     rdi, rsi
.text:0000000000001F9D                 call    quote
.text:0000000000001FA2                 lea     rsi, aSUnknownBinary ; "%s: unknown binary operator"
.text:0000000000001FA9                 mov     rbx, rax
.text:0000000000001FAC                 xor     edi, edi        ; domainname
.text:0000000000001FAE                 mov     edx, 5          ; category
.text:0000000000001FB3                 call    _dcgettext
.text:0000000000001FB8                 mov     rsi, rbx
.text:0000000000001FBB                 mov     rdi, rax
.text:0000000000001FBE                 xor     eax, eax
.text:0000000000001FC0                 call    test_syntax_error
.text:0000000000001FC0 ; ---------------------------------------------------------------------------
.text:0000000000001FC5                 align 8
.text:0000000000001FC8
.text:0000000000001FC8 loc_1FC8:                               ; CODE XREF: binary_operator+3E5↑j
.text:0000000000001FC8                 mov     rsi, [rcx]      ; filename
.text:0000000000001FCB                 mov     rdx, rbp        ; stat_buf
.text:0000000000001FCE                 mov     edi, 1          ; ver
.text:0000000000001FD3                 call    ___xstat
.text:0000000000001FD8                 jmp     loc_1C4F
.text:0000000000001FD8 ; ---------------------------------------------------------------------------
.text:0000000000001FDD                 align 20h
.text:0000000000001FE0
.text:0000000000001FE0 loc_1FE0:                               ; CODE XREF: binary_operator+30E↑j
.text:0000000000001FE0                 cmp     dl, 6Eh ; 'n'
.text:0000000000001FE3                 jnz     loc_1D18
.text:0000000000001FE9                 jmp     loc_1F19
.text:0000000000001FE9 ; ---------------------------------------------------------------------------
.text:0000000000001FEE                 align 10h
.text:0000000000001FF0
.text:0000000000001FF0 loc_1FF0:                               ; CODE XREF: binary_operator+31B↑j
.text:0000000000001FF0                 call    _strlen
.text:0000000000001FF5                 lea     rsi, [rsp+1A8h+var_78]
.text:0000000000001FFD                 mov     rdi, rax
.text:0000000000002000                 call    umaxtostr
.text:0000000000002005                 mov     rbx, rax
.text:0000000000002008                 jmp     loc_1E99
.text:0000000000002008 ; ---------------------------------------------------------------------------
.text:000000000000200D                 align 10h
.text:0000000000002010
.text:0000000000002010 loc_2010:                               ; CODE XREF: binary_operator+333↑j
.text:0000000000002010                 mov     rdi, [rax+r15+8]
.text:0000000000002015                 call    find_int
.text:000000000000201A                 jmp     loc_1EC3
.text:000000000000201A ; ---------------------------------------------------------------------------
.text:000000000000201F                 align 20h
.text:0000000000002020
.text:0000000000002020 loc_2020:                               ; CODE XREF: binary_operator+409↑j
.text:0000000000002020                 cmp     rbx, [rsp+1A8h+stat_buf.st_mtim.tv_sec]
.text:0000000000002028                 mov     rax, [rsp+1A8h+stat_buf.st_mtim.tv_nsec]
.text:0000000000002030                 jl      loc_1C4F
.text:0000000000002036                 mov     r13d, 1
.text:000000000000203C                 jg      loc_1C4F
.text:0000000000002042                 sub     r12d, eax
.text:0000000000002045                 test    r12d, r12d
.text:0000000000002048                 setnle  r13b
.text:000000000000204C                 jmp     loc_1C4F
.text:000000000000204C ; ---------------------------------------------------------------------------
.text:0000000000002051                 align 8
.text:0000000000002058
.text:0000000000002058 loc_2058:                               ; CODE XREF: binary_operator+37E↑j
.text:0000000000002058                 movzx   edx, dl
.text:000000000000205B                 cmp     edx, eax
.text:000000000000205D                 setnle  r13b
.text:0000000000002061                 jmp     loc_1C4F
.text:0000000000002061 ; ---------------------------------------------------------------------------
.text:0000000000002066                 align 10h
.text:0000000000002070
.text:0000000000002070 loc_2070:                               ; CODE XREF: binary_operator+1AB↑j
.text:0000000000002070                 cmp     dl, 65h ; 'e'
.text:0000000000002073                 jnz     loc_1F9A
.text:0000000000002079                 movzx   edx, byte ptr [rsi+2]
.text:000000000000207D                 jmp     loc_1DDD
.text:000000000000207D ; ---------------------------------------------------------------------------
.text:0000000000002082                 align 8
.text:0000000000002088
.text:0000000000002088 loc_2088:                               ; CODE XREF: binary_operator+387↑j
.text:0000000000002088                 movzx   edx, dl
.text:000000000000208B                 neg     edx
.text:000000000000208D                 cmp     edx, eax
.text:000000000000208F                 setl    r13b
.text:0000000000002093                 jmp     loc_1C4F
.text:0000000000002098 ; ---------------------------------------------------------------------------
.text:0000000000002098
.text:0000000000002098 loc_2098:                               ; CODE XREF: binary_operator+F3↑j
.text:0000000000002098                 call    ___stack_chk_fail
.text:000000000000209D ; ---------------------------------------------------------------------------
.text:000000000000209D
.text:000000000000209D loc_209D:                               ; CODE XREF: binary_operator+AE↑j
.text:000000000000209D                 call    _abort
.text:00000000000020A2 ; ---------------------------------------------------------------------------
.text:00000000000020A2
.text:00000000000020A2 loc_20A2:                               ; CODE XREF: binary_operator+1CF↑j
.text:00000000000020A2                 lea     rsi, aOtDoesNotAccep ; "-ot does not accept -l"
.text:00000000000020A9                 mov     edx, 5          ; category
.text:00000000000020AE
.text:00000000000020AE loc_20AE:                               ; CODE XREF: binary_operator+55D↓j
.text:00000000000020AE                                         ; binary_operator+56B↓j
.text:00000000000020AE                 xor     edi, edi        ; domainname
.text:00000000000020B0                 call    _dcgettext
.text:00000000000020B5                 xor     esi, esi
.text:00000000000020B7                 mov     rdi, rax
.text:00000000000020BA                 xor     eax, eax
.text:00000000000020BC                 call    test_syntax_error
.text:00000000000020C1 ; ---------------------------------------------------------------------------
.text:00000000000020C1
.text:00000000000020C1 loc_20C1:                               ; CODE XREF: binary_operator+28A↑j
.text:00000000000020C1                 mov     edx, 5
.text:00000000000020C6                 lea     rsi, aEfDoesNotAccep ; "-ef does not accept -l"
.text:00000000000020CD                 jmp     short loc_20AE
.text:00000000000020CF ; ---------------------------------------------------------------------------
.text:00000000000020CF
.text:00000000000020CF loc_20CF:                               ; CODE XREF: binary_operator+3BE↑j
.text:00000000000020CF                 mov     edx, 5
.text:00000000000020D4                 lea     rsi, aNtDoesNotAccep ; "-nt does not accept -l"
.text:00000000000020DB                 jmp     short loc_20AE
.text:00000000000020DB ; } // starts at 1B70
.text:00000000000020DB binary_operator endp
.text:00000000000020DB
.text:00000000000020DB ; ---------------------------------------------------------------------------
.text:00000000000020DD                 align 20h
.text:00000000000020E0
.text:00000000000020E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020E0
.text:00000000000020E0
.text:00000000000020E0 unary_operator  proc near               ; CODE XREF: two_arguments+48↓j
.text:00000000000020E0                                         ; or+2A6↓p
.text:00000000000020E0
.text:00000000000020E0 var_A0          = dword ptr -0A0h
.text:00000000000020E0 var_9C          = dword ptr -9Ch
.text:00000000000020E0 var_98          = dword ptr -98h
.text:00000000000020E0 var_88          = qword ptr -88h
.text:00000000000020E0 var_70          = qword ptr -70h
.text:00000000000020E0 var_68          = qword ptr -68h
.text:00000000000020E0 var_60          = qword ptr -60h
.text:00000000000020E0 var_58          = qword ptr -58h
.text:00000000000020E0 var_20          = qword ptr -20h
.text:00000000000020E0
.text:00000000000020E0 ; __unwind {
.text:00000000000020E0                 push    rbp
.text:00000000000020E1                 push    rbx
.text:00000000000020E2                 sub     rsp, 0A8h
.text:00000000000020E9                 mov     rbx, cs:argv
.text:00000000000020F0                 mov     rax, fs:28h
.text:00000000000020F9                 mov     [rsp+0B8h+var_20], rax
.text:0000000000002101                 xor     eax, eax
.text:0000000000002103                 movsxd  rax, cs:pos
.text:000000000000210A                 mov     rdi, [rbx+rax*8]
.text:000000000000210E                 movzx   eax, byte ptr [rdi+1]
.text:0000000000002112                 sub     eax, 47h ; 'G'  ; switch 52 cases
.text:0000000000002115                 cmp     al, 33h
.text:0000000000002117                 ja      def_212E        ; jumptable 000000000000212E default case, cases 72-75,77,80-82,84-97,105,106,108,109,111,113,118,121
.text:000000000000211D                 lea     rdx, jpt_212E
.text:0000000000002124                 movzx   eax, al
.text:0000000000002127                 movsxd  rax, ds:(jpt_212E - 7F40h)[rdx+rax*4]
.text:000000000000212B                 add     rax, rdx
.text:000000000000212E                 jmp     rax             ; switch jump
.text:0000000000002130 ; ---------------------------------------------------------------------------
.text:0000000000002130
.text:0000000000002130 loc_2130:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002130                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:0000000000002130                 call    unary_advance   ; jumptable 000000000000212E case 122
.text:0000000000002135                 movsxd  rax, cs:pos
.text:000000000000213C                 mov     rax, [rbx+rax*8-8]
.text:0000000000002141                 cmp     byte ptr [rax], 0
.text:0000000000002144                 setz    al
.text:0000000000002147                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002150
.text:0000000000002150 loc_2150:                               ; CODE XREF: unary_operator+B8↓j
.text:0000000000002150                                         ; unary_operator+E4↓j ...
.text:0000000000002150                 mov     rcx, [rsp+0B8h+var_20]
.text:0000000000002158                 xor     rcx, fs:28h
.text:0000000000002161                 jnz     loc_26AC
.text:0000000000002167                 add     rsp, 0A8h
.text:000000000000216E                 pop     rbx
.text:000000000000216F                 pop     rbp
.text:0000000000002170                 retn
.text:0000000000002170 ; ---------------------------------------------------------------------------
.text:0000000000002171                 align 8
.text:0000000000002178
.text:0000000000002178 loc_2178:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002178                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:0000000000002178                 call    unary_advance   ; jumptable 000000000000212E case 120
.text:000000000000217D                 movsxd  rax, cs:pos
.text:0000000000002184                 mov     esi, 1          ; type
.text:0000000000002189                 mov     rdi, [rbx+rax*8-8] ; name
.text:000000000000218E                 call    _euidaccess
.text:0000000000002193                 test    eax, eax
.text:0000000000002195                 setz    al
.text:0000000000002198                 jmp     short loc_2150
.text:0000000000002198 ; ---------------------------------------------------------------------------
.text:000000000000219A                 align 20h
.text:00000000000021A0
.text:00000000000021A0 loc_21A0:                               ; CODE XREF: unary_operator+4E↑j
.text:00000000000021A0                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:00000000000021A0                 call    unary_advance   ; jumptable 000000000000212E case 117
.text:00000000000021A5                 movsxd  rax, cs:pos
.text:00000000000021AC                 mov     rdx, rsp        ; stat_buf
.text:00000000000021AF                 mov     edi, 1          ; ver
.text:00000000000021B4                 mov     rsi, [rbx+rax*8-8] ; filename
.text:00000000000021B9                 call    ___xstat
.text:00000000000021BE                 mov     edx, eax
.text:00000000000021C0                 xor     eax, eax
.text:00000000000021C2                 test    edx, edx
.text:00000000000021C4                 jnz     short loc_2150
.text:00000000000021C6                 mov     eax, [rsp+0B8h+var_A0]
.text:00000000000021CA                 shr     eax, 0Bh
.text:00000000000021CD                 and     eax, 1
.text:00000000000021D0                 jmp     loc_2150
.text:00000000000021D0 ; ---------------------------------------------------------------------------
.text:00000000000021D5                 align 8
.text:00000000000021D8
.text:00000000000021D8 loc_21D8:                               ; CODE XREF: unary_operator+4E↑j
.text:00000000000021D8                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:00000000000021D8                 call    unary_advance   ; jumptable 000000000000212E case 116
.text:00000000000021DD                 movsxd  rax, cs:pos
.text:00000000000021E4                 mov     rdi, [rbx+rax*8-8]
.text:00000000000021E9                 call    find_int
.text:00000000000021EE                 mov     rbp, rax
.text:00000000000021F1                 call    ___errno_location
.text:00000000000021F6                 xor     esi, esi        ; endptr
.text:00000000000021F8                 mov     rbx, rax
.text:00000000000021FB                 mov     rdi, rbp        ; nptr
.text:00000000000021FE                 mov     dword ptr [rax], 0
.text:0000000000002204                 mov     edx, 0Ah        ; base
.text:0000000000002209                 call    _strtol
.text:000000000000220E                 mov     rdi, rax        ; fd
.text:0000000000002211                 xor     eax, eax
.text:0000000000002213                 cmp     dword ptr [rbx], 22h ; '"'
.text:0000000000002216                 jz      loc_2150
.text:000000000000221C                 cmp     rdi, 7FFFFFFFh
.text:0000000000002223                 ja      loc_2150
.text:0000000000002229                 call    _isatty
.text:000000000000222E                 test    eax, eax
.text:0000000000002230                 setnz   al
.text:0000000000002233                 jmp     loc_2150
.text:0000000000002233 ; ---------------------------------------------------------------------------
.text:0000000000002238                 align 20h
.text:0000000000002240
.text:0000000000002240 loc_2240:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002240                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:0000000000002240                 call    unary_advance   ; jumptable 000000000000212E case 119
.text:0000000000002245                 movsxd  rax, cs:pos
.text:000000000000224C                 mov     esi, 2          ; type
.text:0000000000002251                 mov     rdi, [rbx+rax*8-8] ; name
.text:0000000000002256                 call    _euidaccess
.text:000000000000225B                 test    eax, eax
.text:000000000000225D                 setz    al
.text:0000000000002260                 jmp     loc_2150
.text:0000000000002260 ; ---------------------------------------------------------------------------
.text:0000000000002265                 align 8
.text:0000000000002268
.text:0000000000002268 loc_2268:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002268                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:0000000000002268                 call    unary_advance   ; jumptable 000000000000212E case 115
.text:000000000000226D                 movsxd  rax, cs:pos
.text:0000000000002274                 mov     rdx, rsp        ; stat_buf
.text:0000000000002277                 mov     edi, 1          ; ver
.text:000000000000227C                 mov     rsi, [rbx+rax*8-8] ; filename
.text:0000000000002281                 call    ___xstat
.text:0000000000002286                 mov     edx, eax
.text:0000000000002288                 xor     eax, eax
.text:000000000000228A                 test    edx, edx
.text:000000000000228C                 jnz     loc_2150
.text:0000000000002292                 cmp     [rsp+0B8h+var_88], 0
.text:0000000000002298                 setnle  al
.text:000000000000229B                 jmp     loc_2150
.text:00000000000022A0 ; ---------------------------------------------------------------------------
.text:00000000000022A0
.text:00000000000022A0 loc_22A0:                               ; CODE XREF: unary_operator+4E↑j
.text:00000000000022A0                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:00000000000022A0                 call    unary_advance   ; jumptable 000000000000212E case 114
.text:00000000000022A5                 movsxd  rax, cs:pos
.text:00000000000022AC                 mov     esi, 4          ; type
.text:00000000000022B1                 mov     rdi, [rbx+rax*8-8] ; name
.text:00000000000022B6                 call    _euidaccess
.text:00000000000022BB                 test    eax, eax
.text:00000000000022BD                 setz    al
.text:00000000000022C0                 jmp     loc_2150
.text:00000000000022C0 ; ---------------------------------------------------------------------------
.text:00000000000022C5                 align 8
.text:00000000000022C8
.text:00000000000022C8 loc_22C8:                               ; CODE XREF: unary_operator+4E↑j
.text:00000000000022C8                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:00000000000022C8                 call    unary_advance   ; jumptable 000000000000212E case 112
.text:00000000000022CD                 movsxd  rax, cs:pos
.text:00000000000022D4                 mov     rdx, rsp        ; stat_buf
.text:00000000000022D7                 mov     edi, 1          ; ver
.text:00000000000022DC                 mov     rsi, [rbx+rax*8-8] ; filename
.text:00000000000022E1                 call    ___xstat
.text:00000000000022E6                 mov     edx, eax
.text:00000000000022E8                 xor     eax, eax
.text:00000000000022EA                 test    edx, edx
.text:00000000000022EC                 jnz     loc_2150
.text:00000000000022F2                 mov     eax, [rsp+0B8h+var_A0]
.text:00000000000022F6                 and     eax, 0F000h
.text:00000000000022FB                 cmp     eax, 1000h
.text:0000000000002300                 setz    al
.text:0000000000002303                 jmp     loc_2150
.text:0000000000002303 ; ---------------------------------------------------------------------------
.text:0000000000002308                 align 10h
.text:0000000000002310
.text:0000000000002310 loc_2310:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002310                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:0000000000002310                 call    unary_advance   ; jumptable 000000000000212E case 110
.text:0000000000002315                 movsxd  rax, cs:pos
.text:000000000000231C                 mov     rax, [rbx+rax*8-8]
.text:0000000000002321                 cmp     byte ptr [rax], 0
.text:0000000000002324                 setnz   al
.text:0000000000002327                 jmp     loc_2150
.text:0000000000002327 ; ---------------------------------------------------------------------------
.text:000000000000232C                 align 10h
.text:0000000000002330
.text:0000000000002330 loc_2330:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002330                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:0000000000002330                 call    unary_advance   ; jumptable 000000000000212E case 107
.text:0000000000002335                 movsxd  rax, cs:pos
.text:000000000000233C                 mov     rdx, rsp        ; stat_buf
.text:000000000000233F                 mov     edi, 1          ; ver
.text:0000000000002344                 mov     rsi, [rbx+rax*8-8] ; filename
.text:0000000000002349                 call    ___xstat
.text:000000000000234E                 mov     edx, eax
.text:0000000000002350                 xor     eax, eax
.text:0000000000002352                 test    edx, edx
.text:0000000000002354                 jnz     loc_2150
.text:000000000000235A                 mov     eax, [rsp+0B8h+var_A0]
.text:000000000000235E                 shr     eax, 9
.text:0000000000002361                 and     eax, 1
.text:0000000000002364                 jmp     loc_2150
.text:0000000000002364 ; ---------------------------------------------------------------------------
.text:0000000000002369                 align 10h
.text:0000000000002370
.text:0000000000002370 loc_2370:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002370                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:0000000000002370                 call    unary_advance   ; jumptable 000000000000212E case 103
.text:0000000000002375                 movsxd  rax, cs:pos
.text:000000000000237C                 mov     rdx, rsp        ; stat_buf
.text:000000000000237F                 mov     edi, 1          ; ver
.text:0000000000002384                 mov     rsi, [rbx+rax*8-8] ; filename
.text:0000000000002389                 call    ___xstat
.text:000000000000238E                 mov     edx, eax
.text:0000000000002390                 xor     eax, eax
.text:0000000000002392                 test    edx, edx
.text:0000000000002394                 jnz     loc_2150
.text:000000000000239A                 mov     eax, [rsp+0B8h+var_A0]
.text:000000000000239E                 shr     eax, 0Ah
.text:00000000000023A1                 and     eax, 1
.text:00000000000023A4                 jmp     loc_2150
.text:00000000000023A4 ; ---------------------------------------------------------------------------
.text:00000000000023A9                 align 10h
.text:00000000000023B0
.text:00000000000023B0 loc_23B0:                               ; CODE XREF: unary_operator+4E↑j
.text:00000000000023B0                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:00000000000023B0                 call    unary_advance   ; jumptable 000000000000212E case 102
.text:00000000000023B5                 movsxd  rax, cs:pos
.text:00000000000023BC                 mov     rdx, rsp        ; stat_buf
.text:00000000000023BF                 mov     edi, 1          ; ver
.text:00000000000023C4                 mov     rsi, [rbx+rax*8-8] ; filename
.text:00000000000023C9                 call    ___xstat
.text:00000000000023CE                 mov     edx, eax
.text:00000000000023D0                 xor     eax, eax
.text:00000000000023D2                 test    edx, edx
.text:00000000000023D4                 jnz     loc_2150
.text:00000000000023DA                 mov     eax, [rsp+0B8h+var_A0]
.text:00000000000023DE                 and     eax, 0F000h
.text:00000000000023E3                 cmp     eax, 8000h
.text:00000000000023E8                 setz    al
.text:00000000000023EB                 jmp     loc_2150
.text:00000000000023F0 ; ---------------------------------------------------------------------------
.text:00000000000023F0
.text:00000000000023F0 loc_23F0:                               ; CODE XREF: unary_operator+4E↑j
.text:00000000000023F0                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:00000000000023F0                 call    unary_advance   ; jumptable 000000000000212E case 101
.text:00000000000023F5                 movsxd  rax, cs:pos
.text:00000000000023FC                 mov     rdx, rsp        ; stat_buf
.text:00000000000023FF                 mov     edi, 1          ; ver
.text:0000000000002404                 mov     rsi, [rbx+rax*8-8] ; filename
.text:0000000000002409                 call    ___xstat
.text:000000000000240E                 test    eax, eax
.text:0000000000002410                 setz    al
.text:0000000000002413                 jmp     loc_2150
.text:0000000000002413 ; ---------------------------------------------------------------------------
.text:0000000000002418                 align 20h
.text:0000000000002420
.text:0000000000002420 loc_2420:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002420                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:0000000000002420                 call    unary_advance   ; jumptable 000000000000212E case 100
.text:0000000000002425                 movsxd  rax, cs:pos
.text:000000000000242C                 mov     rdx, rsp        ; stat_buf
.text:000000000000242F                 mov     edi, 1          ; ver
.text:0000000000002434                 mov     rsi, [rbx+rax*8-8] ; filename
.text:0000000000002439                 call    ___xstat
.text:000000000000243E                 mov     edx, eax
.text:0000000000002440                 xor     eax, eax
.text:0000000000002442                 test    edx, edx
.text:0000000000002444                 jnz     loc_2150
.text:000000000000244A                 mov     eax, [rsp+0B8h+var_A0]
.text:000000000000244E                 and     eax, 0F000h
.text:0000000000002453                 cmp     eax, 4000h
.text:0000000000002458                 setz    al
.text:000000000000245B                 jmp     loc_2150
.text:0000000000002460 ; ---------------------------------------------------------------------------
.text:0000000000002460
.text:0000000000002460 loc_2460:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002460                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:0000000000002460                 call    unary_advance   ; jumptable 000000000000212E case 99
.text:0000000000002465                 movsxd  rax, cs:pos
.text:000000000000246C                 mov     rdx, rsp        ; stat_buf
.text:000000000000246F                 mov     edi, 1          ; ver
.text:0000000000002474                 mov     rsi, [rbx+rax*8-8] ; filename
.text:0000000000002479                 call    ___xstat
.text:000000000000247E                 mov     edx, eax
.text:0000000000002480                 xor     eax, eax
.text:0000000000002482                 test    edx, edx
.text:0000000000002484                 jnz     loc_2150
.text:000000000000248A                 mov     eax, [rsp+0B8h+var_A0]
.text:000000000000248E                 and     eax, 0F000h
.text:0000000000002493                 cmp     eax, 2000h
.text:0000000000002498                 setz    al
.text:000000000000249B                 jmp     loc_2150
.text:00000000000024A0 ; ---------------------------------------------------------------------------
.text:00000000000024A0
.text:00000000000024A0 loc_24A0:                               ; CODE XREF: unary_operator+4E↑j
.text:00000000000024A0                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:00000000000024A0                 call    unary_advance   ; jumptable 000000000000212E case 98
.text:00000000000024A5                 movsxd  rax, cs:pos
.text:00000000000024AC                 mov     rdx, rsp        ; stat_buf
.text:00000000000024AF                 mov     edi, 1          ; ver
.text:00000000000024B4                 mov     rsi, [rbx+rax*8-8] ; filename
.text:00000000000024B9                 call    ___xstat
.text:00000000000024BE                 mov     edx, eax
.text:00000000000024C0                 xor     eax, eax
.text:00000000000024C2                 test    edx, edx
.text:00000000000024C4                 jnz     loc_2150
.text:00000000000024CA                 mov     eax, [rsp+0B8h+var_A0]
.text:00000000000024CE                 and     eax, 0F000h
.text:00000000000024D3                 cmp     eax, 6000h
.text:00000000000024D8                 setz    al
.text:00000000000024DB                 jmp     loc_2150
.text:00000000000024E0 ; ---------------------------------------------------------------------------
.text:00000000000024E0
.text:00000000000024E0 loc_24E0:                               ; CODE XREF: unary_operator+4E↑j
.text:00000000000024E0                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:00000000000024E0                 call    unary_advance   ; jumptable 000000000000212E case 83
.text:00000000000024E5                 movsxd  rax, cs:pos
.text:00000000000024EC                 mov     rdx, rsp        ; stat_buf
.text:00000000000024EF                 mov     edi, 1          ; ver
.text:00000000000024F4                 mov     rsi, [rbx+rax*8-8] ; filename
.text:00000000000024F9                 call    ___xstat
.text:00000000000024FE                 mov     edx, eax
.text:0000000000002500                 xor     eax, eax
.text:0000000000002502                 test    edx, edx
.text:0000000000002504                 jnz     loc_2150
.text:000000000000250A                 mov     eax, [rsp+0B8h+var_A0]
.text:000000000000250E                 and     eax, 0F000h
.text:0000000000002513                 cmp     eax, 0C000h
.text:0000000000002518                 setz    al
.text:000000000000251B                 jmp     loc_2150
.text:0000000000002520 ; ---------------------------------------------------------------------------
.text:0000000000002520
.text:0000000000002520 loc_2520:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002520                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:0000000000002520                 call    unary_advance   ; jumptable 000000000000212E case 79
.text:0000000000002525                 movsxd  rax, cs:pos
.text:000000000000252C                 mov     rdx, rsp        ; stat_buf
.text:000000000000252F                 mov     edi, 1          ; ver
.text:0000000000002534                 mov     rsi, [rbx+rax*8-8] ; filename
.text:0000000000002539                 call    ___xstat
.text:000000000000253E                 test    eax, eax
.text:0000000000002540                 jz      loc_2640
.text:0000000000002546
.text:0000000000002546 loc_2546:                               ; CODE XREF: unary_operator+490↓j
.text:0000000000002546                                         ; unary_operator+530↓j
.text:0000000000002546                 xor     eax, eax
.text:0000000000002548                 jmp     loc_2150
.text:0000000000002548 ; ---------------------------------------------------------------------------
.text:000000000000254D                 align 10h
.text:0000000000002550
.text:0000000000002550 loc_2550:                               ; CODE XREF: unary_operator+4E↑j
.text:0000000000002550                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:0000000000002550                 call    unary_advance   ; jumptable 000000000000212E case 78
.text:0000000000002555                 movsxd  rax, cs:pos
.text:000000000000255C                 mov     rdx, rsp        ; stat_buf
.text:000000000000255F                 mov     edi, 1          ; ver
.text:0000000000002564                 mov     rsi, [rbx+rax*8-8] ; filename
.text:0000000000002569                 call    ___xstat
.text:000000000000256E                 test    eax, eax
.text:0000000000002570                 jnz     short loc_2546
.text:0000000000002572                 xor     eax, eax
.text:0000000000002574                 mov     rsi, [rsp+0B8h+var_60]
.text:0000000000002579                 cmp     [rsp+0B8h+var_70], rsi
.text:000000000000257E                 mov     rcx, [rsp+0B8h+var_68]
.text:0000000000002583                 mov     rdx, [rsp+0B8h+var_58]
.text:0000000000002588                 jg      loc_2150
.text:000000000000258E                 mov     eax, 1
.text:0000000000002593                 jl      loc_2150
.text:0000000000002599                 sub     edx, ecx
.text:000000000000259B                 test    edx, edx
.text:000000000000259D                 setnle  al
.text:00000000000025A0                 jmp     loc_2150
.text:00000000000025A0 ; ---------------------------------------------------------------------------
.text:00000000000025A5                 align 8
.text:00000000000025A8
.text:00000000000025A8 loc_25A8:                               ; CODE XREF: unary_operator+4E↑j
.text:00000000000025A8                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:00000000000025A8                 call    unary_advance   ; jumptable 000000000000212E cases 76,104
.text:00000000000025AD                 movsxd  rax, cs:pos
.text:00000000000025B4                 mov     rdx, rsp        ; stat_buf
.text:00000000000025B7                 mov     edi, 1          ; ver
.text:00000000000025BC                 mov     rsi, [rbx+rax*8-8] ; filename
.text:00000000000025C1                 call    ___lxstat
.text:00000000000025C6                 mov     edx, eax
.text:00000000000025C8                 xor     eax, eax
.text:00000000000025CA                 test    edx, edx
.text:00000000000025CC                 jnz     loc_2150
.text:00000000000025D2                 mov     eax, [rsp+0B8h+var_A0]
.text:00000000000025D6                 and     eax, 0F000h
.text:00000000000025DB                 cmp     eax, 0A000h
.text:00000000000025E0                 setz    al
.text:00000000000025E3                 jmp     loc_2150
.text:00000000000025E3 ; ---------------------------------------------------------------------------
.text:00000000000025E8                 align 10h
.text:00000000000025F0
.text:00000000000025F0 loc_25F0:                               ; CODE XREF: unary_operator+4E↑j
.text:00000000000025F0                                         ; DATA XREF: .rodata:jpt_212E↓o
.text:00000000000025F0                 call    unary_advance   ; jumptable 000000000000212E case 71
.text:00000000000025F5                 movsxd  rax, cs:pos
.text:00000000000025FC                 mov     rdx, rsp        ; stat_buf
.text:00000000000025FF                 mov     edi, 1          ; ver
.text:0000000000002604                 mov     rsi, [rbx+rax*8-8] ; filename
.text:0000000000002609                 call    ___xstat
.text:000000000000260E                 test    eax, eax
.text:0000000000002610                 jnz     loc_2546
.text:0000000000002616                 call    ___errno_location
.text:000000000000261B                 mov     dword ptr [rax], 0
.text:0000000000002621                 mov     rbx, rax
.text:0000000000002624                 call    _getegid
.text:0000000000002629                 cmp     eax, 0FFFFFFFFh
.text:000000000000262C                 mov     edx, eax
.text:000000000000262E                 jz      short loc_269E
.text:0000000000002630
.text:0000000000002630 loc_2630:                               ; CODE XREF: unary_operator+5CA↓j
.text:0000000000002630                 cmp     [rsp+0B8h+var_98], edx
.text:0000000000002634                 setz    al
.text:0000000000002637                 jmp     loc_2150
.text:0000000000002637 ; ---------------------------------------------------------------------------
.text:000000000000263C                 align 20h
.text:0000000000002640
.text:0000000000002640 loc_2640:                               ; CODE XREF: unary_operator+460↑j
.text:0000000000002640                 call    ___errno_location
.text:0000000000002645                 mov     dword ptr [rax], 0
.text:000000000000264B                 mov     rbx, rax
.text:000000000000264E                 call    _geteuid
.text:0000000000002653                 cmp     eax, 0FFFFFFFFh
.text:0000000000002656                 mov     edx, eax
.text:0000000000002658                 jz      short loc_2690
.text:000000000000265A
.text:000000000000265A loc_265A:                               ; CODE XREF: unary_operator+5BC↓j
.text:000000000000265A                 cmp     [rsp+0B8h+var_9C], edx
.text:000000000000265E                 setz    al
.text:0000000000002661                 jmp     loc_2150
.text:0000000000002666 ; ---------------------------------------------------------------------------
.text:0000000000002666
.text:0000000000002666 def_212E:                               ; CODE XREF: unary_operator+37↑j
.text:0000000000002666                                         ; unary_operator+4E↑j
.text:0000000000002666                                         ; DATA XREF: ...
.text:0000000000002666                 call    quote           ; jumptable 000000000000212E default case, cases 72-75,77,80-82,84-97,105,106,108,109,111,113,118,121
.text:000000000000266B                 lea     rsi, aSUnaryOperator ; "%s: unary operator expected"
.text:0000000000002672                 mov     rbx, rax
.text:0000000000002675                 xor     edi, edi        ; domainname
.text:0000000000002677                 mov     edx, 5          ; category
.text:000000000000267C                 call    _dcgettext
.text:0000000000002681                 mov     rsi, rbx
.text:0000000000002684                 mov     rdi, rax
.text:0000000000002687                 xor     eax, eax
.text:0000000000002689                 call    test_syntax_error
.text:0000000000002689 ; ---------------------------------------------------------------------------
.text:000000000000268E                 align 10h
.text:0000000000002690
.text:0000000000002690 loc_2690:                               ; CODE XREF: unary_operator+578↑j
.text:0000000000002690                 mov     esi, [rbx]
.text:0000000000002692                 xor     eax, eax
.text:0000000000002694                 test    esi, esi
.text:0000000000002696                 jnz     loc_2150
.text:000000000000269C                 jmp     short loc_265A
.text:000000000000269E ; ---------------------------------------------------------------------------
.text:000000000000269E
.text:000000000000269E loc_269E:                               ; CODE XREF: unary_operator+54E↑j
.text:000000000000269E                 mov     ecx, [rbx]
.text:00000000000026A0                 xor     eax, eax
.text:00000000000026A2                 test    ecx, ecx
.text:00000000000026A4                 jnz     loc_2150
.text:00000000000026AA                 jmp     short loc_2630
.text:00000000000026AC ; ---------------------------------------------------------------------------
.text:00000000000026AC
.text:00000000000026AC loc_26AC:                               ; CODE XREF: unary_operator+81↑j
.text:00000000000026AC                 call    ___stack_chk_fail
.text:00000000000026AC ; } // starts at 20E0
.text:00000000000026AC unary_operator  endp
.text:00000000000026AC
.text:00000000000026AC ; ---------------------------------------------------------------------------
.text:00000000000026B1                 align 20h
.text:00000000000026C0
.text:00000000000026C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000026C0
.text:00000000000026C0
.text:00000000000026C0 two_arguments   proc near               ; CODE XREF: posixtest+DC↓j
.text:00000000000026C0                                         ; posixtest+129↓p ...
.text:00000000000026C0 ; __unwind {
.text:00000000000026C0                 movsxd  rax, cs:pos
.text:00000000000026C7                 mov     r9, cs:argv
.text:00000000000026CE                 lea     rdi, asc_7E18   ; "!"
.text:00000000000026D5                 mov     ecx, 2
.text:00000000000026DA                 mov     rdx, [r9+rax*8]
.text:00000000000026DE                 mov     r8, rax
.text:00000000000026E1                 lea     r10, ds:0[rax*8]
.text:00000000000026E9                 mov     rsi, rdx
.text:00000000000026EC                 repe cmpsb
.text:00000000000026EE                 setnbe  al
.text:00000000000026F1                 sbb     al, 0
.text:00000000000026F3                 test    al, al
.text:00000000000026F5                 jz      short loc_2710
.text:00000000000026F7                 cmp     byte ptr [rdx], 2Dh ; '-'
.text:00000000000026FA                 jnz     short loc_2727
.text:00000000000026FC                 cmp     byte ptr [rdx+1], 0
.text:0000000000002700                 jz      short loc_2727
.text:0000000000002702                 cmp     byte ptr [rdx+2], 0
.text:0000000000002706                 jnz     short loc_2727
.text:0000000000002708                 jmp     unary_operator
.text:0000000000002708 ; ---------------------------------------------------------------------------
.text:000000000000270D                 align 10h
.text:0000000000002710
.text:0000000000002710 loc_2710:                               ; CODE XREF: two_arguments+35↑j
.text:0000000000002710                 mov     rax, [r9+r10+8]
.text:0000000000002715                 add     r8d, 2
.text:0000000000002719                 mov     cs:pos, r8d
.text:0000000000002720                 cmp     byte ptr [rax], 0
.text:0000000000002723                 setz    al
.text:0000000000002726                 retn
.text:0000000000002727 ; ---------------------------------------------------------------------------
.text:0000000000002727
.text:0000000000002727 loc_2727:                               ; CODE XREF: two_arguments+3A↑j
.text:0000000000002727                                         ; two_arguments+40↑j ...
.text:0000000000002727                 sub     rsp, 8
.text:000000000000272B                 call    beyond
.text:000000000000272B ; } // starts at 26C0
.text:000000000000272B two_arguments   endp
.text:000000000000272B
.text:0000000000002730
.text:0000000000002730 ; =============== S U B R O U T I N E =======================================
.text:0000000000002730
.text:0000000000002730
.text:0000000000002730 posixtest       proc near               ; CODE XREF: main+78↑p
.text:0000000000002730                                         ; or+15B↓p
.text:0000000000002730 ; __unwind {
.text:0000000000002730                 sub     rsp, 8
.text:0000000000002734                 cmp     edi, 2
.text:0000000000002737                 jz      loc_2808
.text:000000000000273D                 jle     loc_27C0
.text:0000000000002743                 cmp     edi, 3
.text:0000000000002746                 jz      short loc_27B0
.text:0000000000002748                 cmp     edi, 4
.text:000000000000274B                 jnz     loc_27F0
.text:0000000000002751                 movsxd  rdx, cs:pos
.text:0000000000002758                 mov     r9, cs:argv
.text:000000000000275F                 lea     rdi, asc_7E18   ; "!"
.text:0000000000002766                 mov     ecx, 2
.text:000000000000276B                 mov     r8, [r9+rdx*8]
.text:000000000000276F                 mov     rax, rdx
.text:0000000000002772                 lea     r10, ds:0[rdx*8]
.text:000000000000277A                 mov     rsi, r8
.text:000000000000277D                 repe cmpsb
.text:000000000000277F                 setnbe  dl
.text:0000000000002782                 sbb     dl, 0
.text:0000000000002785                 test    dl, dl
.text:0000000000002787                 jnz     loc_2818
.text:000000000000278D                 add     eax, 1
.text:0000000000002790                 cmp     eax, cs:argc
.text:0000000000002796                 mov     cs:pos, eax
.text:000000000000279C                 jge     loc_286A
.text:00000000000027A2                 call    three_arguments
.text:00000000000027A7                 add     rsp, 8
.text:00000000000027AB                 xor     eax, 1
.text:00000000000027AE                 retn
.text:00000000000027AE ; ---------------------------------------------------------------------------
.text:00000000000027AF                 align 10h
.text:00000000000027B0
.text:00000000000027B0 loc_27B0:                               ; CODE XREF: posixtest+16↑j
.text:00000000000027B0                 add     rsp, 8
.text:00000000000027B4                 jmp     three_arguments
.text:00000000000027B4 ; ---------------------------------------------------------------------------
.text:00000000000027B9                 align 20h
.text:00000000000027C0
.text:00000000000027C0 loc_27C0:                               ; CODE XREF: posixtest+D↑j
.text:00000000000027C0                 cmp     edi, 1
.text:00000000000027C3                 jnz     short loc_27F0
.text:00000000000027C5                 movsxd  rax, cs:pos
.text:00000000000027CC                 lea     edx, [rax+1]
.text:00000000000027CF                 mov     cs:pos, edx
.text:00000000000027D5                 mov     rdx, cs:argv
.text:00000000000027DC                 mov     rax, [rdx+rax*8]
.text:00000000000027E0                 cmp     byte ptr [rax], 0
.text:00000000000027E3                 setnz   al
.text:00000000000027E6
.text:00000000000027E6 loc_27E6:                               ; CODE XREF: posixtest+135↓j
.text:00000000000027E6                 add     rsp, 8
.text:00000000000027EA                 retn
.text:00000000000027EA ; ---------------------------------------------------------------------------
.text:00000000000027EB                 align 10h
.text:00000000000027F0
.text:00000000000027F0 loc_27F0:                               ; CODE XREF: posixtest+1B↑j
.text:00000000000027F0                                         ; posixtest+93↑j
.text:00000000000027F0                 mov     eax, cs:pos
.text:00000000000027F6
.text:00000000000027F6 loc_27F6:                               ; CODE XREF: posixtest+101↓j
.text:00000000000027F6                                         ; posixtest+11E↓j
.text:00000000000027F6                 cmp     eax, cs:argc
.text:00000000000027FC                 jge     short loc_286A
.text:00000000000027FE                 add     rsp, 8
.text:0000000000002802                 jmp     short or
.text:0000000000002802 ; ---------------------------------------------------------------------------
.text:0000000000002804                 align 8
.text:0000000000002808
.text:0000000000002808 loc_2808:                               ; CODE XREF: posixtest+7↑j
.text:0000000000002808                 add     rsp, 8
.text:000000000000280C                 jmp     two_arguments
.text:000000000000280C ; ---------------------------------------------------------------------------
.text:0000000000002811                 align 8
.text:0000000000002818
.text:0000000000002818 loc_2818:                               ; CODE XREF: posixtest+57↑j
.text:0000000000002818                 lea     rdi, asc_7E1A   ; "("
.text:000000000000281F                 mov     ecx, 2
.text:0000000000002824                 mov     rsi, r8
.text:0000000000002827                 repe cmpsb
.text:0000000000002829                 setnbe  dl
.text:000000000000282C                 sbb     dl, 0
.text:000000000000282F                 test    dl, dl
.text:0000000000002831                 jnz     short loc_27F6
.text:0000000000002833                 mov     rsi, [r9+r10+18h]
.text:0000000000002838                 lea     rdi, aNull+5    ; ")"
.text:000000000000283F                 mov     ecx, 2
.text:0000000000002844                 repe cmpsb
.text:0000000000002846                 setnbe  dl
.text:0000000000002849                 sbb     dl, 0
.text:000000000000284C                 test    dl, dl
.text:000000000000284E                 jnz     short loc_27F6
.text:0000000000002850                 add     eax, 1
.text:0000000000002853                 mov     cs:pos, eax
.text:0000000000002859                 call    two_arguments
.text:000000000000285E                 add     cs:pos, 1
.text:0000000000002865                 jmp     loc_27E6
.text:000000000000286A ; ---------------------------------------------------------------------------
.text:000000000000286A
.text:000000000000286A loc_286A:                               ; CODE XREF: posixtest+6C↑j
.text:000000000000286A                                         ; posixtest+CC↑j
.text:000000000000286A                 call    beyond
.text:000000000000286A ; } // starts at 2730
.text:000000000000286A posixtest       endp
.text:000000000000286A
.text:000000000000286A ; ---------------------------------------------------------------------------
.text:000000000000286F                 align 10h
.text:0000000000002870
.text:0000000000002870 ; =============== S U B R O U T I N E =======================================
.text:0000000000002870
.text:0000000000002870
.text:0000000000002870 or              proc near               ; CODE XREF: posixtest+D2↑j
.text:0000000000002870                                         ; three_arguments+106↓j
.text:0000000000002870
.text:0000000000002870 var_39          = byte ptr -39h
.text:0000000000002870
.text:0000000000002870 ; __unwind {
.text:0000000000002870                 push    r15
.text:0000000000002872                 push    r14
.text:0000000000002874                 push    r13
.text:0000000000002876                 push    r12
.text:0000000000002878                 push    rbp
.text:0000000000002879                 push    rbx
.text:000000000000287A                 sub     rsp, 18h
.text:000000000000287E                 mov     r11d, cs:pos
.text:0000000000002885                 mov     r12d, cs:argc
.text:000000000000288C                 mov     [rsp+48h+var_39], 0
.text:0000000000002891                 nop     dword ptr [rax+00000000h]
.text:0000000000002898
.text:0000000000002898 loc_2898:                               ; CODE XREF: or+2E7↓j
.text:0000000000002898                 cmp     r11d, r12d
.text:000000000000289B                 mov     ebx, 1
.text:00000000000028A0                 lea     rbp, aA         ; "-a"
.text:00000000000028A7                 jge     loc_2A5E
.text:00000000000028AD                 nop     dword ptr [rax]
.text:00000000000028B0
.text:00000000000028B0 loc_28B0:                               ; CODE XREF: or+1E8↓j
.text:00000000000028B0                 mov     r15, cs:argv
.text:00000000000028B7                 movsxd  r9, r11d
.text:00000000000028BA                 mov     r10, [r15+r9*8]
.text:00000000000028BE                 movzx   r13d, byte ptr [r10]
.text:00000000000028C2                 cmp     r13b, 21h ; '!'
.text:00000000000028C6                 jnz     loc_2BA7
.text:00000000000028CC                 cmp     byte ptr [r10+1], 0
.text:00000000000028D1                 jnz     loc_2BAF
.text:00000000000028D7                 lea     r9d, [r11+1]
.text:00000000000028DB                 cmp     r9d, r12d
.text:00000000000028DE                 mov     cs:pos, r9d
.text:00000000000028E5                 jge     loc_2A5E
.text:00000000000028EB                 lea     eax, [r12-2]
.text:00000000000028F0                 movsxd  r9, r9d
.text:00000000000028F3                 xor     ecx, ecx
.text:00000000000028F5                 mov     r14d, 1
.text:00000000000028FB                 sub     eax, r11d
.text:00000000000028FE                 lea     rsi, [r9+rax+1]
.text:0000000000002903                 jmp     short loc_292D
.text:0000000000002903 ; ---------------------------------------------------------------------------
.text:0000000000002905                 align 8
.text:0000000000002908
.text:0000000000002908 loc_2908:                               ; CODE XREF: or+CA↓j
.text:0000000000002908                 cmp     byte ptr [r10+1], 0
.text:000000000000290D                 jnz     loc_2A68
.text:0000000000002913                 lea     eax, [r9+1]
.text:0000000000002917                 add     r9, 1
.text:000000000000291B                 cmp     r9, rsi
.text:000000000000291E                 jz      loc_2BCE
.text:0000000000002924                 xor     r14d, 1
.text:0000000000002928                 mov     ecx, 1
.text:000000000000292D
.text:000000000000292D loc_292D:                               ; CODE XREF: or+93↑j
.text:000000000000292D                 mov     r10, [r15+r9*8]
.text:0000000000002931                 mov     r11d, r9d
.text:0000000000002934                 movzx   eax, byte ptr [r10]
.text:0000000000002938                 cmp     al, 21h ; '!'
.text:000000000000293A                 jz      short loc_2908
.text:000000000000293C                 test    cl, cl
.text:000000000000293E                 jnz     loc_2BC2
.text:0000000000002944
.text:0000000000002944 loc_2944:                               ; CODE XREF: or+359↓j
.text:0000000000002944                 mov     r13d, eax
.text:0000000000002947
.text:0000000000002947 loc_2947:                               ; CODE XREF: or+33A↓j
.text:0000000000002947                 cmp     r13b, 28h ; '('
.text:000000000000294B                 jnz     loc_2A78
.text:0000000000002951                 cmp     byte ptr [r10+1], 0
.text:0000000000002956                 jnz     loc_2A78
.text:000000000000295C                 lea     r9d, [r11+1]
.text:0000000000002960                 cmp     r9d, r12d
.text:0000000000002963                 mov     cs:pos, r9d
.text:000000000000296A                 jge     loc_2A5E
.text:0000000000002970                 lea     eax, [r11+2]
.text:0000000000002974                 cmp     eax, r12d
.text:0000000000002977                 jge     loc_2BB7
.text:000000000000297D                 cdqe
.text:000000000000297F                 mov     r8d, 1
.text:0000000000002985                 lea     r10, [r15+rax*8]
.text:0000000000002989                 lea     eax, [r12-1]
.text:000000000000298E                 sub     eax, r11d
.text:0000000000002991                 mov     r11d, eax
.text:0000000000002994
.text:0000000000002994 loc_2994:                               ; CODE XREF: or+153↓j
.text:0000000000002994                 mov     rsi, [r10]
.text:0000000000002997                 lea     rdi, aNull+5    ; ")"
.text:000000000000299E                 mov     ecx, 2
.text:00000000000029A3                 repe cmpsb
.text:00000000000029A5                 setnbe  al
.text:00000000000029A8                 sbb     al, 0
.text:00000000000029AA                 test    al, al
.text:00000000000029AC                 jz      short loc_29C8
.text:00000000000029AE                 cmp     r8d, 4
.text:00000000000029B2                 jz      loc_2B60
.text:00000000000029B8                 add     r8d, 1
.text:00000000000029BC                 add     r10, 8
.text:00000000000029C0                 cmp     r11d, r8d
.text:00000000000029C3                 jnz     short loc_2994
.text:00000000000029C5                 nop     dword ptr [rax]
.text:00000000000029C8
.text:00000000000029C8 loc_29C8:                               ; CODE XREF: or+13C↑j
.text:00000000000029C8                                         ; or+2F6↓j ...
.text:00000000000029C8                 mov     edi, r8d
.text:00000000000029CB                 call    posixtest
.text:00000000000029D0                 movsxd  rcx, cs:pos
.text:00000000000029D7                 mov     rdx, cs:argv
.text:00000000000029DE                 mov     rsi, [rdx+rcx*8]
.text:00000000000029E2                 mov     r11, rcx
.text:00000000000029E5                 test    rsi, rsi
.text:00000000000029E8                 jz      loc_2C1A
.text:00000000000029EE                 cmp     byte ptr [rsi], 29h ; ')'
.text:00000000000029F1                 jnz     loc_2BD9
.text:00000000000029F7                 cmp     byte ptr [rsi+1], 0
.text:00000000000029FB                 jnz     loc_2BD9
.text:0000000000002A01                 mov     r12d, cs:argc
.text:0000000000002A08                 add     r11d, 1
.text:0000000000002A0C                 mov     cs:pos, r11d
.text:0000000000002A13
.text:0000000000002A13 loc_2A13:                               ; CODE XREF: or+2B9↓j
.text:0000000000002A13                                         ; or+315↓j ...
.text:0000000000002A13                 xor     r14d, eax
.text:0000000000002A16                 and     ebx, r14d
.text:0000000000002A19                 cmp     r12d, r11d
.text:0000000000002A1C                 jle     loc_2AE7
.text:0000000000002A22
.text:0000000000002A22 loc_2A22:                               ; CODE XREF: or+271↓j
.text:0000000000002A22                 mov     rcx, cs:argv
.text:0000000000002A29                 movsxd  rax, r11d
.text:0000000000002A2C                 mov     rdi, rbp
.text:0000000000002A2F                 mov     r8, [rcx+rax*8]
.text:0000000000002A33                 mov     ecx, 3
.text:0000000000002A38                 mov     rsi, r8
.text:0000000000002A3B                 repe cmpsb
.text:0000000000002A3D                 setnbe  al
.text:0000000000002A40                 sbb     al, 0
.text:0000000000002A42                 test    al, al
.text:0000000000002A44                 jnz     loc_2B2E
.text:0000000000002A4A                 add     r11d, 1
.text:0000000000002A4E                 cmp     r11d, r12d
.text:0000000000002A51                 mov     cs:pos, r11d
.text:0000000000002A58                 jl      loc_28B0
.text:0000000000002A5E
.text:0000000000002A5E loc_2A5E:                               ; CODE XREF: or+37↑j
.text:0000000000002A5E                                         ; or+75↑j ...
.text:0000000000002A5E                 call    beyond
.text:0000000000002A5E ; ---------------------------------------------------------------------------
.text:0000000000002A63                 align 8
.text:0000000000002A68
.text:0000000000002A68 loc_2A68:                               ; CODE XREF: or+9D↑j
.text:0000000000002A68                 test    cl, cl
.text:0000000000002A6A                 jz      short loc_2A78
.text:0000000000002A6C                 mov     cs:pos, r9d
.text:0000000000002A73                 nop     dword ptr [rax+rax+00h]
.text:0000000000002A78
.text:0000000000002A78 loc_2A78:                               ; CODE XREF: or+DB↑j
.text:0000000000002A78                                         ; or+E6↑j ...
.text:0000000000002A78                 mov     eax, r12d
.text:0000000000002A7B                 sub     eax, r11d
.text:0000000000002A7E                 cmp     eax, 3
.text:0000000000002A81                 jle     short loc_2B00
.text:0000000000002A83                 lea     rdi, aEfDoesNotAccep+14h ; "-l"
.text:0000000000002A8A                 mov     ecx, 3
.text:0000000000002A8F                 mov     rsi, r10
.text:0000000000002A92                 repe cmpsb
.text:0000000000002A94                 setnbe  al
.text:0000000000002A97                 sbb     al, 0
.text:0000000000002A99                 test    al, al
.text:0000000000002A9B                 jnz     short loc_2AAF
.text:0000000000002A9D                 mov     rdi, [r15+r9*8+10h]
.text:0000000000002AA2                 call    binop
.text:0000000000002AA7                 test    al, al
.text:0000000000002AA9                 jnz     loc_2B8A
.text:0000000000002AAF
.text:0000000000002AAF loc_2AAF:                               ; CODE XREF: or+22B↑j
.text:0000000000002AAF                                         ; or:loc_2B00↓j
.text:0000000000002AAF                 mov     rdi, [r15+r9*8+8]
.text:0000000000002AB4                 call    binop
.text:0000000000002AB9                 test    al, al
.text:0000000000002ABB                 jnz     loc_2B70
.text:0000000000002AC1                 cmp     r13b, 2Dh ; '-'
.text:0000000000002AC5                 jz      short loc_2B08
.text:0000000000002AC7
.text:0000000000002AC7 loc_2AC7:                               ; CODE XREF: or+296↓j
.text:0000000000002AC7                                         ; or+29D↓j ...
.text:0000000000002AC7                 test    r13b, r13b
.text:0000000000002ACA                 setnz   al
.text:0000000000002ACD                 add     r11d, 1
.text:0000000000002AD1                 xor     r14d, eax
.text:0000000000002AD4                 mov     cs:pos, r11d
.text:0000000000002ADB                 and     ebx, r14d
.text:0000000000002ADE                 cmp     r12d, r11d
.text:0000000000002AE1                 jg      loc_2A22
.text:0000000000002AE7
.text:0000000000002AE7 loc_2AE7:                               ; CODE XREF: or+1AC↑j
.text:0000000000002AE7                 or      [rsp+48h+var_39], bl
.text:0000000000002AEB
.text:0000000000002AEB loc_2AEB:                               ; CODE XREF: or+2DA↓j
.text:0000000000002AEB                 movzx   eax, [rsp+48h+var_39]
.text:0000000000002AF0                 add     rsp, 18h
.text:0000000000002AF4                 pop     rbx
.text:0000000000002AF5                 pop     rbp
.text:0000000000002AF6                 pop     r12
.text:0000000000002AF8                 pop     r13
.text:0000000000002AFA                 pop     r14
.text:0000000000002AFC                 pop     r15
.text:0000000000002AFE                 retn
.text:0000000000002AFE ; ---------------------------------------------------------------------------
.text:0000000000002AFF                 align 20h
.text:0000000000002B00
.text:0000000000002B00 loc_2B00:                               ; CODE XREF: or+211↑j
.text:0000000000002B00                 jz      short loc_2AAF
.text:0000000000002B02                 cmp     r13b, 2Dh ; '-'
.text:0000000000002B06                 jnz     short loc_2AC7
.text:0000000000002B08
.text:0000000000002B08 loc_2B08:                               ; CODE XREF: or+255↑j
.text:0000000000002B08                 cmp     byte ptr [r10+1], 0
.text:0000000000002B0D                 jz      short loc_2AC7
.text:0000000000002B0F                 cmp     byte ptr [r10+2], 0
.text:0000000000002B14                 jnz     short loc_2AC7
.text:0000000000002B16                 call    unary_operator
.text:0000000000002B1B                 mov     r11d, cs:pos
.text:0000000000002B22                 mov     r12d, cs:argc
.text:0000000000002B29                 jmp     loc_2A13
.text:0000000000002B2E ; ---------------------------------------------------------------------------
.text:0000000000002B2E
.text:0000000000002B2E loc_2B2E:                               ; CODE XREF: or+1D4↑j
.text:0000000000002B2E                 lea     rdi, aO         ; "-o"
.text:0000000000002B35                 mov     ecx, 3
.text:0000000000002B3A                 mov     rsi, r8
.text:0000000000002B3D                 or      [rsp+48h+var_39], bl
.text:0000000000002B41                 repe cmpsb
.text:0000000000002B43                 setnbe  al
.text:0000000000002B46                 sbb     al, 0
.text:0000000000002B48                 test    al, al
.text:0000000000002B4A                 jnz     short loc_2AEB
.text:0000000000002B4C                 add     r11d, 1
.text:0000000000002B50                 mov     cs:pos, r11d
.text:0000000000002B57                 jmp     loc_2898
.text:0000000000002B57 ; ---------------------------------------------------------------------------
.text:0000000000002B5C                 align 20h
.text:0000000000002B60
.text:0000000000002B60 loc_2B60:                               ; CODE XREF: or+142↑j
.text:0000000000002B60                 mov     r8d, r12d
.text:0000000000002B63                 sub     r8d, r9d
.text:0000000000002B66                 jmp     loc_29C8
.text:0000000000002B66 ; ---------------------------------------------------------------------------
.text:0000000000002B6B                 align 10h
.text:0000000000002B70
.text:0000000000002B70 loc_2B70:                               ; CODE XREF: or+24B↑j
.text:0000000000002B70                 xor     edi, edi
.text:0000000000002B72                 call    binary_operator
.text:0000000000002B77                 mov     r11d, cs:pos
.text:0000000000002B7E                 mov     r12d, cs:argc
.text:0000000000002B85                 jmp     loc_2A13
.text:0000000000002B8A ; ---------------------------------------------------------------------------
.text:0000000000002B8A
.text:0000000000002B8A loc_2B8A:                               ; CODE XREF: or+239↑j
.text:0000000000002B8A                 mov     edi, 1
.text:0000000000002B8F                 call    binary_operator
.text:0000000000002B94                 mov     r11d, cs:pos
.text:0000000000002B9B                 mov     r12d, cs:argc
.text:0000000000002BA2                 jmp     loc_2A13
.text:0000000000002BA7 ; ---------------------------------------------------------------------------
.text:0000000000002BA7
.text:0000000000002BA7 loc_2BA7:                               ; CODE XREF: or+56↑j
.text:0000000000002BA7                 xor     r14d, r14d
.text:0000000000002BAA                 jmp     loc_2947
.text:0000000000002BAF ; ---------------------------------------------------------------------------
.text:0000000000002BAF
.text:0000000000002BAF loc_2BAF:                               ; CODE XREF: or+61↑j
.text:0000000000002BAF                 xor     r14d, r14d
.text:0000000000002BB2                 jmp     loc_2A78
.text:0000000000002BB7 ; ---------------------------------------------------------------------------
.text:0000000000002BB7
.text:0000000000002BB7 loc_2BB7:                               ; CODE XREF: or+107↑j
.text:0000000000002BB7                 mov     r8d, 1
.text:0000000000002BBD                 jmp     loc_29C8
.text:0000000000002BC2 ; ---------------------------------------------------------------------------
.text:0000000000002BC2
.text:0000000000002BC2 loc_2BC2:                               ; CODE XREF: or+CE↑j
.text:0000000000002BC2                 mov     cs:pos, r9d
.text:0000000000002BC9                 jmp     loc_2944
.text:0000000000002BCE ; ---------------------------------------------------------------------------
.text:0000000000002BCE
.text:0000000000002BCE loc_2BCE:                               ; CODE XREF: or+AE↑j
.text:0000000000002BCE                 mov     cs:pos, eax
.text:0000000000002BD4                 jmp     loc_2A5E
.text:0000000000002BD9 ; ---------------------------------------------------------------------------
.text:0000000000002BD9
.text:0000000000002BD9 loc_2BD9:                               ; CODE XREF: or+181↑j
.text:0000000000002BD9                                         ; or+18B↑j
.text:0000000000002BD9                 mov     edi, 1
.text:0000000000002BDE                 call    quote_n
.text:0000000000002BE3                 lea     rsi, aNull+5    ; ")"
.text:0000000000002BEA                 xor     edi, edi
.text:0000000000002BEC                 mov     rbp, rax
.text:0000000000002BEF                 call    quote_n
.text:0000000000002BF4                 lea     rsi, aSExpectedFound ; "%s expected, found %s"
.text:0000000000002BFB                 mov     rbx, rax
.text:0000000000002BFE                 mov     edx, 5          ; category
.text:0000000000002C03                 xor     edi, edi        ; domainname
.text:0000000000002C05                 call    _dcgettext
.text:0000000000002C0A                 mov     rdx, rbp
.text:0000000000002C0D                 mov     rdi, rax
.text:0000000000002C10                 mov     rsi, rbx
.text:0000000000002C13                 xor     eax, eax
.text:0000000000002C15                 call    test_syntax_error
.text:0000000000002C1A ; ---------------------------------------------------------------------------
.text:0000000000002C1A
.text:0000000000002C1A loc_2C1A:                               ; CODE XREF: or+178↑j
.text:0000000000002C1A                 lea     rdi, aNull+5    ; ")"
.text:0000000000002C21                 call    quote
.text:0000000000002C26                 lea     rsi, aSExpected ; "%s expected"
.text:0000000000002C2D                 mov     rbx, rax
.text:0000000000002C30                 xor     edi, edi        ; domainname
.text:0000000000002C32                 mov     edx, 5          ; category
.text:0000000000002C37                 call    _dcgettext
.text:0000000000002C3C                 mov     rsi, rbx
.text:0000000000002C3F                 mov     rdi, rax
.text:0000000000002C42                 xor     eax, eax
.text:0000000000002C44                 call    test_syntax_error
.text:0000000000002C44 ; } // starts at 2870
.text:0000000000002C44 or              endp
.text:0000000000002C44
.text:0000000000002C44 ; ---------------------------------------------------------------------------
.text:0000000000002C49                 align 10h
.text:0000000000002C50
.text:0000000000002C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C50
.text:0000000000002C50
.text:0000000000002C50 three_arguments proc near               ; CODE XREF: posixtest+72↑p
.text:0000000000002C50                                         ; posixtest+84↑j
.text:0000000000002C50 ; __unwind {
.text:0000000000002C50                 movsxd  rax, cs:pos
.text:0000000000002C57                 mov     r10, cs:argv
.text:0000000000002C5E                 push    rbx
.text:0000000000002C5F                 mov     r9, rax
.text:0000000000002C62                 add     rax, 1
.text:0000000000002C66                 mov     r11, [r10+rax*8]
.text:0000000000002C6A                 lea     rbx, ds:0[rax*8]
.text:0000000000002C72                 mov     rdi, r11
.text:0000000000002C75                 call    binop
.text:0000000000002C7A                 test    al, al
.text:0000000000002C7C                 jnz     loc_2D60
.text:0000000000002C82                 mov     rdx, [r10+rbx-8]
.text:0000000000002C87                 lea     rdi, asc_7E18   ; "!"
.text:0000000000002C8E                 mov     ecx, 2
.text:0000000000002C93                 mov     rsi, rdx
.text:0000000000002C96                 repe cmpsb
.text:0000000000002C98                 setnbe  al
.text:0000000000002C9B                 sbb     al, 0
.text:0000000000002C9D                 test    al, al
.text:0000000000002C9F                 jnz     short loc_2CC8
.text:0000000000002CA1                 add     r9d, 1
.text:0000000000002CA5                 cmp     r9d, cs:argc
.text:0000000000002CAC                 mov     cs:pos, r9d
.text:0000000000002CB3                 jge     loc_2D93
.text:0000000000002CB9                 call    two_arguments
.text:0000000000002CBE                 pop     rbx
.text:0000000000002CBF                 xor     eax, 1
.text:0000000000002CC2                 retn
.text:0000000000002CC2 ; ---------------------------------------------------------------------------
.text:0000000000002CC3                 align 8
.text:0000000000002CC8
.text:0000000000002CC8 loc_2CC8:                               ; CODE XREF: three_arguments+4F↑j
.text:0000000000002CC8                 lea     rdi, asc_7E1A   ; "("
.text:0000000000002CCF                 mov     ecx, 2
.text:0000000000002CD4                 mov     rsi, rdx
.text:0000000000002CD7                 repe cmpsb
.text:0000000000002CD9                 setnbe  al
.text:0000000000002CDC                 sbb     al, 0
.text:0000000000002CDE                 test    al, al
.text:0000000000002CE0                 jnz     short loc_2D18
.text:0000000000002CE2                 mov     rsi, [r10+rbx+8]
.text:0000000000002CE7                 lea     rdi, aNull+5    ; ")"
.text:0000000000002CEE                 mov     ecx, 2
.text:0000000000002CF3                 repe cmpsb
.text:0000000000002CF5                 setnbe  al
.text:0000000000002CF8                 sbb     al, 0
.text:0000000000002CFA                 test    al, al
.text:0000000000002CFC                 jnz     short loc_2D18
.text:0000000000002CFE                 cmp     byte ptr [r11], 0
.text:0000000000002D02                 pop     rbx
.text:0000000000002D03                 setnz   al
.text:0000000000002D06                 add     r9d, 3
.text:0000000000002D0A                 mov     cs:pos, r9d
.text:0000000000002D11                 retn
.text:0000000000002D11 ; ---------------------------------------------------------------------------
.text:0000000000002D12                 align 8
.text:0000000000002D18
.text:0000000000002D18 loc_2D18:                               ; CODE XREF: three_arguments+90↑j
.text:0000000000002D18                                         ; three_arguments+AC↑j
.text:0000000000002D18                 lea     rdi, aA         ; "-a"
.text:0000000000002D1F                 mov     ecx, 3
.text:0000000000002D24                 mov     rsi, r11
.text:0000000000002D27                 repe cmpsb
.text:0000000000002D29                 setnbe  al
.text:0000000000002D2C                 sbb     al, 0
.text:0000000000002D2E                 test    al, al
.text:0000000000002D30                 jz      short loc_2D4C
.text:0000000000002D32                 lea     rdi, aO         ; "-o"
.text:0000000000002D39                 mov     ecx, 3
.text:0000000000002D3E                 mov     rsi, r11
.text:0000000000002D41                 repe cmpsb
.text:0000000000002D43                 setnbe  al
.text:0000000000002D46                 sbb     al, 0
.text:0000000000002D48                 test    al, al
.text:0000000000002D4A                 jnz     short loc_2D68
.text:0000000000002D4C
.text:0000000000002D4C loc_2D4C:                               ; CODE XREF: three_arguments+E0↑j
.text:0000000000002D4C                 cmp     r9d, cs:argc
.text:0000000000002D53                 jge     short loc_2D93
.text:0000000000002D55                 pop     rbx
.text:0000000000002D56                 jmp     or
.text:0000000000002D56 ; ---------------------------------------------------------------------------
.text:0000000000002D5B                 align 20h
.text:0000000000002D60
.text:0000000000002D60 loc_2D60:                               ; CODE XREF: three_arguments+2C↑j
.text:0000000000002D60                 pop     rbx
.text:0000000000002D61                 xor     edi, edi
.text:0000000000002D63                 jmp     binary_operator
.text:0000000000002D68 ; ---------------------------------------------------------------------------
.text:0000000000002D68
.text:0000000000002D68 loc_2D68:                               ; CODE XREF: three_arguments+FA↑j
.text:0000000000002D68                 mov     rdi, r11
.text:0000000000002D6B                 call    quote
.text:0000000000002D70                 lea     rsi, aSBinaryOperato ; "%s: binary operator expected"
.text:0000000000002D77                 mov     rbx, rax
.text:0000000000002D7A                 xor     edi, edi        ; domainname
.text:0000000000002D7C                 mov     edx, 5          ; category
.text:0000000000002D81                 call    _dcgettext
.text:0000000000002D86                 mov     rsi, rbx
.text:0000000000002D89                 mov     rdi, rax
.text:0000000000002D8C                 xor     eax, eax
.text:0000000000002D8E                 call    test_syntax_error
.text:0000000000002D93 ; ---------------------------------------------------------------------------
.text:0000000000002D93
.text:0000000000002D93 loc_2D93:                               ; CODE XREF: three_arguments+63↑j
.text:0000000000002D93                                         ; three_arguments+103↑j
.text:0000000000002D93                 call    beyond
.text:0000000000002D93 ; } // starts at 2C50
.text:0000000000002D93 three_arguments endp
.text:0000000000002D93
.text:0000000000002D93 ; ---------------------------------------------------------------------------
.text:0000000000002D98                 align 20h
.text:0000000000002DA0
.text:0000000000002DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002DA0
.text:0000000000002DA0 ; Attributes: noreturn
.text:0000000000002DA0
.text:0000000000002DA0 ; void __fastcall __noreturn usage(int status)
.text:0000000000002DA0                 public usage
.text:0000000000002DA0 usage           proc near
.text:0000000000002DA0
.text:0000000000002DA0 var_A8          = qword ptr -0A8h
.text:0000000000002DA0 var_A0          = qword ptr -0A0h
.text:0000000000002DA0 var_98          = qword ptr -98h
.text:0000000000002DA0 var_90          = qword ptr -90h
.text:0000000000002DA0 var_88          = qword ptr -88h
.text:0000000000002DA0 var_80          = qword ptr -80h
.text:0000000000002DA0 var_78          = qword ptr -78h
.text:0000000000002DA0 var_70          = qword ptr -70h
.text:0000000000002DA0 var_68          = qword ptr -68h
.text:0000000000002DA0 var_60          = qword ptr -60h
.text:0000000000002DA0 var_58          = qword ptr -58h
.text:0000000000002DA0 var_50          = qword ptr -50h
.text:0000000000002DA0 var_48          = qword ptr -48h
.text:0000000000002DA0 var_40          = qword ptr -40h
.text:0000000000002DA0 var_30          = qword ptr -30h
.text:0000000000002DA0
.text:0000000000002DA0 ; __unwind {
.text:0000000000002DA0                 push    r13
.text:0000000000002DA2                 push    r12
.text:0000000000002DA4                 push    rbp
.text:0000000000002DA5                 push    rbx
.text:0000000000002DA6                 mov     ebp, edi
.text:0000000000002DA8                 sub     rsp, 88h
.text:0000000000002DAF                 mov     rax, fs:28h
.text:0000000000002DB8                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002DBD                 xor     eax, eax
.text:0000000000002DBF                 test    edi, edi
.text:0000000000002DC1                 jz      short loc_2DFD
.text:0000000000002DC3                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002DCA                 mov     rbx, cs:program_name
.text:0000000000002DD1                 mov     edx, 5          ; category
.text:0000000000002DD6                 xor     edi, edi        ; domainname
.text:0000000000002DD8                 call    _dcgettext
.text:0000000000002DDD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002DE4                 mov     rdx, rax
.text:0000000000002DE7                 mov     rcx, rbx
.text:0000000000002DEA                 mov     esi, 1
.text:0000000000002DEF                 xor     eax, eax
.text:0000000000002DF1                 call    ___fprintf_chk
.text:0000000000002DF6
.text:0000000000002DF6 loc_2DF6:                               ; CODE XREF: usage+476↓j
.text:0000000000002DF6                 mov     edi, ebp        ; status
.text:0000000000002DF8                 call    _exit
.text:0000000000002DFD ; ---------------------------------------------------------------------------
.text:0000000000002DFD
.text:0000000000002DFD loc_2DFD:                               ; CODE XREF: usage+21↑j
.text:0000000000002DFD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002E04                 lea     rsi, aUsageTestExpre ; "Usage: test EXPRESSION\n  or:  test\n  "...
.text:0000000000002E0B                 mov     edx, 5          ; category
.text:0000000000002E10                 xor     edi, edi        ; domainname
.text:0000000000002E12                 call    _dcgettext
.text:0000000000002E17                 mov     rsi, rbx        ; stream
.text:0000000000002E1A                 mov     rdi, rax        ; s
.text:0000000000002E1D                 call    _fputs_unlocked
.text:0000000000002E22                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002E29                 lea     rsi, aExitWithTheSta ; "Exit with the status determined by EXPR"...
.text:0000000000002E30                 mov     edx, 5          ; category
.text:0000000000002E35                 xor     edi, edi        ; domainname
.text:0000000000002E37                 call    _dcgettext
.text:0000000000002E3C                 mov     rsi, rbx        ; stream
.text:0000000000002E3F                 mov     rdi, rax        ; s
.text:0000000000002E42                 call    _fputs_unlocked
.text:0000000000002E47                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002E4E                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002E55                 mov     edx, 5          ; category
.text:0000000000002E5A                 xor     edi, edi        ; domainname
.text:0000000000002E5C                 call    _dcgettext
.text:0000000000002E61                 mov     rsi, rbx        ; stream
.text:0000000000002E64                 mov     rdi, rax        ; s
.text:0000000000002E67                 call    _fputs_unlocked
.text:0000000000002E6C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002E73                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002E7A                 mov     edx, 5          ; category
.text:0000000000002E7F                 xor     edi, edi        ; domainname
.text:0000000000002E81                 call    _dcgettext
.text:0000000000002E86                 mov     rsi, rbx        ; stream
.text:0000000000002E89                 mov     rdi, rax        ; s
.text:0000000000002E8C                 call    _fputs_unlocked
.text:0000000000002E91                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002E98                 lea     rsi, aAnOmittedExpre ; "\nAn omitted EXPRESSION defaults to fal"...
.text:0000000000002E9F                 mov     edx, 5          ; category
.text:0000000000002EA4                 xor     edi, edi        ; domainname
.text:0000000000002EA6                 call    _dcgettext
.text:0000000000002EAB                 mov     rsi, rbx        ; stream
.text:0000000000002EAE                 mov     rdi, rax        ; s
.text:0000000000002EB1                 call    _fputs_unlocked
.text:0000000000002EB6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002EBD                 lea     rsi, aExpressionExpr ; "\n  ( EXPRESSION )               EXPRES"...
.text:0000000000002EC4                 mov     edx, 5          ; category
.text:0000000000002EC9                 xor     edi, edi        ; domainname
.text:0000000000002ECB                 call    _dcgettext
.text:0000000000002ED0                 mov     rsi, rbx        ; stream
.text:0000000000002ED3                 mov     rdi, rax        ; s
.text:0000000000002ED6                 call    _fputs_unlocked
.text:0000000000002EDB                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002EE2                 lea     rsi, aNStringTheLeng ; "\n  -n STRING            the length of "...
.text:0000000000002EE9                 mov     edx, 5          ; category
.text:0000000000002EEE                 xor     edi, edi        ; domainname
.text:0000000000002EF0                 call    _dcgettext
.text:0000000000002EF5                 mov     rsi, rbx        ; stream
.text:0000000000002EF8                 mov     rdi, rax        ; s
.text:0000000000002EFB                 call    _fputs_unlocked
.text:0000000000002F00                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002F07                 lea     rsi, aInteger1EqInte ; "\n  INTEGER1 -eq INTEGER2   INTEGER1 is"...
.text:0000000000002F0E                 mov     edx, 5          ; category
.text:0000000000002F13                 xor     edi, edi        ; domainname
.text:0000000000002F15                 call    _dcgettext
.text:0000000000002F1A                 mov     rsi, rbx        ; stream
.text:0000000000002F1D                 mov     rdi, rax        ; s
.text:0000000000002F20                 call    _fputs_unlocked
.text:0000000000002F25                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002F2C                 lea     rsi, aFile1EfFile2Fi ; "\n  FILE1 -ef FILE2   FILE1 and FILE2 h"...
.text:0000000000002F33                 mov     edx, 5          ; category
.text:0000000000002F38                 xor     edi, edi        ; domainname
.text:0000000000002F3A                 call    _dcgettext
.text:0000000000002F3F                 mov     rsi, rbx        ; stream
.text:0000000000002F42                 mov     rdi, rax        ; s
.text:0000000000002F45                 call    _fputs_unlocked
.text:0000000000002F4A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002F51                 lea     rsi, aBFileFileExist ; "\n  -b FILE     FILE exists and is bloc"...
.text:0000000000002F58                 mov     edx, 5          ; category
.text:0000000000002F5D                 xor     edi, edi        ; domainname
.text:0000000000002F5F                 call    _dcgettext
.text:0000000000002F64                 mov     rsi, rbx        ; stream
.text:0000000000002F67                 mov     rdi, rax        ; s
.text:0000000000002F6A                 call    _fputs_unlocked
.text:0000000000002F6F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002F76                 lea     rsi, aFFileFileExist ; "  -f FILE     FILE exists and is a regu"...
.text:0000000000002F7D                 mov     edx, 5          ; category
.text:0000000000002F82                 xor     edi, edi        ; domainname
.text:0000000000002F84                 call    _dcgettext
.text:0000000000002F89                 mov     rsi, rbx        ; stream
.text:0000000000002F8C                 mov     rdi, rax        ; s
.text:0000000000002F8F                 call    _fputs_unlocked
.text:0000000000002F94                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002F9B                 lea     rsi, aLFileFileExist ; "  -L FILE     FILE exists and is a symb"...
.text:0000000000002FA2                 mov     edx, 5          ; category
.text:0000000000002FA7                 xor     edi, edi        ; domainname
.text:0000000000002FA9                 call    _dcgettext
.text:0000000000002FAE                 mov     rsi, rbx        ; stream
.text:0000000000002FB1                 mov     rdi, rax        ; s
.text:0000000000002FB4                 call    _fputs_unlocked
.text:0000000000002FB9                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002FC0                 lea     rsi, aSFileFileExist ; "  -S FILE     FILE exists and is a sock"...
.text:0000000000002FC7                 mov     edx, 5          ; category
.text:0000000000002FCC                 xor     edi, edi        ; domainname
.text:0000000000002FCE                 call    _dcgettext
.text:0000000000002FD3                 mov     rsi, rbx        ; stream
.text:0000000000002FD6                 mov     rdi, rax        ; s
.text:0000000000002FD9                 call    _fputs_unlocked
.text:0000000000002FDE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002FE5                 lea     rsi, aExceptForHAndL ; "\nExcept for -h and -L, all FILE-relate"...
.text:0000000000002FEC                 mov     edx, 5          ; category
.text:0000000000002FF1                 xor     edi, edi        ; domainname
.text:0000000000002FF3                 call    _dcgettext
.text:0000000000002FF8                 mov     rsi, rbx        ; stream
.text:0000000000002FFB                 mov     rdi, rax        ; s
.text:0000000000002FFE                 call    _fputs_unlocked
.text:0000000000003003                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000300A                 lea     rsi, aNoteBinaryAAnd ; "\nNOTE: Binary -a and -o are inherently"...
.text:0000000000003011                 mov     edx, 5          ; category
.text:0000000000003016                 xor     edi, edi        ; domainname
.text:0000000000003018                 call    _dcgettext
.text:000000000000301D                 mov     rsi, rbx        ; stream
.text:0000000000003020                 mov     rdi, rax        ; s
.text:0000000000003023                 call    _fputs_unlocked
.text:0000000000003028                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000302F                 lea     rsi, aNoteHonorsTheH ; "\nNOTE: [ honors the --help and --versi"...
.text:0000000000003036                 mov     edx, 5          ; category
.text:000000000000303B                 xor     edi, edi        ; domainname
.text:000000000000303D                 call    _dcgettext
.text:0000000000003042                 mov     rsi, rbx        ; stream
.text:0000000000003045                 mov     rdi, rax        ; s
.text:0000000000003048                 call    _fputs_unlocked
.text:000000000000304D                 lea     rsi, aTestAndOr ; "test and/or ["
.text:0000000000003054                 mov     edx, 5          ; category
.text:0000000000003059                 xor     edi, edi        ; domainname
.text:000000000000305B                 call    _dcgettext
.text:0000000000003060                 lea     rsi, aNoteYourShellM ; "\nNOTE: your shell may have its own ver"...
.text:0000000000003067                 mov     rbx, rax
.text:000000000000306A                 mov     edx, 5          ; category
.text:000000000000306F                 xor     edi, edi        ; domainname
.text:0000000000003071                 call    _dcgettext
.text:0000000000003076                 mov     rdx, rbx
.text:0000000000003079                 mov     rsi, rax
.text:000000000000307C                 mov     edi, 1
.text:0000000000003081                 xor     eax, eax
.text:0000000000003083                 lea     rbx, aTest      ; "test"
.text:000000000000308A                 call    ___printf_chk
.text:000000000000308F                 lea     rax, aTestAndOr+0Ch ; "["
.text:0000000000003096                 lea     rcx, aSha256sum ; "sha256sum"
.text:000000000000309D                 mov     [rsp+0A8h+var_48], 0
.text:00000000000030A6                 mov     [rsp+0A8h+var_40], 0
.text:00000000000030AF                 mov     rdx, rsp
.text:00000000000030B2                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000030B6                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000030BD                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000030C2                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000030C9                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000030CE                 lea     rax, domainname ; "coreutils"
.text:00000000000030D5                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000030DA                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000030E1                 mov     [rsp+0A8h+var_98], rax
.text:00000000000030E6                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000030ED                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000030F2                 mov     [rsp+0A8h+var_90], rax
.text:00000000000030F7                 lea     rax, aSha224sum ; "sha224sum"
.text:00000000000030FE                 mov     [rsp+0A8h+var_88], rax
.text:0000000000003103                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:000000000000310A                 mov     [rsp+0A8h+var_80], rax
.text:000000000000310F                 mov     [rsp+0A8h+var_70], rax
.text:0000000000003114                 mov     [rsp+0A8h+var_60], rax
.text:0000000000003119                 mov     [rsp+0A8h+var_50], rax
.text:000000000000311E                 xchg    ax, ax
.text:0000000000003120
.text:0000000000003120 loc_3120:                               ; CODE XREF: usage+39D↓j
.text:0000000000003120                 add     rdx, 10h
.text:0000000000003124                 mov     rdi, [rdx]
.text:0000000000003127                 test    rdi, rdi
.text:000000000000312A                 jz      short loc_313F
.text:000000000000312C                 mov     ecx, 5
.text:0000000000003131                 mov     rsi, rbx
.text:0000000000003134                 repe cmpsb
.text:0000000000003136                 setnbe  al
.text:0000000000003139                 sbb     al, 0
.text:000000000000313B                 test    al, al
.text:000000000000313D                 jnz     short loc_3120
.text:000000000000313F
.text:000000000000313F loc_313F:                               ; CODE XREF: usage+38A↑j
.text:000000000000313F                 mov     r12, [rdx+8]
.text:0000000000003143                 xor     edi, edi        ; domainname
.text:0000000000003145                 mov     edx, 5          ; category
.text:000000000000314A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000003151                 test    r12, r12
.text:0000000000003154                 jz      loc_321B
.text:000000000000315A                 call    _dcgettext
.text:000000000000315F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003166                 lea     rdx, unk_7EE8
.text:000000000000316D                 mov     rsi, rax
.text:0000000000003170                 mov     edi, 1
.text:0000000000003175                 xor     eax, eax
.text:0000000000003177                 call    ___printf_chk
.text:000000000000317C                 xor     esi, esi        ; locale
.text:000000000000317E                 mov     edi, 5          ; category
.text:0000000000003183                 call    _setlocale
.text:0000000000003188                 test    rax, rax
.text:000000000000318B                 jz      short loc_31A9
.text:000000000000318D                 lea     rsi, s2         ; "en_"
.text:0000000000003194                 mov     edx, 3          ; n
.text:0000000000003199                 mov     rdi, rax        ; s1
.text:000000000000319C                 call    _strncmp
.text:00000000000031A1                 test    eax, eax
.text:00000000000031A3                 jnz     loc_32B0
.text:00000000000031A9
.text:00000000000031A9 loc_31A9:                               ; CODE XREF: usage+3EB↑j
.text:00000000000031A9                                         ; usage+535↓j
.text:00000000000031A9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000031B0                 xor     edi, edi        ; domainname
.text:00000000000031B2                 mov     edx, 5          ; category
.text:00000000000031B7                 call    _dcgettext
.text:00000000000031BC                 lea     rcx, aTest      ; "test"
.text:00000000000031C3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000031CA                 mov     rsi, rax
.text:00000000000031CD                 mov     edi, 1
.text:00000000000031D2                 xor     eax, eax
.text:00000000000031D4                 call    ___printf_chk
.text:00000000000031D9                 cmp     r12, rbx
.text:00000000000031DC                 lea     rcx, aSOnlineHelpS+16h ; ""
.text:00000000000031E3                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000031EA                 cmovnz  rbx, rcx
.text:00000000000031EE
.text:00000000000031EE loc_31EE:                               ; CODE XREF: usage+504↓j
.text:00000000000031EE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000031F5                 xor     edi, edi        ; domainname
.text:00000000000031F7                 mov     edx, 5          ; category
.text:00000000000031FC                 call    _dcgettext
.text:0000000000003201                 mov     rcx, rbx
.text:0000000000003204                 mov     rsi, rax
.text:0000000000003207                 mov     rdx, r12
.text:000000000000320A                 mov     edi, 1
.text:000000000000320F                 xor     eax, eax
.text:0000000000003211                 call    ___printf_chk
.text:0000000000003216                 jmp     loc_2DF6
.text:000000000000321B ; ---------------------------------------------------------------------------
.text:000000000000321B
.text:000000000000321B loc_321B:                               ; CODE XREF: usage+3B4↑j
.text:000000000000321B                 call    _dcgettext
.text:0000000000003220                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003227                 lea     rdx, unk_7EE8
.text:000000000000322E                 mov     rsi, rax
.text:0000000000003231                 mov     edi, 1
.text:0000000000003236                 xor     eax, eax
.text:0000000000003238                 call    ___printf_chk
.text:000000000000323D                 xor     esi, esi        ; locale
.text:000000000000323F                 mov     edi, 5          ; category
.text:0000000000003244                 call    _setlocale
.text:0000000000003249                 test    rax, rax
.text:000000000000324C                 jz      short loc_3266
.text:000000000000324E                 lea     rsi, s2         ; "en_"
.text:0000000000003255                 mov     edx, 3          ; n
.text:000000000000325A                 mov     rdi, rax        ; s1
.text:000000000000325D                 call    _strncmp
.text:0000000000003262                 test    eax, eax
.text:0000000000003264                 jnz     short loc_32A9
.text:0000000000003266
.text:0000000000003266 loc_3266:                               ; CODE XREF: usage+4AC↑j
.text:0000000000003266                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000326D                 mov     edx, 5          ; category
.text:0000000000003272                 xor     edi, edi        ; domainname
.text:0000000000003274                 lea     r12, aTest      ; "test"
.text:000000000000327B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003282                 call    _dcgettext
.text:0000000000003287                 lea     rcx, aTest      ; "test"
.text:000000000000328E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003295                 mov     rsi, rax
.text:0000000000003298                 mov     edi, 1
.text:000000000000329D                 xor     eax, eax
.text:000000000000329F                 call    ___printf_chk
.text:00000000000032A4                 jmp     loc_31EE
.text:00000000000032A9 ; ---------------------------------------------------------------------------
.text:00000000000032A9
.text:00000000000032A9 loc_32A9:                               ; CODE XREF: usage+4C4↑j
.text:00000000000032A9                 lea     r12, aTest      ; "test"
.text:00000000000032B0
.text:00000000000032B0 loc_32B0:                               ; CODE XREF: usage+403↑j
.text:00000000000032B0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000032B7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000032BE                 xor     edi, edi        ; domainname
.text:00000000000032C0                 mov     edx, 5          ; category
.text:00000000000032C5                 call    _dcgettext
.text:00000000000032CA                 mov     rsi, r13        ; stream
.text:00000000000032CD                 mov     rdi, rax        ; s
.text:00000000000032D0                 call    _fputs_unlocked
.text:00000000000032D5                 jmp     loc_31A9
.text:00000000000032D5 ; } // starts at 2DA0
.text:00000000000032D5 usage           endp
.text:00000000000032D5
.text:00000000000032D5 ; ---------------------------------------------------------------------------
.text:00000000000032DA                 align 20h
.text:00000000000032E0
.text:00000000000032E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032E0
.text:00000000000032E0
.text:00000000000032E0                 public close_stdout_set_file_name
.text:00000000000032E0 close_stdout_set_file_name proc near
.text:00000000000032E0 ; __unwind {
.text:00000000000032E0                 mov     cs:file_name, rdi
.text:00000000000032E7                 retn
.text:00000000000032E7 ; } // starts at 32E0
.text:00000000000032E7 close_stdout_set_file_name endp
.text:00000000000032E7
.text:00000000000032E7 ; ---------------------------------------------------------------------------
.text:00000000000032E8                 align 10h
.text:00000000000032F0
.text:00000000000032F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032F0
.text:00000000000032F0
.text:00000000000032F0                 public close_stdout_set_ignore_EPIPE
.text:00000000000032F0 close_stdout_set_ignore_EPIPE proc near
.text:00000000000032F0 ; __unwind {
.text:00000000000032F0                 mov     cs:ignore_EPIPE, dil
.text:00000000000032F7                 retn
.text:00000000000032F7 ; } // starts at 32F0
.text:00000000000032F7 close_stdout_set_ignore_EPIPE endp
.text:00000000000032F7
.text:00000000000032F7 ; ---------------------------------------------------------------------------
.text:00000000000032F8                 align 20h
.text:0000000000003300
.text:0000000000003300 ; =============== S U B R O U T I N E =======================================
.text:0000000000003300
.text:0000000000003300 ; Attributes: info_from_lumina
.text:0000000000003300
.text:0000000000003300 ; void __cdecl close_stdout()
.text:0000000000003300                 public close_stdout
.text:0000000000003300 close_stdout    proc near               ; DATA XREF: main+43↑o
.text:0000000000003300 ; __unwind {
.text:0000000000003300                 push    rbp
.text:0000000000003301                 push    rbx
.text:0000000000003302                 sub     rsp, 8
.text:0000000000003306                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000330D                 call    close_stream
.text:0000000000003312                 test    eax, eax
.text:0000000000003314                 jz      short loc_332C
.text:0000000000003316                 call    ___errno_location
.text:000000000000331B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000003322                 mov     rbx, rax
.text:0000000000003325                 jz      short loc_3343
.text:0000000000003327                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000332A                 jnz     short loc_3343
.text:000000000000332C
.text:000000000000332C loc_332C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000332C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000003333                 call    close_stream
.text:0000000000003338                 test    eax, eax
.text:000000000000333A                 jnz     short loc_3382
.text:000000000000333C                 add     rsp, 8
.text:0000000000003340                 pop     rbx
.text:0000000000003341                 pop     rbp
.text:0000000000003342                 retn
.text:0000000000003343 ; ---------------------------------------------------------------------------
.text:0000000000003343
.text:0000000000003343 loc_3343:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000003343                                         ; close_stdout+2A↑j
.text:0000000000003343                 lea     rsi, aWriteError ; "write error"
.text:000000000000334A                 xor     edi, edi        ; domainname
.text:000000000000334C                 mov     edx, 5          ; category
.text:0000000000003351                 call    _dcgettext
.text:0000000000003356                 mov     rdi, cs:file_name
.text:000000000000335D                 mov     rbp, rax
.text:0000000000003360                 test    rdi, rdi
.text:0000000000003363                 jz      short loc_338D
.text:0000000000003365                 call    quotearg_colon
.text:000000000000336A                 mov     esi, [rbx]      ; errnum
.text:000000000000336C                 lea     rdx, format     ; "%s: %s"
.text:0000000000003373                 mov     rcx, rax
.text:0000000000003376                 mov     r8, rbp
.text:0000000000003379                 xor     edi, edi        ; status
.text:000000000000337B                 xor     eax, eax
.text:000000000000337D                 call    _error
.text:0000000000003382
.text:0000000000003382 loc_3382:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000003382                                         ; close_stdout+A2↓j
.text:0000000000003382                 mov     edi, cs:exit_failure ; status
.text:0000000000003388                 call    __exit
.text:000000000000338D ; ---------------------------------------------------------------------------
.text:000000000000338D
.text:000000000000338D loc_338D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000338D                 mov     esi, [rbx]      ; errnum
.text:000000000000338F                 lea     rdx, format+4   ; format
.text:0000000000003396                 mov     rcx, rax
.text:0000000000003399                 xor     edi, edi        ; status
.text:000000000000339B                 xor     eax, eax
.text:000000000000339D                 call    _error
.text:00000000000033A2                 jmp     short loc_3382
.text:00000000000033A2 ; } // starts at 3300
.text:00000000000033A2 close_stdout    endp
.text:00000000000033A2
.text:00000000000033A2 ; ---------------------------------------------------------------------------
.text:00000000000033A4                 align 10h
.text:00000000000033B0
.text:00000000000033B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033B0
.text:00000000000033B0 ; Attributes: info_from_lumina
.text:00000000000033B0
.text:00000000000033B0 ; char *__fastcall umaxtostr(uintmax_t i, char *buf)
.text:00000000000033B0                 public umaxtostr
.text:00000000000033B0 umaxtostr       proc near               ; CODE XREF: binary_operator+34E↑p
.text:00000000000033B0                                         ; binary_operator+490↑p
.text:00000000000033B0 ; __unwind {
.text:00000000000033B0                 lea     rcx, [rsi+14h]
.text:00000000000033B4                 mov     byte ptr [rsi+14h], 0
.text:00000000000033B8                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:00000000000033C2                 nop     word ptr [rax+rax+00h]
.text:00000000000033C8
.text:00000000000033C8 loc_33C8:                               ; CODE XREF: umaxtostr+3C↓j
.text:00000000000033C8                 mov     rax, rdi
.text:00000000000033CB                 sub     rcx, 1
.text:00000000000033CF                 mul     rsi
.text:00000000000033D2                 shr     rdx, 3
.text:00000000000033D6                 lea     rax, [rdx+rdx*4]
.text:00000000000033DA                 add     rax, rax
.text:00000000000033DD                 sub     rdi, rax
.text:00000000000033E0                 add     edi, 30h ; '0'
.text:00000000000033E3                 test    rdx, rdx
.text:00000000000033E6                 mov     [rcx], dil
.text:00000000000033E9                 mov     rdi, rdx
.text:00000000000033EC                 jnz     short loc_33C8
.text:00000000000033EE                 mov     rax, rcx
.text:00000000000033F1                 retn
.text:00000000000033F1 ; } // starts at 33B0
.text:00000000000033F1 umaxtostr       endp
.text:00000000000033F1
.text:00000000000033F1 ; ---------------------------------------------------------------------------
.text:00000000000033F2                 align 20h
.text:0000000000003400
.text:0000000000003400 ; =============== S U B R O U T I N E =======================================
.text:0000000000003400
.text:0000000000003400
.text:0000000000003400                 public set_program_name
.text:0000000000003400 set_program_name proc near              ; CODE XREF: main+E↑p
.text:0000000000003400 ; __unwind {
.text:0000000000003400                 test    rdi, rdi
.text:0000000000003403                 push    rbx
.text:0000000000003404                 jz      short loc_347D
.text:0000000000003406                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000340B                 mov     rbx, rdi
.text:000000000000340E                 call    _strrchr
.text:0000000000003413                 test    rax, rax
.text:0000000000003416                 jz      short loc_346D
.text:0000000000003418                 lea     r8, [rax+1]
.text:000000000000341C                 mov     rdx, r8
.text:000000000000341F                 sub     rdx, rbx
.text:0000000000003422                 cmp     rdx, 6
.text:0000000000003426                 jle     short loc_346D
.text:0000000000003428                 lea     rsi, [rax-6]
.text:000000000000342C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000003433                 mov     ecx, 7
.text:0000000000003438                 repe cmpsb
.text:000000000000343A                 setnbe  dl
.text:000000000000343D                 sbb     dl, 0
.text:0000000000003440                 test    dl, dl
.text:0000000000003442                 jnz     short loc_346D
.text:0000000000003444                 lea     rdi, aLt        ; "lt-"
.text:000000000000344B                 mov     ecx, 3
.text:0000000000003450                 mov     rsi, r8
.text:0000000000003453                 mov     rbx, r8
.text:0000000000003456                 repe cmpsb
.text:0000000000003458                 setnbe  dl
.text:000000000000345B                 sbb     dl, 0
.text:000000000000345E                 test    dl, dl
.text:0000000000003460                 jnz     short loc_346D
.text:0000000000003462                 lea     rbx, [rax+4]
.text:0000000000003466                 mov     cs:__bss_start, rbx
.text:000000000000346D
.text:000000000000346D loc_346D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000346D                                         ; set_program_name+26↑j ...
.text:000000000000346D                 mov     cs:program_name, rbx
.text:0000000000003474                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000347B                 pop     rbx
.text:000000000000347C                 retn
.text:000000000000347D ; ---------------------------------------------------------------------------
.text:000000000000347D
.text:000000000000347D loc_347D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000347D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000003484                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000348B                 mov     edx, 37h ; '7'  ; n
.text:0000000000003490                 mov     esi, 1          ; size
.text:0000000000003495                 call    _fwrite
.text:000000000000349A                 call    _abort
.text:000000000000349A ; } // starts at 3400
.text:000000000000349A set_program_name endp
.text:000000000000349A
.text:000000000000349A ; ---------------------------------------------------------------------------
.text:000000000000349F                 align 20h
.text:00000000000034A0
.text:00000000000034A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034A0
.text:00000000000034A0 ; Attributes: info_from_lumina
.text:00000000000034A0
.text:00000000000034A0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000034A0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000034A0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000034A0 ; __unwind {
.text:00000000000034A0                 push    rbp
.text:00000000000034A1                 push    rbx
.text:00000000000034A2                 mov     rbp, rdi
.text:00000000000034A5                 mov     ebx, esi
.text:00000000000034A7                 sub     rsp, 8
.text:00000000000034AB                 call    locale_charset
.text:00000000000034B0                 movzx   edx, byte ptr [rax]
.text:00000000000034B3                 and     edx, 0FFFFFFDFh
.text:00000000000034B6                 cmp     dl, 55h ; 'U'
.text:00000000000034B9                 jz      short loc_3530
.text:00000000000034BB                 cmp     dl, 47h ; 'G'
.text:00000000000034BE                 jz      short loc_34E0
.text:00000000000034C0
.text:00000000000034C0 loc_34C0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000034C0                                         ; gettext_quote+50↓j ...
.text:00000000000034C0                 lea     rax, unk_8DEB
.text:00000000000034C7                 lea     rdx, asc_8DED   ; "'"
.text:00000000000034CE                 cmp     ebx, 9
.text:00000000000034D1                 cmovnz  rax, rdx
.text:00000000000034D5                 add     rsp, 8
.text:00000000000034D9                 pop     rbx
.text:00000000000034DA                 pop     rbp
.text:00000000000034DB                 retn
.text:00000000000034DB ; ---------------------------------------------------------------------------
.text:00000000000034DC                 align 20h
.text:00000000000034E0
.text:00000000000034E0 loc_34E0:                               ; CODE XREF: gettext_quote+1E↑j
.text:00000000000034E0                 movzx   edx, byte ptr [rax+1]
.text:00000000000034E4                 and     edx, 0FFFFFFDFh
.text:00000000000034E7                 cmp     dl, 42h ; 'B'
.text:00000000000034EA                 jnz     short loc_34C0
.text:00000000000034EC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:00000000000034F0                 jnz     short loc_34C0
.text:00000000000034F2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:00000000000034F6                 jnz     short loc_34C0
.text:00000000000034F8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:00000000000034FC                 jnz     short loc_34C0
.text:00000000000034FE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000003502                 jnz     short loc_34C0
.text:0000000000003504                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000003508                 jnz     short loc_34C0
.text:000000000000350A                 cmp     byte ptr [rax+7], 0
.text:000000000000350E                 jnz     short loc_34C0
.text:0000000000003510                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003514                 lea     rax, unk_8DE4
.text:000000000000351B                 lea     rdx, unk_8DE8
.text:0000000000003522                 cmovnz  rax, rdx
.text:0000000000003526                 add     rsp, 8
.text:000000000000352A                 pop     rbx
.text:000000000000352B                 pop     rbp
.text:000000000000352C                 retn
.text:000000000000352C ; ---------------------------------------------------------------------------
.text:000000000000352D                 align 10h
.text:0000000000003530
.text:0000000000003530 loc_3530:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000003530                 movzx   edx, byte ptr [rax+1]
.text:0000000000003534                 and     edx, 0FFFFFFDFh
.text:0000000000003537                 cmp     dl, 54h ; 'T'
.text:000000000000353A                 jnz     short loc_34C0
.text:000000000000353C                 movzx   edx, byte ptr [rax+2]
.text:0000000000003540                 and     edx, 0FFFFFFDFh
.text:0000000000003543                 cmp     dl, 46h ; 'F'
.text:0000000000003546                 jnz     loc_34C0
.text:000000000000354C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000003550                 jnz     loc_34C0
.text:0000000000003556                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000355A                 jnz     loc_34C0
.text:0000000000003560                 cmp     byte ptr [rax+5], 0
.text:0000000000003564                 jnz     loc_34C0
.text:000000000000356A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000356E                 lea     rax, unk_8DDC
.text:0000000000003575                 lea     rdx, unk_8DE0
.text:000000000000357C                 cmovnz  rax, rdx
.text:0000000000003580                 add     rsp, 8
.text:0000000000003584                 pop     rbx
.text:0000000000003585                 pop     rbp
.text:0000000000003586                 retn
.text:0000000000003586 ; } // starts at 34A0
.text:0000000000003586 gettext_quote   endp
.text:0000000000003586
.text:0000000000003586 ; ---------------------------------------------------------------------------
.text:0000000000003587                 align 10h
.text:0000000000003590
.text:0000000000003590 ; =============== S U B R O U T I N E =======================================
.text:0000000000003590
.text:0000000000003590 ; Attributes: info_from_lumina
.text:0000000000003590
.text:0000000000003590 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000003590 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000003590                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000003590
.text:0000000000003590 var_E0          = dword ptr -0E0h
.text:0000000000003590 var_DB          = byte ptr -0DBh
.text:0000000000003590 var_DA          = byte ptr -0DAh
.text:0000000000003590 var_D9          = byte ptr -0D9h
.text:0000000000003590 s               = qword ptr -0D8h
.text:0000000000003590 n               = qword ptr -0D0h
.text:0000000000003590 var_C8          = qword ptr -0C8h
.text:0000000000003590 ps              = qword ptr -0C0h
.text:0000000000003590 var_B8          = qword ptr -0B8h
.text:0000000000003590 var_B0          = qword ptr -0B0h
.text:0000000000003590 var_A8          = qword ptr -0A8h
.text:0000000000003590 s2              = qword ptr -0A0h
.text:0000000000003590 var_98          = qword ptr -98h
.text:0000000000003590 var_90          = qword ptr -90h
.text:0000000000003590 var_88          = qword ptr -88h
.text:0000000000003590 var_80          = qword ptr -80h
.text:0000000000003590 var_78          = qword ptr -78h
.text:0000000000003590 var_70          = dword ptr -70h
.text:0000000000003590 var_6C          = byte ptr -6Ch
.text:0000000000003590 var_6B          = byte ptr -6Bh
.text:0000000000003590 var_6A          = byte ptr -6Ah
.text:0000000000003590 var_69          = byte ptr -69h
.text:0000000000003590 var_68          = qword ptr -68h
.text:0000000000003590 var_60          = qword ptr -60h
.text:0000000000003590 wc              = dword ptr -4Ch
.text:0000000000003590 var_48          = qword ptr -48h
.text:0000000000003590 var_40          = qword ptr -40h
.text:0000000000003590 arg_0           = qword ptr  8
.text:0000000000003590 arg_8           = qword ptr  10h
.text:0000000000003590 arg_10          = qword ptr  18h
.text:0000000000003590
.text:0000000000003590 ; __unwind {
.text:0000000000003590                 push    r15
.text:0000000000003592                 push    r14
.text:0000000000003594                 mov     r15d, r8d
.text:0000000000003597                 push    r13
.text:0000000000003599                 push    r12
.text:000000000000359B                 mov     r14, rdi
.text:000000000000359E                 push    rbp
.text:000000000000359F                 push    rbx
.text:00000000000035A0                 mov     ebx, r9d
.text:00000000000035A3                 mov     r13, rsi
.text:00000000000035A6                 mov     rbp, rcx
.text:00000000000035A9                 and     ebx, 2
.text:00000000000035AC                 sub     rsp, 0B8h
.text:00000000000035B3                 mov     rax, [rsp+0E8h+arg_0]
.text:00000000000035BB                 mov     [rsp+0E8h+s], rdx
.text:00000000000035C0                 mov     [rsp+0E8h+var_E0], r8d
.text:00000000000035C5                 mov     [rsp+0E8h+var_70], r9d
.text:00000000000035CA                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000035CF                 mov     rax, [rsp+0E8h+arg_8]
.text:00000000000035D7                 mov     [rsp+0E8h+var_80], rax
.text:00000000000035DC                 mov     rax, [rsp+0E8h+arg_10]
.text:00000000000035E4                 mov     [rsp+0E8h+var_88], rax
.text:00000000000035E9                 mov     rax, fs:28h
.text:00000000000035F2                 mov     [rsp+0E8h+var_40], rax
.text:00000000000035FA                 xor     eax, eax
.text:00000000000035FC                 call    ___ctype_get_mb_cur_max
.text:0000000000003601                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000003605                 mov     [rsp+0E8h+var_90], rax
.text:000000000000360A                 ja      def_3621        ; jumptable 00000000000121F1 default case
.text:0000000000003610                 lea     rcx, jpt_3621
.text:0000000000003617                 mov     edx, r15d
.text:000000000000361A                 movsxd  rax, ds:(jpt_3621 - 8E40h)[rcx+rdx*4]
.text:000000000000361E                 add     rax, rcx
.text:0000000000003621                 jmp     rax             ; switch jump
.text:0000000000003623 ; ---------------------------------------------------------------------------
.text:0000000000003623
.text:0000000000003623 loc_3623:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003623                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000003623                                         ; DATA XREF: ...
.text:0000000000003623                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000003628                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000362D                 xor     r12d, r12d
.text:0000000000003630                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003639                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000363E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003643
.text:0000000000003643 loc_3643:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000003643                 lea     rax, asc_8DED   ; "'"
.text:000000000000364A                 mov     [rsp+0E8h+n], 1
.text:0000000000003653                 xor     r15d, r15d
.text:0000000000003656                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000365E                 mov     [rsp+0E8h+s2], rax
.text:0000000000003663
.text:0000000000003663 loc_3663:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000003663                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000003663                 xor     r11d, r11d
.text:0000000000003666                 mov     rax, rbp
.text:0000000000003669                 mov     r8d, r12d
.text:000000000000366C                 mov     rbp, r11
.text:000000000000366F                 mov     r11, rax
.text:0000000000003672                 nop     word ptr [rax+rax+00h]
.text:0000000000003678
.text:0000000000003678 loc_3678:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000003678                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000003678                 cmp     r11, rbp
.text:000000000000367B                 setnz   r12b
.text:000000000000367F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003683                 jnz     short loc_3692
.text:0000000000003685                 mov     rax, [rsp+0E8h+s]
.text:000000000000368A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000368E                 setnz   r12b
.text:0000000000003692
.text:0000000000003692 loc_3692:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000003692                 test    r12b, r12b
.text:0000000000003695                 jz      loc_3CF0
.text:000000000000369B                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000036A0                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000036A5                 lea     r9, [rdi+rbp]
.text:00000000000036A9                 setnz   al
.text:00000000000036AC                 and     al, [rsp+0E8h+var_DB]
.text:00000000000036B0                 mov     r10d, eax
.text:00000000000036B3                 jz      loc_3760
.text:00000000000036B9                 mov     rax, [rsp+0E8h+n]
.text:00000000000036BE                 test    rax, rax
.text:00000000000036C1                 jz      loc_3AF0
.text:00000000000036C7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000036CB                 lea     rbx, [rbp+rax+0]
.text:00000000000036D0                 jnz     short loc_3700
.text:00000000000036D2                 cmp     rax, 1
.text:00000000000036D6                 jbe     short loc_3700
.text:00000000000036D8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000036DD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000036E2                 mov     [rsp+0E8h+ps], r9
.text:00000000000036E7                 call    _strlen
.text:00000000000036EC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000036F2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000036F8                 mov     r11, rax
.text:00000000000036FB                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003700
.text:0000000000003700 loc_3700:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003700                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003700                 cmp     rbx, r11
.text:0000000000003703                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003708                 ja      loc_3CC0
.text:000000000000370E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003713                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003718                 mov     rdi, r9         ; s1
.text:000000000000371B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003720                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003725                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000372A                 call    _memcmp
.text:000000000000372F                 test    eax, eax
.text:0000000000003731                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003736                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000373C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000003741                 jnz     loc_3CC0
.text:0000000000003747                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000374C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003752                 jnz     loc_46D5
.text:0000000000003758                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003760
.text:0000000000003760 loc_3760:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000003760                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000003760                 movzx   ebx, byte ptr [r9]
.text:0000000000003764                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003767                 ja      def_377E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000376D                 lea     rcx, jpt_377E
.text:0000000000003774                 movzx   edx, bl
.text:0000000000003777                 movsxd  rax, ds:(jpt_377E - 8E6Ch)[rcx+rdx*4]
.text:000000000000377B                 add     rax, rcx
.text:000000000000377E                 jmp     rax             ; switch jump
.text:0000000000003780 ; ---------------------------------------------------------------------------
.text:0000000000003780
.text:0000000000003780 loc_3780:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003780                                         ; DATA XREF: .rodata:jpt_3B0A↓o
.text:0000000000003780                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000003783
.text:0000000000003783 loc_3783:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003783                                         ; DATA XREF: .rodata:jpt_377E↓o
.text:0000000000003783                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000003787                 setnz   al
.text:000000000000378A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000378E                 jnz     short loc_379C
.text:0000000000003790                 mov     rax, [rsp+0E8h+s]
.text:0000000000003795                 cmp     byte ptr [rax+1], 0
.text:0000000000003799                 setnz   al
.text:000000000000379C
.text:000000000000379C loc_379C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000379C                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000037A1                 setz    dl
.text:00000000000037A4                 test    al, al
.text:00000000000037A6                 jz      loc_39F8
.text:00000000000037AC
.text:00000000000037AC loc_37AC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000037AC                 xor     r12d, r12d
.text:00000000000037AF                 xor     eax, eax
.text:00000000000037B1                 nop     dword ptr [rax+00000000h]
.text:00000000000037B8
.text:00000000000037B8 loc_37B8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000037B8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000037B8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000037BD                 jnz     loc_38D2
.text:00000000000037C3                 test    dl, dl
.text:00000000000037C5                 jnz     loc_38D2
.text:00000000000037CB
.text:00000000000037CB loc_37CB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000037CB                 mov     rsi, [rsp+0E8h+var_C8]
.text:00000000000037D0                 test    rsi, rsi
.text:00000000000037D3                 jz      short loc_37E9
.text:00000000000037D5                 mov     edx, ebx
.text:00000000000037D7                 shr     dl, 5
.text:00000000000037DA                 movzx   edx, dl
.text:00000000000037DD                 mov     edx, [rsi+rdx*4]
.text:00000000000037E0                 bt      edx, ebx
.text:00000000000037E3                 jb      loc_3933
.text:00000000000037E9
.text:00000000000037E9 loc_37E9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:00000000000037E9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:00000000000037E9                 test    r10b, r10b
.text:00000000000037EC                 jnz     loc_3933
.text:00000000000037F2                 xor     eax, 1
.text:00000000000037F5                 add     rbp, 1
.text:00000000000037F9                 and     eax, r8d
.text:00000000000037FC
.text:00000000000037FC loc_37FC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:00000000000037FC                                         ; quotearg_buffer_restyled+AE8↓j
.text:00000000000037FC                 test    al, al
.text:00000000000037FE                 jz      short loc_3820
.text:0000000000003800                 cmp     r13, r15
.text:0000000000003803                 jbe     short loc_380A
.text:0000000000003805                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000380A
.text:000000000000380A loc_380A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000380A                 lea     rax, [r15+1]
.text:000000000000380E                 cmp     r13, rax
.text:0000000000003811                 jbe     short loc_3819
.text:0000000000003813                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003819
.text:0000000000003819 loc_3819:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003819                 add     r15, 2
.text:000000000000381D                 xor     r8d, r8d
.text:0000000000003820
.text:0000000000003820 loc_3820:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003820                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003820                 cmp     r15, r13
.text:0000000000003823                 jnb     short loc_3829
.text:0000000000003825                 mov     [r14+r15], bl
.text:0000000000003829
.text:0000000000003829 loc_3829:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003829                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000382E                 add     r15, 1
.text:0000000000003832                 mov     eax, 0
.text:0000000000003837                 test    r12b, r12b
.text:000000000000383A                 cmovz   edi, eax
.text:000000000000383D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000003842                 jmp     loc_3678
.text:0000000000003842 ; ---------------------------------------------------------------------------
.text:0000000000003847                 align 10h
.text:0000000000003850
.text:0000000000003850 loc_3850:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003850                                         ; DATA XREF: .rodata:jpt_3B0A↓o
.text:0000000000003850                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000003853
.text:0000000000003853 loc_3853:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003853                                         ; DATA XREF: .rodata:jpt_377E↓o
.text:0000000000003853                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000003857                 cmp     eax, 2
.text:000000000000385A                 jz      loc_3E18
.text:0000000000003860                 cmp     eax, 5
.text:0000000000003863                 jz      loc_3DD8
.text:0000000000003869                 cmp     eax, 2
.text:000000000000386C                 mov     ebx, 3Fh ; '?'
.text:0000000000003871                 setz    dl
.text:0000000000003874                 xor     r12d, r12d
.text:0000000000003877                 xor     eax, eax
.text:0000000000003879                 jmp     loc_37B8
.text:0000000000003879 ; ---------------------------------------------------------------------------
.text:000000000000387E                 align 20h
.text:0000000000003880
.text:0000000000003880 loc_3880:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003880                                         ; DATA XREF: .rodata:jpt_3B0A↓o
.text:0000000000003880                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000003883
.text:0000000000003883 loc_3883:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003883                                         ; DATA XREF: .rodata:jpt_377E↓o
.text:0000000000003883                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000003888                 jz      loc_3D90
.text:000000000000388E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003893                 xor     edx, edx
.text:0000000000003895                 xor     eax, eax
.text:0000000000003897                 mov     ebx, 27h ; '''
.text:000000000000389C                 jmp     loc_37B8
.text:000000000000389C ; ---------------------------------------------------------------------------
.text:00000000000038A1                 align 8
.text:00000000000038A8
.text:00000000000038A8 loc_38A8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000038A8                                         ; DATA XREF: .rodata:jpt_377E↓o
.text:00000000000038A8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000038AD                 mov     ebx, 74h ; 't'
.text:00000000000038B2
.text:00000000000038B2 loc_38B2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000038B2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000038B2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000038B7                 setz    al
.text:00000000000038BA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000038BE                 jnz     loc_3A0E
.text:00000000000038C4
.text:00000000000038C4 loc_38C4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000038C4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000038C4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000038C9                 jnz     short loc_3930
.text:00000000000038CB
.text:00000000000038CB loc_38CB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000038CB                 mov     ebx, edx
.text:00000000000038CD                 xor     r12d, r12d
.text:00000000000038D0                 xor     eax, eax
.text:00000000000038D2
.text:00000000000038D2 loc_38D2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:00000000000038D2                                         ; quotearg_buffer_restyled+235↑j
.text:00000000000038D2                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000038D7                 jnz     loc_37CB
.text:00000000000038DD                 jmp     loc_37E9
.text:00000000000038DD ; ---------------------------------------------------------------------------
.text:00000000000038E2                 align 8
.text:00000000000038E8
.text:00000000000038E8 loc_38E8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000038E8                                         ; DATA XREF: .rodata:jpt_377E↓o
.text:00000000000038E8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000038ED                 mov     ebx, 62h ; 'b'
.text:00000000000038F2                 jmp     short loc_38C4
.text:00000000000038F2 ; ---------------------------------------------------------------------------
.text:00000000000038F4                 align 8
.text:00000000000038F8
.text:00000000000038F8 loc_38F8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000038F8                                         ; DATA XREF: .rodata:jpt_377E↓o
.text:00000000000038F8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:00000000000038FD                 jz      loc_3CD0
.text:0000000000003903                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003908                 jz      loc_3B20
.text:000000000000390E
.text:000000000000390E loc_390E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000390E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003913                 jz      loc_3B20
.text:0000000000003919                 cmp     [rsp+0E8h+n], 0
.text:000000000000391F                 jnz     loc_3CDB
.text:0000000000003925                 mov     ebx, 5Ch ; '\'
.text:000000000000392A                 nop     word ptr [rax+rax+00h]
.text:0000000000003930
.text:0000000000003930 loc_3930:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003930                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003930                 xor     r12d, r12d
.text:0000000000003933
.text:0000000000003933 loc_3933:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003933                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003933                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003938                 setz    dl
.text:000000000000393B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003940                 mov     eax, edx
.text:0000000000003942                 jnz     loc_4198
.text:0000000000003948                 mov     eax, r8d
.text:000000000000394B                 xor     eax, 1
.text:000000000000394E                 and     al, dl
.text:0000000000003950                 jz      short loc_3981
.text:0000000000003952                 cmp     r13, r15
.text:0000000000003955                 jbe     short loc_395C
.text:0000000000003957                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000395C
.text:000000000000395C loc_395C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000395C                 lea     rdx, [r15+1]
.text:0000000000003960                 cmp     r13, rdx
.text:0000000000003963                 jbe     short loc_396B
.text:0000000000003965                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000396B
.text:000000000000396B loc_396B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000396B                 lea     rdx, [r15+2]
.text:000000000000396F                 cmp     r13, rdx
.text:0000000000003972                 jbe     short loc_397A
.text:0000000000003974                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000397A
.text:000000000000397A loc_397A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000397A                 add     r15, 3
.text:000000000000397E                 mov     r8d, eax
.text:0000000000003981
.text:0000000000003981 loc_3981:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003981                 cmp     r13, r15
.text:0000000000003984                 jbe     short loc_398B
.text:0000000000003986                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000398B
.text:000000000000398B loc_398B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000398B                 add     r15, 1
.text:000000000000398F                 add     rbp, 1
.text:0000000000003993                 jmp     loc_3820
.text:0000000000003993 ; ---------------------------------------------------------------------------
.text:0000000000003998                 align 20h
.text:00000000000039A0
.text:00000000000039A0 loc_39A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000039A0                                         ; DATA XREF: .rodata:jpt_377E↓o
.text:00000000000039A0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000039A5                 jnz     loc_3B73
.text:00000000000039AB                 xor     edx, edx
.text:00000000000039AD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:00000000000039B2                 jz      loc_38CB
.text:00000000000039B8                 add     rbp, 1
.text:00000000000039BC                 jmp     loc_3678
.text:00000000000039BC ; ---------------------------------------------------------------------------
.text:00000000000039C1                 align 8
.text:00000000000039C8
.text:00000000000039C8 loc_39C8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000039C8                                         ; DATA XREF: .rodata:jpt_377E↓o
.text:00000000000039C8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000039CD                 setz    dl
.text:00000000000039D0                 xor     eax, eax
.text:00000000000039D2                 jmp     loc_37B8
.text:00000000000039D2 ; ---------------------------------------------------------------------------
.text:00000000000039D7                 align 20h
.text:00000000000039E0
.text:00000000000039E0 loc_39E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000039E0                                         ; DATA XREF: .rodata:jpt_377E↓o
.text:00000000000039E0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000039E5                 mov     ebx, 61h ; 'a'
.text:00000000000039EA                 jmp     loc_38C4
.text:00000000000039EA ; ---------------------------------------------------------------------------
.text:00000000000039EF                 align 10h
.text:00000000000039F0
.text:00000000000039F0 loc_39F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000039F0                                         ; DATA XREF: .rodata:jpt_377E↓o
.text:00000000000039F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000039F5                 setz    dl
.text:00000000000039F8
.text:00000000000039F8 loc_39F8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000039F8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000039F8                 test    rbp, rbp
.text:00000000000039FB                 jnz     loc_37AC
.text:0000000000003A01
.text:0000000000003A01 loc_3A01:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003A01                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003A01                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003A06                 and     al, dl
.text:0000000000003A08                 jz      loc_37B8
.text:0000000000003A0E
.text:0000000000003A0E loc_3A0E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000003A0E                 mov     rbp, r11
.text:0000000000003A11                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003A19                 jmp     loc_4119
.text:0000000000003A19 ; ---------------------------------------------------------------------------
.text:0000000000003A1E                 align 20h
.text:0000000000003A20
.text:0000000000003A20 loc_3A20:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003A20                                         ; DATA XREF: .rodata:jpt_377E↓o
.text:0000000000003A20                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003A25                 setz    dl
.text:0000000000003A28                 xor     r12d, r12d
.text:0000000000003A2B                 jmp     short loc_3A01
.text:0000000000003A2B ; ---------------------------------------------------------------------------
.text:0000000000003A2D                 align 10h
.text:0000000000003A30
.text:0000000000003A30 loc_3A30:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003A30                                         ; DATA XREF: .rodata:jpt_377E↓o
.text:0000000000003A30                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003A35                 mov     ebx, 20h ; ' '
.text:0000000000003A3A                 setz    dl
.text:0000000000003A3D                 jmp     short loc_3A01
.text:0000000000003A3D ; ---------------------------------------------------------------------------
.text:0000000000003A3F                 align 20h
.text:0000000000003A40
.text:0000000000003A40 loc_3A40:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003A40                                         ; DATA XREF: .rodata:jpt_377E↓o
.text:0000000000003A40                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000003A45                 mov     ebx, 72h ; 'r'
.text:0000000000003A4A                 jmp     loc_38B2
.text:0000000000003A4A ; ---------------------------------------------------------------------------
.text:0000000000003A4F                 align 10h
.text:0000000000003A50
.text:0000000000003A50 loc_3A50:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003A50                                         ; DATA XREF: .rodata:jpt_377E↓o
.text:0000000000003A50                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000003A55                 mov     ebx, 66h ; 'f'
.text:0000000000003A5A                 jmp     loc_38C4
.text:0000000000003A5A ; ---------------------------------------------------------------------------
.text:0000000000003A5F                 align 20h
.text:0000000000003A60
.text:0000000000003A60 loc_3A60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003A60                                         ; DATA XREF: .rodata:jpt_377E↓o
.text:0000000000003A60                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003A65                 mov     ebx, 76h ; 'v'
.text:0000000000003A6A                 jmp     loc_38C4
.text:0000000000003A6A ; ---------------------------------------------------------------------------
.text:0000000000003A6F                 align 10h
.text:0000000000003A70
.text:0000000000003A70 loc_3A70:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003A70                                         ; DATA XREF: .rodata:jpt_377E↓o
.text:0000000000003A70                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003A75                 mov     ebx, 6Eh ; 'n'
.text:0000000000003A7A                 jmp     loc_38B2
.text:0000000000003A7A ; ---------------------------------------------------------------------------
.text:0000000000003A7F                 align 20h
.text:0000000000003A80
.text:0000000000003A80 def_3B0A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003A80                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003A80                                         ; DATA XREF: ...
.text:0000000000003A80                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003A83                 nop     dword ptr [rax+rax+00h]
.text:0000000000003A88
.text:0000000000003A88 def_377E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003A88                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003A88                                         ; DATA XREF: ...
.text:0000000000003A88                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000003A8E                 jnz     loc_3E38
.text:0000000000003A94                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003A99                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000003A9E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003AA3                 call    ___ctype_b_loc
.text:0000000000003AA8                 mov     rcx, [rax]
.text:0000000000003AAB                 movzx   edx, bl
.text:0000000000003AAE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003AB4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003ABA                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000003ABF                 mov     edi, 1
.text:0000000000003AC4                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003AC8                 and     ax, 4000h
.text:0000000000003ACC                 setnz   r12b
.text:0000000000003AD0                 setz    al
.text:0000000000003AD3                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003AD7
.text:0000000000003AD7 loc_3AD7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003AD7                 test    al, al
.text:0000000000003AD9                 jnz     loc_4471
.text:0000000000003ADF                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003AE4                 setz    dl
.text:0000000000003AE7                 jmp     loc_37B8
.text:0000000000003AE7 ; ---------------------------------------------------------------------------
.text:0000000000003AEC                 align 10h
.text:0000000000003AF0
.text:0000000000003AF0 loc_3AF0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000003AF0                 movzx   ebx, byte ptr [r9]
.text:0000000000003AF4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003AF7                 ja      short def_3B0A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003AF9                 lea     rcx, jpt_3B0A
.text:0000000000003B00                 movzx   edx, bl
.text:0000000000003B03                 movsxd  rax, ds:(jpt_3B0A - 9068h)[rcx+rdx*4]
.text:0000000000003B07                 add     rax, rcx
.text:0000000000003B0A                 jmp     rax             ; switch jump
.text:0000000000003B0A ; ---------------------------------------------------------------------------
.text:0000000000003B0C                 align 10h
.text:0000000000003B10
.text:0000000000003B10 loc_3B10:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003B10                                         ; DATA XREF: .rodata:jpt_3B0A↓o
.text:0000000000003B10                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000003B13                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003B18                 jnz     loc_390E
.text:0000000000003B1E                 xchg    ax, ax
.text:0000000000003B20
.text:0000000000003B20 loc_3B20:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003B20                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003B20                 mov     edx, 5Ch ; '\'
.text:0000000000003B25                 mov     ebx, 5Ch ; '\'
.text:0000000000003B2A                 jmp     loc_38C4
.text:0000000000003B2A ; ---------------------------------------------------------------------------
.text:0000000000003B2F                 align 10h
.text:0000000000003B30
.text:0000000000003B30 loc_3B30:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003B30                                         ; DATA XREF: .rodata:jpt_3B0A↓o
.text:0000000000003B30                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003B35                 xor     r10d, r10d
.text:0000000000003B38                 mov     ebx, 66h ; 'f'
.text:0000000000003B3D                 jmp     loc_38C4
.text:0000000000003B3D ; ---------------------------------------------------------------------------
.text:0000000000003B42                 align 8
.text:0000000000003B48
.text:0000000000003B48 loc_3B48:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003B48                                         ; DATA XREF: .rodata:jpt_3B0A↓o
.text:0000000000003B48                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000003B4D                 xor     r10d, r10d
.text:0000000000003B50                 mov     ebx, 6Eh ; 'n'
.text:0000000000003B55                 jmp     loc_38B2
.text:0000000000003B55 ; ---------------------------------------------------------------------------
.text:0000000000003B5A                 align 20h
.text:0000000000003B60
.text:0000000000003B60 loc_3B60:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003B60                                         ; DATA XREF: .rodata:jpt_3B0A↓o
.text:0000000000003B60                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003B65                 jmp     loc_3930
.text:0000000000003B65 ; ---------------------------------------------------------------------------
.text:0000000000003B6A                 align 10h
.text:0000000000003B70
.text:0000000000003B70 loc_3B70:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003B70                                         ; DATA XREF: .rodata:jpt_3B0A↓o
.text:0000000000003B70                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003B73
.text:0000000000003B73 loc_3B73:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003B73                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003B78                 setz    dl
.text:0000000000003B7B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003B80                 jnz     loc_471A
.text:0000000000003B86                 mov     eax, r8d
.text:0000000000003B89                 mov     rcx, r15
.text:0000000000003B8C                 xor     eax, 1
.text:0000000000003B8F                 and     al, dl
.text:0000000000003B91                 jz      short loc_3BC0
.text:0000000000003B93                 cmp     r13, r15
.text:0000000000003B96                 jbe     short loc_3B9D
.text:0000000000003B98                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003B9D
.text:0000000000003B9D loc_3B9D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000003B9D                 lea     rcx, [r15+1]
.text:0000000000003BA1                 cmp     r13, rcx
.text:0000000000003BA4                 jbe     short loc_3BAC
.text:0000000000003BA6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003BAC
.text:0000000000003BAC loc_3BAC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000003BAC                 lea     rcx, [r15+2]
.text:0000000000003BB0                 cmp     r13, rcx
.text:0000000000003BB3                 ja      loc_41E9
.text:0000000000003BB9
.text:0000000000003BB9 loc_3BB9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003BB9                 lea     rcx, [r15+3]
.text:0000000000003BBD                 mov     r8d, eax
.text:0000000000003BC0
.text:0000000000003BC0 loc_3BC0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003BC0                 cmp     r13, rcx
.text:0000000000003BC3                 jbe     short loc_3BCA
.text:0000000000003BC5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000003BCA
.text:0000000000003BCA loc_3BCA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000003BCA                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003BCF                 lea     r15, [rcx+1]
.text:0000000000003BD3                 jz      loc_41D9
.text:0000000000003BD9                 lea     rax, [rbp+1]
.text:0000000000003BDD                 cmp     rax, r11
.text:0000000000003BE0                 jnb     short loc_3BFB
.text:0000000000003BE2                 mov     rax, [rsp+0E8h+s]
.text:0000000000003BE7                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000003BEC                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003BF0                 sub     eax, 30h ; '0'
.text:0000000000003BF3                 cmp     al, 9
.text:0000000000003BF5                 jbe     loc_4429
.text:0000000000003BFB
.text:0000000000003BFB loc_3BFB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000003BFB                 mov     eax, r12d
.text:0000000000003BFE                 mov     ebx, 30h ; '0'
.text:0000000000003C03                 xor     r12d, r12d
.text:0000000000003C06                 jmp     loc_37B8
.text:0000000000003C06 ; ---------------------------------------------------------------------------
.text:0000000000003C0B                 align 10h
.text:0000000000003C10
.text:0000000000003C10 loc_3C10:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C10                                         ; DATA XREF: .rodata:jpt_3B0A↓o
.text:0000000000003C10                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003C15                 mov     r12d, r10d
.text:0000000000003C18                 setz    dl
.text:0000000000003C1B                 xor     r10d, r10d
.text:0000000000003C1E                 xor     eax, eax
.text:0000000000003C20                 jmp     loc_37B8
.text:0000000000003C20 ; ---------------------------------------------------------------------------
.text:0000000000003C25                 align 8
.text:0000000000003C28
.text:0000000000003C28 loc_3C28:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C28                                         ; DATA XREF: .rodata:jpt_3B0A↓o
.text:0000000000003C28                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000003C2D                 setz    dl
.text:0000000000003C30                 xor     r10d, r10d
.text:0000000000003C33                 jmp     loc_39F8
.text:0000000000003C33 ; ---------------------------------------------------------------------------
.text:0000000000003C38                 align 20h
.text:0000000000003C40
.text:0000000000003C40 loc_3C40:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C40                                         ; DATA XREF: .rodata:jpt_3B0A↓o
.text:0000000000003C40                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003C45                 setz    dl
.text:0000000000003C48                 xor     r10d, r10d
.text:0000000000003C4B                 xor     r12d, r12d
.text:0000000000003C4E                 jmp     loc_3A01
.text:0000000000003C4E ; ---------------------------------------------------------------------------
.text:0000000000003C53                 align 8
.text:0000000000003C58
.text:0000000000003C58 loc_3C58:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C58                                         ; DATA XREF: .rodata:jpt_3B0A↓o
.text:0000000000003C58                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000003C5D                 mov     r12d, r10d
.text:0000000000003C60                 mov     ebx, 20h ; ' '
.text:0000000000003C65                 setz    dl
.text:0000000000003C68                 xor     r10d, r10d
.text:0000000000003C6B                 jmp     loc_3A01
.text:0000000000003C70 ; ---------------------------------------------------------------------------
.text:0000000000003C70
.text:0000000000003C70 loc_3C70:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C70                                         ; DATA XREF: .rodata:jpt_3B0A↓o
.text:0000000000003C70                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003C75                 xor     r10d, r10d
.text:0000000000003C78                 mov     ebx, 72h ; 'r'
.text:0000000000003C7D                 jmp     loc_38B2
.text:0000000000003C7D ; ---------------------------------------------------------------------------
.text:0000000000003C82                 align 8
.text:0000000000003C88
.text:0000000000003C88 loc_3C88:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C88                                         ; DATA XREF: .rodata:jpt_3B0A↓o
.text:0000000000003C88                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000003C8D                 jmp     loc_3930
.text:0000000000003C8D ; ---------------------------------------------------------------------------
.text:0000000000003C92                 align 8
.text:0000000000003C98
.text:0000000000003C98 loc_3C98:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C98                                         ; DATA XREF: .rodata:jpt_3B0A↓o
.text:0000000000003C98                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000003C9D                 xor     r10d, r10d
.text:0000000000003CA0                 mov     ebx, 74h ; 't'
.text:0000000000003CA5                 jmp     loc_38B2
.text:0000000000003CA5 ; ---------------------------------------------------------------------------
.text:0000000000003CAA                 align 10h
.text:0000000000003CB0
.text:0000000000003CB0 loc_3CB0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003CB0                                         ; DATA XREF: .rodata:jpt_3B0A↓o
.text:0000000000003CB0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003CB5                 jmp     loc_3930
.text:0000000000003CB5 ; ---------------------------------------------------------------------------
.text:0000000000003CBA                 align 20h
.text:0000000000003CC0
.text:0000000000003CC0 loc_3CC0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003CC0                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003CC0                 xor     r10d, r10d
.text:0000000000003CC3                 jmp     loc_3760
.text:0000000000003CC3 ; ---------------------------------------------------------------------------
.text:0000000000003CC8                 align 10h
.text:0000000000003CD0
.text:0000000000003CD0 loc_3CD0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003CD0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003CD5                 jnz     loc_4640
.text:0000000000003CDB
.text:0000000000003CDB loc_3CDB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000003CDB                 add     rbp, 1
.text:0000000000003CDF                 mov     eax, r8d
.text:0000000000003CE2                 xor     r12d, r12d
.text:0000000000003CE5                 mov     ebx, 5Ch ; '\'
.text:0000000000003CEA                 jmp     loc_37FC
.text:0000000000003CEA ; ---------------------------------------------------------------------------
.text:0000000000003CEF                 align 10h
.text:0000000000003CF0
.text:0000000000003CF0 loc_3CF0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003CF0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003CF5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003CFA                 mov     r12d, r8d
.text:0000000000003CFD                 mov     rbp, r11
.text:0000000000003D00                 setz    dl
.text:0000000000003D03                 mov     eax, ebx
.text:0000000000003D05                 test    r15, r15
.text:0000000000003D08                 setz    cl
.text:0000000000003D0B                 and     eax, edx
.text:0000000000003D0D                 and     al, cl
.text:0000000000003D0F                 jnz     loc_4776
.text:0000000000003D15                 mov     eax, ebx
.text:0000000000003D17                 xor     eax, 1
.text:0000000000003D1A                 and     dl, al
.text:0000000000003D1C                 jz      loc_468C
.text:0000000000003D22                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003D27                 jz      loc_468A
.text:0000000000003D2D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003D32                 jnz     loc_472D
.text:0000000000003D38                 test    r13, r13
.text:0000000000003D3B                 setz    al
.text:0000000000003D3E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003D44                 setnz   dl
.text:0000000000003D47                 and     al, dl
.text:0000000000003D49                 jz      loc_476C
.text:0000000000003D4F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003D54
.text:0000000000003D54 loc_3D54:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003D54                 lea     rbx, asc_8DED   ; "'"
.text:0000000000003D5B                 mov     byte ptr [r14], 27h ; '''
.text:0000000000003D5F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003D67                 mov     r15d, 1
.text:0000000000003D6D                 mov     [rsp+0E8h+n], 1
.text:0000000000003D76                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003D7B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003D80                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003D84                 jmp     loc_3663
.text:0000000000003D84 ; ---------------------------------------------------------------------------
.text:0000000000003D89                 align 10h
.text:0000000000003D90
.text:0000000000003D90 loc_3D90:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003D90                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003D95                 jnz     loc_4640
.text:0000000000003D9B                 test    r13, r13
.text:0000000000003D9E                 jz      loc_41A0
.text:0000000000003DA4                 xor     edx, edx
.text:0000000000003DA6                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003DAC                 jnz     loc_41A0
.text:0000000000003DB2
.text:0000000000003DB2 loc_3DB2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003DB2                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003DB2                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003DB7                 add     r15, 3
.text:0000000000003DBB                 xor     eax, eax
.text:0000000000003DBD                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003DC2                 xor     r8d, r8d
.text:0000000000003DC5                 mov     r13, rdx
.text:0000000000003DC8                 mov     ebx, 27h ; '''
.text:0000000000003DCD                 jmp     loc_37E9
.text:0000000000003DCD ; ---------------------------------------------------------------------------
.text:0000000000003DD2                 align 8
.text:0000000000003DD8
.text:0000000000003DD8 loc_3DD8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003DD8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000003DDD                 jz      short loc_3E00
.text:0000000000003DDF                 lea     rcx, [rbp+2]
.text:0000000000003DE3                 cmp     rcx, r11
.text:0000000000003DE6                 jnb     short loc_3E00
.text:0000000000003DE8                 mov     rax, [rsp+0E8h+s]
.text:0000000000003DED                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000003DF2                 jz      loc_4582
.text:0000000000003DF8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003E00
.text:0000000000003E00 loc_3E00:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003E00                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003E00                 xor     edx, edx
.text:0000000000003E02                 xor     r12d, r12d
.text:0000000000003E05                 xor     eax, eax
.text:0000000000003E07                 mov     ebx, 3Fh ; '?'
.text:0000000000003E0C                 jmp     loc_37B8
.text:0000000000003E0C ; ---------------------------------------------------------------------------
.text:0000000000003E11                 align 8
.text:0000000000003E18
.text:0000000000003E18 loc_3E18:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000003E18                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003E1D                 jnz     loc_4640
.text:0000000000003E23                 xor     r12d, r12d
.text:0000000000003E26                 xor     eax, eax
.text:0000000000003E28                 mov     ebx, 3Fh ; '?'
.text:0000000000003E2D                 jmp     loc_37E9
.text:0000000000003E2D ; ---------------------------------------------------------------------------
.text:0000000000003E32                 align 8
.text:0000000000003E38
.text:0000000000003E38 loc_3E38:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003E38                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003E40                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003E44                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003E50                 mov     [rsp+0E8h+ps], rax
.text:0000000000003E55                 jnz     short loc_3E84
.text:0000000000003E57                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003E5C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003E61                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003E66                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000003E6B                 call    _strlen
.text:0000000000003E70                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003E76                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003E7C                 mov     r11, rax
.text:0000000000003E7F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003E84
.text:0000000000003E84 loc_3E84:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003E84                 lea     rax, [rsp+0E8h+wc]
.text:0000000000003E8C                 xor     ecx, ecx
.text:0000000000003E8E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003E92                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003E97                 mov     rbx, rcx
.text:0000000000003E9A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003EA2                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003EA7                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000003EAC                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003EB4                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003EB9                 mov     [rsp+0E8h+var_78], r13
.text:0000000000003EBE                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003EC3
.text:0000000000003EC3 loc_3EC3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003EC3                 mov     rax, [rsp+0E8h+s]
.text:0000000000003EC8                 lea     r14, [rbp+rbx+0]
.text:0000000000003ECD                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003ED2                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003ED7                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000003EDC                 lea     r13, [rax+r14]
.text:0000000000003EE0                 sub     rdx, r14
.text:0000000000003EE3                 mov     rsi, r13
.text:0000000000003EE6                 call    rpl_mbrtowc
.text:0000000000003EEB                 test    rax, rax
.text:0000000000003EEE                 mov     r15, rax
.text:0000000000003EF1                 jz      short loc_3F41
.text:0000000000003EF3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003EF7                 jz      loc_4515
.text:0000000000003EFD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003F01                 jz      loc_44A1
.text:0000000000003F07                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003F0C                 setz    al
.text:0000000000003F0F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003F13                 jnz     loc_40B0
.text:0000000000003F19
.text:0000000000003F19 loc_3F19:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000003F19                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000003F19                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003F20                 call    _iswprint
.text:0000000000003F25                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000003F2A                 test    eax, eax
.text:0000000000003F2C                 mov     eax, 0
.text:0000000000003F31                 cmovz   r12d, eax
.text:0000000000003F35                 add     rbx, r15
.text:0000000000003F38                 call    _mbsinit
.text:0000000000003F3D                 test    eax, eax
.text:0000000000003F3F                 jz      short loc_3EC3
.text:0000000000003F41
.text:0000000000003F41 loc_3F41:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003F41                 mov     edx, r12d
.text:0000000000003F44                 mov     rdi, rbx
.text:0000000000003F47                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003F4D                 xor     edx, 1
.text:0000000000003F50                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003F55                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003F5B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000003F5F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003F67                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003F6C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003F71                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003F76
.text:0000000000003F76 loc_3F76:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003F76                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003F76                 cmp     rdi, 1
.text:0000000000003F7A                 jbe     loc_457B
.text:0000000000003F80
.text:0000000000003F80 loc_3F80:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003F80                 mov     rcx, rdi
.text:0000000000003F83                 xor     esi, esi
.text:0000000000003F85                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000003F8B                 add     rcx, rbp
.text:0000000000003F8E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003F93                 jmp     loc_404E
.text:0000000000003F93 ; ---------------------------------------------------------------------------
.text:0000000000003F98                 align 20h
.text:0000000000003FA0
.text:0000000000003FA0 loc_3FA0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003FA0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003FA5                 setz    al
.text:0000000000003FA8                 test    r9b, r9b
.text:0000000000003FAB                 jnz     loc_4460
.text:0000000000003FB1                 mov     esi, r8d
.text:0000000000003FB4                 xor     esi, 1
.text:0000000000003FB7                 and     al, sil
.text:0000000000003FBA                 jz      short loc_3FEB
.text:0000000000003FBC                 cmp     r13, r15
.text:0000000000003FBF                 jbe     short loc_3FC6
.text:0000000000003FC1                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003FC6
.text:0000000000003FC6 loc_3FC6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003FC6                 lea     rsi, [r15+1]
.text:0000000000003FCA                 cmp     r13, rsi
.text:0000000000003FCD                 jbe     short loc_3FD5
.text:0000000000003FCF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003FD5
.text:0000000000003FD5 loc_3FD5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003FD5                 lea     rsi, [r15+2]
.text:0000000000003FD9                 cmp     r13, rsi
.text:0000000000003FDC                 jbe     short loc_3FE4
.text:0000000000003FDE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003FE4
.text:0000000000003FE4 loc_3FE4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000003FE4                 add     r15, 3
.text:0000000000003FE8                 mov     r8d, eax
.text:0000000000003FEB
.text:0000000000003FEB loc_3FEB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000003FEB                 cmp     r13, r15
.text:0000000000003FEE                 jbe     short loc_3FF5
.text:0000000000003FF0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003FF5
.text:0000000000003FF5 loc_3FF5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000003FF5                 lea     rax, [r15+1]
.text:0000000000003FF9                 cmp     r13, rax
.text:0000000000003FFC                 jbe     short loc_400B
.text:0000000000003FFE                 mov     eax, ebx
.text:0000000000004000                 shr     al, 6
.text:0000000000004003                 add     eax, 30h ; '0'
.text:0000000000004006                 mov     [r14+r15+1], al
.text:000000000000400B
.text:000000000000400B loc_400B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000400B                 lea     rax, [r15+2]
.text:000000000000400F                 cmp     r13, rax
.text:0000000000004012                 jbe     short loc_4024
.text:0000000000004014                 mov     eax, ebx
.text:0000000000004016                 shr     al, 3
.text:0000000000004019                 and     eax, 7
.text:000000000000401C                 add     eax, 30h ; '0'
.text:000000000000401F                 mov     [r14+r15+2], al
.text:0000000000004024
.text:0000000000004024 loc_4024:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000004024                 and     ebx, 7
.text:0000000000004027                 add     rbp, 1
.text:000000000000402B                 add     r15, 3
.text:000000000000402F                 add     ebx, 30h ; '0'
.text:0000000000004032                 cmp     rbp, rcx
.text:0000000000004035                 jnb     loc_3820
.text:000000000000403B                 mov     esi, edx
.text:000000000000403D
.text:000000000000403D loc_403D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000403D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000403D                 cmp     r13, r15
.text:0000000000004040                 jbe     short loc_4046
.text:0000000000004042                 mov     [r14+r15], bl
.text:0000000000004046
.text:0000000000004046 loc_4046:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000004046                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000404A                 add     r15, 1
.text:000000000000404E
.text:000000000000404E loc_404E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000404E                 test    dl, dl
.text:0000000000004050                 jnz     loc_3FA0
.text:0000000000004056                 mov     eax, esi
.text:0000000000004058                 xor     eax, 1
.text:000000000000405B                 and     eax, r8d
.text:000000000000405E                 test    r10b, r10b
.text:0000000000004061                 jz      short loc_4071
.text:0000000000004063                 cmp     r13, r15
.text:0000000000004066                 jbe     short loc_406D
.text:0000000000004068                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000406D
.text:000000000000406D loc_406D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000406D                 add     r15, 1
.text:0000000000004071
.text:0000000000004071 loc_4071:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000004071                 add     rbp, 1
.text:0000000000004075                 cmp     rbp, rcx
.text:0000000000004078                 jnb     loc_37FC
.text:000000000000407E                 test    al, al
.text:0000000000004080                 jz      loc_447E
.text:0000000000004086                 cmp     r13, r15
.text:0000000000004089                 jbe     short loc_4090
.text:000000000000408B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004090
.text:0000000000004090 loc_4090:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000004090                 lea     rax, [r15+1]
.text:0000000000004094                 cmp     r13, rax
.text:0000000000004097                 jbe     short loc_409F
.text:0000000000004099                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000409F
.text:000000000000409F loc_409F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000409F                 add     r15, 2
.text:00000000000040A3                 xor     r10d, r10d
.text:00000000000040A6                 xor     r8d, r8d
.text:00000000000040A9                 jmp     short loc_403D
.text:00000000000040A9 ; ---------------------------------------------------------------------------
.text:00000000000040AB                 align 10h
.text:00000000000040B0
.text:00000000000040B0 loc_40B0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:00000000000040B0                 cmp     r15, 1
.text:00000000000040B4                 jz      loc_3F19
.text:00000000000040BA                 mov     rdi, [rsp+0E8h+s]
.text:00000000000040BF                 lea     rcx, [rdi+r15]
.text:00000000000040C3                 lea     rdx, [rdi+r14+1]
.text:00000000000040C8                 lea     r8, [rcx+r14]
.text:00000000000040CC                 jmp     short loc_40DD
.text:00000000000040CC ; ---------------------------------------------------------------------------
.text:00000000000040CE                 align 10h
.text:00000000000040D0
.text:00000000000040D0 loc_40D0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:00000000000040D0                                         ; quotearg_buffer_restyled+B70↓j
.text:00000000000040D0                 add     rdx, 1
.text:00000000000040D4                 cmp     r8, rdx
.text:00000000000040D7                 jz      loc_3F19
.text:00000000000040DD
.text:00000000000040DD loc_40DD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:00000000000040DD                 movzx   ecx, byte ptr [rdx]
.text:00000000000040E0                 sub     ecx, 5Bh ; '['
.text:00000000000040E3                 cmp     cl, 21h ; '!'
.text:00000000000040E6                 ja      short loc_40D0
.text:00000000000040E8                 mov     esi, 1
.text:00000000000040ED                 shl     rsi, cl
.text:00000000000040F0                 mov     rcx, rsi
.text:00000000000040F3                 mov     rsi, 20000002Bh
.text:00000000000040FD                 test    rcx, rsi
.text:0000000000004100                 jz      short loc_40D0
.text:0000000000004102                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004107                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000410C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000004111                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004119
.text:0000000000004119 loc_4119:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000004119                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000004119                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000411E                 jz      short loc_4130
.text:0000000000004120                 test    al, al
.text:0000000000004122                 mov     eax, 4
.text:0000000000004127                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000412C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000004130
.text:0000000000004130 loc_4130:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000004130                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000004130                 sub     rsp, 8
.text:0000000000004134                 mov     rcx, rbp
.text:0000000000004137                 mov     rsi, r13
.text:000000000000413A                 push    [rsp+0F0h+var_88]
.text:000000000000413E                 push    [rsp+0F8h+var_80]
.text:0000000000004142                 mov     rdi, r14
.text:0000000000004145                 push    0
.text:0000000000004147                 mov     r9d, [rsp+108h+var_70]
.text:000000000000414F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000004154                 mov     rdx, [rsp+108h+s]
.text:0000000000004159                 and     r9d, 0FFFFFFFDh
.text:000000000000415D                 call    quotearg_buffer_restyled
.text:0000000000004162                 add     rsp, 20h
.text:0000000000004166                 mov     r15, rax
.text:0000000000004169
.text:0000000000004169 loc_4169:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000004169                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000004169                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000004171                 xor     rbx, fs:28h
.text:000000000000417A                 mov     rax, r15
.text:000000000000417D                 jnz     loc_4783
.text:0000000000004183                 add     rsp, 0B8h
.text:000000000000418A                 pop     rbx
.text:000000000000418B                 pop     rbp
.text:000000000000418C                 pop     r12
.text:000000000000418E                 pop     r13
.text:0000000000004190                 pop     r14
.text:0000000000004192                 pop     r15
.text:0000000000004194                 retn
.text:0000000000004194 ; ---------------------------------------------------------------------------
.text:0000000000004195                 align 8
.text:0000000000004198
.text:0000000000004198 loc_4198:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000004198                 mov     rbp, r11
.text:000000000000419B                 jmp     loc_4119
.text:00000000000041A0 ; ---------------------------------------------------------------------------
.text:00000000000041A0
.text:00000000000041A0 loc_41A0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:00000000000041A0                                         ; quotearg_buffer_restyled+81C↑j
.text:00000000000041A0                 cmp     r13, r15
.text:00000000000041A3                 jbe     short loc_41AA
.text:00000000000041A5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000041AA
.text:00000000000041AA loc_41AA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:00000000000041AA                 lea     rax, [r15+1]
.text:00000000000041AE                 cmp     r13, rax
.text:00000000000041B1                 jbe     short loc_41B9
.text:00000000000041B3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:00000000000041B9
.text:00000000000041B9 loc_41B9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:00000000000041B9                 lea     rax, [r15+2]
.text:00000000000041BD                 cmp     r13, rax
.text:00000000000041C0                 jbe     loc_47B2
.text:00000000000041C6                 mov     rdx, r13
.text:00000000000041C9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000041CF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000041D4                 jmp     loc_3DB2
.text:00000000000041D9 ; ---------------------------------------------------------------------------
.text:00000000000041D9
.text:00000000000041D9 loc_41D9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:00000000000041D9                 mov     eax, r12d
.text:00000000000041DC                 mov     ebx, 30h ; '0'
.text:00000000000041E1                 xor     r12d, r12d
.text:00000000000041E4                 jmp     loc_37E9
.text:00000000000041E9 ; ---------------------------------------------------------------------------
.text:00000000000041E9
.text:00000000000041E9 loc_41E9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:00000000000041E9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000041EF                 jmp     loc_3BB9
.text:00000000000041F4 ; ---------------------------------------------------------------------------
.text:00000000000041F4
.text:00000000000041F4 loc_41F4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000041F4                                         ; DATA XREF: .rodata:jpt_3621↓o
.text:00000000000041F4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:00000000000041F6                 jnz     loc_3623        ; jumptable 00000000000121F1 case 1
.text:00000000000041FC                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004201
.text:0000000000004201 loc_4201:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000004201                 test    r13, r13
.text:0000000000004204                 jnz     loc_479A
.text:000000000000420A                 lea     rax, asc_8DED   ; "'"
.text:0000000000004211                 mov     [rsp+0E8h+var_98], 0
.text:000000000000421A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000421F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004224                 xor     r12d, r12d
.text:0000000000004227                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000422C                 mov     [rsp+0E8h+n], 1
.text:0000000000004235                 mov     [rsp+0E8h+s2], rax
.text:000000000000423A                 mov     r15d, 1
.text:0000000000004240                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004248                 jmp     loc_3663
.text:0000000000004248 ; ---------------------------------------------------------------------------
.text:000000000000424D                 align 10h
.text:0000000000004250
.text:0000000000004250 loc_4250:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004250                                         ; DATA XREF: .rodata:jpt_3621↓o
.text:0000000000004250                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000004252                 jnz     loc_464D
.text:0000000000004258                 test    r13, r13
.text:000000000000425B                 jz      loc_4486
.text:0000000000004261                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000004265                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000426A                 xor     r12d, r12d
.text:000000000000426D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004272                 mov     [rsp+0E8h+var_98], 0
.text:000000000000427B
.text:000000000000427B loc_427B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000427B                 lea     rax, unk_8DEB
.text:0000000000004282                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004287                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000428C                 mov     [rsp+0E8h+n], 1
.text:0000000000004295                 mov     r15d, 1
.text:000000000000429B                 mov     [rsp+0E8h+s2], rax
.text:00000000000042A0                 jmp     loc_3663
.text:00000000000042A5 ; ---------------------------------------------------------------------------
.text:00000000000042A5
.text:00000000000042A5 loc_42A5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000042A5                                         ; DATA XREF: .rodata:jpt_3621↓o
.text:00000000000042A5                 lea     rax, unk_8DEB   ; jumptable 00000000000121F1 case 6
.text:00000000000042AC                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000042B1                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000042B6                 xor     r12d, r12d
.text:00000000000042B9                 mov     [rsp+0E8h+var_98], 0
.text:00000000000042C2                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000042C7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000042CC                 mov     [rsp+0E8h+n], 1
.text:00000000000042D5                 xor     r15d, r15d
.text:00000000000042D8                 mov     [rsp+0E8h+s2], rax
.text:00000000000042DD                 mov     [rsp+0E8h+var_E0], 5
.text:00000000000042E5                 jmp     loc_3663
.text:00000000000042EA ; ---------------------------------------------------------------------------
.text:00000000000042EA
.text:00000000000042EA loc_42EA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000042EA                                         ; DATA XREF: .rodata:jpt_3621↓o
.text:00000000000042EA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:00000000000042EF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000042F4                 xor     r12d, r12d
.text:00000000000042F7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004300                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004305                 xor     r15d, r15d
.text:0000000000004308                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000430D                 mov     [rsp+0E8h+n], 0
.text:0000000000004316                 mov     [rsp+0E8h+s2], 0
.text:000000000000431F                 jmp     loc_3663
.text:0000000000004324 ; ---------------------------------------------------------------------------
.text:0000000000004324
.text:0000000000004324 loc_4324:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004324                                         ; DATA XREF: .rodata:jpt_3621↓o
.text:0000000000004324                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000004329                 jz      short loc_4381
.text:000000000000432B                 lea     rsi, asc_8DEF   ; "`"
.text:0000000000004332                 xor     edi, edi        ; domainname
.text:0000000000004334                 mov     edx, 5          ; category
.text:0000000000004339                 call    _dcgettext
.text:000000000000433E                 mov     rcx, rax
.text:0000000000004341                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004346                 lea     rax, asc_8DEF   ; "`"
.text:000000000000434D                 cmp     rcx, rax
.text:0000000000004350                 jz      loc_46EE
.text:0000000000004356
.text:0000000000004356 loc_4356:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000004356                 lea     rsi, asc_8DED   ; "'"
.text:000000000000435D                 xor     edi, edi        ; domainname
.text:000000000000435F                 mov     edx, 5          ; category
.text:0000000000004364                 call    _dcgettext
.text:0000000000004369                 mov     rcx, rax
.text:000000000000436C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004371                 lea     rax, asc_8DED   ; "'"
.text:0000000000004378                 cmp     rcx, rax
.text:000000000000437B                 jz      loc_4704
.text:0000000000004381
.text:0000000000004381 loc_4381:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000004381                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000004381                 xor     r15d, r15d
.text:0000000000004384                 test    ebx, ebx
.text:0000000000004386                 jz      loc_454D
.text:000000000000438C
.text:000000000000438C loc_438C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000438C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000438C                 test    ebx, ebx
.text:000000000000438E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000004393                 setnz   [rsp+0E8h+var_D9]
.text:0000000000004398                 xor     r12d, r12d
.text:000000000000439B                 mov     rdi, rbx        ; s
.text:000000000000439E                 call    _strlen
.text:00000000000043A3                 mov     [rsp+0E8h+s2], rbx
.text:00000000000043A8                 mov     [rsp+0E8h+n], rax
.text:00000000000043AD                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000043B2                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000043B7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000043C0                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000043C5                 jmp     loc_3663
.text:00000000000043CA ; ---------------------------------------------------------------------------
.text:00000000000043CA
.text:00000000000043CA loc_43CA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000043CA                                         ; DATA XREF: .rodata:jpt_3621↓o
.text:00000000000043CA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:00000000000043CF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000043D4                 xor     r12d, r12d
.text:00000000000043D7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000043E0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000043E5                 xor     r15d, r15d
.text:00000000000043E8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000043ED                 mov     [rsp+0E8h+n], 0
.text:00000000000043F6                 mov     [rsp+0E8h+s2], 0
.text:00000000000043FF                 jmp     loc_3663
.text:0000000000004404 ; ---------------------------------------------------------------------------
.text:0000000000004404
.text:0000000000004404 loc_4404:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004404                                         ; DATA XREF: .rodata:jpt_3621↓o
.text:0000000000004404                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000004409                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000440E                 xor     r12d, r12d
.text:0000000000004411                 mov     [rsp+0E8h+var_98], 0
.text:000000000000441A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000441F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004424                 jmp     loc_3643
.text:0000000000004429 ; ---------------------------------------------------------------------------
.text:0000000000004429
.text:0000000000004429 loc_4429:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000004429                 cmp     r13, r15
.text:000000000000442C                 jbe     short loc_4433
.text:000000000000442E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000004433
.text:0000000000004433 loc_4433:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000004433                 lea     rax, [rcx+2]
.text:0000000000004437                 cmp     r13, rax
.text:000000000000443A                 jbe     short loc_4442
.text:000000000000443C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000004442
.text:0000000000004442 loc_4442:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000004442                 mov     eax, r12d
.text:0000000000004445                 lea     r15, [rcx+3]
.text:0000000000004449                 xor     r12d, r12d
.text:000000000000444C                 mov     ebx, 30h ; '0'
.text:0000000000004451                 jmp     loc_37B8
.text:0000000000004451 ; ---------------------------------------------------------------------------
.text:0000000000004456                 align 20h
.text:0000000000004460
.text:0000000000004460 loc_4460:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000004460                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004465                 mov     rbp, r11
.text:0000000000004468                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000446C                 jmp     loc_4119
.text:0000000000004471 ; ---------------------------------------------------------------------------
.text:0000000000004471
.text:0000000000004471 loc_4471:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000004471                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004476                 xor     r12d, r12d
.text:0000000000004479                 jmp     loc_3F80
.text:000000000000447E ; ---------------------------------------------------------------------------
.text:000000000000447E
.text:000000000000447E loc_447E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000447E                 xor     r10d, r10d
.text:0000000000004481                 jmp     loc_403D
.text:0000000000004486 ; ---------------------------------------------------------------------------
.text:0000000000004486
.text:0000000000004486 loc_4486:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000004486                 mov     [rsp+0E8h+var_98], 0
.text:000000000000448F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004494                 xor     r12d, r12d
.text:0000000000004497                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000449C                 jmp     loc_427B
.text:00000000000044A1 ; ---------------------------------------------------------------------------
.text:00000000000044A1
.text:00000000000044A1 loc_44A1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000044A1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000044A6                 mov     rsi, r14
.text:00000000000044A9                 mov     rcx, r13
.text:00000000000044AC                 mov     rax, rbx
.text:00000000000044AF                 mov     rdi, rbx
.text:00000000000044B2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000044B8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000044BD                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000044C5                 cmp     rsi, r11
.text:00000000000044C8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000044CE                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000044D6                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000044DB                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000044E0                 jnb     short loc_4508
.text:00000000000044E2                 cmp     byte ptr [rcx], 0
.text:00000000000044E5                 jnz     short loc_44F7
.text:00000000000044E7                 jmp     short loc_4508
.text:00000000000044E7 ; ---------------------------------------------------------------------------
.text:00000000000044E9                 align 10h
.text:00000000000044F0
.text:00000000000044F0 loc_44F0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:00000000000044F0                 cmp     byte ptr [r9+rax], 0
.text:00000000000044F5                 jz      short loc_4505
.text:00000000000044F7
.text:00000000000044F7 loc_44F7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:00000000000044F7                 add     rax, 1
.text:00000000000044FB                 lea     rdx, [rbp+rax+0]
.text:0000000000004500                 cmp     r11, rdx
.text:0000000000004503                 ja      short loc_44F0
.text:0000000000004505
.text:0000000000004505 loc_4505:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000004505                 mov     rdi, rax
.text:0000000000004508
.text:0000000000004508 loc_4508:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000004508                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000004508                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000450D                 xor     r12d, r12d
.text:0000000000004510                 jmp     loc_3F76
.text:0000000000004515 ; ---------------------------------------------------------------------------
.text:0000000000004515
.text:0000000000004515 loc_4515:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000004515                 mov     rdi, rbx
.text:0000000000004518                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000451E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004523                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004529                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004531                 xor     r12d, r12d
.text:0000000000004534                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004539                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000453E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004543                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004548                 jmp     loc_3F76
.text:000000000000454D ; ---------------------------------------------------------------------------
.text:000000000000454D
.text:000000000000454D loc_454D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000454D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000004552                 movzx   eax, byte ptr [rdx]
.text:0000000000004555                 test    al, al
.text:0000000000004557                 jz      loc_438C
.text:000000000000455D                 nop     dword ptr [rax]
.text:0000000000004560
.text:0000000000004560 loc_4560:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000004560                 cmp     r13, r15
.text:0000000000004563                 jbe     short loc_4569
.text:0000000000004565                 mov     [r14+r15], al
.text:0000000000004569
.text:0000000000004569 loc_4569:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000004569                 add     r15, 1
.text:000000000000456D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000004572                 test    al, al
.text:0000000000004574                 jnz     short loc_4560
.text:0000000000004576                 jmp     loc_438C
.text:000000000000457B ; ---------------------------------------------------------------------------
.text:000000000000457B
.text:000000000000457B loc_457B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000457B                 mov     eax, edx
.text:000000000000457D                 jmp     loc_3AD7
.text:0000000000004582 ; ---------------------------------------------------------------------------
.text:0000000000004582
.text:0000000000004582 loc_4582:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000004582                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000004586                 cmp     bl, 3Eh ; '>'
.text:0000000000004589                 ja      loc_3E00
.text:000000000000458F                 mov     rax, 7000A38200000000h
.text:0000000000004599                 bt      rax, rbx
.text:000000000000459D                 jnb     loc_3E00
.text:00000000000045A3                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000045A8                 jnz     loc_4792
.text:00000000000045AE                 cmp     r13, r15
.text:00000000000045B1                 jbe     short loc_45B8
.text:00000000000045B3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:00000000000045B8
.text:00000000000045B8 loc_45B8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:00000000000045B8                 lea     rax, [r15+1]
.text:00000000000045BC                 cmp     r13, rax
.text:00000000000045BF                 jbe     short loc_45C7
.text:00000000000045C1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:00000000000045C7
.text:00000000000045C7 loc_45C7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:00000000000045C7                 lea     rax, [r15+2]
.text:00000000000045CB                 cmp     r13, rax
.text:00000000000045CE                 jbe     short loc_45D6
.text:00000000000045D0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:00000000000045D6
.text:00000000000045D6 loc_45D6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:00000000000045D6                 lea     rax, [r15+3]
.text:00000000000045DA                 cmp     r13, rax
.text:00000000000045DD                 jbe     short loc_45E5
.text:00000000000045DF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:00000000000045E5
.text:00000000000045E5 loc_45E5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:00000000000045E5                 add     r15, 4
.text:00000000000045E9                 xor     edx, edx
.text:00000000000045EB                 xor     r12d, r12d
.text:00000000000045EE                 xor     eax, eax
.text:00000000000045F0                 mov     rbp, rcx
.text:00000000000045F3                 jmp     loc_37B8
.text:00000000000045F8 ; ---------------------------------------------------------------------------
.text:00000000000045F8
.text:00000000000045F8 loc_45F8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000045F8                                         ; DATA XREF: .rodata:jpt_3621↓o
.text:00000000000045F8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:00000000000045FA                 jz      loc_4788
.text:0000000000004600                 lea     rax, asc_8DED   ; "'"
.text:0000000000004607                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000460C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004611                 xor     r12d, r12d
.text:0000000000004614                 mov     [rsp+0E8h+var_98], 0
.text:000000000000461D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004622                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004627                 mov     [rsp+0E8h+n], 1
.text:0000000000004630                 xor     r15d, r15d
.text:0000000000004633                 mov     [rsp+0E8h+s2], rax
.text:0000000000004638                 jmp     loc_3663
.text:0000000000004638 ; ---------------------------------------------------------------------------
.text:000000000000463D                 align 20h
.text:0000000000004640
.text:0000000000004640 loc_4640:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000004640                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000004640                 mov     rbp, r11
.text:0000000000004643                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004648                 jmp     loc_4119
.text:000000000000464D ; ---------------------------------------------------------------------------
.text:000000000000464D
.text:000000000000464D loc_464D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000464D                 lea     rax, unk_8DEB
.text:0000000000004654                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004659                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000465E                 xor     r12d, r12d
.text:0000000000004661                 mov     [rsp+0E8h+var_98], 0
.text:000000000000466A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000466F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004674                 mov     [rsp+0E8h+n], 1
.text:000000000000467D                 xor     r15d, r15d
.text:0000000000004680                 mov     [rsp+0E8h+s2], rax
.text:0000000000004685                 jmp     loc_3663
.text:000000000000468A ; ---------------------------------------------------------------------------
.text:000000000000468A
.text:000000000000468A loc_468A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000468A                 mov     eax, edx
.text:000000000000468C
.text:000000000000468C loc_468C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000468C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000468C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000004691                 test    rbx, rbx
.text:0000000000004694                 jz      short loc_46C2
.text:0000000000004696                 test    al, al
.text:0000000000004698                 jz      short loc_46C2
.text:000000000000469A                 movzx   ecx, byte ptr [rbx]
.text:000000000000469D                 mov     rax, rbx
.text:00000000000046A0                 test    cl, cl
.text:00000000000046A2                 jz      short loc_46C2
.text:00000000000046A4                 mov     rdx, r15
.text:00000000000046A7                 sub     rax, r15
.text:00000000000046AA
.text:00000000000046AA loc_46AA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:00000000000046AA                 cmp     r13, rdx
.text:00000000000046AD                 jbe     short loc_46B3
.text:00000000000046AF                 mov     [r14+rdx], cl
.text:00000000000046B3
.text:00000000000046B3 loc_46B3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:00000000000046B3                 add     rdx, 1
.text:00000000000046B7                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000046BB                 test    cl, cl
.text:00000000000046BD                 jnz     short loc_46AA
.text:00000000000046BF                 mov     r15, rdx
.text:00000000000046C2
.text:00000000000046C2 loc_46C2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000046C2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000046C2                 cmp     r13, r15
.text:00000000000046C5                 jbe     loc_4169
.text:00000000000046CB                 mov     byte ptr [r14+r15], 0
.text:00000000000046D0                 jmp     loc_4169
.text:00000000000046D5 ; ---------------------------------------------------------------------------
.text:00000000000046D5
.text:00000000000046D5 loc_46D5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:00000000000046D5                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000046DA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000046DF                 mov     rbp, r11
.text:00000000000046E2                 setz    al
.text:00000000000046E5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000046E9                 jmp     loc_4119
.text:00000000000046EE ; ---------------------------------------------------------------------------
.text:00000000000046EE
.text:00000000000046EE loc_46EE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000046EE                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000046F2                 mov     rdi, rcx
.text:00000000000046F5                 call    gettext_quote
.text:00000000000046FA                 mov     [rsp+0E8h+var_80], rax
.text:00000000000046FF                 jmp     loc_4356
.text:0000000000004704 ; ---------------------------------------------------------------------------
.text:0000000000004704
.text:0000000000004704 loc_4704:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004704                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004708                 mov     rdi, rcx
.text:000000000000470B                 call    gettext_quote
.text:0000000000004710                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004715                 jmp     loc_4381
.text:000000000000471A ; ---------------------------------------------------------------------------
.text:000000000000471A
.text:000000000000471A loc_471A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000471A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000471F                 mov     rbp, r11
.text:0000000000004722                 mov     eax, edx
.text:0000000000004724                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004728                 jmp     loc_4119
.text:000000000000472D ; ---------------------------------------------------------------------------
.text:000000000000472D
.text:000000000000472D loc_472D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000472D                 sub     rsp, 8
.text:0000000000004731                 mov     r8d, 5
.text:0000000000004737                 mov     rcx, r11
.text:000000000000473A                 push    [rsp+0F0h+var_88]
.text:000000000000473E                 push    [rsp+0F8h+var_80]
.text:0000000000004742                 mov     rdi, r14
.text:0000000000004745                 push    [rsp+100h+var_C8]
.text:0000000000004749                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004751                 mov     rdx, [rsp+108h+s]
.text:0000000000004756                 mov     rsi, [rsp+108h+var_98]
.text:000000000000475B                 call    quotearg_buffer_restyled
.text:0000000000004760                 add     rsp, 20h
.text:0000000000004764                 mov     r15, rax
.text:0000000000004767                 jmp     loc_4169
.text:000000000000476C ; ---------------------------------------------------------------------------
.text:000000000000476C
.text:000000000000476C loc_476C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000476C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000004771                 jmp     loc_468C
.text:0000000000004776 ; ---------------------------------------------------------------------------
.text:0000000000004776
.text:0000000000004776 loc_4776:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000004776                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000477E                 jmp     loc_4119
.text:0000000000004783 ; ---------------------------------------------------------------------------
.text:0000000000004783
.text:0000000000004783 loc_4783:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000004783                 call    ___stack_chk_fail
.text:0000000000004788 ; ---------------------------------------------------------------------------
.text:0000000000004788
.text:0000000000004788 loc_4788:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000004788                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000478D                 jmp     loc_4201
.text:0000000000004792 ; ---------------------------------------------------------------------------
.text:0000000000004792
.text:0000000000004792 loc_4792:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000004792                 mov     rbp, r11
.text:0000000000004795                 jmp     loc_4130
.text:000000000000479A ; ---------------------------------------------------------------------------
.text:000000000000479A
.text:000000000000479A loc_479A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000479A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000479F                 xor     eax, eax
.text:00000000000047A1                 xor     r12d, r12d
.text:00000000000047A4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000047AD                 jmp     loc_3D54
.text:00000000000047B2 ; ---------------------------------------------------------------------------
.text:00000000000047B2
.text:00000000000047B2 loc_47B2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000047B2                 mov     rdx, r13
.text:00000000000047B5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000047BA                 jmp     loc_3DB2
.text:00000000000047BF ; ---------------------------------------------------------------------------
.text:00000000000047BF
.text:00000000000047BF def_3621:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000047BF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000047BF ; } // starts at 3590
.text:00000000000047BF quotearg_buffer_restyled endp
.text:00000000000047BF
.text:00000000000047BF ; ---------------------------------------------------------------------------
.text:00000000000047C4                 align 10h
.text:00000000000047D0
.text:00000000000047D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047D0
.text:00000000000047D0
.text:00000000000047D0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:00000000000047D0                                         ; quotearg_n_mem+7↓j ...
.text:00000000000047D0
.text:00000000000047D0 var_50          = qword ptr -50h
.text:00000000000047D0 var_48          = qword ptr -48h
.text:00000000000047D0 var_40          = dword ptr -40h
.text:00000000000047D0 var_3C          = dword ptr -3Ch
.text:00000000000047D0
.text:00000000000047D0 ; __unwind {
.text:00000000000047D0                 push    r15
.text:00000000000047D2                 push    r14
.text:00000000000047D4                 movsxd  r15, edi
.text:00000000000047D7                 push    r13
.text:00000000000047D9                 push    r12
.text:00000000000047DB                 mov     r14, rdx
.text:00000000000047DE                 push    rbp
.text:00000000000047DF                 push    rbx
.text:00000000000047E0                 mov     rbp, rcx
.text:00000000000047E3                 sub     rsp, 28h
.text:00000000000047E7                 mov     [rsp+58h+var_50], rsi
.text:00000000000047EC                 call    ___errno_location
.text:00000000000047F1                 mov     r13, rax
.text:00000000000047F4                 mov     eax, [rax]
.text:00000000000047F6                 test    r15d, r15d
.text:00000000000047F9                 mov     rbx, cs:slotvec
.text:0000000000004800                 mov     [rsp+58h+var_40], eax
.text:0000000000004804                 js      loc_4971
.text:000000000000480A                 cmp     cs:nslots, r15d
.text:0000000000004811                 jg      short loc_4875
.text:0000000000004813                 cmp     r15d, 7FFFFFFFh
.text:000000000000481A                 jz      loc_4976
.text:0000000000004820                 lea     r12d, [r15+1]
.text:0000000000004824                 lea     rax, slotvec0
.text:000000000000482B                 movsxd  rsi, r12d
.text:000000000000482E                 shl     rsi, 4
.text:0000000000004832                 cmp     rbx, rax
.text:0000000000004835                 jz      loc_4950
.text:000000000000483B                 mov     rdi, rbx
.text:000000000000483E                 call    xrealloc
.text:0000000000004843                 mov     rbx, rax
.text:0000000000004846                 mov     cs:slotvec, rax
.text:000000000000484D
.text:000000000000484D loc_484D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000484D                 movsxd  rdi, cs:nslots
.text:0000000000004854                 mov     edx, r12d
.text:0000000000004857                 xor     esi, esi        ; c
.text:0000000000004859                 sub     edx, edi
.text:000000000000485B                 shl     rdi, 4
.text:000000000000485F                 movsxd  rdx, edx
.text:0000000000004862                 add     rdi, rbx        ; s
.text:0000000000004865                 shl     rdx, 4          ; n
.text:0000000000004869                 call    _memset
.text:000000000000486E                 mov     cs:nslots, r12d
.text:0000000000004875
.text:0000000000004875 loc_4875:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000004875                 mov     eax, [rbp+4]
.text:0000000000004878                 shl     r15, 4
.text:000000000000487C                 sub     rsp, 8
.text:0000000000004880                 add     rbx, r15
.text:0000000000004883                 lea     r15, [rbp+8]
.text:0000000000004887                 mov     r8d, [rbp+0]
.text:000000000000488B                 mov     r11, [rbx]
.text:000000000000488E                 mov     r12, [rbx+8]
.text:0000000000004892                 mov     rcx, r14
.text:0000000000004895                 or      eax, 1
.text:0000000000004898                 mov     [rsp+60h+var_3C], eax
.text:000000000000489C                 push    qword ptr [rbp+30h]
.text:000000000000489F                 mov     r9d, eax
.text:00000000000048A2                 push    qword ptr [rbp+28h]
.text:00000000000048A5                 push    r15
.text:00000000000048A7                 mov     rsi, r11
.text:00000000000048AA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000048AF                 mov     rdi, r12
.text:00000000000048B2                 mov     [rsp+78h+var_48], r11
.text:00000000000048B7                 call    quotearg_buffer_restyled
.text:00000000000048BC                 add     rsp, 20h
.text:00000000000048C0                 mov     r11, [rsp+58h+var_48]
.text:00000000000048C5                 cmp     r11, rax
.text:00000000000048C8                 ja      short loc_4931
.text:00000000000048CA                 lea     rsi, [rax+1]
.text:00000000000048CE                 lea     rax, slot0
.text:00000000000048D5                 cmp     r12, rax
.text:00000000000048D8                 mov     [rbx], rsi
.text:00000000000048DB                 jz      short loc_48EF
.text:00000000000048DD                 mov     rdi, r12        ; ptr
.text:00000000000048E0                 mov     [rsp+58h+var_48], rsi
.text:00000000000048E5                 call    _free
.text:00000000000048EA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000048EF
.text:00000000000048EF loc_48EF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000048EF                 mov     rdi, rsi
.text:00000000000048F2                 mov     [rsp+58h+var_48], rsi
.text:00000000000048F7                 call    xmalloc
.text:00000000000048FC                 sub     rsp, 8
.text:0000000000004900                 mov     [rbx+8], rax
.text:0000000000004904                 mov     r8d, [rbp+0]
.text:0000000000004908                 push    qword ptr [rbp+30h]
.text:000000000000490B                 push    qword ptr [rbp+28h]
.text:000000000000490E                 mov     rcx, r14
.text:0000000000004911                 push    r15
.text:0000000000004913                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004918                 mov     rdi, rax
.text:000000000000491B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004920                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004925                 mov     r12, rax
.text:0000000000004928                 call    quotearg_buffer_restyled
.text:000000000000492D                 add     rsp, 20h
.text:0000000000004931
.text:0000000000004931 loc_4931:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004931                 mov     eax, [rsp+58h+var_40]
.text:0000000000004935                 mov     [r13+0], eax
.text:0000000000004939                 add     rsp, 28h
.text:000000000000493D                 mov     rax, r12
.text:0000000000004940                 pop     rbx
.text:0000000000004941                 pop     rbp
.text:0000000000004942                 pop     r12
.text:0000000000004944                 pop     r13
.text:0000000000004946                 pop     r14
.text:0000000000004948                 pop     r15
.text:000000000000494A                 retn
.text:000000000000494A ; ---------------------------------------------------------------------------
.text:000000000000494B                 align 10h
.text:0000000000004950
.text:0000000000004950 loc_4950:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000004950                 xor     edi, edi
.text:0000000000004952                 call    xrealloc
.text:0000000000004957                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000495F                 mov     rbx, rax
.text:0000000000004962                 mov     cs:slotvec, rax
.text:0000000000004969                 movups  xmmword ptr [rax], xmm0
.text:000000000000496C                 jmp     loc_484D
.text:0000000000004971 ; ---------------------------------------------------------------------------
.text:0000000000004971
.text:0000000000004971 loc_4971:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004971                 call    _abort
.text:0000000000004976 ; ---------------------------------------------------------------------------
.text:0000000000004976
.text:0000000000004976 loc_4976:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004976                 call    xalloc_die
.text:0000000000004976 ; } // starts at 47D0
.text:0000000000004976 quotearg_n_options endp
.text:0000000000004976
.text:0000000000004976 ; ---------------------------------------------------------------------------
.text:000000000000497B                 align 20h
.text:0000000000004980
.text:0000000000004980 ; =============== S U B R O U T I N E =======================================
.text:0000000000004980
.text:0000000000004980 ; Attributes: info_from_lumina
.text:0000000000004980
.text:0000000000004980 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004980                 public clone_quoting_options
.text:0000000000004980 clone_quoting_options proc near
.text:0000000000004980 ; __unwind {
.text:0000000000004980                 push    r12
.text:0000000000004982                 push    rbp
.text:0000000000004983                 push    rbx
.text:0000000000004984                 mov     rbx, rdi
.text:0000000000004987                 call    ___errno_location
.text:000000000000498C                 mov     r12d, [rax]
.text:000000000000498F                 mov     rbp, rax
.text:0000000000004992                 lea     rax, default_quoting_options
.text:0000000000004999                 test    rbx, rbx
.text:000000000000499C                 mov     esi, 38h ; '8'  ; n
.text:00000000000049A1                 cmovz   rbx, rax
.text:00000000000049A5                 mov     rdi, rbx        ; src
.text:00000000000049A8                 call    xmemdup
.text:00000000000049AD                 mov     [rbp+0], r12d
.text:00000000000049B1                 pop     rbx
.text:00000000000049B2                 pop     rbp
.text:00000000000049B3                 pop     r12
.text:00000000000049B5                 retn
.text:00000000000049B5 ; } // starts at 4980
.text:00000000000049B5 clone_quoting_options endp
.text:00000000000049B5
.text:00000000000049B5 ; ---------------------------------------------------------------------------
.text:00000000000049B6                 align 20h
.text:00000000000049C0
.text:00000000000049C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049C0
.text:00000000000049C0
.text:00000000000049C0                 public get_quoting_style
.text:00000000000049C0 get_quoting_style proc near
.text:00000000000049C0 ; __unwind {
.text:00000000000049C0                 lea     rax, default_quoting_options
.text:00000000000049C7                 test    rdi, rdi
.text:00000000000049CA                 cmovz   rdi, rax
.text:00000000000049CE                 mov     eax, [rdi]
.text:00000000000049D0                 retn
.text:00000000000049D0 ; } // starts at 49C0
.text:00000000000049D0 get_quoting_style endp
.text:00000000000049D0
.text:00000000000049D0 ; ---------------------------------------------------------------------------
.text:00000000000049D1                 align 20h
.text:00000000000049E0
.text:00000000000049E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049E0
.text:00000000000049E0
.text:00000000000049E0                 public set_quoting_style
.text:00000000000049E0 set_quoting_style proc near
.text:00000000000049E0 ; __unwind {
.text:00000000000049E0                 lea     rax, default_quoting_options
.text:00000000000049E7                 test    rdi, rdi
.text:00000000000049EA                 cmovz   rdi, rax
.text:00000000000049EE                 mov     [rdi], esi
.text:00000000000049F0                 retn
.text:00000000000049F0 ; } // starts at 49E0
.text:00000000000049F0 set_quoting_style endp
.text:00000000000049F0
.text:00000000000049F0 ; ---------------------------------------------------------------------------
.text:00000000000049F1                 align 20h
.text:0000000000004A00
.text:0000000000004A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A00
.text:0000000000004A00 ; Attributes: info_from_lumina
.text:0000000000004A00
.text:0000000000004A00 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004A00                 public set_char_quoting
.text:0000000000004A00 set_char_quoting proc near
.text:0000000000004A00 ; __unwind {
.text:0000000000004A00                 lea     rax, default_quoting_options
.text:0000000000004A07                 test    rdi, rdi
.text:0000000000004A0A                 mov     ecx, esi
.text:0000000000004A0C                 cmovz   rdi, rax
.text:0000000000004A10                 mov     eax, esi
.text:0000000000004A12                 and     ecx, 1Fh
.text:0000000000004A15                 shr     al, 5
.text:0000000000004A18                 movzx   eax, al
.text:0000000000004A1B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004A20                 mov     esi, [rdi]
.text:0000000000004A22                 mov     eax, esi
.text:0000000000004A24                 shr     eax, cl
.text:0000000000004A26                 xor     edx, eax
.text:0000000000004A28                 and     eax, 1
.text:0000000000004A2B                 and     edx, 1
.text:0000000000004A2E                 shl     edx, cl
.text:0000000000004A30                 xor     edx, esi
.text:0000000000004A32                 mov     [rdi], edx
.text:0000000000004A34                 retn
.text:0000000000004A34 ; } // starts at 4A00
.text:0000000000004A34 set_char_quoting endp
.text:0000000000004A34
.text:0000000000004A34 ; ---------------------------------------------------------------------------
.text:0000000000004A35                 align 20h
.text:0000000000004A40
.text:0000000000004A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A40
.text:0000000000004A40
.text:0000000000004A40                 public set_quoting_flags
.text:0000000000004A40 set_quoting_flags proc near
.text:0000000000004A40 ; __unwind {
.text:0000000000004A40                 lea     rax, default_quoting_options
.text:0000000000004A47                 test    rdi, rdi
.text:0000000000004A4A                 cmovz   rdi, rax
.text:0000000000004A4E                 mov     eax, [rdi+4]
.text:0000000000004A51                 mov     [rdi+4], esi
.text:0000000000004A54                 retn
.text:0000000000004A54 ; } // starts at 4A40
.text:0000000000004A54 set_quoting_flags endp
.text:0000000000004A54
.text:0000000000004A54 ; ---------------------------------------------------------------------------
.text:0000000000004A55                 align 20h
.text:0000000000004A60
.text:0000000000004A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A60
.text:0000000000004A60 ; Attributes: info_from_lumina
.text:0000000000004A60
.text:0000000000004A60 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004A60                 public set_custom_quoting
.text:0000000000004A60 set_custom_quoting proc near
.text:0000000000004A60 ; __unwind {
.text:0000000000004A60                 lea     rax, default_quoting_options
.text:0000000000004A67                 test    rdi, rdi
.text:0000000000004A6A                 cmovz   rdi, rax
.text:0000000000004A6E                 test    rsi, rsi
.text:0000000000004A71                 mov     dword ptr [rdi], 0Ah
.text:0000000000004A77                 jz      short loc_4A87
.text:0000000000004A79                 test    rdx, rdx
.text:0000000000004A7C                 jz      short loc_4A87
.text:0000000000004A7E                 mov     [rdi+28h], rsi
.text:0000000000004A82                 mov     [rdi+30h], rdx
.text:0000000000004A86                 retn
.text:0000000000004A87 ; ---------------------------------------------------------------------------
.text:0000000000004A87
.text:0000000000004A87 loc_4A87:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004A87                                         ; set_custom_quoting+1C↑j
.text:0000000000004A87                 sub     rsp, 8
.text:0000000000004A8B                 call    _abort
.text:0000000000004A8B ; } // starts at 4A60
.text:0000000000004A8B set_custom_quoting endp
.text:0000000000004A8B
.text:0000000000004A90
.text:0000000000004A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A90
.text:0000000000004A90 ; Attributes: info_from_lumina
.text:0000000000004A90
.text:0000000000004A90 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004A90                 public quotearg_buffer
.text:0000000000004A90 quotearg_buffer proc near
.text:0000000000004A90
.text:0000000000004A90 var_40          = qword ptr -40h
.text:0000000000004A90
.text:0000000000004A90 ; __unwind {
.text:0000000000004A90                 push    r15
.text:0000000000004A92                 push    r14
.text:0000000000004A94                 lea     rax, default_quoting_options
.text:0000000000004A9B                 push    r13
.text:0000000000004A9D                 push    r12
.text:0000000000004A9F                 mov     r13, rdi
.text:0000000000004AA2                 push    rbp
.text:0000000000004AA3                 push    rbx
.text:0000000000004AA4                 mov     rbx, r8
.text:0000000000004AA7                 mov     r14, rsi
.text:0000000000004AAA                 mov     r15, rdx
.text:0000000000004AAD                 sub     rsp, 18h
.text:0000000000004AB1                 test    r8, r8
.text:0000000000004AB4                 cmovz   rbx, rax
.text:0000000000004AB8                 mov     [rsp+48h+var_40], rcx
.text:0000000000004ABD                 call    ___errno_location
.text:0000000000004AC2                 mov     r12d, [rax]
.text:0000000000004AC5                 mov     rbp, rax
.text:0000000000004AC8                 lea     rax, [rbx+8]
.text:0000000000004ACC                 sub     rsp, 8
.text:0000000000004AD0                 mov     r9d, [rbx+4]
.text:0000000000004AD4                 push    qword ptr [rbx+30h]
.text:0000000000004AD7                 mov     r8d, [rbx]
.text:0000000000004ADA                 push    qword ptr [rbx+28h]
.text:0000000000004ADD                 mov     rdx, r15
.text:0000000000004AE0                 push    rax
.text:0000000000004AE1                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004AE6                 mov     rsi, r14
.text:0000000000004AE9                 mov     rdi, r13
.text:0000000000004AEC                 call    quotearg_buffer_restyled
.text:0000000000004AF1                 mov     [rbp+0], r12d
.text:0000000000004AF5                 add     rsp, 38h
.text:0000000000004AF9                 pop     rbx
.text:0000000000004AFA                 pop     rbp
.text:0000000000004AFB                 pop     r12
.text:0000000000004AFD                 pop     r13
.text:0000000000004AFF                 pop     r14
.text:0000000000004B01                 pop     r15
.text:0000000000004B03                 retn
.text:0000000000004B03 ; } // starts at 4A90
.text:0000000000004B03 quotearg_buffer endp
.text:0000000000004B03
.text:0000000000004B03 ; ---------------------------------------------------------------------------
.text:0000000000004B04                 align 10h
.text:0000000000004B10
.text:0000000000004B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B10
.text:0000000000004B10 ; Attributes: info_from_lumina
.text:0000000000004B10
.text:0000000000004B10 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000004B10                 public quotearg_alloc_mem
.text:0000000000004B10 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000004B10
.text:0000000000004B10 var_5C          = dword ptr -5Ch
.text:0000000000004B10 var_58          = qword ptr -58h
.text:0000000000004B10 var_50          = qword ptr -50h
.text:0000000000004B10 var_48          = qword ptr -48h
.text:0000000000004B10 var_40          = qword ptr -40h
.text:0000000000004B10
.text:0000000000004B10 ; __unwind {
.text:0000000000004B10                 push    r15
.text:0000000000004B12                 push    r14
.text:0000000000004B14                 lea     rax, default_quoting_options
.text:0000000000004B1B                 push    r13
.text:0000000000004B1D                 push    r12
.text:0000000000004B1F                 mov     r12, rdx
.text:0000000000004B22                 push    rbp
.text:0000000000004B23                 push    rbx
.text:0000000000004B24                 mov     rbx, rcx
.text:0000000000004B27                 mov     r14, rdi
.text:0000000000004B2A                 mov     r15, rsi
.text:0000000000004B2D                 sub     rsp, 38h
.text:0000000000004B31                 test    rcx, rcx
.text:0000000000004B34                 cmovz   rbx, rax
.text:0000000000004B38                 xor     ebp, ebp
.text:0000000000004B3A                 call    ___errno_location
.text:0000000000004B3F                 test    r12, r12
.text:0000000000004B42                 mov     r13, rax
.text:0000000000004B45                 mov     eax, [rax]
.text:0000000000004B47                 setz    bpl
.text:0000000000004B4B                 or      ebp, [rbx+4]
.text:0000000000004B4E                 lea     r10, [rbx+8]
.text:0000000000004B52                 sub     rsp, 8
.text:0000000000004B56                 mov     r8d, [rbx]
.text:0000000000004B59                 mov     rcx, r15
.text:0000000000004B5C                 mov     [rsp+70h+var_5C], eax
.text:0000000000004B60                 push    qword ptr [rbx+30h]
.text:0000000000004B63                 mov     rdx, r14
.text:0000000000004B66                 push    qword ptr [rbx+28h]
.text:0000000000004B69                 push    r10
.text:0000000000004B6B                 xor     esi, esi
.text:0000000000004B6D                 mov     r9d, ebp
.text:0000000000004B70                 xor     edi, edi
.text:0000000000004B72                 mov     [rsp+88h+var_48], r10
.text:0000000000004B77                 call    quotearg_buffer_restyled
.text:0000000000004B7C                 lea     rsi, [rax+1]
.text:0000000000004B80                 mov     [rsp+88h+var_40], rax
.text:0000000000004B85                 add     rsp, 20h
.text:0000000000004B89                 mov     rdi, rsi
.text:0000000000004B8C                 mov     [rsp+68h+var_50], rsi
.text:0000000000004B91                 call    xmalloc
.text:0000000000004B96                 mov     [rsp+68h+var_58], rax
.text:0000000000004B9B                 sub     rsp, 8
.text:0000000000004B9F                 push    qword ptr [rbx+30h]
.text:0000000000004BA2                 push    qword ptr [rbx+28h]
.text:0000000000004BA5                 mov     r10, [rsp+80h+var_48]
.text:0000000000004BAA                 mov     r9d, ebp
.text:0000000000004BAD                 mov     r8d, [rbx]
.text:0000000000004BB0                 mov     rcx, r15
.text:0000000000004BB3                 mov     rdx, r14
.text:0000000000004BB6                 mov     rdi, rax
.text:0000000000004BB9                 push    r10
.text:0000000000004BBB                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004BC0                 call    quotearg_buffer_restyled
.text:0000000000004BC5                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004BC9                 add     rsp, 20h
.text:0000000000004BCD                 test    r12, r12
.text:0000000000004BD0                 mov     [r13+0], eax
.text:0000000000004BD4                 jz      short loc_4BDF
.text:0000000000004BD6                 mov     r11, [rsp+68h+var_40]
.text:0000000000004BDB                 mov     [r12], r11
.text:0000000000004BDF
.text:0000000000004BDF loc_4BDF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000004BDF                 mov     rax, [rsp+68h+var_58]
.text:0000000000004BE4                 add     rsp, 38h
.text:0000000000004BE8                 pop     rbx
.text:0000000000004BE9                 pop     rbp
.text:0000000000004BEA                 pop     r12
.text:0000000000004BEC                 pop     r13
.text:0000000000004BEE                 pop     r14
.text:0000000000004BF0                 pop     r15
.text:0000000000004BF2                 retn
.text:0000000000004BF2 ; } // starts at 4B10
.text:0000000000004BF2 quotearg_alloc_mem endp
.text:0000000000004BF2
.text:0000000000004BF2 ; ---------------------------------------------------------------------------
.text:0000000000004BF3                 align 20h
.text:0000000000004C00
.text:0000000000004C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C00
.text:0000000000004C00
.text:0000000000004C00                 public quotearg_alloc
.text:0000000000004C00 quotearg_alloc  proc near
.text:0000000000004C00 ; __unwind {
.text:0000000000004C00                 mov     rcx, rdx
.text:0000000000004C03                 xor     edx, edx
.text:0000000000004C05                 jmp     quotearg_alloc_mem
.text:0000000000004C05 ; } // starts at 4C00
.text:0000000000004C05 quotearg_alloc  endp
.text:0000000000004C05
.text:0000000000004C05 ; ---------------------------------------------------------------------------
.text:0000000000004C0A                 align 10h
.text:0000000000004C10
.text:0000000000004C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C10
.text:0000000000004C10 ; Attributes: info_from_lumina
.text:0000000000004C10
.text:0000000000004C10 ; void __cdecl quotearg_free()
.text:0000000000004C10                 public quotearg_free
.text:0000000000004C10 quotearg_free   proc near
.text:0000000000004C10 ; __unwind {
.text:0000000000004C10                 mov     eax, cs:nslots
.text:0000000000004C16                 push    r12
.text:0000000000004C18                 mov     r12, cs:slotvec
.text:0000000000004C1F                 push    rbp
.text:0000000000004C20                 push    rbx
.text:0000000000004C21                 cmp     eax, 1
.text:0000000000004C24                 jle     short loc_4C51
.text:0000000000004C26                 sub     eax, 2
.text:0000000000004C29                 lea     rbx, [r12+18h]
.text:0000000000004C2E                 shl     rax, 4
.text:0000000000004C32                 lea     rbp, [r12+rax+28h]
.text:0000000000004C37                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004C40
.text:0000000000004C40 loc_4C40:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000004C40                 mov     rdi, [rbx]      ; ptr
.text:0000000000004C43                 add     rbx, 10h
.text:0000000000004C47                 call    _free
.text:0000000000004C4C                 cmp     rbx, rbp
.text:0000000000004C4F                 jnz     short loc_4C40
.text:0000000000004C51
.text:0000000000004C51 loc_4C51:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000004C51                 mov     rdi, [r12+8]    ; ptr
.text:0000000000004C56                 lea     rbx, slot0
.text:0000000000004C5D                 cmp     rdi, rbx
.text:0000000000004C60                 jz      short loc_4C79
.text:0000000000004C62                 call    _free
.text:0000000000004C67                 mov     cs:slotvec0, 100h
.text:0000000000004C72                 mov     cs:off_20B078, rbx
.text:0000000000004C79
.text:0000000000004C79 loc_4C79:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004C79                 lea     rbx, slotvec0
.text:0000000000004C80                 cmp     r12, rbx
.text:0000000000004C83                 jz      short loc_4C94
.text:0000000000004C85                 mov     rdi, r12        ; ptr
.text:0000000000004C88                 call    _free
.text:0000000000004C8D                 mov     cs:slotvec, rbx
.text:0000000000004C94
.text:0000000000004C94 loc_4C94:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004C94                 pop     rbx
.text:0000000000004C95                 mov     cs:nslots, 1
.text:0000000000004C9F                 pop     rbp
.text:0000000000004CA0                 pop     r12
.text:0000000000004CA2                 retn
.text:0000000000004CA2 ; } // starts at 4C10
.text:0000000000004CA2 quotearg_free   endp
.text:0000000000004CA2
.text:0000000000004CA2 ; ---------------------------------------------------------------------------
.text:0000000000004CA3                 align 10h
.text:0000000000004CB0
.text:0000000000004CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CB0
.text:0000000000004CB0
.text:0000000000004CB0                 public quotearg_n
.text:0000000000004CB0 quotearg_n      proc near
.text:0000000000004CB0 ; __unwind {
.text:0000000000004CB0                 lea     rcx, default_quoting_options
.text:0000000000004CB7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004CBE                 jmp     quotearg_n_options
.text:0000000000004CBE ; } // starts at 4CB0
.text:0000000000004CBE quotearg_n      endp
.text:0000000000004CBE
.text:0000000000004CBE ; ---------------------------------------------------------------------------
.text:0000000000004CC3                 align 10h
.text:0000000000004CD0
.text:0000000000004CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CD0
.text:0000000000004CD0
.text:0000000000004CD0                 public quotearg_n_mem
.text:0000000000004CD0 quotearg_n_mem  proc near
.text:0000000000004CD0 ; __unwind {
.text:0000000000004CD0                 lea     rcx, default_quoting_options
.text:0000000000004CD7                 jmp     quotearg_n_options
.text:0000000000004CD7 ; } // starts at 4CD0
.text:0000000000004CD7 quotearg_n_mem  endp
.text:0000000000004CD7
.text:0000000000004CD7 ; ---------------------------------------------------------------------------
.text:0000000000004CDC                 align 20h
.text:0000000000004CE0
.text:0000000000004CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CE0
.text:0000000000004CE0
.text:0000000000004CE0                 public quotearg
.text:0000000000004CE0 quotearg        proc near
.text:0000000000004CE0 ; __unwind {
.text:0000000000004CE0                 lea     rcx, default_quoting_options
.text:0000000000004CE7                 mov     rsi, rdi
.text:0000000000004CEA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004CF1                 xor     edi, edi
.text:0000000000004CF3                 jmp     quotearg_n_options
.text:0000000000004CF3 ; } // starts at 4CE0
.text:0000000000004CF3 quotearg        endp
.text:0000000000004CF3
.text:0000000000004CF3 ; ---------------------------------------------------------------------------
.text:0000000000004CF8                 align 20h
.text:0000000000004D00
.text:0000000000004D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D00
.text:0000000000004D00
.text:0000000000004D00                 public quotearg_mem
.text:0000000000004D00 quotearg_mem    proc near
.text:0000000000004D00 ; __unwind {
.text:0000000000004D00                 lea     rcx, default_quoting_options
.text:0000000000004D07                 mov     rdx, rsi
.text:0000000000004D0A                 mov     rsi, rdi
.text:0000000000004D0D                 xor     edi, edi
.text:0000000000004D0F                 jmp     quotearg_n_options
.text:0000000000004D0F ; } // starts at 4D00
.text:0000000000004D0F quotearg_mem    endp
.text:0000000000004D0F
.text:0000000000004D0F ; ---------------------------------------------------------------------------
.text:0000000000004D14                 align 20h
.text:0000000000004D20
.text:0000000000004D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D20
.text:0000000000004D20 ; Attributes: info_from_lumina
.text:0000000000004D20
.text:0000000000004D20 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004D20                 public quotearg_n_style
.text:0000000000004D20 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000004D20
.text:0000000000004D20 var_48          = dword ptr -48h
.text:0000000000004D20 var_44          = qword ptr -44h
.text:0000000000004D20 var_3C          = qword ptr -3Ch
.text:0000000000004D20 var_34          = qword ptr -34h
.text:0000000000004D20 var_2C          = qword ptr -2Ch
.text:0000000000004D20 var_24          = qword ptr -24h
.text:0000000000004D20 var_1C          = qword ptr -1Ch
.text:0000000000004D20 var_14          = dword ptr -14h
.text:0000000000004D20 var_10          = qword ptr -10h
.text:0000000000004D20
.text:0000000000004D20 ; __unwind {
.text:0000000000004D20                 sub     rsp, 48h
.text:0000000000004D24                 mov     rax, rdx
.text:0000000000004D27                 mov     rdx, fs:28h
.text:0000000000004D30                 mov     [rsp+48h+var_10], rdx
.text:0000000000004D35                 xor     edx, edx
.text:0000000000004D37                 cmp     esi, 0Ah
.text:0000000000004D3A                 jz      short loc_4DA4
.text:0000000000004D3C                 mov     [rsp+48h+var_48], esi
.text:0000000000004D3F                 mov     rcx, rsp
.text:0000000000004D42                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004D49                 mov     rsi, rax
.text:0000000000004D4C                 mov     [rsp+48h+var_44], 0
.text:0000000000004D55                 mov     [rsp+48h+var_3C], 0
.text:0000000000004D5E                 mov     [rsp+48h+var_34], 0
.text:0000000000004D67                 mov     [rsp+48h+var_2C], 0
.text:0000000000004D70                 mov     [rsp+48h+var_24], 0
.text:0000000000004D79                 mov     [rsp+48h+var_1C], 0
.text:0000000000004D82                 mov     [rsp+48h+var_14], 0
.text:0000000000004D8A                 call    quotearg_n_options
.text:0000000000004D8F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004D94                 xor     rcx, fs:28h
.text:0000000000004D9D                 jnz     short loc_4DA9
.text:0000000000004D9F                 add     rsp, 48h
.text:0000000000004DA3                 retn
.text:0000000000004DA4 ; ---------------------------------------------------------------------------
.text:0000000000004DA4
.text:0000000000004DA4 loc_4DA4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004DA4                 call    _abort
.text:0000000000004DA9 ; ---------------------------------------------------------------------------
.text:0000000000004DA9
.text:0000000000004DA9 loc_4DA9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004DA9                 call    ___stack_chk_fail
.text:0000000000004DA9 ; } // starts at 4D20
.text:0000000000004DA9 quotearg_n_style endp
.text:0000000000004DA9
.text:0000000000004DA9 ; ---------------------------------------------------------------------------
.text:0000000000004DAE                 align 10h
.text:0000000000004DB0
.text:0000000000004DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DB0
.text:0000000000004DB0 ; Attributes: info_from_lumina
.text:0000000000004DB0
.text:0000000000004DB0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004DB0                 public quotearg_n_style_mem
.text:0000000000004DB0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004DB0
.text:0000000000004DB0 var_48          = dword ptr -48h
.text:0000000000004DB0 var_44          = qword ptr -44h
.text:0000000000004DB0 var_3C          = qword ptr -3Ch
.text:0000000000004DB0 var_34          = qword ptr -34h
.text:0000000000004DB0 var_2C          = qword ptr -2Ch
.text:0000000000004DB0 var_24          = qword ptr -24h
.text:0000000000004DB0 var_1C          = qword ptr -1Ch
.text:0000000000004DB0 var_14          = dword ptr -14h
.text:0000000000004DB0 var_10          = qword ptr -10h
.text:0000000000004DB0
.text:0000000000004DB0 ; __unwind {
.text:0000000000004DB0                 sub     rsp, 48h
.text:0000000000004DB4                 mov     rax, rdx
.text:0000000000004DB7                 mov     rdx, rcx
.text:0000000000004DBA                 mov     rcx, fs:28h
.text:0000000000004DC3                 mov     [rsp+48h+var_10], rcx
.text:0000000000004DC8                 xor     ecx, ecx
.text:0000000000004DCA                 cmp     esi, 0Ah
.text:0000000000004DCD                 jz      short loc_4E30
.text:0000000000004DCF                 mov     [rsp+48h+var_48], esi
.text:0000000000004DD2                 mov     rcx, rsp
.text:0000000000004DD5                 mov     rsi, rax
.text:0000000000004DD8                 mov     [rsp+48h+var_44], 0
.text:0000000000004DE1                 mov     [rsp+48h+var_3C], 0
.text:0000000000004DEA                 mov     [rsp+48h+var_34], 0
.text:0000000000004DF3                 mov     [rsp+48h+var_2C], 0
.text:0000000000004DFC                 mov     [rsp+48h+var_24], 0
.text:0000000000004E05                 mov     [rsp+48h+var_1C], 0
.text:0000000000004E0E                 mov     [rsp+48h+var_14], 0
.text:0000000000004E16                 call    quotearg_n_options
.text:0000000000004E1B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004E20                 xor     rdx, fs:28h
.text:0000000000004E29                 jnz     short loc_4E35
.text:0000000000004E2B                 add     rsp, 48h
.text:0000000000004E2F                 retn
.text:0000000000004E30 ; ---------------------------------------------------------------------------
.text:0000000000004E30
.text:0000000000004E30 loc_4E30:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004E30                 call    _abort
.text:0000000000004E35 ; ---------------------------------------------------------------------------
.text:0000000000004E35
.text:0000000000004E35 loc_4E35:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004E35                 call    ___stack_chk_fail
.text:0000000000004E35 ; } // starts at 4DB0
.text:0000000000004E35 quotearg_n_style_mem endp
.text:0000000000004E35
.text:0000000000004E35 ; ---------------------------------------------------------------------------
.text:0000000000004E3A                 align 20h
.text:0000000000004E40
.text:0000000000004E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E40
.text:0000000000004E40
.text:0000000000004E40                 public quotearg_style
.text:0000000000004E40 quotearg_style  proc near
.text:0000000000004E40 ; __unwind {
.text:0000000000004E40                 mov     rdx, rsi
.text:0000000000004E43                 mov     esi, edi
.text:0000000000004E45                 xor     edi, edi
.text:0000000000004E47                 jmp     quotearg_n_style
.text:0000000000004E47 ; } // starts at 4E40
.text:0000000000004E47 quotearg_style  endp
.text:0000000000004E47
.text:0000000000004E47 ; ---------------------------------------------------------------------------
.text:0000000000004E4C                 align 10h
.text:0000000000004E50
.text:0000000000004E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E50
.text:0000000000004E50
.text:0000000000004E50                 public quotearg_style_mem
.text:0000000000004E50 quotearg_style_mem proc near
.text:0000000000004E50 ; __unwind {
.text:0000000000004E50                 mov     rcx, rdx
.text:0000000000004E53                 mov     rdx, rsi
.text:0000000000004E56                 mov     esi, edi
.text:0000000000004E58                 xor     edi, edi
.text:0000000000004E5A                 jmp     quotearg_n_style_mem
.text:0000000000004E5A ; } // starts at 4E50
.text:0000000000004E5A quotearg_style_mem endp
.text:0000000000004E5A
.text:0000000000004E5A ; ---------------------------------------------------------------------------
.text:0000000000004E5F                 align 20h
.text:0000000000004E60
.text:0000000000004E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E60
.text:0000000000004E60 ; Attributes: info_from_lumina
.text:0000000000004E60
.text:0000000000004E60 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004E60                 public quotearg_char_mem
.text:0000000000004E60 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004E60                                         ; quotearg_colon+C↓j ...
.text:0000000000004E60
.text:0000000000004E60 var_48          = xmmword ptr -48h
.text:0000000000004E60 var_38          = xmmword ptr -38h
.text:0000000000004E60 var_28          = xmmword ptr -28h
.text:0000000000004E60 var_18          = qword ptr -18h
.text:0000000000004E60 var_10          = qword ptr -10h
.text:0000000000004E60
.text:0000000000004E60 ; __unwind {
.text:0000000000004E60                 sub     rsp, 48h
.text:0000000000004E64                 mov     ecx, edx
.text:0000000000004E66                 mov     rax, fs:28h
.text:0000000000004E6F                 mov     [rsp+48h+var_10], rax
.text:0000000000004E74                 xor     eax, eax
.text:0000000000004E76                 mov     rax, cs:qword_20B210
.text:0000000000004E7D                 mov     r8, rsp
.text:0000000000004E80                 and     ecx, 1Fh
.text:0000000000004E83                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004E8B                 mov     [rsp+48h+var_18], rax
.text:0000000000004E90                 mov     eax, edx
.text:0000000000004E92                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004E96                 shr     al, 5
.text:0000000000004E99                 movzx   eax, al
.text:0000000000004E9C                 lea     r9, [r8+rax*4+8]
.text:0000000000004EA1                 movdqa  xmm0, cs:xmmword_20B1F0
.text:0000000000004EA9                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004EAE                 movdqa  xmm0, cs:xmmword_20B200
.text:0000000000004EB6                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004EBB                 mov     edx, [r9]
.text:0000000000004EBE                 mov     eax, edx
.text:0000000000004EC0                 shr     eax, cl
.text:0000000000004EC2                 not     eax
.text:0000000000004EC4                 and     eax, 1
.text:0000000000004EC7                 shl     eax, cl
.text:0000000000004EC9                 mov     rcx, r8
.text:0000000000004ECC                 xor     eax, edx
.text:0000000000004ECE                 mov     rdx, rsi
.text:0000000000004ED1                 mov     rsi, rdi
.text:0000000000004ED4                 mov     [r9], eax
.text:0000000000004ED7                 xor     edi, edi
.text:0000000000004ED9                 call    quotearg_n_options
.text:0000000000004EDE                 mov     rsi, [rsp+48h+var_10]
.text:0000000000004EE3                 xor     rsi, fs:28h
.text:0000000000004EEC                 jnz     short loc_4EF3
.text:0000000000004EEE                 add     rsp, 48h
.text:0000000000004EF2                 retn
.text:0000000000004EF3 ; ---------------------------------------------------------------------------
.text:0000000000004EF3
.text:0000000000004EF3 loc_4EF3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000004EF3                 call    ___stack_chk_fail
.text:0000000000004EF3 ; } // starts at 4E60
.text:0000000000004EF3 quotearg_char_mem endp
.text:0000000000004EF3
.text:0000000000004EF3 ; ---------------------------------------------------------------------------
.text:0000000000004EF8                 align 20h
.text:0000000000004F00
.text:0000000000004F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F00
.text:0000000000004F00
.text:0000000000004F00                 public quotearg_char
.text:0000000000004F00 quotearg_char   proc near
.text:0000000000004F00 ; __unwind {
.text:0000000000004F00                 movsx   edx, sil
.text:0000000000004F04                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004F0B                 jmp     quotearg_char_mem
.text:0000000000004F0B ; } // starts at 4F00
.text:0000000000004F0B quotearg_char   endp
.text:0000000000004F0B
.text:0000000000004F10
.text:0000000000004F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F10
.text:0000000000004F10
.text:0000000000004F10                 public quotearg_colon
.text:0000000000004F10 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000004F10 ; __unwind {
.text:0000000000004F10                 mov     edx, 3Ah ; ':'
.text:0000000000004F15                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004F1C                 jmp     quotearg_char_mem
.text:0000000000004F1C ; } // starts at 4F10
.text:0000000000004F1C quotearg_colon  endp
.text:0000000000004F1C
.text:0000000000004F1C ; ---------------------------------------------------------------------------
.text:0000000000004F21                 align 10h
.text:0000000000004F30
.text:0000000000004F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F30
.text:0000000000004F30
.text:0000000000004F30                 public quotearg_colon_mem
.text:0000000000004F30 quotearg_colon_mem proc near
.text:0000000000004F30 ; __unwind {
.text:0000000000004F30                 mov     edx, 3Ah ; ':'
.text:0000000000004F35                 jmp     quotearg_char_mem
.text:0000000000004F35 ; } // starts at 4F30
.text:0000000000004F35 quotearg_colon_mem endp
.text:0000000000004F35
.text:0000000000004F35 ; ---------------------------------------------------------------------------
.text:0000000000004F3A                 align 20h
.text:0000000000004F40
.text:0000000000004F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F40
.text:0000000000004F40 ; Attributes: info_from_lumina
.text:0000000000004F40
.text:0000000000004F40 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004F40                 public quotearg_n_style_colon
.text:0000000000004F40 quotearg_n_style_colon proc near
.text:0000000000004F40
.text:0000000000004F40 var_48          = dword ptr -48h
.text:0000000000004F40 var_44          = qword ptr -44h
.text:0000000000004F40 var_3C          = qword ptr -3Ch
.text:0000000000004F40 var_34          = qword ptr -34h
.text:0000000000004F40 var_2C          = qword ptr -2Ch
.text:0000000000004F40 var_24          = qword ptr -24h
.text:0000000000004F40 var_1C          = qword ptr -1Ch
.text:0000000000004F40 var_14          = dword ptr -14h
.text:0000000000004F40 var_10          = qword ptr -10h
.text:0000000000004F40
.text:0000000000004F40 ; __unwind {
.text:0000000000004F40                 sub     rsp, 48h
.text:0000000000004F44                 mov     rax, rdx
.text:0000000000004F47                 mov     rdx, fs:28h
.text:0000000000004F50                 mov     [rsp+48h+var_10], rdx
.text:0000000000004F55                 xor     edx, edx
.text:0000000000004F57                 cmp     esi, 0Ah
.text:0000000000004F5A                 jz      short loc_4FC4
.text:0000000000004F5C                 mov     [rsp+48h+var_48], esi
.text:0000000000004F5F                 mov     rcx, rsp
.text:0000000000004F62                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004F69                 mov     rsi, rax
.text:0000000000004F6C                 mov     [rsp+48h+var_44], 0
.text:0000000000004F75                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000004F7E                 mov     [rsp+48h+var_34], 0
.text:0000000000004F87                 mov     [rsp+48h+var_2C], 0
.text:0000000000004F90                 mov     [rsp+48h+var_24], 0
.text:0000000000004F99                 mov     [rsp+48h+var_1C], 0
.text:0000000000004FA2                 mov     [rsp+48h+var_14], 0
.text:0000000000004FAA                 call    quotearg_n_options
.text:0000000000004FAF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004FB4                 xor     rcx, fs:28h
.text:0000000000004FBD                 jnz     short loc_4FC9
.text:0000000000004FBF                 add     rsp, 48h
.text:0000000000004FC3                 retn
.text:0000000000004FC4 ; ---------------------------------------------------------------------------
.text:0000000000004FC4
.text:0000000000004FC4 loc_4FC4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004FC4                 call    _abort
.text:0000000000004FC9 ; ---------------------------------------------------------------------------
.text:0000000000004FC9
.text:0000000000004FC9 loc_4FC9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004FC9                 call    ___stack_chk_fail
.text:0000000000004FC9 ; } // starts at 4F40
.text:0000000000004FC9 quotearg_n_style_colon endp
.text:0000000000004FC9
.text:0000000000004FC9 ; ---------------------------------------------------------------------------
.text:0000000000004FCE                 align 10h
.text:0000000000004FD0
.text:0000000000004FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FD0
.text:0000000000004FD0 ; Attributes: info_from_lumina
.text:0000000000004FD0
.text:0000000000004FD0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004FD0                 public quotearg_n_custom_mem
.text:0000000000004FD0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004FD0                                         ; quotearg_custom+12↓j ...
.text:0000000000004FD0
.text:0000000000004FD0 var_48          = xmmword ptr -48h
.text:0000000000004FD0 var_38          = xmmword ptr -38h
.text:0000000000004FD0 var_28          = xmmword ptr -28h
.text:0000000000004FD0 var_18          = qword ptr -18h
.text:0000000000004FD0 var_10          = qword ptr -10h
.text:0000000000004FD0
.text:0000000000004FD0 ; __unwind {
.text:0000000000004FD0                 sub     rsp, 48h
.text:0000000000004FD4                 mov     r9, rcx
.text:0000000000004FD7                 mov     rcx, cs:qword_20B210
.text:0000000000004FDE                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004FE6                 mov     rax, fs:28h
.text:0000000000004FEF                 mov     [rsp+48h+var_10], rax
.text:0000000000004FF4                 xor     eax, eax
.text:0000000000004FF6                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004FFA                 test    rsi, rsi
.text:0000000000004FFD                 mov     [rsp+48h+var_18], rcx
.text:0000000000005002                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000005009                 movdqa  xmm0, cs:xmmword_20B1F0
.text:0000000000005011                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005016                 movdqa  xmm0, cs:xmmword_20B200
.text:000000000000501E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005023                 jz      short loc_5057
.text:0000000000005025                 test    rdx, rdx
.text:0000000000005028                 jz      short loc_5057
.text:000000000000502A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000502F                 mov     [rsp+48h+var_18], rdx
.text:0000000000005034                 mov     rcx, rsp
.text:0000000000005037                 mov     rdx, r8
.text:000000000000503A                 mov     rsi, r9
.text:000000000000503D                 call    quotearg_n_options
.text:0000000000005042                 mov     rdi, [rsp+48h+var_10]
.text:0000000000005047                 xor     rdi, fs:28h
.text:0000000000005050                 jnz     short loc_505C
.text:0000000000005052                 add     rsp, 48h
.text:0000000000005056                 retn
.text:0000000000005057 ; ---------------------------------------------------------------------------
.text:0000000000005057
.text:0000000000005057 loc_5057:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000005057                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000005057                 call    _abort
.text:000000000000505C ; ---------------------------------------------------------------------------
.text:000000000000505C
.text:000000000000505C loc_505C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000505C                 call    ___stack_chk_fail
.text:000000000000505C ; } // starts at 4FD0
.text:000000000000505C quotearg_n_custom_mem endp
.text:000000000000505C
.text:000000000000505C ; ---------------------------------------------------------------------------
.text:0000000000005061                 align 10h
.text:0000000000005070
.text:0000000000005070 ; =============== S U B R O U T I N E =======================================
.text:0000000000005070
.text:0000000000005070
.text:0000000000005070                 public quotearg_n_custom
.text:0000000000005070 quotearg_n_custom proc near
.text:0000000000005070 ; __unwind {
.text:0000000000005070                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005077                 jmp     quotearg_n_custom_mem
.text:0000000000005077 ; } // starts at 5070
.text:0000000000005077 quotearg_n_custom endp
.text:0000000000005077
.text:0000000000005077 ; ---------------------------------------------------------------------------
.text:000000000000507C                 align 20h
.text:0000000000005080
.text:0000000000005080 ; =============== S U B R O U T I N E =======================================
.text:0000000000005080
.text:0000000000005080
.text:0000000000005080                 public quotearg_custom
.text:0000000000005080 quotearg_custom proc near
.text:0000000000005080 ; __unwind {
.text:0000000000005080                 mov     rcx, rdx
.text:0000000000005083                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000508A                 mov     rdx, rsi
.text:000000000000508D                 mov     rsi, rdi
.text:0000000000005090                 xor     edi, edi
.text:0000000000005092                 jmp     quotearg_n_custom_mem
.text:0000000000005092 ; } // starts at 5080
.text:0000000000005092 quotearg_custom endp
.text:0000000000005092
.text:0000000000005092 ; ---------------------------------------------------------------------------
.text:0000000000005097                 align 20h
.text:00000000000050A0
.text:00000000000050A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050A0
.text:00000000000050A0
.text:00000000000050A0                 public quotearg_custom_mem
.text:00000000000050A0 quotearg_custom_mem proc near
.text:00000000000050A0 ; __unwind {
.text:00000000000050A0                 mov     r8, rcx
.text:00000000000050A3                 mov     rcx, rdx
.text:00000000000050A6                 mov     rdx, rsi
.text:00000000000050A9                 mov     rsi, rdi
.text:00000000000050AC                 xor     edi, edi
.text:00000000000050AE                 jmp     quotearg_n_custom_mem
.text:00000000000050AE ; } // starts at 50A0
.text:00000000000050AE quotearg_custom_mem endp
.text:00000000000050AE
.text:00000000000050AE ; ---------------------------------------------------------------------------
.text:00000000000050B3                 align 20h
.text:00000000000050C0
.text:00000000000050C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050C0
.text:00000000000050C0
.text:00000000000050C0                 public quote_n_mem
.text:00000000000050C0 quote_n_mem     proc near
.text:00000000000050C0 ; __unwind {
.text:00000000000050C0                 lea     rcx, quote_quoting_options
.text:00000000000050C7                 jmp     quotearg_n_options
.text:00000000000050C7 ; } // starts at 50C0
.text:00000000000050C7 quote_n_mem     endp
.text:00000000000050C7
.text:00000000000050C7 ; ---------------------------------------------------------------------------
.text:00000000000050CC                 align 10h
.text:00000000000050D0
.text:00000000000050D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050D0
.text:00000000000050D0
.text:00000000000050D0                 public quote_mem
.text:00000000000050D0 quote_mem       proc near
.text:00000000000050D0 ; __unwind {
.text:00000000000050D0                 lea     rcx, quote_quoting_options
.text:00000000000050D7                 mov     rdx, rsi
.text:00000000000050DA                 mov     rsi, rdi
.text:00000000000050DD                 xor     edi, edi
.text:00000000000050DF                 jmp     quotearg_n_options
.text:00000000000050DF ; } // starts at 50D0
.text:00000000000050DF quote_mem       endp
.text:00000000000050DF
.text:00000000000050DF ; ---------------------------------------------------------------------------
.text:00000000000050E4                 align 10h
.text:00000000000050F0
.text:00000000000050F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050F0
.text:00000000000050F0
.text:00000000000050F0                 public quote_n
.text:00000000000050F0 quote_n         proc near               ; CODE XREF: or+36E↑p
.text:00000000000050F0                                         ; or+37F↑p
.text:00000000000050F0 ; __unwind {
.text:00000000000050F0                 lea     rcx, quote_quoting_options
.text:00000000000050F7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000050FE                 jmp     quotearg_n_options
.text:00000000000050FE ; } // starts at 50F0
.text:00000000000050FE quote_n         endp
.text:00000000000050FE
.text:00000000000050FE ; ---------------------------------------------------------------------------
.text:0000000000005103                 align 10h
.text:0000000000005110
.text:0000000000005110 ; =============== S U B R O U T I N E =======================================
.text:0000000000005110
.text:0000000000005110
.text:0000000000005110                 public quote
.text:0000000000005110 quote           proc near               ; CODE XREF: main+AB↑p
.text:0000000000005110                                         ; find_int+AC↑p ...
.text:0000000000005110 ; __unwind {
.text:0000000000005110                 lea     rcx, quote_quoting_options
.text:0000000000005117                 mov     rsi, rdi
.text:000000000000511A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005121                 xor     edi, edi
.text:0000000000005123                 jmp     quotearg_n_options
.text:0000000000005123 ; } // starts at 5110
.text:0000000000005123 quote           endp
.text:0000000000005123
.text:0000000000005123 ; ---------------------------------------------------------------------------
.text:0000000000005128                 align 10h
.text:0000000000005130
.text:0000000000005130 ; =============== S U B R O U T I N E =======================================
.text:0000000000005130
.text:0000000000005130
.text:0000000000005130                 public strintcmp
.text:0000000000005130 strintcmp       proc near               ; CODE XREF: binary_operator+359↑p
.text:0000000000005130 ; __unwind {
.text:0000000000005130                 movzx   r8d, byte ptr [rdi]
.text:0000000000005134                 movzx   edx, byte ptr [rsi]
.text:0000000000005137                 cmp     r8b, 2Dh ; '-'
.text:000000000000513B                 jz      loc_51E0
.text:0000000000005141                 cmp     dl, 2Dh ; '-'
.text:0000000000005144                 jz      loc_5228
.text:000000000000514A                 nop     word ptr [rax+rax+00h]
.text:0000000000005150
.text:0000000000005150 loc_5150:                               ; CODE XREF: strintcmp+1C0↓j
.text:0000000000005150                 cmp     r8b, 30h ; '0'
.text:0000000000005154                 jz      loc_52E8
.text:000000000000515A
.text:000000000000515A loc_515A:                               ; CODE XREF: strintcmp+1AF↓j
.text:000000000000515A                 cmp     dl, 30h ; '0'
.text:000000000000515D                 jz      loc_52D8
.text:0000000000005163                 movzx   eax, dl
.text:0000000000005166                 cmp     dl, r8b
.text:0000000000005169                 lea     ecx, [rax-30h]
.text:000000000000516C                 jnz     loc_5308
.text:0000000000005172                 cmp     ecx, 9
.text:0000000000005175                 ja      loc_53A0
.text:000000000000517B
.text:000000000000517B loc_517B:                               ; CODE XREF: strintcmp+6B↓j
.text:000000000000517B                 add     rdi, 1
.text:000000000000517F                 add     rsi, 1
.text:0000000000005183                 movzx   eax, byte ptr [rsi]
.text:0000000000005186                 movzx   r8d, byte ptr [rdi]
.text:000000000000518A                 mov     edx, eax
.text:000000000000518C                 lea     ecx, [rax-30h]
.text:000000000000518F                 cmp     r8b, al
.text:0000000000005192                 jnz     loc_5308
.text:0000000000005198                 cmp     ecx, 9
.text:000000000000519B                 jbe     short loc_517B
.text:000000000000519D                 movzx   edx, r8b
.text:00000000000051A1
.text:00000000000051A1 loc_51A1:                               ; CODE XREF: strintcmp+1E2↓j
.text:00000000000051A1                 xor     r9d, r9d
.text:00000000000051A4                 cmp     ecx, 9
.text:00000000000051A7                 ja      loc_53A0
.text:00000000000051AD                 nop     dword ptr [rax]
.text:00000000000051B0
.text:00000000000051B0 loc_51B0:                               ; CODE XREF: strintcmp+205↓j
.text:00000000000051B0                 xor     ecx, ecx
.text:00000000000051B2                 nop     word ptr [rax+rax+00h]
.text:00000000000051B8
.text:00000000000051B8 loc_51B8:                               ; CODE XREF: strintcmp+97↓j
.text:00000000000051B8                 movzx   eax, byte ptr [rsi+rcx+1]
.text:00000000000051BD                 add     rcx, 1
.text:00000000000051C1                 sub     eax, 30h ; '0'
.text:00000000000051C4                 cmp     eax, 9
.text:00000000000051C7                 jbe     short loc_51B8
.text:00000000000051C9                 cmp     r9, rcx
.text:00000000000051CC                 jz      loc_53A3
.text:00000000000051D2                 sbb     eax, eax
.text:00000000000051D4                 or      eax, 1
.text:00000000000051D7                 retn
.text:00000000000051D7 ; ---------------------------------------------------------------------------
.text:00000000000051D8                 align 20h
.text:00000000000051E0
.text:00000000000051E0 loc_51E0:                               ; CODE XREF: strintcmp+B↑j
.text:00000000000051E0                                         ; strintcmp+BA↓j
.text:00000000000051E0                 add     rdi, 1
.text:00000000000051E4                 movzx   ecx, byte ptr [rdi]
.text:00000000000051E7                 cmp     cl, 30h ; '0'
.text:00000000000051EA                 jz      short loc_51E0
.text:00000000000051EC                 movzx   eax, cl
.text:00000000000051EF                 cmp     dl, 2Dh ; '-'
.text:00000000000051F2                 lea     r8d, [rax-30h]
.text:00000000000051F6                 jz      short loc_5260
.text:00000000000051F8                 cmp     r8d, 9
.text:00000000000051FC                 jbe     loc_53CE
.text:0000000000005202                 nop     word ptr [rax+rax+00h]
.text:0000000000005208
.text:0000000000005208 loc_5208:                               ; CODE XREF: strintcmp+1CF↓j
.text:0000000000005208                 cmp     dl, 30h ; '0'
.text:000000000000520B                 jz      loc_52F8
.text:0000000000005211                 sub     edx, 30h ; '0'
.text:0000000000005214                 xor     r9d, r9d
.text:0000000000005217                 cmp     edx, 9
.text:000000000000521A                 setbe   r9b
.text:000000000000521E                 mov     eax, r9d
.text:0000000000005221                 neg     eax
.text:0000000000005223                 retn
.text:0000000000005223 ; ---------------------------------------------------------------------------
.text:0000000000005224                 align 8
.text:0000000000005228
.text:0000000000005228 loc_5228:                               ; CODE XREF: strintcmp+14↑j
.text:0000000000005228                                         ; strintcmp+101↓j
.text:0000000000005228                 add     rsi, 1
.text:000000000000522C                 movzx   eax, byte ptr [rsi]
.text:000000000000522F                 cmp     al, 30h ; '0'
.text:0000000000005231                 jz      short loc_5228
.text:0000000000005233                 lea     edx, [rax-30h]
.text:0000000000005236                 mov     eax, 1
.text:000000000000523B                 cmp     edx, 9
.text:000000000000523E                 jbe     locret_5343
.text:0000000000005244
.text:0000000000005244 loc_5244:                               ; CODE XREF: strintcmp+220↓j
.text:0000000000005244                 cmp     r8b, 30h ; '0'
.text:0000000000005248                 jz      loc_5348
.text:000000000000524E                 sub     r8d, 30h ; '0'
.text:0000000000005252                 xor     eax, eax
.text:0000000000005254                 cmp     r8d, 9
.text:0000000000005258                 setbe   al
.text:000000000000525B                 retn
.text:000000000000525B ; ---------------------------------------------------------------------------
.text:000000000000525C                 align 20h
.text:0000000000005260
.text:0000000000005260 loc_5260:                               ; CODE XREF: strintcmp+C6↑j
.text:0000000000005260                                         ; strintcmp+13C↓j
.text:0000000000005260                 add     rsi, 1
.text:0000000000005264                 movzx   r9d, byte ptr [rsi]
.text:0000000000005268                 cmp     r9b, 30h ; '0'
.text:000000000000526C                 jz      short loc_5260
.text:000000000000526E                 cmp     cl, r9b
.text:0000000000005271                 jnz     loc_53B4
.text:0000000000005277                 cmp     r8d, 9
.text:000000000000527B                 lea     edx, [rax-30h]
.text:000000000000527E                 ja      short loc_52A1
.text:0000000000005280
.text:0000000000005280 loc_5280:                               ; CODE XREF: strintcmp+16F↓j
.text:0000000000005280                 add     rdi, 1
.text:0000000000005284                 add     rsi, 1
.text:0000000000005288                 movzx   eax, byte ptr [rsi]
.text:000000000000528B                 movzx   ecx, byte ptr [rdi]
.text:000000000000528E                 mov     r9d, eax
.text:0000000000005291                 lea     edx, [rax-30h]
.text:0000000000005294                 cmp     cl, al
.text:0000000000005296                 jnz     loc_5358
.text:000000000000529C                 cmp     edx, 9
.text:000000000000529F                 jbe     short loc_5280
.text:00000000000052A1
.text:00000000000052A1 loc_52A1:                               ; CODE XREF: strintcmp+14E↑j
.text:00000000000052A1                                         ; strintcmp+234↓j
.text:00000000000052A1                 xor     r10d, r10d
.text:00000000000052A4                 cmp     edx, 9
.text:00000000000052A7                 ja      loc_53A0
.text:00000000000052AD
.text:00000000000052AD loc_52AD:                               ; CODE XREF: strintcmp+255↓j
.text:00000000000052AD                 xor     edx, edx
.text:00000000000052AF                 nop
.text:00000000000052B0
.text:00000000000052B0 loc_52B0:                               ; CODE XREF: strintcmp+18F↓j
.text:00000000000052B0                 movzx   eax, byte ptr [rsi+rdx+1]
.text:00000000000052B5                 add     rdx, 1
.text:00000000000052B9                 sub     eax, 30h ; '0'
.text:00000000000052BC                 cmp     eax, 9
.text:00000000000052BF                 jbe     short loc_52B0
.text:00000000000052C1                 cmp     r10, rdx
.text:00000000000052C4                 jz      loc_53BD
.text:00000000000052CA                 sbb     eax, eax
.text:00000000000052CC                 and     eax, 2
.text:00000000000052CF                 sub     eax, 1
.text:00000000000052D2                 retn
.text:00000000000052D2 ; ---------------------------------------------------------------------------
.text:00000000000052D3                 align 8
.text:00000000000052D8
.text:00000000000052D8 loc_52D8:                               ; CODE XREF: strintcmp+2D↑j
.text:00000000000052D8                 add     rsi, 1
.text:00000000000052DC                 movzx   edx, byte ptr [rsi]
.text:00000000000052DF                 jmp     loc_515A
.text:00000000000052DF ; ---------------------------------------------------------------------------
.text:00000000000052E4                 align 8
.text:00000000000052E8
.text:00000000000052E8 loc_52E8:                               ; CODE XREF: strintcmp+24↑j
.text:00000000000052E8                 add     rdi, 1
.text:00000000000052EC                 movzx   r8d, byte ptr [rdi]
.text:00000000000052F0                 jmp     loc_5150
.text:00000000000052F0 ; ---------------------------------------------------------------------------
.text:00000000000052F5                 align 8
.text:00000000000052F8
.text:00000000000052F8 loc_52F8:                               ; CODE XREF: strintcmp+DB↑j
.text:00000000000052F8                 add     rsi, 1
.text:00000000000052FC                 movzx   edx, byte ptr [rsi]
.text:00000000000052FF                 jmp     loc_5208
.text:00000000000052FF ; ---------------------------------------------------------------------------
.text:0000000000005304                 align 8
.text:0000000000005308
.text:0000000000005308 loc_5308:                               ; CODE XREF: strintcmp+3C↑j
.text:0000000000005308                                         ; strintcmp+62↑j
.text:0000000000005308                 movzx   eax, r8b
.text:000000000000530C                 sub     eax, 30h ; '0'
.text:000000000000530F                 cmp     eax, 9
.text:0000000000005312                 ja      loc_51A1
.text:0000000000005318                 xor     r9d, r9d
.text:000000000000531B                 nop     dword ptr [rax+rax+00h]
.text:0000000000005320
.text:0000000000005320 loc_5320:                               ; CODE XREF: strintcmp+200↓j
.text:0000000000005320                 movzx   eax, byte ptr [rdi+r9+1]
.text:0000000000005326                 add     r9, 1
.text:000000000000532A                 sub     eax, 30h ; '0'
.text:000000000000532D                 cmp     eax, 9
.text:0000000000005330                 jbe     short loc_5320
.text:0000000000005332                 cmp     ecx, 9
.text:0000000000005335                 jbe     loc_51B0
.text:000000000000533B                 xor     eax, eax
.text:000000000000533D                 test    r9, r9
.text:0000000000005340                 setnz   al
.text:0000000000005343
.text:0000000000005343 locret_5343:                            ; CODE XREF: strintcmp+10E↑j
.text:0000000000005343                                         ; strintcmp+278↓j ...
.text:0000000000005343                 rep retn
.text:0000000000005343 ; ---------------------------------------------------------------------------
.text:0000000000005345                 align 8
.text:0000000000005348
.text:0000000000005348 loc_5348:                               ; CODE XREF: strintcmp+118↑j
.text:0000000000005348                 add     rdi, 1
.text:000000000000534C                 movzx   r8d, byte ptr [rdi]
.text:0000000000005350                 jmp     loc_5244
.text:0000000000005350 ; ---------------------------------------------------------------------------
.text:0000000000005355                 align 8
.text:0000000000005358
.text:0000000000005358 loc_5358:                               ; CODE XREF: strintcmp+166↑j
.text:0000000000005358                 movzx   r8d, cl
.text:000000000000535C                 sub     r8d, 30h ; '0'
.text:0000000000005360
.text:0000000000005360 loc_5360:                               ; CODE XREF: strintcmp+28B↓j
.text:0000000000005360                 cmp     r8d, 9
.text:0000000000005364                 ja      loc_52A1
.text:000000000000536A                 xor     r10d, r10d
.text:000000000000536D                 nop     dword ptr [rax]
.text:0000000000005370
.text:0000000000005370 loc_5370:                               ; CODE XREF: strintcmp+250↓j
.text:0000000000005370                 movzx   eax, byte ptr [rdi+r10+1]
.text:0000000000005376                 add     r10, 1
.text:000000000000537A                 sub     eax, 30h ; '0'
.text:000000000000537D                 cmp     eax, 9
.text:0000000000005380                 jbe     short loc_5370
.text:0000000000005382                 cmp     edx, 9
.text:0000000000005385                 jbe     loc_52AD
.text:000000000000538B                 xor     eax, eax
.text:000000000000538D                 test    r10, r10
.text:0000000000005390                 setnz   al
.text:0000000000005393                 neg     eax
.text:0000000000005395                 retn
.text:0000000000005395 ; ---------------------------------------------------------------------------
.text:0000000000005396                 align 20h
.text:00000000000053A0
.text:00000000000053A0 loc_53A0:                               ; CODE XREF: strintcmp+45↑j
.text:00000000000053A0                                         ; strintcmp+77↑j ...
.text:00000000000053A0                 xor     eax, eax
.text:00000000000053A2                 retn
.text:00000000000053A3 ; ---------------------------------------------------------------------------
.text:00000000000053A3
.text:00000000000053A3 loc_53A3:                               ; CODE XREF: strintcmp+9C↑j
.text:00000000000053A3                 xor     eax, eax
.text:00000000000053A5                 test    r9, r9
.text:00000000000053A8                 jz      short locret_5343
.text:00000000000053AA                 movzx   r9d, r8b
.text:00000000000053AE                 mov     eax, r9d
.text:00000000000053B1                 sub     eax, edx
.text:00000000000053B3                 retn
.text:00000000000053B4 ; ---------------------------------------------------------------------------
.text:00000000000053B4
.text:00000000000053B4 loc_53B4:                               ; CODE XREF: strintcmp+141↑j
.text:00000000000053B4                 movzx   eax, r9b
.text:00000000000053B8                 lea     edx, [rax-30h]
.text:00000000000053BB                 jmp     short loc_5360
.text:00000000000053BD ; ---------------------------------------------------------------------------
.text:00000000000053BD
.text:00000000000053BD loc_53BD:                               ; CODE XREF: strintcmp+194↑j
.text:00000000000053BD                 xor     eax, eax
.text:00000000000053BF                 test    r10, r10
.text:00000000000053C2                 jz      locret_5343
.text:00000000000053C8                 mov     eax, r9d
.text:00000000000053CB                 sub     eax, ecx
.text:00000000000053CD                 retn
.text:00000000000053CE ; ---------------------------------------------------------------------------
.text:00000000000053CE
.text:00000000000053CE loc_53CE:                               ; CODE XREF: strintcmp+CC↑j
.text:00000000000053CE                 mov     eax, 0FFFFFFFFh
.text:00000000000053D3                 retn
.text:00000000000053D3 ; } // starts at 5130
.text:00000000000053D3 strintcmp       endp
.text:00000000000053D3
.text:00000000000053D3 ; ---------------------------------------------------------------------------
.text:00000000000053D4                 align 20h
.text:00000000000053E0
.text:00000000000053E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053E0
.text:00000000000053E0
.text:00000000000053E0 ; __int64 __fastcall verror_at_line(int status, int errnum, char *fname, unsigned int lineno)
.text:00000000000053E0                 public verror_at_line
.text:00000000000053E0 verror_at_line  proc near               ; CODE XREF: verror+A↓j
.text:00000000000053E0 ; __unwind {
.text:00000000000053E0                 push    r14
.text:00000000000053E2                 push    r13
.text:00000000000053E4                 mov     r13d, esi
.text:00000000000053E7                 push    r12
.text:00000000000053E9                 push    rbp
.text:00000000000053EA                 mov     r12d, edi
.text:00000000000053ED                 push    rbx
.text:00000000000053EE                 mov     rsi, r9
.text:00000000000053F1                 mov     rdi, r8
.text:00000000000053F4                 mov     rbp, rdx
.text:00000000000053F7                 mov     r14d, ecx
.text:00000000000053FA                 call    xvasprintf
.text:00000000000053FF                 test    rax, rax
.text:0000000000005402                 jz      short loc_5467
.text:0000000000005404                 test    rbp, rbp
.text:0000000000005407                 mov     rbx, rax
.text:000000000000540A                 jz      short loc_5440
.text:000000000000540C                 lea     r8, format+4    ; format
.text:0000000000005413                 mov     edi, r12d       ; status
.text:0000000000005416                 mov     r9, rax
.text:0000000000005419                 mov     ecx, r14d       ; lineno
.text:000000000000541C                 mov     rdx, rbp        ; fname
.text:000000000000541F                 mov     esi, r13d       ; errnum
.text:0000000000005422                 xor     eax, eax
.text:0000000000005424                 call    _error_at_line
.text:0000000000005429                 mov     rdi, rbx        ; ptr
.text:000000000000542C                 pop     rbx
.text:000000000000542D                 pop     rbp
.text:000000000000542E                 pop     r12
.text:0000000000005430                 pop     r13
.text:0000000000005432                 pop     r14
.text:0000000000005434                 jmp     _free
.text:0000000000005434 ; ---------------------------------------------------------------------------
.text:0000000000005439                 align 20h
.text:0000000000005440
.text:0000000000005440 loc_5440:                               ; CODE XREF: verror_at_line+2A↑j
.text:0000000000005440                 lea     rdx, format+4   ; format
.text:0000000000005447                 mov     edi, r12d       ; status
.text:000000000000544A                 mov     rcx, rax
.text:000000000000544D                 mov     esi, r13d       ; errnum
.text:0000000000005450                 xor     eax, eax
.text:0000000000005452                 call    _error
.text:0000000000005457                 mov     rdi, rbx        ; ptr
.text:000000000000545A                 pop     rbx
.text:000000000000545B                 pop     rbp
.text:000000000000545C                 pop     r12
.text:000000000000545E                 pop     r13
.text:0000000000005460                 pop     r14
.text:0000000000005462                 jmp     _free
.text:0000000000005467 ; ---------------------------------------------------------------------------
.text:0000000000005467
.text:0000000000005467 loc_5467:                               ; CODE XREF: verror_at_line+22↑j
.text:0000000000005467                 lea     rsi, aUnableToDispla ; "unable to display error message"
.text:000000000000546E                 mov     edx, 5          ; category
.text:0000000000005473                 xor     edi, edi        ; domainname
.text:0000000000005475                 call    _dcgettext
.text:000000000000547A                 mov     rbx, rax
.text:000000000000547D                 call    ___errno_location
.text:0000000000005482                 mov     esi, [rax]      ; errnum
.text:0000000000005484                 mov     rdx, rbx        ; format
.text:0000000000005487                 xor     edi, edi        ; status
.text:0000000000005489                 xor     eax, eax
.text:000000000000548B                 call    _error
.text:0000000000005490                 call    _abort
.text:0000000000005490 ; } // starts at 53E0
.text:0000000000005490 verror_at_line  endp
.text:0000000000005490
.text:0000000000005490 ; ---------------------------------------------------------------------------
.text:0000000000005495                 align 20h
.text:00000000000054A0
.text:00000000000054A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054A0
.text:00000000000054A0
.text:00000000000054A0                 public verror
.text:00000000000054A0 verror          proc near               ; CODE XREF: test_syntax_error+9B↑p
.text:00000000000054A0 ; __unwind {
.text:00000000000054A0                 mov     r8, rdx
.text:00000000000054A3                 mov     r9, rcx
.text:00000000000054A6                 xor     edx, edx        ; fname
.text:00000000000054A8                 xor     ecx, ecx        ; lineno
.text:00000000000054AA                 jmp     verror_at_line
.text:00000000000054AA ; } // starts at 54A0
.text:00000000000054AA verror          endp
.text:00000000000054AA
.text:00000000000054AA ; ---------------------------------------------------------------------------
.text:00000000000054AF                 align 10h
.text:00000000000054B0
.text:00000000000054B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054B0
.text:00000000000054B0
.text:00000000000054B0                 public xmalloc
.text:00000000000054B0 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:00000000000054B0                                         ; quotearg_alloc_mem+81↑p ...
.text:00000000000054B0 ; __unwind {
.text:00000000000054B0                 push    rbx
.text:00000000000054B1                 mov     rbx, rdi
.text:00000000000054B4                 call    _malloc
.text:00000000000054B9                 test    rax, rax
.text:00000000000054BC                 jnz     short loc_54C3
.text:00000000000054BE                 test    rbx, rbx
.text:00000000000054C1                 jnz     short loc_54C5
.text:00000000000054C3
.text:00000000000054C3 loc_54C3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000054C3                 pop     rbx
.text:00000000000054C4                 retn
.text:00000000000054C5 ; ---------------------------------------------------------------------------
.text:00000000000054C5
.text:00000000000054C5 loc_54C5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000054C5                 call    xalloc_die
.text:00000000000054C5 ; } // starts at 54B0
.text:00000000000054C5 xmalloc         endp
.text:00000000000054C5
.text:00000000000054C5 ; ---------------------------------------------------------------------------
.text:00000000000054CA                 align 10h
.text:00000000000054D0
.text:00000000000054D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054D0
.text:00000000000054D0 ; Attributes: info_from_lumina
.text:00000000000054D0
.text:00000000000054D0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000054D0                 public xnmalloc
.text:00000000000054D0 xnmalloc        proc near
.text:00000000000054D0 ; __unwind {
.text:00000000000054D0                 mov     rax, rdi
.text:00000000000054D3                 mul     rsi
.text:00000000000054D6                 mov     rdi, rax
.text:00000000000054D9                 seto    al
.text:00000000000054DC                 test    rdi, rdi
.text:00000000000054DF                 js      short loc_54EB
.text:00000000000054E1                 movzx   eax, al
.text:00000000000054E4                 test    rax, rax
.text:00000000000054E7                 jnz     short loc_54EB
.text:00000000000054E9                 jmp     short xmalloc
.text:00000000000054EB ; ---------------------------------------------------------------------------
.text:00000000000054EB
.text:00000000000054EB loc_54EB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000054EB                                         ; xnmalloc+17↑j
.text:00000000000054EB                 sub     rsp, 8
.text:00000000000054EF                 call    xalloc_die
.text:00000000000054EF ; } // starts at 54D0
.text:00000000000054EF xnmalloc        endp
.text:00000000000054EF
.text:00000000000054EF ; ---------------------------------------------------------------------------
.text:00000000000054F4                 align 20h
.text:0000000000005500
.text:0000000000005500 ; =============== S U B R O U T I N E =======================================
.text:0000000000005500
.text:0000000000005500
.text:0000000000005500                 public xcharalloc
.text:0000000000005500 xcharalloc      proc near
.text:0000000000005500 ; __unwind {
.text:0000000000005500                 jmp     short xmalloc
.text:0000000000005500 ; } // starts at 5500
.text:0000000000005500 xcharalloc      endp
.text:0000000000005500
.text:0000000000005500 ; ---------------------------------------------------------------------------
.text:0000000000005502                 align 10h
.text:0000000000005510
.text:0000000000005510 ; =============== S U B R O U T I N E =======================================
.text:0000000000005510
.text:0000000000005510 ; Attributes: info_from_lumina
.text:0000000000005510
.text:0000000000005510 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000005510                 public xrealloc
.text:0000000000005510 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000005510                                         ; quotearg_n_options+182↑p ...
.text:0000000000005510 ; __unwind {
.text:0000000000005510                 test    rsi, rsi
.text:0000000000005513                 push    rbx
.text:0000000000005514                 mov     rbx, rsi
.text:0000000000005517                 jnz     short loc_551E
.text:0000000000005519                 test    rdi, rdi
.text:000000000000551C                 jnz     short loc_5538
.text:000000000000551E
.text:000000000000551E loc_551E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000551E                 mov     rsi, rbx        ; size
.text:0000000000005521                 call    _realloc
.text:0000000000005526                 test    rax, rax
.text:0000000000005529                 jnz     short loc_5530
.text:000000000000552B                 test    rbx, rbx
.text:000000000000552E                 jnz     short loc_5541
.text:0000000000005530
.text:0000000000005530 loc_5530:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000005530                 pop     rbx
.text:0000000000005531                 retn
.text:0000000000005531 ; ---------------------------------------------------------------------------
.text:0000000000005532                 align 8
.text:0000000000005538
.text:0000000000005538 loc_5538:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000005538                 call    _free
.text:000000000000553D                 xor     eax, eax
.text:000000000000553F                 pop     rbx
.text:0000000000005540                 retn
.text:0000000000005541 ; ---------------------------------------------------------------------------
.text:0000000000005541
.text:0000000000005541 loc_5541:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000005541                 call    xalloc_die
.text:0000000000005541 ; } // starts at 5510
.text:0000000000005541 xrealloc        endp
.text:0000000000005541
.text:0000000000005541 ; ---------------------------------------------------------------------------
.text:0000000000005546                 align 10h
.text:0000000000005550
.text:0000000000005550 ; =============== S U B R O U T I N E =======================================
.text:0000000000005550
.text:0000000000005550 ; Attributes: info_from_lumina
.text:0000000000005550
.text:0000000000005550 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000005550                 public xnrealloc
.text:0000000000005550 xnrealloc       proc near
.text:0000000000005550 ; __unwind {
.text:0000000000005550                 mov     rax, rsi
.text:0000000000005553                 mul     rdx
.text:0000000000005556                 mov     rsi, rax
.text:0000000000005559                 seto    al
.text:000000000000555C                 test    rsi, rsi
.text:000000000000555F                 js      short loc_556B
.text:0000000000005561                 movzx   eax, al
.text:0000000000005564                 test    rax, rax
.text:0000000000005567                 jnz     short loc_556B
.text:0000000000005569                 jmp     short xrealloc
.text:000000000000556B ; ---------------------------------------------------------------------------
.text:000000000000556B
.text:000000000000556B loc_556B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000556B                                         ; xnrealloc+17↑j
.text:000000000000556B                 sub     rsp, 8
.text:000000000000556F                 call    xalloc_die
.text:000000000000556F ; } // starts at 5550
.text:000000000000556F xnrealloc       endp
.text:000000000000556F
.text:000000000000556F ; ---------------------------------------------------------------------------
.text:0000000000005574                 align 20h
.text:0000000000005580
.text:0000000000005580 ; =============== S U B R O U T I N E =======================================
.text:0000000000005580
.text:0000000000005580 ; Attributes: info_from_lumina
.text:0000000000005580
.text:0000000000005580 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005580                 public x2nrealloc
.text:0000000000005580 x2nrealloc      proc near
.text:0000000000005580 ; __unwind {
.text:0000000000005580                 test    rdi, rdi
.text:0000000000005583                 mov     r9, rdx
.text:0000000000005586                 mov     rcx, [rsi]
.text:0000000000005589                 jz      short loc_55C0
.text:000000000000558B                 xor     edx, edx
.text:000000000000558D                 mov     rax, 5555555555555554h
.text:0000000000005597                 div     r9
.text:000000000000559A                 cmp     rax, rcx
.text:000000000000559D                 jbe     short loc_55DB
.text:000000000000559F                 mov     rax, rcx
.text:00000000000055A2                 shr     rax, 1
.text:00000000000055A5                 lea     rcx, [rax+rcx+1]
.text:00000000000055AA
.text:00000000000055AA loc_55AA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000055AA                 mov     [rsi], rcx
.text:00000000000055AD                 imul    rcx, r9
.text:00000000000055B1                 mov     rsi, rcx
.text:00000000000055B4                 jmp     xrealloc
.text:00000000000055B4 ; ---------------------------------------------------------------------------
.text:00000000000055B9                 align 20h
.text:00000000000055C0
.text:00000000000055C0 loc_55C0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000055C0                 test    rcx, rcx
.text:00000000000055C3                 jz      short loc_55E8
.text:00000000000055C5
.text:00000000000055C5 loc_55C5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000055C5                 mov     rax, rcx
.text:00000000000055C8                 mul     r9
.text:00000000000055CB                 seto    dl
.text:00000000000055CE                 test    rax, rax
.text:00000000000055D1                 movzx   edx, dl
.text:00000000000055D4                 js      short loc_55DB
.text:00000000000055D6                 test    rdx, rdx
.text:00000000000055D9                 jz      short loc_55AA
.text:00000000000055DB
.text:00000000000055DB loc_55DB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000055DB                                         ; x2nrealloc+54↑j
.text:00000000000055DB                 sub     rsp, 8
.text:00000000000055DF                 call    xalloc_die
.text:00000000000055DF ; ---------------------------------------------------------------------------
.text:00000000000055E4                 align 8
.text:00000000000055E8
.text:00000000000055E8 loc_55E8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000055E8                 xor     edx, edx
.text:00000000000055EA                 mov     eax, 80h
.text:00000000000055EF                 xor     r8d, r8d
.text:00000000000055F2                 div     r9
.text:00000000000055F5                 test    rax, rax
.text:00000000000055F8                 setz    r8b
.text:00000000000055FC                 lea     rcx, [r8+rax]
.text:0000000000005600                 jmp     short loc_55C5
.text:0000000000005600 ; } // starts at 5580
.text:0000000000005600 x2nrealloc      endp
.text:0000000000005600
.text:0000000000005600 ; ---------------------------------------------------------------------------
.text:0000000000005602                 align 10h
.text:0000000000005610
.text:0000000000005610 ; =============== S U B R O U T I N E =======================================
.text:0000000000005610
.text:0000000000005610 ; Attributes: info_from_lumina
.text:0000000000005610
.text:0000000000005610 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000005610                 public x2realloc
.text:0000000000005610 x2realloc       proc near
.text:0000000000005610 ; __unwind {
.text:0000000000005610                 test    rdi, rdi
.text:0000000000005613                 mov     rax, [rsi]
.text:0000000000005616                 jz      short loc_5640
.text:0000000000005618                 mov     rdx, 5555555555555553h
.text:0000000000005622                 cmp     rax, rdx
.text:0000000000005625                 ja      short loc_5651
.text:0000000000005627                 mov     rdx, rax
.text:000000000000562A                 shr     rdx, 1
.text:000000000000562D                 lea     rax, [rdx+rax+1]
.text:0000000000005632
.text:0000000000005632 loc_5632:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000005632                 mov     [rsi], rax
.text:0000000000005635                 mov     rsi, rax
.text:0000000000005638                 jmp     xrealloc
.text:0000000000005638 ; ---------------------------------------------------------------------------
.text:000000000000563D                 align 20h
.text:0000000000005640
.text:0000000000005640 loc_5640:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000005640                 test    rax, rax
.text:0000000000005643                 mov     edx, 80h
.text:0000000000005648                 cmovz   rax, rdx
.text:000000000000564C                 test    rax, rax
.text:000000000000564F                 jns     short loc_5632
.text:0000000000005651
.text:0000000000005651 loc_5651:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005651                 sub     rsp, 8
.text:0000000000005655                 call    xalloc_die
.text:0000000000005655 ; } // starts at 5610
.text:0000000000005655 x2realloc       endp
.text:0000000000005655
.text:0000000000005655 ; ---------------------------------------------------------------------------
.text:000000000000565A                 align 20h
.text:0000000000005660
.text:0000000000005660 ; =============== S U B R O U T I N E =======================================
.text:0000000000005660
.text:0000000000005660
.text:0000000000005660 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005660                 public xzalloc
.text:0000000000005660 xzalloc         proc near
.text:0000000000005660 ; __unwind {
.text:0000000000005660                 push    rbx
.text:0000000000005661                 mov     rbx, rdi
.text:0000000000005664                 call    xmalloc
.text:0000000000005669                 mov     rdx, rbx        ; n
.text:000000000000566C                 xor     esi, esi        ; c
.text:000000000000566E                 mov     rdi, rax        ; s
.text:0000000000005671                 pop     rbx
.text:0000000000005672                 jmp     _memset
.text:0000000000005672 ; } // starts at 5660
.text:0000000000005672 xzalloc         endp
.text:0000000000005672
.text:0000000000005672 ; ---------------------------------------------------------------------------
.text:0000000000005677                 align 20h
.text:0000000000005680
.text:0000000000005680 ; =============== S U B R O U T I N E =======================================
.text:0000000000005680
.text:0000000000005680 ; Attributes: info_from_lumina
.text:0000000000005680
.text:0000000000005680 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005680                 public xcalloc
.text:0000000000005680 xcalloc         proc near
.text:0000000000005680 ; __unwind {
.text:0000000000005680                 mov     rax, rdi
.text:0000000000005683                 sub     rsp, 8
.text:0000000000005687                 mul     rsi
.text:000000000000568A                 seto    dl
.text:000000000000568D                 test    rax, rax
.text:0000000000005690                 js      short loc_56A9
.text:0000000000005692                 movzx   edx, dl
.text:0000000000005695                 test    rdx, rdx
.text:0000000000005698                 jnz     short loc_56A9
.text:000000000000569A                 call    _calloc
.text:000000000000569F                 test    rax, rax
.text:00000000000056A2                 jz      short loc_56A9
.text:00000000000056A4                 add     rsp, 8
.text:00000000000056A8                 retn
.text:00000000000056A9 ; ---------------------------------------------------------------------------
.text:00000000000056A9
.text:00000000000056A9 loc_56A9:                               ; CODE XREF: xcalloc+10↑j
.text:00000000000056A9                                         ; xcalloc+18↑j ...
.text:00000000000056A9                 call    xalloc_die
.text:00000000000056A9 ; } // starts at 5680
.text:00000000000056A9 xcalloc         endp
.text:00000000000056A9
.text:00000000000056A9 ; ---------------------------------------------------------------------------
.text:00000000000056AE                 align 10h
.text:00000000000056B0
.text:00000000000056B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056B0
.text:00000000000056B0 ; Attributes: info_from_lumina
.text:00000000000056B0
.text:00000000000056B0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000056B0                 public xmemdup
.text:00000000000056B0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000056B0                                         ; xstrdup+11↓j
.text:00000000000056B0 ; __unwind {
.text:00000000000056B0                 push    rbp
.text:00000000000056B1                 push    rbx
.text:00000000000056B2                 mov     rbp, rdi
.text:00000000000056B5                 mov     rdi, rsi
.text:00000000000056B8                 mov     rbx, rsi
.text:00000000000056BB                 sub     rsp, 8
.text:00000000000056BF                 call    xmalloc
.text:00000000000056C4                 add     rsp, 8
.text:00000000000056C8                 mov     rdx, rbx        ; n
.text:00000000000056CB                 mov     rsi, rbp        ; src
.text:00000000000056CE                 pop     rbx
.text:00000000000056CF                 pop     rbp
.text:00000000000056D0                 mov     rdi, rax        ; dest
.text:00000000000056D3                 jmp     _memcpy
.text:00000000000056D3 ; } // starts at 56B0
.text:00000000000056D3 xmemdup         endp
.text:00000000000056D3
.text:00000000000056D3 ; ---------------------------------------------------------------------------
.text:00000000000056D8                 align 20h
.text:00000000000056E0
.text:00000000000056E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056E0
.text:00000000000056E0
.text:00000000000056E0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000056E0                 public xstrdup
.text:00000000000056E0 xstrdup         proc near
.text:00000000000056E0 ; __unwind {
.text:00000000000056E0                 push    rbx
.text:00000000000056E1                 mov     rbx, rdi
.text:00000000000056E4                 call    _strlen
.text:00000000000056E9                 mov     rdi, rbx        ; src
.text:00000000000056EC                 lea     rsi, [rax+1]    ; n
.text:00000000000056F0                 pop     rbx
.text:00000000000056F1                 jmp     short xmemdup
.text:00000000000056F1 ; } // starts at 56E0
.text:00000000000056F1 xstrdup         endp
.text:00000000000056F1
.text:00000000000056F1 ; ---------------------------------------------------------------------------
.text:00000000000056F3                 align 20h
.text:0000000000005700
.text:0000000000005700 ; =============== S U B R O U T I N E =======================================
.text:0000000000005700
.text:0000000000005700 ; Attributes: noreturn info_from_lumina
.text:0000000000005700
.text:0000000000005700 ; void __cdecl xalloc_die()
.text:0000000000005700                 public xalloc_die
.text:0000000000005700 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_4976↑p
.text:0000000000005700                                         ; xmalloc:loc_54C5↑p ...
.text:0000000000005700 ; __unwind {
.text:0000000000005700                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005707                 sub     rsp, 8
.text:000000000000570B                 mov     edx, 5          ; category
.text:0000000000005710                 xor     edi, edi        ; domainname
.text:0000000000005712                 call    _dcgettext
.text:0000000000005717                 mov     edi, cs:exit_failure ; status
.text:000000000000571D                 lea     rdx, format+4   ; format
.text:0000000000005724                 mov     rcx, rax
.text:0000000000005727                 xor     esi, esi        ; errnum
.text:0000000000005729                 xor     eax, eax
.text:000000000000572B                 call    _error
.text:0000000000005730                 call    _abort
.text:0000000000005730 ; } // starts at 5700
.text:0000000000005730 xalloc_die      endp
.text:0000000000005730
.text:0000000000005730 ; ---------------------------------------------------------------------------
.text:0000000000005735                 align 20h
.text:0000000000005740
.text:0000000000005740 ; =============== S U B R O U T I N E =======================================
.text:0000000000005740
.text:0000000000005740
.text:0000000000005740 xstrcat         proc near               ; CODE XREF: xvasprintf:loc_58DA↓p
.text:0000000000005740
.text:0000000000005740 var_58          = xmmword ptr -58h
.text:0000000000005740 var_48          = qword ptr -48h
.text:0000000000005740 var_40          = qword ptr -40h
.text:0000000000005740
.text:0000000000005740 ; __unwind {
.text:0000000000005740                 push    r15
.text:0000000000005742                 push    r14
.text:0000000000005744                 push    r13
.text:0000000000005746                 push    r12
.text:0000000000005748                 push    rbp
.text:0000000000005749                 push    rbx
.text:000000000000574A                 sub     rsp, 28h
.text:000000000000574E                 mov     rax, fs:28h
.text:0000000000005757                 mov     [rsp+58h+var_40], rax
.text:000000000000575C                 xor     eax, eax
.text:000000000000575E                 test    rdi, rdi
.text:0000000000005761                 movdqu  xmm0, xmmword ptr [rsi]
.text:0000000000005765                 movups  [rsp+58h+var_58], xmm0
.text:0000000000005769                 mov     r14, [rsi+10h]
.text:000000000000576D                 mov     [rsp+58h+var_48], r14
.text:0000000000005772                 jz      loc_5820
.text:0000000000005778                 mov     r12, rdi
.text:000000000000577B                 mov     r15, rsi
.text:000000000000577E                 mov     rbp, rdi
.text:0000000000005781                 xor     ebx, ebx
.text:0000000000005783                 mov     r13, 0FFFFFFFFFFFFFFFFh
.text:000000000000578A
.text:000000000000578A loc_578A:                               ; CODE XREF: xstrcat+74↓j
.text:000000000000578A                 mov     edx, dword ptr [rsp+58h+var_58]
.text:000000000000578D                 cmp     edx, 2Fh ; '/'
.text:0000000000005790                 ja      loc_5870
.text:0000000000005796                 mov     eax, edx
.text:0000000000005798                 add     edx, 8
.text:000000000000579B                 add     rax, r14
.text:000000000000579E                 mov     dword ptr [rsp+58h+var_58], edx
.text:00000000000057A1
.text:00000000000057A1 loc_57A1:                               ; CODE XREF: xstrcat+13E↓j
.text:00000000000057A1                 mov     rdi, [rax]      ; s
.text:00000000000057A4                 call    _strlen
.text:00000000000057A9                 add     rbx, rax
.text:00000000000057AC                 cmovb   rbx, r13
.text:00000000000057B0                 sub     rbp, 1
.text:00000000000057B4                 jnz     short loc_578A
.text:00000000000057B6                 cmp     rbx, 7FFFFFFFh
.text:00000000000057BD                 ja      loc_5860
.text:00000000000057C3                 lea     rdi, [rbx+1]
.text:00000000000057C7                 call    xmalloc
.text:00000000000057CC                 mov     r14, rax
.text:00000000000057CF                 mov     rbx, rax
.text:00000000000057D2                 jmp     short loc_5805
.text:00000000000057D4 ; ---------------------------------------------------------------------------
.text:00000000000057D4
.text:00000000000057D4 loc_57D4:                               ; CODE XREF: xstrcat+CB↓j
.text:00000000000057D4                 mov     eax, edx
.text:00000000000057D6                 add     rax, [r15+10h]
.text:00000000000057DA                 add     edx, 8
.text:00000000000057DD                 mov     [r15], edx
.text:00000000000057E0
.text:00000000000057E0 loc_57E0:                               ; CODE XREF: xstrcat+D9↓j
.text:00000000000057E0                 mov     r13, [rax]
.text:00000000000057E3                 mov     rdi, r13        ; s
.text:00000000000057E6                 call    _strlen
.text:00000000000057EB                 mov     rdi, rbx        ; dest
.text:00000000000057EE                 mov     rbp, rax
.text:00000000000057F1                 mov     rdx, rax        ; n
.text:00000000000057F4                 mov     rsi, r13        ; src
.text:00000000000057F7                 add     rbx, rbp
.text:00000000000057FA                 call    _memcpy
.text:00000000000057FF                 sub     r12, 1
.text:0000000000005803                 jz      short loc_5830
.text:0000000000005805
.text:0000000000005805 loc_5805:                               ; CODE XREF: xstrcat+92↑j
.text:0000000000005805                 mov     edx, [r15]
.text:0000000000005808                 cmp     edx, 2Fh ; '/'
.text:000000000000580B                 jbe     short loc_57D4
.text:000000000000580D                 mov     rax, [r15+8]
.text:0000000000005811                 lea     rdx, [rax+8]
.text:0000000000005815                 mov     [r15+8], rdx
.text:0000000000005819                 jmp     short loc_57E0
.text:0000000000005819 ; ---------------------------------------------------------------------------
.text:000000000000581B                 align 20h
.text:0000000000005820
.text:0000000000005820 loc_5820:                               ; CODE XREF: xstrcat+32↑j
.text:0000000000005820                 mov     edi, 1
.text:0000000000005825                 call    xmalloc
.text:000000000000582A                 mov     rbx, rax
.text:000000000000582D                 mov     r14, rax
.text:0000000000005830
.text:0000000000005830 loc_5830:                               ; CODE XREF: xstrcat+C3↑j
.text:0000000000005830                 mov     byte ptr [rbx], 0
.text:0000000000005833
.text:0000000000005833 loc_5833:                               ; CODE XREF: xstrcat+12E↓j
.text:0000000000005833                 mov     rcx, [rsp+58h+var_40]
.text:0000000000005838                 xor     rcx, fs:28h
.text:0000000000005841                 mov     rax, r14
.text:0000000000005844                 jnz     short loc_5855
.text:0000000000005846                 add     rsp, 28h
.text:000000000000584A                 pop     rbx
.text:000000000000584B                 pop     rbp
.text:000000000000584C                 pop     r12
.text:000000000000584E                 pop     r13
.text:0000000000005850                 pop     r14
.text:0000000000005852                 pop     r15
.text:0000000000005854                 retn
.text:0000000000005855 ; ---------------------------------------------------------------------------
.text:0000000000005855
.text:0000000000005855 loc_5855:                               ; CODE XREF: xstrcat+104↑j
.text:0000000000005855                 call    ___stack_chk_fail
.text:0000000000005855 ; ---------------------------------------------------------------------------
.text:000000000000585A                 align 20h
.text:0000000000005860
.text:0000000000005860 loc_5860:                               ; CODE XREF: xstrcat+7D↑j
.text:0000000000005860                 call    ___errno_location
.text:0000000000005865                 xor     r14d, r14d
.text:0000000000005868                 mov     dword ptr [rax], 4Bh ; 'K'
.text:000000000000586E                 jmp     short loc_5833
.text:0000000000005870 ; ---------------------------------------------------------------------------
.text:0000000000005870
.text:0000000000005870 loc_5870:                               ; CODE XREF: xstrcat+50↑j
.text:0000000000005870                 mov     rax, qword ptr [rsp+58h+var_58+8]
.text:0000000000005875                 lea     rdx, [rax+8]
.text:0000000000005879                 mov     qword ptr [rsp+58h+var_58+8], rdx
.text:000000000000587E                 jmp     loc_57A1
.text:000000000000587E ; } // starts at 5740
.text:000000000000587E xstrcat         endp
.text:000000000000587E
.text:000000000000587E ; ---------------------------------------------------------------------------
.text:0000000000005883                 align 10h
.text:0000000000005890
.text:0000000000005890 ; =============== S U B R O U T I N E =======================================
.text:0000000000005890
.text:0000000000005890
.text:0000000000005890                 public xvasprintf
.text:0000000000005890 xvasprintf      proc near               ; CODE XREF: verror_at_line+1A↑p
.text:0000000000005890
.text:0000000000005890 var_18          = qword ptr -18h
.text:0000000000005890 var_10          = qword ptr -10h
.text:0000000000005890
.text:0000000000005890 ; __unwind {
.text:0000000000005890                 sub     rsp, 18h
.text:0000000000005894                 mov     rax, fs:28h
.text:000000000000589D                 mov     [rsp+18h+var_10], rax
.text:00000000000058A2                 xor     eax, eax
.text:00000000000058A4                 movzx   eax, byte ptr [rdi]
.text:00000000000058A7                 test    al, al
.text:00000000000058A9                 jz      short loc_5926
.text:00000000000058AB                 cmp     al, 25h ; '%'
.text:00000000000058AD                 mov     r8, rdi
.text:00000000000058B0                 jnz     short loc_58E8
.text:00000000000058B2                 cmp     byte ptr [rdi+1], 73h ; 's'
.text:00000000000058B6                 jnz     short loc_58E8
.text:00000000000058B8                 xor     edi, edi
.text:00000000000058BA                 jmp     short loc_58CD
.text:00000000000058BA ; ---------------------------------------------------------------------------
.text:00000000000058BC                 align 20h
.text:00000000000058C0
.text:00000000000058C0 loc_58C0:                               ; CODE XREF: xvasprintf+48↓j
.text:00000000000058C0                 cmp     cl, 25h ; '%'
.text:00000000000058C3                 jnz     short loc_58E8
.text:00000000000058C5                 cmp     byte ptr [r8+rdi*2+1], 73h ; 's'
.text:00000000000058CB                 jnz     short loc_58E8
.text:00000000000058CD
.text:00000000000058CD loc_58CD:                               ; CODE XREF: xvasprintf+2A↑j
.text:00000000000058CD                 add     rdi, 1
.text:00000000000058D1                 movzx   ecx, byte ptr [r8+rdi*2]
.text:00000000000058D6                 test    cl, cl
.text:00000000000058D8                 jnz     short loc_58C0
.text:00000000000058DA
.text:00000000000058DA loc_58DA:                               ; CODE XREF: xvasprintf+98↓j
.text:00000000000058DA                 call    xstrcat
.text:00000000000058DF                 jmp     short loc_58FE
.text:00000000000058DF ; ---------------------------------------------------------------------------
.text:00000000000058E1                 align 8
.text:00000000000058E8
.text:00000000000058E8 loc_58E8:                               ; CODE XREF: xvasprintf+20↑j
.text:00000000000058E8                                         ; xvasprintf+26↑j ...
.text:00000000000058E8                 mov     rdx, rsi
.text:00000000000058EB                 mov     rdi, rsp
.text:00000000000058EE                 mov     rsi, r8
.text:00000000000058F1                 call    u16_u16_vasprintf
.text:00000000000058F6                 test    eax, eax
.text:00000000000058F8                 js      short loc_5918
.text:00000000000058FA                 mov     rax, [rsp+18h+var_18]
.text:00000000000058FE
.text:00000000000058FE loc_58FE:                               ; CODE XREF: xvasprintf+4F↑j
.text:00000000000058FE                                         ; xvasprintf+94↓j
.text:00000000000058FE                 mov     rdx, [rsp+18h+var_10]
.text:0000000000005903                 xor     rdx, fs:28h
.text:000000000000590C                 jnz     short loc_592A
.text:000000000000590E                 add     rsp, 18h
.text:0000000000005912                 retn
.text:0000000000005912 ; ---------------------------------------------------------------------------
.text:0000000000005913                 align 8
.text:0000000000005918
.text:0000000000005918 loc_5918:                               ; CODE XREF: xvasprintf+68↑j
.text:0000000000005918                 call    ___errno_location
.text:000000000000591D                 cmp     dword ptr [rax], 0Ch
.text:0000000000005920                 jz      short loc_592F
.text:0000000000005922                 xor     eax, eax
.text:0000000000005924                 jmp     short loc_58FE
.text:0000000000005926 ; ---------------------------------------------------------------------------
.text:0000000000005926
.text:0000000000005926 loc_5926:                               ; CODE XREF: xvasprintf+19↑j
.text:0000000000005926                 xor     edi, edi
.text:0000000000005928                 jmp     short loc_58DA
.text:000000000000592A ; ---------------------------------------------------------------------------
.text:000000000000592A
.text:000000000000592A loc_592A:                               ; CODE XREF: xvasprintf+7C↑j
.text:000000000000592A                 call    ___stack_chk_fail
.text:000000000000592F ; ---------------------------------------------------------------------------
.text:000000000000592F
.text:000000000000592F loc_592F:                               ; CODE XREF: xvasprintf+90↑j
.text:000000000000592F                 call    xalloc_die
.text:000000000000592F ; } // starts at 5890
.text:000000000000592F xvasprintf      endp
.text:000000000000592F
.text:000000000000592F ; ---------------------------------------------------------------------------
.text:0000000000005934                 align 20h
.text:0000000000005940
.text:0000000000005940 ; =============== S U B R O U T I N E =======================================
.text:0000000000005940
.text:0000000000005940 ; Attributes: info_from_lumina
.text:0000000000005940
.text:0000000000005940 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005940                 public rpl_mbrtowc
.text:0000000000005940 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005940
.text:0000000000005940 pwc             = dword ptr -34h
.text:0000000000005940 var_30          = qword ptr -30h
.text:0000000000005940
.text:0000000000005940 ; __unwind {
.text:0000000000005940                 push    r13
.text:0000000000005942                 push    r12
.text:0000000000005944                 mov     r13, rsi
.text:0000000000005947                 push    rbp
.text:0000000000005948                 push    rbx
.text:0000000000005949                 mov     rbx, rdi
.text:000000000000594C                 mov     r12, rdx
.text:000000000000594F                 sub     rsp, 18h
.text:0000000000005953                 mov     rax, fs:28h
.text:000000000000595C                 mov     [rsp+38h+var_30], rax
.text:0000000000005961                 xor     eax, eax
.text:0000000000005963                 lea     rax, [rsp+38h+pwc]
.text:0000000000005968                 test    rdi, rdi
.text:000000000000596B                 cmovz   rbx, rax
.text:000000000000596F                 mov     rdi, rbx        ; pwc
.text:0000000000005972                 call    _mbrtowc
.text:0000000000005977                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000597B                 mov     rbp, rax
.text:000000000000597E                 jbe     short loc_59A0
.text:0000000000005980                 test    r12, r12
.text:0000000000005983                 jz      short loc_59A0
.text:0000000000005985                 xor     edi, edi
.text:0000000000005987                 call    hard_locale
.text:000000000000598C                 test    al, al
.text:000000000000598E                 jnz     short loc_59A0
.text:0000000000005990                 movzx   eax, byte ptr [r13+0]
.text:0000000000005995                 mov     ebp, 1
.text:000000000000599A                 mov     [rbx], eax
.text:000000000000599C                 nop     dword ptr [rax+00h]
.text:00000000000059A0
.text:00000000000059A0 loc_59A0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000059A0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000059A0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000059A5                 xor     rdx, fs:28h
.text:00000000000059AE                 mov     rax, rbp
.text:00000000000059B1                 jnz     short loc_59BE
.text:00000000000059B3                 add     rsp, 18h
.text:00000000000059B7                 pop     rbx
.text:00000000000059B8                 pop     rbp
.text:00000000000059B9                 pop     r12
.text:00000000000059BB                 pop     r13
.text:00000000000059BD                 retn
.text:00000000000059BE ; ---------------------------------------------------------------------------
.text:00000000000059BE
.text:00000000000059BE loc_59BE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000059BE                 call    ___stack_chk_fail
.text:00000000000059BE ; } // starts at 5940
.text:00000000000059BE rpl_mbrtowc     endp
.text:00000000000059BE
.text:00000000000059BE ; ---------------------------------------------------------------------------
.text:00000000000059C3                 align 10h
.text:00000000000059D0
.text:00000000000059D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059D0
.text:00000000000059D0 ; Attributes: info_from_lumina
.text:00000000000059D0
.text:00000000000059D0                 public u16_u16_vasprintf
.text:00000000000059D0 u16_u16_vasprintf proc near             ; CODE XREF: xvasprintf+61↑p
.text:00000000000059D0
.text:00000000000059D0 var_18          = qword ptr -18h
.text:00000000000059D0 var_10          = qword ptr -10h
.text:00000000000059D0
.text:00000000000059D0 ; __unwind {
.text:00000000000059D0                 push    rbx
.text:00000000000059D1                 mov     rax, rsi
.text:00000000000059D4                 mov     rbx, rdi
.text:00000000000059D7                 xor     edi, edi
.text:00000000000059D9                 sub     rsp, 10h
.text:00000000000059DD                 mov     rcx, fs:28h
.text:00000000000059E6                 mov     [rsp+18h+var_10], rcx
.text:00000000000059EB                 xor     ecx, ecx
.text:00000000000059ED                 mov     rsi, rsp
.text:00000000000059F0                 mov     rcx, rdx
.text:00000000000059F3                 mov     rdx, rax
.text:00000000000059F6                 call    vasnprintf
.text:00000000000059FB                 test    rax, rax
.text:00000000000059FE                 jz      short loc_5A42
.text:0000000000005A00                 mov     rdx, [rsp+18h+var_18]
.text:0000000000005A04                 cmp     rdx, 7FFFFFFFh
.text:0000000000005A0B                 ja      short loc_5A28
.text:0000000000005A0D                 mov     [rbx], rax
.text:0000000000005A10                 mov     eax, edx
.text:0000000000005A12
.text:0000000000005A12 loc_5A12:                               ; CODE XREF: u16_u16_vasprintf+70↓j
.text:0000000000005A12                                         ; u16_u16_vasprintf+77↓j
.text:0000000000005A12                 mov     rbx, [rsp+18h+var_10]
.text:0000000000005A17                 xor     rbx, fs:28h
.text:0000000000005A20                 jnz     short loc_5A49
.text:0000000000005A22                 add     rsp, 10h
.text:0000000000005A26                 pop     rbx
.text:0000000000005A27                 retn
.text:0000000000005A28 ; ---------------------------------------------------------------------------
.text:0000000000005A28
.text:0000000000005A28 loc_5A28:                               ; CODE XREF: u16_u16_vasprintf+3B↑j
.text:0000000000005A28                 mov     rdi, rax        ; ptr
.text:0000000000005A2B                 call    _free
.text:0000000000005A30                 call    ___errno_location
.text:0000000000005A35                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000005A3B                 mov     eax, 0FFFFFFFFh
.text:0000000000005A40                 jmp     short loc_5A12
.text:0000000000005A42 ; ---------------------------------------------------------------------------
.text:0000000000005A42
.text:0000000000005A42 loc_5A42:                               ; CODE XREF: u16_u16_vasprintf+2E↑j
.text:0000000000005A42                 mov     eax, 0FFFFFFFFh
.text:0000000000005A47                 jmp     short loc_5A12
.text:0000000000005A49 ; ---------------------------------------------------------------------------
.text:0000000000005A49
.text:0000000000005A49 loc_5A49:                               ; CODE XREF: u16_u16_vasprintf+50↑j
.text:0000000000005A49                 call    ___stack_chk_fail
.text:0000000000005A49 ; } // starts at 59D0
.text:0000000000005A49 u16_u16_vasprintf endp
.text:0000000000005A49
.text:0000000000005A49 ; ---------------------------------------------------------------------------
.text:0000000000005A4E                 align 10h
.text:0000000000005A50
.text:0000000000005A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A50
.text:0000000000005A50 ; Attributes: info_from_lumina
.text:0000000000005A50
.text:0000000000005A50 ; int __fastcall close_stream(FILE *stream)
.text:0000000000005A50                 public close_stream
.text:0000000000005A50 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000005A50                                         ; close_stdout+33↑p
.text:0000000000005A50 ; __unwind {
.text:0000000000005A50                 push    r12
.text:0000000000005A52                 push    rbp
.text:0000000000005A53                 mov     rbp, rdi
.text:0000000000005A56                 push    rbx
.text:0000000000005A57                 call    ___fpending
.text:0000000000005A5C                 mov     ebx, [rbp+0]
.text:0000000000005A5F                 mov     rdi, rbp        ; stream
.text:0000000000005A62                 mov     r12, rax
.text:0000000000005A65                 call    rpl_fclose
.text:0000000000005A6A                 and     ebx, 20h
.text:0000000000005A6D                 test    ebx, ebx
.text:0000000000005A6F                 jnz     short loc_5A88
.text:0000000000005A71                 test    eax, eax
.text:0000000000005A73                 jz      short loc_5A7F
.text:0000000000005A75                 test    r12, r12
.text:0000000000005A78                 mov     eax, 0FFFFFFFFh
.text:0000000000005A7D                 jz      short loc_5AB8
.text:0000000000005A7F
.text:0000000000005A7F loc_5A7F:                               ; CODE XREF: close_stream+23↑j
.text:0000000000005A7F                 pop     rbx
.text:0000000000005A80                 pop     rbp
.text:0000000000005A81                 pop     r12
.text:0000000000005A83                 retn
.text:0000000000005A83 ; ---------------------------------------------------------------------------
.text:0000000000005A84                 align 8
.text:0000000000005A88
.text:0000000000005A88 loc_5A88:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000005A88                 test    eax, eax
.text:0000000000005A8A                 jnz     short loc_5AA8
.text:0000000000005A8C                 call    ___errno_location
.text:0000000000005A91                 mov     dword ptr [rax], 0
.text:0000000000005A97                 mov     eax, 0FFFFFFFFh
.text:0000000000005A9C                 pop     rbx
.text:0000000000005A9D                 pop     rbp
.text:0000000000005A9E                 pop     r12
.text:0000000000005AA0                 retn
.text:0000000000005AA0 ; ---------------------------------------------------------------------------
.text:0000000000005AA1                 align 8
.text:0000000000005AA8
.text:0000000000005AA8 loc_5AA8:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000005AA8                 pop     rbx
.text:0000000000005AA9                 mov     eax, 0FFFFFFFFh
.text:0000000000005AAE                 pop     rbp
.text:0000000000005AAF                 pop     r12
.text:0000000000005AB1                 retn
.text:0000000000005AB1 ; ---------------------------------------------------------------------------
.text:0000000000005AB2                 align 8
.text:0000000000005AB8
.text:0000000000005AB8 loc_5AB8:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000005AB8                 call    ___errno_location
.text:0000000000005ABD                 cmp     dword ptr [rax], 9
.text:0000000000005AC0                 pop     rbx
.text:0000000000005AC1                 pop     rbp
.text:0000000000005AC2                 pop     r12
.text:0000000000005AC4                 setnz   al
.text:0000000000005AC7                 movzx   eax, al
.text:0000000000005ACA                 neg     eax
.text:0000000000005ACC                 retn
.text:0000000000005ACC ; } // starts at 5A50
.text:0000000000005ACC close_stream    endp
.text:0000000000005ACC
.text:0000000000005ACC ; ---------------------------------------------------------------------------
.text:0000000000005ACD                 align 10h
.text:0000000000005AD0
.text:0000000000005AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AD0
.text:0000000000005AD0
.text:0000000000005AD0                 public hard_locale
.text:0000000000005AD0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000005AD0 ; __unwind {
.text:0000000000005AD0                 sub     rsp, 8
.text:0000000000005AD4                 xor     esi, esi        ; locale
.text:0000000000005AD6                 call    _setlocale
.text:0000000000005ADB                 mov     rdx, rax
.text:0000000000005ADE                 mov     eax, 1
.text:0000000000005AE3                 test    rdx, rdx
.text:0000000000005AE6                 jz      short loc_5B05
.text:0000000000005AE8                 lea     rdi, aC         ; "C"
.text:0000000000005AEF                 mov     ecx, 2
.text:0000000000005AF4                 mov     rsi, rdx
.text:0000000000005AF7                 repe cmpsb
.text:0000000000005AF9                 setnbe  cl
.text:0000000000005AFC                 sbb     cl, 0
.text:0000000000005AFF                 xor     eax, eax
.text:0000000000005B01                 test    cl, cl
.text:0000000000005B03                 jnz     short loc_5B10
.text:0000000000005B05
.text:0000000000005B05 loc_5B05:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000005B05                 add     rsp, 8
.text:0000000000005B09                 retn
.text:0000000000005B09 ; ---------------------------------------------------------------------------
.text:0000000000005B0A                 align 10h
.text:0000000000005B10
.text:0000000000005B10 loc_5B10:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000005B10                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000005B17                 mov     ecx, 6
.text:0000000000005B1C                 mov     rsi, rdx
.text:0000000000005B1F                 repe cmpsb
.text:0000000000005B21                 setnbe  al
.text:0000000000005B24                 sbb     al, 0
.text:0000000000005B26                 test    al, al
.text:0000000000005B28                 setnz   al
.text:0000000000005B2B                 add     rsp, 8
.text:0000000000005B2F                 retn
.text:0000000000005B2F ; } // starts at 5AD0
.text:0000000000005B2F hard_locale     endp
.text:0000000000005B2F
.text:0000000000005B30
.text:0000000000005B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B30
.text:0000000000005B30
.text:0000000000005B30                 public locale_charset
.text:0000000000005B30 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005B30 ; __unwind {
.text:0000000000005B30                 sub     rsp, 8
.text:0000000000005B34                 mov     edi, 0Eh        ; item
.text:0000000000005B39                 call    _nl_langinfo
.text:0000000000005B3E                 test    rax, rax
.text:0000000000005B41                 jz      short loc_5B60
.text:0000000000005B43                 cmp     byte ptr [rax], 0
.text:0000000000005B46                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000005B4D                 cmovz   rax, rdx
.text:0000000000005B51                 add     rsp, 8
.text:0000000000005B55                 retn
.text:0000000000005B55 ; ---------------------------------------------------------------------------
.text:0000000000005B56                 align 20h
.text:0000000000005B60
.text:0000000000005B60 loc_5B60:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000005B60                 lea     rax, aAscii     ; "ASCII"
.text:0000000000005B67                 add     rsp, 8
.text:0000000000005B6B                 retn
.text:0000000000005B6B ; } // starts at 5B30
.text:0000000000005B6B locale_charset  endp
.text:0000000000005B6B
.text:0000000000005B6B ; ---------------------------------------------------------------------------
.text:0000000000005B6C                 align 10h
.text:0000000000005B70
.text:0000000000005B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B70
.text:0000000000005B70 ; Attributes: info_from_lumina
.text:0000000000005B70
.text:0000000000005B70 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000005B70                 public rpl_fclose
.text:0000000000005B70 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000005B70 ; __unwind {
.text:0000000000005B70                 push    r12
.text:0000000000005B72                 push    rbp
.text:0000000000005B73                 push    rbx
.text:0000000000005B74                 mov     rbx, rdi
.text:0000000000005B77                 call    _fileno
.text:0000000000005B7C                 test    eax, eax
.text:0000000000005B7E                 mov     rdi, rbx        ; fp
.text:0000000000005B81                 js      short loc_5BD7
.text:0000000000005B83                 call    ___freading
.text:0000000000005B88                 test    eax, eax
.text:0000000000005B8A                 jnz     short loc_5BB8
.text:0000000000005B8C
.text:0000000000005B8C loc_5B8C:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000005B8C                 mov     rdi, rbx        ; stream
.text:0000000000005B8F                 call    rpl_fflush
.text:0000000000005B94                 test    eax, eax
.text:0000000000005B96                 jz      short loc_5BD4
.text:0000000000005B98                 call    ___errno_location
.text:0000000000005B9D                 mov     r12d, [rax]
.text:0000000000005BA0                 mov     rdi, rbx        ; stream
.text:0000000000005BA3                 mov     rbp, rax
.text:0000000000005BA6                 call    _fclose
.text:0000000000005BAB                 test    r12d, r12d
.text:0000000000005BAE                 jnz     short loc_5BE0
.text:0000000000005BB0
.text:0000000000005BB0 loc_5BB0:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000005BB0                 pop     rbx
.text:0000000000005BB1                 pop     rbp
.text:0000000000005BB2                 pop     r12
.text:0000000000005BB4                 retn
.text:0000000000005BB4 ; ---------------------------------------------------------------------------
.text:0000000000005BB5                 align 8
.text:0000000000005BB8
.text:0000000000005BB8 loc_5BB8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000005BB8                 mov     rdi, rbx        ; stream
.text:0000000000005BBB                 call    _fileno
.text:0000000000005BC0                 xor     esi, esi        ; offset
.text:0000000000005BC2                 mov     edx, 1          ; whence
.text:0000000000005BC7                 mov     edi, eax        ; fd
.text:0000000000005BC9                 call    _lseek
.text:0000000000005BCE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005BD2                 jnz     short loc_5B8C
.text:0000000000005BD4
.text:0000000000005BD4 loc_5BD4:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000005BD4                 mov     rdi, rbx        ; stream
.text:0000000000005BD7
.text:0000000000005BD7 loc_5BD7:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000005BD7                 pop     rbx
.text:0000000000005BD8                 pop     rbp
.text:0000000000005BD9                 pop     r12
.text:0000000000005BDB                 jmp     _fclose
.text:0000000000005BE0 ; ---------------------------------------------------------------------------
.text:0000000000005BE0
.text:0000000000005BE0 loc_5BE0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000005BE0                 mov     [rbp+0], r12d
.text:0000000000005BE4                 mov     eax, 0FFFFFFFFh
.text:0000000000005BE9                 jmp     short loc_5BB0
.text:0000000000005BE9 ; } // starts at 5B70
.text:0000000000005BE9 rpl_fclose      endp
.text:0000000000005BE9
.text:0000000000005BE9 ; ---------------------------------------------------------------------------
.text:0000000000005BEB                 align 10h
.text:0000000000005BF0
.text:0000000000005BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BF0
.text:0000000000005BF0 ; Attributes: info_from_lumina
.text:0000000000005BF0
.text:0000000000005BF0 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000005BF0                 public rpl_fflush
.text:0000000000005BF0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000005BF0 ; __unwind {
.text:0000000000005BF0                 test    rdi, rdi
.text:0000000000005BF3                 push    rbx
.text:0000000000005BF4                 mov     rbx, rdi
.text:0000000000005BF7                 jz      short loc_5C0A
.text:0000000000005BF9                 call    ___freading
.text:0000000000005BFE                 test    eax, eax
.text:0000000000005C00                 jz      short loc_5C0A
.text:0000000000005C02                 test    dword ptr [rbx], 100h
.text:0000000000005C08                 jnz     short loc_5C18
.text:0000000000005C0A
.text:0000000000005C0A loc_5C0A:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000005C0A                                         ; rpl_fflush+10↑j
.text:0000000000005C0A                 mov     rdi, rbx        ; stream
.text:0000000000005C0D                 pop     rbx
.text:0000000000005C0E                 jmp     _fflush
.text:0000000000005C0E ; ---------------------------------------------------------------------------
.text:0000000000005C13                 align 8
.text:0000000000005C18
.text:0000000000005C18 loc_5C18:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000005C18                 mov     rdi, rbx
.text:0000000000005C1B                 mov     edx, 1
.text:0000000000005C20                 xor     esi, esi
.text:0000000000005C22                 call    rpl_fseeko
.text:0000000000005C27                 mov     rdi, rbx        ; stream
.text:0000000000005C2A                 pop     rbx
.text:0000000000005C2B                 jmp     _fflush
.text:0000000000005C2B ; } // starts at 5BF0
.text:0000000000005C2B rpl_fflush      endp
.text:0000000000005C2B
.text:0000000000005C30
.text:0000000000005C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C30
.text:0000000000005C30 ; Attributes: info_from_lumina
.text:0000000000005C30
.text:0000000000005C30 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000005C30                 public rpl_fseeko
.text:0000000000005C30 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000005C30 ; __unwind {
.text:0000000000005C30                 mov     rax, [rdi+8]
.text:0000000000005C34                 cmp     [rdi+10h], rax
.text:0000000000005C38                 jz      short loc_5C40
.text:0000000000005C3A
.text:0000000000005C3A loc_5C3A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000005C3A                                         ; rpl_fseeko+1F↓j
.text:0000000000005C3A                 jmp     _fseeko
.text:0000000000005C3A ; ---------------------------------------------------------------------------
.text:0000000000005C3F                 align 20h
.text:0000000000005C40
.text:0000000000005C40 loc_5C40:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005C40                 mov     rax, [rdi+20h]
.text:0000000000005C44                 cmp     [rdi+28h], rax
.text:0000000000005C48                 jnz     short loc_5C3A
.text:0000000000005C4A                 cmp     qword ptr [rdi+48h], 0
.text:0000000000005C4F                 jnz     short loc_5C3A
.text:0000000000005C51                 push    r12
.text:0000000000005C53                 push    rbp
.text:0000000000005C54                 mov     r12d, edx
.text:0000000000005C57                 push    rbx
.text:0000000000005C58                 mov     rbp, rsi
.text:0000000000005C5B                 mov     rbx, rdi
.text:0000000000005C5E                 call    _fileno
.text:0000000000005C63                 mov     edx, r12d       ; whence
.text:0000000000005C66                 mov     rsi, rbp        ; offset
.text:0000000000005C69                 mov     edi, eax        ; fd
.text:0000000000005C6B                 call    _lseek
.text:0000000000005C70                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C74                 jz      short loc_5C82
.text:0000000000005C76                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005C79                 mov     [rbx+90h], rax
.text:0000000000005C80                 xor     eax, eax
.text:0000000000005C82
.text:0000000000005C82 loc_5C82:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000005C82                 pop     rbx
.text:0000000000005C83                 pop     rbp
.text:0000000000005C84                 pop     r12
.text:0000000000005C86                 retn
.text:0000000000005C86 ; } // starts at 5C30
.text:0000000000005C86 rpl_fseeko      endp
.text:0000000000005C86
.text:0000000000005C86 ; ---------------------------------------------------------------------------
.text:0000000000005C87                 align 10h
.text:0000000000005C90
.text:0000000000005C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C90
.text:0000000000005C90 ; Attributes: bp-based frame
.text:0000000000005C90
.text:0000000000005C90                 public vasnprintf
.text:0000000000005C90 vasnprintf      proc near               ; CODE XREF: u16_u16_vasprintf+26↑p
.text:0000000000005C90
.text:0000000000005C90 var_450         = tbyte ptr -450h
.text:0000000000005C90 var_440         = tbyte ptr -440h
.text:0000000000005C90 var_430         = qword ptr -430h
.text:0000000000005C90 var_421         = byte ptr -421h
.text:0000000000005C90 ptr             = qword ptr -420h
.text:0000000000005C90 var_418         = qword ptr -418h
.text:0000000000005C90 var_410         = qword ptr -410h
.text:0000000000005C90 var_408         = qword ptr -408h
.text:0000000000005C90 var_400         = qword ptr -400h
.text:0000000000005C90 var_3F8         = qword ptr -3F8h
.text:0000000000005C90 var_3F0         = qword ptr -3F0h
.text:0000000000005C90 src             = qword ptr -3E8h
.text:0000000000005C90 var_3E0         = qword ptr -3E0h
.text:0000000000005C90 var_3D8         = qword ptr -3D8h
.text:0000000000005C90 var_3D0         = qword ptr -3D0h
.text:0000000000005C90 n               = qword ptr -3C8h
.text:0000000000005C90 var_3BC         = dword ptr -3BCh
.text:0000000000005C90 var_3B8         = dword ptr -3B8h
.text:0000000000005C90 var_3B4         = dword ptr -3B4h
.text:0000000000005C90 var_3B0         = byte ptr -3B0h
.text:0000000000005C90 var_3A8         = qword ptr -3A8h
.text:0000000000005C90 var_2C0         = qword ptr -2C0h
.text:0000000000005C90 var_2B8         = qword ptr -2B8h
.text:0000000000005C90 var_2B0         = qword ptr -2B0h
.text:0000000000005C90 var_2A8         = qword ptr -2A8h
.text:0000000000005C90 var_38          = qword ptr -38h
.text:0000000000005C90
.text:0000000000005C90 ; __unwind {
.text:0000000000005C90                 push    rbp
.text:0000000000005C91                 mov     rbp, rsp
.text:0000000000005C94                 push    r15
.text:0000000000005C96                 push    r14
.text:0000000000005C98                 push    r13
.text:0000000000005C9A                 push    r12
.text:0000000000005C9C                 lea     r14, [rbp+var_3B0]
.text:0000000000005CA3                 push    rbx
.text:0000000000005CA4                 mov     rbx, rdx
.text:0000000000005CA7                 mov     r12, rcx
.text:0000000000005CAA                 mov     rdx, r14
.text:0000000000005CAD                 sub     rsp, 408h
.text:0000000000005CB4                 mov     [rbp+var_418], rsi
.text:0000000000005CBB                 lea     rsi, [rbp+var_2C0]
.text:0000000000005CC2                 mov     [rbp+src], rdi
.text:0000000000005CC9                 mov     rdi, rbx
.text:0000000000005CCC                 mov     [rbp+var_410], r14
.text:0000000000005CD3                 mov     rax, fs:28h
.text:0000000000005CDC                 mov     [rbp+var_38], rax
.text:0000000000005CE0                 xor     eax, eax
.text:0000000000005CE2                 mov     [rbp+var_408], rsi
.text:0000000000005CE9                 call    printf_parse
.text:0000000000005CEE                 test    eax, eax
.text:0000000000005CF0                 js      loc_6B58
.text:0000000000005CF6                 mov     rsi, r14
.text:0000000000005CF9                 mov     rdi, r12
.text:0000000000005CFC                 call    printf_fetchargs
.text:0000000000005D01                 test    eax, eax
.text:0000000000005D03                 js      loc_6BC0
.text:0000000000005D09                 mov     rax, [rbp+var_2B0]
.text:0000000000005D10                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D17                 add     rax, 7
.text:0000000000005D1B                 cmp     rax, 6
.text:0000000000005D1F                 cmovbe  rax, rdx
.text:0000000000005D23                 add     rax, [rbp+var_2A8]
.text:0000000000005D2A                 jb      loc_6758
.text:0000000000005D30                 mov     rdi, rax
.text:0000000000005D33                 xor     r8d, r8d
.text:0000000000005D36                 add     rdi, 6          ; size
.text:0000000000005D3A                 setb    r8b
.text:0000000000005D3E                 jb      loc_6758
.text:0000000000005D44                 cmp     rdi, 0F9Fh
.text:0000000000005D4B                 jbe     loc_5E98
.text:0000000000005D51                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D55                 mov     [rbp+n], r8
.text:0000000000005D5C                 jz      loc_6758
.text:0000000000005D62                 call    _malloc
.text:0000000000005D67                 test    rax, rax
.text:0000000000005D6A                 mov     [rbp+var_3D8], rax
.text:0000000000005D71                 jz      loc_6758
.text:0000000000005D77                 mov     r8, [rbp+n]
.text:0000000000005D7E                 mov     [rbp+ptr], rax
.text:0000000000005D85
.text:0000000000005D85 loc_5D85:                               ; CODE XREF: vasnprintf+22E↓j
.text:0000000000005D85                 xor     r12d, r12d
.text:0000000000005D88                 cmp     [rbp+src], 0
.text:0000000000005D90                 jz      short loc_5D9C
.text:0000000000005D92                 mov     rax, [rbp+var_418]
.text:0000000000005D99                 mov     r12, [rax]
.text:0000000000005D9C
.text:0000000000005D9C loc_5D9C:                               ; CODE XREF: vasnprintf+100↑j
.text:0000000000005D9C                 mov     r13, [rbp+var_2B8]
.text:0000000000005DA3                 lea     rax, [rbp+var_3BC]
.text:0000000000005DAA                 mov     r15, [rbp+src]
.text:0000000000005DB1                 mov     [rbp+var_400], 0
.text:0000000000005DBC                 mov     [rbp+var_3F0], rax
.text:0000000000005DC3                 mov     rax, rbx
.text:0000000000005DC6                 mov     rbx, r8
.text:0000000000005DC9                 mov     rcx, [r13+0]
.text:0000000000005DCD                 mov     r8, rax
.text:0000000000005DD0                 cmp     rcx, r8
.text:0000000000005DD3                 jz      loc_6741
.text:0000000000005DD9
.text:0000000000005DD9 loc_5DD9:                               ; CODE XREF: vasnprintf+AAB↓j
.text:0000000000005DD9                 sub     rcx, r8
.text:0000000000005DDC                 mov     rax, rbx
.text:0000000000005DDF                 add     rax, rcx
.text:0000000000005DE2                 mov     r14, rax
.text:0000000000005DE5                 jnb     loc_5EC8
.text:0000000000005DEB                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000005DEF                 jz      loc_68C0
.text:0000000000005DF5
.text:0000000000005DF5 loc_5DF5:                               ; CODE XREF: vasnprintf+4E2↓j
.text:0000000000005DF5                                         ; vasnprintf+A86↓j ...
.text:0000000000005DF5                 call    ___errno_location
.text:0000000000005DFA                 mov     [rbp+n], rax
.text:0000000000005E01
.text:0000000000005E01 loc_5E01:                               ; CODE XREF: vasnprintf+640↓j
.text:0000000000005E01                                         ; vasnprintf+652↓j ...
.text:0000000000005E01                 cmp     r15, [rbp+src]
.text:0000000000005E08                 jz      short loc_5E13
.text:0000000000005E0A                 test    r15, r15
.text:0000000000005E0D                 jnz     loc_68F0
.text:0000000000005E13
.text:0000000000005E13 loc_5E13:                               ; CODE XREF: vasnprintf+178↑j
.text:0000000000005E13                                         ; vasnprintf+C68↓j
.text:0000000000005E13                 mov     rax, [rbp+ptr]
.text:0000000000005E1A                 test    rax, rax
.text:0000000000005E1D                 jz      short loc_5E27
.text:0000000000005E1F                 mov     rdi, rax        ; ptr
.text:0000000000005E22                 call    _free
.text:0000000000005E27
.text:0000000000005E27 loc_5E27:                               ; CODE XREF: vasnprintf+18D↑j
.text:0000000000005E27                                         ; vasnprintf+AD4↓j
.text:0000000000005E27                 mov     rax, [rbp+var_408]
.text:0000000000005E2E                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000005E35                 add     rax, 20h ; ' '
.text:0000000000005E39                 cmp     rdi, rax
.text:0000000000005E3C                 jz      short loc_5E43
.text:0000000000005E3E                 call    _free
.text:0000000000005E43
.text:0000000000005E43 loc_5E43:                               ; CODE XREF: vasnprintf+1AC↑j
.text:0000000000005E43                 mov     rax, [rbp+var_410]
.text:0000000000005E4A                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000005E51                 add     rax, 10h
.text:0000000000005E55                 cmp     rdi, rax
.text:0000000000005E58                 jz      short loc_5E5F
.text:0000000000005E5A                 call    _free
.text:0000000000005E5F
.text:0000000000005E5F loc_5E5F:                               ; CODE XREF: vasnprintf+1C8↑j
.text:0000000000005E5F                 mov     rax, [rbp+n]
.text:0000000000005E66                 xor     r15d, r15d
.text:0000000000005E69                 mov     dword ptr [rax], 0Ch
.text:0000000000005E6F
.text:0000000000005E6F loc_5E6F:                               ; CODE XREF: vasnprintf+7BA↓j
.text:0000000000005E6F                                         ; vasnprintf+EBE↓j ...
.text:0000000000005E6F                 mov     rdi, [rbp+var_38]
.text:0000000000005E73                 xor     rdi, fs:28h
.text:0000000000005E7C                 mov     rax, r15
.text:0000000000005E7F                 jnz     loc_6D87
.text:0000000000005E85                 lea     rsp, [rbp-28h]
.text:0000000000005E89                 pop     rbx
.text:0000000000005E8A                 pop     r12
.text:0000000000005E8C                 pop     r13
.text:0000000000005E8E                 pop     r14
.text:0000000000005E90                 pop     r15
.text:0000000000005E92                 pop     rbp
.text:0000000000005E93                 retn
.text:0000000000005E93 ; ---------------------------------------------------------------------------
.text:0000000000005E94                 align 8
.text:0000000000005E98
.text:0000000000005E98 loc_5E98:                               ; CODE XREF: vasnprintf+BB↑j
.text:0000000000005E98                 add     rax, 24h ; '$'
.text:0000000000005E9C                 mov     [rbp+ptr], 0
.text:0000000000005EA7                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000005EAB                 sub     rsp, rax
.text:0000000000005EAE                 lea     rax, [rsp+430h+var_421]
.text:0000000000005EB3                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000005EB7                 mov     [rbp+var_3D8], rax
.text:0000000000005EBE                 jmp     loc_5D85
.text:0000000000005EBE ; ---------------------------------------------------------------------------
.text:0000000000005EC3                 align 8
.text:0000000000005EC8
.text:0000000000005EC8 loc_5EC8:                               ; CODE XREF: vasnprintf+155↑j
.text:0000000000005EC8                 cmp     r12, rax
.text:0000000000005ECB                 jnb     short loc_5F34
.text:0000000000005ECD                 test    r12, r12
.text:0000000000005ED0                 jnz     loc_6800
.text:0000000000005ED6                 cmp     rax, 0Ch
.text:0000000000005EDA                 ja      loc_6812
.text:0000000000005EE0                 mov     r12d, 0Ch
.text:0000000000005EE6
.text:0000000000005EE6 loc_5EE6:                               ; CODE XREF: vasnprintf+B7C↓j
.text:0000000000005EE6                 cmp     r15, [rbp+src]
.text:0000000000005EED                 setz    dl
.text:0000000000005EF0                 test    r15, r15
.text:0000000000005EF3                 jz      loc_6838
.text:0000000000005EF9
.text:0000000000005EF9 loc_5EF9:                               ; CODE XREF: vasnprintf+B9C↓j
.text:0000000000005EF9                 test    dl, dl
.text:0000000000005EFB                 jnz     loc_6838
.text:0000000000005F01                 mov     rsi, r12        ; size
.text:0000000000005F04                 mov     rdi, r15        ; ptr
.text:0000000000005F07                 mov     [rbp+var_3D0], r8
.text:0000000000005F0E                 mov     [rbp+n], rcx
.text:0000000000005F15                 call    _realloc
.text:0000000000005F1A                 test    rax, rax
.text:0000000000005F1D                 mov     rcx, [rbp+n]
.text:0000000000005F24                 mov     r8, [rbp+var_3D0]
.text:0000000000005F2B                 jz      loc_68DB
.text:0000000000005F31                 mov     r15, rax
.text:0000000000005F34
.text:0000000000005F34 loc_5F34:                               ; CODE XREF: vasnprintf+23B↑j
.text:0000000000005F34                                         ; vasnprintf+C23↓j ...
.text:0000000000005F34                 lea     rdi, [r15+rbx]  ; dest
.text:0000000000005F38                 mov     rdx, rcx        ; n
.text:0000000000005F3B                 mov     rsi, r8         ; src
.text:0000000000005F3E                 call    _memcpy
.text:0000000000005F43
.text:0000000000005F43 loc_5F43:                               ; CODE XREF: vasnprintf+AB4↓j
.text:0000000000005F43                 mov     rax, [rbp+var_400]
.text:0000000000005F4A                 cmp     [rbp+var_2C0], rax
.text:0000000000005F51                 jz      loc_6C0B
.text:0000000000005F57                 movzx   edx, byte ptr [r13+48h]
.text:0000000000005F5C                 mov     rax, [r13+50h]
.text:0000000000005F60                 cmp     dl, 25h ; '%'
.text:0000000000005F63                 jz      loc_66F8
.text:0000000000005F69                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005F6D                 jz      def_61EB        ; jumptable 00000000000061EB default case, case 0
.text:0000000000005F6D                                         ; jumptable 0000000000006790 default case
.text:0000000000005F73                 mov     r8, [rbp+var_3A8]
.text:0000000000005F7A                 shl     rax, 5
.text:0000000000005F7E                 add     rax, r8
.text:0000000000005F81                 cmp     dl, 6Eh ; 'n'
.text:0000000000005F84                 mov     edi, [rax]
.text:0000000000005F86                 mov     dword ptr [rbp+var_3D0], edi
.text:0000000000005F8C                 jz      loc_6770
.text:0000000000005F92                 mov     eax, [r13+10h]
.text:0000000000005F96                 mov     rdi, [rbp+var_3D8]
.text:0000000000005F9D                 test    al, 1
.text:0000000000005F9F                 mov     byte ptr [rdi], 25h ; '%'
.text:0000000000005FA2                 lea     rbx, [rdi+1]
.text:0000000000005FA6                 jz      short loc_5FB7
.text:0000000000005FA8                 mov     rdi, [rbp+var_3D8]
.text:0000000000005FAF                 lea     rbx, [rdi+2]
.text:0000000000005FB3                 mov     byte ptr [rdi+1], 27h ; '''
.text:0000000000005FB7
.text:0000000000005FB7 loc_5FB7:                               ; CODE XREF: vasnprintf+316↑j
.text:0000000000005FB7                 test    al, 2
.text:0000000000005FB9                 jz      short loc_5FC2
.text:0000000000005FBB                 mov     byte ptr [rbx], 2Dh ; '-'
.text:0000000000005FBE                 add     rbx, 1
.text:0000000000005FC2
.text:0000000000005FC2 loc_5FC2:                               ; CODE XREF: vasnprintf+329↑j
.text:0000000000005FC2                 test    al, 4
.text:0000000000005FC4                 jz      short loc_5FCD
.text:0000000000005FC6                 mov     byte ptr [rbx], 2Bh ; '+'
.text:0000000000005FC9                 add     rbx, 1
.text:0000000000005FCD
.text:0000000000005FCD loc_5FCD:                               ; CODE XREF: vasnprintf+334↑j
.text:0000000000005FCD                 test    al, 8
.text:0000000000005FCF                 jz      short loc_5FD8
.text:0000000000005FD1                 mov     byte ptr [rbx], 20h ; ' '
.text:0000000000005FD4                 add     rbx, 1
.text:0000000000005FD8
.text:0000000000005FD8 loc_5FD8:                               ; CODE XREF: vasnprintf+33F↑j
.text:0000000000005FD8                 test    al, 10h
.text:0000000000005FDA                 jz      short loc_5FE3
.text:0000000000005FDC                 mov     byte ptr [rbx], 23h ; '#'
.text:0000000000005FDF                 add     rbx, 1
.text:0000000000005FE3
.text:0000000000005FE3 loc_5FE3:                               ; CODE XREF: vasnprintf+34A↑j
.text:0000000000005FE3                 test    al, 40h
.text:0000000000005FE5                 jz      short loc_5FEE
.text:0000000000005FE7                 mov     byte ptr [rbx], 49h ; 'I'
.text:0000000000005FEA                 add     rbx, 1
.text:0000000000005FEE
.text:0000000000005FEE loc_5FEE:                               ; CODE XREF: vasnprintf+355↑j
.text:0000000000005FEE                 test    al, 20h
.text:0000000000005FF0                 jz      short loc_5FF9
.text:0000000000005FF2                 mov     byte ptr [rbx], 30h ; '0'
.text:0000000000005FF5                 add     rbx, 1
.text:0000000000005FF9
.text:0000000000005FF9 loc_5FF9:                               ; CODE XREF: vasnprintf+360↑j
.text:0000000000005FF9                 mov     rsi, [r13+18h]  ; src
.text:0000000000005FFD                 mov     rdx, [r13+20h]
.text:0000000000006001                 cmp     rsi, rdx
.text:0000000000006004                 jz      short loc_6036
.text:0000000000006006                 mov     rcx, rdx
.text:0000000000006009                 mov     rdi, rbx        ; dest
.text:000000000000600C                 mov     [rbp+var_3E0], r8
.text:0000000000006013                 sub     rcx, rsi
.text:0000000000006016                 mov     rdx, rcx        ; n
.text:0000000000006019                 mov     [rbp+n], rcx
.text:0000000000006020                 call    _memcpy
.text:0000000000006025                 mov     rcx, [rbp+n]
.text:000000000000602C                 mov     r8, [rbp+var_3E0]
.text:0000000000006033                 add     rbx, rcx
.text:0000000000006036
.text:0000000000006036 loc_6036:                               ; CODE XREF: vasnprintf+374↑j
.text:0000000000006036                 mov     rsi, [r13+30h]  ; src
.text:000000000000603A                 mov     rdx, [r13+38h]
.text:000000000000603E                 cmp     rsi, rdx
.text:0000000000006041                 jz      short loc_6073
.text:0000000000006043                 mov     rcx, rdx
.text:0000000000006046                 mov     rdi, rbx        ; dest
.text:0000000000006049                 mov     [rbp+var_3E0], r8
.text:0000000000006050                 sub     rcx, rsi
.text:0000000000006053                 mov     rdx, rcx        ; n
.text:0000000000006056                 mov     [rbp+n], rcx
.text:000000000000605D                 call    _memcpy
.text:0000000000006062                 mov     rcx, [rbp+n]
.text:0000000000006069                 mov     r8, [rbp+var_3E0]
.text:0000000000006070                 add     rbx, rcx
.text:0000000000006073
.text:0000000000006073 loc_6073:                               ; CODE XREF: vasnprintf+3B1↑j
.text:0000000000006073                 mov     edi, dword ptr [rbp+var_3D0]
.text:0000000000006079                 cmp     edi, 10h
.text:000000000000607C                 ja      short loc_60AB
.text:000000000000607E                 mov     eax, 1
.text:0000000000006083                 mov     ecx, edi
.text:0000000000006085                 shl     rax, cl
.text:0000000000006088                 test    eax, 14180h
.text:000000000000608D                 jnz     short loc_60A4
.text:000000000000608F                 test    ah, 10h
.text:0000000000006092                 jnz     loc_69F0
.text:0000000000006098                 test    ah, 6
.text:000000000000609B                 jz      short loc_60AB
.text:000000000000609D                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:00000000000060A0                 add     rbx, 1
.text:00000000000060A4
.text:00000000000060A4 loc_60A4:                               ; CODE XREF: vasnprintf+3FD↑j
.text:00000000000060A4                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:00000000000060A7                 add     rbx, 1
.text:00000000000060AB
.text:00000000000060AB loc_60AB:                               ; CODE XREF: vasnprintf+3EC↑j
.text:00000000000060AB                                         ; vasnprintf+40B↑j ...
.text:00000000000060AB                 movzx   eax, byte ptr [r13+48h]
.text:00000000000060B0                 mov     byte ptr [rbx+1], 0
.text:00000000000060B4                 mov     [rbx], al
.text:00000000000060B6                 mov     rax, [r13+28h]
.text:00000000000060BA                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000060BE                 jz      loc_67F0
.text:00000000000060C4                 shl     rax, 5
.text:00000000000060C8                 add     rax, r8
.text:00000000000060CB                 cmp     dword ptr [rax], 5
.text:00000000000060CE                 jnz     def_61EB        ; jumptable 00000000000061EB default case, case 0
.text:00000000000060CE                                         ; jumptable 0000000000006790 default case
.text:00000000000060D4                 mov     eax, [rax+10h]
.text:00000000000060D7                 mov     dword ptr [rbp+var_3E0], 1
.text:00000000000060E1                 mov     [rbp+var_3B8], eax
.text:00000000000060E7
.text:00000000000060E7 loc_60E7:                               ; CODE XREF: vasnprintf+B6A↓j
.text:00000000000060E7                 mov     rax, [r13+40h]
.text:00000000000060EB                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000060EF                 jz      short loc_611C
.text:00000000000060F1                 shl     rax, 5
.text:00000000000060F5                 add     r8, rax
.text:00000000000060F8                 cmp     dword ptr [r8], 5
.text:00000000000060FC                 jnz     def_61EB        ; jumptable 00000000000061EB default case, case 0
.text:00000000000060FC                                         ; jumptable 0000000000006790 default case
.text:0000000000006102                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006108                 mov     edx, [r8+10h]
.text:000000000000610C                 mov     [rbp+rax*4+var_3B8], edx
.text:0000000000006113                 lea     eax, [rax+1]
.text:0000000000006116                 mov     dword ptr [rbp+var_3E0], eax
.text:000000000000611C
.text:000000000000611C loc_611C:                               ; CODE XREF: vasnprintf+45F↑j
.text:000000000000611C                 mov     rax, r14
.text:000000000000611F                 xor     edx, edx
.text:0000000000006121                 add     rax, 2
.text:0000000000006125                 jb      loc_6D8C
.text:000000000000612B                 cmp     r12, rax
.text:000000000000612E                 jnb     short loc_617B
.text:0000000000006130                 test    r12, r12
.text:0000000000006133                 jnz     loc_6958
.text:0000000000006139                 cmp     rax, 0Ch
.text:000000000000613D                 ja      loc_6970
.text:0000000000006143                 mov     r12d, 0Ch
.text:0000000000006149
.text:0000000000006149 loc_6149:                               ; CODE XREF: vasnprintf+CD4↓j
.text:0000000000006149                 cmp     r15, [rbp+src]
.text:0000000000006150                 setz    dl
.text:0000000000006153                 test    r15, r15
.text:0000000000006156                 jz      loc_69A0
.text:000000000000615C
.text:000000000000615C loc_615C:                               ; CODE XREF: vasnprintf+D03↓j
.text:000000000000615C                 test    dl, dl
.text:000000000000615E                 jnz     loc_69A0
.text:0000000000006164                 mov     rsi, r12        ; size
.text:0000000000006167                 mov     rdi, r15        ; ptr
.text:000000000000616A                 call    _realloc
.text:000000000000616F                 test    rax, rax
.text:0000000000006172                 jz      loc_5DF5
.text:0000000000006178                 mov     r15, rax
.text:000000000000617B
.text:000000000000617B loc_617B:                               ; CODE XREF: vasnprintf+49E↑j
.text:000000000000617B                                         ; vasnprintf+D53↓j ...
.text:000000000000617B                 mov     byte ptr [r15+r14], 0
.text:0000000000006180                 call    ___errno_location
.text:0000000000006185                 mov     [rbp+n], rax
.text:000000000000618C                 mov     eax, [rax]
.text:000000000000618E                 mov     [rbp+var_3F8], rbx
.text:0000000000006195                 mov     [rbp-424h], eax
.text:000000000000619B                 nop     dword ptr [rax+rax+00h]
.text:00000000000061A0
.text:00000000000061A0 loc_61A0:                               ; CODE XREF: vasnprintf+637↓j
.text:00000000000061A0                                         ; vasnprintf+68D↓j ...
.text:00000000000061A0                 mov     rax, [rbp+n]
.text:00000000000061A7                 mov     rbx, r12
.text:00000000000061AA                 mov     r10d, 7FFFFFFFh
.text:00000000000061B0                 sub     rbx, r14
.text:00000000000061B3                 mov     [rbp+var_3BC], 0FFFFFFFFh
.text:00000000000061BD                 cmp     rbx, 7FFFFFFFh
.text:00000000000061C4                 mov     dword ptr [rax], 0
.text:00000000000061CA                 mov     eax, dword ptr [rbp+var_3D0]
.text:00000000000061D0                 cmovbe  r10, rbx
.text:00000000000061D4                 cmp     eax, 11h        ; switch 18 cases
.text:00000000000061D7                 ja      def_61EB        ; jumptable 00000000000061EB default case, case 0
.text:00000000000061D7                                         ; jumptable 0000000000006790 default case
.text:00000000000061DD                 lea     rsi, jpt_61EB
.text:00000000000061E4                 movsxd  rax, ds:(jpt_61EB - 92E8h)[rsi+rax*4]
.text:00000000000061E8                 add     rax, rsi
.text:00000000000061EB                 jmp     rax             ; switch jump
.text:00000000000061EB ; ---------------------------------------------------------------------------
.text:00000000000061ED                 align 10h
.text:00000000000061F0
.text:00000000000061F0 loc_61F0:                               ; CODE XREF: vasnprintf+55B↑j
.text:00000000000061F0                                         ; DATA XREF: .rodata:jpt_61EB↓o
.text:00000000000061F0                 mov     rax, [r13+50h]  ; jumptable 00000000000061EB cases 7-10,15-17
.text:00000000000061F4                 lea     rdi, [r15+r14]
.text:00000000000061F8                 shl     rax, 5
.text:00000000000061FC                 add     rax, [rbp+var_3A8]
.text:0000000000006203                 mov     r9, [rax+10h]
.text:0000000000006207                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000620D                 cmp     eax, 1
.text:0000000000006210                 jz      loc_66D8
.text:0000000000006216                 cmp     eax, 2
.text:0000000000006219                 jz      loc_66C0
.text:000000000000621F                 sub     rsp, 8
.text:0000000000006223                 push    [rbp+var_3F0]
.text:0000000000006229
.text:0000000000006229 loc_6229:                               ; CODE XREF: vasnprintf+CBE↓j
.text:0000000000006229                 mov     r8, [rbp+var_3D8]
.text:0000000000006230                 mov     rsi, r10
.text:0000000000006233                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000623A                 mov     edx, 1
.text:000000000000623F                 xor     eax, eax
.text:0000000000006241                 mov     [rbp+var_430], r10
.text:0000000000006248                 call    ___snprintf_chk
.text:000000000000624D                 pop     rsi
.text:000000000000624E                 pop     rdi
.text:000000000000624F                 mov     r10, [rbp+var_430]
.text:0000000000006256
.text:0000000000006256 loc_6256:                               ; CODE XREF: vasnprintf+83D↓j
.text:0000000000006256                                         ; vasnprintf+8BE↓j ...
.text:0000000000006256                 mov     ecx, [rbp+var_3BC]
.text:000000000000625C                 test    ecx, ecx
.text:000000000000625E                 js      loc_639C
.text:0000000000006264
.text:0000000000006264 loc_6264:                               ; CODE XREF: vasnprintf+706↓j
.text:0000000000006264                 movsxd  rdx, ecx
.text:0000000000006267                 cmp     rdx, r10
.text:000000000000626A                 jnb     short loc_627A
.text:000000000000626C                 add     rdx, r15
.text:000000000000626F                 cmp     byte ptr [rdx+r14], 0
.text:0000000000006274                 jnz     def_61EB        ; jumptable 00000000000061EB default case, case 0
.text:0000000000006274                                         ; jumptable 0000000000006790 default case
.text:000000000000627A
.text:000000000000627A loc_627A:                               ; CODE XREF: vasnprintf+5DA↑j
.text:000000000000627A                 cmp     ecx, eax
.text:000000000000627C                 jge     short loc_6286
.text:000000000000627E
.text:000000000000627E loc_627E:                               ; CODE XREF: vasnprintf+71F↓j
.text:000000000000627E                 mov     [rbp+var_3BC], eax
.text:0000000000006284                 mov     ecx, eax
.text:0000000000006286
.text:0000000000006286 loc_6286:                               ; CODE XREF: vasnprintf+5EC↑j
.text:0000000000006286                 lea     eax, [rcx+1]
.text:0000000000006289                 cmp     rax, r10
.text:000000000000628C                 jb      loc_6AC0
.text:0000000000006292                 cmp     rbx, 7FFFFFFEh
.text:0000000000006299                 ja      loc_6AE0
.text:000000000000629F                 lea     rsi, [r12+r12]
.text:00000000000062A3                 lea     edx, [rcx+2]
.text:00000000000062A6                 test    r12, r12
.text:00000000000062A9                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000062B0                 cmovns  rax, rsi
.text:00000000000062B4                 add     rdx, r14
.text:00000000000062B7                 jb      loc_6D78
.text:00000000000062BD                 cmp     rax, rdx
.text:00000000000062C0                 cmovb   rax, rdx
.text:00000000000062C4                 cmp     r12, rax
.text:00000000000062C7                 jnb     loc_61A0
.text:00000000000062CD                 test    r12, r12
.text:00000000000062D0                 js      loc_5E01
.text:00000000000062D6                 cmp     rsi, rax
.text:00000000000062D9                 mov     r12, rsi
.text:00000000000062DC                 jnb     short loc_62EB
.text:00000000000062DE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000062E2                 jz      loc_5E01
.text:00000000000062E8                 mov     r12, rax
.text:00000000000062EB
.text:00000000000062EB loc_62EB:                               ; CODE XREF: vasnprintf+64C↑j
.text:00000000000062EB                 cmp     r15, [rbp+src]
.text:00000000000062F2                 setz    bl
.text:00000000000062F5                 test    r15, r15
.text:00000000000062F8                 jz      loc_6680
.text:00000000000062FE                 test    bl, bl
.text:0000000000006300                 jnz     loc_6680
.text:0000000000006306                 mov     rsi, r12        ; size
.text:0000000000006309                 mov     rdi, r15        ; ptr
.text:000000000000630C                 call    _realloc
.text:0000000000006311                 test    rax, rax
.text:0000000000006314                 jz      loc_5E01
.text:000000000000631A                 mov     r15, rax
.text:000000000000631D                 jmp     loc_61A0
.text:000000000000631D ; ---------------------------------------------------------------------------
.text:0000000000006322                 align 8
.text:0000000000006328
.text:0000000000006328 loc_6328:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006328                                         ; DATA XREF: .rodata:jpt_61EB↓o
.text:0000000000006328                 mov     rax, [r13+50h]  ; jumptable 00000000000061EB cases 5,6,13,14
.text:000000000000632C                 lea     rdi, [r15+r14]
.text:0000000000006330                 shl     rax, 5
.text:0000000000006334                 add     rax, [rbp+var_3A8]
.text:000000000000633B                 mov     r9d, [rax+10h]
.text:000000000000633F                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006345                 cmp     eax, 1
.text:0000000000006348                 jz      loc_6580
.text:000000000000634E
.text:000000000000634E loc_634E:                               ; CODE XREF: vasnprintf+8E9↓j
.text:000000000000634E                                         ; vasnprintf+9B1↓j ...
.text:000000000000634E                 cmp     eax, 2
.text:0000000000006351                 jz      loc_65C8
.text:0000000000006357
.text:0000000000006357 loc_6357:                               ; CODE XREF: vasnprintf+92E↓j
.text:0000000000006357                 sub     rsp, 8
.text:000000000000635B                 push    [rbp+var_3F0]
.text:0000000000006361
.text:0000000000006361 loc_6361:                               ; CODE XREF: vasnprintf+8FF↓j
.text:0000000000006361                 mov     r8, [rbp+var_3D8]
.text:0000000000006368                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000636F                 mov     edx, 1
.text:0000000000006374                 mov     rsi, r10
.text:0000000000006377                 xor     eax, eax
.text:0000000000006379                 mov     [rbp+var_430], r10
.text:0000000000006380                 call    ___snprintf_chk
.text:0000000000006385                 pop     rdx
.text:0000000000006386                 pop     rcx
.text:0000000000006387                 mov     ecx, [rbp+var_3BC]
.text:000000000000638D                 mov     r10, [rbp+var_430]
.text:0000000000006394                 test    ecx, ecx
.text:0000000000006396                 jns     loc_6264
.text:000000000000639C
.text:000000000000639C loc_639C:                               ; CODE XREF: vasnprintf+5CE↑j
.text:000000000000639C                 mov     rdi, [rbp+var_3F8]
.text:00000000000063A3                 cmp     byte ptr [rdi+1], 0
.text:00000000000063A7                 jnz     loc_66E8
.text:00000000000063AD                 test    eax, eax
.text:00000000000063AF                 jns     loc_627E
.text:00000000000063B5                 mov     rax, [rbp+n]
.text:00000000000063BC                 mov     ebx, [rax]
.text:00000000000063BE                 test    ebx, ebx
.text:00000000000063C0                 jnz     short loc_63E0
.text:00000000000063C2                 movzx   eax, byte ptr [r13+48h]
.text:00000000000063C7                 mov     ebx, 16h
.text:00000000000063CC                 and     eax, 0FFFFFFEFh
.text:00000000000063CF                 cmp     al, 63h ; 'c'
.text:00000000000063D1                 mov     eax, 54h ; 'T'
.text:00000000000063D6                 cmovz   ebx, eax
.text:00000000000063D9                 nop     dword ptr [rax+00000000h]
.text:00000000000063E0
.text:00000000000063E0 loc_63E0:                               ; CODE XREF: vasnprintf+730↑j
.text:00000000000063E0                 cmp     r15, [rbp+src]
.text:00000000000063E7                 jz      short loc_63F2
.text:00000000000063E9                 test    r15, r15
.text:00000000000063EC                 jnz     loc_6B9C
.text:00000000000063F2
.text:00000000000063F2 loc_63F2:                               ; CODE XREF: vasnprintf+757↑j
.text:00000000000063F2                                         ; vasnprintf+F14↓j
.text:00000000000063F2                 mov     rax, [rbp+ptr]
.text:00000000000063F9                 test    rax, rax
.text:00000000000063FC                 jz      short loc_6406
.text:00000000000063FE                 mov     rdi, rax        ; ptr
.text:0000000000006401                 call    _free
.text:0000000000006406
.text:0000000000006406 loc_6406:                               ; CODE XREF: vasnprintf+76C↑j
.text:0000000000006406                 mov     rax, [rbp+var_408]
.text:000000000000640D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000006414                 add     rax, 20h ; ' '
.text:0000000000006418                 cmp     rdi, rax
.text:000000000000641B                 jz      short loc_6422
.text:000000000000641D                 call    _free
.text:0000000000006422
.text:0000000000006422 loc_6422:                               ; CODE XREF: vasnprintf+78B↑j
.text:0000000000006422                 mov     rax, [rbp+var_410]
.text:0000000000006429                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000006430                 add     rax, 10h
.text:0000000000006434                 cmp     rdi, rax
.text:0000000000006437                 jz      short loc_643E
.text:0000000000006439                 call    _free
.text:000000000000643E
.text:000000000000643E loc_643E:                               ; CODE XREF: vasnprintf+7A7↑j
.text:000000000000643E                 mov     rax, [rbp+n]
.text:0000000000006445                 xor     r15d, r15d
.text:0000000000006448                 mov     [rax], ebx
.text:000000000000644A                 jmp     loc_5E6F
.text:000000000000644A ; ---------------------------------------------------------------------------
.text:000000000000644F                 align 10h
.text:0000000000006450
.text:0000000000006450 loc_6450:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006450                                         ; DATA XREF: .rodata:jpt_61EB↓o
.text:0000000000006450                 mov     rax, [r13+50h]  ; jumptable 00000000000061EB case 12
.text:0000000000006454                 lea     rdi, [r15+r14]
.text:0000000000006458                 shl     rax, 5
.text:000000000000645C                 add     rax, [rbp+var_3A8]
.text:0000000000006463                 fld     tbyte ptr [rax+10h]
.text:0000000000006466                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000646C                 cmp     eax, 1
.text:000000000000646F                 jz      loc_6AA0
.text:0000000000006475                 cmp     eax, 2
.text:0000000000006478                 jnz     loc_6940
.text:000000000000647E                 mov     eax, [rbp+var_3B4]
.text:0000000000006484                 sub     rsp, 8
.text:0000000000006488                 push    [rbp+var_3F0]
.text:000000000000648E                 mov     r9d, [rbp+var_3B8]
.text:0000000000006495                 mov     r8, [rbp+var_3D8]
.text:000000000000649C                 mov     rsi, r10
.text:000000000000649F                 sub     rsp, 18h
.text:00000000000064A3                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000064AA                 mov     edx, 1
.text:00000000000064AF                 fstp    [rsp+458h+var_450]
.text:00000000000064B3                 push    rax
.text:00000000000064B4                 xor     eax, eax
.text:00000000000064B6                 mov     [rbp+var_430], r10
.text:00000000000064BD                 call    ___snprintf_chk
.text:00000000000064C2                 add     rsp, 30h
.text:00000000000064C6                 mov     r10, [rbp+var_430]
.text:00000000000064CD                 jmp     loc_6256
.text:00000000000064CD ; ---------------------------------------------------------------------------
.text:00000000000064D2                 align 8
.text:00000000000064D8
.text:00000000000064D8 loc_64D8:                               ; CODE XREF: vasnprintf+55B↑j
.text:00000000000064D8                                         ; DATA XREF: .rodata:jpt_61EB↓o
.text:00000000000064D8                 mov     rax, [r13+50h]  ; jumptable 00000000000061EB case 11
.text:00000000000064DC                 lea     rdi, [r15+r14]
.text:00000000000064E0                 shl     rax, 5
.text:00000000000064E4                 add     rax, [rbp+var_3A8]
.text:00000000000064EB                 movsd   xmm0, qword ptr [rax+10h]
.text:00000000000064F0                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000064F6                 cmp     eax, 1
.text:00000000000064F9                 jz      loc_6A90
.text:00000000000064FF                 cmp     eax, 2
.text:0000000000006502                 jnz     loc_6900
.text:0000000000006508                 mov     eax, [rbp+var_3B4]
.text:000000000000650E                 push    [rbp+var_3F0]
.text:0000000000006514                 push    rax
.text:0000000000006515
.text:0000000000006515 loc_6515:                               ; CODE XREF: vasnprintf+E0A↓j
.text:0000000000006515                 mov     r9d, [rbp+var_3B8]
.text:000000000000651C                 mov     r8, [rbp+var_3D8]
.text:0000000000006523                 mov     rsi, r10
.text:0000000000006526                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000652D                 mov     edx, 1
.text:0000000000006532                 mov     eax, 1
.text:0000000000006537                 mov     [rbp+var_430], r10
.text:000000000000653E                 call    ___snprintf_chk
.text:0000000000006543                 pop     r8
.text:0000000000006545                 mov     r10, [rbp+var_430]
.text:000000000000654C                 pop     r9
.text:000000000000654E                 jmp     loc_6256
.text:000000000000654E ; ---------------------------------------------------------------------------
.text:0000000000006553                 align 8
.text:0000000000006558
.text:0000000000006558 loc_6558:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006558                                         ; DATA XREF: .rodata:jpt_61EB↓o
.text:0000000000006558                 mov     rax, [r13+50h]  ; jumptable 00000000000061EB case 4
.text:000000000000655C                 lea     rdi, [r15+r14]
.text:0000000000006560                 shl     rax, 5
.text:0000000000006564                 add     rax, [rbp+var_3A8]
.text:000000000000656B                 movzx   r9d, word ptr [rax+10h]
.text:0000000000006570                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006576                 cmp     eax, 1
.text:0000000000006579                 jnz     loc_634E
.text:000000000000657F                 nop
.text:0000000000006580
.text:0000000000006580 loc_6580:                               ; CODE XREF: vasnprintf+6B8↑j
.text:0000000000006580                                         ; vasnprintf+929↓j ...
.text:0000000000006580                 push    [rbp+var_3F0]
.text:0000000000006586                 push    r9
.text:0000000000006588
.text:0000000000006588 loc_6588:                               ; CODE XREF: vasnprintf+A50↓j
.text:0000000000006588                 mov     r9d, [rbp+var_3B8]
.text:000000000000658F                 jmp     loc_6361
.text:000000000000658F ; ---------------------------------------------------------------------------
.text:0000000000006594                 align 8
.text:0000000000006598
.text:0000000000006598 loc_6598:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006598                                         ; DATA XREF: .rodata:jpt_61EB↓o
.text:0000000000006598                 mov     rax, [r13+50h]  ; jumptable 00000000000061EB case 3
.text:000000000000659C                 lea     rdi, [r15+r14]
.text:00000000000065A0                 shl     rax, 5
.text:00000000000065A4                 add     rax, [rbp+var_3A8]
.text:00000000000065AB                 movsx   r9d, word ptr [rax+10h]
.text:00000000000065B0                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000065B6                 cmp     eax, 1
.text:00000000000065B9                 jz      short loc_6580
.text:00000000000065BB                 cmp     eax, 2
.text:00000000000065BE                 jnz     loc_6357
.text:00000000000065C4                 nop     dword ptr [rax+00h]
.text:00000000000065C8
.text:00000000000065C8 loc_65C8:                               ; CODE XREF: vasnprintf+6C1↑j
.text:00000000000065C8                 sub     rsp, 8
.text:00000000000065CC                 push    [rbp+var_3F0]
.text:00000000000065D2                 push    r9
.text:00000000000065D4
.text:00000000000065D4 loc_65D4:                               ; CODE XREF: vasnprintf+A3C↓j
.text:00000000000065D4                 mov     eax, [rbp+var_3B4]
.text:00000000000065DA                 push    rax
.text:00000000000065DB
.text:00000000000065DB loc_65DB:                               ; CODE XREF: vasnprintf+E21↓j
.text:00000000000065DB                 mov     r9d, [rbp+var_3B8]
.text:00000000000065E2                 mov     r8, [rbp+var_3D8]
.text:00000000000065E9                 mov     rsi, r10
.text:00000000000065EC                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000065F3                 mov     edx, 1
.text:00000000000065F8                 xor     eax, eax
.text:00000000000065FA                 mov     [rbp+var_430], r10
.text:0000000000006601                 call    ___snprintf_chk
.text:0000000000006606                 add     rsp, 20h
.text:000000000000660A                 mov     r10, [rbp+var_430]
.text:0000000000006611                 jmp     loc_6256
.text:0000000000006611 ; ---------------------------------------------------------------------------
.text:0000000000006616                 align 20h
.text:0000000000006620
.text:0000000000006620 loc_6620:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006620                                         ; DATA XREF: .rodata:jpt_61EB↓o
.text:0000000000006620                 mov     rax, [r13+50h]  ; jumptable 00000000000061EB case 2
.text:0000000000006624                 lea     rdi, [r15+r14]
.text:0000000000006628                 shl     rax, 5
.text:000000000000662C                 add     rax, [rbp+var_3A8]
.text:0000000000006633                 movzx   r9d, byte ptr [rax+10h]
.text:0000000000006638                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000663E                 cmp     eax, 1
.text:0000000000006641                 jnz     loc_634E
.text:0000000000006647                 jmp     loc_6580
.text:0000000000006647 ; ---------------------------------------------------------------------------
.text:000000000000664C                 align 10h
.text:0000000000006650
.text:0000000000006650 loc_6650:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006650                                         ; DATA XREF: .rodata:jpt_61EB↓o
.text:0000000000006650                 mov     rax, [r13+50h]  ; jumptable 00000000000061EB case 1
.text:0000000000006654                 lea     rdi, [r15+r14]
.text:0000000000006658                 shl     rax, 5
.text:000000000000665C                 add     rax, [rbp+var_3A8]
.text:0000000000006663                 movsx   r9d, byte ptr [rax+10h]
.text:0000000000006668                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000666E                 cmp     eax, 1
.text:0000000000006671                 jnz     loc_634E
.text:0000000000006677                 jmp     loc_6580
.text:0000000000006677 ; ---------------------------------------------------------------------------
.text:000000000000667C                 align 20h
.text:0000000000006680
.text:0000000000006680 loc_6680:                               ; CODE XREF: vasnprintf+668↑j
.text:0000000000006680                                         ; vasnprintf+670↑j
.text:0000000000006680                 mov     rdi, r12        ; size
.text:0000000000006683                 call    _malloc
.text:0000000000006688                 test    rax, rax
.text:000000000000668B                 mov     rcx, rax
.text:000000000000668E                 jz      loc_5E01
.text:0000000000006694                 test    r14, r14
.text:0000000000006697                 jz      loc_6750
.text:000000000000669D                 test    bl, bl
.text:000000000000669F                 jz      loc_6750
.text:00000000000066A5                 mov     rsi, r15        ; src
.text:00000000000066A8                 mov     rdx, r14        ; n
.text:00000000000066AB                 mov     rdi, rax        ; dest
.text:00000000000066AE                 call    _memcpy
.text:00000000000066B3                 mov     r15, rax
.text:00000000000066B6                 jmp     loc_61A0
.text:00000000000066B6 ; ---------------------------------------------------------------------------
.text:00000000000066BB                 align 20h
.text:00000000000066C0
.text:00000000000066C0 loc_66C0:                               ; CODE XREF: vasnprintf+589↑j
.text:00000000000066C0                 sub     rsp, 8
.text:00000000000066C4                 push    [rbp+var_3F0]
.text:00000000000066CA                 push    r9
.text:00000000000066CC                 jmp     loc_65D4
.text:00000000000066CC ; ---------------------------------------------------------------------------
.text:00000000000066D1                 align 8
.text:00000000000066D8
.text:00000000000066D8 loc_66D8:                               ; CODE XREF: vasnprintf+580↑j
.text:00000000000066D8                 push    [rbp+var_3F0]
.text:00000000000066DE                 push    r9
.text:00000000000066E0                 jmp     loc_6588
.text:00000000000066E0 ; ---------------------------------------------------------------------------
.text:00000000000066E5                 align 8
.text:00000000000066E8
.text:00000000000066E8 loc_66E8:                               ; CODE XREF: vasnprintf+717↑j
.text:00000000000066E8                 mov     byte ptr [rdi+1], 0
.text:00000000000066EC                 jmp     loc_61A0
.text:00000000000066EC ; ---------------------------------------------------------------------------
.text:00000000000066F1                 align 8
.text:00000000000066F8
.text:00000000000066F8 loc_66F8:                               ; CODE XREF: vasnprintf+2D3↑j
.text:00000000000066F8                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000066FC                 jnz     def_61EB        ; jumptable 00000000000061EB default case, case 0
.text:00000000000066FC                                         ; jumptable 0000000000006790 default case
.text:0000000000006702                 mov     rax, r14
.text:0000000000006705                 add     rax, 1
.text:0000000000006709                 mov     rbx, rax
.text:000000000000670C                 jnb     loc_6798
.text:0000000000006712                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000006716                 jnz     loc_5DF5
.text:000000000000671C                 mov     rbx, r12
.text:000000000000671F
.text:000000000000671F loc_671F:                               ; CODE XREF: vasnprintf+B0B↓j
.text:000000000000671F                                         ; vasnprintf+B58↓j ...
.text:000000000000671F                 mov     byte ptr [r15+r14], 25h ; '%'
.text:0000000000006724
.text:0000000000006724 loc_6724:                               ; CODE XREF: vasnprintf+C46↓j
.text:0000000000006724                                         ; vasnprintf+D76↓j ...
.text:0000000000006724                 mov     r8, [r13+8]
.text:0000000000006728                 add     r13, 58h ; 'X'
.text:000000000000672C                 mov     rcx, [r13+0]
.text:0000000000006730                 add     [rbp+var_400], 1
.text:0000000000006738                 cmp     rcx, r8
.text:000000000000673B                 jnz     loc_5DD9
.text:0000000000006741
.text:0000000000006741 loc_6741:                               ; CODE XREF: vasnprintf+143↑j
.text:0000000000006741                 mov     r14, rbx
.text:0000000000006744                 jmp     loc_5F43
.text:0000000000006744 ; ---------------------------------------------------------------------------
.text:0000000000006749                 align 10h
.text:0000000000006750
.text:0000000000006750 loc_6750:                               ; CODE XREF: vasnprintf+A07↑j
.text:0000000000006750                                         ; vasnprintf+A0F↑j
.text:0000000000006750                 mov     r15, rcx
.text:0000000000006753                 jmp     loc_61A0
.text:0000000000006758 ; ---------------------------------------------------------------------------
.text:0000000000006758
.text:0000000000006758 loc_6758:                               ; CODE XREF: vasnprintf+9A↑j
.text:0000000000006758                                         ; vasnprintf+AE↑j ...
.text:0000000000006758                 call    ___errno_location
.text:000000000000675D                 mov     [rbp+n], rax
.text:0000000000006764                 jmp     loc_5E27
.text:0000000000006764 ; ---------------------------------------------------------------------------
.text:0000000000006769                 align 10h
.text:0000000000006770
.text:0000000000006770 loc_6770:                               ; CODE XREF: vasnprintf+2FC↑j
.text:0000000000006770                 mov     edx, edi
.text:0000000000006772                 sub     edx, 12h        ; switch 5 cases
.text:0000000000006775                 cmp     edx, 4
.text:0000000000006778                 ja      def_61EB        ; jumptable 00000000000061EB default case, case 0
.text:0000000000006778                                         ; jumptable 0000000000006790 default case
.text:000000000000677E                 lea     rdi, jpt_6790
.text:0000000000006785                 mov     rax, [rax+10h]
.text:0000000000006789                 movsxd  rdx, ds:(jpt_6790 - 9330h)[rdi+rdx*4]
.text:000000000000678D                 add     rdx, rdi
.text:0000000000006790                 jmp     rdx             ; switch jump
.text:0000000000006790 ; ---------------------------------------------------------------------------
.text:0000000000006792                 align 8
.text:0000000000006798
.text:0000000000006798 loc_6798:                               ; CODE XREF: vasnprintf+A7C↑j
.text:0000000000006798                 cmp     r12, rax
.text:000000000000679B                 jnb     short loc_671F
.text:000000000000679D                 test    r12, r12
.text:00000000000067A0                 jnz     loc_6B70
.text:00000000000067A6                 cmp     rax, 0Ch
.text:00000000000067AA                 ja      loc_6B82
.text:00000000000067B0                 mov     r12d, 0Ch
.text:00000000000067B6
.text:00000000000067B6 loc_67B6:                               ; CODE XREF: vasnprintf+EEC↓j
.text:00000000000067B6                                         ; vasnprintf+EFF↓j
.text:00000000000067B6                 cmp     r15, [rbp+src]
.text:00000000000067BD                 setz    dl
.text:00000000000067C0                 test    r15, r15
.text:00000000000067C3                 jz      loc_6A30
.text:00000000000067C9                 test    dl, dl
.text:00000000000067CB                 jnz     loc_6A30
.text:00000000000067D1                 mov     rsi, r12        ; size
.text:00000000000067D4                 mov     rdi, r15        ; ptr
.text:00000000000067D7                 call    _realloc
.text:00000000000067DC                 test    rax, rax
.text:00000000000067DF                 jz      loc_68DB
.text:00000000000067E5                 mov     r15, rax
.text:00000000000067E8                 jmp     loc_671F
.text:00000000000067E8 ; ---------------------------------------------------------------------------
.text:00000000000067ED                 align 10h
.text:00000000000067F0
.text:00000000000067F0 loc_67F0:                               ; CODE XREF: vasnprintf+42E↑j
.text:00000000000067F0                 mov     dword ptr [rbp+var_3E0], 0
.text:00000000000067FA                 jmp     loc_60E7
.text:00000000000067FA ; ---------------------------------------------------------------------------
.text:00000000000067FF                 align 20h
.text:0000000000006800
.text:0000000000006800 loc_6800:                               ; CODE XREF: vasnprintf+240↑j
.text:0000000000006800                 js      loc_5DF5
.text:0000000000006806                 add     r12, r12
.text:0000000000006809                 cmp     r12, rax
.text:000000000000680C                 jnb     loc_5EE6
.text:0000000000006812
.text:0000000000006812 loc_6812:                               ; CODE XREF: vasnprintf+24A↑j
.text:0000000000006812                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006816                 jz      loc_5DF5
.text:000000000000681C                 cmp     r15, [rbp+src]
.text:0000000000006823                 mov     r12, rax
.text:0000000000006826                 setz    dl
.text:0000000000006829                 test    r15, r15
.text:000000000000682C                 jnz     loc_5EF9
.text:0000000000006832                 nop     word ptr [rax+rax+00h]
.text:0000000000006838
.text:0000000000006838 loc_6838:                               ; CODE XREF: vasnprintf+263↑j
.text:0000000000006838                                         ; vasnprintf+26B↑j
.text:0000000000006838                 mov     rdi, r12        ; size
.text:000000000000683B                 mov     [rbp+var_3E0], r8
.text:0000000000006842                 mov     byte ptr [rbp+var_3D0], dl
.text:0000000000006848                 mov     [rbp+n], rcx
.text:000000000000684F                 call    _malloc
.text:0000000000006854                 test    rax, rax
.text:0000000000006857                 mov     r9, rax
.text:000000000000685A                 mov     rcx, [rbp+n]
.text:0000000000006861                 movzx   edx, byte ptr [rbp+var_3D0]
.text:0000000000006868                 mov     r8, [rbp+var_3E0]
.text:000000000000686F                 jz      loc_5DF5
.text:0000000000006875                 test    rbx, rbx
.text:0000000000006878                 jz      loc_6A80
.text:000000000000687E                 test    dl, dl
.text:0000000000006880                 jz      loc_6A80
.text:0000000000006886                 mov     rsi, r15        ; src
.text:0000000000006889                 mov     rdx, rbx        ; n
.text:000000000000688C                 mov     rdi, rax        ; dest
.text:000000000000688F                 mov     [rbp+var_3D0], r8
.text:0000000000006896                 mov     [rbp+n], rcx
.text:000000000000689D                 call    _memcpy
.text:00000000000068A2                 mov     rcx, [rbp+n]
.text:00000000000068A9                 mov     r15, rax
.text:00000000000068AC                 mov     r8, [rbp+var_3D0]
.text:00000000000068B3                 jmp     loc_5F34
.text:00000000000068B3 ; ---------------------------------------------------------------------------
.text:00000000000068B8                 align 20h
.text:00000000000068C0
.text:00000000000068C0 loc_68C0:                               ; CODE XREF: vasnprintf+15F↑j
.text:00000000000068C0                 mov     r14, r12
.text:00000000000068C3                 jmp     loc_5F34
.text:00000000000068C3 ; ---------------------------------------------------------------------------
.text:00000000000068C8                 align 10h
.text:00000000000068D0
.text:00000000000068D0 loc_68D0:                               ; CODE XREF: vasnprintf+B00↑j
.text:00000000000068D0                                         ; DATA XREF: .rodata:jpt_6790↓o
.text:00000000000068D0                 mov     [rax], r14      ; jumptable 0000000000006790 cases 21,22
.text:00000000000068D3                 mov     rbx, r14
.text:00000000000068D6                 jmp     loc_6724
.text:00000000000068DB ; ---------------------------------------------------------------------------
.text:00000000000068DB
.text:00000000000068DB loc_68DB:                               ; CODE XREF: vasnprintf+29B↑j
.text:00000000000068DB                                         ; vasnprintf+B4F↑j ...
.text:00000000000068DB                 call    ___errno_location
.text:00000000000068E0                 mov     [rbp+n], rax
.text:00000000000068E7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000068F0
.text:00000000000068F0 loc_68F0:                               ; CODE XREF: vasnprintf+17D↑j
.text:00000000000068F0                 mov     rdi, r15        ; ptr
.text:00000000000068F3                 call    _free
.text:00000000000068F8                 jmp     loc_5E13
.text:00000000000068F8 ; ---------------------------------------------------------------------------
.text:00000000000068FD                 align 20h
.text:0000000000006900
.text:0000000000006900 loc_6900:                               ; CODE XREF: vasnprintf+872↑j
.text:0000000000006900                 mov     r9, [rbp+var_3F0]
.text:0000000000006907                 mov     r8, [rbp+var_3D8]
.text:000000000000690E                 mov     rsi, r10
.text:0000000000006911                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006918                 mov     edx, 1
.text:000000000000691D                 mov     eax, 1
.text:0000000000006922                 mov     [rbp+var_430], r10
.text:0000000000006929                 call    ___snprintf_chk
.text:000000000000692E                 mov     r10, [rbp+var_430]
.text:0000000000006935                 jmp     loc_6256
.text:0000000000006935 ; ---------------------------------------------------------------------------
.text:000000000000693A                 align 20h
.text:0000000000006940
.text:0000000000006940 loc_6940:                               ; CODE XREF: vasnprintf+7E8↑j
.text:0000000000006940                 sub     rsp, 10h
.text:0000000000006944                 mov     r9, [rbp+var_3F0]
.text:000000000000694B                 fstp    [rsp+440h+var_440]
.text:000000000000694E                 jmp     loc_6229
.text:000000000000694E ; ---------------------------------------------------------------------------
.text:0000000000006953                 align 8
.text:0000000000006958
.text:0000000000006958 loc_6958:                               ; CODE XREF: vasnprintf+4A3↑j
.text:0000000000006958                 js      loc_5DF5
.text:000000000000695E                 add     r12, r12
.text:0000000000006961                 cmp     r12, rax
.text:0000000000006964                 jnb     loc_6149
.text:000000000000696A                 nop     word ptr [rax+rax+00h]
.text:0000000000006970
.text:0000000000006970 loc_6970:                               ; CODE XREF: vasnprintf+4AD↑j
.text:0000000000006970                                         ; vasnprintf+1114↓j
.text:0000000000006970                 test    rdx, rdx
.text:0000000000006973                 jnz     loc_5DF5
.text:0000000000006979                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000697D                 jz      loc_5DF5
.text:0000000000006983                 cmp     r15, [rbp+src]
.text:000000000000698A                 mov     r12, rax
.text:000000000000698D                 setz    dl
.text:0000000000006990                 test    r15, r15
.text:0000000000006993                 jnz     loc_615C
.text:0000000000006999                 nop     dword ptr [rax+00000000h]
.text:00000000000069A0
.text:00000000000069A0 loc_69A0:                               ; CODE XREF: vasnprintf+4C6↑j
.text:00000000000069A0                                         ; vasnprintf+4CE↑j
.text:00000000000069A0                 mov     rdi, r12        ; size
.text:00000000000069A3                 mov     byte ptr [rbp+n], dl
.text:00000000000069A9                 call    _malloc
.text:00000000000069AE                 test    rax, rax
.text:00000000000069B1                 mov     rcx, rax
.text:00000000000069B4                 movzx   edx, byte ptr [rbp+n]
.text:00000000000069BB                 jz      loc_5DF5
.text:00000000000069C1                 test    r14, r14
.text:00000000000069C4                 jz      loc_6B60
.text:00000000000069CA                 test    dl, dl
.text:00000000000069CC                 jz      loc_6B60
.text:00000000000069D2                 mov     rsi, r15        ; src
.text:00000000000069D5                 mov     rdx, r14        ; n
.text:00000000000069D8                 mov     rdi, rax        ; dest
.text:00000000000069DB                 call    _memcpy
.text:00000000000069E0                 mov     r15, rax
.text:00000000000069E3                 jmp     loc_617B
.text:00000000000069E3 ; ---------------------------------------------------------------------------
.text:00000000000069E8                 align 10h
.text:00000000000069F0
.text:00000000000069F0 loc_69F0:                               ; CODE XREF: vasnprintf+402↑j
.text:00000000000069F0                 mov     byte ptr [rbx], 4Ch ; 'L'
.text:00000000000069F3                 add     rbx, 1
.text:00000000000069F7                 jmp     loc_60AB
.text:00000000000069F7 ; ---------------------------------------------------------------------------
.text:00000000000069FC                 align 20h
.text:0000000000006A00
.text:0000000000006A00 loc_6A00:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000006A00                                         ; DATA XREF: .rodata:jpt_6790↓o
.text:0000000000006A00                 mov     [rax], r14b     ; jumptable 0000000000006790 case 18
.text:0000000000006A03                 mov     rbx, r14
.text:0000000000006A06                 jmp     loc_6724
.text:0000000000006A06 ; ---------------------------------------------------------------------------
.text:0000000000006A0B                 align 10h
.text:0000000000006A10
.text:0000000000006A10 loc_6A10:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000006A10                                         ; DATA XREF: .rodata:jpt_6790↓o
.text:0000000000006A10                 mov     [rax], r14d     ; jumptable 0000000000006790 case 20
.text:0000000000006A13                 mov     rbx, r14
.text:0000000000006A16                 jmp     loc_6724
.text:0000000000006A16 ; ---------------------------------------------------------------------------
.text:0000000000006A1B                 align 20h
.text:0000000000006A20
.text:0000000000006A20 loc_6A20:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000006A20                                         ; DATA XREF: .rodata:jpt_6790↓o
.text:0000000000006A20                 mov     [rax], r14w     ; jumptable 0000000000006790 case 19
.text:0000000000006A24                 mov     rbx, r14
.text:0000000000006A27                 jmp     loc_6724
.text:0000000000006A27 ; ---------------------------------------------------------------------------
.text:0000000000006A2C                 align 10h
.text:0000000000006A30
.text:0000000000006A30 loc_6A30:                               ; CODE XREF: vasnprintf+B33↑j
.text:0000000000006A30                                         ; vasnprintf+B3B↑j
.text:0000000000006A30                 mov     rdi, r12        ; size
.text:0000000000006A33                 mov     byte ptr [rbp+n], dl
.text:0000000000006A39                 call    _malloc
.text:0000000000006A3E                 test    rax, rax
.text:0000000000006A41                 mov     rcx, rax
.text:0000000000006A44                 movzx   edx, byte ptr [rbp+n]
.text:0000000000006A4B                 jz      loc_5DF5
.text:0000000000006A51                 test    r14, r14
.text:0000000000006A54                 jz      loc_6B94
.text:0000000000006A5A                 test    dl, dl
.text:0000000000006A5C                 jz      loc_6B94
.text:0000000000006A62                 mov     rsi, r15        ; src
.text:0000000000006A65                 mov     rdx, r14        ; n
.text:0000000000006A68                 mov     rdi, rax        ; dest
.text:0000000000006A6B                 call    _memcpy
.text:0000000000006A70                 mov     r15, rax
.text:0000000000006A73                 jmp     loc_671F
.text:0000000000006A73 ; ---------------------------------------------------------------------------
.text:0000000000006A78                 align 20h
.text:0000000000006A80
.text:0000000000006A80 loc_6A80:                               ; CODE XREF: vasnprintf+BE8↑j
.text:0000000000006A80                                         ; vasnprintf+BF0↑j
.text:0000000000006A80                 mov     r15, r9
.text:0000000000006A83                 jmp     loc_5F34
.text:0000000000006A83 ; ---------------------------------------------------------------------------
.text:0000000000006A88                 align 10h
.text:0000000000006A90
.text:0000000000006A90 loc_6A90:                               ; CODE XREF: vasnprintf+869↑j
.text:0000000000006A90                 sub     rsp, 8
.text:0000000000006A94                 push    [rbp+var_3F0]
.text:0000000000006A9A                 jmp     loc_6515
.text:0000000000006A9A ; ---------------------------------------------------------------------------
.text:0000000000006A9F                 align 20h
.text:0000000000006AA0
.text:0000000000006AA0 loc_6AA0:                               ; CODE XREF: vasnprintf+7DF↑j
.text:0000000000006AA0                 sub     rsp, 8
.text:0000000000006AA4                 push    [rbp+var_3F0]
.text:0000000000006AAA                 sub     rsp, 10h
.text:0000000000006AAE                 fstp    [rsp+450h+var_450]
.text:0000000000006AB1                 jmp     loc_65DB
.text:0000000000006AB1 ; ---------------------------------------------------------------------------
.text:0000000000006AB6                 align 20h
.text:0000000000006AC0
.text:0000000000006AC0 loc_6AC0:                               ; CODE XREF: vasnprintf+5FC↑j
.text:0000000000006AC0                 mov     rax, [rbp+n]
.text:0000000000006AC7                 mov     edi, [rbp-424h]
.text:0000000000006ACD                 movsxd  rbx, ecx
.text:0000000000006AD0                 add     rbx, r14
.text:0000000000006AD3                 mov     [rax], edi
.text:0000000000006AD5                 jmp     loc_6724
.text:0000000000006AD5 ; ---------------------------------------------------------------------------
.text:0000000000006ADA                 align 20h
.text:0000000000006AE0
.text:0000000000006AE0 loc_6AE0:                               ; CODE XREF: vasnprintf+609↑j
.text:0000000000006AE0                 cmp     r15, [rbp+src]
.text:0000000000006AE7                 jz      short loc_6AF2
.text:0000000000006AE9                 test    r15, r15
.text:0000000000006AEC                 jnz     loc_6BA9
.text:0000000000006AF2
.text:0000000000006AF2 loc_6AF2:                               ; CODE XREF: vasnprintf+E57↑j
.text:0000000000006AF2                                         ; vasnprintf+F21↓j
.text:0000000000006AF2                 mov     rax, [rbp+ptr]
.text:0000000000006AF9                 test    rax, rax
.text:0000000000006AFC                 jz      short loc_6B06
.text:0000000000006AFE                 mov     rdi, rax        ; ptr
.text:0000000000006B01                 call    _free
.text:0000000000006B06
.text:0000000000006B06 loc_6B06:                               ; CODE XREF: vasnprintf+E6C↑j
.text:0000000000006B06                 mov     rax, [rbp+var_408]
.text:0000000000006B0D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000006B14                 add     rax, 20h ; ' '
.text:0000000000006B18                 cmp     rdi, rax
.text:0000000000006B1B                 jz      short loc_6B22
.text:0000000000006B1D                 call    _free
.text:0000000000006B22
.text:0000000000006B22 loc_6B22:                               ; CODE XREF: vasnprintf+E8B↑j
.text:0000000000006B22                 mov     rax, [rbp+var_410]
.text:0000000000006B29                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000006B30                 add     rax, 10h
.text:0000000000006B34                 cmp     rdi, rax
.text:0000000000006B37                 jz      short loc_6B3E
.text:0000000000006B39                 call    _free
.text:0000000000006B3E
.text:0000000000006B3E loc_6B3E:                               ; CODE XREF: vasnprintf+EA7↑j
.text:0000000000006B3E                 mov     rax, [rbp+n]
.text:0000000000006B45                 xor     r15d, r15d
.text:0000000000006B48                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000006B4E                 jmp     loc_5E6F
.text:0000000000006B4E ; ---------------------------------------------------------------------------
.text:0000000000006B53                 align 8
.text:0000000000006B58
.text:0000000000006B58 loc_6B58:                               ; CODE XREF: vasnprintf+60↑j
.text:0000000000006B58                 xor     r15d, r15d
.text:0000000000006B5B                 jmp     loc_5E6F
.text:0000000000006B60 ; ---------------------------------------------------------------------------
.text:0000000000006B60
.text:0000000000006B60 loc_6B60:                               ; CODE XREF: vasnprintf+D34↑j
.text:0000000000006B60                                         ; vasnprintf+D3C↑j
.text:0000000000006B60                 mov     r15, rcx
.text:0000000000006B63                 jmp     loc_617B
.text:0000000000006B63 ; ---------------------------------------------------------------------------
.text:0000000000006B68                 align 10h
.text:0000000000006B70
.text:0000000000006B70 loc_6B70:                               ; CODE XREF: vasnprintf+B10↑j
.text:0000000000006B70                 js      loc_5DF5
.text:0000000000006B76                 add     r12, r12
.text:0000000000006B79                 cmp     r12, rax
.text:0000000000006B7C                 jnb     loc_67B6
.text:0000000000006B82
.text:0000000000006B82 loc_6B82:                               ; CODE XREF: vasnprintf+B1A↑j
.text:0000000000006B82                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006B86                 jz      loc_5DF5
.text:0000000000006B8C                 mov     r12, rax
.text:0000000000006B8F                 jmp     loc_67B6
.text:0000000000006B94 ; ---------------------------------------------------------------------------
.text:0000000000006B94
.text:0000000000006B94 loc_6B94:                               ; CODE XREF: vasnprintf+DC4↑j
.text:0000000000006B94                                         ; vasnprintf+DCC↑j
.text:0000000000006B94                 mov     r15, rcx
.text:0000000000006B97                 jmp     loc_671F
.text:0000000000006B9C ; ---------------------------------------------------------------------------
.text:0000000000006B9C
.text:0000000000006B9C loc_6B9C:                               ; CODE XREF: vasnprintf+75C↑j
.text:0000000000006B9C                 mov     rdi, r15        ; ptr
.text:0000000000006B9F                 call    _free
.text:0000000000006BA4                 jmp     loc_63F2
.text:0000000000006BA9 ; ---------------------------------------------------------------------------
.text:0000000000006BA9
.text:0000000000006BA9 loc_6BA9:                               ; CODE XREF: vasnprintf+E5C↑j
.text:0000000000006BA9                 mov     rdi, r15        ; ptr
.text:0000000000006BAC                 call    _free
.text:0000000000006BB1                 jmp     loc_6AF2
.text:0000000000006BB6 ; ---------------------------------------------------------------------------
.text:0000000000006BB6
.text:0000000000006BB6 def_61EB:                               ; CODE XREF: vasnprintf+2DD↑j
.text:0000000000006BB6                                         ; vasnprintf+43E↑j ...
.text:0000000000006BB6                 call    _abort          ; jumptable 00000000000061EB default case, case 0
.text:0000000000006BB6                                         ; jumptable 0000000000006790 default case
.text:0000000000006BB6 ; ---------------------------------------------------------------------------
.text:0000000000006BBB                 align 20h
.text:0000000000006BC0
.text:0000000000006BC0 loc_6BC0:                               ; CODE XREF: vasnprintf+73↑j
.text:0000000000006BC0                 mov     rax, [rbp+var_408]
.text:0000000000006BC7                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000006BCE                 add     rax, 20h ; ' '
.text:0000000000006BD2                 cmp     rdi, rax
.text:0000000000006BD5                 jz      short loc_6BDC
.text:0000000000006BD7                 call    _free
.text:0000000000006BDC
.text:0000000000006BDC loc_6BDC:                               ; CODE XREF: vasnprintf+F45↑j
.text:0000000000006BDC                 mov     rax, [rbp+var_410]
.text:0000000000006BE3                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000006BEA                 add     rax, 10h
.text:0000000000006BEE                 cmp     rdi, rax
.text:0000000000006BF1                 jz      short loc_6BF8
.text:0000000000006BF3                 call    _free
.text:0000000000006BF8
.text:0000000000006BF8 loc_6BF8:                               ; CODE XREF: vasnprintf+F61↑j
.text:0000000000006BF8                 call    ___errno_location
.text:0000000000006BFD                 xor     r15d, r15d
.text:0000000000006C00                 mov     dword ptr [rax], 16h
.text:0000000000006C06                 jmp     loc_5E6F
.text:0000000000006C0B ; ---------------------------------------------------------------------------
.text:0000000000006C0B
.text:0000000000006C0B loc_6C0B:                               ; CODE XREF: vasnprintf+2C1↑j
.text:0000000000006C0B                 mov     rbx, r14
.text:0000000000006C0E                 xor     eax, eax
.text:0000000000006C10                 add     rbx, 1
.text:0000000000006C14                 jb      loc_6D20
.text:0000000000006C1A                 cmp     r12, rbx
.text:0000000000006C1D                 jnb     short loc_6C6C
.text:0000000000006C1F                 test    r12, r12
.text:0000000000006C22                 jnz     loc_6D59
.text:0000000000006C28                 cmp     rbx, 0Ch
.text:0000000000006C2C                 ja      loc_6D3E
.text:0000000000006C32                 mov     r12d, 0Ch
.text:0000000000006C38
.text:0000000000006C38 loc_6C38:                               ; CODE XREF: vasnprintf+10C4↓j
.text:0000000000006C38                                         ; vasnprintf+10D5↓j
.text:0000000000006C38                 cmp     r15, [rbp+src]
.text:0000000000006C3F                 setz    r13b
.text:0000000000006C43                 test    r15, r15
.text:0000000000006C46                 jz      loc_6CEC
.text:0000000000006C4C                 test    r13b, r13b
.text:0000000000006C4F                 jnz     loc_6CEC
.text:0000000000006C55                 mov     rsi, r12        ; size
.text:0000000000006C58                 mov     rdi, r15        ; ptr
.text:0000000000006C5B                 call    _realloc
.text:0000000000006C60                 test    rax, rax
.text:0000000000006C63                 jz      loc_68DB
.text:0000000000006C69                 mov     r15, rax
.text:0000000000006C6C
.text:0000000000006C6C loc_6C6C:                               ; CODE XREF: vasnprintf+F8D↑j
.text:0000000000006C6C                                         ; vasnprintf+108B↓j ...
.text:0000000000006C6C                 cmp     r15, [rbp+src]
.text:0000000000006C73                 mov     byte ptr [r15+r14], 0
.text:0000000000006C78                 jz      short loc_6C91
.text:0000000000006C7A                 cmp     r12, rbx
.text:0000000000006C7D                 jbe     short loc_6C91
.text:0000000000006C7F                 mov     rdi, r15        ; ptr
.text:0000000000006C82                 mov     rsi, rbx        ; size
.text:0000000000006C85                 call    _realloc
.text:0000000000006C8A                 test    rax, rax
.text:0000000000006C8D                 cmovnz  r15, rax
.text:0000000000006C91
.text:0000000000006C91 loc_6C91:                               ; CODE XREF: vasnprintf+FE8↑j
.text:0000000000006C91                                         ; vasnprintf+FED↑j
.text:0000000000006C91                 mov     rax, [rbp+ptr]
.text:0000000000006C98                 test    rax, rax
.text:0000000000006C9B                 jz      short loc_6CA5
.text:0000000000006C9D                 mov     rdi, rax        ; ptr
.text:0000000000006CA0                 call    _free
.text:0000000000006CA5
.text:0000000000006CA5 loc_6CA5:                               ; CODE XREF: vasnprintf+100B↑j
.text:0000000000006CA5                 mov     rax, [rbp+var_408]
.text:0000000000006CAC                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000006CB3                 add     rax, 20h ; ' '
.text:0000000000006CB7                 cmp     rdi, rax
.text:0000000000006CBA                 jz      short loc_6CC1
.text:0000000000006CBC                 call    _free
.text:0000000000006CC1
.text:0000000000006CC1 loc_6CC1:                               ; CODE XREF: vasnprintf+102A↑j
.text:0000000000006CC1                 mov     rax, [rbp+var_410]
.text:0000000000006CC8                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000006CCF                 add     rax, 10h
.text:0000000000006CD3                 cmp     rdi, rax
.text:0000000000006CD6                 jz      short loc_6CDD
.text:0000000000006CD8                 call    _free
.text:0000000000006CDD
.text:0000000000006CDD loc_6CDD:                               ; CODE XREF: vasnprintf+1046↑j
.text:0000000000006CDD                 mov     rax, [rbp+var_418]
.text:0000000000006CE4                 mov     [rax], r14
.text:0000000000006CE7                 jmp     loc_5E6F
.text:0000000000006CEC ; ---------------------------------------------------------------------------
.text:0000000000006CEC
.text:0000000000006CEC loc_6CEC:                               ; CODE XREF: vasnprintf+FB6↑j
.text:0000000000006CEC                                         ; vasnprintf+FBF↑j
.text:0000000000006CEC                 mov     rdi, r12        ; size
.text:0000000000006CEF                 call    _malloc
.text:0000000000006CF4                 test    rax, rax
.text:0000000000006CF7                 mov     rcx, rax
.text:0000000000006CFA                 jz      loc_5DF5
.text:0000000000006D00                 test    r14, r14
.text:0000000000006D03                 jz      short loc_6D70
.text:0000000000006D05                 test    r13b, r13b
.text:0000000000006D08                 jz      short loc_6D70
.text:0000000000006D0A                 mov     rsi, r15        ; src
.text:0000000000006D0D                 mov     rdx, r14        ; n
.text:0000000000006D10                 mov     rdi, rax        ; dest
.text:0000000000006D13                 call    _memcpy
.text:0000000000006D18                 mov     r15, rax
.text:0000000000006D1B                 jmp     loc_6C6C
.text:0000000000006D20 ; ---------------------------------------------------------------------------
.text:0000000000006D20
.text:0000000000006D20 loc_6D20:                               ; CODE XREF: vasnprintf+F84↑j
.text:0000000000006D20                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000006D24                 mov     eax, 1
.text:0000000000006D29                 jz      loc_6C6C
.text:0000000000006D2F                 test    r12, r12
.text:0000000000006D32                 jz      loc_5DF5
.text:0000000000006D38                 js      loc_5DF5
.text:0000000000006D3E
.text:0000000000006D3E loc_6D3E:                               ; CODE XREF: vasnprintf+F9C↑j
.text:0000000000006D3E                                         ; vasnprintf+10DB↓j
.text:0000000000006D3E                 test    rax, rax
.text:0000000000006D41                 jnz     loc_5DF5
.text:0000000000006D47                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006D4B                 jz      loc_5DF5
.text:0000000000006D51                 mov     r12, rbx
.text:0000000000006D54                 jmp     loc_6C38
.text:0000000000006D59 ; ---------------------------------------------------------------------------
.text:0000000000006D59
.text:0000000000006D59 loc_6D59:                               ; CODE XREF: vasnprintf+F92↑j
.text:0000000000006D59                 js      loc_5DF5
.text:0000000000006D5F                 add     r12, r12
.text:0000000000006D62                 cmp     r12, rbx
.text:0000000000006D65                 jnb     loc_6C38
.text:0000000000006D6B                 jmp     short loc_6D3E
.text:0000000000006D6B ; ---------------------------------------------------------------------------
.text:0000000000006D6D                 align 10h
.text:0000000000006D70
.text:0000000000006D70 loc_6D70:                               ; CODE XREF: vasnprintf+1073↑j
.text:0000000000006D70                                         ; vasnprintf+1078↑j
.text:0000000000006D70                 mov     r15, rcx
.text:0000000000006D73                 jmp     loc_6C6C
.text:0000000000006D78 ; ---------------------------------------------------------------------------
.text:0000000000006D78
.text:0000000000006D78 loc_6D78:                               ; CODE XREF: vasnprintf+627↑j
.text:0000000000006D78                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000006D7C                 jz      loc_61A0
.text:0000000000006D82                 jmp     loc_5E01
.text:0000000000006D87 ; ---------------------------------------------------------------------------
.text:0000000000006D87
.text:0000000000006D87 loc_6D87:                               ; CODE XREF: vasnprintf+1EF↑j
.text:0000000000006D87                 call    ___stack_chk_fail
.text:0000000000006D8C ; ---------------------------------------------------------------------------
.text:0000000000006D8C
.text:0000000000006D8C loc_6D8C:                               ; CODE XREF: vasnprintf+495↑j
.text:0000000000006D8C                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000006D90                 mov     edx, 1
.text:0000000000006D95                 jz      loc_617B
.text:0000000000006D9B                 test    r12, r12
.text:0000000000006D9E                 jz      loc_5DF5
.text:0000000000006DA4                 jns     loc_6970
.text:0000000000006DAA                 jmp     loc_5DF5
.text:0000000000006DAA ; } // starts at 5C90
.text:0000000000006DAA vasnprintf      endp
.text:0000000000006DAA
.text:0000000000006DAA ; ---------------------------------------------------------------------------
.text:0000000000006DAF                 align 10h
.text:0000000000006DB0
.text:0000000000006DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006DB0
.text:0000000000006DB0
.text:0000000000006DB0                 public printf_fetchargs
.text:0000000000006DB0 printf_fetchargs proc near              ; CODE XREF: vasnprintf+6C↑p
.text:0000000000006DB0 ; __unwind {
.text:0000000000006DB0                 cmp     qword ptr [rsi], 0
.text:0000000000006DB4                 mov     rax, [rsi+8]
.text:0000000000006DB8                 jz      short loc_6E1D
.text:0000000000006DBA                 lea     r8, jpt_6DE6
.text:0000000000006DC1                 lea     r10, wide_null_string_2696
.text:0000000000006DC8                 lea     r9, aNull       ; "(NULL)"
.text:0000000000006DCF                 xor     ecx, ecx
.text:0000000000006DD1                 nop     dword ptr [rax+00000000h]
.text:0000000000006DD8
.text:0000000000006DD8 loc_6DD8:                               ; CODE XREF: printf_fetchargs+6B↓j
.text:0000000000006DD8                 cmp     dword ptr [rax], 16h ; switch 23 cases
.text:0000000000006DDB                 ja      short def_6DE6  ; jumptable 0000000000006DE6 default case, case 0
.text:0000000000006DDD                 mov     edx, [rax]
.text:0000000000006DDF                 movsxd  rdx, ds:(jpt_6DE6 - 9350h)[r8+rdx*4]
.text:0000000000006DE3                 add     rdx, r8
.text:0000000000006DE6                 jmp     rdx             ; switch jump
.text:0000000000006DE6 ; ---------------------------------------------------------------------------
.text:0000000000006DE8                 align 10h
.text:0000000000006DF0
.text:0000000000006DF0 loc_6DF0:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000006DF0                                         ; DATA XREF: .rodata:jpt_6DE6↓o
.text:0000000000006DF0                 mov     rdx, [rdi+8]    ; jumptable 0000000000006DE6 case 12
.text:0000000000006DF4                 add     rdx, 0Fh
.text:0000000000006DF8                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:0000000000006DFC                 lea     r11, [rdx+10h]
.text:0000000000006E00                 mov     [rdi+8], r11
.text:0000000000006E04                 fld     tbyte ptr [rdx]
.text:0000000000006E06                 fstp    tbyte ptr [rax+10h]
.text:0000000000006E09                 nop     dword ptr [rax+00000000h]
.text:0000000000006E10
.text:0000000000006E10 loc_6E10:                               ; CODE XREF: printf_fetchargs+98↓j
.text:0000000000006E10                                         ; printf_fetchargs+BA↓j ...
.text:0000000000006E10                 add     rcx, 1
.text:0000000000006E14                 add     rax, 20h ; ' '
.text:0000000000006E18                 cmp     [rsi], rcx
.text:0000000000006E1B                 ja      short loc_6DD8
.text:0000000000006E1D
.text:0000000000006E1D loc_6E1D:                               ; CODE XREF: printf_fetchargs+8↑j
.text:0000000000006E1D                 xor     eax, eax
.text:0000000000006E1F                 retn
.text:0000000000006E20 ; ---------------------------------------------------------------------------
.text:0000000000006E20
.text:0000000000006E20 def_6DE6:                               ; CODE XREF: printf_fetchargs+2B↑j
.text:0000000000006E20                                         ; printf_fetchargs+36↑j
.text:0000000000006E20                                         ; DATA XREF: ...
.text:0000000000006E20                 mov     eax, 0FFFFFFFFh ; jumptable 0000000000006DE6 default case, case 0
.text:0000000000006E25                 retn
.text:0000000000006E26 ; ---------------------------------------------------------------------------
.text:0000000000006E26
.text:0000000000006E26 loc_6E26:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000006E26                                         ; DATA XREF: .rodata:jpt_6DE6↓o
.text:0000000000006E26                 mov     r11d, [rdi]     ; jumptable 0000000000006DE6 cases 7-10,17-22
.text:0000000000006E29                 cmp     r11d, 2Fh ; '/'
.text:0000000000006E2D                 ja      loc_6F6A
.text:0000000000006E33                 mov     edx, r11d
.text:0000000000006E36                 add     rdx, [rdi+10h]
.text:0000000000006E3A                 add     r11d, 8
.text:0000000000006E3E                 mov     [rdi], r11d
.text:0000000000006E41
.text:0000000000006E41 loc_6E41:                               ; CODE XREF: printf_fetchargs+1C6↓j
.text:0000000000006E41                 mov     rdx, [rdx]
.text:0000000000006E44                 mov     [rax+10h], rdx
.text:0000000000006E48                 jmp     short loc_6E10
.text:0000000000006E4A ; ---------------------------------------------------------------------------
.text:0000000000006E4A
.text:0000000000006E4A loc_6E4A:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000006E4A                                         ; DATA XREF: .rodata:jpt_6DE6↓o
.text:0000000000006E4A                 mov     r11d, [rdi]     ; jumptable 0000000000006DE6 cases 5,6,13,14
.text:0000000000006E4D                 cmp     r11d, 2Fh ; '/'
.text:0000000000006E51                 ja      loc_6F8C
.text:0000000000006E57                 mov     edx, r11d
.text:0000000000006E5A                 add     rdx, [rdi+10h]
.text:0000000000006E5E                 add     r11d, 8
.text:0000000000006E62                 mov     [rdi], r11d
.text:0000000000006E65
.text:0000000000006E65 loc_6E65:                               ; CODE XREF: printf_fetchargs+1E8↓j
.text:0000000000006E65                 mov     edx, [rdx]
.text:0000000000006E67                 mov     [rax+10h], edx
.text:0000000000006E6A                 jmp     short loc_6E10
.text:0000000000006E6C ; ---------------------------------------------------------------------------
.text:0000000000006E6C
.text:0000000000006E6C loc_6E6C:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000006E6C                                         ; DATA XREF: .rodata:jpt_6DE6↓o
.text:0000000000006E6C                 mov     r11d, [rdi]     ; jumptable 0000000000006DE6 cases 1,2
.text:0000000000006E6F                 cmp     r11d, 2Fh ; '/'
.text:0000000000006E73                 ja      loc_6F7B
.text:0000000000006E79                 mov     edx, r11d
.text:0000000000006E7C                 add     rdx, [rdi+10h]
.text:0000000000006E80                 add     r11d, 8
.text:0000000000006E84                 mov     [rdi], r11d
.text:0000000000006E87
.text:0000000000006E87 loc_6E87:                               ; CODE XREF: printf_fetchargs+1D7↓j
.text:0000000000006E87                 mov     edx, [rdx]
.text:0000000000006E89                 mov     [rax+10h], dl
.text:0000000000006E8C                 jmp     short loc_6E10
.text:0000000000006E8E ; ---------------------------------------------------------------------------
.text:0000000000006E8E
.text:0000000000006E8E loc_6E8E:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000006E8E                                         ; DATA XREF: .rodata:jpt_6DE6↓o
.text:0000000000006E8E                 mov     r11d, [rdi]     ; jumptable 0000000000006DE6 cases 3,4
.text:0000000000006E91                 cmp     r11d, 2Fh ; '/'
.text:0000000000006E95                 ja      loc_6F3A
.text:0000000000006E9B                 mov     edx, r11d
.text:0000000000006E9E                 add     rdx, [rdi+10h]
.text:0000000000006EA2                 add     r11d, 8
.text:0000000000006EA6                 mov     [rdi], r11d
.text:0000000000006EA9
.text:0000000000006EA9 loc_6EA9:                               ; CODE XREF: printf_fetchargs+196↓j
.text:0000000000006EA9                 mov     edx, [rdx]
.text:0000000000006EAB                 mov     [rax+10h], dx
.text:0000000000006EAF                 jmp     loc_6E10
.text:0000000000006EB4 ; ---------------------------------------------------------------------------
.text:0000000000006EB4
.text:0000000000006EB4 loc_6EB4:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000006EB4                                         ; DATA XREF: .rodata:jpt_6DE6↓o
.text:0000000000006EB4                 mov     r11d, [rdi]     ; jumptable 0000000000006DE6 case 15
.text:0000000000006EB7                 cmp     r11d, 2Fh ; '/'
.text:0000000000006EBB                 ja      loc_6F4B
.text:0000000000006EC1                 mov     edx, r11d
.text:0000000000006EC4                 add     rdx, [rdi+10h]
.text:0000000000006EC8                 add     r11d, 8
.text:0000000000006ECC                 mov     [rdi], r11d
.text:0000000000006ECF
.text:0000000000006ECF loc_6ECF:                               ; CODE XREF: printf_fetchargs+1A7↓j
.text:0000000000006ECF                 mov     rdx, [rdx]
.text:0000000000006ED2                 test    rdx, rdx
.text:0000000000006ED5                 cmovz   rdx, r9
.text:0000000000006ED9                 mov     [rax+10h], rdx
.text:0000000000006EDD                 jmp     loc_6E10
.text:0000000000006EE2 ; ---------------------------------------------------------------------------
.text:0000000000006EE2
.text:0000000000006EE2 loc_6EE2:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000006EE2                                         ; DATA XREF: .rodata:jpt_6DE6↓o
.text:0000000000006EE2                 mov     r11d, [rdi+4]   ; jumptable 0000000000006DE6 case 11
.text:0000000000006EE6                 cmp     r11d, 0AFh
.text:0000000000006EED                 ja      loc_6F9D
.text:0000000000006EF3                 mov     edx, r11d
.text:0000000000006EF6                 add     rdx, [rdi+10h]
.text:0000000000006EFA                 add     r11d, 10h
.text:0000000000006EFE                 mov     [rdi+4], r11d
.text:0000000000006F02
.text:0000000000006F02 loc_6F02:                               ; CODE XREF: printf_fetchargs+1F9↓j
.text:0000000000006F02                 movsd   xmm0, qword ptr [rdx]
.text:0000000000006F06                 movsd   qword ptr [rax+10h], xmm0
.text:0000000000006F0B                 jmp     loc_6E10
.text:0000000000006F10 ; ---------------------------------------------------------------------------
.text:0000000000006F10
.text:0000000000006F10 loc_6F10:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000006F10                                         ; DATA XREF: .rodata:jpt_6DE6↓o
.text:0000000000006F10                 mov     r11d, [rdi]     ; jumptable 0000000000006DE6 case 16
.text:0000000000006F13                 cmp     r11d, 2Fh ; '/'
.text:0000000000006F17                 ja      short loc_6F5C
.text:0000000000006F19                 mov     edx, r11d
.text:0000000000006F1C                 add     rdx, [rdi+10h]
.text:0000000000006F20                 add     r11d, 8
.text:0000000000006F24                 mov     [rdi], r11d
.text:0000000000006F27
.text:0000000000006F27 loc_6F27:                               ; CODE XREF: printf_fetchargs+1B8↓j
.text:0000000000006F27                 mov     rdx, [rdx]
.text:0000000000006F2A                 test    rdx, rdx
.text:0000000000006F2D                 cmovz   rdx, r10
.text:0000000000006F31                 mov     [rax+10h], rdx
.text:0000000000006F35                 jmp     loc_6E10
.text:0000000000006F3A ; ---------------------------------------------------------------------------
.text:0000000000006F3A
.text:0000000000006F3A loc_6F3A:                               ; CODE XREF: printf_fetchargs+E5↑j
.text:0000000000006F3A                 mov     rdx, [rdi+8]
.text:0000000000006F3E                 lea     r11, [rdx+8]
.text:0000000000006F42                 mov     [rdi+8], r11
.text:0000000000006F46                 jmp     loc_6EA9
.text:0000000000006F4B ; ---------------------------------------------------------------------------
.text:0000000000006F4B
.text:0000000000006F4B loc_6F4B:                               ; CODE XREF: printf_fetchargs+10B↑j
.text:0000000000006F4B                 mov     rdx, [rdi+8]
.text:0000000000006F4F                 lea     r11, [rdx+8]
.text:0000000000006F53                 mov     [rdi+8], r11
.text:0000000000006F57                 jmp     loc_6ECF
.text:0000000000006F5C ; ---------------------------------------------------------------------------
.text:0000000000006F5C
.text:0000000000006F5C loc_6F5C:                               ; CODE XREF: printf_fetchargs+167↑j
.text:0000000000006F5C                 mov     rdx, [rdi+8]
.text:0000000000006F60                 lea     r11, [rdx+8]
.text:0000000000006F64                 mov     [rdi+8], r11
.text:0000000000006F68                 jmp     short loc_6F27
.text:0000000000006F6A ; ---------------------------------------------------------------------------
.text:0000000000006F6A
.text:0000000000006F6A loc_6F6A:                               ; CODE XREF: printf_fetchargs+7D↑j
.text:0000000000006F6A                 mov     rdx, [rdi+8]
.text:0000000000006F6E                 lea     r11, [rdx+8]
.text:0000000000006F72                 mov     [rdi+8], r11
.text:0000000000006F76                 jmp     loc_6E41
.text:0000000000006F7B ; ---------------------------------------------------------------------------
.text:0000000000006F7B
.text:0000000000006F7B loc_6F7B:                               ; CODE XREF: printf_fetchargs+C3↑j
.text:0000000000006F7B                 mov     rdx, [rdi+8]
.text:0000000000006F7F                 lea     r11, [rdx+8]
.text:0000000000006F83                 mov     [rdi+8], r11
.text:0000000000006F87                 jmp     loc_6E87
.text:0000000000006F8C ; ---------------------------------------------------------------------------
.text:0000000000006F8C
.text:0000000000006F8C loc_6F8C:                               ; CODE XREF: printf_fetchargs+A1↑j
.text:0000000000006F8C                 mov     rdx, [rdi+8]
.text:0000000000006F90                 lea     r11, [rdx+8]
.text:0000000000006F94                 mov     [rdi+8], r11
.text:0000000000006F98                 jmp     loc_6E65
.text:0000000000006F9D ; ---------------------------------------------------------------------------
.text:0000000000006F9D
.text:0000000000006F9D loc_6F9D:                               ; CODE XREF: printf_fetchargs+13D↑j
.text:0000000000006F9D                 mov     rdx, [rdi+8]
.text:0000000000006FA1                 lea     r11, [rdx+8]
.text:0000000000006FA5                 mov     [rdi+8], r11
.text:0000000000006FA9                 jmp     loc_6F02
.text:0000000000006FA9 ; } // starts at 6DB0
.text:0000000000006FA9 printf_fetchargs endp
.text:0000000000006FA9
.text:0000000000006FA9 ; ---------------------------------------------------------------------------
.text:0000000000006FAE                 align 10h
.text:0000000000006FB0 ; File Name   : /home/ig/disk_vd/vdtests/input/x64_upacks_151/9b7ebdf6382e17b3d79a9c42c370bb6b
.text:0000000000006FB0 ; Format      : ELF64 for x86-64 (Relocatable)
.text:0000000000006FB0 ;
.text:0000000000006FB0 ; Source File : 'printf-parse.c'
.text:0000000000006FB0
.text:0000000000006FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006FB0
.text:0000000000006FB0 ; Attributes: info_from_lumina
.text:0000000000006FB0
.text:0000000000006FB0 ; int __fastcall printf_parse(const char *format, char_directives *d, arguments *a)
.text:0000000000006FB0                 public printf_parse
.text:0000000000006FB0 printf_parse    proc near               ; CODE XREF: vasnprintf+59↑p
.text:0000000000006FB0
.text:0000000000006FB0 src             = qword ptr -80h
.text:0000000000006FB0 var_78          = qword ptr -78h
.text:0000000000006FB0 var_70          = qword ptr -70h
.text:0000000000006FB0 var_68          = qword ptr -68h
.text:0000000000006FB0 var_60          = qword ptr -60h
.text:0000000000006FB0 var_58          = qword ptr -58h
.text:0000000000006FB0 var_50          = qword ptr -50h
.text:0000000000006FB0 var_48          = qword ptr -48h
.text:0000000000006FB0 var_40          = qword ptr -40h
.text:0000000000006FB0
.text:0000000000006FB0 ; __unwind {
.text:0000000000006FB0                 push    r15
.text:0000000000006FB2                 push    r14
.text:0000000000006FB4                 lea     rcx, [rsi+20h]
.text:0000000000006FB8                 push    r13
.text:0000000000006FBA                 push    r12
.text:0000000000006FBC                 lea     rax, [rdx+10h]
.text:0000000000006FC0                 push    rbp
.text:0000000000006FC1                 push    rbx
.text:0000000000006FC2                 mov     r14, rsi
.text:0000000000006FC5                 mov     r15, rdx
.text:0000000000006FC8                 xor     ebx, ebx
.text:0000000000006FCA                 mov     r9d, 7
.text:0000000000006FD0                 sub     rsp, 58h
.text:0000000000006FD4                 mov     r10d, 7
.text:0000000000006FDA                 mov     qword ptr [rsi], 0
.text:0000000000006FE1                 mov     [rsi+8], rcx
.text:0000000000006FE5                 mov     [rsp+88h+var_60], rcx
.text:0000000000006FEA                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000006FF1                 mov     qword ptr [rdx], 0
.text:0000000000006FF8                 mov     [rsp+88h+src], rax
.text:0000000000006FFD                 mov     [rdx+8], rax
.text:0000000000007001                 mov     [rsp+88h+var_70], 0
.text:000000000000700A                 mov     [rsp+88h+var_78], 0
.text:0000000000007013                 mov     [rsp+88h+var_68], 0
.text:000000000000701C                 jmp     short loc_702B
.text:000000000000701C ; ---------------------------------------------------------------------------
.text:000000000000701E                 align 20h
.text:0000000000007020
.text:0000000000007020 loc_7020:                               ; CODE XREF: printf_parse+80↓j
.text:0000000000007020                 cmp     al, 25h ; '%'
.text:0000000000007022                 lea     rbp, [rdi+1]
.text:0000000000007026                 jz      short loc_7068
.text:0000000000007028
.text:0000000000007028 loc_7028:                               ; CODE XREF: printf_parse+35B↓j
.text:0000000000007028                                         ; printf_parse+364↓j
.text:0000000000007028                 mov     rdi, rbp
.text:000000000000702B
.text:000000000000702B loc_702B:                               ; CODE XREF: printf_parse+6C↑j
.text:000000000000702B                 movzx   eax, byte ptr [rdi]
.text:000000000000702E                 test    al, al
.text:0000000000007030                 jnz     short loc_7020
.text:0000000000007032                 lea     rax, [rbx+rbx*4]
.text:0000000000007036                 lea     rax, [rbx+rax*2]
.text:000000000000703A                 mov     [rcx+rax*8], rdi
.text:000000000000703E                 mov     rax, [rsp+88h+var_78]
.text:0000000000007043                 mov     [r14+10h], rax
.text:0000000000007047                 mov     rax, [rsp+88h+var_70]
.text:000000000000704C                 mov     [r14+18h], rax
.text:0000000000007050                 xor     eax, eax
.text:0000000000007052
.text:0000000000007052 loc_7052:                               ; CODE XREF: printf_parse+87E↓j
.text:0000000000007052                                         ; printf_parse+B1C↓j
.text:0000000000007052                 add     rsp, 58h
.text:0000000000007056                 pop     rbx
.text:0000000000007057                 pop     rbp
.text:0000000000007058                 pop     r12
.text:000000000000705A                 pop     r13
.text:000000000000705C                 pop     r14
.text:000000000000705E                 pop     r15
.text:0000000000007060                 retn
.text:0000000000007060 ; ---------------------------------------------------------------------------
.text:0000000000007061                 align 8
.text:0000000000007068
.text:0000000000007068 loc_7068:                               ; CODE XREF: printf_parse+76↑j
.text:0000000000007068                 lea     rax, [rbx+rbx*4]
.text:000000000000706C                 mov     r13, r8
.text:000000000000706F                 lea     rax, [rbx+rax*2]
.text:0000000000007073                 lea     r12, [rcx+rax*8]
.text:0000000000007077                 mov     [r12], rdi
.text:000000000000707B                 mov     dword ptr [r12+10h], 0
.text:0000000000007084                 mov     qword ptr [r12+18h], 0
.text:000000000000708D                 mov     qword ptr [r12+20h], 0
.text:0000000000007096                 mov     [r12+28h], r8
.text:000000000000709B                 mov     qword ptr [r12+30h], 0
.text:00000000000070A4                 mov     qword ptr [r12+38h], 0
.text:00000000000070AD                 mov     [r12+40h], r8
.text:00000000000070B2                 mov     [r12+50h], r8
.text:00000000000070B7                 movzx   ebx, byte ptr [rdi+1]
.text:00000000000070BB                 lea     eax, [rbx-30h]
.text:00000000000070BE                 cmp     al, 9
.text:00000000000070C0                 ja      short loc_70FE
.text:00000000000070C2                 jmp     loc_74FA
.text:00000000000070C2 ; ---------------------------------------------------------------------------
.text:00000000000070C7                 align 10h
.text:00000000000070D0
.text:00000000000070D0 loc_70D0:                               ; CODE XREF: printf_parse+158↓j
.text:00000000000070D0                 cmp     bl, 2Dh ; '-'
.text:00000000000070D3                 jz      short loc_7118
.text:00000000000070D5                 cmp     bl, 2Bh ; '+'
.text:00000000000070D8                 jz      short loc_7120
.text:00000000000070DA                 cmp     bl, 20h ; ' '
.text:00000000000070DD                 jz      short loc_7130
.text:00000000000070DF                 cmp     bl, 23h ; '#'
.text:00000000000070E2                 jz      short loc_7140
.text:00000000000070E4                 cmp     bl, 30h ; '0'
.text:00000000000070E7                 jz      short loc_7150
.text:00000000000070E9                 cmp     bl, 49h ; 'I'
.text:00000000000070EC                 jnz     short loc_7160
.text:00000000000070EE                 or      dword ptr [r12+10h], 40h
.text:00000000000070F4                 nop     dword ptr [rax+00h]
.text:00000000000070F8
.text:00000000000070F8 loc_70F8:                               ; CODE XREF: printf_parse+160↓j
.text:00000000000070F8                                         ; printf_parse+16E↓j ...
.text:00000000000070F8                 movzx   ebx, byte ptr [rax]
.text:00000000000070FB                 mov     rbp, rax
.text:00000000000070FE
.text:00000000000070FE loc_70FE:                               ; CODE XREF: printf_parse+110↑j
.text:00000000000070FE                                         ; printf_parse+565↓j ...
.text:00000000000070FE                 lea     rax, [rbp+1]
.text:0000000000007102                 cmp     bl, 27h ; '''
.text:0000000000007105                 mov     rdx, rax
.text:0000000000007108                 jnz     short loc_70D0
.text:000000000000710A                 or      dword ptr [r12+10h], 1
.text:0000000000007110                 jmp     short loc_70F8
.text:0000000000007110 ; ---------------------------------------------------------------------------
.text:0000000000007112                 align 8
.text:0000000000007118
.text:0000000000007118 loc_7118:                               ; CODE XREF: printf_parse+123↑j
.text:0000000000007118                 or      dword ptr [r12+10h], 2
.text:000000000000711E                 jmp     short loc_70F8
.text:0000000000007120 ; ---------------------------------------------------------------------------
.text:0000000000007120
.text:0000000000007120 loc_7120:                               ; CODE XREF: printf_parse+128↑j
.text:0000000000007120                 or      dword ptr [r12+10h], 4
.text:0000000000007126                 jmp     short loc_70F8
.text:0000000000007126 ; ---------------------------------------------------------------------------
.text:0000000000007128                 align 10h
.text:0000000000007130
.text:0000000000007130 loc_7130:                               ; CODE XREF: printf_parse+12D↑j
.text:0000000000007130                 or      dword ptr [r12+10h], 8
.text:0000000000007136                 jmp     short loc_70F8
.text:0000000000007136 ; ---------------------------------------------------------------------------
.text:0000000000007138                 align 20h
.text:0000000000007140
.text:0000000000007140 loc_7140:                               ; CODE XREF: printf_parse+132↑j
.text:0000000000007140                 or      dword ptr [r12+10h], 10h
.text:0000000000007146                 jmp     short loc_70F8
.text:0000000000007146 ; ---------------------------------------------------------------------------
.text:0000000000007148                 align 10h
.text:0000000000007150
.text:0000000000007150 loc_7150:                               ; CODE XREF: printf_parse+137↑j
.text:0000000000007150                 or      dword ptr [r12+10h], 20h
.text:0000000000007156                 jmp     short loc_70F8
.text:0000000000007156 ; ---------------------------------------------------------------------------
.text:0000000000007158                 align 20h
.text:0000000000007160
.text:0000000000007160 loc_7160:                               ; CODE XREF: printf_parse+13C↑j
.text:0000000000007160                 cmp     bl, 2Ah ; '*'
.text:0000000000007163                 jz      loc_7319
.text:0000000000007169                 lea     ecx, [rbx-30h]
.text:000000000000716C                 cmp     cl, 9
.text:000000000000716F                 jbe     loc_7587
.text:0000000000007175
.text:0000000000007175 loc_7175:                               ; CODE XREF: printf_parse+629↓j
.text:0000000000007175                                         ; printf_parse+96C↓j
.text:0000000000007175                 cmp     bl, 2Eh ; '.'
.text:0000000000007178                 jz      loc_744F
.text:000000000000717E
.text:000000000000717E loc_717E:                               ; CODE XREF: printf_parse+499↓j
.text:000000000000717E                                         ; printf_parse+545↓j ...
.text:000000000000717E                 xor     eax, eax
.text:0000000000007180                 mov     esi, 1
.text:0000000000007185                 jmp     short loc_71B7
.text:0000000000007185 ; ---------------------------------------------------------------------------
.text:0000000000007187                 align 10h
.text:0000000000007190
.text:0000000000007190 loc_7190:                               ; CODE XREF: printf_parse+20E↓j
.text:0000000000007190                 cmp     bl, 4Ch ; 'L'
.text:0000000000007193                 jz      short loc_71D0
.text:0000000000007195                 cmp     bl, 6Ch ; 'l'
.text:0000000000007198                 jz      short loc_71B0
.text:000000000000719A                 cmp     bl, 6Ah ; 'j'
.text:000000000000719D                 jz      short loc_71B0
.text:000000000000719F                 mov     edx, ebx
.text:00000000000071A1                 and     edx, 0FFFFFFDFh
.text:00000000000071A4                 cmp     dl, 5Ah ; 'Z'
.text:00000000000071A7                 jz      short loc_71B0
.text:00000000000071A9                 cmp     bl, 74h ; 't'
.text:00000000000071AC                 jnz     short loc_71D8
.text:00000000000071AE                 xchg    ax, ax
.text:00000000000071B0
.text:00000000000071B0 loc_71B0:                               ; CODE XREF: printf_parse+1E8↑j
.text:00000000000071B0                                         ; printf_parse+1ED↑j ...
.text:00000000000071B0                 add     eax, 8
.text:00000000000071B3
.text:00000000000071B3 loc_71B3:                               ; CODE XREF: printf_parse+21B↓j
.text:00000000000071B3                                         ; printf_parse+223↓j
.text:00000000000071B3                 movzx   ebx, byte ptr [rbp+0]
.text:00000000000071B7
.text:00000000000071B7 loc_71B7:                               ; CODE XREF: printf_parse+1D5↑j
.text:00000000000071B7                 add     rbp, 1
.text:00000000000071BB                 cmp     bl, 68h ; 'h'
.text:00000000000071BE                 jnz     short loc_7190
.text:00000000000071C0                 mov     ecx, eax
.text:00000000000071C2                 mov     edx, esi
.text:00000000000071C4                 and     ecx, 1
.text:00000000000071C7                 shl     edx, cl
.text:00000000000071C9                 or      eax, edx
.text:00000000000071CB                 jmp     short loc_71B3
.text:00000000000071CB ; ---------------------------------------------------------------------------
.text:00000000000071CD                 align 10h
.text:00000000000071D0
.text:00000000000071D0 loc_71D0:                               ; CODE XREF: printf_parse+1E3↑j
.text:00000000000071D0                 or      eax, 4
.text:00000000000071D3                 jmp     short loc_71B3
.text:00000000000071D3 ; ---------------------------------------------------------------------------
.text:00000000000071D5                 align 8
.text:00000000000071D8
.text:00000000000071D8 loc_71D8:                               ; CODE XREF: printf_parse+1FC↑j
.text:00000000000071D8                 lea     edx, [rbx-25h]  ; switch 84 cases
.text:00000000000071DB                 cmp     dl, 53h
.text:00000000000071DE                 ja      def_71F5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000071E4                 lea     rcx, jpt_71F5
.text:00000000000071EB                 movzx   edx, dl
.text:00000000000071EE                 movsxd  rdx, ds:(jpt_71F5 - 93CCh)[rcx+rdx*4]
.text:00000000000071F2                 add     rdx, rcx
.text:00000000000071F5                 jmp     rdx             ; switch jump
.text:00000000000071F7 ; ---------------------------------------------------------------------------
.text:00000000000071F7
.text:00000000000071F7 loc_71F7:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000071F7                                         ; DATA XREF: .rodata:jpt_71F5↓o
.text:00000000000071F7                 mov     r11d, 10h       ; jumptable 0000000000000245 case 83
.text:00000000000071FD                 mov     ebx, 73h ; 's'
.text:0000000000007202                 nop     word ptr [rax+rax+00h]
.text:0000000000007208
.text:0000000000007208 loc_7208:                               ; CODE XREF: printf_parse+705↓j
.text:0000000000007208                                         ; printf_parse+70D↓j ...
.text:0000000000007208                 cmp     r13, 0FFFFFFFFFFFFFFFFh
.text:000000000000720C                 jz      loc_78C7
.text:0000000000007212                 mov     [r12+50h], r13
.text:0000000000007217
.text:0000000000007217 loc_7217:                               ; CODE XREF: printf_parse+939↓j
.text:0000000000007217                 cmp     r9, r13
.text:000000000000721A                 mov     rcx, [r15+8]
.text:000000000000721E                 jbe     loc_7840
.text:0000000000007224
.text:0000000000007224 loc_7224:                               ; CODE XREF: printf_parse+912↓j
.text:0000000000007224                 mov     rax, [r15]
.text:0000000000007227                 mov     rdx, rax
.text:000000000000722A                 shl     rdx, 5
.text:000000000000722E                 add     rdx, rcx
.text:0000000000007231                 cmp     rax, r13
.text:0000000000007234                 ja      short loc_7256
.text:0000000000007236                 db      2Eh
.text:0000000000007236                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007240
.text:0000000000007240 loc_7240:                               ; CODE XREF: printf_parse+2A1↓j
.text:0000000000007240                 add     rax, 1
.text:0000000000007244                 mov     dword ptr [rdx], 0
.text:000000000000724A                 add     rdx, 20h ; ' '
.text:000000000000724E                 cmp     rax, r13
.text:0000000000007251                 jbe     short loc_7240
.text:0000000000007253                 mov     [r15], rax
.text:0000000000007256
.text:0000000000007256 loc_7256:                               ; CODE XREF: printf_parse+284↑j
.text:0000000000007256                 shl     r13, 5
.text:000000000000725A                 lea     rax, [rcx+r13]
.text:000000000000725E                 mov     edx, [rax]
.text:0000000000007260                 test    edx, edx
.text:0000000000007262                 jnz     loc_7833
.text:0000000000007268                 mov     [rax], r11d
.text:000000000000726B
.text:000000000000726B loc_726B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000726B                                         ; printf_parse+886↓j
.text:000000000000726B                                         ; DATA XREF: ...
.text:000000000000726B                 mov     [r12+48h], bl   ; jumptable 0000000000000245 case 37
.text:0000000000007270                 mov     rax, [r14]
.text:0000000000007273                 mov     [r12+8], rbp
.text:0000000000007278                 lea     rbx, [rax+1]
.text:000000000000727C                 cmp     r10, rbx
.text:000000000000727F                 mov     [r14], rbx
.text:0000000000007282                 ja      loc_7310
.text:0000000000007288                 test    r10, r10
.text:000000000000728B                 js      loc_7C37
.text:0000000000007291                 add     r10, r10
.text:0000000000007294                 mov     rax, 2E8BA2E8BA2E8BAh
.text:000000000000729E                 cmp     r10, rax
.text:00000000000072A1                 ja      loc_7C37
.text:00000000000072A7                 lea     rax, [r10+r10*4]
.text:00000000000072AB                 mov     rdi, [r14+8]    ; ptr
.text:00000000000072AF                 cmp     [rsp+88h+var_60], rdi
.text:00000000000072B4                 mov     [rsp+88h+var_48], r9
.text:00000000000072B9                 mov     [rsp+88h+var_50], r10
.text:00000000000072BE                 lea     rax, [r10+rax*2]
.text:00000000000072C2                 mov     [rsp+88h+var_58], r8
.text:00000000000072C7                 lea     rsi, ds:0[rax*8] ; size
.text:00000000000072CF                 jz      loc_798D
.text:00000000000072D5                 call    _realloc        ; PIC mode
.text:00000000000072DA                 test    rax, rax
.text:00000000000072DD                 mov     rcx, rax
.text:00000000000072E0                 mov     r8, [rsp+88h+var_58]
.text:00000000000072E5                 mov     r10, [rsp+88h+var_50]
.text:00000000000072EA                 mov     r9, [rsp+88h+var_48]
.text:00000000000072EF                 jz      loc_7C37
.text:00000000000072F5                 mov     rax, [rsp+88h+var_60]
.text:00000000000072FA                 cmp     rax, [r14+8]
.text:00000000000072FE                 mov     rbx, [r14]
.text:0000000000007301                 jz      loc_79B0
.text:0000000000007307
.text:0000000000007307 loc_7307:                               ; CODE XREF: printf_parse+A3D↓j
.text:0000000000007307                 mov     [r14+8], rcx
.text:000000000000730B                 jmp     loc_7028
.text:0000000000007310 ; ---------------------------------------------------------------------------
.text:0000000000007310
.text:0000000000007310 loc_7310:                               ; CODE XREF: printf_parse+2D2↑j
.text:0000000000007310                 mov     rcx, [r14+8]
.text:0000000000007314                 jmp     loc_7028
.text:0000000000007319 ; ---------------------------------------------------------------------------
.text:0000000000007319
.text:0000000000007319 loc_7319:                               ; CODE XREF: printf_parse+1B3↑j
.text:0000000000007319                 mov     rsi, [rsp+88h+var_78]
.text:000000000000731E                 mov     ecx, 1
.text:0000000000007323                 mov     [r12+18h], rbp
.text:0000000000007328                 mov     [r12+20h], rax
.text:000000000000732D                 test    rsi, rsi
.text:0000000000007330                 cmovnz  rcx, rsi
.text:0000000000007334                 mov     [rsp+88h+var_78], rcx
.text:0000000000007339                 movzx   ecx, byte ptr [rbp+1]
.text:000000000000733D                 lea     esi, [rcx-30h]
.text:0000000000007340                 cmp     sil, 9
.text:0000000000007344                 jbe     loc_7625
.text:000000000000734A
.text:000000000000734A loc_734A:                               ; CODE XREF: printf_parse+68D↓j
.text:000000000000734A                 mov     rsi, [rsp+88h+var_68]
.text:000000000000734F                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007353                 lea     rdx, [rsi+1]
.text:0000000000007357                 mov     [r12+28h], rsi
.text:000000000000735C                 jz      def_71F5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007362                 mov     rbx, [rsp+88h+var_68]
.text:0000000000007367                 mov     rbp, rax
.text:000000000000736A                 mov     [rsp+88h+var_68], rdx
.text:000000000000736F
.text:000000000000736F loc_736F:                               ; CODE XREF: printf_parse+6F7↓j
.text:000000000000736F                 cmp     r9, rbx
.text:0000000000007372                 mov     rcx, [r15+8]
.text:0000000000007376                 ja      loc_79F2
.text:000000000000737C                 add     r9, r9
.text:000000000000737F                 lea     rax, [rbx+1]
.text:0000000000007383                 cmp     r9, rbx
.text:0000000000007386                 cmovbe  r9, rax
.text:000000000000738A                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000007394                 cmp     r9, rax
.text:0000000000007397                 ja      loc_7C3B
.text:000000000000739D                 mov     rsi, r9
.text:00000000000073A0                 mov     [rsp+88h+var_48], r9
.text:00000000000073A5                 mov     [rsp+88h+var_50], r10
.text:00000000000073AA                 shl     rsi, 5          ; size
.text:00000000000073AE                 cmp     [rsp+88h+src], rcx
.text:00000000000073B3                 mov     [rsp+88h+var_58], r8
.text:00000000000073B8                 jz      loc_7AD1
.text:00000000000073BE                 mov     rdi, rcx        ; ptr
.text:00000000000073C1                 call    _realloc        ; PIC mode
.text:00000000000073C6                 mov     rdx, [r15+8]
.text:00000000000073CA                 mov     r8, [rsp+88h+var_58]
.text:00000000000073CF                 mov     rcx, rax
.text:00000000000073D2                 mov     r10, [rsp+88h+var_50]
.text:00000000000073D7                 mov     r9, [rsp+88h+var_48]
.text:00000000000073DC
.text:00000000000073DC loc_73DC:                               ; CODE XREF: printf_parse+B40↓j
.text:00000000000073DC                 test    rcx, rcx
.text:00000000000073DF                 jz      loc_7C97
.text:00000000000073E5                 cmp     [rsp+88h+src], rdx
.text:00000000000073EA                 mov     rax, [r15]
.text:00000000000073ED                 jz      loc_7BAB
.text:00000000000073F3
.text:00000000000073F3 loc_73F3:                               ; CODE XREF: printf_parse+C33↓j
.text:00000000000073F3                 mov     [r15+8], rcx
.text:00000000000073F7
.text:00000000000073F7 loc_73F7:                               ; CODE XREF: printf_parse+A45↓j
.text:00000000000073F7                 mov     rdx, rax
.text:00000000000073FA                 shl     rdx, 5
.text:00000000000073FE                 add     rdx, rcx
.text:0000000000007401                 cmp     rax, rbx
.text:0000000000007404                 ja      short loc_7426
.text:0000000000007406                 db      2Eh
.text:0000000000007406                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007410
.text:0000000000007410 loc_7410:                               ; CODE XREF: printf_parse+471↓j
.text:0000000000007410                 add     rax, 1
.text:0000000000007414                 mov     dword ptr [rdx], 0
.text:000000000000741A                 add     rdx, 20h ; ' '
.text:000000000000741E                 cmp     rax, rbx
.text:0000000000007421                 jbe     short loc_7410
.text:0000000000007423                 mov     [r15], rax
.text:0000000000007426
.text:0000000000007426 loc_7426:                               ; CODE XREF: printf_parse+454↑j
.text:0000000000007426                 shl     rbx, 5
.text:000000000000742A                 lea     rax, [rcx+rbx]
.text:000000000000742E                 mov     edx, [rax]
.text:0000000000007430                 test    edx, edx
.text:0000000000007432                 jnz     loc_790B
.text:0000000000007438                 mov     dword ptr [rax], 5
.text:000000000000743E                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007442                 lea     rdx, [rbp+1]
.text:0000000000007446                 cmp     bl, 2Eh ; '.'
.text:0000000000007449                 jnz     loc_717E
.text:000000000000744F
.text:000000000000744F loc_744F:                               ; CODE XREF: printf_parse+1C8↑j
.text:000000000000744F                 cmp     byte ptr [rbp+1], 2Ah ; '*'
.text:0000000000007453                 mov     [r12+30h], rbp
.text:0000000000007458                 jnz     loc_75DE
.text:000000000000745E                 mov     rsi, [rsp+88h+var_70]
.text:0000000000007463                 lea     r11, [rbp+2]
.text:0000000000007467                 mov     eax, 2
.text:000000000000746C                 mov     [r12+38h], r11
.text:0000000000007471                 cmp     rsi, 2
.text:0000000000007475                 cmovnb  rax, rsi
.text:0000000000007479                 mov     [rsp+88h+var_70], rax
.text:000000000000747E                 movsx   eax, byte ptr [rbp+2]
.text:0000000000007482                 lea     edx, [rax-30h]
.text:0000000000007485                 cmp     dl, 9
.text:0000000000007488                 jbe     loc_7B1C
.text:000000000000748E
.text:000000000000748E loc_748E:                               ; CODE XREF: printf_parse+B82↓j
.text:000000000000748E                 mov     rbx, [r12+40h]
.text:0000000000007493                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007497                 jz      loc_7AF5
.text:000000000000749D
.text:000000000000749D loc_749D:                               ; CODE XREF: printf_parse+B67↓j
.text:000000000000749D                                         ; printf_parse+C59↓j
.text:000000000000749D                 cmp     r9, rbx
.text:00000000000074A0                 mov     rcx, [r15+8]
.text:00000000000074A4                 jbe     loc_7A0F
.text:00000000000074AA                 mov     rax, [r15]
.text:00000000000074AD
.text:00000000000074AD loc_74AD:                               ; CODE XREF: printf_parse+AE4↓j
.text:00000000000074AD                 mov     rdx, rax
.text:00000000000074B0                 shl     rdx, 5
.text:00000000000074B4                 add     rdx, rcx
.text:00000000000074B7                 cmp     rax, rbx
.text:00000000000074BA                 ja      short loc_74D6
.text:00000000000074BC                 nop     dword ptr [rax+00h]
.text:00000000000074C0
.text:00000000000074C0 loc_74C0:                               ; CODE XREF: printf_parse+521↓j
.text:00000000000074C0                 add     rax, 1
.text:00000000000074C4                 mov     dword ptr [rdx], 0
.text:00000000000074CA                 add     rdx, 20h ; ' '
.text:00000000000074CE                 cmp     rax, rbx
.text:00000000000074D1                 jbe     short loc_74C0
.text:00000000000074D3                 mov     [r15], rax
.text:00000000000074D6
.text:00000000000074D6 loc_74D6:                               ; CODE XREF: printf_parse+50A↑j
.text:00000000000074D6                 shl     rbx, 5
.text:00000000000074DA                 lea     rax, [rcx+rbx]
.text:00000000000074DE                 mov     edx, [rax]
.text:00000000000074E0                 test    edx, edx
.text:00000000000074E2                 jnz     loc_79FA
.text:00000000000074E8                 mov     dword ptr [rax], 5
.text:00000000000074EE                 mov     rbp, r11
.text:00000000000074F1                 movzx   ebx, byte ptr [r11]
.text:00000000000074F5                 jmp     loc_717E
.text:00000000000074FA ; ---------------------------------------------------------------------------
.text:00000000000074FA
.text:00000000000074FA loc_74FA:                               ; CODE XREF: printf_parse+112↑j
.text:00000000000074FA                 mov     rax, rbp
.text:00000000000074FD                 nop     dword ptr [rax]
.text:0000000000007500
.text:0000000000007500 loc_7500:                               ; CODE XREF: printf_parse+55D↓j
.text:0000000000007500                 add     rax, 1
.text:0000000000007504                 movzx   edx, byte ptr [rax]
.text:0000000000007507                 lea     ecx, [rdx-30h]
.text:000000000000750A                 cmp     cl, 9
.text:000000000000750D                 jbe     short loc_7500
.text:000000000000750F                 cmp     dl, 24h ; '$'
.text:0000000000007512                 mov     r13, r8
.text:0000000000007515                 jnz     loc_70FE
.text:000000000000751B                 xor     edx, edx
.text:000000000000751D
.text:000000000000751D loc_751D:                               ; CODE XREF: printf_parse+5B7↓j
.text:000000000000751D                 movsx   eax, bl
.text:0000000000007520                 mov     rdi, 1999999999999999h
.text:000000000000752A                 mov     rsi, r8
.text:000000000000752D                 sub     eax, 30h ; '0'
.text:0000000000007530                 cmp     rdx, rdi
.text:0000000000007533                 cdqe
.text:0000000000007535                 ja      short loc_753E
.text:0000000000007537                 lea     rsi, [rdx+rdx*4]
.text:000000000000753B                 add     rsi, rsi
.text:000000000000753E
.text:000000000000753E loc_753E:                               ; CODE XREF: printf_parse+585↑j
.text:000000000000753E                 mov     rcx, rbp
.text:0000000000007541
.text:0000000000007541 loc_7541:                               ; CODE XREF: printf_parse+956↓j
.text:0000000000007541                 add     rax, rsi
.text:0000000000007544                 movzx   ebx, byte ptr [rbp+1]
.text:0000000000007548                 setb    sil
.text:000000000000754C                 add     rbp, 1
.text:0000000000007550                 mov     rdx, rax
.text:0000000000007553                 movzx   esi, sil
.text:0000000000007557                 test    rsi, rsi
.text:000000000000755A                 lea     edi, [rbx-30h]
.text:000000000000755D                 jnz     loc_78EE
.text:0000000000007563                 cmp     dil, 9
.text:0000000000007567                 jbe     short loc_751D
.text:0000000000007569                 mov     r13, rax
.text:000000000000756C                 sub     r13, 1
.text:0000000000007570                 cmp     r13, 0FFFFFFFFFFFFFFFDh
.text:0000000000007574                 ja      def_71F5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000757A                 lea     rbp, [rcx+2]
.text:000000000000757E                 movzx   ebx, byte ptr [rcx+2]
.text:0000000000007582                 jmp     loc_70FE
.text:0000000000007587 ; ---------------------------------------------------------------------------
.text:0000000000007587
.text:0000000000007587 loc_7587:                               ; CODE XREF: printf_parse+1BF↑j
.text:0000000000007587                 mov     [r12+18h], rbp
.text:000000000000758C                 movzx   edi, byte ptr [rbp+0]
.text:0000000000007590                 mov     rsi, rbp
.text:0000000000007593                 lea     ecx, [rdi-30h]
.text:0000000000007596                 cmp     cl, 9
.text:0000000000007599                 jbe     short loc_75A7
.text:000000000000759B                 jmp     short loc_75D0
.text:000000000000759B ; ---------------------------------------------------------------------------
.text:000000000000759D                 align 20h
.text:00000000000075A0
.text:00000000000075A0 loc_75A0:                               ; CODE XREF: printf_parse+600↓j
.text:00000000000075A0                 mov     rbp, rax
.text:00000000000075A3                 add     rax, 1
.text:00000000000075A7
.text:00000000000075A7 loc_75A7:                               ; CODE XREF: printf_parse+5E9↑j
.text:00000000000075A7                 movzx   edi, byte ptr [rax]
.text:00000000000075AA                 lea     edx, [rdi-30h]
.text:00000000000075AD                 cmp     dl, 9
.text:00000000000075B0                 jbe     short loc_75A0
.text:00000000000075B2                 mov     rcx, rax
.text:00000000000075B5                 lea     rdx, [rbp+2]
.text:00000000000075B9                 mov     rbp, rax
.text:00000000000075BC                 sub     rcx, rsi
.text:00000000000075BF                 mov     rsi, [rsp+88h+var_78]
.text:00000000000075C4                 cmp     rsi, rcx
.text:00000000000075C7                 cmovnb  rcx, rsi
.text:00000000000075CB                 mov     [rsp+88h+var_78], rcx
.text:00000000000075D0
.text:00000000000075D0 loc_75D0:                               ; CODE XREF: printf_parse+5EB↑j
.text:00000000000075D0                 mov     [r12+20h], rbp
.text:00000000000075D5                 movzx   ebx, byte ptr [rbp+0]
.text:00000000000075D9                 jmp     loc_7175
.text:00000000000075DE ; ---------------------------------------------------------------------------
.text:00000000000075DE
.text:00000000000075DE loc_75DE:                               ; CODE XREF: printf_parse+4A8↑j
.text:00000000000075DE                 movzx   eax, byte ptr [rbp+1]
.text:00000000000075E2                 sub     eax, 30h ; '0'
.text:00000000000075E5                 cmp     al, 9
.text:00000000000075E7                 ja      short loc_75FE
.text:00000000000075E9                 nop     dword ptr [rax+00000000h]
.text:00000000000075F0
.text:00000000000075F0 loc_75F0:                               ; CODE XREF: printf_parse+64C↓j
.text:00000000000075F0                 add     rdx, 1
.text:00000000000075F4                 movzx   eax, byte ptr [rdx]
.text:00000000000075F7                 sub     eax, 30h ; '0'
.text:00000000000075FA                 cmp     al, 9
.text:00000000000075FC                 jbe     short loc_75F0
.text:00000000000075FE
.text:00000000000075FE loc_75FE:                               ; CODE XREF: printf_parse+637↑j
.text:00000000000075FE                 mov     rsi, [rsp+88h+var_70]
.text:0000000000007603                 mov     rax, rdx
.text:0000000000007606                 mov     [r12+38h], rdx
.text:000000000000760B                 sub     rax, rbp
.text:000000000000760E                 movzx   ebx, byte ptr [rdx]
.text:0000000000007611                 mov     rbp, rdx
.text:0000000000007614                 cmp     rsi, rax
.text:0000000000007617                 cmovnb  rax, rsi
.text:000000000000761B                 mov     [rsp+88h+var_70], rax
.text:0000000000007620                 jmp     loc_717E
.text:0000000000007625 ; ---------------------------------------------------------------------------
.text:0000000000007625
.text:0000000000007625 loc_7625:                               ; CODE XREF: printf_parse+394↑j
.text:0000000000007625                 mov     rsi, rax
.text:0000000000007628
.text:0000000000007628 loc_7628:                               ; CODE XREF: printf_parse+687↓j
.text:0000000000007628                 add     rsi, 1
.text:000000000000762C                 movzx   edi, byte ptr [rsi]
.text:000000000000762F                 lea     r11d, [rdi-30h]
.text:0000000000007633                 cmp     r11b, 9
.text:0000000000007637                 jbe     short loc_7628
.text:0000000000007639                 cmp     dil, 24h ; '$'
.text:000000000000763D                 jnz     loc_734A
.text:0000000000007643                 xor     esi, esi
.text:0000000000007645
.text:0000000000007645 loc_7645:                               ; CODE XREF: printf_parse+6DE↓j
.text:0000000000007645                 movsx   eax, cl
.text:0000000000007648                 mov     rdi, 1999999999999999h
.text:0000000000007652                 mov     rcx, r8
.text:0000000000007655                 sub     eax, 30h ; '0'
.text:0000000000007658                 cmp     rsi, rdi
.text:000000000000765B                 cdqe
.text:000000000000765D                 ja      short loc_7666
.text:000000000000765F                 lea     rcx, [rsi+rsi*4]
.text:0000000000007663                 add     rcx, rcx
.text:0000000000007666
.text:0000000000007666 loc_7666:                               ; CODE XREF: printf_parse+6AD↑j
.text:0000000000007666                 mov     rbp, rdx
.text:0000000000007669
.text:0000000000007669 loc_7669:                               ; CODE XREF: printf_parse+BF6↓j
.text:0000000000007669                 xor     r11d, r11d
.text:000000000000766C                 add     rax, rcx
.text:000000000000766F                 movzx   ecx, byte ptr [rdx+1]
.text:0000000000007673                 setb    r11b
.text:0000000000007677                 add     rdx, 1
.text:000000000000767B                 mov     rsi, rax
.text:000000000000767E                 test    r11, r11
.text:0000000000007681                 lea     edi, [rcx-30h]
.text:0000000000007684                 jnz     loc_7B8E
.text:000000000000768A                 cmp     dil, 9
.text:000000000000768E                 jbe     short loc_7645
.text:0000000000007690                 lea     rbx, [rax-1]
.text:0000000000007694                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:0000000000007698                 ja      def_71F5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000769E                 mov     [r12+28h], rbx
.text:00000000000076A3                 add     rbp, 2
.text:00000000000076A7                 jmp     loc_736F
.text:00000000000076AC ; ---------------------------------------------------------------------------
.text:00000000000076AC
.text:00000000000076AC loc_76AC:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000076AC                                         ; DATA XREF: .rodata:jpt_71F5↓o
.text:00000000000076AC                 cmp     eax, 0Fh        ; jumptable 0000000000000245 case 110
.text:00000000000076AF                 mov     r11d, 16h
.text:00000000000076B5                 jg      loc_7208
.text:00000000000076BB                 test    al, 4
.text:00000000000076BD                 jnz     loc_7208
.text:00000000000076C3                 cmp     eax, 7
.text:00000000000076C6                 mov     r11d, 15h
.text:00000000000076CC                 jg      loc_7208
.text:00000000000076D2                 test    al, 2
.text:00000000000076D4                 mov     r11d, 12h
.text:00000000000076DA                 jnz     loc_7208
.text:00000000000076E0                 xor     r11d, r11d
.text:00000000000076E3                 test    al, 1
.text:00000000000076E5                 setz    r11b
.text:00000000000076E9                 add     r11d, 13h
.text:00000000000076ED                 jmp     loc_7208
.text:00000000000076ED ; ---------------------------------------------------------------------------
.text:00000000000076F2                 align 8
.text:00000000000076F8
.text:00000000000076F8 loc_76F8:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000076F8                                         ; DATA XREF: .rodata:jpt_71F5↓o
.text:00000000000076F8                 xor     r11d, r11d      ; jumptable 0000000000000245 case 99
.text:00000000000076FB                 cmp     eax, 7
.text:00000000000076FE                 setnle  r11b
.text:0000000000007702                 add     r11d, 0Dh
.text:0000000000007706                 jmp     loc_7208
.text:000000000000770B ; ---------------------------------------------------------------------------
.text:000000000000770B
.text:000000000000770B loc_770B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000770B                                         ; DATA XREF: .rodata:jpt_71F5↓o
.text:000000000000770B                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 100,105
.text:000000000000770E                 mov     r11d, 9
.text:0000000000007714                 jg      loc_7208
.text:000000000000771A                 test    al, 4
.text:000000000000771C                 jnz     loc_7208
.text:0000000000007722                 cmp     eax, 7
.text:0000000000007725                 mov     r11d, 7
.text:000000000000772B                 jg      loc_7208
.text:0000000000007731                 test    al, 2
.text:0000000000007733                 mov     r11d, 1
.text:0000000000007739                 jnz     loc_7208
.text:000000000000773F                 and     eax, 1
.text:0000000000007742                 cmp     eax, 1
.text:0000000000007745                 sbb     r11d, r11d
.text:0000000000007748                 and     r11d, 2
.text:000000000000774C                 add     r11d, 3
.text:0000000000007750                 jmp     loc_7208
.text:0000000000007750 ; ---------------------------------------------------------------------------
.text:0000000000007755                 align 8
.text:0000000000007758
.text:0000000000007758 loc_7758:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007758                                         ; DATA XREF: .rodata:jpt_71F5↓o
.text:0000000000007758                 xor     r11d, r11d      ; jumptable 0000000000000245 case 115
.text:000000000000775B                 cmp     eax, 7
.text:000000000000775E                 setnle  r11b
.text:0000000000007762                 add     r11d, 0Fh
.text:0000000000007766                 jmp     loc_7208
.text:000000000000776B ; ---------------------------------------------------------------------------
.text:000000000000776B
.text:000000000000776B loc_776B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000776B                                         ; DATA XREF: .rodata:jpt_71F5↓o
.text:000000000000776B                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 65,69-71,97,101-103
.text:000000000000776E                 mov     r11d, 0Ch
.text:0000000000007774                 jg      loc_7208
.text:000000000000777A                 xor     r11d, r11d
.text:000000000000777D                 test    al, 4
.text:000000000000777F                 setnz   r11b
.text:0000000000007783                 add     r11d, 0Bh
.text:0000000000007787                 jmp     loc_7208
.text:000000000000778C ; ---------------------------------------------------------------------------
.text:000000000000778C
.text:000000000000778C loc_778C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000778C                                         ; DATA XREF: .rodata:jpt_71F5↓o
.text:000000000000778C                 mov     r11d, 0Eh       ; jumptable 0000000000000245 case 67
.text:0000000000007792                 mov     ebx, 63h ; 'c'
.text:0000000000007797                 jmp     loc_7208
.text:000000000000779C ; ---------------------------------------------------------------------------
.text:000000000000779C
.text:000000000000779C loc_779C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000779C                                         ; DATA XREF: .rodata:jpt_71F5↓o
.text:000000000000779C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 88,111,117,120
.text:000000000000779F                 mov     r11d, 0Ah
.text:00000000000077A5                 jg      loc_7208
.text:00000000000077AB                 test    al, 4
.text:00000000000077AD                 jnz     loc_7208
.text:00000000000077B3                 cmp     eax, 7
.text:00000000000077B6                 mov     r11d, 8
.text:00000000000077BC                 jg      loc_7208
.text:00000000000077C2                 test    al, 2
.text:00000000000077C4                 mov     r11d, 2
.text:00000000000077CA                 jnz     loc_7208
.text:00000000000077D0                 and     eax, 1
.text:00000000000077D3                 cmp     eax, 1
.text:00000000000077D6                 sbb     r11d, r11d
.text:00000000000077D9                 and     r11d, 2
.text:00000000000077DD                 add     r11d, 4
.text:00000000000077E1                 jmp     loc_7208
.text:00000000000077E1 ; ---------------------------------------------------------------------------
.text:00000000000077E6                 align 10h
.text:00000000000077F0
.text:00000000000077F0 loc_77F0:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000077F0                                         ; DATA XREF: .rodata:jpt_71F5↓o
.text:00000000000077F0                 mov     r11d, 11h       ; jumptable 0000000000000245 case 112
.text:00000000000077F6                 jmp     loc_7208
.text:00000000000077FB ; ---------------------------------------------------------------------------
.text:00000000000077FB
.text:00000000000077FB def_71F5:                               ; CODE XREF: printf_parse+22E↑j
.text:00000000000077FB                                         ; printf_parse+245↑j ...
.text:00000000000077FB                 mov     rcx, [r15+8]    ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000077FF
.text:00000000000077FF loc_77FF:                               ; CODE XREF: printf_parse+88C↓j
.text:00000000000077FF                                         ; printf_parse+95E↓j ...
.text:00000000000077FF                 cmp     [rsp+88h+src], rcx
.text:0000000000007804                 jz      short loc_780E
.text:0000000000007806                 mov     rdi, rcx        ; ptr
.text:0000000000007809                 call    _free           ; PIC mode
.text:000000000000780E
.text:000000000000780E loc_780E:                               ; CODE XREF: printf_parse+854↑j
.text:000000000000780E                 mov     rdi, [r14+8]    ; ptr
.text:0000000000007812                 cmp     [rsp+88h+var_60], rdi
.text:0000000000007817                 jz      short loc_781E
.text:0000000000007819                 call    _free           ; PIC mode
.text:000000000000781E
.text:000000000000781E loc_781E:                               ; CODE XREF: printf_parse+867↑j
.text:000000000000781E                 call    ___errno_location ; PIC mode
.text:0000000000007823                 mov     dword ptr [rax], 16h
.text:0000000000007829                 mov     eax, 0FFFFFFFFh
.text:000000000000782E                 jmp     loc_7052
.text:0000000000007833 ; ---------------------------------------------------------------------------
.text:0000000000007833
.text:0000000000007833 loc_7833:                               ; CODE XREF: printf_parse+2B2↑j
.text:0000000000007833                 cmp     edx, r11d
.text:0000000000007836                 jz      loc_726B        ; jumptable 0000000000000245 case 37
.text:000000000000783C                 jmp     short loc_77FF
.text:000000000000783C ; ---------------------------------------------------------------------------
.text:000000000000783E                 align 20h
.text:0000000000007840
.text:0000000000007840 loc_7840:                               ; CODE XREF: printf_parse+26E↑j
.text:0000000000007840                 add     r9, r9
.text:0000000000007843                 lea     rax, [r13+1]
.text:0000000000007847                 cmp     r9, r13
.text:000000000000784A                 cmovbe  r9, rax
.text:000000000000784E                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000007858                 cmp     r9, rax
.text:000000000000785B                 ja      loc_7C3B
.text:0000000000007861                 mov     rsi, r9
.text:0000000000007864                 mov     [rsp+88h+var_40], r9
.text:0000000000007869                 mov     [rsp+88h+var_48], r10
.text:000000000000786E                 shl     rsi, 5          ; size
.text:0000000000007872                 cmp     [rsp+88h+src], rcx
.text:0000000000007877                 mov     [rsp+88h+var_50], r8
.text:000000000000787C                 mov     dword ptr [rsp+88h+var_58], r11d
.text:0000000000007881                 jz      loc_7921
.text:0000000000007887                 mov     rdi, rcx        ; ptr
.text:000000000000788A                 call    _realloc        ; PIC mode
.text:000000000000788F                 test    rax, rax
.text:0000000000007892                 mov     rcx, rax
.text:0000000000007895                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000789A                 mov     r8, [rsp+88h+var_50]
.text:000000000000789F                 mov     r10, [rsp+88h+var_48]
.text:00000000000078A4                 mov     r9, [rsp+88h+var_40]
.text:00000000000078A9                 jz      loc_7C37
.text:00000000000078AF                 mov     rax, [rsp+88h+src]
.text:00000000000078B4                 cmp     rax, [r15+8]
.text:00000000000078B8                 jz      loc_7949
.text:00000000000078BE
.text:00000000000078BE loc_78BE:                               ; CODE XREF: printf_parse+9D8↓j
.text:00000000000078BE                 mov     [r15+8], rcx
.text:00000000000078C2                 jmp     loc_7224
.text:00000000000078C7 ; ---------------------------------------------------------------------------
.text:00000000000078C7
.text:00000000000078C7 loc_78C7:                               ; CODE XREF: printf_parse+25C↑j
.text:00000000000078C7                 mov     rsi, [rsp+88h+var_68]
.text:00000000000078CC                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000078D0                 lea     rax, [rsi+1]
.text:00000000000078D4                 mov     [r12+50h], rsi
.text:00000000000078D9                 jz      def_71F5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000078DF                 mov     r13, [rsp+88h+var_68]
.text:00000000000078E4                 mov     [rsp+88h+var_68], rax
.text:00000000000078E9                 jmp     loc_7217
.text:00000000000078EE ; ---------------------------------------------------------------------------
.text:00000000000078EE
.text:00000000000078EE loc_78EE:                               ; CODE XREF: printf_parse+5AD↑j
.text:00000000000078EE                 cmp     dil, 9
.text:00000000000078F2                 ja      def_71F5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000078F8                 movsx   eax, bl
.text:00000000000078FB                 mov     rsi, r8
.text:00000000000078FE                 mov     rcx, rbp
.text:0000000000007901                 sub     eax, 30h ; '0'
.text:0000000000007904                 cdqe
.text:0000000000007906                 jmp     loc_7541
.text:000000000000790B ; ---------------------------------------------------------------------------
.text:000000000000790B
.text:000000000000790B loc_790B:                               ; CODE XREF: printf_parse+482↑j
.text:000000000000790B                 cmp     edx, 5
.text:000000000000790E                 jnz     loc_77FF
.text:0000000000007914                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007918                 lea     rdx, [rbp+1]
.text:000000000000791C                 jmp     loc_7175
.text:0000000000007921 ; ---------------------------------------------------------------------------
.text:0000000000007921
.text:0000000000007921 loc_7921:                               ; CODE XREF: printf_parse+8D1↑j
.text:0000000000007921                 mov     rdi, rsi        ; size
.text:0000000000007924                 call    _malloc         ; PIC mode
.text:0000000000007929                 test    rax, rax
.text:000000000000792C                 mov     rcx, rax
.text:000000000000792F                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000007934                 mov     r8, [rsp+88h+var_50]
.text:0000000000007939                 mov     r10, [rsp+88h+var_48]
.text:000000000000793E                 mov     r9, [rsp+88h+var_40]
.text:0000000000007943                 jz      loc_7AAC
.text:0000000000007949
.text:0000000000007949 loc_7949:                               ; CODE XREF: printf_parse+908↑j
.text:0000000000007949                 mov     rdx, [r15]
.text:000000000000794C                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000007951                 mov     rdi, rcx        ; dest
.text:0000000000007954                 mov     [rsp+88h+var_40], r9
.text:0000000000007959                 mov     [rsp+88h+var_48], r10
.text:000000000000795E                 mov     [rsp+88h+var_50], r8
.text:0000000000007963                 mov     dword ptr [rsp+88h+var_58], r11d
.text:0000000000007968                 shl     rdx, 5          ; n
.text:000000000000796C                 call    _memcpy         ; PIC mode
.text:0000000000007971                 mov     r9, [rsp+88h+var_40]
.text:0000000000007976                 mov     r10, [rsp+88h+var_48]
.text:000000000000797B                 mov     rcx, rax
.text:000000000000797E                 mov     r8, [rsp+88h+var_50]
.text:0000000000007983                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000007988                 jmp     loc_78BE
.text:000000000000798D ; ---------------------------------------------------------------------------
.text:000000000000798D
.text:000000000000798D loc_798D:                               ; CODE XREF: printf_parse+31F↑j
.text:000000000000798D                 mov     rdi, rsi        ; size
.text:0000000000007990                 call    _malloc         ; PIC mode
.text:0000000000007995                 test    rax, rax
.text:0000000000007998                 mov     rcx, rax
.text:000000000000799B                 mov     r8, [rsp+88h+var_58]
.text:00000000000079A0                 mov     r10, [rsp+88h+var_50]
.text:00000000000079A5                 mov     r9, [rsp+88h+var_48]
.text:00000000000079AA                 jz      loc_7A99
.text:00000000000079B0
.text:00000000000079B0 loc_79B0:                               ; CODE XREF: printf_parse+351↑j
.text:00000000000079B0                 lea     rax, [rbx+rbx*4]
.text:00000000000079B4                 mov     rsi, [rsp+88h+var_60] ; src
.text:00000000000079B9                 mov     rdi, rcx        ; dest
.text:00000000000079BC                 mov     [rsp+88h+var_48], r9
.text:00000000000079C1                 mov     [rsp+88h+var_50], r10
.text:00000000000079C6                 lea     rdx, [rbx+rax*2]
.text:00000000000079CA                 mov     [rsp+88h+var_58], r8
.text:00000000000079CF                 shl     rdx, 3          ; n
.text:00000000000079D3                 call    _memcpy         ; PIC mode
.text:00000000000079D8                 mov     rbx, [r14]
.text:00000000000079DB                 mov     rcx, rax
.text:00000000000079DE                 mov     r9, [rsp+88h+var_48]
.text:00000000000079E3                 mov     r10, [rsp+88h+var_50]
.text:00000000000079E8                 mov     r8, [rsp+88h+var_58]
.text:00000000000079ED                 jmp     loc_7307
.text:00000000000079F2 ; ---------------------------------------------------------------------------
.text:00000000000079F2
.text:00000000000079F2 loc_79F2:                               ; CODE XREF: printf_parse+3C6↑j
.text:00000000000079F2                 mov     rax, [r15]
.text:00000000000079F5                 jmp     loc_73F7
.text:00000000000079FA ; ---------------------------------------------------------------------------
.text:00000000000079FA
.text:00000000000079FA loc_79FA:                               ; CODE XREF: printf_parse+532↑j
.text:00000000000079FA                 cmp     edx, 5
.text:00000000000079FD                 jnz     loc_77FF
.text:0000000000007A03                 movzx   ebx, byte ptr [r11]
.text:0000000000007A07                 mov     rbp, r11
.text:0000000000007A0A                 jmp     loc_717E
.text:0000000000007A0F ; ---------------------------------------------------------------------------
.text:0000000000007A0F
.text:0000000000007A0F loc_7A0F:                               ; CODE XREF: printf_parse+4F4↑j
.text:0000000000007A0F                 add     r9, r9
.text:0000000000007A12                 lea     rax, [rbx+1]
.text:0000000000007A16                 cmp     r9, rbx
.text:0000000000007A19                 cmovbe  r9, rax
.text:0000000000007A1D                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000007A27                 cmp     r9, rax
.text:0000000000007A2A                 ja      loc_7C3B
.text:0000000000007A30                 mov     rsi, r9
.text:0000000000007A33                 mov     [rsp+88h+var_40], r9
.text:0000000000007A38                 mov     [rsp+88h+var_48], r10
.text:0000000000007A3D                 shl     rsi, 5          ; size
.text:0000000000007A41                 cmp     [rsp+88h+src], rcx
.text:0000000000007A46                 mov     [rsp+88h+var_50], r8
.text:0000000000007A4B                 mov     [rsp+88h+var_58], r11
.text:0000000000007A50                 jz      loc_7C0E
.text:0000000000007A56                 mov     rdi, rcx        ; ptr
.text:0000000000007A59                 call    _realloc        ; PIC mode
.text:0000000000007A5E                 mov     rdx, [r15+8]
.text:0000000000007A62                 mov     r11, [rsp+88h+var_58]
.text:0000000000007A67                 mov     rcx, rax
.text:0000000000007A6A                 mov     r8, [rsp+88h+var_50]
.text:0000000000007A6F                 mov     r10, [rsp+88h+var_48]
.text:0000000000007A74                 mov     r9, [rsp+88h+var_40]
.text:0000000000007A79
.text:0000000000007A79 loc_7A79:                               ; CODE XREF: printf_parse+C82↓j
.text:0000000000007A79                 test    rcx, rcx
.text:0000000000007A7C                 jz      loc_7C97
.text:0000000000007A82                 cmp     [rsp+88h+src], rdx
.text:0000000000007A87                 mov     rax, [r15]
.text:0000000000007A8A                 jz      loc_7C50
.text:0000000000007A90
.text:0000000000007A90 loc_7A90:                               ; CODE XREF: printf_parse+CE2↓j
.text:0000000000007A90                 mov     [r15+8], rcx
.text:0000000000007A94                 jmp     loc_74AD
.text:0000000000007A99 ; ---------------------------------------------------------------------------
.text:0000000000007A99
.text:0000000000007A99 loc_7A99:                               ; CODE XREF: printf_parse+9FA↑j
.text:0000000000007A99                 mov     rcx, [r15+8]
.text:0000000000007A9D                 cmp     [rsp+88h+src], rcx
.text:0000000000007AA2                 jz      short loc_7ABC
.text:0000000000007AA4
.text:0000000000007AA4 loc_7AA4:                               ; CODE XREF: printf_parse+C90↓j
.text:0000000000007AA4                 mov     rdi, rcx        ; ptr
.text:0000000000007AA7                 call    _free           ; PIC mode
.text:0000000000007AAC
.text:0000000000007AAC loc_7AAC:                               ; CODE XREF: printf_parse+993↑j
.text:0000000000007AAC                                         ; printf_parse+C96↓j
.text:0000000000007AAC                 mov     rdi, [r14+8]    ; ptr
.text:0000000000007AB0                 cmp     [rsp+88h+var_60], rdi
.text:0000000000007AB5                 jz      short loc_7ABC
.text:0000000000007AB7                 call    _free           ; PIC mode
.text:0000000000007ABC
.text:0000000000007ABC loc_7ABC:                               ; CODE XREF: printf_parse+AF2↑j
.text:0000000000007ABC                                         ; printf_parse+B05↑j
.text:0000000000007ABC                 call    ___errno_location ; PIC mode
.text:0000000000007AC1                 mov     dword ptr [rax], 0Ch
.text:0000000000007AC7                 mov     eax, 0FFFFFFFFh
.text:0000000000007ACC                 jmp     loc_7052
.text:0000000000007AD1 ; ---------------------------------------------------------------------------
.text:0000000000007AD1
.text:0000000000007AD1 loc_7AD1:                               ; CODE XREF: printf_parse+408↑j
.text:0000000000007AD1                 mov     rdi, rsi        ; size
.text:0000000000007AD4                 call    _malloc         ; PIC mode
.text:0000000000007AD9                 mov     rdx, [rsp+88h+src]
.text:0000000000007ADE                 mov     rcx, rax
.text:0000000000007AE1                 mov     r9, [rsp+88h+var_48]
.text:0000000000007AE6                 mov     r10, [rsp+88h+var_50]
.text:0000000000007AEB                 mov     r8, [rsp+88h+var_58]
.text:0000000000007AF0                 jmp     loc_73DC
.text:0000000000007AF5 ; ---------------------------------------------------------------------------
.text:0000000000007AF5
.text:0000000000007AF5 loc_7AF5:                               ; CODE XREF: printf_parse+4E7↑j
.text:0000000000007AF5                 mov     rsi, [rsp+88h+var_68]
.text:0000000000007AFA                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007AFE                 lea     rax, [rsi+1]
.text:0000000000007B02                 mov     [r12+40h], rsi
.text:0000000000007B07                 jz      def_71F5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007B0D                 mov     rbx, [rsp+88h+var_68]
.text:0000000000007B12                 mov     [rsp+88h+var_68], rax
.text:0000000000007B17                 jmp     loc_749D
.text:0000000000007B1C ; ---------------------------------------------------------------------------
.text:0000000000007B1C
.text:0000000000007B1C loc_7B1C:                               ; CODE XREF: printf_parse+4D8↑j
.text:0000000000007B1C                 mov     rdx, r11
.text:0000000000007B1F
.text:0000000000007B1F loc_7B1F:                               ; CODE XREF: printf_parse+B7D↓j
.text:0000000000007B1F                 add     rdx, 1
.text:0000000000007B23                 movzx   ecx, byte ptr [rdx]
.text:0000000000007B26                 lea     esi, [rcx-30h]
.text:0000000000007B29                 cmp     sil, 9
.text:0000000000007B2D                 jbe     short loc_7B1F
.text:0000000000007B2F                 cmp     cl, 24h ; '$'
.text:0000000000007B32                 jnz     loc_748E
.text:0000000000007B38                 xor     ecx, ecx
.text:0000000000007B3A
.text:0000000000007B3A loc_7B3A:                               ; CODE XREF: printf_parse+C3C↓j
.text:0000000000007B3A                 mov     rsi, 1999999999999999h
.text:0000000000007B44                 sub     eax, 30h ; '0'
.text:0000000000007B47                 mov     rdx, r8
.text:0000000000007B4A                 cmp     rcx, rsi
.text:0000000000007B4D                 cdqe
.text:0000000000007B4F                 ja      short loc_7B58
.text:0000000000007B51                 lea     rdx, [rcx+rcx*4]
.text:0000000000007B55                 add     rdx, rdx
.text:0000000000007B58
.text:0000000000007B58 loc_7B58:                               ; CODE XREF: printf_parse+B9F↑j
.text:0000000000007B58                 mov     rsi, r11
.text:0000000000007B5B
.text:0000000000007B5B loc_7B5B:                               ; CODE XREF: printf_parse+BDC↓j
.text:0000000000007B5B                 xor     ebx, ebx
.text:0000000000007B5D                 add     rdx, rax
.text:0000000000007B60                 movsx   eax, byte ptr [r11+1]
.text:0000000000007B65                 setb    bl
.text:0000000000007B68                 add     r11, 1
.text:0000000000007B6C                 mov     rcx, rdx
.text:0000000000007B6F                 test    rbx, rbx
.text:0000000000007B72                 lea     edi, [rax-30h]
.text:0000000000007B75                 jz      short loc_7BE8
.text:0000000000007B77                 cmp     dil, 9
.text:0000000000007B7B                 ja      def_71F5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007B81                 sub     eax, 30h ; '0'
.text:0000000000007B84                 mov     rdx, r8
.text:0000000000007B87                 mov     rsi, r11
.text:0000000000007B8A                 cdqe
.text:0000000000007B8C                 jmp     short loc_7B5B
.text:0000000000007B8E ; ---------------------------------------------------------------------------
.text:0000000000007B8E
.text:0000000000007B8E loc_7B8E:                               ; CODE XREF: printf_parse+6D4↑j
.text:0000000000007B8E                 cmp     dil, 9
.text:0000000000007B92                 ja      def_71F5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007B98                 movsx   eax, cl
.text:0000000000007B9B                 mov     rbp, rdx
.text:0000000000007B9E                 mov     rcx, r8
.text:0000000000007BA1                 sub     eax, 30h ; '0'
.text:0000000000007BA4                 cdqe
.text:0000000000007BA6                 jmp     loc_7669
.text:0000000000007BAB ; ---------------------------------------------------------------------------
.text:0000000000007BAB
.text:0000000000007BAB loc_7BAB:                               ; CODE XREF: printf_parse+43D↑j
.text:0000000000007BAB                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000007BB0                 shl     rax, 5
.text:0000000000007BB4                 mov     rdi, rcx        ; dest
.text:0000000000007BB7                 mov     rdx, rax        ; n
.text:0000000000007BBA                 mov     [rsp+88h+var_48], r9
.text:0000000000007BBF                 mov     [rsp+88h+var_50], r10
.text:0000000000007BC4                 mov     [rsp+88h+var_58], r8
.text:0000000000007BC9                 call    _memcpy         ; PIC mode
.text:0000000000007BCE                 mov     r9, [rsp+88h+var_48]
.text:0000000000007BD3                 mov     rcx, rax
.text:0000000000007BD6                 mov     r10, [rsp+88h+var_50]
.text:0000000000007BDB                 mov     rax, [r15]
.text:0000000000007BDE                 mov     r8, [rsp+88h+var_58]
.text:0000000000007BE3                 jmp     loc_73F3
.text:0000000000007BE8 ; ---------------------------------------------------------------------------
.text:0000000000007BE8
.text:0000000000007BE8 loc_7BE8:                               ; CODE XREF: printf_parse+BC5↑j
.text:0000000000007BE8                 cmp     dil, 9
.text:0000000000007BEC                 jbe     loc_7B3A
.text:0000000000007BF2                 lea     rbx, [rdx-1]
.text:0000000000007BF6                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:0000000000007BFA                 ja      def_71F5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007C00                 mov     [r12+40h], rbx
.text:0000000000007C05                 lea     r11, [rsi+2]
.text:0000000000007C09                 jmp     loc_749D
.text:0000000000007C0E ; ---------------------------------------------------------------------------
.text:0000000000007C0E
.text:0000000000007C0E loc_7C0E:                               ; CODE XREF: printf_parse+AA0↑j
.text:0000000000007C0E                 mov     rdi, rsi        ; size
.text:0000000000007C11                 call    _malloc         ; PIC mode
.text:0000000000007C16                 mov     rdx, [rsp+88h+src]
.text:0000000000007C1B                 mov     rcx, rax
.text:0000000000007C1E                 mov     r9, [rsp+88h+var_40]
.text:0000000000007C23                 mov     r10, [rsp+88h+var_48]
.text:0000000000007C28                 mov     r8, [rsp+88h+var_50]
.text:0000000000007C2D                 mov     r11, [rsp+88h+var_58]
.text:0000000000007C32                 jmp     loc_7A79
.text:0000000000007C37 ; ---------------------------------------------------------------------------
.text:0000000000007C37
.text:0000000000007C37 loc_7C37:                               ; CODE XREF: printf_parse+2DB↑j
.text:0000000000007C37                                         ; printf_parse+2F1↑j ...
.text:0000000000007C37                 mov     rcx, [r15+8]
.text:0000000000007C3B
.text:0000000000007C3B loc_7C3B:                               ; CODE XREF: printf_parse+3E7↑j
.text:0000000000007C3B                                         ; printf_parse+8AB↑j ...
.text:0000000000007C3B                 cmp     [rsp+88h+src], rcx
.text:0000000000007C40                 jnz     loc_7AA4
.text:0000000000007C46                 jmp     loc_7AAC
.text:0000000000007C46 ; ---------------------------------------------------------------------------
.text:0000000000007C4B                 align 10h
.text:0000000000007C50
.text:0000000000007C50 loc_7C50:                               ; CODE XREF: printf_parse+ADA↑j
.text:0000000000007C50                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000007C55                 shl     rax, 5
.text:0000000000007C59                 mov     rdi, rcx        ; dest
.text:0000000000007C5C                 mov     rdx, rax        ; n
.text:0000000000007C5F                 mov     [rsp+88h+var_40], r9
.text:0000000000007C64                 mov     [rsp+88h+var_48], r10
.text:0000000000007C69                 mov     [rsp+88h+var_50], r8
.text:0000000000007C6E                 mov     [rsp+88h+var_58], r11
.text:0000000000007C73                 call    _memcpy         ; PIC mode
.text:0000000000007C78                 mov     r9, [rsp+88h+var_40]
.text:0000000000007C7D                 mov     rcx, rax
.text:0000000000007C80                 mov     r10, [rsp+88h+var_48]
.text:0000000000007C85                 mov     rax, [r15]
.text:0000000000007C88                 mov     r8, [rsp+88h+var_50]
.text:0000000000007C8D                 mov     r11, [rsp+88h+var_58]
.text:0000000000007C92                 jmp     loc_7A90
.text:0000000000007C97 ; ---------------------------------------------------------------------------
.text:0000000000007C97
.text:0000000000007C97 loc_7C97:                               ; CODE XREF: printf_parse+42F↑j
.text:0000000000007C97                                         ; printf_parse+ACC↑j
.text:0000000000007C97                 mov     rcx, rdx
.text:0000000000007C9A                 jmp     short loc_7C3B
.text:0000000000007C9A ; } // starts at 6FB0
.text:0000000000007C9A printf_parse    endp
.text:0000000000007C9A
.text:0000000000007C9A ; ---------------------------------------------------------------------------
.text:0000000000007C9C                 align 20h
.text:0000000000007CA0
.text:0000000000007CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007CA0
.text:0000000000007CA0 ; Attributes: info_from_lumina
.text:0000000000007CA0
.text:0000000000007CA0 ; void _libc_csu_init(void)
.text:0000000000007CA0                 public __libc_csu_init
.text:0000000000007CA0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000007CA0 ; __unwind {
.text:0000000000007CA0                 push    r15
.text:0000000000007CA2                 push    r14
.text:0000000000007CA4                 mov     r15, rdx
.text:0000000000007CA7                 push    r13
.text:0000000000007CA9                 push    r12
.text:0000000000007CAB                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000007CB2                 push    rbp
.text:0000000000007CB3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000007CBA                 push    rbx
.text:0000000000007CBB                 mov     r13d, edi
.text:0000000000007CBE                 mov     r14, rsi
.text:0000000000007CC1                 sub     rbp, r12
.text:0000000000007CC4                 sub     rsp, 8
.text:0000000000007CC8                 sar     rbp, 3
.text:0000000000007CCC                 call    _init_proc
.text:0000000000007CD1                 test    rbp, rbp
.text:0000000000007CD4                 jz      short loc_7CF6
.text:0000000000007CD6                 xor     ebx, ebx
.text:0000000000007CD8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000007CE0
.text:0000000000007CE0 loc_7CE0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000007CE0                 mov     rdx, r15
.text:0000000000007CE3                 mov     rsi, r14
.text:0000000000007CE6                 mov     edi, r13d
.text:0000000000007CE9                 call    ds:(__frame_dummy_init_array_entry - 20ABD0h)[r12+rbx*8]
.text:0000000000007CED                 add     rbx, 1
.text:0000000000007CF1                 cmp     rbp, rbx
.text:0000000000007CF4                 jnz     short loc_7CE0
.text:0000000000007CF6
.text:0000000000007CF6 loc_7CF6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000007CF6                 add     rsp, 8
.text:0000000000007CFA                 pop     rbx
.text:0000000000007CFB                 pop     rbp
.text:0000000000007CFC                 pop     r12
.text:0000000000007CFE                 pop     r13
.text:0000000000007D00                 pop     r14
.text:0000000000007D02                 pop     r15
.text:0000000000007D04                 retn
.text:0000000000007D04 ; } // starts at 7CA0
.text:0000000000007D04 __libc_csu_init endp
.text:0000000000007D04
.text:0000000000007D04 ; ---------------------------------------------------------------------------
.text:0000000000007D05                 align 10h
.text:0000000000007D10
.text:0000000000007D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D10
.text:0000000000007D10
.text:0000000000007D10 ; void _libc_csu_fini(void)
.text:0000000000007D10                 public __libc_csu_fini
.text:0000000000007D10 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000007D10 ; __unwind {
.text:0000000000007D10                 rep retn
.text:0000000000007D10 ; } // starts at 7D10
.text:0000000000007D10 __libc_csu_fini endp
.text:0000000000007D10
.text:0000000000007D10 ; ---------------------------------------------------------------------------
.text:0000000000007D12                 align 20h
.text:0000000000007D20
.text:0000000000007D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D20
.text:0000000000007D20
.text:0000000000007D20 atexit          proc near               ; CODE XREF: main+54↑p
.text:0000000000007D20 ; __unwind {
.text:0000000000007D20                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000007D27                 xor     esi, esi        ; obj
.text:0000000000007D29                 jmp     ___cxa_atexit
.text:0000000000007D29 ; } // starts at 7D20
.text:0000000000007D29 atexit          endp
.text:0000000000007D29
.text:0000000000007D29 _text           ends
.text:0000000000007D29
LOAD:0000000000007D2E ; ===========================================================================
LOAD:0000000000007D2E
LOAD:0000000000007D2E ; Segment type: Pure code
LOAD:0000000000007D2E ; Segment permissions: Read/Execute
LOAD:0000000000007D2E LOAD            segment byte public 'CODE' use64
LOAD:0000000000007D2E                 assume cs:LOAD
LOAD:0000000000007D2E                 ;org 7D2Eh
LOAD:0000000000007D2E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000007D2E                 align 10h
LOAD:0000000000007D2E LOAD            ends
LOAD:0000000000007D2E
.fini:0000000000007D30 ; ===========================================================================
.fini:0000000000007D30
.fini:0000000000007D30 ; Segment type: Pure code
.fini:0000000000007D30 ; Segment permissions: Read/Execute
.fini:0000000000007D30 _fini           segment dword public 'CODE' use64
.fini:0000000000007D30                 assume cs:_fini
.fini:0000000000007D30                 ;org 7D30h
.fini:0000000000007D30                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000007D30
.fini:0000000000007D30 ; =============== S U B R O U T I N E =======================================
.fini:0000000000007D30
.fini:0000000000007D30
.fini:0000000000007D30                 public _term_proc
.fini:0000000000007D30 _term_proc      proc near
.fini:0000000000007D30                 sub     rsp, 8          ; _fini
.fini:0000000000007D34                 add     rsp, 8
.fini:0000000000007D38                 retn
.fini:0000000000007D38 _term_proc      endp
.fini:0000000000007D38
.fini:0000000000007D38 _fini           ends
.fini:0000000000007D38
LOAD:0000000000007D39 ; ===========================================================================
LOAD:0000000000007D39
LOAD:0000000000007D39 ; Segment type: Pure code
LOAD:0000000000007D39 ; Segment permissions: Read/Execute
LOAD:0000000000007D39 LOAD            segment byte public 'CODE' use64
LOAD:0000000000007D39                 assume cs:LOAD
LOAD:0000000000007D39                 ;org 7D39h
LOAD:0000000000007D39                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000007D39                 align 20h
LOAD:0000000000007D39 LOAD            ends
LOAD:0000000000007D39
.rodata:0000000000007D40 ; ===========================================================================
.rodata:0000000000007D40
.rodata:0000000000007D40 ; Segment type: Pure data
.rodata:0000000000007D40 ; Segment permissions: Read
.rodata:0000000000007D40 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000007D40                 assume cs:_rodata
.rodata:0000000000007D40                 ;org 7D40h
.rodata:0000000000007D40                 public _IO_stdin_used
.rodata:0000000000007D40 _IO_stdin_used  db    1
.rodata:0000000000007D41                 db    0
.rodata:0000000000007D42                 db    2
.rodata:0000000000007D43                 db    0
.rodata:0000000000007D44 unk_7D44        db  21h ; !             ; DATA XREF: binop+27↑o
.rodata:0000000000007D44                                         ; binary_operator:loc_1C09↑o
.rodata:0000000000007D45 unk_7D45        db  3Dh ; =             ; DATA XREF: binop+3↑o
.rodata:0000000000007D46                 db    0
.rodata:0000000000007D47 unk_7D47        db  3Dh ; =             ; DATA XREF: binop+46↑o
.rodata:0000000000007D48                 db  3Dh ; =
.rodata:0000000000007D49                 db    0
.rodata:0000000000007D4A unk_7D4A        db  2Dh ; -             ; DATA XREF: binop+65↑o
.rodata:0000000000007D4B                 db  6Eh ; n
.rodata:0000000000007D4C                 db  74h ; t
.rodata:0000000000007D4D                 db    0
.rodata:0000000000007D4E unk_7D4E        db  2Dh ; -             ; DATA XREF: binop+84↑o
.rodata:0000000000007D4F                 db  6Fh ; o
.rodata:0000000000007D50                 db  74h ; t
.rodata:0000000000007D51                 db    0
.rodata:0000000000007D52 unk_7D52        db  2Dh ; -             ; DATA XREF: binop+A3↑o
.rodata:0000000000007D53                 db  65h ; e
.rodata:0000000000007D54                 db  66h ; f
.rodata:0000000000007D55                 db    0
.rodata:0000000000007D56 unk_7D56        db  2Dh ; -             ; DATA XREF: binop+C2↑o
.rodata:0000000000007D57                 db  65h ; e
.rodata:0000000000007D58                 db  71h ; q
.rodata:0000000000007D59                 db    0
.rodata:0000000000007D5A unk_7D5A        db  2Dh ; -             ; DATA XREF: binop+E1↑o
.rodata:0000000000007D5B                 db  6Eh ; n
.rodata:0000000000007D5C                 db  65h ; e
.rodata:0000000000007D5D                 db    0
.rodata:0000000000007D5E unk_7D5E        db  2Dh ; -             ; DATA XREF: binop+FC↑o
.rodata:0000000000007D5F                 db  6Ch ; l
.rodata:0000000000007D60                 db  74h ; t
.rodata:0000000000007D61                 db    0
.rodata:0000000000007D62 unk_7D62        db  2Dh ; -             ; DATA XREF: binop+117↑o
.rodata:0000000000007D63                 db  6Ch ; l
.rodata:0000000000007D64                 db  65h ; e
.rodata:0000000000007D65                 db    0
.rodata:0000000000007D66 unk_7D66        db  2Dh ; -             ; DATA XREF: binop+132↑o
.rodata:0000000000007D67                 db  67h ; g
.rodata:0000000000007D68                 db  74h ; t
.rodata:0000000000007D69                 db    0
.rodata:0000000000007D6A unk_7D6A        db  2Dh ; -             ; DATA XREF: binop+14D↑o
.rodata:0000000000007D6B                 db  67h ; g
.rodata:0000000000007D6C                 db  65h ; e
.rodata:0000000000007D6D                 db    0
.rodata:0000000000007D6E ; const char aInvalidInteger[]
.rodata:0000000000007D6E aInvalidInteger db 'invalid integer %s',0
.rodata:0000000000007D6E                                         ; DATA XREF: find_int+B1↑o
.rodata:0000000000007D81 ; const char aMissingArgumen[]
.rodata:0000000000007D81 aMissingArgumen db 'missing argument after %s',0
.rodata:0000000000007D81                                         ; DATA XREF: beyond+19↑o
.rodata:0000000000007D9B aNtDoesNotAccep db '-nt does not accept -l',0
.rodata:0000000000007D9B                                         ; DATA XREF: binary_operator+564↑o
.rodata:0000000000007DB2 aEfDoesNotAccep db '-ef does not accept -l',0
.rodata:0000000000007DB2                                         ; DATA XREF: binary_operator+556↑o
.rodata:0000000000007DC9 ; const char aOtDoesNotAccep[]
.rodata:0000000000007DC9 aOtDoesNotAccep db '-ot does not accept -l',0
.rodata:0000000000007DC9                                         ; DATA XREF: binary_operator:loc_20A2↑o
.rodata:0000000000007DE0 ; const char aSUnknownBinary[]
.rodata:0000000000007DE0 aSUnknownBinary db '%s: unknown binary operator',0
.rodata:0000000000007DE0                                         ; DATA XREF: binary_operator+432↑o
.rodata:0000000000007DFC ; const char aSUnaryOperator[]
.rodata:0000000000007DFC aSUnaryOperator db '%s: unary operator expected',0
.rodata:0000000000007DFC                                         ; DATA XREF: unary_operator+58B↑o
.rodata:0000000000007E18 asc_7E18        db '!',0                ; DATA XREF: two_arguments+E↑o
.rodata:0000000000007E18                                         ; posixtest+2F↑o ...
.rodata:0000000000007E1A asc_7E1A        db '(',0                ; DATA XREF: posixtest:loc_2818↑o
.rodata:0000000000007E1A                                         ; three_arguments:loc_2CC8↑o
.rodata:0000000000007E1C ; const char aSExpected[]
.rodata:0000000000007E1C aSExpected      db '%s expected',0      ; DATA XREF: or+3B6↑o
.rodata:0000000000007E28 ; const char aSExpectedFound[]
.rodata:0000000000007E28 aSExpectedFound db '%s expected, found %s',0
.rodata:0000000000007E28                                         ; DATA XREF: or+384↑o
.rodata:0000000000007E3E aA              db '-a',0               ; DATA XREF: or+30↑o
.rodata:0000000000007E3E                                         ; three_arguments:loc_2D18↑o
.rodata:0000000000007E41 aO              db '-o',0               ; DATA XREF: or:loc_2B2E↑o
.rodata:0000000000007E41                                         ; three_arguments+E2↑o
.rodata:0000000000007E44 ; const char aSBinaryOperato[]
.rodata:0000000000007E44 aSBinaryOperato db '%s: binary operator expected',0
.rodata:0000000000007E44                                         ; DATA XREF: three_arguments+120↑o
.rodata:0000000000007E61 aTest           db 'test',0             ; DATA XREF: usage+2E3↑o
.rodata:0000000000007E61                                         ; usage+41C↑o ...
.rodata:0000000000007E66 ; const char aTestAndOr[]
.rodata:0000000000007E66 aTestAndOr      db 'test and/or [',0    ; DATA XREF: usage+2AD↑o
.rodata:0000000000007E66                                         ; usage+2EF↑o
.rodata:0000000000007E74 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+316↑o
.rodata:0000000000007E84 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000007E84                                         ; DATA XREF: usage+346↑o
.rodata:0000000000007E84                                         ; usage+443↑o ...
.rodata:0000000000007E9A aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+357↑o
.rodata:0000000000007EA4 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+363↑o
.rodata:0000000000007EB3 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+2F6↑o
.rodata:0000000000007EBD aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+322↑o
.rodata:0000000000007EC7 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+33A↑o
.rodata:0000000000007ED1 ; const char aSOnlineHelpS[]
.rodata:0000000000007ED1 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+3AA↑o
.rodata:0000000000007ED1                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000007EE8 unk_7EE8        db  47h ; G             ; DATA XREF: usage+3C6↑o
.rodata:0000000000007EE8                                         ; usage+487↑o
.rodata:0000000000007EE9                 db  4Eh ; N
.rodata:0000000000007EEA                 db  55h ; U
.rodata:0000000000007EEB                 db  20h
.rodata:0000000000007EEC ; const char domainname[]
.rodata:0000000000007EEC domainname      db 'coreutils',0        ; DATA XREF: main+2B↑o
.rodata:0000000000007EEC                                         ; main+37↑o ...
.rodata:0000000000007EF6 ; const char s2[]
.rodata:0000000000007EF6 s2              db 'en_',0              ; DATA XREF: usage+3ED↑o
.rodata:0000000000007EF6                                         ; usage+4AE↑o
.rodata:0000000000007EFA ; const char aFullDocumentat[]
.rodata:0000000000007EFA aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000007EFA                                         ; DATA XREF: usage:loc_31A9↑o
.rodata:0000000000007EFA                                         ; usage:loc_3266↑o
.rodata:0000000000007F15 ; const char dirname[]
.rodata:0000000000007F15 dirname         db '/usr/local/share/locale',0
.rodata:0000000000007F15                                         ; DATA XREF: main+24↑o
.rodata:0000000000007F2D ; const char msgid[]
.rodata:0000000000007F2D msgid           db 'extra argument %s',0
.rodata:0000000000007F2D                                         ; DATA XREF: main+B0↑o
.rodata:0000000000007F3F                 align 20h
.rodata:0000000000007F40 jpt_212E        dd offset loc_25F0 - 7F40h, offset def_212E - 7F40h, offset def_212E - 7F40h
.rodata:0000000000007F40                                         ; DATA XREF: unary_operator+3D↑o
.rodata:0000000000007F40                                         ; unary_operator+47↑r
.rodata:0000000000007F40                 dd offset def_212E - 7F40h, offset def_212E - 7F40h, offset loc_25A8 - 7F40h ; jump table for switch statement
.rodata:0000000000007F40                 dd offset def_212E - 7F40h, offset loc_2550 - 7F40h, offset loc_2520 - 7F40h
.rodata:0000000000007F40                 dd offset def_212E - 7F40h, offset def_212E - 7F40h, offset def_212E - 7F40h
.rodata:0000000000007F40                 dd offset loc_24E0 - 7F40h, offset def_212E - 7F40h, offset def_212E - 7F40h
.rodata:0000000000007F40                 dd offset def_212E - 7F40h, offset def_212E - 7F40h, offset def_212E - 7F40h
.rodata:0000000000007F40                 dd offset def_212E - 7F40h, offset def_212E - 7F40h, offset def_212E - 7F40h
.rodata:0000000000007F40                 dd offset def_212E - 7F40h, offset def_212E - 7F40h, offset def_212E - 7F40h
.rodata:0000000000007F40                 dd offset def_212E - 7F40h, offset def_212E - 7F40h, offset def_212E - 7F40h
.rodata:0000000000007F40                 dd offset loc_24A0 - 7F40h, offset loc_2460 - 7F40h, offset loc_2420 - 7F40h
.rodata:0000000000007F40                 dd offset loc_23F0 - 7F40h, offset loc_23B0 - 7F40h, offset loc_2370 - 7F40h
.rodata:0000000000007F40                 dd offset loc_25A8 - 7F40h, offset def_212E - 7F40h, offset def_212E - 7F40h
.rodata:0000000000007F40                 dd offset loc_2330 - 7F40h, offset def_212E - 7F40h, offset def_212E - 7F40h
.rodata:0000000000007F40                 dd offset loc_2310 - 7F40h, offset def_212E - 7F40h, offset loc_22C8 - 7F40h
.rodata:0000000000007F40                 dd offset def_212E - 7F40h, offset loc_22A0 - 7F40h, offset loc_2268 - 7F40h
.rodata:0000000000007F40                 dd offset loc_21D8 - 7F40h, offset loc_21A0 - 7F40h, offset def_212E - 7F40h
.rodata:0000000000007F40                 dd offset loc_2240 - 7F40h, offset loc_2178 - 7F40h, offset def_212E - 7F40h
.rodata:0000000000007F40                 dd offset loc_2130 - 7F40h
.rodata:0000000000008010 ; const char aTrySHelpForMor[]
.rodata:0000000000008010 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000008010                                         ; DATA XREF: usage+23↑o
.rodata:0000000000008037                 align 8
.rodata:0000000000008038 ; const char aUsageTestExpre[]
.rodata:0000000000008038 aUsageTestExpre db 'Usage: test EXPRESSION',0Ah
.rodata:0000000000008038                                         ; DATA XREF: usage+64↑o
.rodata:0000000000008038                 db '  or:  test',0Ah
.rodata:0000000000008038                 db '  or:  [ EXPRESSION ]',0Ah
.rodata:0000000000008038                 db '  or:  [ ]',0Ah
.rodata:0000000000008038                 db '  or:  [ OPTION',0Ah,0
.rodata:000000000000808D                 align 10h
.rodata:0000000000008090 ; const char aExitWithTheSta[]
.rodata:0000000000008090 aExitWithTheSta db 'Exit with the status determined by EXPRESSION.',0Ah
.rodata:0000000000008090                                         ; DATA XREF: usage+89↑o
.rodata:0000000000008090                 db 0Ah,0
.rodata:00000000000080C1                 align 8
.rodata:00000000000080C8 ; const char aHelpDisplayThi[]
.rodata:00000000000080C8 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:00000000000080C8                                         ; DATA XREF: usage+AE↑o
.rodata:00000000000080F5                 align 8
.rodata:00000000000080F8 ; const char aVersionOutputV[]
.rodata:00000000000080F8 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:00000000000080F8                                         ; DATA XREF: usage+D3↑o
.rodata:000000000000812E                 align 10h
.rodata:0000000000008130 ; const char aAnOmittedExpre[]
.rodata:0000000000008130 aAnOmittedExpre db 0Ah                  ; DATA XREF: usage+F8↑o
.rodata:0000000000008130                 db 'An omitted EXPRESSION defaults to false.  Otherwise,',0Ah
.rodata:0000000000008130                 db 'EXPRESSION is true or false and sets exit status.  It is one of:',0Ah
.rodata:0000000000008130                 db 0
.rodata:00000000000081A8 ; const char aExpressionExpr[]
.rodata:00000000000081A8 aExpressionExpr db 0Ah                  ; DATA XREF: usage+11D↑o
.rodata:00000000000081A8                 db '  ( EXPRESSION )               EXPRESSION is true',0Ah
.rodata:00000000000081A8                 db '  ! EXPRESSION                 EXPRESSION is false',0Ah
.rodata:00000000000081A8                 db '  EXPRESSION1 -a EXPRESSION2   both EXPRESSION1 and EXPRESSION2 a'
.rodata:00000000000081A8                 db 're true',0Ah
.rodata:00000000000081A8                 db '  EXPRESSION1 -o EXPRESSION2   either EXPRESSION1 or EXPRESSION2 '
.rodata:00000000000081A8                 db 'is true',0Ah,0
.rodata:00000000000082A1                 align 8
.rodata:00000000000082A8 ; const char aNStringTheLeng[]
.rodata:00000000000082A8 aNStringTheLeng db 0Ah                  ; DATA XREF: usage+142↑o
.rodata:00000000000082A8                 db '  -n STRING            the length of STRING is nonzero',0Ah
.rodata:00000000000082A8                 db '  STRING               equivalent to -n STRING',0Ah
.rodata:00000000000082A8                 db '  -z STRING            the length of STRING is zero',0Ah
.rodata:00000000000082A8                 db '  STRING1 = STRING2    the strings are equal',0Ah
.rodata:00000000000082A8                 db '  STRING1 != STRING2   the strings are not equal',0Ah,0
.rodata:00000000000083A2                 align 8
.rodata:00000000000083A8 ; const char aInteger1EqInte[]
.rodata:00000000000083A8 aInteger1EqInte db 0Ah                  ; DATA XREF: usage+167↑o
.rodata:00000000000083A8                 db '  INTEGER1 -eq INTEGER2   INTEGER1 is equal to INTEGER2',0Ah
.rodata:00000000000083A8                 db '  INTEGER1 -ge INTEGER2   INTEGER1 is greater than or equal to IN'
.rodata:00000000000083A8                 db 'TEGER2',0Ah
.rodata:00000000000083A8                 db '  INTEGER1 -gt INTEGER2   INTEGER1 is greater than INTEGER2',0Ah
.rodata:00000000000083A8                 db '  INTEGER1 -le INTEGER2   INTEGER1 is less than or equal to INTEG'
.rodata:00000000000083A8                 db 'ER2',0Ah
.rodata:00000000000083A8                 db '  INTEGER1 -lt INTEGER2   INTEGER1 is less than INTEGER2',0Ah
.rodata:00000000000083A8                 db '  INTEGER1 -ne INTEGER2   INTEGER1 is not equal to INTEGER2',0Ah,0
.rodata:0000000000008520 ; const char aFile1EfFile2Fi[]
.rodata:0000000000008520 aFile1EfFile2Fi db 0Ah                  ; DATA XREF: usage+18C↑o
.rodata:0000000000008520                 db '  FILE1 -ef FILE2   FILE1 and FILE2 have the same device and inod'
.rodata:0000000000008520                 db 'e numbers',0Ah
.rodata:0000000000008520                 db '  FILE1 -nt FILE2   FILE1 is newer (modification date) than FILE2'
.rodata:0000000000008520                 db 0Ah
.rodata:0000000000008520                 db '  FILE1 -ot FILE2   FILE1 is older than FILE2',0Ah,0
.rodata:00000000000085DD                 align 20h
.rodata:00000000000085E0 ; const char aBFileFileExist[]
.rodata:00000000000085E0 aBFileFileExist db 0Ah                  ; DATA XREF: usage+1B1↑o
.rodata:00000000000085E0                 db '  -b FILE     FILE exists and is block special',0Ah
.rodata:00000000000085E0                 db '  -c FILE     FILE exists and is character special',0Ah
.rodata:00000000000085E0                 db '  -d FILE     FILE exists and is a directory',0Ah
.rodata:00000000000085E0                 db '  -e FILE     FILE exists',0Ah,0
.rodata:000000000000868B                 align 10h
.rodata:0000000000008690 ; const char aFFileFileExist[]
.rodata:0000000000008690 aFFileFileExist db '  -f FILE     FILE exists and is a regular file',0Ah
.rodata:0000000000008690                                         ; DATA XREF: usage+1D6↑o
.rodata:0000000000008690                 db '  -g FILE     FILE exists and is set-group-ID',0Ah
.rodata:0000000000008690                 db '  -G FILE     FILE exists and is owned by the effective group ID',0Ah
.rodata:0000000000008690                 db '  -h FILE     FILE exists and is a symbolic link (same as -L)',0Ah
.rodata:0000000000008690                 db '  -k FILE     FILE exists and has its sticky bit set',0Ah,0
.rodata:00000000000087A3                 align 8
.rodata:00000000000087A8 ; const char aLFileFileExist[]
.rodata:00000000000087A8 aLFileFileExist db '  -L FILE     FILE exists and is a symbolic link (same as -h)',0Ah
.rodata:00000000000087A8                                         ; DATA XREF: usage+1FB↑o
.rodata:00000000000087A8                 db '  -N FILE     FILE exists and has been modified since it was last'
.rodata:00000000000087A8                 db ' read',0Ah
.rodata:00000000000087A8                 db '  -O FILE     FILE exists and is owned by the effective user ID',0Ah
.rodata:00000000000087A8                 db '  -p FILE     FILE exists and is a named pipe',0Ah
.rodata:00000000000087A8                 db '  -r FILE     FILE exists and read permission is granted',0Ah
.rodata:00000000000087A8                 db '  -s FILE     FILE exists and has a size greater than zero',0Ah,0
.rodata:0000000000008910 ; const char aSFileFileExist[]
.rodata:0000000000008910 aSFileFileExist db '  -S FILE     FILE exists and is a socket',0Ah
.rodata:0000000000008910                                         ; DATA XREF: usage+220↑o
.rodata:0000000000008910                 db '  -t FD       file descriptor FD is opened on a terminal',0Ah
.rodata:0000000000008910                 db '  -u FILE     FILE exists and its set-user-ID bit is set',0Ah
.rodata:0000000000008910                 db '  -w FILE     FILE exists and write permission is granted',0Ah
.rodata:0000000000008910                 db '  -x FILE     FILE exists and execute (or search) permission is g'
.rodata:0000000000008910                 db 'ranted',0Ah,0
.rodata:0000000000008A2F                 align 10h
.rodata:0000000000008A30 ; const char aExceptForHAndL[]
.rodata:0000000000008A30 aExceptForHAndL db 0Ah                  ; DATA XREF: usage+245↑o
.rodata:0000000000008A30                 db 'Except for -h and -L, all FILE-related tests dereference symbolic'
.rodata:0000000000008A30                 db ' links.',0Ah
.rodata:0000000000008A30                 db 'Beware that parentheses need to be escaped (e.g., by backslashes)'
.rodata:0000000000008A30                 db ' for shells.',0Ah
.rodata:0000000000008A30                 db 'INTEGER may also be -l STRING, which evaluates to the length of S'
.rodata:0000000000008A30                 db 'TRING.',0Ah,0
.rodata:0000000000008B11                 align 8
.rodata:0000000000008B18 ; const char aNoteBinaryAAnd[]
.rodata:0000000000008B18 aNoteBinaryAAnd db 0Ah                  ; DATA XREF: usage+26A↑o
.rodata:0000000000008B18                 db 'NOTE: Binary -a and -o are inherently ambiguous.  Use ',27h,'test'
.rodata:0000000000008B18                 db ' EXPR1 && test',0Ah
.rodata:0000000000008B18                 db 'EXPR2',27h,' or ',27h,'test EXPR1 || test EXPR2',27h,' instead.',0Ah
.rodata:0000000000008B18                 db 0
.rodata:0000000000008B92                 align 8
.rodata:0000000000008B98 ; const char aNoteHonorsTheH[]
.rodata:0000000000008B98 aNoteHonorsTheH db 0Ah                  ; DATA XREF: usage+28F↑o
.rodata:0000000000008B98                 db 'NOTE: [ honors the --help and --version options, but test does no'
.rodata:0000000000008B98                 db 't.',0Ah
.rodata:0000000000008B98                 db 'test treats each of those as it treats any other nonempty STRING.'
.rodata:0000000000008B98                 db 0Ah,0
.rodata:0000000000008C20 ; const char aNoteYourShellM[]
.rodata:0000000000008C20 aNoteYourShellM db 0Ah                  ; DATA XREF: usage+2C0↑o
.rodata:0000000000008C20                 db 'NOTE: your shell may have its own version of %s, which usually su'
.rodata:0000000000008C20                 db 'persedes',0Ah
.rodata:0000000000008C20                 db 'the version described here.  Please refer to your shell',27h,'s d'
.rodata:0000000000008C20                 db 'ocumentation',0Ah
.rodata:0000000000008C20                 db 'for details about the options it supports.',0Ah,0
.rodata:0000000000008CDF                 align 20h
.rodata:0000000000008CE0 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000008CE0                                         ; DATA XREF: usage+3BF↑o
.rodata:0000000000008CE0                                         ; usage+423↑o ...
.rodata:0000000000008D08 ; const char aReportAnyTrans[]
.rodata:0000000000008D08 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000008D08                                         ; DATA XREF: usage+517↑o
.rodata:0000000000008D08                 db 'am/>',0Ah,0
.rodata:0000000000008D4F                 align 10h
.rodata:0000000000008D50 ; const char aOrAvailableLoc[]
.rodata:0000000000008D50 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000008D50                                         ; DATA XREF: usage:loc_31EE↑o
.rodata:0000000000008D83 ; const char aWriteError[]
.rodata:0000000000008D83 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_3343↑o
.rodata:0000000000008D8F ; const char format[]
.rodata:0000000000008D8F format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000008D8F                                         ; close_stdout+8F↑o ...
.rodata:0000000000008D96                 align 8
.rodata:0000000000008D98 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000008D98                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000008DD0 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000008DD8 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000008DDC unk_8DDC        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000008DDD                 db  80h
.rodata:0000000000008DDE                 db  98h
.rodata:0000000000008DDF                 db    0
.rodata:0000000000008DE0 unk_8DE0        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000008DE1                 db  80h
.rodata:0000000000008DE2                 db  99h
.rodata:0000000000008DE3                 db    0
.rodata:0000000000008DE4 unk_8DE4        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000008DE5                 db    7
.rodata:0000000000008DE6                 db  65h ; e
.rodata:0000000000008DE7                 db    0
.rodata:0000000000008DE8 unk_8DE8        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000008DE9                 db 0AFh
.rodata:0000000000008DEA                 db    0
.rodata:0000000000008DEB unk_8DEB        db  22h ; "             ; DATA XREF: gettext_quote:loc_34C0↑o
.rodata:0000000000008DEB                                         ; quotearg_buffer_restyled:loc_427B↑o ...
.rodata:0000000000008DEC                 db    0
.rodata:0000000000008DED ; const char asc_8DED[2]
.rodata:0000000000008DED asc_8DED        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000008DED                                         ; quotearg_buffer_restyled:loc_3643↑o ...
.rodata:0000000000008DEF ; const char asc_8DEF[2]
.rodata:0000000000008DEF asc_8DEF        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000008DEF                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000008DF1 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000008DF9 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020ABE8↓o
.rodata:0000000000008DFF aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020ABF0↓o
.rodata:0000000000008E0C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020ABF8↓o
.rodata:0000000000008E0C                                         ; .data.rel.ro:000000000020AC18↓o
.rodata:0000000000008E19 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000008E19                                         ; DATA XREF: .data.rel.ro:000000000020AC00↓o
.rodata:0000000000008E2D aC_0            db 'c',0                ; DATA XREF: .data.rel.ro:000000000020AC08↓o
.rodata:0000000000008E2F aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020AC10↓o
.rodata:0000000000008E37 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020AC28↓o
.rodata:0000000000008E3F                 align 20h
.rodata:0000000000008E40 jpt_3621        dd offset loc_43CA - 8E40h
.rodata:0000000000008E40                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000008E40                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000008E40                 dd offset loc_3623 - 8E40h ; jump table for switch statement
.rodata:0000000000008E40                 dd offset loc_45F8 - 8E40h
.rodata:0000000000008E40                 dd offset loc_4404 - 8E40h
.rodata:0000000000008E40                 dd offset loc_41F4 - 8E40h
.rodata:0000000000008E40                 dd offset loc_4250 - 8E40h
.rodata:0000000000008E40                 dd offset loc_42A5 - 8E40h
.rodata:0000000000008E40                 dd offset loc_42EA - 8E40h
.rodata:0000000000008E40                 dd offset loc_4324 - 8E40h
.rodata:0000000000008E40                 dd offset loc_4324 - 8E40h
.rodata:0000000000008E40                 dd offset loc_4324 - 8E40h
.rodata:0000000000008E6C jpt_377E        dd offset loc_39A0 - 8E6Ch, offset def_377E - 8E6Ch, offset def_377E - 8E6Ch
.rodata:0000000000008E6C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000008E6C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000008E6C                 dd offset def_377E - 8E6Ch, offset def_377E - 8E6Ch, offset def_377E - 8E6Ch ; jump table for switch statement
.rodata:0000000000008E6C                 dd offset def_377E - 8E6Ch, offset loc_39E0 - 8E6Ch, offset loc_38E8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_38A8 - 8E6Ch, offset loc_3A70 - 8E6Ch, offset loc_3A60 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_3A50 - 8E6Ch, offset loc_3A40 - 8E6Ch, offset def_377E - 8E6Ch
.rodata:0000000000008E6C                 dd offset def_377E - 8E6Ch, offset def_377E - 8E6Ch, offset def_377E - 8E6Ch
.rodata:0000000000008E6C                 dd offset def_377E - 8E6Ch, offset def_377E - 8E6Ch, offset def_377E - 8E6Ch
.rodata:0000000000008E6C                 dd offset def_377E - 8E6Ch, offset def_377E - 8E6Ch, offset def_377E - 8E6Ch
.rodata:0000000000008E6C                 dd offset def_377E - 8E6Ch, offset def_377E - 8E6Ch, offset def_377E - 8E6Ch
.rodata:0000000000008E6C                 dd offset def_377E - 8E6Ch, offset def_377E - 8E6Ch, offset def_377E - 8E6Ch
.rodata:0000000000008E6C                 dd offset def_377E - 8E6Ch, offset def_377E - 8E6Ch, offset loc_3A30 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_3A20 - 8E6Ch, offset loc_3A20 - 8E6Ch, offset loc_39F0 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_3A20 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_3A20 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_3883 - 8E6Ch, offset loc_3A20 - 8E6Ch, offset loc_3A20 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_3A20 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_3A20 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_3A20 - 8E6Ch, offset loc_3A20 - 8E6Ch, offset loc_3A20 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_3853 - 8E6Ch, offset def_377E - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_3A20 - 8E6Ch, offset loc_38F8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_3A20 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_3A20 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch, offset loc_39C8 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_3783 - 8E6Ch, offset loc_3A20 - 8E6Ch, offset loc_3783 - 8E6Ch
.rodata:0000000000008E6C                 dd offset loc_39F0 - 8E6Ch
.rodata:0000000000009068 jpt_3B0A        dd offset loc_3B70 - 9068h, offset def_3B0A - 9068h, offset def_3B0A - 9068h
.rodata:0000000000009068                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000009068                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000009068                 dd offset def_3B0A - 9068h, offset def_3B0A - 9068h, offset def_3B0A - 9068h ; jump table for switch statement
.rodata:0000000000009068                 dd offset def_3B0A - 9068h, offset loc_3B60 - 9068h, offset loc_3CB0 - 9068h
.rodata:0000000000009068                 dd offset loc_3C98 - 9068h, offset loc_3B48 - 9068h, offset loc_3C88 - 9068h
.rodata:0000000000009068                 dd offset loc_3B30 - 9068h, offset loc_3C70 - 9068h, offset def_3B0A - 9068h
.rodata:0000000000009068                 dd offset def_3B0A - 9068h, offset def_3B0A - 9068h, offset def_3B0A - 9068h
.rodata:0000000000009068                 dd offset def_3B0A - 9068h, offset def_3B0A - 9068h, offset def_3B0A - 9068h
.rodata:0000000000009068                 dd offset def_3B0A - 9068h, offset def_3B0A - 9068h, offset def_3B0A - 9068h
.rodata:0000000000009068                 dd offset def_3B0A - 9068h, offset def_3B0A - 9068h, offset def_3B0A - 9068h
.rodata:0000000000009068                 dd offset def_3B0A - 9068h, offset def_3B0A - 9068h, offset def_3B0A - 9068h
.rodata:0000000000009068                 dd offset def_3B0A - 9068h, offset def_3B0A - 9068h, offset loc_3C58 - 9068h
.rodata:0000000000009068                 dd offset loc_3C40 - 9068h, offset loc_3C40 - 9068h, offset loc_3C28 - 9068h
.rodata:0000000000009068                 dd offset loc_3C40 - 9068h, offset loc_3C10 - 9068h, offset loc_3C40 - 9068h
.rodata:0000000000009068                 dd offset loc_3880 - 9068h, offset loc_3C40 - 9068h, offset loc_3C40 - 9068h
.rodata:0000000000009068                 dd offset loc_3C40 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C40 - 9068h
.rodata:0000000000009068                 dd offset loc_3C40 - 9068h, offset loc_3C40 - 9068h, offset loc_3C40 - 9068h
.rodata:0000000000009068                 dd offset loc_3850 - 9068h, offset def_3B0A - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C40 - 9068h, offset loc_3B10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C40 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C40 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3C10 - 9068h, offset loc_3C10 - 9068h, offset loc_3C10 - 9068h
.rodata:0000000000009068                 dd offset loc_3780 - 9068h, offset loc_3C40 - 9068h, offset loc_3780 - 9068h
.rodata:0000000000009068                 dd offset loc_3C28 - 9068h
.rodata:0000000000009264                 align 20h
.rodata:0000000000009280                 public quoting_style_vals
.rodata:0000000000009280 quoting_style_vals db    0
.rodata:0000000000009281                 db    0
.rodata:0000000000009282                 db    0
.rodata:0000000000009283                 db    0
.rodata:0000000000009284                 db    1
.rodata:0000000000009285                 db    0
.rodata:0000000000009286                 db    0
.rodata:0000000000009287                 db    0
.rodata:0000000000009288                 db    2
.rodata:0000000000009289                 db    0
.rodata:000000000000928A                 db    0
.rodata:000000000000928B                 db    0
.rodata:000000000000928C                 db    3
.rodata:000000000000928D                 db    0
.rodata:000000000000928E                 db    0
.rodata:000000000000928F                 db    0
.rodata:0000000000009290                 db    4
.rodata:0000000000009291                 db    0
.rodata:0000000000009292                 db    0
.rodata:0000000000009293                 db    0
.rodata:0000000000009294                 db    5
.rodata:0000000000009295                 db    0
.rodata:0000000000009296                 db    0
.rodata:0000000000009297                 db    0
.rodata:0000000000009298                 db    6
.rodata:0000000000009299                 db    0
.rodata:000000000000929A                 db    0
.rodata:000000000000929B                 db    0
.rodata:000000000000929C                 db    7
.rodata:000000000000929D                 db    0
.rodata:000000000000929E                 db    0
.rodata:000000000000929F                 db    0
.rodata:00000000000092A0                 db    8
.rodata:00000000000092A1                 db    0
.rodata:00000000000092A2                 db    0
.rodata:00000000000092A3                 db    0
.rodata:00000000000092A4                 db    9
.rodata:00000000000092A5                 db    0
.rodata:00000000000092A6                 db    0
.rodata:00000000000092A7                 db    0
.rodata:00000000000092A8 ; const char aUnableToDispla[]
.rodata:00000000000092A8 aUnableToDispla db 'unable to display error message',0
.rodata:00000000000092A8                                         ; DATA XREF: verror_at_line:loc_5467↑o
.rodata:00000000000092C8 ; const char aMemoryExhauste[]
.rodata:00000000000092C8 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:00000000000092D9 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:00000000000092DB aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_5B10↑o
.rodata:00000000000092E1 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000092E1                                         ; locale_charset:loc_5B60↑o
.rodata:00000000000092E7                 align 8
.rodata:00000000000092E8 jpt_61EB        dd offset def_61EB - 92E8h
.rodata:00000000000092E8                                         ; DATA XREF: vasnprintf+54D↑o
.rodata:00000000000092E8                                         ; vasnprintf+554↑r
.rodata:00000000000092E8                 dd offset loc_6650 - 92E8h ; jump table for switch statement
.rodata:00000000000092E8                 dd offset loc_6620 - 92E8h
.rodata:00000000000092E8                 dd offset loc_6598 - 92E8h
.rodata:00000000000092E8                 dd offset loc_6558 - 92E8h
.rodata:00000000000092E8                 dd offset loc_6328 - 92E8h
.rodata:00000000000092E8                 dd offset loc_6328 - 92E8h
.rodata:00000000000092E8                 dd offset loc_61F0 - 92E8h
.rodata:00000000000092E8                 dd offset loc_61F0 - 92E8h
.rodata:00000000000092E8                 dd offset loc_61F0 - 92E8h
.rodata:00000000000092E8                 dd offset loc_61F0 - 92E8h
.rodata:00000000000092E8                 dd offset loc_64D8 - 92E8h
.rodata:00000000000092E8                 dd offset loc_6450 - 92E8h
.rodata:00000000000092E8                 dd offset loc_6328 - 92E8h
.rodata:00000000000092E8                 dd offset loc_6328 - 92E8h
.rodata:00000000000092E8                 dd offset loc_61F0 - 92E8h
.rodata:00000000000092E8                 dd offset loc_61F0 - 92E8h
.rodata:00000000000092E8                 dd offset loc_61F0 - 92E8h
.rodata:0000000000009330 jpt_6790        dd offset loc_6A00 - 9330h
.rodata:0000000000009330                                         ; DATA XREF: vasnprintf+AEE↑o
.rodata:0000000000009330                                         ; vasnprintf+AF9↑r
.rodata:0000000000009330                 dd offset loc_6A20 - 9330h ; jump table for switch statement
.rodata:0000000000009330                 dd offset loc_6A10 - 9330h
.rodata:0000000000009330                 dd offset loc_68D0 - 9330h
.rodata:0000000000009330                 dd offset loc_68D0 - 9330h
.rodata:0000000000009344 aNull           db '(NULL)',0           ; DATA XREF: printf_fetchargs+18↑o
.rodata:0000000000009344                                         ; posixtest+108↑o ...
.rodata:000000000000934B                 align 10h
.rodata:0000000000009350 jpt_6DE6        dd offset def_6DE6 - 9350h
.rodata:0000000000009350                                         ; DATA XREF: printf_fetchargs+A↑o
.rodata:0000000000009350                                         ; printf_fetchargs+2F↑r
.rodata:0000000000009350                 dd offset loc_6E6C - 9350h ; jump table for switch statement
.rodata:0000000000009350                 dd offset loc_6E6C - 9350h
.rodata:0000000000009350                 dd offset loc_6E8E - 9350h
.rodata:0000000000009350                 dd offset loc_6E8E - 9350h
.rodata:0000000000009350                 dd offset loc_6E4A - 9350h
.rodata:0000000000009350                 dd offset loc_6E4A - 9350h
.rodata:0000000000009350                 dd offset loc_6E26 - 9350h
.rodata:0000000000009350                 dd offset loc_6E26 - 9350h
.rodata:0000000000009350                 dd offset loc_6E26 - 9350h
.rodata:0000000000009350                 dd offset loc_6E26 - 9350h
.rodata:0000000000009350                 dd offset loc_6EE2 - 9350h
.rodata:0000000000009350                 dd offset loc_6DF0 - 9350h
.rodata:0000000000009350                 dd offset loc_6E4A - 9350h
.rodata:0000000000009350                 dd offset loc_6E4A - 9350h
.rodata:0000000000009350                 dd offset loc_6EB4 - 9350h
.rodata:0000000000009350                 dd offset loc_6F10 - 9350h
.rodata:0000000000009350                 dd offset loc_6E26 - 9350h
.rodata:0000000000009350                 dd offset loc_6E26 - 9350h
.rodata:0000000000009350                 dd offset loc_6E26 - 9350h
.rodata:0000000000009350                 dd offset loc_6E26 - 9350h
.rodata:0000000000009350                 dd offset loc_6E26 - 9350h
.rodata:0000000000009350                 dd offset loc_6E26 - 9350h
.rodata:00000000000093AC                 align 10h
.rodata:00000000000093B0 wide_null_string_2696 db  28h ; (       ; DATA XREF: printf_fetchargs+11↑o
.rodata:00000000000093B1                 db    0
.rodata:00000000000093B2                 db    0
.rodata:00000000000093B3                 db    0
.rodata:00000000000093B4                 db  4Eh ; N
.rodata:00000000000093B5                 db    0
.rodata:00000000000093B6                 db    0
.rodata:00000000000093B7                 db    0
.rodata:00000000000093B8                 db  55h ; U
.rodata:00000000000093B9                 db    0
.rodata:00000000000093BA                 db    0
.rodata:00000000000093BB                 db    0
.rodata:00000000000093BC                 db  4Ch ; L
.rodata:00000000000093BD                 db    0
.rodata:00000000000093BE                 db    0
.rodata:00000000000093BF                 db    0
.rodata:00000000000093C0                 db  4Ch ; L
.rodata:00000000000093C1                 db    0
.rodata:00000000000093C2                 db    0
.rodata:00000000000093C3                 db    0
.rodata:00000000000093C4                 db  29h ; )
.rodata:00000000000093C5                 db    0
.rodata:00000000000093C6                 db    0
.rodata:00000000000093C7                 db    0
.rodata:00000000000093C8                 db    0
.rodata:00000000000093C9                 db    0
.rodata:00000000000093CA                 db    0
.rodata:00000000000093CB                 db    0
.rodata:00000000000093CC jpt_71F5        dd offset loc_726B - 93CCh, offset def_71F5 - 93CCh, offset def_71F5 - 93CCh
.rodata:00000000000093CC                                         ; DATA XREF: printf_parse+234↑o
.rodata:00000000000093CC                                         ; printf_parse+23E↑r
.rodata:00000000000093CC                 dd offset def_71F5 - 93CCh, offset def_71F5 - 93CCh, offset def_71F5 - 93CCh ; jump table for switch statement
.rodata:00000000000093CC                 dd offset def_71F5 - 93CCh, offset def_71F5 - 93CCh, offset def_71F5 - 93CCh
.rodata:00000000000093CC                 dd offset def_71F5 - 93CCh, offset def_71F5 - 93CCh, offset def_71F5 - 93CCh
.rodata:00000000000093CC                 dd offset def_71F5 - 93CCh, offset def_71F5 - 93CCh, offset def_71F5 - 93CCh
.rodata:00000000000093CC                 dd offset def_71F5 - 93CCh, offset def_71F5 - 93CCh, offset def_71F5 - 93CCh
.rodata:00000000000093CC                 dd offset def_71F5 - 93CCh, offset def_71F5 - 93CCh, offset def_71F5 - 93CCh
.rodata:00000000000093CC                 dd offset def_71F5 - 93CCh, offset def_71F5 - 93CCh, offset def_71F5 - 93CCh
.rodata:00000000000093CC                 dd offset def_71F5 - 93CCh, offset def_71F5 - 93CCh, offset def_71F5 - 93CCh
.rodata:00000000000093CC                 dd offset def_71F5 - 93CCh, offset loc_776B - 93CCh, offset def_71F5 - 93CCh
.rodata:00000000000093CC                 dd offset loc_778C - 93CCh, offset def_71F5 - 93CCh, offset loc_776B - 93CCh
.rodata:00000000000093CC                 dd offset loc_776B - 93CCh, offset loc_776B - 93CCh, offset def_71F5 - 93CCh
.rodata:00000000000093CC                 dd offset def_71F5 - 93CCh, offset def_71F5 - 93CCh, offset def_71F5 - 93CCh
.rodata:00000000000093CC                 dd offset def_71F5 - 93CCh, offset def_71F5 - 93CCh, offset def_71F5 - 93CCh
.rodata:00000000000093CC                 dd offset def_71F5 - 93CCh, offset def_71F5 - 93CCh, offset def_71F5 - 93CCh
.rodata:00000000000093CC                 dd offset def_71F5 - 93CCh, offset loc_71F7 - 93CCh, offset def_71F5 - 93CCh
.rodata:00000000000093CC                 dd offset def_71F5 - 93CCh, offset def_71F5 - 93CCh, offset def_71F5 - 93CCh
.rodata:00000000000093CC                 dd offset loc_779C - 93CCh, offset def_71F5 - 93CCh, offset def_71F5 - 93CCh
.rodata:00000000000093CC                 dd offset def_71F5 - 93CCh, offset def_71F5 - 93CCh, offset def_71F5 - 93CCh
.rodata:00000000000093CC                 dd offset def_71F5 - 93CCh, offset def_71F5 - 93CCh, offset def_71F5 - 93CCh
.rodata:00000000000093CC                 dd offset loc_776B - 93CCh, offset def_71F5 - 93CCh, offset loc_76F8 - 93CCh
.rodata:00000000000093CC                 dd offset loc_770B - 93CCh, offset loc_776B - 93CCh, offset loc_776B - 93CCh
.rodata:00000000000093CC                 dd offset loc_776B - 93CCh, offset def_71F5 - 93CCh, offset loc_770B - 93CCh
.rodata:00000000000093CC                 dd offset def_71F5 - 93CCh, offset def_71F5 - 93CCh, offset def_71F5 - 93CCh
.rodata:00000000000093CC                 dd offset def_71F5 - 93CCh, offset loc_76AC - 93CCh, offset loc_779C - 93CCh
.rodata:00000000000093CC                 dd offset loc_77F0 - 93CCh, offset def_71F5 - 93CCh, offset def_71F5 - 93CCh
.rodata:00000000000093CC                 dd offset loc_7758 - 93CCh, offset def_71F5 - 93CCh, offset loc_779C - 93CCh
.rodata:00000000000093CC                 dd offset def_71F5 - 93CCh, offset def_71F5 - 93CCh, offset loc_779C - 93CCh
.rodata:00000000000093CC _rodata         ends
.rodata:00000000000093CC
.eh_frame_hdr:000000000000951C ; ===========================================================================
.eh_frame_hdr:000000000000951C
.eh_frame_hdr:000000000000951C ; Segment type: Pure data
.eh_frame_hdr:000000000000951C ; Segment permissions: Read
.eh_frame_hdr:000000000000951C _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000951C                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000951C                 ;org 951Ch
.eh_frame_hdr:000000000000951C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000000951D                 db  1Bh
.eh_frame_hdr:000000000000951E                 db    3
.eh_frame_hdr:000000000000951F                 db  3Bh ; ;
.eh_frame_hdr:0000000000009520                 db 0B8h
.eh_frame_hdr:0000000000009521                 db    2
.eh_frame_hdr:0000000000009522                 db    0
.eh_frame_hdr:0000000000009523                 db    0
.eh_frame_hdr:0000000000009524                 db  56h ; V
.eh_frame_hdr:0000000000009525                 db    0
.eh_frame_hdr:0000000000009526                 db    0
.eh_frame_hdr:0000000000009527                 db    0
.eh_frame_hdr:0000000000009528                 db 0D4h
.eh_frame_hdr:0000000000009529                 db  7Dh ; }
.eh_frame_hdr:000000000000952A                 db 0FFh
.eh_frame_hdr:000000000000952B                 db 0FFh
.eh_frame_hdr:000000000000952C                 db    4
.eh_frame_hdr:000000000000952D                 db    3
.eh_frame_hdr:000000000000952E                 db    0
.eh_frame_hdr:000000000000952F                 db    0
.eh_frame_hdr:0000000000009530                 db 0E4h
.eh_frame_hdr:0000000000009531                 db  80h
.eh_frame_hdr:0000000000009532                 db 0FFh
.eh_frame_hdr:0000000000009533                 db 0FFh
.eh_frame_hdr:0000000000009534                 db  2Ch ; ,
.eh_frame_hdr:0000000000009535                 db    3
.eh_frame_hdr:0000000000009536                 db    0
.eh_frame_hdr:0000000000009537                 db    0
.eh_frame_hdr:0000000000009538                 db 0F4h
.eh_frame_hdr:0000000000009539                 db  80h
.eh_frame_hdr:000000000000953A                 db 0FFh
.eh_frame_hdr:000000000000953B                 db 0FFh
.eh_frame_hdr:000000000000953C                 db  28h ; (
.eh_frame_hdr:000000000000953D                 db    5
.eh_frame_hdr:000000000000953E                 db    0
.eh_frame_hdr:000000000000953F                 db    0
.eh_frame_hdr:0000000000009540                 db 0D4h
.eh_frame_hdr:0000000000009541                 db  81h
.eh_frame_hdr:0000000000009542                 db 0FFh
.eh_frame_hdr:0000000000009543                 db 0FFh
.eh_frame_hdr:0000000000009544                 db 0D4h
.eh_frame_hdr:0000000000009545                 db    2
.eh_frame_hdr:0000000000009546                 db    0
.eh_frame_hdr:0000000000009547                 db    0
.eh_frame_hdr:0000000000009548                 db 0E4h
.eh_frame_hdr:0000000000009549                 db  82h
.eh_frame_hdr:000000000000954A                 db 0FFh
.eh_frame_hdr:000000000000954B                 db 0FFh
.eh_frame_hdr:000000000000954C                 db  44h ; D
.eh_frame_hdr:000000000000954D                 db    3
.eh_frame_hdr:000000000000954E                 db    0
.eh_frame_hdr:000000000000954F                 db    0
.eh_frame_hdr:0000000000009550                 db  54h ; T
.eh_frame_hdr:0000000000009551                 db  84h
.eh_frame_hdr:0000000000009552                 db 0FFh
.eh_frame_hdr:0000000000009553                 db 0FFh
.eh_frame_hdr:0000000000009554                 db  58h ; X
.eh_frame_hdr:0000000000009555                 db    3
.eh_frame_hdr:0000000000009556                 db    0
.eh_frame_hdr:0000000000009557                 db    0
.eh_frame_hdr:0000000000009558                 db    4
.eh_frame_hdr:0000000000009559                 db  85h
.eh_frame_hdr:000000000000955A                 db 0FFh
.eh_frame_hdr:000000000000955B                 db 0FFh
.eh_frame_hdr:000000000000955C                 db  70h ; p
.eh_frame_hdr:000000000000955D                 db    3
.eh_frame_hdr:000000000000955E                 db    0
.eh_frame_hdr:000000000000955F                 db    0
.eh_frame_hdr:0000000000009560                 db 0E4h
.eh_frame_hdr:0000000000009561                 db  85h
.eh_frame_hdr:0000000000009562                 db 0FFh
.eh_frame_hdr:0000000000009563                 db 0FFh
.eh_frame_hdr:0000000000009564                 db  90h
.eh_frame_hdr:0000000000009565                 db    3
.eh_frame_hdr:0000000000009566                 db    0
.eh_frame_hdr:0000000000009567                 db    0
.eh_frame_hdr:0000000000009568                 db  24h ; $
.eh_frame_hdr:0000000000009569                 db  86h
.eh_frame_hdr:000000000000956A                 db 0FFh
.eh_frame_hdr:000000000000956B                 db 0FFh
.eh_frame_hdr:000000000000956C                 db 0A8h
.eh_frame_hdr:000000000000956D                 db    3
.eh_frame_hdr:000000000000956E                 db    0
.eh_frame_hdr:000000000000956F                 db    0
.eh_frame_hdr:0000000000009570                 db  54h ; T
.eh_frame_hdr:0000000000009571                 db  86h
.eh_frame_hdr:0000000000009572                 db 0FFh
.eh_frame_hdr:0000000000009573                 db 0FFh
.eh_frame_hdr:0000000000009574                 db 0BCh
.eh_frame_hdr:0000000000009575                 db    3
.eh_frame_hdr:0000000000009576                 db    0
.eh_frame_hdr:0000000000009577                 db    0
.eh_frame_hdr:0000000000009578                 db 0C4h
.eh_frame_hdr:0000000000009579                 db  8Bh
.eh_frame_hdr:000000000000957A                 db 0FFh
.eh_frame_hdr:000000000000957B                 db 0FFh
.eh_frame_hdr:000000000000957C                 db    8
.eh_frame_hdr:000000000000957D                 db    4
.eh_frame_hdr:000000000000957E                 db    0
.eh_frame_hdr:000000000000957F                 db    0
.eh_frame_hdr:0000000000009580                 db 0A4h
.eh_frame_hdr:0000000000009581                 db  91h
.eh_frame_hdr:0000000000009582                 db 0FFh
.eh_frame_hdr:0000000000009583                 db 0FFh
.eh_frame_hdr:0000000000009584                 db  34h ; 4
.eh_frame_hdr:0000000000009585                 db    4
.eh_frame_hdr:0000000000009586                 db    0
.eh_frame_hdr:0000000000009587                 db    0
.eh_frame_hdr:0000000000009588                 db  14h
.eh_frame_hdr:0000000000009589                 db  92h
.eh_frame_hdr:000000000000958A                 db 0FFh
.eh_frame_hdr:000000000000958B                 db 0FFh
.eh_frame_hdr:000000000000958C                 db  4Ch ; L
.eh_frame_hdr:000000000000958D                 db    4
.eh_frame_hdr:000000000000958E                 db    0
.eh_frame_hdr:000000000000958F                 db    0
.eh_frame_hdr:0000000000009590                 db  54h ; T
.eh_frame_hdr:0000000000009591                 db  93h
.eh_frame_hdr:0000000000009592                 db 0FFh
.eh_frame_hdr:0000000000009593                 db 0FFh
.eh_frame_hdr:0000000000009594                 db  80h
.eh_frame_hdr:0000000000009595                 db    4
.eh_frame_hdr:0000000000009596                 db    0
.eh_frame_hdr:0000000000009597                 db    0
.eh_frame_hdr:0000000000009598                 db  34h ; 4
.eh_frame_hdr:0000000000009599                 db  97h
.eh_frame_hdr:000000000000959A                 db 0FFh
.eh_frame_hdr:000000000000959B                 db 0FFh
.eh_frame_hdr:000000000000959C                 db 0CCh
.eh_frame_hdr:000000000000959D                 db    4
.eh_frame_hdr:000000000000959E                 db    0
.eh_frame_hdr:000000000000959F                 db    0
.eh_frame_hdr:00000000000095A0                 db  84h
.eh_frame_hdr:00000000000095A1                 db  98h
.eh_frame_hdr:00000000000095A2                 db 0FFh
.eh_frame_hdr:00000000000095A3                 db 0FFh
.eh_frame_hdr:00000000000095A4                 db 0FCh
.eh_frame_hdr:00000000000095A5                 db    4
.eh_frame_hdr:00000000000095A6                 db    0
.eh_frame_hdr:00000000000095A7                 db    0
.eh_frame_hdr:00000000000095A8                 db 0C4h
.eh_frame_hdr:00000000000095A9                 db  9Dh
.eh_frame_hdr:00000000000095AA                 db 0FFh
.eh_frame_hdr:00000000000095AB                 db 0FFh
.eh_frame_hdr:00000000000095AC                 db  54h ; T
.eh_frame_hdr:00000000000095AD                 db    5
.eh_frame_hdr:00000000000095AE                 db    0
.eh_frame_hdr:00000000000095AF                 db    0
.eh_frame_hdr:00000000000095B0                 db 0D4h
.eh_frame_hdr:00000000000095B1                 db  9Dh
.eh_frame_hdr:00000000000095B2                 db 0FFh
.eh_frame_hdr:00000000000095B3                 db 0FFh
.eh_frame_hdr:00000000000095B4                 db  68h ; h
.eh_frame_hdr:00000000000095B5                 db    5
.eh_frame_hdr:00000000000095B6                 db    0
.eh_frame_hdr:00000000000095B7                 db    0
.eh_frame_hdr:00000000000095B8                 db 0E4h
.eh_frame_hdr:00000000000095B9                 db  9Dh
.eh_frame_hdr:00000000000095BA                 db 0FFh
.eh_frame_hdr:00000000000095BB                 db 0FFh
.eh_frame_hdr:00000000000095BC                 db  7Ch ; |
.eh_frame_hdr:00000000000095BD                 db    5
.eh_frame_hdr:00000000000095BE                 db    0
.eh_frame_hdr:00000000000095BF                 db    0
.eh_frame_hdr:00000000000095C0                 db  94h
.eh_frame_hdr:00000000000095C1                 db  9Eh
.eh_frame_hdr:00000000000095C2                 db 0FFh
.eh_frame_hdr:00000000000095C3                 db 0FFh
.eh_frame_hdr:00000000000095C4                 db 0ACh
.eh_frame_hdr:00000000000095C5                 db    5
.eh_frame_hdr:00000000000095C6                 db    0
.eh_frame_hdr:00000000000095C7                 db    0
.eh_frame_hdr:00000000000095C8                 db 0E4h
.eh_frame_hdr:00000000000095C9                 db  9Eh
.eh_frame_hdr:00000000000095CA                 db 0FFh
.eh_frame_hdr:00000000000095CB                 db 0FFh
.eh_frame_hdr:00000000000095CC                 db 0C4h
.eh_frame_hdr:00000000000095CD                 db    5
.eh_frame_hdr:00000000000095CE                 db    0
.eh_frame_hdr:00000000000095CF                 db    0
.eh_frame_hdr:00000000000095D0                 db  84h
.eh_frame_hdr:00000000000095D1                 db  9Fh
.eh_frame_hdr:00000000000095D2                 db 0FFh
.eh_frame_hdr:00000000000095D3                 db 0FFh
.eh_frame_hdr:00000000000095D4                 db 0E4h
.eh_frame_hdr:00000000000095D5                 db    5
.eh_frame_hdr:00000000000095D6                 db    0
.eh_frame_hdr:00000000000095D7                 db    0
.eh_frame_hdr:00000000000095D8                 db  74h ; t
.eh_frame_hdr:00000000000095D9                 db 0A0h
.eh_frame_hdr:00000000000095DA                 db 0FFh
.eh_frame_hdr:00000000000095DB                 db 0FFh
.eh_frame_hdr:00000000000095DC                 db  28h ; (
.eh_frame_hdr:00000000000095DD                 db    6
.eh_frame_hdr:00000000000095DE                 db    0
.eh_frame_hdr:00000000000095DF                 db    0
.eh_frame_hdr:00000000000095E0                 db 0B4h
.eh_frame_hdr:00000000000095E1                 db 0B2h
.eh_frame_hdr:00000000000095E2                 db 0FFh
.eh_frame_hdr:00000000000095E3                 db 0FFh
.eh_frame_hdr:00000000000095E4                 db 0A0h
.eh_frame_hdr:00000000000095E5                 db    6
.eh_frame_hdr:00000000000095E6                 db    0
.eh_frame_hdr:00000000000095E7                 db    0
.eh_frame_hdr:00000000000095E8                 db  64h ; d
.eh_frame_hdr:00000000000095E9                 db 0B4h
.eh_frame_hdr:00000000000095EA                 db 0FFh
.eh_frame_hdr:00000000000095EB                 db 0FFh
.eh_frame_hdr:00000000000095EC                 db  0Ch
.eh_frame_hdr:00000000000095ED                 db    7
.eh_frame_hdr:00000000000095EE                 db    0
.eh_frame_hdr:00000000000095EF                 db    0
.eh_frame_hdr:00000000000095F0                 db 0A4h
.eh_frame_hdr:00000000000095F1                 db 0B4h
.eh_frame_hdr:00000000000095F2                 db 0FFh
.eh_frame_hdr:00000000000095F3                 db 0FFh
.eh_frame_hdr:00000000000095F4                 db  38h ; 8
.eh_frame_hdr:00000000000095F5                 db    7
.eh_frame_hdr:00000000000095F6                 db    0
.eh_frame_hdr:00000000000095F7                 db    0
.eh_frame_hdr:00000000000095F8                 db 0C4h
.eh_frame_hdr:00000000000095F9                 db 0B4h
.eh_frame_hdr:00000000000095FA                 db 0FFh
.eh_frame_hdr:00000000000095FB                 db 0FFh
.eh_frame_hdr:00000000000095FC                 db  4Ch ; L
.eh_frame_hdr:00000000000095FD                 db    7
.eh_frame_hdr:00000000000095FE                 db    0
.eh_frame_hdr:00000000000095FF                 db    0
.eh_frame_hdr:0000000000009600                 db 0E4h
.eh_frame_hdr:0000000000009601                 db 0B4h
.eh_frame_hdr:0000000000009602                 db 0FFh
.eh_frame_hdr:0000000000009603                 db 0FFh
.eh_frame_hdr:0000000000009604                 db  60h ; `
.eh_frame_hdr:0000000000009605                 db    7
.eh_frame_hdr:0000000000009606                 db    0
.eh_frame_hdr:0000000000009607                 db    0
.eh_frame_hdr:0000000000009608                 db  24h ; $
.eh_frame_hdr:0000000000009609                 db 0B5h
.eh_frame_hdr:000000000000960A                 db 0FFh
.eh_frame_hdr:000000000000960B                 db 0FFh
.eh_frame_hdr:000000000000960C                 db  74h ; t
.eh_frame_hdr:000000000000960D                 db    7
.eh_frame_hdr:000000000000960E                 db    0
.eh_frame_hdr:000000000000960F                 db    0
.eh_frame_hdr:0000000000009610                 db  44h ; D
.eh_frame_hdr:0000000000009611                 db 0B5h
.eh_frame_hdr:0000000000009612                 db 0FFh
.eh_frame_hdr:0000000000009613                 db 0FFh
.eh_frame_hdr:0000000000009614                 db  88h
.eh_frame_hdr:0000000000009615                 db    7
.eh_frame_hdr:0000000000009616                 db    0
.eh_frame_hdr:0000000000009617                 db    0
.eh_frame_hdr:0000000000009618                 db  74h ; t
.eh_frame_hdr:0000000000009619                 db 0B5h
.eh_frame_hdr:000000000000961A                 db 0FFh
.eh_frame_hdr:000000000000961B                 db 0FFh
.eh_frame_hdr:000000000000961C                 db  9Ch
.eh_frame_hdr:000000000000961D                 db    7
.eh_frame_hdr:000000000000961E                 db    0
.eh_frame_hdr:000000000000961F                 db    0
.eh_frame_hdr:0000000000009620                 db 0F4h
.eh_frame_hdr:0000000000009621                 db 0B5h
.eh_frame_hdr:0000000000009622                 db 0FFh
.eh_frame_hdr:0000000000009623                 db 0FFh
.eh_frame_hdr:0000000000009624                 db 0F0h
.eh_frame_hdr:0000000000009625                 db    7
.eh_frame_hdr:0000000000009626                 db    0
.eh_frame_hdr:0000000000009627                 db    0
.eh_frame_hdr:0000000000009628                 db 0E4h
.eh_frame_hdr:0000000000009629                 db 0B6h
.eh_frame_hdr:000000000000962A                 db 0FFh
.eh_frame_hdr:000000000000962B                 db 0FFh
.eh_frame_hdr:000000000000962C                 db  5Ch ; \
.eh_frame_hdr:000000000000962D                 db    8
.eh_frame_hdr:000000000000962E                 db    0
.eh_frame_hdr:000000000000962F                 db    0
.eh_frame_hdr:0000000000009630                 db 0F4h
.eh_frame_hdr:0000000000009631                 db 0B6h
.eh_frame_hdr:0000000000009632                 db 0FFh
.eh_frame_hdr:0000000000009633                 db 0FFh
.eh_frame_hdr:0000000000009634                 db  70h ; p
.eh_frame_hdr:0000000000009635                 db    8
.eh_frame_hdr:0000000000009636                 db    0
.eh_frame_hdr:0000000000009637                 db    0
.eh_frame_hdr:0000000000009638                 db  94h
.eh_frame_hdr:0000000000009639                 db 0B7h
.eh_frame_hdr:000000000000963A                 db 0FFh
.eh_frame_hdr:000000000000963B                 db 0FFh
.eh_frame_hdr:000000000000963C                 db  9Ch
.eh_frame_hdr:000000000000963D                 db    8
.eh_frame_hdr:000000000000963E                 db    0
.eh_frame_hdr:000000000000963F                 db    0
.eh_frame_hdr:0000000000009640                 db 0B4h
.eh_frame_hdr:0000000000009641                 db 0B7h
.eh_frame_hdr:0000000000009642                 db 0FFh
.eh_frame_hdr:0000000000009643                 db 0FFh
.eh_frame_hdr:0000000000009644                 db 0B0h
.eh_frame_hdr:0000000000009645                 db    8
.eh_frame_hdr:0000000000009646                 db    0
.eh_frame_hdr:0000000000009647                 db    0
.eh_frame_hdr:0000000000009648                 db 0C4h
.eh_frame_hdr:0000000000009649                 db 0B7h
.eh_frame_hdr:000000000000964A                 db 0FFh
.eh_frame_hdr:000000000000964B                 db 0FFh
.eh_frame_hdr:000000000000964C                 db 0C4h
.eh_frame_hdr:000000000000964D                 db    8
.eh_frame_hdr:000000000000964E                 db    0
.eh_frame_hdr:000000000000964F                 db    0
.eh_frame_hdr:0000000000009650                 db 0E4h
.eh_frame_hdr:0000000000009651                 db 0B7h
.eh_frame_hdr:0000000000009652                 db 0FFh
.eh_frame_hdr:0000000000009653                 db 0FFh
.eh_frame_hdr:0000000000009654                 db 0D8h
.eh_frame_hdr:0000000000009655                 db    8
.eh_frame_hdr:0000000000009656                 db    0
.eh_frame_hdr:0000000000009657                 db    0
.eh_frame_hdr:0000000000009658                 db    4
.eh_frame_hdr:0000000000009659                 db 0B8h
.eh_frame_hdr:000000000000965A                 db 0FFh
.eh_frame_hdr:000000000000965B                 db 0FFh
.eh_frame_hdr:000000000000965C                 db 0ECh
.eh_frame_hdr:000000000000965D                 db    8
.eh_frame_hdr:000000000000965E                 db    0
.eh_frame_hdr:000000000000965F                 db    0
.eh_frame_hdr:0000000000009660                 db  94h
.eh_frame_hdr:0000000000009661                 db 0B8h
.eh_frame_hdr:0000000000009662                 db 0FFh
.eh_frame_hdr:0000000000009663                 db 0FFh
.eh_frame_hdr:0000000000009664                 db    8
.eh_frame_hdr:0000000000009665                 db    9
.eh_frame_hdr:0000000000009666                 db    0
.eh_frame_hdr:0000000000009667                 db    0
.eh_frame_hdr:0000000000009668                 db  24h ; $
.eh_frame_hdr:0000000000009669                 db 0B9h
.eh_frame_hdr:000000000000966A                 db 0FFh
.eh_frame_hdr:000000000000966B                 db 0FFh
.eh_frame_hdr:000000000000966C                 db  24h ; $
.eh_frame_hdr:000000000000966D                 db    9
.eh_frame_hdr:000000000000966E                 db    0
.eh_frame_hdr:000000000000966F                 db    0
.eh_frame_hdr:0000000000009670                 db  34h ; 4
.eh_frame_hdr:0000000000009671                 db 0B9h
.eh_frame_hdr:0000000000009672                 db 0FFh
.eh_frame_hdr:0000000000009673                 db 0FFh
.eh_frame_hdr:0000000000009674                 db  38h ; 8
.eh_frame_hdr:0000000000009675                 db    9
.eh_frame_hdr:0000000000009676                 db    0
.eh_frame_hdr:0000000000009677                 db    0
.eh_frame_hdr:0000000000009678                 db  44h ; D
.eh_frame_hdr:0000000000009679                 db 0B9h
.eh_frame_hdr:000000000000967A                 db 0FFh
.eh_frame_hdr:000000000000967B                 db 0FFh
.eh_frame_hdr:000000000000967C                 db  4Ch ; L
.eh_frame_hdr:000000000000967D                 db    9
.eh_frame_hdr:000000000000967E                 db    0
.eh_frame_hdr:000000000000967F                 db    0
.eh_frame_hdr:0000000000009680                 db 0E4h
.eh_frame_hdr:0000000000009681                 db 0B9h
.eh_frame_hdr:0000000000009682                 db 0FFh
.eh_frame_hdr:0000000000009683                 db 0FFh
.eh_frame_hdr:0000000000009684                 db  68h ; h
.eh_frame_hdr:0000000000009685                 db    9
.eh_frame_hdr:0000000000009686                 db    0
.eh_frame_hdr:0000000000009687                 db    0
.eh_frame_hdr:0000000000009688                 db 0F4h
.eh_frame_hdr:0000000000009689                 db 0B9h
.eh_frame_hdr:000000000000968A                 db 0FFh
.eh_frame_hdr:000000000000968B                 db 0FFh
.eh_frame_hdr:000000000000968C                 db  7Ch ; |
.eh_frame_hdr:000000000000968D                 db    9
.eh_frame_hdr:000000000000968E                 db    0
.eh_frame_hdr:000000000000968F                 db    0
.eh_frame_hdr:0000000000009690                 db  14h
.eh_frame_hdr:0000000000009691                 db 0BAh
.eh_frame_hdr:0000000000009692                 db 0FFh
.eh_frame_hdr:0000000000009693                 db 0FFh
.eh_frame_hdr:0000000000009694                 db  90h
.eh_frame_hdr:0000000000009695                 db    9
.eh_frame_hdr:0000000000009696                 db    0
.eh_frame_hdr:0000000000009697                 db    0
.eh_frame_hdr:0000000000009698                 db  24h ; $
.eh_frame_hdr:0000000000009699                 db 0BAh
.eh_frame_hdr:000000000000969A                 db 0FFh
.eh_frame_hdr:000000000000969B                 db 0FFh
.eh_frame_hdr:000000000000969C                 db 0A4h
.eh_frame_hdr:000000000000969D                 db    9
.eh_frame_hdr:000000000000969E                 db    0
.eh_frame_hdr:000000000000969F                 db    0
.eh_frame_hdr:00000000000096A0                 db 0B4h
.eh_frame_hdr:00000000000096A1                 db 0BAh
.eh_frame_hdr:00000000000096A2                 db 0FFh
.eh_frame_hdr:00000000000096A3                 db 0FFh
.eh_frame_hdr:00000000000096A4                 db 0C0h
.eh_frame_hdr:00000000000096A5                 db    9
.eh_frame_hdr:00000000000096A6                 db    0
.eh_frame_hdr:00000000000096A7                 db    0
.eh_frame_hdr:00000000000096A8                 db  54h ; T
.eh_frame_hdr:00000000000096A9                 db 0BBh
.eh_frame_hdr:00000000000096AA                 db 0FFh
.eh_frame_hdr:00000000000096AB                 db 0FFh
.eh_frame_hdr:00000000000096AC                 db 0DCh
.eh_frame_hdr:00000000000096AD                 db    9
.eh_frame_hdr:00000000000096AE                 db    0
.eh_frame_hdr:00000000000096AF                 db    0
.eh_frame_hdr:00000000000096B0                 db  64h ; d
.eh_frame_hdr:00000000000096B1                 db 0BBh
.eh_frame_hdr:00000000000096B2                 db 0FFh
.eh_frame_hdr:00000000000096B3                 db 0FFh
.eh_frame_hdr:00000000000096B4                 db 0F0h
.eh_frame_hdr:00000000000096B5                 db    9
.eh_frame_hdr:00000000000096B6                 db    0
.eh_frame_hdr:00000000000096B7                 db    0
.eh_frame_hdr:00000000000096B8                 db  84h
.eh_frame_hdr:00000000000096B9                 db 0BBh
.eh_frame_hdr:00000000000096BA                 db 0FFh
.eh_frame_hdr:00000000000096BB                 db 0FFh
.eh_frame_hdr:00000000000096BC                 db    4
.eh_frame_hdr:00000000000096BD                 db  0Ah
.eh_frame_hdr:00000000000096BE                 db    0
.eh_frame_hdr:00000000000096BF                 db    0
.eh_frame_hdr:00000000000096C0                 db 0A4h
.eh_frame_hdr:00000000000096C1                 db 0BBh
.eh_frame_hdr:00000000000096C2                 db 0FFh
.eh_frame_hdr:00000000000096C3                 db 0FFh
.eh_frame_hdr:00000000000096C4                 db  18h
.eh_frame_hdr:00000000000096C5                 db  0Ah
.eh_frame_hdr:00000000000096C6                 db    0
.eh_frame_hdr:00000000000096C7                 db    0
.eh_frame_hdr:00000000000096C8                 db 0B4h
.eh_frame_hdr:00000000000096C9                 db 0BBh
.eh_frame_hdr:00000000000096CA                 db 0FFh
.eh_frame_hdr:00000000000096CB                 db 0FFh
.eh_frame_hdr:00000000000096CC                 db  2Ch ; ,
.eh_frame_hdr:00000000000096CD                 db  0Ah
.eh_frame_hdr:00000000000096CE                 db    0
.eh_frame_hdr:00000000000096CF                 db    0
.eh_frame_hdr:00000000000096D0                 db 0D4h
.eh_frame_hdr:00000000000096D1                 db 0BBh
.eh_frame_hdr:00000000000096D2                 db 0FFh
.eh_frame_hdr:00000000000096D3                 db 0FFh
.eh_frame_hdr:00000000000096D4                 db  40h ; @
.eh_frame_hdr:00000000000096D5                 db  0Ah
.eh_frame_hdr:00000000000096D6                 db    0
.eh_frame_hdr:00000000000096D7                 db    0
.eh_frame_hdr:00000000000096D8                 db 0F4h
.eh_frame_hdr:00000000000096D9                 db 0BBh
.eh_frame_hdr:00000000000096DA                 db 0FFh
.eh_frame_hdr:00000000000096DB                 db 0FFh
.eh_frame_hdr:00000000000096DC                 db  54h ; T
.eh_frame_hdr:00000000000096DD                 db  0Ah
.eh_frame_hdr:00000000000096DE                 db    0
.eh_frame_hdr:00000000000096DF                 db    0
.eh_frame_hdr:00000000000096E0                 db  14h
.eh_frame_hdr:00000000000096E1                 db 0BCh
.eh_frame_hdr:00000000000096E2                 db 0FFh
.eh_frame_hdr:00000000000096E3                 db 0FFh
.eh_frame_hdr:00000000000096E4                 db  6Ch ; l
.eh_frame_hdr:00000000000096E5                 db  0Ah
.eh_frame_hdr:00000000000096E6                 db    0
.eh_frame_hdr:00000000000096E7                 db    0
.eh_frame_hdr:00000000000096E8                 db 0C4h
.eh_frame_hdr:00000000000096E9                 db 0BEh
.eh_frame_hdr:00000000000096EA                 db 0FFh
.eh_frame_hdr:00000000000096EB                 db 0FFh
.eh_frame_hdr:00000000000096EC                 db  84h
.eh_frame_hdr:00000000000096ED                 db  0Ah
.eh_frame_hdr:00000000000096EE                 db    0
.eh_frame_hdr:00000000000096EF                 db    0
.eh_frame_hdr:00000000000096F0                 db  84h
.eh_frame_hdr:00000000000096F1                 db 0BFh
.eh_frame_hdr:00000000000096F2                 db 0FFh
.eh_frame_hdr:00000000000096F3                 db 0FFh
.eh_frame_hdr:00000000000096F4                 db 0D4h
.eh_frame_hdr:00000000000096F5                 db  0Ah
.eh_frame_hdr:00000000000096F6                 db    0
.eh_frame_hdr:00000000000096F7                 db    0
.eh_frame_hdr:00000000000096F8                 db  94h
.eh_frame_hdr:00000000000096F9                 db 0BFh
.eh_frame_hdr:00000000000096FA                 db 0FFh
.eh_frame_hdr:00000000000096FB                 db 0FFh
.eh_frame_hdr:00000000000096FC                 db 0ECh
.eh_frame_hdr:00000000000096FD                 db  0Ah
.eh_frame_hdr:00000000000096FE                 db    0
.eh_frame_hdr:00000000000096FF                 db    0
.eh_frame_hdr:0000000000009700                 db 0B4h
.eh_frame_hdr:0000000000009701                 db 0BFh
.eh_frame_hdr:0000000000009702                 db 0FFh
.eh_frame_hdr:0000000000009703                 db 0FFh
.eh_frame_hdr:0000000000009704                 db    8
.eh_frame_hdr:0000000000009705                 db  0Bh
.eh_frame_hdr:0000000000009706                 db    0
.eh_frame_hdr:0000000000009707                 db    0
.eh_frame_hdr:0000000000009708                 db 0E4h
.eh_frame_hdr:0000000000009709                 db 0BFh
.eh_frame_hdr:000000000000970A                 db 0FFh
.eh_frame_hdr:000000000000970B                 db 0FFh
.eh_frame_hdr:000000000000970C                 db  1Ch
.eh_frame_hdr:000000000000970D                 db  0Bh
.eh_frame_hdr:000000000000970E                 db    0
.eh_frame_hdr:000000000000970F                 db    0
.eh_frame_hdr:0000000000009710                 db 0F4h
.eh_frame_hdr:0000000000009711                 db 0BFh
.eh_frame_hdr:0000000000009712                 db 0FFh
.eh_frame_hdr:0000000000009713                 db 0FFh
.eh_frame_hdr:0000000000009714                 db  30h ; 0
.eh_frame_hdr:0000000000009715                 db  0Bh
.eh_frame_hdr:0000000000009716                 db    0
.eh_frame_hdr:0000000000009717                 db    0
.eh_frame_hdr:0000000000009718                 db  34h ; 4
.eh_frame_hdr:0000000000009719                 db 0C0h
.eh_frame_hdr:000000000000971A                 db 0FFh
.eh_frame_hdr:000000000000971B                 db 0FFh
.eh_frame_hdr:000000000000971C                 db  54h ; T
.eh_frame_hdr:000000000000971D                 db  0Bh
.eh_frame_hdr:000000000000971E                 db    0
.eh_frame_hdr:000000000000971F                 db    0
.eh_frame_hdr:0000000000009720                 db  64h ; d
.eh_frame_hdr:0000000000009721                 db 0C0h
.eh_frame_hdr:0000000000009722                 db 0FFh
.eh_frame_hdr:0000000000009723                 db 0FFh
.eh_frame_hdr:0000000000009724                 db  68h ; h
.eh_frame_hdr:0000000000009725                 db  0Bh
.eh_frame_hdr:0000000000009726                 db    0
.eh_frame_hdr:0000000000009727                 db    0
.eh_frame_hdr:0000000000009728                 db 0F4h
.eh_frame_hdr:0000000000009729                 db 0C0h
.eh_frame_hdr:000000000000972A                 db 0FFh
.eh_frame_hdr:000000000000972B                 db 0FFh
.eh_frame_hdr:000000000000972C                 db  80h
.eh_frame_hdr:000000000000972D                 db  0Bh
.eh_frame_hdr:000000000000972E                 db    0
.eh_frame_hdr:000000000000972F                 db    0
.eh_frame_hdr:0000000000009730                 db  44h ; D
.eh_frame_hdr:0000000000009731                 db 0C1h
.eh_frame_hdr:0000000000009732                 db 0FFh
.eh_frame_hdr:0000000000009733                 db 0FFh
.eh_frame_hdr:0000000000009734                 db  98h
.eh_frame_hdr:0000000000009735                 db  0Bh
.eh_frame_hdr:0000000000009736                 db    0
.eh_frame_hdr:0000000000009737                 db    0
.eh_frame_hdr:0000000000009738                 db  64h ; d
.eh_frame_hdr:0000000000009739                 db 0C1h
.eh_frame_hdr:000000000000973A                 db 0FFh
.eh_frame_hdr:000000000000973B                 db 0FFh
.eh_frame_hdr:000000000000973C                 db 0B4h
.eh_frame_hdr:000000000000973D                 db  0Bh
.eh_frame_hdr:000000000000973E                 db    0
.eh_frame_hdr:000000000000973F                 db    0
.eh_frame_hdr:0000000000009740                 db  94h
.eh_frame_hdr:0000000000009741                 db 0C1h
.eh_frame_hdr:0000000000009742                 db 0FFh
.eh_frame_hdr:0000000000009743                 db 0FFh
.eh_frame_hdr:0000000000009744                 db 0D0h
.eh_frame_hdr:0000000000009745                 db  0Bh
.eh_frame_hdr:0000000000009746                 db    0
.eh_frame_hdr:0000000000009747                 db    0
.eh_frame_hdr:0000000000009748                 db 0C4h
.eh_frame_hdr:0000000000009749                 db 0C1h
.eh_frame_hdr:000000000000974A                 db 0FFh
.eh_frame_hdr:000000000000974B                 db 0FFh
.eh_frame_hdr:000000000000974C                 db 0F8h
.eh_frame_hdr:000000000000974D                 db  0Bh
.eh_frame_hdr:000000000000974E                 db    0
.eh_frame_hdr:000000000000974F                 db    0
.eh_frame_hdr:0000000000009750                 db 0E4h
.eh_frame_hdr:0000000000009751                 db 0C1h
.eh_frame_hdr:0000000000009752                 db 0FFh
.eh_frame_hdr:0000000000009753                 db 0FFh
.eh_frame_hdr:0000000000009754                 db  14h
.eh_frame_hdr:0000000000009755                 db  0Ch
.eh_frame_hdr:0000000000009756                 db    0
.eh_frame_hdr:0000000000009757                 db    0
.eh_frame_hdr:0000000000009758                 db  24h ; $
.eh_frame_hdr:0000000000009759                 db 0C2h
.eh_frame_hdr:000000000000975A                 db 0FFh
.eh_frame_hdr:000000000000975B                 db 0FFh
.eh_frame_hdr:000000000000975C                 db  2Ch ; ,
.eh_frame_hdr:000000000000975D                 db  0Ch
.eh_frame_hdr:000000000000975E                 db    0
.eh_frame_hdr:000000000000975F                 db    0
.eh_frame_hdr:0000000000009760                 db  74h ; t
.eh_frame_hdr:0000000000009761                 db 0C3h
.eh_frame_hdr:0000000000009762                 db 0FFh
.eh_frame_hdr:0000000000009763                 db 0FFh
.eh_frame_hdr:0000000000009764                 db  78h ; x
.eh_frame_hdr:0000000000009765                 db  0Ch
.eh_frame_hdr:0000000000009766                 db    0
.eh_frame_hdr:0000000000009767                 db    0
.eh_frame_hdr:0000000000009768                 db  24h ; $
.eh_frame_hdr:0000000000009769                 db 0C4h
.eh_frame_hdr:000000000000976A                 db 0FFh
.eh_frame_hdr:000000000000976B                 db 0FFh
.eh_frame_hdr:000000000000976C                 db  94h
.eh_frame_hdr:000000000000976D                 db  0Ch
.eh_frame_hdr:000000000000976E                 db    0
.eh_frame_hdr:000000000000976F                 db    0
.eh_frame_hdr:0000000000009770                 db 0B4h
.eh_frame_hdr:0000000000009771                 db 0C4h
.eh_frame_hdr:0000000000009772                 db 0FFh
.eh_frame_hdr:0000000000009773                 db 0FFh
.eh_frame_hdr:0000000000009774                 db 0D4h
.eh_frame_hdr:0000000000009775                 db  0Ch
.eh_frame_hdr:0000000000009776                 db    0
.eh_frame_hdr:0000000000009777                 db    0
.eh_frame_hdr:0000000000009778                 db  34h ; 4
.eh_frame_hdr:0000000000009779                 db 0C5h
.eh_frame_hdr:000000000000977A                 db 0FFh
.eh_frame_hdr:000000000000977B                 db 0FFh
.eh_frame_hdr:000000000000977C                 db 0FCh
.eh_frame_hdr:000000000000977D                 db  0Ch
.eh_frame_hdr:000000000000977E                 db    0
.eh_frame_hdr:000000000000977F                 db    0
.eh_frame_hdr:0000000000009780                 db 0B4h
.eh_frame_hdr:0000000000009781                 db 0C5h
.eh_frame_hdr:0000000000009782                 db 0FFh
.eh_frame_hdr:0000000000009783                 db 0FFh
.eh_frame_hdr:0000000000009784                 db  4Ch ; L
.eh_frame_hdr:0000000000009785                 db  0Dh
.eh_frame_hdr:0000000000009786                 db    0
.eh_frame_hdr:0000000000009787                 db    0
.eh_frame_hdr:0000000000009788                 db  14h
.eh_frame_hdr:0000000000009789                 db 0C6h
.eh_frame_hdr:000000000000978A                 db 0FFh
.eh_frame_hdr:000000000000978B                 db 0FFh
.eh_frame_hdr:000000000000978C                 db  6Ch ; l
.eh_frame_hdr:000000000000978D                 db  0Dh
.eh_frame_hdr:000000000000978E                 db    0
.eh_frame_hdr:000000000000978F                 db    0
.eh_frame_hdr:0000000000009790                 db  54h ; T
.eh_frame_hdr:0000000000009791                 db 0C6h
.eh_frame_hdr:0000000000009792                 db 0FFh
.eh_frame_hdr:0000000000009793                 db 0FFh
.eh_frame_hdr:0000000000009794                 db  8Ch
.eh_frame_hdr:0000000000009795                 db  0Dh
.eh_frame_hdr:0000000000009796                 db    0
.eh_frame_hdr:0000000000009797                 db    0
.eh_frame_hdr:0000000000009798                 db 0D4h
.eh_frame_hdr:0000000000009799                 db 0C6h
.eh_frame_hdr:000000000000979A                 db 0FFh
.eh_frame_hdr:000000000000979B                 db 0FFh
.eh_frame_hdr:000000000000979C                 db 0C4h
.eh_frame_hdr:000000000000979D                 db  0Dh
.eh_frame_hdr:000000000000979E                 db    0
.eh_frame_hdr:000000000000979F                 db    0
.eh_frame_hdr:00000000000097A0                 db  14h
.eh_frame_hdr:00000000000097A1                 db 0C7h
.eh_frame_hdr:00000000000097A2                 db 0FFh
.eh_frame_hdr:00000000000097A3                 db 0FFh
.eh_frame_hdr:00000000000097A4                 db 0E4h
.eh_frame_hdr:00000000000097A5                 db  0Dh
.eh_frame_hdr:00000000000097A6                 db    0
.eh_frame_hdr:00000000000097A7                 db    0
.eh_frame_hdr:00000000000097A8                 db  74h ; t
.eh_frame_hdr:00000000000097A9                 db 0C7h
.eh_frame_hdr:00000000000097AA                 db 0FFh
.eh_frame_hdr:00000000000097AB                 db 0FFh
.eh_frame_hdr:00000000000097AC                 db  14h
.eh_frame_hdr:00000000000097AD                 db  0Eh
.eh_frame_hdr:00000000000097AE                 db    0
.eh_frame_hdr:00000000000097AF                 db    0
.eh_frame_hdr:00000000000097B0                 db  94h
.eh_frame_hdr:00000000000097B1                 db 0D8h
.eh_frame_hdr:00000000000097B2                 db 0FFh
.eh_frame_hdr:00000000000097B3                 db 0FFh
.eh_frame_hdr:00000000000097B4                 db  44h ; D
.eh_frame_hdr:00000000000097B5                 db  0Eh
.eh_frame_hdr:00000000000097B6                 db    0
.eh_frame_hdr:00000000000097B7                 db    0
.eh_frame_hdr:00000000000097B8                 db  94h
.eh_frame_hdr:00000000000097B9                 db 0DAh
.eh_frame_hdr:00000000000097BA                 db 0FFh
.eh_frame_hdr:00000000000097BB                 db 0FFh
.eh_frame_hdr:00000000000097BC                 db  5Ch ; \
.eh_frame_hdr:00000000000097BD                 db  0Eh
.eh_frame_hdr:00000000000097BE                 db    0
.eh_frame_hdr:00000000000097BF                 db    0
.eh_frame_hdr:00000000000097C0                 db  84h
.eh_frame_hdr:00000000000097C1                 db 0E7h
.eh_frame_hdr:00000000000097C2                 db 0FFh
.eh_frame_hdr:00000000000097C3                 db 0FFh
.eh_frame_hdr:00000000000097C4                 db 0ACh
.eh_frame_hdr:00000000000097C5                 db  0Eh
.eh_frame_hdr:00000000000097C6                 db    0
.eh_frame_hdr:00000000000097C7                 db    0
.eh_frame_hdr:00000000000097C8                 db 0F4h
.eh_frame_hdr:00000000000097C9                 db 0E7h
.eh_frame_hdr:00000000000097CA                 db 0FFh
.eh_frame_hdr:00000000000097CB                 db 0FFh
.eh_frame_hdr:00000000000097CC                 db 0F4h
.eh_frame_hdr:00000000000097CD                 db  0Eh
.eh_frame_hdr:00000000000097CE                 db    0
.eh_frame_hdr:00000000000097CF                 db    0
.eh_frame_hdr:00000000000097D0                 db    4
.eh_frame_hdr:00000000000097D1                 db 0E8h
.eh_frame_hdr:00000000000097D2                 db 0FFh
.eh_frame_hdr:00000000000097D3                 db 0FFh
.eh_frame_hdr:00000000000097D4                 db  0Ch
.eh_frame_hdr:00000000000097D5                 db  0Fh
.eh_frame_hdr:00000000000097D6                 db    0
.eh_frame_hdr:00000000000097D7                 db    0
.eh_frame_hdr:00000000000097D7 _eh_frame_hdr   ends
.eh_frame_hdr:00000000000097D7
.eh_frame:00000000000097D8 ; ===========================================================================
.eh_frame:00000000000097D8
.eh_frame:00000000000097D8 ; Segment type: Pure data
.eh_frame:00000000000097D8 ; Segment permissions: Read
.eh_frame:00000000000097D8 _eh_frame       segment qword public 'CONST' use64
.eh_frame:00000000000097D8                 assume cs:_eh_frame
.eh_frame:00000000000097D8                 ;org 97D8h
.eh_frame:00000000000097D8                 db  14h
.eh_frame:00000000000097D9                 db    0
.eh_frame:00000000000097DA                 db    0
.eh_frame:00000000000097DB                 db    0
.eh_frame:00000000000097DC                 db    0
.eh_frame:00000000000097DD                 db    0
.eh_frame:00000000000097DE                 db    0
.eh_frame:00000000000097DF                 db    0
.eh_frame:00000000000097E0                 db    1
.eh_frame:00000000000097E1                 db  7Ah ; z
.eh_frame:00000000000097E2                 db  52h ; R
.eh_frame:00000000000097E3                 db    0
.eh_frame:00000000000097E4                 db    1
.eh_frame:00000000000097E5                 db  78h ; x
.eh_frame:00000000000097E6                 db  10h
.eh_frame:00000000000097E7                 db    1
.eh_frame:00000000000097E8                 db  1Bh
.eh_frame:00000000000097E9                 db  0Ch
.eh_frame:00000000000097EA                 db    7
.eh_frame:00000000000097EB                 db    8
.eh_frame:00000000000097EC                 db  90h
.eh_frame:00000000000097ED                 db    1
.eh_frame:00000000000097EE                 db    7
.eh_frame:00000000000097EF                 db  10h
.eh_frame:00000000000097F0                 db  14h
.eh_frame:00000000000097F1                 db    0
.eh_frame:00000000000097F2                 db    0
.eh_frame:00000000000097F3                 db    0
.eh_frame:00000000000097F4                 db  1Ch
.eh_frame:00000000000097F5                 db    0
.eh_frame:00000000000097F6                 db    0
.eh_frame:00000000000097F7                 db    0
.eh_frame:00000000000097F8                 db 0F8h
.eh_frame:00000000000097F9                 db  7Eh ; ~
.eh_frame:00000000000097FA                 db 0FFh
.eh_frame:00000000000097FB                 db 0FFh
.eh_frame:00000000000097FC                 db  2Bh ; +
.eh_frame:00000000000097FD                 db    0
.eh_frame:00000000000097FE                 db    0
.eh_frame:00000000000097FF                 db    0
.eh_frame:0000000000009800                 db    0
.eh_frame:0000000000009801                 db    0
.eh_frame:0000000000009802                 db    0
.eh_frame:0000000000009803                 db    0
.eh_frame:0000000000009804                 db    0
.eh_frame:0000000000009805                 db    0
.eh_frame:0000000000009806                 db    0
.eh_frame:0000000000009807                 db    0
.eh_frame:0000000000009808                 db  14h
.eh_frame:0000000000009809                 db    0
.eh_frame:000000000000980A                 db    0
.eh_frame:000000000000980B                 db    0
.eh_frame:000000000000980C                 db    0
.eh_frame:000000000000980D                 db    0
.eh_frame:000000000000980E                 db    0
.eh_frame:000000000000980F                 db    0
.eh_frame:0000000000009810                 db    1
.eh_frame:0000000000009811                 db  7Ah ; z
.eh_frame:0000000000009812                 db  52h ; R
.eh_frame:0000000000009813                 db    0
.eh_frame:0000000000009814                 db    1
.eh_frame:0000000000009815                 db  78h ; x
.eh_frame:0000000000009816                 db  10h
.eh_frame:0000000000009817                 db    1
.eh_frame:0000000000009818                 db  1Bh
.eh_frame:0000000000009819                 db  0Ch
.eh_frame:000000000000981A                 db    7
.eh_frame:000000000000981B                 db    8
.eh_frame:000000000000981C                 db  90h
.eh_frame:000000000000981D                 db    1
.eh_frame:000000000000981E                 db    0
.eh_frame:000000000000981F                 db    0
.eh_frame:0000000000009820                 db  24h ; $
.eh_frame:0000000000009821                 db    0
.eh_frame:0000000000009822                 db    0
.eh_frame:0000000000009823                 db    0
.eh_frame:0000000000009824                 db  1Ch
.eh_frame:0000000000009825                 db    0
.eh_frame:0000000000009826                 db    0
.eh_frame:0000000000009827                 db    0
.eh_frame:0000000000009828                 db 0C8h
.eh_frame:0000000000009829                 db  7Ah ; z
.eh_frame:000000000000982A                 db 0FFh
.eh_frame:000000000000982B                 db 0FFh
.eh_frame:000000000000982C                 db  10h
.eh_frame:000000000000982D                 db    3
.eh_frame:000000000000982E                 db    0
.eh_frame:000000000000982F                 db    0
.eh_frame:0000000000009830                 db    0
.eh_frame:0000000000009831                 db  0Eh
.eh_frame:0000000000009832                 db  10h
.eh_frame:0000000000009833                 db  46h ; F
.eh_frame:0000000000009834                 db  0Eh
.eh_frame:0000000000009835                 db  18h
.eh_frame:0000000000009836                 db  4Ah ; J
.eh_frame:0000000000009837                 db  0Fh
.eh_frame:0000000000009838                 db  0Bh
.eh_frame:0000000000009839                 db  77h ; w
.eh_frame:000000000000983A                 db    8
.eh_frame:000000000000983B                 db  80h
.eh_frame:000000000000983C                 db    0
.eh_frame:000000000000983D                 db  3Fh ; ?
.eh_frame:000000000000983E                 db  1Ah
.eh_frame:000000000000983F                 db  3Bh ; ;
.eh_frame:0000000000009840                 db  2Ah ; *
.eh_frame:0000000000009841                 db  33h ; 3
.eh_frame:0000000000009842                 db  24h ; $
.eh_frame:0000000000009843                 db  22h ; "
.eh_frame:0000000000009844                 db    0
.eh_frame:0000000000009845                 db    0
.eh_frame:0000000000009846                 db    0
.eh_frame:0000000000009847                 db    0
.eh_frame:0000000000009848                 db  14h
.eh_frame:0000000000009849                 db    0
.eh_frame:000000000000984A                 db    0
.eh_frame:000000000000984B                 db    0
.eh_frame:000000000000984C                 db  44h ; D
.eh_frame:000000000000984D                 db    0
.eh_frame:000000000000984E                 db    0
.eh_frame:000000000000984F                 db    0
.eh_frame:0000000000009850                 db 0B0h
.eh_frame:0000000000009851                 db  7Dh ; }
.eh_frame:0000000000009852                 db 0FFh
.eh_frame:0000000000009853                 db 0FFh
.eh_frame:0000000000009854                 db    8
.eh_frame:0000000000009855                 db    0
.eh_frame:0000000000009856                 db    0
.eh_frame:0000000000009857                 db    0
.eh_frame:0000000000009858                 db    0
.eh_frame:0000000000009859                 db    0
.eh_frame:000000000000985A                 db    0
.eh_frame:000000000000985B                 db    0
.eh_frame:000000000000985C                 db    0
.eh_frame:000000000000985D                 db    0
.eh_frame:000000000000985E                 db    0
.eh_frame:000000000000985F                 db    0
.eh_frame:0000000000009860                 db  10h
.eh_frame:0000000000009861                 db    0
.eh_frame:0000000000009862                 db    0
.eh_frame:0000000000009863                 db    0
.eh_frame:0000000000009864                 db  5Ch ; \
.eh_frame:0000000000009865                 db    0
.eh_frame:0000000000009866                 db    0
.eh_frame:0000000000009867                 db    0
.eh_frame:0000000000009868                 db  98h
.eh_frame:0000000000009869                 db  7Fh ; 
.eh_frame:000000000000986A                 db 0FFh
.eh_frame:000000000000986B                 db 0FFh
.eh_frame:000000000000986C                 db  6Ah ; j
.eh_frame:000000000000986D                 db    1
.eh_frame:000000000000986E                 db    0
.eh_frame:000000000000986F                 db    0
.eh_frame:0000000000009870                 db    0
.eh_frame:0000000000009871                 db    0
.eh_frame:0000000000009872                 db    0
.eh_frame:0000000000009873                 db    0
.eh_frame:0000000000009874                 db  14h
.eh_frame:0000000000009875                 db    0
.eh_frame:0000000000009876                 db    0
.eh_frame:0000000000009877                 db    0
.eh_frame:0000000000009878                 db  70h ; p
.eh_frame:0000000000009879                 db    0
.eh_frame:000000000000987A                 db    0
.eh_frame:000000000000987B                 db    0
.eh_frame:000000000000987C                 db 0F4h
.eh_frame:000000000000987D                 db  80h
.eh_frame:000000000000987E                 db 0FFh
.eh_frame:000000000000987F                 db 0FFh
.eh_frame:0000000000009880                 db 0AAh
.eh_frame:0000000000009881                 db    0
.eh_frame:0000000000009882                 db    0
.eh_frame:0000000000009883                 db    0
.eh_frame:0000000000009884                 db    0
.eh_frame:0000000000009885                 db  47h ; G
.eh_frame:0000000000009886                 db  0Eh
.eh_frame:0000000000009887                 db 0E0h
.eh_frame:0000000000009888                 db    1
.eh_frame:0000000000009889                 db    0
.eh_frame:000000000000988A                 db    0
.eh_frame:000000000000988B                 db    0
.eh_frame:000000000000988C                 db  1Ch
.eh_frame:000000000000988D                 db    0
.eh_frame:000000000000988E                 db    0
.eh_frame:000000000000988F                 db    0
.eh_frame:0000000000009890                 db  88h
.eh_frame:0000000000009891                 db    0
.eh_frame:0000000000009892                 db    0
.eh_frame:0000000000009893                 db    0
.eh_frame:0000000000009894                 db  8Ch
.eh_frame:0000000000009895                 db  81h
.eh_frame:0000000000009896                 db 0FFh
.eh_frame:0000000000009897                 db 0FFh
.eh_frame:0000000000009898                 db 0D4h
.eh_frame:0000000000009899                 db    0
.eh_frame:000000000000989A                 db    0
.eh_frame:000000000000989B                 db    0
.eh_frame:000000000000989C                 db    0
.eh_frame:000000000000989D                 db  41h ; A
.eh_frame:000000000000989E                 db  0Eh
.eh_frame:000000000000989F                 db  10h
.eh_frame:00000000000098A0                 db  83h
.eh_frame:00000000000098A1                 db    2
.eh_frame:00000000000098A2                 db    2
.eh_frame:00000000000098A3                 db  85h
.eh_frame:00000000000098A4                 db  0Ah
.eh_frame:00000000000098A5                 db  0Eh
.eh_frame:00000000000098A6                 db    8
.eh_frame:00000000000098A7                 db  4Ah ; J
.eh_frame:00000000000098A8                 db  0Bh
.eh_frame:00000000000098A9                 db    0
.eh_frame:00000000000098AA                 db    0
.eh_frame:00000000000098AB                 db    0
.eh_frame:00000000000098AC                 db  14h
.eh_frame:00000000000098AD                 db    0
.eh_frame:00000000000098AE                 db    0
.eh_frame:00000000000098AF                 db    0
.eh_frame:00000000000098B0                 db 0A8h
.eh_frame:00000000000098B1                 db    0
.eh_frame:00000000000098B2                 db    0
.eh_frame:00000000000098B3                 db    0
.eh_frame:00000000000098B4                 db  4Ch ; L
.eh_frame:00000000000098B5                 db  82h
.eh_frame:00000000000098B6                 db 0FFh
.eh_frame:00000000000098B7                 db 0FFh
.eh_frame:00000000000098B8                 db  3Ch ; <
.eh_frame:00000000000098B9                 db    0
.eh_frame:00000000000098BA                 db    0
.eh_frame:00000000000098BB                 db    0
.eh_frame:00000000000098BC                 db    0
.eh_frame:00000000000098BD                 db  4Fh ; O
.eh_frame:00000000000098BE                 db  0Eh
.eh_frame:00000000000098BF                 db  10h
.eh_frame:00000000000098C0                 db  83h
.eh_frame:00000000000098C1                 db    2
.eh_frame:00000000000098C2                 db    0
.eh_frame:00000000000098C3                 db    0
.eh_frame:00000000000098C4                 db  10h
.eh_frame:00000000000098C5                 db    0
.eh_frame:00000000000098C6                 db    0
.eh_frame:00000000000098C7                 db    0
.eh_frame:00000000000098C8                 db 0C0h
.eh_frame:00000000000098C9                 db    0
.eh_frame:00000000000098CA                 db    0
.eh_frame:00000000000098CB                 db    0
.eh_frame:00000000000098CC                 db  74h ; t
.eh_frame:00000000000098CD                 db  82h
.eh_frame:00000000000098CE                 db 0FFh
.eh_frame:00000000000098CF                 db 0FFh
.eh_frame:00000000000098D0                 db  2Ah ; *
.eh_frame:00000000000098D1                 db    0
.eh_frame:00000000000098D2                 db    0
.eh_frame:00000000000098D3                 db    0
.eh_frame:00000000000098D4                 db    0
.eh_frame:00000000000098D5                 db  65h ; e
.eh_frame:00000000000098D6                 db  0Eh
.eh_frame:00000000000098D7                 db  10h
.eh_frame:00000000000098D8                 db  48h ; H
.eh_frame:00000000000098D9                 db    0
.eh_frame:00000000000098DA                 db    0
.eh_frame:00000000000098DB                 db    0
.eh_frame:00000000000098DC                 db 0D4h
.eh_frame:00000000000098DD                 db    0
.eh_frame:00000000000098DE                 db    0
.eh_frame:00000000000098DF                 db    0
.eh_frame:00000000000098E0                 db  90h
.eh_frame:00000000000098E1                 db  82h
.eh_frame:00000000000098E2                 db 0FFh
.eh_frame:00000000000098E3                 db 0FFh
.eh_frame:00000000000098E4                 db  6Dh ; m
.eh_frame:00000000000098E5                 db    5
.eh_frame:00000000000098E6                 db    0
.eh_frame:00000000000098E7                 db    0
.eh_frame:00000000000098E8                 db    0
.eh_frame:00000000000098E9                 db  42h ; B
.eh_frame:00000000000098EA                 db  0Eh
.eh_frame:00000000000098EB                 db  10h
.eh_frame:00000000000098EC                 db  8Fh
.eh_frame:00000000000098ED                 db    2
.eh_frame:00000000000098EE                 db  42h ; B
.eh_frame:00000000000098EF                 db  0Eh
.eh_frame:00000000000098F0                 db  18h
.eh_frame:00000000000098F1                 db  8Eh
.eh_frame:00000000000098F2                 db    3
.eh_frame:00000000000098F3                 db  44h ; D
.eh_frame:00000000000098F4                 db  0Eh
.eh_frame:00000000000098F5                 db  20h
.eh_frame:00000000000098F6                 db  8Dh
.eh_frame:00000000000098F7                 db    4
.eh_frame:00000000000098F8                 db  42h ; B
.eh_frame:00000000000098F9                 db  0Eh
.eh_frame:00000000000098FA                 db  28h ; (
.eh_frame:00000000000098FB                 db  8Ch
.eh_frame:00000000000098FC                 db    5
.eh_frame:00000000000098FD                 db  41h ; A
.eh_frame:00000000000098FE                 db  0Eh
.eh_frame:00000000000098FF                 db  30h ; 0
.eh_frame:0000000000009900                 db  86h
.eh_frame:0000000000009901                 db    6
.eh_frame:0000000000009902                 db  41h ; A
.eh_frame:0000000000009903                 db  0Eh
.eh_frame:0000000000009904                 db  38h ; 8
.eh_frame:0000000000009905                 db  83h
.eh_frame:0000000000009906                 db    7
.eh_frame:0000000000009907                 db  47h ; G
.eh_frame:0000000000009908                 db  0Eh
.eh_frame:0000000000009909                 db 0B0h
.eh_frame:000000000000990A                 db    3
.eh_frame:000000000000990B                 db    2
.eh_frame:000000000000990C                 db 0EDh
.eh_frame:000000000000990D                 db  0Ah
.eh_frame:000000000000990E                 db  0Eh
.eh_frame:000000000000990F                 db  38h ; 8
.eh_frame:0000000000009910                 db  41h ; A
.eh_frame:0000000000009911                 db  0Eh
.eh_frame:0000000000009912                 db  30h ; 0
.eh_frame:0000000000009913                 db  41h ; A
.eh_frame:0000000000009914                 db  0Eh
.eh_frame:0000000000009915                 db  28h ; (
.eh_frame:0000000000009916                 db  42h ; B
.eh_frame:0000000000009917                 db  0Eh
.eh_frame:0000000000009918                 db  20h
.eh_frame:0000000000009919                 db  42h ; B
.eh_frame:000000000000991A                 db  0Eh
.eh_frame:000000000000991B                 db  18h
.eh_frame:000000000000991C                 db  42h ; B
.eh_frame:000000000000991D                 db  0Eh
.eh_frame:000000000000991E                 db  10h
.eh_frame:000000000000991F                 db  42h ; B
.eh_frame:0000000000009920                 db  0Eh
.eh_frame:0000000000009921                 db    8
.eh_frame:0000000000009922                 db  46h ; F
.eh_frame:0000000000009923                 db  0Bh
.eh_frame:0000000000009924                 db  28h ; (
.eh_frame:0000000000009925                 db    0
.eh_frame:0000000000009926                 db    0
.eh_frame:0000000000009927                 db    0
.eh_frame:0000000000009928                 db  20h
.eh_frame:0000000000009929                 db    1
.eh_frame:000000000000992A                 db    0
.eh_frame:000000000000992B                 db    0
.eh_frame:000000000000992C                 db 0B4h
.eh_frame:000000000000992D                 db  87h
.eh_frame:000000000000992E                 db 0FFh
.eh_frame:000000000000992F                 db 0FFh
.eh_frame:0000000000009930                 db 0D1h
.eh_frame:0000000000009931                 db    5
.eh_frame:0000000000009932                 db    0
.eh_frame:0000000000009933                 db    0
.eh_frame:0000000000009934                 db    0
.eh_frame:0000000000009935                 db  41h ; A
.eh_frame:0000000000009936                 db  0Eh
.eh_frame:0000000000009937                 db  10h
.eh_frame:0000000000009938                 db  86h
.eh_frame:0000000000009939                 db    2
.eh_frame:000000000000993A                 db  41h ; A
.eh_frame:000000000000993B                 db  0Eh
.eh_frame:000000000000993C                 db  18h
.eh_frame:000000000000993D                 db  83h
.eh_frame:000000000000993E                 db    3
.eh_frame:000000000000993F                 db  47h ; G
.eh_frame:0000000000009940                 db  0Eh
.eh_frame:0000000000009941                 db 0C0h
.eh_frame:0000000000009942                 db    1
.eh_frame:0000000000009943                 db    2
.eh_frame:0000000000009944                 db  85h
.eh_frame:0000000000009945                 db  0Ah
.eh_frame:0000000000009946                 db  0Eh
.eh_frame:0000000000009947                 db  18h
.eh_frame:0000000000009948                 db  41h ; A
.eh_frame:0000000000009949                 db  0Eh
.eh_frame:000000000000994A                 db  10h
.eh_frame:000000000000994B                 db  41h ; A
.eh_frame:000000000000994C                 db  0Eh
.eh_frame:000000000000994D                 db    8
.eh_frame:000000000000994E                 db  48h ; H
.eh_frame:000000000000994F                 db  0Bh
.eh_frame:0000000000009950                 db  14h
.eh_frame:0000000000009951                 db    0
.eh_frame:0000000000009952                 db    0
.eh_frame:0000000000009953                 db    0
.eh_frame:0000000000009954                 db  4Ch ; L
.eh_frame:0000000000009955                 db    1
.eh_frame:0000000000009956                 db    0
.eh_frame:0000000000009957                 db    0
.eh_frame:0000000000009958                 db  68h ; h
.eh_frame:0000000000009959                 db  8Dh
.eh_frame:000000000000995A                 db 0FFh
.eh_frame:000000000000995B                 db 0FFh
.eh_frame:000000000000995C                 db  70h ; p
.eh_frame:000000000000995D                 db    0
.eh_frame:000000000000995E                 db    0
.eh_frame:000000000000995F                 db    0
.eh_frame:0000000000009960                 db    0
.eh_frame:0000000000009961                 db    2
.eh_frame:0000000000009962                 db  6Bh ; k
.eh_frame:0000000000009963                 db  0Eh
.eh_frame:0000000000009964                 db  10h
.eh_frame:0000000000009965                 db    0
.eh_frame:0000000000009966                 db    0
.eh_frame:0000000000009967                 db    0
.eh_frame:0000000000009968                 db  30h ; 0
.eh_frame:0000000000009969                 db    0
.eh_frame:000000000000996A                 db    0
.eh_frame:000000000000996B                 db    0
.eh_frame:000000000000996C                 db  64h ; d
.eh_frame:000000000000996D                 db    1
.eh_frame:000000000000996E                 db    0
.eh_frame:000000000000996F                 db    0
.eh_frame:0000000000009970                 db 0C0h
.eh_frame:0000000000009971                 db  8Dh
.eh_frame:0000000000009972                 db 0FFh
.eh_frame:0000000000009973                 db 0FFh
.eh_frame:0000000000009974                 db  3Fh ; ?
.eh_frame:0000000000009975                 db    1
.eh_frame:0000000000009976                 db    0
.eh_frame:0000000000009977                 db    0
.eh_frame:0000000000009978                 db    0
.eh_frame:0000000000009979                 db  44h ; D
.eh_frame:000000000000997A                 db  0Eh
.eh_frame:000000000000997B                 db  10h
.eh_frame:000000000000997C                 db    2
.eh_frame:000000000000997D                 db  77h ; w
.eh_frame:000000000000997E                 db  0Ah
.eh_frame:000000000000997F                 db  0Eh
.eh_frame:0000000000009980                 db    8
.eh_frame:0000000000009981                 db  45h ; E
.eh_frame:0000000000009982                 db  0Bh
.eh_frame:0000000000009983                 db  44h ; D
.eh_frame:0000000000009984                 db  0Ah
.eh_frame:0000000000009985                 db  0Eh
.eh_frame:0000000000009986                 db    8
.eh_frame:0000000000009987                 db  4Ch ; L
.eh_frame:0000000000009988                 db  0Bh
.eh_frame:0000000000009989                 db  6Ah ; j
.eh_frame:000000000000998A                 db  0Ah
.eh_frame:000000000000998B                 db  0Eh
.eh_frame:000000000000998C                 db    8
.eh_frame:000000000000998D                 db  46h ; F
.eh_frame:000000000000998E                 db  0Bh
.eh_frame:000000000000998F                 db  52h ; R
.eh_frame:0000000000009990                 db  0Ah
.eh_frame:0000000000009991                 db  0Eh
.eh_frame:0000000000009992                 db    8
.eh_frame:0000000000009993                 db  46h ; F
.eh_frame:0000000000009994                 db  0Bh
.eh_frame:0000000000009995                 db  44h ; D
.eh_frame:0000000000009996                 db  0Ah
.eh_frame:0000000000009997                 db  0Eh
.eh_frame:0000000000009998                 db    8
.eh_frame:0000000000009999                 db  4Ch ; L
.eh_frame:000000000000999A                 db  0Bh
.eh_frame:000000000000999B                 db    0
.eh_frame:000000000000999C                 db  48h ; H
.eh_frame:000000000000999D                 db    0
.eh_frame:000000000000999E                 db    0
.eh_frame:000000000000999F                 db    0
.eh_frame:00000000000099A0                 db  98h
.eh_frame:00000000000099A1                 db    1
.eh_frame:00000000000099A2                 db    0
.eh_frame:00000000000099A3                 db    0
.eh_frame:00000000000099A4                 db 0CCh
.eh_frame:00000000000099A5                 db  8Eh
.eh_frame:00000000000099A6                 db 0FFh
.eh_frame:00000000000099A7                 db 0FFh
.eh_frame:00000000000099A8                 db 0D9h
.eh_frame:00000000000099A9                 db    3
.eh_frame:00000000000099AA                 db    0
.eh_frame:00000000000099AB                 db    0
.eh_frame:00000000000099AC                 db    0
.eh_frame:00000000000099AD                 db  42h ; B
.eh_frame:00000000000099AE                 db  0Eh
.eh_frame:00000000000099AF                 db  10h
.eh_frame:00000000000099B0                 db  8Fh
.eh_frame:00000000000099B1                 db    2
.eh_frame:00000000000099B2                 db  42h ; B
.eh_frame:00000000000099B3                 db  0Eh
.eh_frame:00000000000099B4                 db  18h
.eh_frame:00000000000099B5                 db  8Eh
.eh_frame:00000000000099B6                 db    3
.eh_frame:00000000000099B7                 db  42h ; B
.eh_frame:00000000000099B8                 db  0Eh
.eh_frame:00000000000099B9                 db  20h
.eh_frame:00000000000099BA                 db  8Dh
.eh_frame:00000000000099BB                 db    4
.eh_frame:00000000000099BC                 db  42h ; B
.eh_frame:00000000000099BD                 db  0Eh
.eh_frame:00000000000099BE                 db  28h ; (
.eh_frame:00000000000099BF                 db  8Ch
.eh_frame:00000000000099C0                 db    5
.eh_frame:00000000000099C1                 db  41h ; A
.eh_frame:00000000000099C2                 db  0Eh
.eh_frame:00000000000099C3                 db  30h ; 0
.eh_frame:00000000000099C4                 db  86h
.eh_frame:00000000000099C5                 db    6
.eh_frame:00000000000099C6                 db  41h ; A
.eh_frame:00000000000099C7                 db  0Eh
.eh_frame:00000000000099C8                 db  38h ; 8
.eh_frame:00000000000099C9                 db  83h
.eh_frame:00000000000099CA                 db    7
.eh_frame:00000000000099CB                 db  44h ; D
.eh_frame:00000000000099CC                 db  0Eh
.eh_frame:00000000000099CD                 db  50h ; P
.eh_frame:00000000000099CE                 db    3
.eh_frame:00000000000099CF                 db  76h ; v
.eh_frame:00000000000099D0                 db    2
.eh_frame:00000000000099D1                 db  0Ah
.eh_frame:00000000000099D2                 db  0Eh
.eh_frame:00000000000099D3                 db  38h ; 8
.eh_frame:00000000000099D4                 db  41h ; A
.eh_frame:00000000000099D5                 db  0Eh
.eh_frame:00000000000099D6                 db  30h ; 0
.eh_frame:00000000000099D7                 db  41h ; A
.eh_frame:00000000000099D8                 db  0Eh
.eh_frame:00000000000099D9                 db  28h ; (
.eh_frame:00000000000099DA                 db  42h ; B
.eh_frame:00000000000099DB                 db  0Eh
.eh_frame:00000000000099DC                 db  20h
.eh_frame:00000000000099DD                 db  42h ; B
.eh_frame:00000000000099DE                 db  0Eh
.eh_frame:00000000000099DF                 db  18h
.eh_frame:00000000000099E0                 db  42h ; B
.eh_frame:00000000000099E1                 db  0Eh
.eh_frame:00000000000099E2                 db  10h
.eh_frame:00000000000099E3                 db  42h ; B
.eh_frame:00000000000099E4                 db  0Eh
.eh_frame:00000000000099E5                 db    8
.eh_frame:00000000000099E6                 db  42h ; B
.eh_frame:00000000000099E7                 db  0Bh
.eh_frame:00000000000099E8                 db  2Ch ; ,
.eh_frame:00000000000099E9                 db    0
.eh_frame:00000000000099EA                 db    0
.eh_frame:00000000000099EB                 db    0
.eh_frame:00000000000099EC                 db 0E4h
.eh_frame:00000000000099ED                 db    1
.eh_frame:00000000000099EE                 db    0
.eh_frame:00000000000099EF                 db    0
.eh_frame:00000000000099F0                 db  60h ; `
.eh_frame:00000000000099F1                 db  92h
.eh_frame:00000000000099F2                 db 0FFh
.eh_frame:00000000000099F3                 db 0FFh
.eh_frame:00000000000099F4                 db  48h ; H
.eh_frame:00000000000099F5                 db    1
.eh_frame:00000000000099F6                 db    0
.eh_frame:00000000000099F7                 db    0
.eh_frame:00000000000099F8                 db    0
.eh_frame:00000000000099F9                 db  4Fh ; O
.eh_frame:00000000000099FA                 db  0Eh
.eh_frame:00000000000099FB                 db  10h
.eh_frame:00000000000099FC                 db  83h
.eh_frame:00000000000099FD                 db    2
.eh_frame:00000000000099FE                 db    2
.eh_frame:00000000000099FF                 db  60h ; `
.eh_frame:0000000000009A00                 db  0Ah
.eh_frame:0000000000009A01                 db  0Eh
.eh_frame:0000000000009A02                 db    8
.eh_frame:0000000000009A03                 db  49h ; I
.eh_frame:0000000000009A04                 db  0Bh
.eh_frame:0000000000009A05                 db  7Bh ; {
.eh_frame:0000000000009A06                 db  0Ah
.eh_frame:0000000000009A07                 db  0Eh
.eh_frame:0000000000009A08                 db    8
.eh_frame:0000000000009A09                 db  55h ; U
.eh_frame:0000000000009A0A                 db  0Bh
.eh_frame:0000000000009A0B                 db  7Eh ; ~
.eh_frame:0000000000009A0C                 db  0Ah
.eh_frame:0000000000009A0D                 db  0Eh
.eh_frame:0000000000009A0E                 db    8
.eh_frame:0000000000009A0F                 db  4Ah ; J
.eh_frame:0000000000009A10                 db  0Bh
.eh_frame:0000000000009A11                 db  41h ; A
.eh_frame:0000000000009A12                 db  0Ah
.eh_frame:0000000000009A13                 db  0Eh
.eh_frame:0000000000009A14                 db    8
.eh_frame:0000000000009A15                 db  47h ; G
.eh_frame:0000000000009A16                 db  0Bh
.eh_frame:0000000000009A17                 db    0
.eh_frame:0000000000009A18                 db  28h ; (
.eh_frame:0000000000009A19                 db    0
.eh_frame:0000000000009A1A                 db    0
.eh_frame:0000000000009A1B                 db    0
.eh_frame:0000000000009A1C                 db  14h
.eh_frame:0000000000009A1D                 db    2
.eh_frame:0000000000009A1E                 db    0
.eh_frame:0000000000009A1F                 db    0
.eh_frame:0000000000009A20                 db  80h
.eh_frame:0000000000009A21                 db  93h
.eh_frame:0000000000009A22                 db 0FFh
.eh_frame:0000000000009A23                 db 0FFh
.eh_frame:0000000000009A24                 db  3Ah ; :
.eh_frame:0000000000009A25                 db    5
.eh_frame:0000000000009A26                 db    0
.eh_frame:0000000000009A27                 db    0
.eh_frame:0000000000009A28                 db    0
.eh_frame:0000000000009A29                 db  42h ; B
.eh_frame:0000000000009A2A                 db  0Eh
.eh_frame:0000000000009A2B                 db  10h
.eh_frame:0000000000009A2C                 db  8Dh
.eh_frame:0000000000009A2D                 db    2
.eh_frame:0000000000009A2E                 db  42h ; B
.eh_frame:0000000000009A2F                 db  0Eh
.eh_frame:0000000000009A30                 db  18h
.eh_frame:0000000000009A31                 db  8Ch
.eh_frame:0000000000009A32                 db    3
.eh_frame:0000000000009A33                 db  41h ; A
.eh_frame:0000000000009A34                 db  0Eh
.eh_frame:0000000000009A35                 db  20h
.eh_frame:0000000000009A36                 db  86h
.eh_frame:0000000000009A37                 db    4
.eh_frame:0000000000009A38                 db  41h ; A
.eh_frame:0000000000009A39                 db  0Eh
.eh_frame:0000000000009A3A                 db  28h ; (
.eh_frame:0000000000009A3B                 db  83h
.eh_frame:0000000000009A3C                 db    5
.eh_frame:0000000000009A3D                 db  49h ; I
.eh_frame:0000000000009A3E                 db  0Eh
.eh_frame:0000000000009A3F                 db 0B0h
.eh_frame:0000000000009A40                 db    1
.eh_frame:0000000000009A41                 db    0
.eh_frame:0000000000009A42                 db    0
.eh_frame:0000000000009A43                 db    0
.eh_frame:0000000000009A44                 db  28h ; (
.eh_frame:0000000000009A45                 db    0
.eh_frame:0000000000009A46                 db    0
.eh_frame:0000000000009A47                 db    0
.eh_frame:0000000000009A48                 db  40h ; @
.eh_frame:0000000000009A49                 db    2
.eh_frame:0000000000009A4A                 db    0
.eh_frame:0000000000009A4B                 db    0
.eh_frame:0000000000009A4C                 db 0C4h
.eh_frame:0000000000009A4D                 db  7Bh ; {
.eh_frame:0000000000009A4E                 db 0FFh
.eh_frame:0000000000009A4F                 db 0FFh
.eh_frame:0000000000009A50                 db 0D3h
.eh_frame:0000000000009A51                 db    0
.eh_frame:0000000000009A52                 db    0
.eh_frame:0000000000009A53                 db    0
.eh_frame:0000000000009A54                 db    0
.eh_frame:0000000000009A55                 db  41h ; A
.eh_frame:0000000000009A56                 db  0Eh
.eh_frame:0000000000009A57                 db  10h
.eh_frame:0000000000009A58                 db  86h
.eh_frame:0000000000009A59                 db    2
.eh_frame:0000000000009A5A                 db  41h ; A
.eh_frame:0000000000009A5B                 db  0Eh
.eh_frame:0000000000009A5C                 db  18h
.eh_frame:0000000000009A5D                 db  83h
.eh_frame:0000000000009A5E                 db    3
.eh_frame:0000000000009A5F                 db  49h ; I
.eh_frame:0000000000009A60                 db  0Eh
.eh_frame:0000000000009A61                 db  20h
.eh_frame:0000000000009A62                 db    2
.eh_frame:0000000000009A63                 db  8Bh
.eh_frame:0000000000009A64                 db  0Ah
.eh_frame:0000000000009A65                 db  0Eh
.eh_frame:0000000000009A66                 db  18h
.eh_frame:0000000000009A67                 db  41h ; A
.eh_frame:0000000000009A68                 db  0Eh
.eh_frame:0000000000009A69                 db  10h
.eh_frame:0000000000009A6A                 db  41h ; A
.eh_frame:0000000000009A6B                 db  0Eh
.eh_frame:0000000000009A6C                 db    8
.eh_frame:0000000000009A6D                 db  41h ; A
.eh_frame:0000000000009A6E                 db  0Bh
.eh_frame:0000000000009A6F                 db    0
.eh_frame:0000000000009A70                 db  10h
.eh_frame:0000000000009A71                 db    0
.eh_frame:0000000000009A72                 db    0
.eh_frame:0000000000009A73                 db    0
.eh_frame:0000000000009A74                 db  6Ch ; l
.eh_frame:0000000000009A75                 db    2
.eh_frame:0000000000009A76                 db    0
.eh_frame:0000000000009A77                 db    0
.eh_frame:0000000000009A78                 db  68h ; h
.eh_frame:0000000000009A79                 db  98h
.eh_frame:0000000000009A7A                 db 0FFh
.eh_frame:0000000000009A7B                 db 0FFh
.eh_frame:0000000000009A7C                 db    8
.eh_frame:0000000000009A7D                 db    0
.eh_frame:0000000000009A7E                 db    0
.eh_frame:0000000000009A7F                 db    0
.eh_frame:0000000000009A80                 db    0
.eh_frame:0000000000009A81                 db    0
.eh_frame:0000000000009A82                 db    0
.eh_frame:0000000000009A83                 db    0
.eh_frame:0000000000009A84                 db  10h
.eh_frame:0000000000009A85                 db    0
.eh_frame:0000000000009A86                 db    0
.eh_frame:0000000000009A87                 db    0
.eh_frame:0000000000009A88                 db  80h
.eh_frame:0000000000009A89                 db    2
.eh_frame:0000000000009A8A                 db    0
.eh_frame:0000000000009A8B                 db    0
.eh_frame:0000000000009A8C                 db  64h ; d
.eh_frame:0000000000009A8D                 db  98h
.eh_frame:0000000000009A8E                 db 0FFh
.eh_frame:0000000000009A8F                 db 0FFh
.eh_frame:0000000000009A90                 db    8
.eh_frame:0000000000009A91                 db    0
.eh_frame:0000000000009A92                 db    0
.eh_frame:0000000000009A93                 db    0
.eh_frame:0000000000009A94                 db    0
.eh_frame:0000000000009A95                 db    0
.eh_frame:0000000000009A96                 db    0
.eh_frame:0000000000009A97                 db    0
.eh_frame:0000000000009A98                 db  2Ch ; ,
.eh_frame:0000000000009A99                 db    0
.eh_frame:0000000000009A9A                 db    0
.eh_frame:0000000000009A9B                 db    0
.eh_frame:0000000000009A9C                 db  94h
.eh_frame:0000000000009A9D                 db    2
.eh_frame:0000000000009A9E                 db    0
.eh_frame:0000000000009A9F                 db    0
.eh_frame:0000000000009AA0                 db  60h ; `
.eh_frame:0000000000009AA1                 db  98h
.eh_frame:0000000000009AA2                 db 0FFh
.eh_frame:0000000000009AA3                 db 0FFh
.eh_frame:0000000000009AA4                 db 0A4h
.eh_frame:0000000000009AA5                 db    0
.eh_frame:0000000000009AA6                 db    0
.eh_frame:0000000000009AA7                 db    0
.eh_frame:0000000000009AA8                 db    0
.eh_frame:0000000000009AA9                 db  41h ; A
.eh_frame:0000000000009AAA                 db  0Eh
.eh_frame:0000000000009AAB                 db  10h
.eh_frame:0000000000009AAC                 db  86h
.eh_frame:0000000000009AAD                 db    2
.eh_frame:0000000000009AAE                 db  41h ; A
.eh_frame:0000000000009AAF                 db  0Eh
.eh_frame:0000000000009AB0                 db  18h
.eh_frame:0000000000009AB1                 db  83h
.eh_frame:0000000000009AB2                 db    3
.eh_frame:0000000000009AB3                 db  44h ; D
.eh_frame:0000000000009AB4                 db  0Eh
.eh_frame:0000000000009AB5                 db  20h
.eh_frame:0000000000009AB6                 db  7Ah ; z
.eh_frame:0000000000009AB7                 db  0Ah
.eh_frame:0000000000009AB8                 db  0Eh
.eh_frame:0000000000009AB9                 db  18h
.eh_frame:0000000000009ABA                 db  41h ; A
.eh_frame:0000000000009ABB                 db  0Eh
.eh_frame:0000000000009ABC                 db  10h
.eh_frame:0000000000009ABD                 db  41h ; A
.eh_frame:0000000000009ABE                 db  0Eh
.eh_frame:0000000000009ABF                 db    8
.eh_frame:0000000000009AC0                 db  41h ; A
.eh_frame:0000000000009AC1                 db  0Bh
.eh_frame:0000000000009AC2                 db    0
.eh_frame:0000000000009AC3                 db    0
.eh_frame:0000000000009AC4                 db    0
.eh_frame:0000000000009AC5                 db    0
.eh_frame:0000000000009AC6                 db    0
.eh_frame:0000000000009AC7                 db    0
.eh_frame:0000000000009AC8                 db  14h
.eh_frame:0000000000009AC9                 db    0
.eh_frame:0000000000009ACA                 db    0
.eh_frame:0000000000009ACB                 db    0
.eh_frame:0000000000009ACC                 db 0C4h
.eh_frame:0000000000009ACD                 db    2
.eh_frame:0000000000009ACE                 db    0
.eh_frame:0000000000009ACF                 db    0
.eh_frame:0000000000009AD0                 db 0E0h
.eh_frame:0000000000009AD1                 db  98h
.eh_frame:0000000000009AD2                 db 0FFh
.eh_frame:0000000000009AD3                 db 0FFh
.eh_frame:0000000000009AD4                 db  42h ; B
.eh_frame:0000000000009AD5                 db    0
.eh_frame:0000000000009AD6                 db    0
.eh_frame:0000000000009AD7                 db    0
.eh_frame:0000000000009AD8                 db    0
.eh_frame:0000000000009AD9                 db    0
.eh_frame:0000000000009ADA                 db    0
.eh_frame:0000000000009ADB                 db    0
.eh_frame:0000000000009ADC                 db    0
.eh_frame:0000000000009ADD                 db    0
.eh_frame:0000000000009ADE                 db    0
.eh_frame:0000000000009ADF                 db    0
.eh_frame:0000000000009AE0                 db  1Ch
.eh_frame:0000000000009AE1                 db    0
.eh_frame:0000000000009AE2                 db    0
.eh_frame:0000000000009AE3                 db    0
.eh_frame:0000000000009AE4                 db 0DCh
.eh_frame:0000000000009AE5                 db    2
.eh_frame:0000000000009AE6                 db    0
.eh_frame:0000000000009AE7                 db    0
.eh_frame:0000000000009AE8                 db  18h
.eh_frame:0000000000009AE9                 db  99h
.eh_frame:0000000000009AEA                 db 0FFh
.eh_frame:0000000000009AEB                 db 0FFh
.eh_frame:0000000000009AEC                 db  9Fh
.eh_frame:0000000000009AED                 db    0
.eh_frame:0000000000009AEE                 db    0
.eh_frame:0000000000009AEF                 db    0
.eh_frame:0000000000009AF0                 db    0
.eh_frame:0000000000009AF1                 db  44h ; D
.eh_frame:0000000000009AF2                 db  0Eh
.eh_frame:0000000000009AF3                 db  10h
.eh_frame:0000000000009AF4                 db  83h
.eh_frame:0000000000009AF5                 db    2
.eh_frame:0000000000009AF6                 db    2
.eh_frame:0000000000009AF7                 db  78h ; x
.eh_frame:0000000000009AF8                 db  0Ah
.eh_frame:0000000000009AF9                 db  0Eh
.eh_frame:0000000000009AFA                 db    8
.eh_frame:0000000000009AFB                 db  41h ; A
.eh_frame:0000000000009AFC                 db  0Bh
.eh_frame:0000000000009AFD                 db    0
.eh_frame:0000000000009AFE                 db    0
.eh_frame:0000000000009AFF                 db    0
.eh_frame:0000000000009B00                 db  40h ; @
.eh_frame:0000000000009B01                 db    0
.eh_frame:0000000000009B02                 db    0
.eh_frame:0000000000009B03                 db    0
.eh_frame:0000000000009B04                 db 0FCh
.eh_frame:0000000000009B05                 db    2
.eh_frame:0000000000009B06                 db    0
.eh_frame:0000000000009B07                 db    0
.eh_frame:0000000000009B08                 db  98h
.eh_frame:0000000000009B09                 db  99h
.eh_frame:0000000000009B0A                 db 0FFh
.eh_frame:0000000000009B0B                 db 0FFh
.eh_frame:0000000000009B0C                 db 0E7h
.eh_frame:0000000000009B0D                 db    0
.eh_frame:0000000000009B0E                 db    0
.eh_frame:0000000000009B0F                 db    0
.eh_frame:0000000000009B10                 db    0
.eh_frame:0000000000009B11                 db  41h ; A
.eh_frame:0000000000009B12                 db  0Eh
.eh_frame:0000000000009B13                 db  10h
.eh_frame:0000000000009B14                 db  86h
.eh_frame:0000000000009B15                 db    2
.eh_frame:0000000000009B16                 db  41h ; A
.eh_frame:0000000000009B17                 db  0Eh
.eh_frame:0000000000009B18                 db  18h
.eh_frame:0000000000009B19                 db  83h
.eh_frame:0000000000009B1A                 db    3
.eh_frame:0000000000009B1B                 db  49h ; I
.eh_frame:0000000000009B1C                 db  0Eh
.eh_frame:0000000000009B1D                 db  20h
.eh_frame:0000000000009B1E                 db  6Eh ; n
.eh_frame:0000000000009B1F                 db  0Ah
.eh_frame:0000000000009B20                 db  0Eh
.eh_frame:0000000000009B21                 db  18h
.eh_frame:0000000000009B22                 db  41h ; A
.eh_frame:0000000000009B23                 db  0Eh
.eh_frame:0000000000009B24                 db  10h
.eh_frame:0000000000009B25                 db  41h ; A
.eh_frame:0000000000009B26                 db  0Eh
.eh_frame:0000000000009B27                 db    8
.eh_frame:0000000000009B28                 db  45h ; E
.eh_frame:0000000000009B29                 db  0Bh
.eh_frame:0000000000009B2A                 db    2
.eh_frame:0000000000009B2B                 db  4Ah ; J
.eh_frame:0000000000009B2C                 db  0Ah
.eh_frame:0000000000009B2D                 db  0Eh
.eh_frame:0000000000009B2E                 db  18h
.eh_frame:0000000000009B2F                 db  41h ; A
.eh_frame:0000000000009B30                 db  0Eh
.eh_frame:0000000000009B31                 db  10h
.eh_frame:0000000000009B32                 db  41h ; A
.eh_frame:0000000000009B33                 db  0Eh
.eh_frame:0000000000009B34                 db    8
.eh_frame:0000000000009B35                 db  44h ; D
.eh_frame:0000000000009B36                 db  0Bh
.eh_frame:0000000000009B37                 db    2
.eh_frame:0000000000009B38                 db  54h ; T
.eh_frame:0000000000009B39                 db  0Eh
.eh_frame:0000000000009B3A                 db  18h
.eh_frame:0000000000009B3B                 db  41h ; A
.eh_frame:0000000000009B3C                 db  0Eh
.eh_frame:0000000000009B3D                 db  10h
.eh_frame:0000000000009B3E                 db  41h ; A
.eh_frame:0000000000009B3F                 db  0Eh
.eh_frame:0000000000009B40                 db    8
.eh_frame:0000000000009B41                 db    0
.eh_frame:0000000000009B42                 db    0
.eh_frame:0000000000009B43                 db    0
.eh_frame:0000000000009B44                 db  74h ; t
.eh_frame:0000000000009B45                 db    0
.eh_frame:0000000000009B46                 db    0
.eh_frame:0000000000009B47                 db    0
.eh_frame:0000000000009B48                 db  40h ; @
.eh_frame:0000000000009B49                 db    3
.eh_frame:0000000000009B4A                 db    0
.eh_frame:0000000000009B4B                 db    0
.eh_frame:0000000000009B4C                 db  44h ; D
.eh_frame:0000000000009B4D                 db  9Ah
.eh_frame:0000000000009B4E                 db 0FFh
.eh_frame:0000000000009B4F                 db 0FFh
.eh_frame:0000000000009B50                 db  34h ; 4
.eh_frame:0000000000009B51                 db  12h
.eh_frame:0000000000009B52                 db    0
.eh_frame:0000000000009B53                 db    0
.eh_frame:0000000000009B54                 db    0
.eh_frame:0000000000009B55                 db  42h ; B
.eh_frame:0000000000009B56                 db  0Eh
.eh_frame:0000000000009B57                 db  10h
.eh_frame:0000000000009B58                 db  8Fh
.eh_frame:0000000000009B59                 db    2
.eh_frame:0000000000009B5A                 db  42h ; B
.eh_frame:0000000000009B5B                 db  0Eh
.eh_frame:0000000000009B5C                 db  18h
.eh_frame:0000000000009B5D                 db  8Eh
.eh_frame:0000000000009B5E                 db    3
.eh_frame:0000000000009B5F                 db  45h ; E
.eh_frame:0000000000009B60                 db  0Eh
.eh_frame:0000000000009B61                 db  20h
.eh_frame:0000000000009B62                 db  8Dh
.eh_frame:0000000000009B63                 db    4
.eh_frame:0000000000009B64                 db  42h ; B
.eh_frame:0000000000009B65                 db  0Eh
.eh_frame:0000000000009B66                 db  28h ; (
.eh_frame:0000000000009B67                 db  8Ch
.eh_frame:0000000000009B68                 db    5
.eh_frame:0000000000009B69                 db  44h ; D
.eh_frame:0000000000009B6A                 db  0Eh
.eh_frame:0000000000009B6B                 db  30h ; 0
.eh_frame:0000000000009B6C                 db  86h
.eh_frame:0000000000009B6D                 db    6
.eh_frame:0000000000009B6E                 db  41h ; A
.eh_frame:0000000000009B6F                 db  0Eh
.eh_frame:0000000000009B70                 db  38h ; 8
.eh_frame:0000000000009B71                 db  83h
.eh_frame:0000000000009B72                 db    7
.eh_frame:0000000000009B73                 db  53h ; S
.eh_frame:0000000000009B74                 db  0Eh
.eh_frame:0000000000009B75                 db 0F0h
.eh_frame:0000000000009B76                 db    1
.eh_frame:0000000000009B77                 db    3
.eh_frame:0000000000009B78                 db  81h
.eh_frame:0000000000009B79                 db  0Bh
.eh_frame:0000000000009B7A                 db  0Eh
.eh_frame:0000000000009B7B                 db 0F8h
.eh_frame:0000000000009B7C                 db    1
.eh_frame:0000000000009B7D                 db  4Ah ; J
.eh_frame:0000000000009B7E                 db  0Eh
.eh_frame:0000000000009B7F                 db  80h
.eh_frame:0000000000009B80                 db    2
.eh_frame:0000000000009B81                 db  44h ; D
.eh_frame:0000000000009B82                 db  0Eh
.eh_frame:0000000000009B83                 db  88h
.eh_frame:0000000000009B84                 db    2
.eh_frame:0000000000009B85                 db  45h ; E
.eh_frame:0000000000009B86                 db  0Eh
.eh_frame:0000000000009B87                 db  90h
.eh_frame:0000000000009B88                 db    2
.eh_frame:0000000000009B89                 db  5Fh ; _
.eh_frame:0000000000009B8A                 db  0Eh
.eh_frame:0000000000009B8B                 db 0F0h
.eh_frame:0000000000009B8C                 db    1
.eh_frame:0000000000009B8D                 db  64h ; d
.eh_frame:0000000000009B8E                 db  0Ah
.eh_frame:0000000000009B8F                 db  0Eh
.eh_frame:0000000000009B90                 db  38h ; 8
.eh_frame:0000000000009B91                 db  41h ; A
.eh_frame:0000000000009B92                 db  0Eh
.eh_frame:0000000000009B93                 db  30h ; 0
.eh_frame:0000000000009B94                 db  41h ; A
.eh_frame:0000000000009B95                 db  0Eh
.eh_frame:0000000000009B96                 db  28h ; (
.eh_frame:0000000000009B97                 db  42h ; B
.eh_frame:0000000000009B98                 db  0Eh
.eh_frame:0000000000009B99                 db  20h
.eh_frame:0000000000009B9A                 db  42h ; B
.eh_frame:0000000000009B9B                 db  0Eh
.eh_frame:0000000000009B9C                 db  18h
.eh_frame:0000000000009B9D                 db  42h ; B
.eh_frame:0000000000009B9E                 db  0Eh
.eh_frame:0000000000009B9F                 db  10h
.eh_frame:0000000000009BA0                 db  42h ; B
.eh_frame:0000000000009BA1                 db  0Eh
.eh_frame:0000000000009BA2                 db    8
.eh_frame:0000000000009BA3                 db  44h ; D
.eh_frame:0000000000009BA4                 db  0Bh
.eh_frame:0000000000009BA5                 db    3
.eh_frame:0000000000009BA6                 db  99h
.eh_frame:0000000000009BA7                 db    5
.eh_frame:0000000000009BA8                 db  0Eh
.eh_frame:0000000000009BA9                 db 0F8h
.eh_frame:0000000000009BAA                 db    1
.eh_frame:0000000000009BAB                 db  4Dh ; M
.eh_frame:0000000000009BAC                 db  0Eh
.eh_frame:0000000000009BAD                 db  80h
.eh_frame:0000000000009BAE                 db    2
.eh_frame:0000000000009BAF                 db  44h ; D
.eh_frame:0000000000009BB0                 db  0Eh
.eh_frame:0000000000009BB1                 db  88h
.eh_frame:0000000000009BB2                 db    2
.eh_frame:0000000000009BB3                 db  47h ; G
.eh_frame:0000000000009BB4                 db  0Eh
.eh_frame:0000000000009BB5                 db  90h
.eh_frame:0000000000009BB6                 db    2
.eh_frame:0000000000009BB7                 db  5Bh ; [
.eh_frame:0000000000009BB8                 db  0Eh
.eh_frame:0000000000009BB9                 db 0F0h
.eh_frame:0000000000009BBA                 db    1
.eh_frame:0000000000009BBB                 db    0
.eh_frame:0000000000009BBC                 db  68h ; h
.eh_frame:0000000000009BBD                 db    0
.eh_frame:0000000000009BBE                 db    0
.eh_frame:0000000000009BBF                 db    0
.eh_frame:0000000000009BC0                 db 0B8h
.eh_frame:0000000000009BC1                 db    3
.eh_frame:0000000000009BC2                 db    0
.eh_frame:0000000000009BC3                 db    0
.eh_frame:0000000000009BC4                 db  0Ch
.eh_frame:0000000000009BC5                 db 0ACh
.eh_frame:0000000000009BC6                 db 0FFh
.eh_frame:0000000000009BC7                 db 0FFh
.eh_frame:0000000000009BC8                 db 0ABh
.eh_frame:0000000000009BC9                 db    1
.eh_frame:0000000000009BCA                 db    0
.eh_frame:0000000000009BCB                 db    0
.eh_frame:0000000000009BCC                 db    0
.eh_frame:0000000000009BCD                 db  42h ; B
.eh_frame:0000000000009BCE                 db  0Eh
.eh_frame:0000000000009BCF                 db  10h
.eh_frame:0000000000009BD0                 db  8Fh
.eh_frame:0000000000009BD1                 db    2
.eh_frame:0000000000009BD2                 db  42h ; B
.eh_frame:0000000000009BD3                 db  0Eh
.eh_frame:0000000000009BD4                 db  18h
.eh_frame:0000000000009BD5                 db  8Eh
.eh_frame:0000000000009BD6                 db    3
.eh_frame:0000000000009BD7                 db  45h ; E
.eh_frame:0000000000009BD8                 db  0Eh
.eh_frame:0000000000009BD9                 db  20h
.eh_frame:0000000000009BDA                 db  8Dh
.eh_frame:0000000000009BDB                 db    4
.eh_frame:0000000000009BDC                 db  42h ; B
.eh_frame:0000000000009BDD                 db  0Eh
.eh_frame:0000000000009BDE                 db  28h ; (
.eh_frame:0000000000009BDF                 db  8Ch
.eh_frame:0000000000009BE0                 db    5
.eh_frame:0000000000009BE1                 db  44h ; D
.eh_frame:0000000000009BE2                 db  0Eh
.eh_frame:0000000000009BE3                 db  30h ; 0
.eh_frame:0000000000009BE4                 db  86h
.eh_frame:0000000000009BE5                 db    6
.eh_frame:0000000000009BE6                 db  41h ; A
.eh_frame:0000000000009BE7                 db  0Eh
.eh_frame:0000000000009BE8                 db  38h ; 8
.eh_frame:0000000000009BE9                 db  83h
.eh_frame:0000000000009BEA                 db    7
.eh_frame:0000000000009BEB                 db  47h ; G
.eh_frame:0000000000009BEC                 db  0Eh
.eh_frame:0000000000009BED                 db  60h ; `
.eh_frame:0000000000009BEE                 db    2
.eh_frame:0000000000009BEF                 db  99h
.eh_frame:0000000000009BF0                 db  0Eh
.eh_frame:0000000000009BF1                 db  68h ; h
.eh_frame:0000000000009BF2                 db  5Fh ; _
.eh_frame:0000000000009BF3                 db  0Eh
.eh_frame:0000000000009BF4                 db  70h ; p
.eh_frame:0000000000009BF5                 db  46h ; F
.eh_frame:0000000000009BF6                 db  0Eh
.eh_frame:0000000000009BF7                 db  78h ; x
.eh_frame:0000000000009BF8                 db  42h ; B
.eh_frame:0000000000009BF9                 db  0Eh
.eh_frame:0000000000009BFA                 db  80h
.eh_frame:0000000000009BFB                 db    1
.eh_frame:0000000000009BFC                 db  59h ; Y
.eh_frame:0000000000009BFD                 db  0Eh
.eh_frame:0000000000009BFE                 db  60h ; `
.eh_frame:0000000000009BFF                 db    2
.eh_frame:0000000000009C00                 db  40h ; @
.eh_frame:0000000000009C01                 db  0Eh
.eh_frame:0000000000009C02                 db  68h ; h
.eh_frame:0000000000009C03                 db  4Bh ; K
.eh_frame:0000000000009C04                 db  0Eh
.eh_frame:0000000000009C05                 db  70h ; p
.eh_frame:0000000000009C06                 db  43h ; C
.eh_frame:0000000000009C07                 db  0Eh
.eh_frame:0000000000009C08                 db  78h ; x
.eh_frame:0000000000009C09                 db  45h ; E
.eh_frame:0000000000009C0A                 db  0Eh
.eh_frame:0000000000009C0B                 db  80h
.eh_frame:0000000000009C0C                 db    1
.eh_frame:0000000000009C0D                 db  5Eh ; ^
.eh_frame:0000000000009C0E                 db  0Eh
.eh_frame:0000000000009C0F                 db  60h ; `
.eh_frame:0000000000009C10                 db  4Ch ; L
.eh_frame:0000000000009C11                 db  0Ah
.eh_frame:0000000000009C12                 db  0Eh
.eh_frame:0000000000009C13                 db  38h ; 8
.eh_frame:0000000000009C14                 db  44h ; D
.eh_frame:0000000000009C15                 db  0Eh
.eh_frame:0000000000009C16                 db  30h ; 0
.eh_frame:0000000000009C17                 db  41h ; A
.eh_frame:0000000000009C18                 db  0Eh
.eh_frame:0000000000009C19                 db  28h ; (
.eh_frame:0000000000009C1A                 db  42h ; B
.eh_frame:0000000000009C1B                 db  0Eh
.eh_frame:0000000000009C1C                 db  20h
.eh_frame:0000000000009C1D                 db  42h ; B
.eh_frame:0000000000009C1E                 db  0Eh
.eh_frame:0000000000009C1F                 db  18h
.eh_frame:0000000000009C20                 db  42h ; B
.eh_frame:0000000000009C21                 db  0Eh
.eh_frame:0000000000009C22                 db  10h
.eh_frame:0000000000009C23                 db  42h ; B
.eh_frame:0000000000009C24                 db  0Eh
.eh_frame:0000000000009C25                 db    8
.eh_frame:0000000000009C26                 db  46h ; F
.eh_frame:0000000000009C27                 db  0Bh
.eh_frame:0000000000009C28                 db  28h ; (
.eh_frame:0000000000009C29                 db    0
.eh_frame:0000000000009C2A                 db    0
.eh_frame:0000000000009C2B                 db    0
.eh_frame:0000000000009C2C                 db  24h ; $
.eh_frame:0000000000009C2D                 db    4
.eh_frame:0000000000009C2E                 db    0
.eh_frame:0000000000009C2F                 db    0
.eh_frame:0000000000009C30                 db  50h ; P
.eh_frame:0000000000009C31                 db 0ADh
.eh_frame:0000000000009C32                 db 0FFh
.eh_frame:0000000000009C33                 db 0FFh
.eh_frame:0000000000009C34                 db  36h ; 6
.eh_frame:0000000000009C35                 db    0
.eh_frame:0000000000009C36                 db    0
.eh_frame:0000000000009C37                 db    0
.eh_frame:0000000000009C38                 db    0
.eh_frame:0000000000009C39                 db  42h ; B
.eh_frame:0000000000009C3A                 db  0Eh
.eh_frame:0000000000009C3B                 db  10h
.eh_frame:0000000000009C3C                 db  8Ch
.eh_frame:0000000000009C3D                 db    2
.eh_frame:0000000000009C3E                 db  41h ; A
.eh_frame:0000000000009C3F                 db  0Eh
.eh_frame:0000000000009C40                 db  18h
.eh_frame:0000000000009C41                 db  86h
.eh_frame:0000000000009C42                 db    3
.eh_frame:0000000000009C43                 db  41h ; A
.eh_frame:0000000000009C44                 db  0Eh
.eh_frame:0000000000009C45                 db  20h
.eh_frame:0000000000009C46                 db  83h
.eh_frame:0000000000009C47                 db    4
.eh_frame:0000000000009C48                 db  6Eh ; n
.eh_frame:0000000000009C49                 db  0Eh
.eh_frame:0000000000009C4A                 db  18h
.eh_frame:0000000000009C4B                 db  41h ; A
.eh_frame:0000000000009C4C                 db  0Eh
.eh_frame:0000000000009C4D                 db  10h
.eh_frame:0000000000009C4E                 db  42h ; B
.eh_frame:0000000000009C4F                 db  0Eh
.eh_frame:0000000000009C50                 db    8
.eh_frame:0000000000009C51                 db    0
.eh_frame:0000000000009C52                 db    0
.eh_frame:0000000000009C53                 db    0
.eh_frame:0000000000009C54                 db  10h
.eh_frame:0000000000009C55                 db    0
.eh_frame:0000000000009C56                 db    0
.eh_frame:0000000000009C57                 db    0
.eh_frame:0000000000009C58                 db  50h ; P
.eh_frame:0000000000009C59                 db    4
.eh_frame:0000000000009C5A                 db    0
.eh_frame:0000000000009C5B                 db    0
.eh_frame:0000000000009C5C                 db  64h ; d
.eh_frame:0000000000009C5D                 db 0ADh
.eh_frame:0000000000009C5E                 db 0FFh
.eh_frame:0000000000009C5F                 db 0FFh
.eh_frame:0000000000009C60                 db  11h
.eh_frame:0000000000009C61                 db    0
.eh_frame:0000000000009C62                 db    0
.eh_frame:0000000000009C63                 db    0
.eh_frame:0000000000009C64                 db    0
.eh_frame:0000000000009C65                 db    0
.eh_frame:0000000000009C66                 db    0
.eh_frame:0000000000009C67                 db    0
.eh_frame:0000000000009C68                 db  10h
.eh_frame:0000000000009C69                 db    0
.eh_frame:0000000000009C6A                 db    0
.eh_frame:0000000000009C6B                 db    0
.eh_frame:0000000000009C6C                 db  64h ; d
.eh_frame:0000000000009C6D                 db    4
.eh_frame:0000000000009C6E                 db    0
.eh_frame:0000000000009C6F                 db    0
.eh_frame:0000000000009C70                 db  70h ; p
.eh_frame:0000000000009C71                 db 0ADh
.eh_frame:0000000000009C72                 db 0FFh
.eh_frame:0000000000009C73                 db 0FFh
.eh_frame:0000000000009C74                 db  11h
.eh_frame:0000000000009C75                 db    0
.eh_frame:0000000000009C76                 db    0
.eh_frame:0000000000009C77                 db    0
.eh_frame:0000000000009C78                 db    0
.eh_frame:0000000000009C79                 db    0
.eh_frame:0000000000009C7A                 db    0
.eh_frame:0000000000009C7B                 db    0
.eh_frame:0000000000009C7C                 db  10h
.eh_frame:0000000000009C7D                 db    0
.eh_frame:0000000000009C7E                 db    0
.eh_frame:0000000000009C7F                 db    0
.eh_frame:0000000000009C80                 db  78h ; x
.eh_frame:0000000000009C81                 db    4
.eh_frame:0000000000009C82                 db    0
.eh_frame:0000000000009C83                 db    0
.eh_frame:0000000000009C84                 db  7Ch ; |
.eh_frame:0000000000009C85                 db 0ADh
.eh_frame:0000000000009C86                 db 0FFh
.eh_frame:0000000000009C87                 db 0FFh
.eh_frame:0000000000009C88                 db  35h ; 5
.eh_frame:0000000000009C89                 db    0
.eh_frame:0000000000009C8A                 db    0
.eh_frame:0000000000009C8B                 db    0
.eh_frame:0000000000009C8C                 db    0
.eh_frame:0000000000009C8D                 db    0
.eh_frame:0000000000009C8E                 db    0
.eh_frame:0000000000009C8F                 db    0
.eh_frame:0000000000009C90                 db  10h
.eh_frame:0000000000009C91                 db    0
.eh_frame:0000000000009C92                 db    0
.eh_frame:0000000000009C93                 db    0
.eh_frame:0000000000009C94                 db  8Ch
.eh_frame:0000000000009C95                 db    4
.eh_frame:0000000000009C96                 db    0
.eh_frame:0000000000009C97                 db    0
.eh_frame:0000000000009C98                 db 0A8h
.eh_frame:0000000000009C99                 db 0ADh
.eh_frame:0000000000009C9A                 db 0FFh
.eh_frame:0000000000009C9B                 db 0FFh
.eh_frame:0000000000009C9C                 db  15h
.eh_frame:0000000000009C9D                 db    0
.eh_frame:0000000000009C9E                 db    0
.eh_frame:0000000000009C9F                 db    0
.eh_frame:0000000000009CA0                 db    0
.eh_frame:0000000000009CA1                 db    0
.eh_frame:0000000000009CA2                 db    0
.eh_frame:0000000000009CA3                 db    0
.eh_frame:0000000000009CA4                 db  10h
.eh_frame:0000000000009CA5                 db    0
.eh_frame:0000000000009CA6                 db    0
.eh_frame:0000000000009CA7                 db    0
.eh_frame:0000000000009CA8                 db 0A0h
.eh_frame:0000000000009CA9                 db    4
.eh_frame:0000000000009CAA                 db    0
.eh_frame:0000000000009CAB                 db    0
.eh_frame:0000000000009CAC                 db 0B4h
.eh_frame:0000000000009CAD                 db 0ADh
.eh_frame:0000000000009CAE                 db 0FFh
.eh_frame:0000000000009CAF                 db 0FFh
.eh_frame:0000000000009CB0                 db  30h ; 0
.eh_frame:0000000000009CB1                 db    0
.eh_frame:0000000000009CB2                 db    0
.eh_frame:0000000000009CB3                 db    0
.eh_frame:0000000000009CB4                 db    0
.eh_frame:0000000000009CB5                 db  6Bh ; k
.eh_frame:0000000000009CB6                 db  0Eh
.eh_frame:0000000000009CB7                 db  10h
.eh_frame:0000000000009CB8                 db  50h ; P
.eh_frame:0000000000009CB9                 db    0
.eh_frame:0000000000009CBA                 db    0
.eh_frame:0000000000009CBB                 db    0
.eh_frame:0000000000009CBC                 db 0B4h
.eh_frame:0000000000009CBD                 db    4
.eh_frame:0000000000009CBE                 db    0
.eh_frame:0000000000009CBF                 db    0
.eh_frame:0000000000009CC0                 db 0D0h
.eh_frame:0000000000009CC1                 db 0ADh
.eh_frame:0000000000009CC2                 db 0FFh
.eh_frame:0000000000009CC3                 db 0FFh
.eh_frame:0000000000009CC4                 db  74h ; t
.eh_frame:0000000000009CC5                 db    0
.eh_frame:0000000000009CC6                 db    0
.eh_frame:0000000000009CC7                 db    0
.eh_frame:0000000000009CC8                 db    0
.eh_frame:0000000000009CC9                 db  42h ; B
.eh_frame:0000000000009CCA                 db  0Eh
.eh_frame:0000000000009CCB                 db  10h
.eh_frame:0000000000009CCC                 db  8Fh
.eh_frame:0000000000009CCD                 db    2
.eh_frame:0000000000009CCE                 db  42h ; B
.eh_frame:0000000000009CCF                 db  0Eh
.eh_frame:0000000000009CD0                 db  18h
.eh_frame:0000000000009CD1                 db  8Eh
.eh_frame:0000000000009CD2                 db    3
.eh_frame:0000000000009CD3                 db  49h ; I
.eh_frame:0000000000009CD4                 db  0Eh
.eh_frame:0000000000009CD5                 db  20h
.eh_frame:0000000000009CD6                 db  8Dh
.eh_frame:0000000000009CD7                 db    4
.eh_frame:0000000000009CD8                 db  42h ; B
.eh_frame:0000000000009CD9                 db  0Eh
.eh_frame:0000000000009CDA                 db  28h ; (
.eh_frame:0000000000009CDB                 db  8Ch
.eh_frame:0000000000009CDC                 db    5
.eh_frame:0000000000009CDD                 db  44h ; D
.eh_frame:0000000000009CDE                 db  0Eh
.eh_frame:0000000000009CDF                 db  30h ; 0
.eh_frame:0000000000009CE0                 db  86h
.eh_frame:0000000000009CE1                 db    6
.eh_frame:0000000000009CE2                 db  41h ; A
.eh_frame:0000000000009CE3                 db  0Eh
.eh_frame:0000000000009CE4                 db  38h ; 8
.eh_frame:0000000000009CE5                 db  83h
.eh_frame:0000000000009CE6                 db    7
.eh_frame:0000000000009CE7                 db  4Dh ; M
.eh_frame:0000000000009CE8                 db  0Eh
.eh_frame:0000000000009CE9                 db  50h ; P
.eh_frame:0000000000009CEA                 db  5Fh ; _
.eh_frame:0000000000009CEB                 db  0Eh
.eh_frame:0000000000009CEC                 db  58h ; X
.eh_frame:0000000000009CED                 db  47h ; G
.eh_frame:0000000000009CEE                 db  0Eh
.eh_frame:0000000000009CEF                 db  60h ; `
.eh_frame:0000000000009CF0                 db  46h ; F
.eh_frame:0000000000009CF1                 db  0Eh
.eh_frame:0000000000009CF2                 db  68h ; h
.eh_frame:0000000000009CF3                 db  44h ; D
.eh_frame:0000000000009CF4                 db  0Eh
.eh_frame:0000000000009CF5                 db  70h ; p
.eh_frame:0000000000009CF6                 db  58h ; X
.eh_frame:0000000000009CF7                 db  0Eh
.eh_frame:0000000000009CF8                 db  38h ; 8
.eh_frame:0000000000009CF9                 db  41h ; A
.eh_frame:0000000000009CFA                 db  0Eh
.eh_frame:0000000000009CFB                 db  30h ; 0
.eh_frame:0000000000009CFC                 db  41h ; A
.eh_frame:0000000000009CFD                 db  0Eh
.eh_frame:0000000000009CFE                 db  28h ; (
.eh_frame:0000000000009CFF                 db  42h ; B
.eh_frame:0000000000009D00                 db  0Eh
.eh_frame:0000000000009D01                 db  20h
.eh_frame:0000000000009D02                 db  42h ; B
.eh_frame:0000000000009D03                 db  0Eh
.eh_frame:0000000000009D04                 db  18h
.eh_frame:0000000000009D05                 db  42h ; B
.eh_frame:0000000000009D06                 db  0Eh
.eh_frame:0000000000009D07                 db  10h
.eh_frame:0000000000009D08                 db  42h ; B
.eh_frame:0000000000009D09                 db  0Eh
.eh_frame:0000000000009D0A                 db    8
.eh_frame:0000000000009D0B                 db    0
.eh_frame:0000000000009D0C                 db  68h ; h
.eh_frame:0000000000009D0D                 db    0
.eh_frame:0000000000009D0E                 db    0
.eh_frame:0000000000009D0F                 db    0
.eh_frame:0000000000009D10                 db    8
.eh_frame:0000000000009D11                 db    5
.eh_frame:0000000000009D12                 db    0
.eh_frame:0000000000009D13                 db    0
.eh_frame:0000000000009D14                 db 0FCh
.eh_frame:0000000000009D15                 db 0ADh
.eh_frame:0000000000009D16                 db 0FFh
.eh_frame:0000000000009D17                 db 0FFh
.eh_frame:0000000000009D18                 db 0E3h
.eh_frame:0000000000009D19                 db    0
.eh_frame:0000000000009D1A                 db    0
.eh_frame:0000000000009D1B                 db    0
.eh_frame:0000000000009D1C                 db    0
.eh_frame:0000000000009D1D                 db  42h ; B
.eh_frame:0000000000009D1E                 db  0Eh
.eh_frame:0000000000009D1F                 db  10h
.eh_frame:0000000000009D20                 db  8Fh
.eh_frame:0000000000009D21                 db    2
.eh_frame:0000000000009D22                 db  42h ; B
.eh_frame:0000000000009D23                 db  0Eh
.eh_frame:0000000000009D24                 db  18h
.eh_frame:0000000000009D25                 db  8Eh
.eh_frame:0000000000009D26                 db    3
.eh_frame:0000000000009D27                 db  49h ; I
.eh_frame:0000000000009D28                 db  0Eh
.eh_frame:0000000000009D29                 db  20h
.eh_frame:0000000000009D2A                 db  8Dh
.eh_frame:0000000000009D2B                 db    4
.eh_frame:0000000000009D2C                 db  42h ; B
.eh_frame:0000000000009D2D                 db  0Eh
.eh_frame:0000000000009D2E                 db  28h ; (
.eh_frame:0000000000009D2F                 db  8Ch
.eh_frame:0000000000009D30                 db    5
.eh_frame:0000000000009D31                 db  44h ; D
.eh_frame:0000000000009D32                 db  0Eh
.eh_frame:0000000000009D33                 db  30h ; 0
.eh_frame:0000000000009D34                 db  86h
.eh_frame:0000000000009D35                 db    6
.eh_frame:0000000000009D36                 db  41h ; A
.eh_frame:0000000000009D37                 db  0Eh
.eh_frame:0000000000009D38                 db  38h ; 8
.eh_frame:0000000000009D39                 db  83h
.eh_frame:0000000000009D3A                 db    7
.eh_frame:0000000000009D3B                 db  4Dh ; M
.eh_frame:0000000000009D3C                 db  0Eh
.eh_frame:0000000000009D3D                 db  70h ; p
.eh_frame:0000000000009D3E                 db  65h ; e
.eh_frame:0000000000009D3F                 db  0Eh
.eh_frame:0000000000009D40                 db  78h ; x
.eh_frame:0000000000009D41                 db  4Dh ; M
.eh_frame:0000000000009D42                 db  0Eh
.eh_frame:0000000000009D43                 db  80h
.eh_frame:0000000000009D44                 db    1
.eh_frame:0000000000009D45                 db  46h ; F
.eh_frame:0000000000009D46                 db  0Eh
.eh_frame:0000000000009D47                 db  88h
.eh_frame:0000000000009D48                 db    1
.eh_frame:0000000000009D49                 db  42h ; B
.eh_frame:0000000000009D4A                 db  0Eh
.eh_frame:0000000000009D4B                 db  90h
.eh_frame:0000000000009D4C                 db    1
.eh_frame:0000000000009D4D                 db  5Eh ; ^
.eh_frame:0000000000009D4E                 db  0Eh
.eh_frame:0000000000009D4F                 db  70h ; p
.eh_frame:0000000000009D50                 db  56h ; V
.eh_frame:0000000000009D51                 db  0Eh
.eh_frame:0000000000009D52                 db  78h ; x
.eh_frame:0000000000009D53                 db  43h ; C
.eh_frame:0000000000009D54                 db  0Eh
.eh_frame:0000000000009D55                 db  80h
.eh_frame:0000000000009D56                 db    1
.eh_frame:0000000000009D57                 db  43h ; C
.eh_frame:0000000000009D58                 db  0Eh
.eh_frame:0000000000009D59                 db  88h
.eh_frame:0000000000009D5A                 db    1
.eh_frame:0000000000009D5B                 db  56h ; V
.eh_frame:0000000000009D5C                 db  0Eh
.eh_frame:0000000000009D5D                 db  90h
.eh_frame:0000000000009D5E                 db    1
.eh_frame:0000000000009D5F                 db  52h ; R
.eh_frame:0000000000009D60                 db  0Eh
.eh_frame:0000000000009D61                 db  70h ; p
.eh_frame:0000000000009D62                 db  5Bh ; [
.eh_frame:0000000000009D63                 db  0Eh
.eh_frame:0000000000009D64                 db  38h ; 8
.eh_frame:0000000000009D65                 db  41h ; A
.eh_frame:0000000000009D66                 db  0Eh
.eh_frame:0000000000009D67                 db  30h ; 0
.eh_frame:0000000000009D68                 db  41h ; A
.eh_frame:0000000000009D69                 db  0Eh
.eh_frame:0000000000009D6A                 db  28h ; (
.eh_frame:0000000000009D6B                 db  42h ; B
.eh_frame:0000000000009D6C                 db  0Eh
.eh_frame:0000000000009D6D                 db  20h
.eh_frame:0000000000009D6E                 db  42h ; B
.eh_frame:0000000000009D6F                 db  0Eh
.eh_frame:0000000000009D70                 db  18h
.eh_frame:0000000000009D71                 db  42h ; B
.eh_frame:0000000000009D72                 db  0Eh
.eh_frame:0000000000009D73                 db  10h
.eh_frame:0000000000009D74                 db  42h ; B
.eh_frame:0000000000009D75                 db  0Eh
.eh_frame:0000000000009D76                 db    8
.eh_frame:0000000000009D77                 db    0
.eh_frame:0000000000009D78                 db  10h
.eh_frame:0000000000009D79                 db    0
.eh_frame:0000000000009D7A                 db    0
.eh_frame:0000000000009D7B                 db    0
.eh_frame:0000000000009D7C                 db  74h ; t
.eh_frame:0000000000009D7D                 db    5
.eh_frame:0000000000009D7E                 db    0
.eh_frame:0000000000009D7F                 db    0
.eh_frame:0000000000009D80                 db  80h
.eh_frame:0000000000009D81                 db 0AEh
.eh_frame:0000000000009D82                 db 0FFh
.eh_frame:0000000000009D83                 db 0FFh
.eh_frame:0000000000009D84                 db  0Ah
.eh_frame:0000000000009D85                 db    0
.eh_frame:0000000000009D86                 db    0
.eh_frame:0000000000009D87                 db    0
.eh_frame:0000000000009D88                 db    0
.eh_frame:0000000000009D89                 db    0
.eh_frame:0000000000009D8A                 db    0
.eh_frame:0000000000009D8B                 db    0
.eh_frame:0000000000009D8C                 db  28h ; (
.eh_frame:0000000000009D8D                 db    0
.eh_frame:0000000000009D8E                 db    0
.eh_frame:0000000000009D8F                 db    0
.eh_frame:0000000000009D90                 db  88h
.eh_frame:0000000000009D91                 db    5
.eh_frame:0000000000009D92                 db    0
.eh_frame:0000000000009D93                 db    0
.eh_frame:0000000000009D94                 db  7Ch ; |
.eh_frame:0000000000009D95                 db 0AEh
.eh_frame:0000000000009D96                 db 0FFh
.eh_frame:0000000000009D97                 db 0FFh
.eh_frame:0000000000009D98                 db  93h
.eh_frame:0000000000009D99                 db    0
.eh_frame:0000000000009D9A                 db    0
.eh_frame:0000000000009D9B                 db    0
.eh_frame:0000000000009D9C                 db    0
.eh_frame:0000000000009D9D                 db  48h ; H
.eh_frame:0000000000009D9E                 db  0Eh
.eh_frame:0000000000009D9F                 db  10h
.eh_frame:0000000000009DA0                 db  8Ch
.eh_frame:0000000000009DA1                 db    2
.eh_frame:0000000000009DA2                 db  48h ; H
.eh_frame:0000000000009DA3                 db  0Eh
.eh_frame:0000000000009DA4                 db  18h
.eh_frame:0000000000009DA5                 db  86h
.eh_frame:0000000000009DA6                 db    3
.eh_frame:0000000000009DA7                 db  41h ; A
.eh_frame:0000000000009DA8                 db  0Eh
.eh_frame:0000000000009DA9                 db  20h
.eh_frame:0000000000009DAA                 db  83h
.eh_frame:0000000000009DAB                 db    4
.eh_frame:0000000000009DAC                 db    2
.eh_frame:0000000000009DAD                 db  74h ; t
.eh_frame:0000000000009DAE                 db  0Eh
.eh_frame:0000000000009DAF                 db  18h
.eh_frame:0000000000009DB0                 db  4Bh ; K
.eh_frame:0000000000009DB1                 db  0Eh
.eh_frame:0000000000009DB2                 db  10h
.eh_frame:0000000000009DB3                 db  42h ; B
.eh_frame:0000000000009DB4                 db  0Eh
.eh_frame:0000000000009DB5                 db    8
.eh_frame:0000000000009DB6                 db    0
.eh_frame:0000000000009DB7                 db    0
.eh_frame:0000000000009DB8                 db  10h
.eh_frame:0000000000009DB9                 db    0
.eh_frame:0000000000009DBA                 db    0
.eh_frame:0000000000009DBB                 db    0
.eh_frame:0000000000009DBC                 db 0B4h
.eh_frame:0000000000009DBD                 db    5
.eh_frame:0000000000009DBE                 db    0
.eh_frame:0000000000009DBF                 db    0
.eh_frame:0000000000009DC0                 db 0F0h
.eh_frame:0000000000009DC1                 db 0AEh
.eh_frame:0000000000009DC2                 db 0FFh
.eh_frame:0000000000009DC3                 db 0FFh
.eh_frame:0000000000009DC4                 db  13h
.eh_frame:0000000000009DC5                 db    0
.eh_frame:0000000000009DC6                 db    0
.eh_frame:0000000000009DC7                 db    0
.eh_frame:0000000000009DC8                 db    0
.eh_frame:0000000000009DC9                 db    0
.eh_frame:0000000000009DCA                 db    0
.eh_frame:0000000000009DCB                 db    0
.eh_frame:0000000000009DCC                 db  10h
.eh_frame:0000000000009DCD                 db    0
.eh_frame:0000000000009DCE                 db    0
.eh_frame:0000000000009DCF                 db    0
.eh_frame:0000000000009DD0                 db 0C8h
.eh_frame:0000000000009DD1                 db    5
.eh_frame:0000000000009DD2                 db    0
.eh_frame:0000000000009DD3                 db    0
.eh_frame:0000000000009DD4                 db 0FCh
.eh_frame:0000000000009DD5                 db 0AEh
.eh_frame:0000000000009DD6                 db 0FFh
.eh_frame:0000000000009DD7                 db 0FFh
.eh_frame:0000000000009DD8                 db  0Ch
.eh_frame:0000000000009DD9                 db    0
.eh_frame:0000000000009DDA                 db    0
.eh_frame:0000000000009DDB                 db    0
.eh_frame:0000000000009DDC                 db    0
.eh_frame:0000000000009DDD                 db    0
.eh_frame:0000000000009DDE                 db    0
.eh_frame:0000000000009DDF                 db    0
.eh_frame:0000000000009DE0                 db  10h
.eh_frame:0000000000009DE1                 db    0
.eh_frame:0000000000009DE2                 db    0
.eh_frame:0000000000009DE3                 db    0
.eh_frame:0000000000009DE4                 db 0DCh
.eh_frame:0000000000009DE5                 db    5
.eh_frame:0000000000009DE6                 db    0
.eh_frame:0000000000009DE7                 db    0
.eh_frame:0000000000009DE8                 db 0F8h
.eh_frame:0000000000009DE9                 db 0AEh
.eh_frame:0000000000009DEA                 db 0FFh
.eh_frame:0000000000009DEB                 db 0FFh
.eh_frame:0000000000009DEC                 db  18h
.eh_frame:0000000000009DED                 db    0
.eh_frame:0000000000009DEE                 db    0
.eh_frame:0000000000009DEF                 db    0
.eh_frame:0000000000009DF0                 db    0
.eh_frame:0000000000009DF1                 db    0
.eh_frame:0000000000009DF2                 db    0
.eh_frame:0000000000009DF3                 db    0
.eh_frame:0000000000009DF4                 db  10h
.eh_frame:0000000000009DF5                 db    0
.eh_frame:0000000000009DF6                 db    0
.eh_frame:0000000000009DF7                 db    0
.eh_frame:0000000000009DF8                 db 0F0h
.eh_frame:0000000000009DF9                 db    5
.eh_frame:0000000000009DFA                 db    0
.eh_frame:0000000000009DFB                 db    0
.eh_frame:0000000000009DFC                 db    4
.eh_frame:0000000000009DFD                 db 0AFh
.eh_frame:0000000000009DFE                 db 0FFh
.eh_frame:0000000000009DFF                 db 0FFh
.eh_frame:0000000000009E00                 db  14h
.eh_frame:0000000000009E01                 db    0
.eh_frame:0000000000009E02                 db    0
.eh_frame:0000000000009E03                 db    0
.eh_frame:0000000000009E04                 db    0
.eh_frame:0000000000009E05                 db    0
.eh_frame:0000000000009E06                 db    0
.eh_frame:0000000000009E07                 db    0
.eh_frame:0000000000009E08                 db  18h
.eh_frame:0000000000009E09                 db    0
.eh_frame:0000000000009E0A                 db    0
.eh_frame:0000000000009E0B                 db    0
.eh_frame:0000000000009E0C                 db    4
.eh_frame:0000000000009E0D                 db    6
.eh_frame:0000000000009E0E                 db    0
.eh_frame:0000000000009E0F                 db    0
.eh_frame:0000000000009E10                 db  10h
.eh_frame:0000000000009E11                 db 0AFh
.eh_frame:0000000000009E12                 db 0FFh
.eh_frame:0000000000009E13                 db 0FFh
.eh_frame:0000000000009E14                 db  8Eh
.eh_frame:0000000000009E15                 db    0
.eh_frame:0000000000009E16                 db    0
.eh_frame:0000000000009E17                 db    0
.eh_frame:0000000000009E18                 db    0
.eh_frame:0000000000009E19                 db  44h ; D
.eh_frame:0000000000009E1A                 db  0Eh
.eh_frame:0000000000009E1B                 db  50h ; P
.eh_frame:0000000000009E1C                 db    2
.eh_frame:0000000000009E1D                 db  7Fh ; 
.eh_frame:0000000000009E1E                 db  0Ah
.eh_frame:0000000000009E1F                 db  0Eh
.eh_frame:0000000000009E20                 db    8
.eh_frame:0000000000009E21                 db  41h ; A
.eh_frame:0000000000009E22                 db  0Bh
.eh_frame:0000000000009E23                 db    0
.eh_frame:0000000000009E24                 db  18h
.eh_frame:0000000000009E25                 db    0
.eh_frame:0000000000009E26                 db    0
.eh_frame:0000000000009E27                 db    0
.eh_frame:0000000000009E28                 db  20h
.eh_frame:0000000000009E29                 db    6
.eh_frame:0000000000009E2A                 db    0
.eh_frame:0000000000009E2B                 db    0
.eh_frame:0000000000009E2C                 db  84h
.eh_frame:0000000000009E2D                 db 0AFh
.eh_frame:0000000000009E2E                 db 0FFh
.eh_frame:0000000000009E2F                 db 0FFh
.eh_frame:0000000000009E30                 db  8Ah
.eh_frame:0000000000009E31                 db    0
.eh_frame:0000000000009E32                 db    0
.eh_frame:0000000000009E33                 db    0
.eh_frame:0000000000009E34                 db    0
.eh_frame:0000000000009E35                 db  44h ; D
.eh_frame:0000000000009E36                 db  0Eh
.eh_frame:0000000000009E37                 db  50h ; P
.eh_frame:0000000000009E38                 db    2
.eh_frame:0000000000009E39                 db  7Bh ; {
.eh_frame:0000000000009E3A                 db  0Ah
.eh_frame:0000000000009E3B                 db  0Eh
.eh_frame:0000000000009E3C                 db    8
.eh_frame:0000000000009E3D                 db  41h ; A
.eh_frame:0000000000009E3E                 db  0Bh
.eh_frame:0000000000009E3F                 db    0
.eh_frame:0000000000009E40                 db  10h
.eh_frame:0000000000009E41                 db    0
.eh_frame:0000000000009E42                 db    0
.eh_frame:0000000000009E43                 db    0
.eh_frame:0000000000009E44                 db  3Ch ; <
.eh_frame:0000000000009E45                 db    6
.eh_frame:0000000000009E46                 db    0
.eh_frame:0000000000009E47                 db    0
.eh_frame:0000000000009E48                 db 0F8h
.eh_frame:0000000000009E49                 db 0AFh
.eh_frame:0000000000009E4A                 db 0FFh
.eh_frame:0000000000009E4B                 db 0FFh
.eh_frame:0000000000009E4C                 db  0Ch
.eh_frame:0000000000009E4D                 db    0
.eh_frame:0000000000009E4E                 db    0
.eh_frame:0000000000009E4F                 db    0
.eh_frame:0000000000009E50                 db    0
.eh_frame:0000000000009E51                 db    0
.eh_frame:0000000000009E52                 db    0
.eh_frame:0000000000009E53                 db    0
.eh_frame:0000000000009E54                 db  10h
.eh_frame:0000000000009E55                 db    0
.eh_frame:0000000000009E56                 db    0
.eh_frame:0000000000009E57                 db    0
.eh_frame:0000000000009E58                 db  50h ; P
.eh_frame:0000000000009E59                 db    6
.eh_frame:0000000000009E5A                 db    0
.eh_frame:0000000000009E5B                 db    0
.eh_frame:0000000000009E5C                 db 0F4h
.eh_frame:0000000000009E5D                 db 0AFh
.eh_frame:0000000000009E5E                 db 0FFh
.eh_frame:0000000000009E5F                 db 0FFh
.eh_frame:0000000000009E60                 db  0Fh
.eh_frame:0000000000009E61                 db    0
.eh_frame:0000000000009E62                 db    0
.eh_frame:0000000000009E63                 db    0
.eh_frame:0000000000009E64                 db    0
.eh_frame:0000000000009E65                 db    0
.eh_frame:0000000000009E66                 db    0
.eh_frame:0000000000009E67                 db    0
.eh_frame:0000000000009E68                 db  18h
.eh_frame:0000000000009E69                 db    0
.eh_frame:0000000000009E6A                 db    0
.eh_frame:0000000000009E6B                 db    0
.eh_frame:0000000000009E6C                 db  64h ; d
.eh_frame:0000000000009E6D                 db    6
.eh_frame:0000000000009E6E                 db    0
.eh_frame:0000000000009E6F                 db    0
.eh_frame:0000000000009E70                 db 0F0h
.eh_frame:0000000000009E71                 db 0AFh
.eh_frame:0000000000009E72                 db 0FFh
.eh_frame:0000000000009E73                 db 0FFh
.eh_frame:0000000000009E74                 db  98h
.eh_frame:0000000000009E75                 db    0
.eh_frame:0000000000009E76                 db    0
.eh_frame:0000000000009E77                 db    0
.eh_frame:0000000000009E78                 db    0
.eh_frame:0000000000009E79                 db  44h ; D
.eh_frame:0000000000009E7A                 db  0Eh
.eh_frame:0000000000009E7B                 db  50h ; P
.eh_frame:0000000000009E7C                 db    2
.eh_frame:0000000000009E7D                 db  8Eh
.eh_frame:0000000000009E7E                 db  0Ah
.eh_frame:0000000000009E7F                 db  0Eh
.eh_frame:0000000000009E80                 db    8
.eh_frame:0000000000009E81                 db  41h ; A
.eh_frame:0000000000009E82                 db  0Bh
.eh_frame:0000000000009E83                 db    0
.eh_frame:0000000000009E84                 db  10h
.eh_frame:0000000000009E85                 db    0
.eh_frame:0000000000009E86                 db    0
.eh_frame:0000000000009E87                 db    0
.eh_frame:0000000000009E88                 db  80h
.eh_frame:0000000000009E89                 db    6
.eh_frame:0000000000009E8A                 db    0
.eh_frame:0000000000009E8B                 db    0
.eh_frame:0000000000009E8C                 db  74h ; t
.eh_frame:0000000000009E8D                 db 0B0h
.eh_frame:0000000000009E8E                 db 0FFh
.eh_frame:0000000000009E8F                 db 0FFh
.eh_frame:0000000000009E90                 db  10h
.eh_frame:0000000000009E91                 db    0
.eh_frame:0000000000009E92                 db    0
.eh_frame:0000000000009E93                 db    0
.eh_frame:0000000000009E94                 db    0
.eh_frame:0000000000009E95                 db    0
.eh_frame:0000000000009E96                 db    0
.eh_frame:0000000000009E97                 db    0
.eh_frame:0000000000009E98                 db  10h
.eh_frame:0000000000009E99                 db    0
.eh_frame:0000000000009E9A                 db    0
.eh_frame:0000000000009E9B                 db    0
.eh_frame:0000000000009E9C                 db  94h
.eh_frame:0000000000009E9D                 db    6
.eh_frame:0000000000009E9E                 db    0
.eh_frame:0000000000009E9F                 db    0
.eh_frame:0000000000009EA0                 db  70h ; p
.eh_frame:0000000000009EA1                 db 0B0h
.eh_frame:0000000000009EA2                 db 0FFh
.eh_frame:0000000000009EA3                 db 0FFh
.eh_frame:0000000000009EA4                 db  11h
.eh_frame:0000000000009EA5                 db    0
.eh_frame:0000000000009EA6                 db    0
.eh_frame:0000000000009EA7                 db    0
.eh_frame:0000000000009EA8                 db    0
.eh_frame:0000000000009EA9                 db    0
.eh_frame:0000000000009EAA                 db    0
.eh_frame:0000000000009EAB                 db    0
.eh_frame:0000000000009EAC                 db  10h
.eh_frame:0000000000009EAD                 db    0
.eh_frame:0000000000009EAE                 db    0
.eh_frame:0000000000009EAF                 db    0
.eh_frame:0000000000009EB0                 db 0A8h
.eh_frame:0000000000009EB1                 db    6
.eh_frame:0000000000009EB2                 db    0
.eh_frame:0000000000009EB3                 db    0
.eh_frame:0000000000009EB4                 db  7Ch ; |
.eh_frame:0000000000009EB5                 db 0B0h
.eh_frame:0000000000009EB6                 db 0FFh
.eh_frame:0000000000009EB7                 db 0FFh
.eh_frame:0000000000009EB8                 db  0Ah
.eh_frame:0000000000009EB9                 db    0
.eh_frame:0000000000009EBA                 db    0
.eh_frame:0000000000009EBB                 db    0
.eh_frame:0000000000009EBC                 db    0
.eh_frame:0000000000009EBD                 db    0
.eh_frame:0000000000009EBE                 db    0
.eh_frame:0000000000009EBF                 db    0
.eh_frame:0000000000009EC0                 db  18h
.eh_frame:0000000000009EC1                 db    0
.eh_frame:0000000000009EC2                 db    0
.eh_frame:0000000000009EC3                 db    0
.eh_frame:0000000000009EC4                 db 0BCh
.eh_frame:0000000000009EC5                 db    6
.eh_frame:0000000000009EC6                 db    0
.eh_frame:0000000000009EC7                 db    0
.eh_frame:0000000000009EC8                 db  78h ; x
.eh_frame:0000000000009EC9                 db 0B0h
.eh_frame:0000000000009ECA                 db 0FFh
.eh_frame:0000000000009ECB                 db 0FFh
.eh_frame:0000000000009ECC                 db  8Eh
.eh_frame:0000000000009ECD                 db    0
.eh_frame:0000000000009ECE                 db    0
.eh_frame:0000000000009ECF                 db    0
.eh_frame:0000000000009ED0                 db    0
.eh_frame:0000000000009ED1                 db  44h ; D
.eh_frame:0000000000009ED2                 db  0Eh
.eh_frame:0000000000009ED3                 db  50h ; P
.eh_frame:0000000000009ED4                 db    2
.eh_frame:0000000000009ED5                 db  7Fh ; 
.eh_frame:0000000000009ED6                 db  0Ah
.eh_frame:0000000000009ED7                 db  0Eh
.eh_frame:0000000000009ED8                 db    8
.eh_frame:0000000000009ED9                 db  41h ; A
.eh_frame:0000000000009EDA                 db  0Bh
.eh_frame:0000000000009EDB                 db    0
.eh_frame:0000000000009EDC                 db  18h
.eh_frame:0000000000009EDD                 db    0
.eh_frame:0000000000009EDE                 db    0
.eh_frame:0000000000009EDF                 db    0
.eh_frame:0000000000009EE0                 db 0D8h
.eh_frame:0000000000009EE1                 db    6
.eh_frame:0000000000009EE2                 db    0
.eh_frame:0000000000009EE3                 db    0
.eh_frame:0000000000009EE4                 db 0ECh
.eh_frame:0000000000009EE5                 db 0B0h
.eh_frame:0000000000009EE6                 db 0FFh
.eh_frame:0000000000009EE7                 db 0FFh
.eh_frame:0000000000009EE8                 db  91h
.eh_frame:0000000000009EE9                 db    0
.eh_frame:0000000000009EEA                 db    0
.eh_frame:0000000000009EEB                 db    0
.eh_frame:0000000000009EEC                 db    0
.eh_frame:0000000000009EED                 db  44h ; D
.eh_frame:0000000000009EEE                 db  0Eh
.eh_frame:0000000000009EEF                 db  50h ; P
.eh_frame:0000000000009EF0                 db    2
.eh_frame:0000000000009EF1                 db  82h
.eh_frame:0000000000009EF2                 db  0Ah
.eh_frame:0000000000009EF3                 db  0Eh
.eh_frame:0000000000009EF4                 db    8
.eh_frame:0000000000009EF5                 db  41h ; A
.eh_frame:0000000000009EF6                 db  0Bh
.eh_frame:0000000000009EF7                 db    0
.eh_frame:0000000000009EF8                 db  10h
.eh_frame:0000000000009EF9                 db    0
.eh_frame:0000000000009EFA                 db    0
.eh_frame:0000000000009EFB                 db    0
.eh_frame:0000000000009EFC                 db 0F4h
.eh_frame:0000000000009EFD                 db    6
.eh_frame:0000000000009EFE                 db    0
.eh_frame:0000000000009EFF                 db    0
.eh_frame:0000000000009F00                 db  70h ; p
.eh_frame:0000000000009F01                 db 0B1h
.eh_frame:0000000000009F02                 db 0FFh
.eh_frame:0000000000009F03                 db 0FFh
.eh_frame:0000000000009F04                 db  0Ch
.eh_frame:0000000000009F05                 db    0
.eh_frame:0000000000009F06                 db    0
.eh_frame:0000000000009F07                 db    0
.eh_frame:0000000000009F08                 db    0
.eh_frame:0000000000009F09                 db    0
.eh_frame:0000000000009F0A                 db    0
.eh_frame:0000000000009F0B                 db    0
.eh_frame:0000000000009F0C                 db  10h
.eh_frame:0000000000009F0D                 db    0
.eh_frame:0000000000009F0E                 db    0
.eh_frame:0000000000009F0F                 db    0
.eh_frame:0000000000009F10                 db    8
.eh_frame:0000000000009F11                 db    7
.eh_frame:0000000000009F12                 db    0
.eh_frame:0000000000009F13                 db    0
.eh_frame:0000000000009F14                 db  6Ch ; l
.eh_frame:0000000000009F15                 db 0B1h
.eh_frame:0000000000009F16                 db 0FFh
.eh_frame:0000000000009F17                 db 0FFh
.eh_frame:0000000000009F18                 db  17h
.eh_frame:0000000000009F19                 db    0
.eh_frame:0000000000009F1A                 db    0
.eh_frame:0000000000009F1B                 db    0
.eh_frame:0000000000009F1C                 db    0
.eh_frame:0000000000009F1D                 db    0
.eh_frame:0000000000009F1E                 db    0
.eh_frame:0000000000009F1F                 db    0
.eh_frame:0000000000009F20                 db  10h
.eh_frame:0000000000009F21                 db    0
.eh_frame:0000000000009F22                 db    0
.eh_frame:0000000000009F23                 db    0
.eh_frame:0000000000009F24                 db  1Ch
.eh_frame:0000000000009F25                 db    7
.eh_frame:0000000000009F26                 db    0
.eh_frame:0000000000009F27                 db    0
.eh_frame:0000000000009F28                 db  78h ; x
.eh_frame:0000000000009F29                 db 0B1h
.eh_frame:0000000000009F2A                 db 0FFh
.eh_frame:0000000000009F2B                 db 0FFh
.eh_frame:0000000000009F2C                 db  13h
.eh_frame:0000000000009F2D                 db    0
.eh_frame:0000000000009F2E                 db    0
.eh_frame:0000000000009F2F                 db    0
.eh_frame:0000000000009F30                 db    0
.eh_frame:0000000000009F31                 db    0
.eh_frame:0000000000009F32                 db    0
.eh_frame:0000000000009F33                 db    0
.eh_frame:0000000000009F34                 db  10h
.eh_frame:0000000000009F35                 db    0
.eh_frame:0000000000009F36                 db    0
.eh_frame:0000000000009F37                 db    0
.eh_frame:0000000000009F38                 db  30h ; 0
.eh_frame:0000000000009F39                 db    7
.eh_frame:0000000000009F3A                 db    0
.eh_frame:0000000000009F3B                 db    0
.eh_frame:0000000000009F3C                 db  84h
.eh_frame:0000000000009F3D                 db 0B1h
.eh_frame:0000000000009F3E                 db 0FFh
.eh_frame:0000000000009F3F                 db 0FFh
.eh_frame:0000000000009F40                 db  0Ch
.eh_frame:0000000000009F41                 db    0
.eh_frame:0000000000009F42                 db    0
.eh_frame:0000000000009F43                 db    0
.eh_frame:0000000000009F44                 db    0
.eh_frame:0000000000009F45                 db    0
.eh_frame:0000000000009F46                 db    0
.eh_frame:0000000000009F47                 db    0
.eh_frame:0000000000009F48                 db  10h
.eh_frame:0000000000009F49                 db    0
.eh_frame:0000000000009F4A                 db    0
.eh_frame:0000000000009F4B                 db    0
.eh_frame:0000000000009F4C                 db  44h ; D
.eh_frame:0000000000009F4D                 db    7
.eh_frame:0000000000009F4E                 db    0
.eh_frame:0000000000009F4F                 db    0
.eh_frame:0000000000009F50                 db  80h
.eh_frame:0000000000009F51                 db 0B1h
.eh_frame:0000000000009F52                 db 0FFh
.eh_frame:0000000000009F53                 db 0FFh
.eh_frame:0000000000009F54                 db  14h
.eh_frame:0000000000009F55                 db    0
.eh_frame:0000000000009F56                 db    0
.eh_frame:0000000000009F57                 db    0
.eh_frame:0000000000009F58                 db    0
.eh_frame:0000000000009F59                 db    0
.eh_frame:0000000000009F5A                 db    0
.eh_frame:0000000000009F5B                 db    0
.eh_frame:0000000000009F5C                 db  10h
.eh_frame:0000000000009F5D                 db    0
.eh_frame:0000000000009F5E                 db    0
.eh_frame:0000000000009F5F                 db    0
.eh_frame:0000000000009F60                 db  58h ; X
.eh_frame:0000000000009F61                 db    7
.eh_frame:0000000000009F62                 db    0
.eh_frame:0000000000009F63                 db    0
.eh_frame:0000000000009F64                 db  8Ch
.eh_frame:0000000000009F65                 db 0B1h
.eh_frame:0000000000009F66                 db 0FFh
.eh_frame:0000000000009F67                 db 0FFh
.eh_frame:0000000000009F68                 db  13h
.eh_frame:0000000000009F69                 db    0
.eh_frame:0000000000009F6A                 db    0
.eh_frame:0000000000009F6B                 db    0
.eh_frame:0000000000009F6C                 db    0
.eh_frame:0000000000009F6D                 db    0
.eh_frame:0000000000009F6E                 db    0
.eh_frame:0000000000009F6F                 db    0
.eh_frame:0000000000009F70                 db  14h
.eh_frame:0000000000009F71                 db    0
.eh_frame:0000000000009F72                 db    0
.eh_frame:0000000000009F73                 db    0
.eh_frame:0000000000009F74                 db  6Ch ; l
.eh_frame:0000000000009F75                 db    7
.eh_frame:0000000000009F76                 db    0
.eh_frame:0000000000009F77                 db    0
.eh_frame:0000000000009F78                 db  98h
.eh_frame:0000000000009F79                 db 0B1h
.eh_frame:0000000000009F7A                 db 0FFh
.eh_frame:0000000000009F7B                 db 0FFh
.eh_frame:0000000000009F7C                 db  18h
.eh_frame:0000000000009F7D                 db    0
.eh_frame:0000000000009F7E                 db    0
.eh_frame:0000000000009F7F                 db    0
.eh_frame:0000000000009F80                 db    0
.eh_frame:0000000000009F81                 db    0
.eh_frame:0000000000009F82                 db    0
.eh_frame:0000000000009F83                 db    0
.eh_frame:0000000000009F84                 db    0
.eh_frame:0000000000009F85                 db    0
.eh_frame:0000000000009F86                 db    0
.eh_frame:0000000000009F87                 db    0
.eh_frame:0000000000009F88                 db  14h
.eh_frame:0000000000009F89                 db    0
.eh_frame:0000000000009F8A                 db    0
.eh_frame:0000000000009F8B                 db    0
.eh_frame:0000000000009F8C                 db  84h
.eh_frame:0000000000009F8D                 db    7
.eh_frame:0000000000009F8E                 db    0
.eh_frame:0000000000009F8F                 db    0
.eh_frame:0000000000009F90                 db 0A0h
.eh_frame:0000000000009F91                 db 0B1h
.eh_frame:0000000000009F92                 db 0FFh
.eh_frame:0000000000009F93                 db 0FFh
.eh_frame:0000000000009F94                 db 0A4h
.eh_frame:0000000000009F95                 db    2
.eh_frame:0000000000009F96                 db    0
.eh_frame:0000000000009F97                 db    0
.eh_frame:0000000000009F98                 db    0
.eh_frame:0000000000009F99                 db    0
.eh_frame:0000000000009F9A                 db    0
.eh_frame:0000000000009F9B                 db    0
.eh_frame:0000000000009F9C                 db    0
.eh_frame:0000000000009F9D                 db    0
.eh_frame:0000000000009F9E                 db    0
.eh_frame:0000000000009F9F                 db    0
.eh_frame:0000000000009FA0                 db  4Ch ; L
.eh_frame:0000000000009FA1                 db    0
.eh_frame:0000000000009FA2                 db    0
.eh_frame:0000000000009FA3                 db    0
.eh_frame:0000000000009FA4                 db  9Ch
.eh_frame:0000000000009FA5                 db    7
.eh_frame:0000000000009FA6                 db    0
.eh_frame:0000000000009FA7                 db    0
.eh_frame:0000000000009FA8                 db  38h ; 8
.eh_frame:0000000000009FA9                 db 0B4h
.eh_frame:0000000000009FAA                 db 0FFh
.eh_frame:0000000000009FAB                 db 0FFh
.eh_frame:0000000000009FAC                 db 0B5h
.eh_frame:0000000000009FAD                 db    0
.eh_frame:0000000000009FAE                 db    0
.eh_frame:0000000000009FAF                 db    0
.eh_frame:0000000000009FB0                 db    0
.eh_frame:0000000000009FB1                 db  42h ; B
.eh_frame:0000000000009FB2                 db  0Eh
.eh_frame:0000000000009FB3                 db  10h
.eh_frame:0000000000009FB4                 db  8Eh
.eh_frame:0000000000009FB5                 db    2
.eh_frame:0000000000009FB6                 db  42h ; B
.eh_frame:0000000000009FB7                 db  0Eh
.eh_frame:0000000000009FB8                 db  18h
.eh_frame:0000000000009FB9                 db  8Dh
.eh_frame:0000000000009FBA                 db    3
.eh_frame:0000000000009FBB                 db  45h ; E
.eh_frame:0000000000009FBC                 db  0Eh
.eh_frame:0000000000009FBD                 db  20h
.eh_frame:0000000000009FBE                 db  8Ch
.eh_frame:0000000000009FBF                 db    4
.eh_frame:0000000000009FC0                 db  41h ; A
.eh_frame:0000000000009FC1                 db  0Eh
.eh_frame:0000000000009FC2                 db  28h ; (
.eh_frame:0000000000009FC3                 db  86h
.eh_frame:0000000000009FC4                 db    5
.eh_frame:0000000000009FC5                 db  44h ; D
.eh_frame:0000000000009FC6                 db  0Eh
.eh_frame:0000000000009FC7                 db  30h ; 0
.eh_frame:0000000000009FC8                 db  83h
.eh_frame:0000000000009FC9                 db    6
.eh_frame:0000000000009FCA                 db  7Fh ; 
.eh_frame:0000000000009FCB                 db  0Ah
.eh_frame:0000000000009FCC                 db  0Eh
.eh_frame:0000000000009FCD                 db  28h ; (
.eh_frame:0000000000009FCE                 db  41h ; A
.eh_frame:0000000000009FCF                 db  0Eh
.eh_frame:0000000000009FD0                 db  20h
.eh_frame:0000000000009FD1                 db  42h ; B
.eh_frame:0000000000009FD2                 db  0Eh
.eh_frame:0000000000009FD3                 db  18h
.eh_frame:0000000000009FD4                 db  42h ; B
.eh_frame:0000000000009FD5                 db  0Eh
.eh_frame:0000000000009FD6                 db  10h
.eh_frame:0000000000009FD7                 db  42h ; B
.eh_frame:0000000000009FD8                 db  0Eh
.eh_frame:0000000000009FD9                 db    8
.eh_frame:0000000000009FDA                 db  4Ch ; L
.eh_frame:0000000000009FDB                 db  0Bh
.eh_frame:0000000000009FDC                 db  5Bh ; [
.eh_frame:0000000000009FDD                 db  0Ah
.eh_frame:0000000000009FDE                 db  0Eh
.eh_frame:0000000000009FDF                 db  28h ; (
.eh_frame:0000000000009FE0                 db  41h ; A
.eh_frame:0000000000009FE1                 db  0Eh
.eh_frame:0000000000009FE2                 db  20h
.eh_frame:0000000000009FE3                 db  42h ; B
.eh_frame:0000000000009FE4                 db  0Eh
.eh_frame:0000000000009FE5                 db  18h
.eh_frame:0000000000009FE6                 db  42h ; B
.eh_frame:0000000000009FE7                 db  0Eh
.eh_frame:0000000000009FE8                 db  10h
.eh_frame:0000000000009FE9                 db  42h ; B
.eh_frame:0000000000009FEA                 db  0Eh
.eh_frame:0000000000009FEB                 db    8
.eh_frame:0000000000009FEC                 db  45h ; E
.eh_frame:0000000000009FED                 db  0Bh
.eh_frame:0000000000009FEE                 db    0
.eh_frame:0000000000009FEF                 db    0
.eh_frame:0000000000009FF0                 db  14h
.eh_frame:0000000000009FF1                 db    0
.eh_frame:0000000000009FF2                 db    0
.eh_frame:0000000000009FF3                 db    0
.eh_frame:0000000000009FF4                 db 0ECh
.eh_frame:0000000000009FF5                 db    7
.eh_frame:0000000000009FF6                 db    0
.eh_frame:0000000000009FF7                 db    0
.eh_frame:0000000000009FF8                 db 0A8h
.eh_frame:0000000000009FF9                 db 0B4h
.eh_frame:0000000000009FFA                 db 0FFh
.eh_frame:0000000000009FFB                 db 0FFh
.eh_frame:0000000000009FFC                 db  0Fh
.eh_frame:0000000000009FFD                 db    0
.eh_frame:0000000000009FFE                 db    0
.eh_frame:0000000000009FFF                 db    0
.eh_frame:000000000000A000                 db    0
.eh_frame:000000000000A001                 db    0
.eh_frame:000000000000A002                 db    0
.eh_frame:000000000000A003                 db    0
.eh_frame:000000000000A004                 db    0
.eh_frame:000000000000A005                 db    0
.eh_frame:000000000000A006                 db    0
.eh_frame:000000000000A007                 db    0
.eh_frame:000000000000A008                 db  18h
.eh_frame:000000000000A009                 db    0
.eh_frame:000000000000A00A                 db    0
.eh_frame:000000000000A00B                 db    0
.eh_frame:000000000000A00C                 db    4
.eh_frame:000000000000A00D                 db    8
.eh_frame:000000000000A00E                 db    0
.eh_frame:000000000000A00F                 db    0
.eh_frame:000000000000A010                 db 0A0h
.eh_frame:000000000000A011                 db 0B4h
.eh_frame:000000000000A012                 db 0FFh
.eh_frame:000000000000A013                 db 0FFh
.eh_frame:000000000000A014                 db  1Ah
.eh_frame:000000000000A015                 db    0
.eh_frame:000000000000A016                 db    0
.eh_frame:000000000000A017                 db    0
.eh_frame:000000000000A018                 db    0
.eh_frame:000000000000A019                 db  41h ; A
.eh_frame:000000000000A01A                 db  0Eh
.eh_frame:000000000000A01B                 db  10h
.eh_frame:000000000000A01C                 db  83h
.eh_frame:000000000000A01D                 db    2
.eh_frame:000000000000A01E                 db  53h ; S
.eh_frame:000000000000A01F                 db  0Ah
.eh_frame:000000000000A020                 db  0Eh
.eh_frame:000000000000A021                 db    8
.eh_frame:000000000000A022                 db  41h ; A
.eh_frame:000000000000A023                 db  0Bh
.eh_frame:000000000000A024                 db  10h
.eh_frame:000000000000A025                 db    0
.eh_frame:000000000000A026                 db    0
.eh_frame:000000000000A027                 db    0
.eh_frame:000000000000A028                 db  20h
.eh_frame:000000000000A029                 db    8
.eh_frame:000000000000A02A                 db    0
.eh_frame:000000000000A02B                 db    0
.eh_frame:000000000000A02C                 db 0A4h
.eh_frame:000000000000A02D                 db 0B4h
.eh_frame:000000000000A02E                 db 0FFh
.eh_frame:000000000000A02F                 db 0FFh
.eh_frame:000000000000A030                 db  24h ; $
.eh_frame:000000000000A031                 db    0
.eh_frame:000000000000A032                 db    0
.eh_frame:000000000000A033                 db    0
.eh_frame:000000000000A034                 db    0
.eh_frame:000000000000A035                 db  5Fh ; _
.eh_frame:000000000000A036                 db  0Eh
.eh_frame:000000000000A037                 db  10h
.eh_frame:000000000000A038                 db  10h
.eh_frame:000000000000A039                 db    0
.eh_frame:000000000000A03A                 db    0
.eh_frame:000000000000A03B                 db    0
.eh_frame:000000000000A03C                 db  34h ; 4
.eh_frame:000000000000A03D                 db    8
.eh_frame:000000000000A03E                 db    0
.eh_frame:000000000000A03F                 db    0
.eh_frame:000000000000A040                 db 0C0h
.eh_frame:000000000000A041                 db 0B4h
.eh_frame:000000000000A042                 db 0FFh
.eh_frame:000000000000A043                 db 0FFh
.eh_frame:000000000000A044                 db    2
.eh_frame:000000000000A045                 db    0
.eh_frame:000000000000A046                 db    0
.eh_frame:000000000000A047                 db    0
.eh_frame:000000000000A048                 db    0
.eh_frame:000000000000A049                 db    0
.eh_frame:000000000000A04A                 db    0
.eh_frame:000000000000A04B                 db    0
.eh_frame:000000000000A04C                 db  20h
.eh_frame:000000000000A04D                 db    0
.eh_frame:000000000000A04E                 db    0
.eh_frame:000000000000A04F                 db    0
.eh_frame:000000000000A050                 db  48h ; H
.eh_frame:000000000000A051                 db    8
.eh_frame:000000000000A052                 db    0
.eh_frame:000000000000A053                 db    0
.eh_frame:000000000000A054                 db 0BCh
.eh_frame:000000000000A055                 db 0B4h
.eh_frame:000000000000A056                 db 0FFh
.eh_frame:000000000000A057                 db 0FFh
.eh_frame:000000000000A058                 db  36h ; 6
.eh_frame:000000000000A059                 db    0
.eh_frame:000000000000A05A                 db    0
.eh_frame:000000000000A05B                 db    0
.eh_frame:000000000000A05C                 db    0
.eh_frame:000000000000A05D                 db  44h ; D
.eh_frame:000000000000A05E                 db  0Eh
.eh_frame:000000000000A05F                 db  10h
.eh_frame:000000000000A060                 db  83h
.eh_frame:000000000000A061                 db    2
.eh_frame:000000000000A062                 db  5Dh ; ]
.eh_frame:000000000000A063                 db  0Ah
.eh_frame:000000000000A064                 db  0Eh
.eh_frame:000000000000A065                 db    8
.eh_frame:000000000000A066                 db  47h ; G
.eh_frame:000000000000A067                 db  0Bh
.eh_frame:000000000000A068                 db  48h ; H
.eh_frame:000000000000A069                 db  0Ah
.eh_frame:000000000000A06A                 db  0Eh
.eh_frame:000000000000A06B                 db    8
.eh_frame:000000000000A06C                 db  41h ; A
.eh_frame:000000000000A06D                 db  0Bh
.eh_frame:000000000000A06E                 db    0
.eh_frame:000000000000A06F                 db    0
.eh_frame:000000000000A070                 db  10h
.eh_frame:000000000000A071                 db    0
.eh_frame:000000000000A072                 db    0
.eh_frame:000000000000A073                 db    0
.eh_frame:000000000000A074                 db  6Ch ; l
.eh_frame:000000000000A075                 db    8
.eh_frame:000000000000A076                 db    0
.eh_frame:000000000000A077                 db    0
.eh_frame:000000000000A078                 db 0D8h
.eh_frame:000000000000A079                 db 0B4h
.eh_frame:000000000000A07A                 db 0FFh
.eh_frame:000000000000A07B                 db 0FFh
.eh_frame:000000000000A07C                 db  24h ; $
.eh_frame:000000000000A07D                 db    0
.eh_frame:000000000000A07E                 db    0
.eh_frame:000000000000A07F                 db    0
.eh_frame:000000000000A080                 db    0
.eh_frame:000000000000A081                 db  5Fh ; _
.eh_frame:000000000000A082                 db  0Eh
.eh_frame:000000000000A083                 db  10h
.eh_frame:000000000000A084                 db  14h
.eh_frame:000000000000A085                 db    0
.eh_frame:000000000000A086                 db    0
.eh_frame:000000000000A087                 db    0
.eh_frame:000000000000A088                 db  80h
.eh_frame:000000000000A089                 db    8
.eh_frame:000000000000A08A                 db    0
.eh_frame:000000000000A08B                 db    0
.eh_frame:000000000000A08C                 db 0F4h
.eh_frame:000000000000A08D                 db 0B4h
.eh_frame:000000000000A08E                 db 0FFh
.eh_frame:000000000000A08F                 db 0FFh
.eh_frame:000000000000A090                 db  82h
.eh_frame:000000000000A091                 db    0
.eh_frame:000000000000A092                 db    0
.eh_frame:000000000000A093                 db    0
.eh_frame:000000000000A094                 db    0
.eh_frame:000000000000A095                 db    2
.eh_frame:000000000000A096                 db  5Fh ; _
.eh_frame:000000000000A097                 db  0Eh
.eh_frame:000000000000A098                 db  10h
.eh_frame:000000000000A099                 db  49h ; I
.eh_frame:000000000000A09A                 db  0Eh
.eh_frame:000000000000A09B                 db    8
.eh_frame:000000000000A09C                 db  14h
.eh_frame:000000000000A09D                 db    0
.eh_frame:000000000000A09E                 db    0
.eh_frame:000000000000A09F                 db    0
.eh_frame:000000000000A0A0                 db  98h
.eh_frame:000000000000A0A1                 db    8
.eh_frame:000000000000A0A2                 db    0
.eh_frame:000000000000A0A3                 db    0
.eh_frame:000000000000A0A4                 db  6Ch ; l
.eh_frame:000000000000A0A5                 db 0B5h
.eh_frame:000000000000A0A6                 db 0FFh
.eh_frame:000000000000A0A7                 db 0FFh
.eh_frame:000000000000A0A8                 db  4Ah ; J
.eh_frame:000000000000A0A9                 db    0
.eh_frame:000000000000A0AA                 db    0
.eh_frame:000000000000A0AB                 db    0
.eh_frame:000000000000A0AC                 db    0
.eh_frame:000000000000A0AD                 db    2
.eh_frame:000000000000A0AE                 db  45h ; E
.eh_frame:000000000000A0AF                 db  0Eh
.eh_frame:000000000000A0B0                 db  10h
.eh_frame:000000000000A0B1                 db    0
.eh_frame:000000000000A0B2                 db    0
.eh_frame:000000000000A0B3                 db    0
.eh_frame:000000000000A0B4                 db  18h
.eh_frame:000000000000A0B5                 db    0
.eh_frame:000000000000A0B6                 db    0
.eh_frame:000000000000A0B7                 db    0
.eh_frame:000000000000A0B8                 db 0B0h
.eh_frame:000000000000A0B9                 db    8
.eh_frame:000000000000A0BA                 db    0
.eh_frame:000000000000A0BB                 db    0
.eh_frame:000000000000A0BC                 db 0A4h
.eh_frame:000000000000A0BD                 db 0B5h
.eh_frame:000000000000A0BE                 db 0FFh
.eh_frame:000000000000A0BF                 db 0FFh
.eh_frame:000000000000A0C0                 db  17h
.eh_frame:000000000000A0C1                 db    0
.eh_frame:000000000000A0C2                 db    0
.eh_frame:000000000000A0C3                 db    0
.eh_frame:000000000000A0C4                 db    0
.eh_frame:000000000000A0C5                 db  41h ; A
.eh_frame:000000000000A0C6                 db  0Eh
.eh_frame:000000000000A0C7                 db  10h
.eh_frame:000000000000A0C8                 db  83h
.eh_frame:000000000000A0C9                 db    2
.eh_frame:000000000000A0CA                 db  51h ; Q
.eh_frame:000000000000A0CB                 db  0Eh
.eh_frame:000000000000A0CC                 db    8
.eh_frame:000000000000A0CD                 db    0
.eh_frame:000000000000A0CE                 db    0
.eh_frame:000000000000A0CF                 db    0
.eh_frame:000000000000A0D0                 db  18h
.eh_frame:000000000000A0D1                 db    0
.eh_frame:000000000000A0D2                 db    0
.eh_frame:000000000000A0D3                 db    0
.eh_frame:000000000000A0D4                 db 0CCh
.eh_frame:000000000000A0D5                 db    8
.eh_frame:000000000000A0D6                 db    0
.eh_frame:000000000000A0D7                 db    0
.eh_frame:000000000000A0D8                 db 0A8h
.eh_frame:000000000000A0D9                 db 0B5h
.eh_frame:000000000000A0DA                 db 0FFh
.eh_frame:000000000000A0DB                 db 0FFh
.eh_frame:000000000000A0DC                 db  2Eh ; .
.eh_frame:000000000000A0DD                 db    0
.eh_frame:000000000000A0DE                 db    0
.eh_frame:000000000000A0DF                 db    0
.eh_frame:000000000000A0E0                 db    0
.eh_frame:000000000000A0E1                 db  47h ; G
.eh_frame:000000000000A0E2                 db  0Eh
.eh_frame:000000000000A0E3                 db  10h
.eh_frame:000000000000A0E4                 db  61h ; a
.eh_frame:000000000000A0E5                 db  0Ah
.eh_frame:000000000000A0E6                 db  0Eh
.eh_frame:000000000000A0E7                 db    8
.eh_frame:000000000000A0E8                 db  41h ; A
.eh_frame:000000000000A0E9                 db  0Bh
.eh_frame:000000000000A0EA                 db    0
.eh_frame:000000000000A0EB                 db    0
.eh_frame:000000000000A0EC                 db  24h ; $
.eh_frame:000000000000A0ED                 db    0
.eh_frame:000000000000A0EE                 db    0
.eh_frame:000000000000A0EF                 db    0
.eh_frame:000000000000A0F0                 db 0E8h
.eh_frame:000000000000A0F1                 db    8
.eh_frame:000000000000A0F2                 db    0
.eh_frame:000000000000A0F3                 db    0
.eh_frame:000000000000A0F4                 db 0BCh
.eh_frame:000000000000A0F5                 db 0B5h
.eh_frame:000000000000A0F6                 db 0FFh
.eh_frame:000000000000A0F7                 db 0FFh
.eh_frame:000000000000A0F8                 db  28h ; (
.eh_frame:000000000000A0F9                 db    0
.eh_frame:000000000000A0FA                 db    0
.eh_frame:000000000000A0FB                 db    0
.eh_frame:000000000000A0FC                 db    0
.eh_frame:000000000000A0FD                 db  41h ; A
.eh_frame:000000000000A0FE                 db  0Eh
.eh_frame:000000000000A0FF                 db  10h
.eh_frame:000000000000A100                 db  86h
.eh_frame:000000000000A101                 db    2
.eh_frame:000000000000A102                 db  41h ; A
.eh_frame:000000000000A103                 db  0Eh
.eh_frame:000000000000A104                 db  18h
.eh_frame:000000000000A105                 db  83h
.eh_frame:000000000000A106                 db    3
.eh_frame:000000000000A107                 db  4Dh ; M
.eh_frame:000000000000A108                 db  0Eh
.eh_frame:000000000000A109                 db  20h
.eh_frame:000000000000A10A                 db  49h ; I
.eh_frame:000000000000A10B                 db  0Eh
.eh_frame:000000000000A10C                 db  18h
.eh_frame:000000000000A10D                 db  47h ; G
.eh_frame:000000000000A10E                 db  0Eh
.eh_frame:000000000000A10F                 db  10h
.eh_frame:000000000000A110                 db  41h ; A
.eh_frame:000000000000A111                 db  0Eh
.eh_frame:000000000000A112                 db    8
.eh_frame:000000000000A113                 db    0
.eh_frame:000000000000A114                 db  18h
.eh_frame:000000000000A115                 db    0
.eh_frame:000000000000A116                 db    0
.eh_frame:000000000000A117                 db    0
.eh_frame:000000000000A118                 db  10h
.eh_frame:000000000000A119                 db    9
.eh_frame:000000000000A11A                 db    0
.eh_frame:000000000000A11B                 db    0
.eh_frame:000000000000A11C                 db 0C4h
.eh_frame:000000000000A11D                 db 0B5h
.eh_frame:000000000000A11E                 db 0FFh
.eh_frame:000000000000A11F                 db 0FFh
.eh_frame:000000000000A120                 db  13h
.eh_frame:000000000000A121                 db    0
.eh_frame:000000000000A122                 db    0
.eh_frame:000000000000A123                 db    0
.eh_frame:000000000000A124                 db    0
.eh_frame:000000000000A125                 db  41h ; A
.eh_frame:000000000000A126                 db  0Eh
.eh_frame:000000000000A127                 db  10h
.eh_frame:000000000000A128                 db  83h
.eh_frame:000000000000A129                 db    2
.eh_frame:000000000000A12A                 db  50h ; P
.eh_frame:000000000000A12B                 db  0Eh
.eh_frame:000000000000A12C                 db    8
.eh_frame:000000000000A12D                 db    0
.eh_frame:000000000000A12E                 db    0
.eh_frame:000000000000A12F                 db    0
.eh_frame:000000000000A130                 db  14h
.eh_frame:000000000000A131                 db    0
.eh_frame:000000000000A132                 db    0
.eh_frame:000000000000A133                 db    0
.eh_frame:000000000000A134                 db  2Ch ; ,
.eh_frame:000000000000A135                 db    9
.eh_frame:000000000000A136                 db    0
.eh_frame:000000000000A137                 db    0
.eh_frame:000000000000A138                 db 0C8h
.eh_frame:000000000000A139                 db 0B5h
.eh_frame:000000000000A13A                 db 0FFh
.eh_frame:000000000000A13B                 db 0FFh
.eh_frame:000000000000A13C                 db  35h ; 5
.eh_frame:000000000000A13D                 db    0
.eh_frame:000000000000A13E                 db    0
.eh_frame:000000000000A13F                 db    0
.eh_frame:000000000000A140                 db    0
.eh_frame:000000000000A141                 db  4Bh ; K
.eh_frame:000000000000A142                 db  0Eh
.eh_frame:000000000000A143                 db  10h
.eh_frame:000000000000A144                 db    0
.eh_frame:000000000000A145                 db    0
.eh_frame:000000000000A146                 db    0
.eh_frame:000000000000A147                 db    0
.eh_frame:000000000000A148                 db  48h ; H
.eh_frame:000000000000A149                 db    0
.eh_frame:000000000000A14A                 db    0
.eh_frame:000000000000A14B                 db    0
.eh_frame:000000000000A14C                 db  44h ; D
.eh_frame:000000000000A14D                 db    9
.eh_frame:000000000000A14E                 db    0
.eh_frame:000000000000A14F                 db    0
.eh_frame:000000000000A150                 db 0F0h
.eh_frame:000000000000A151                 db 0B5h
.eh_frame:000000000000A152                 db 0FFh
.eh_frame:000000000000A153                 db 0FFh
.eh_frame:000000000000A154                 db  43h ; C
.eh_frame:000000000000A155                 db    1
.eh_frame:000000000000A156                 db    0
.eh_frame:000000000000A157                 db    0
.eh_frame:000000000000A158                 db    0
.eh_frame:000000000000A159                 db  42h ; B
.eh_frame:000000000000A15A                 db  0Eh
.eh_frame:000000000000A15B                 db  10h
.eh_frame:000000000000A15C                 db  8Fh
.eh_frame:000000000000A15D                 db    2
.eh_frame:000000000000A15E                 db  42h ; B
.eh_frame:000000000000A15F                 db  0Eh
.eh_frame:000000000000A160                 db  18h
.eh_frame:000000000000A161                 db  8Eh
.eh_frame:000000000000A162                 db    3
.eh_frame:000000000000A163                 db  42h ; B
.eh_frame:000000000000A164                 db  0Eh
.eh_frame:000000000000A165                 db  20h
.eh_frame:000000000000A166                 db  8Dh
.eh_frame:000000000000A167                 db    4
.eh_frame:000000000000A168                 db  42h ; B
.eh_frame:000000000000A169                 db  0Eh
.eh_frame:000000000000A16A                 db  28h ; (
.eh_frame:000000000000A16B                 db  8Ch
.eh_frame:000000000000A16C                 db    5
.eh_frame:000000000000A16D                 db  41h ; A
.eh_frame:000000000000A16E                 db  0Eh
.eh_frame:000000000000A16F                 db  30h ; 0
.eh_frame:000000000000A170                 db  86h
.eh_frame:000000000000A171                 db    6
.eh_frame:000000000000A172                 db  41h ; A
.eh_frame:000000000000A173                 db  0Eh
.eh_frame:000000000000A174                 db  38h ; 8
.eh_frame:000000000000A175                 db  83h
.eh_frame:000000000000A176                 db    7
.eh_frame:000000000000A177                 db  44h ; D
.eh_frame:000000000000A178                 db  0Eh
.eh_frame:000000000000A179                 db  60h ; `
.eh_frame:000000000000A17A                 db    2
.eh_frame:000000000000A17B                 db 0FCh
.eh_frame:000000000000A17C                 db  0Ah
.eh_frame:000000000000A17D                 db  0Eh
.eh_frame:000000000000A17E                 db  38h ; 8
.eh_frame:000000000000A17F                 db  41h ; A
.eh_frame:000000000000A180                 db  0Eh
.eh_frame:000000000000A181                 db  30h ; 0
.eh_frame:000000000000A182                 db  41h ; A
.eh_frame:000000000000A183                 db  0Eh
.eh_frame:000000000000A184                 db  28h ; (
.eh_frame:000000000000A185                 db  42h ; B
.eh_frame:000000000000A186                 db  0Eh
.eh_frame:000000000000A187                 db  20h
.eh_frame:000000000000A188                 db  42h ; B
.eh_frame:000000000000A189                 db  0Eh
.eh_frame:000000000000A18A                 db  18h
.eh_frame:000000000000A18B                 db  42h ; B
.eh_frame:000000000000A18C                 db  0Eh
.eh_frame:000000000000A18D                 db  10h
.eh_frame:000000000000A18E                 db  42h ; B
.eh_frame:000000000000A18F                 db  0Eh
.eh_frame:000000000000A190                 db    8
.eh_frame:000000000000A191                 db  41h ; A
.eh_frame:000000000000A192                 db  0Bh
.eh_frame:000000000000A193                 db    0
.eh_frame:000000000000A194                 db  18h
.eh_frame:000000000000A195                 db    0
.eh_frame:000000000000A196                 db    0
.eh_frame:000000000000A197                 db    0
.eh_frame:000000000000A198                 db  90h
.eh_frame:000000000000A199                 db    9
.eh_frame:000000000000A19A                 db    0
.eh_frame:000000000000A19B                 db    0
.eh_frame:000000000000A19C                 db 0F4h
.eh_frame:000000000000A19D                 db 0B6h
.eh_frame:000000000000A19E                 db 0FFh
.eh_frame:000000000000A19F                 db 0FFh
.eh_frame:000000000000A1A0                 db 0A4h
.eh_frame:000000000000A1A1                 db    0
.eh_frame:000000000000A1A2                 db    0
.eh_frame:000000000000A1A3                 db    0
.eh_frame:000000000000A1A4                 db    0
.eh_frame:000000000000A1A5                 db  44h ; D
.eh_frame:000000000000A1A6                 db  0Eh
.eh_frame:000000000000A1A7                 db  20h
.eh_frame:000000000000A1A8                 db    2
.eh_frame:000000000000A1A9                 db  7Eh ; ~
.eh_frame:000000000000A1AA                 db  0Ah
.eh_frame:000000000000A1AB                 db  0Eh
.eh_frame:000000000000A1AC                 db    8
.eh_frame:000000000000A1AD                 db  46h ; F
.eh_frame:000000000000A1AE                 db  0Bh
.eh_frame:000000000000A1AF                 db    0
.eh_frame:000000000000A1B0                 db  3Ch ; <
.eh_frame:000000000000A1B1                 db    0
.eh_frame:000000000000A1B2                 db    0
.eh_frame:000000000000A1B3                 db    0
.eh_frame:000000000000A1B4                 db 0ACh
.eh_frame:000000000000A1B5                 db    9
.eh_frame:000000000000A1B6                 db    0
.eh_frame:000000000000A1B7                 db    0
.eh_frame:000000000000A1B8                 db  88h
.eh_frame:000000000000A1B9                 db 0B7h
.eh_frame:000000000000A1BA                 db 0FFh
.eh_frame:000000000000A1BB                 db 0FFh
.eh_frame:000000000000A1BC                 db  83h
.eh_frame:000000000000A1BD                 db    0
.eh_frame:000000000000A1BE                 db    0
.eh_frame:000000000000A1BF                 db    0
.eh_frame:000000000000A1C0                 db    0
.eh_frame:000000000000A1C1                 db  42h ; B
.eh_frame:000000000000A1C2                 db  0Eh
.eh_frame:000000000000A1C3                 db  10h
.eh_frame:000000000000A1C4                 db  8Dh
.eh_frame:000000000000A1C5                 db    2
.eh_frame:000000000000A1C6                 db  42h ; B
.eh_frame:000000000000A1C7                 db  0Eh
.eh_frame:000000000000A1C8                 db  18h
.eh_frame:000000000000A1C9                 db  8Ch
.eh_frame:000000000000A1CA                 db    3
.eh_frame:000000000000A1CB                 db  44h ; D
.eh_frame:000000000000A1CC                 db  0Eh
.eh_frame:000000000000A1CD                 db  20h
.eh_frame:000000000000A1CE                 db  86h
.eh_frame:000000000000A1CF                 db    4
.eh_frame:000000000000A1D0                 db  41h ; A
.eh_frame:000000000000A1D1                 db  0Eh
.eh_frame:000000000000A1D2                 db  28h ; (
.eh_frame:000000000000A1D3                 db  83h
.eh_frame:000000000000A1D4                 db    5
.eh_frame:000000000000A1D5                 db  4Ah ; J
.eh_frame:000000000000A1D6                 db  0Eh
.eh_frame:000000000000A1D7                 db  40h ; @
.eh_frame:000000000000A1D8                 db    2
.eh_frame:000000000000A1D9                 db  64h ; d
.eh_frame:000000000000A1DA                 db  0Ah
.eh_frame:000000000000A1DB                 db  0Eh
.eh_frame:000000000000A1DC                 db  28h ; (
.eh_frame:000000000000A1DD                 db  41h ; A
.eh_frame:000000000000A1DE                 db  0Eh
.eh_frame:000000000000A1DF                 db  20h
.eh_frame:000000000000A1E0                 db  41h ; A
.eh_frame:000000000000A1E1                 db  0Eh
.eh_frame:000000000000A1E2                 db  18h
.eh_frame:000000000000A1E3                 db  42h ; B
.eh_frame:000000000000A1E4                 db  0Eh
.eh_frame:000000000000A1E5                 db  10h
.eh_frame:000000000000A1E6                 db  42h ; B
.eh_frame:000000000000A1E7                 db  0Eh
.eh_frame:000000000000A1E8                 db    8
.eh_frame:000000000000A1E9                 db  41h ; A
.eh_frame:000000000000A1EA                 db  0Bh
.eh_frame:000000000000A1EB                 db    0
.eh_frame:000000000000A1EC                 db    0
.eh_frame:000000000000A1ED                 db    0
.eh_frame:000000000000A1EE                 db    0
.eh_frame:000000000000A1EF                 db    0
.eh_frame:000000000000A1F0                 db  24h ; $
.eh_frame:000000000000A1F1                 db    0
.eh_frame:000000000000A1F2                 db    0
.eh_frame:000000000000A1F3                 db    0
.eh_frame:000000000000A1F4                 db 0ECh
.eh_frame:000000000000A1F5                 db    9
.eh_frame:000000000000A1F6                 db    0
.eh_frame:000000000000A1F7                 db    0
.eh_frame:000000000000A1F8                 db 0D8h
.eh_frame:000000000000A1F9                 db 0B7h
.eh_frame:000000000000A1FA                 db 0FFh
.eh_frame:000000000000A1FB                 db 0FFh
.eh_frame:000000000000A1FC                 db  7Eh ; ~
.eh_frame:000000000000A1FD                 db    0
.eh_frame:000000000000A1FE                 db    0
.eh_frame:000000000000A1FF                 db    0
.eh_frame:000000000000A200                 db    0
.eh_frame:000000000000A201                 db  41h ; A
.eh_frame:000000000000A202                 db  0Eh
.eh_frame:000000000000A203                 db  10h
.eh_frame:000000000000A204                 db  83h
.eh_frame:000000000000A205                 db    2
.eh_frame:000000000000A206                 db  4Ch ; L
.eh_frame:000000000000A207                 db  0Eh
.eh_frame:000000000000A208                 db  20h
.eh_frame:000000000000A209                 db    2
.eh_frame:000000000000A20A                 db  49h ; I
.eh_frame:000000000000A20B                 db  0Ah
.eh_frame:000000000000A20C                 db  0Eh
.eh_frame:000000000000A20D                 db  10h
.eh_frame:000000000000A20E                 db  41h ; A
.eh_frame:000000000000A20F                 db  0Eh
.eh_frame:000000000000A210                 db    8
.eh_frame:000000000000A211                 db  41h ; A
.eh_frame:000000000000A212                 db  0Bh
.eh_frame:000000000000A213                 db    0
.eh_frame:000000000000A214                 db    0
.eh_frame:000000000000A215                 db    0
.eh_frame:000000000000A216                 db    0
.eh_frame:000000000000A217                 db    0
.eh_frame:000000000000A218                 db  4Ch ; L
.eh_frame:000000000000A219                 db    0
.eh_frame:000000000000A21A                 db    0
.eh_frame:000000000000A21B                 db    0
.eh_frame:000000000000A21C                 db  14h
.eh_frame:000000000000A21D                 db  0Ah
.eh_frame:000000000000A21E                 db    0
.eh_frame:000000000000A21F                 db    0
.eh_frame:000000000000A220                 db  30h ; 0
.eh_frame:000000000000A221                 db 0B8h
.eh_frame:000000000000A222                 db 0FFh
.eh_frame:000000000000A223                 db 0FFh
.eh_frame:000000000000A224                 db  7Dh ; }
.eh_frame:000000000000A225                 db    0
.eh_frame:000000000000A226                 db    0
.eh_frame:000000000000A227                 db    0
.eh_frame:000000000000A228                 db    0
.eh_frame:000000000000A229                 db  42h ; B
.eh_frame:000000000000A22A                 db  0Eh
.eh_frame:000000000000A22B                 db  10h
.eh_frame:000000000000A22C                 db  8Ch
.eh_frame:000000000000A22D                 db    2
.eh_frame:000000000000A22E                 db  41h ; A
.eh_frame:000000000000A22F                 db  0Eh
.eh_frame:000000000000A230                 db  18h
.eh_frame:000000000000A231                 db  86h
.eh_frame:000000000000A232                 db    3
.eh_frame:000000000000A233                 db  44h ; D
.eh_frame:000000000000A234                 db  0Eh
.eh_frame:000000000000A235                 db  20h
.eh_frame:000000000000A236                 db  83h
.eh_frame:000000000000A237                 db    4
.eh_frame:000000000000A238                 db  69h ; i
.eh_frame:000000000000A239                 db  0Ah
.eh_frame:000000000000A23A                 db  0Eh
.eh_frame:000000000000A23B                 db  18h
.eh_frame:000000000000A23C                 db  41h ; A
.eh_frame:000000000000A23D                 db  0Eh
.eh_frame:000000000000A23E                 db  10h
.eh_frame:000000000000A23F                 db  42h ; B
.eh_frame:000000000000A240                 db  0Eh
.eh_frame:000000000000A241                 db    8
.eh_frame:000000000000A242                 db  45h ; E
.eh_frame:000000000000A243                 db  0Bh
.eh_frame:000000000000A244                 db  55h ; U
.eh_frame:000000000000A245                 db  0Ah
.eh_frame:000000000000A246                 db  0Eh
.eh_frame:000000000000A247                 db  18h
.eh_frame:000000000000A248                 db  41h ; A
.eh_frame:000000000000A249                 db  0Eh
.eh_frame:000000000000A24A                 db  10h
.eh_frame:000000000000A24B                 db  42h ; B
.eh_frame:000000000000A24C                 db  0Eh
.eh_frame:000000000000A24D                 db    8
.eh_frame:000000000000A24E                 db  48h ; H
.eh_frame:000000000000A24F                 db  0Bh
.eh_frame:000000000000A250                 db  41h ; A
.eh_frame:000000000000A251                 db  0Ah
.eh_frame:000000000000A252                 db  0Eh
.eh_frame:000000000000A253                 db  18h
.eh_frame:000000000000A254                 db  46h ; F
.eh_frame:000000000000A255                 db  0Eh
.eh_frame:000000000000A256                 db  10h
.eh_frame:000000000000A257                 db  42h ; B
.eh_frame:000000000000A258                 db  0Eh
.eh_frame:000000000000A259                 db    8
.eh_frame:000000000000A25A                 db  47h ; G
.eh_frame:000000000000A25B                 db  0Bh
.eh_frame:000000000000A25C                 db  49h ; I
.eh_frame:000000000000A25D                 db  0Eh
.eh_frame:000000000000A25E                 db  18h
.eh_frame:000000000000A25F                 db  41h ; A
.eh_frame:000000000000A260                 db  0Eh
.eh_frame:000000000000A261                 db  10h
.eh_frame:000000000000A262                 db  42h ; B
.eh_frame:000000000000A263                 db  0Eh
.eh_frame:000000000000A264                 db    8
.eh_frame:000000000000A265                 db    0
.eh_frame:000000000000A266                 db    0
.eh_frame:000000000000A267                 db    0
.eh_frame:000000000000A268                 db  1Ch
.eh_frame:000000000000A269                 db    0
.eh_frame:000000000000A26A                 db    0
.eh_frame:000000000000A26B                 db    0
.eh_frame:000000000000A26C                 db  64h ; d
.eh_frame:000000000000A26D                 db  0Ah
.eh_frame:000000000000A26E                 db    0
.eh_frame:000000000000A26F                 db    0
.eh_frame:000000000000A270                 db  60h ; `
.eh_frame:000000000000A271                 db 0B8h
.eh_frame:000000000000A272                 db 0FFh
.eh_frame:000000000000A273                 db 0FFh
.eh_frame:000000000000A274                 db  60h ; `
.eh_frame:000000000000A275                 db    0
.eh_frame:000000000000A276                 db    0
.eh_frame:000000000000A277                 db    0
.eh_frame:000000000000A278                 db    0
.eh_frame:000000000000A279                 db  44h ; D
.eh_frame:000000000000A27A                 db  0Eh
.eh_frame:000000000000A27B                 db  10h
.eh_frame:000000000000A27C                 db  75h ; u
.eh_frame:000000000000A27D                 db  0Ah
.eh_frame:000000000000A27E                 db  0Eh
.eh_frame:000000000000A27F                 db    8
.eh_frame:000000000000A280                 db  47h ; G
.eh_frame:000000000000A281                 db  0Bh
.eh_frame:000000000000A282                 db  5Fh ; _
.eh_frame:000000000000A283                 db  0Eh
.eh_frame:000000000000A284                 db    8
.eh_frame:000000000000A285                 db    0
.eh_frame:000000000000A286                 db    0
.eh_frame:000000000000A287                 db    0
.eh_frame:000000000000A288                 db  1Ch
.eh_frame:000000000000A289                 db    0
.eh_frame:000000000000A28A                 db    0
.eh_frame:000000000000A28B                 db    0
.eh_frame:000000000000A28C                 db  84h
.eh_frame:000000000000A28D                 db  0Ah
.eh_frame:000000000000A28E                 db    0
.eh_frame:000000000000A28F                 db    0
.eh_frame:000000000000A290                 db 0A0h
.eh_frame:000000000000A291                 db 0B8h
.eh_frame:000000000000A292                 db 0FFh
.eh_frame:000000000000A293                 db 0FFh
.eh_frame:000000000000A294                 db  3Ch ; <
.eh_frame:000000000000A295                 db    0
.eh_frame:000000000000A296                 db    0
.eh_frame:000000000000A297                 db    0
.eh_frame:000000000000A298                 db    0
.eh_frame:000000000000A299                 db  44h ; D
.eh_frame:000000000000A29A                 db  0Eh
.eh_frame:000000000000A29B                 db  10h
.eh_frame:000000000000A29C                 db  61h ; a
.eh_frame:000000000000A29D                 db  0Ah
.eh_frame:000000000000A29E                 db  0Eh
.eh_frame:000000000000A29F                 db    8
.eh_frame:000000000000A2A0                 db  4Bh ; K
.eh_frame:000000000000A2A1                 db  0Bh
.eh_frame:000000000000A2A2                 db  4Bh ; K
.eh_frame:000000000000A2A3                 db  0Eh
.eh_frame:000000000000A2A4                 db    8
.eh_frame:000000000000A2A5                 db    0
.eh_frame:000000000000A2A6                 db    0
.eh_frame:000000000000A2A7                 db    0
.eh_frame:000000000000A2A8                 db  34h ; 4
.eh_frame:000000000000A2A9                 db    0
.eh_frame:000000000000A2AA                 db    0
.eh_frame:000000000000A2AB                 db    0
.eh_frame:000000000000A2AC                 db 0A4h
.eh_frame:000000000000A2AD                 db  0Ah
.eh_frame:000000000000A2AE                 db    0
.eh_frame:000000000000A2AF                 db    0
.eh_frame:000000000000A2B0                 db 0C0h
.eh_frame:000000000000A2B1                 db 0B8h
.eh_frame:000000000000A2B2                 db 0FFh
.eh_frame:000000000000A2B3                 db 0FFh
.eh_frame:000000000000A2B4                 db  7Bh ; {
.eh_frame:000000000000A2B5                 db    0
.eh_frame:000000000000A2B6                 db    0
.eh_frame:000000000000A2B7                 db    0
.eh_frame:000000000000A2B8                 db    0
.eh_frame:000000000000A2B9                 db  42h ; B
.eh_frame:000000000000A2BA                 db  0Eh
.eh_frame:000000000000A2BB                 db  10h
.eh_frame:000000000000A2BC                 db  8Ch
.eh_frame:000000000000A2BD                 db    2
.eh_frame:000000000000A2BE                 db  41h ; A
.eh_frame:000000000000A2BF                 db  0Eh
.eh_frame:000000000000A2C0                 db  18h
.eh_frame:000000000000A2C1                 db  86h
.eh_frame:000000000000A2C2                 db    3
.eh_frame:000000000000A2C3                 db  41h ; A
.eh_frame:000000000000A2C4                 db  0Eh
.eh_frame:000000000000A2C5                 db  20h
.eh_frame:000000000000A2C6                 db  83h
.eh_frame:000000000000A2C7                 db    4
.eh_frame:000000000000A2C8                 db  7Dh ; }
.eh_frame:000000000000A2C9                 db  0Ah
.eh_frame:000000000000A2CA                 db  0Eh
.eh_frame:000000000000A2CB                 db  18h
.eh_frame:000000000000A2CC                 db  41h ; A
.eh_frame:000000000000A2CD                 db  0Eh
.eh_frame:000000000000A2CE                 db  10h
.eh_frame:000000000000A2CF                 db  42h ; B
.eh_frame:000000000000A2D0                 db  0Eh
.eh_frame:000000000000A2D1                 db    8
.eh_frame:000000000000A2D2                 db  44h ; D
.eh_frame:000000000000A2D3                 db  0Bh
.eh_frame:000000000000A2D4                 db  60h ; `
.eh_frame:000000000000A2D5                 db  0Ah
.eh_frame:000000000000A2D6                 db  0Eh
.eh_frame:000000000000A2D7                 db  18h
.eh_frame:000000000000A2D8                 db  41h ; A
.eh_frame:000000000000A2D9                 db  0Eh
.eh_frame:000000000000A2DA                 db  10h
.eh_frame:000000000000A2DB                 db  42h ; B
.eh_frame:000000000000A2DC                 db  0Eh
.eh_frame:000000000000A2DD                 db    8
.eh_frame:000000000000A2DE                 db  45h ; E
.eh_frame:000000000000A2DF                 db  0Bh
.eh_frame:000000000000A2E0                 db  1Ch
.eh_frame:000000000000A2E1                 db    0
.eh_frame:000000000000A2E2                 db    0
.eh_frame:000000000000A2E3                 db    0
.eh_frame:000000000000A2E4                 db 0DCh
.eh_frame:000000000000A2E5                 db  0Ah
.eh_frame:000000000000A2E6                 db    0
.eh_frame:000000000000A2E7                 db    0
.eh_frame:000000000000A2E8                 db    8
.eh_frame:000000000000A2E9                 db 0B9h
.eh_frame:000000000000A2EA                 db 0FFh
.eh_frame:000000000000A2EB                 db 0FFh
.eh_frame:000000000000A2EC                 db  40h ; @
.eh_frame:000000000000A2ED                 db    0
.eh_frame:000000000000A2EE                 db    0
.eh_frame:000000000000A2EF                 db    0
.eh_frame:000000000000A2F0                 db    0
.eh_frame:000000000000A2F1                 db  44h ; D
.eh_frame:000000000000A2F2                 db  0Eh
.eh_frame:000000000000A2F3                 db  10h
.eh_frame:000000000000A2F4                 db  83h
.eh_frame:000000000000A2F5                 db    2
.eh_frame:000000000000A2F6                 db  5Ah ; Z
.eh_frame:000000000000A2F7                 db  0Ah
.eh_frame:000000000000A2F8                 db  0Eh
.eh_frame:000000000000A2F9                 db    8
.eh_frame:000000000000A2FA                 db  4Ah ; J
.eh_frame:000000000000A2FB                 db  0Bh
.eh_frame:000000000000A2FC                 db  53h ; S
.eh_frame:000000000000A2FD                 db  0Eh
.eh_frame:000000000000A2FE                 db    8
.eh_frame:000000000000A2FF                 db    0
.eh_frame:000000000000A300                 db  2Ch ; ,
.eh_frame:000000000000A301                 db    0
.eh_frame:000000000000A302                 db    0
.eh_frame:000000000000A303                 db    0
.eh_frame:000000000000A304                 db 0FCh
.eh_frame:000000000000A305                 db  0Ah
.eh_frame:000000000000A306                 db    0
.eh_frame:000000000000A307                 db    0
.eh_frame:000000000000A308                 db  28h ; (
.eh_frame:000000000000A309                 db 0B9h
.eh_frame:000000000000A30A                 db 0FFh
.eh_frame:000000000000A30B                 db 0FFh
.eh_frame:000000000000A30C                 db  57h ; W
.eh_frame:000000000000A30D                 db    0
.eh_frame:000000000000A30E                 db    0
.eh_frame:000000000000A30F                 db    0
.eh_frame:000000000000A310                 db    0
.eh_frame:000000000000A311                 db  63h ; c
.eh_frame:000000000000A312                 db  0Eh
.eh_frame:000000000000A313                 db  10h
.eh_frame:000000000000A314                 db  8Ch
.eh_frame:000000000000A315                 db    2
.eh_frame:000000000000A316                 db  41h ; A
.eh_frame:000000000000A317                 db  0Eh
.eh_frame:000000000000A318                 db  18h
.eh_frame:000000000000A319                 db  86h
.eh_frame:000000000000A31A                 db    3
.eh_frame:000000000000A31B                 db  44h ; D
.eh_frame:000000000000A31C                 db  0Eh
.eh_frame:000000000000A31D                 db  20h
.eh_frame:000000000000A31E                 db  83h
.eh_frame:000000000000A31F                 db    4
.eh_frame:000000000000A320                 db  6Bh ; k
.eh_frame:000000000000A321                 db  0Eh
.eh_frame:000000000000A322                 db  18h
.eh_frame:000000000000A323                 db  41h ; A
.eh_frame:000000000000A324                 db  0Eh
.eh_frame:000000000000A325                 db  10h
.eh_frame:000000000000A326                 db  42h ; B
.eh_frame:000000000000A327                 db  0Eh
.eh_frame:000000000000A328                 db    8
.eh_frame:000000000000A329                 db    0
.eh_frame:000000000000A32A                 db    0
.eh_frame:000000000000A32B                 db    0
.eh_frame:000000000000A32C                 db    0
.eh_frame:000000000000A32D                 db    0
.eh_frame:000000000000A32E                 db    0
.eh_frame:000000000000A32F                 db    0
.eh_frame:000000000000A330                 db  2Ch ; ,
.eh_frame:000000000000A331                 db    0
.eh_frame:000000000000A332                 db    0
.eh_frame:000000000000A333                 db    0
.eh_frame:000000000000A334                 db  2Ch ; ,
.eh_frame:000000000000A335                 db  0Bh
.eh_frame:000000000000A336                 db    0
.eh_frame:000000000000A337                 db    0
.eh_frame:000000000000A338                 db  58h ; X
.eh_frame:000000000000A339                 db 0B9h
.eh_frame:000000000000A33A                 db 0FFh
.eh_frame:000000000000A33B                 db 0FFh
.eh_frame:000000000000A33C                 db  1Fh
.eh_frame:000000000000A33D                 db  11h
.eh_frame:000000000000A33E                 db    0
.eh_frame:000000000000A33F                 db    0
.eh_frame:000000000000A340                 db    0
.eh_frame:000000000000A341                 db  41h ; A
.eh_frame:000000000000A342                 db  0Eh
.eh_frame:000000000000A343                 db  10h
.eh_frame:000000000000A344                 db  86h
.eh_frame:000000000000A345                 db    2
.eh_frame:000000000000A346                 db  43h ; C
.eh_frame:000000000000A347                 db  0Dh
.eh_frame:000000000000A348                 db    6
.eh_frame:000000000000A349                 db  48h ; H
.eh_frame:000000000000A34A                 db  8Fh
.eh_frame:000000000000A34B                 db    3
.eh_frame:000000000000A34C                 db  8Eh
.eh_frame:000000000000A34D                 db    4
.eh_frame:000000000000A34E                 db  8Dh
.eh_frame:000000000000A34F                 db    5
.eh_frame:000000000000A350                 db  8Ch
.eh_frame:000000000000A351                 db    6
.eh_frame:000000000000A352                 db  48h ; H
.eh_frame:000000000000A353                 db  83h
.eh_frame:000000000000A354                 db    7
.eh_frame:000000000000A355                 db    3
.eh_frame:000000000000A356                 db 0EFh
.eh_frame:000000000000A357                 db    1
.eh_frame:000000000000A358                 db  0Ah
.eh_frame:000000000000A359                 db  0Ch
.eh_frame:000000000000A35A                 db    7
.eh_frame:000000000000A35B                 db    8
.eh_frame:000000000000A35C                 db  45h ; E
.eh_frame:000000000000A35D                 db  0Bh
.eh_frame:000000000000A35E                 db    0
.eh_frame:000000000000A35F                 db    0
.eh_frame:000000000000A360                 db  14h
.eh_frame:000000000000A361                 db    0
.eh_frame:000000000000A362                 db    0
.eh_frame:000000000000A363                 db    0
.eh_frame:000000000000A364                 db  5Ch ; \
.eh_frame:000000000000A365                 db  0Bh
.eh_frame:000000000000A366                 db    0
.eh_frame:000000000000A367                 db    0
.eh_frame:000000000000A368                 db  48h ; H
.eh_frame:000000000000A369                 db 0CAh
.eh_frame:000000000000A36A                 db 0FFh
.eh_frame:000000000000A36B                 db 0FFh
.eh_frame:000000000000A36C                 db 0FEh
.eh_frame:000000000000A36D                 db    1
.eh_frame:000000000000A36E                 db    0
.eh_frame:000000000000A36F                 db    0
.eh_frame:000000000000A370                 db    0
.eh_frame:000000000000A371                 db    0
.eh_frame:000000000000A372                 db    0
.eh_frame:000000000000A373                 db    0
.eh_frame:000000000000A374                 db    0
.eh_frame:000000000000A375                 db    0
.eh_frame:000000000000A376                 db    0
.eh_frame:000000000000A377                 db    0
.eh_frame:000000000000A378                 db  4Ch ; L
.eh_frame:000000000000A379                 db    0
.eh_frame:000000000000A37A                 db    0
.eh_frame:000000000000A37B                 db    0
.eh_frame:000000000000A37C                 db  74h ; t
.eh_frame:000000000000A37D                 db  0Bh
.eh_frame:000000000000A37E                 db    0
.eh_frame:000000000000A37F                 db    0
.eh_frame:000000000000A380                 db  30h ; 0
.eh_frame:000000000000A381                 db 0CCh
.eh_frame:000000000000A382                 db 0FFh
.eh_frame:000000000000A383                 db 0FFh
.eh_frame:000000000000A384                 db 0ECh
.eh_frame:000000000000A385                 db  0Ch
.eh_frame:000000000000A386                 db    0
.eh_frame:000000000000A387                 db    0
.eh_frame:000000000000A388                 db    0
.eh_frame:000000000000A389                 db  42h ; B
.eh_frame:000000000000A38A                 db  0Eh
.eh_frame:000000000000A38B                 db  10h
.eh_frame:000000000000A38C                 db  8Fh
.eh_frame:000000000000A38D                 db    2
.eh_frame:000000000000A38E                 db  42h ; B
.eh_frame:000000000000A38F                 db  0Eh
.eh_frame:000000000000A390                 db  18h
.eh_frame:000000000000A391                 db  8Eh
.eh_frame:000000000000A392                 db    3
.eh_frame:000000000000A393                 db  46h ; F
.eh_frame:000000000000A394                 db  0Eh
.eh_frame:000000000000A395                 db  20h
.eh_frame:000000000000A396                 db  8Dh
.eh_frame:000000000000A397                 db    4
.eh_frame:000000000000A398                 db  42h ; B
.eh_frame:000000000000A399                 db  0Eh
.eh_frame:000000000000A39A                 db  28h ; (
.eh_frame:000000000000A39B                 db  8Ch
.eh_frame:000000000000A39C                 db    5
.eh_frame:000000000000A39D                 db  45h ; E
.eh_frame:000000000000A39E                 db  0Eh
.eh_frame:000000000000A39F                 db  30h ; 0
.eh_frame:000000000000A3A0                 db  86h
.eh_frame:000000000000A3A1                 db    6
.eh_frame:000000000000A3A2                 db  41h ; A
.eh_frame:000000000000A3A3                 db  0Eh
.eh_frame:000000000000A3A4                 db  38h ; 8
.eh_frame:000000000000A3A5                 db  83h
.eh_frame:000000000000A3A6                 db    7
.eh_frame:000000000000A3A7                 db  52h ; R
.eh_frame:000000000000A3A8                 db  0Eh
.eh_frame:000000000000A3A9                 db  90h
.eh_frame:000000000000A3AA                 db    1
.eh_frame:000000000000A3AB                 db    2
.eh_frame:000000000000A3AC                 db  82h
.eh_frame:000000000000A3AD                 db  0Ah
.eh_frame:000000000000A3AE                 db  0Eh
.eh_frame:000000000000A3AF                 db  38h ; 8
.eh_frame:000000000000A3B0                 db  41h ; A
.eh_frame:000000000000A3B1                 db  0Eh
.eh_frame:000000000000A3B2                 db  30h ; 0
.eh_frame:000000000000A3B3                 db  41h ; A
.eh_frame:000000000000A3B4                 db  0Eh
.eh_frame:000000000000A3B5                 db  28h ; (
.eh_frame:000000000000A3B6                 db  42h ; B
.eh_frame:000000000000A3B7                 db  0Eh
.eh_frame:000000000000A3B8                 db  20h
.eh_frame:000000000000A3B9                 db  42h ; B
.eh_frame:000000000000A3BA                 db  0Eh
.eh_frame:000000000000A3BB                 db  18h
.eh_frame:000000000000A3BC                 db  42h ; B
.eh_frame:000000000000A3BD                 db  0Eh
.eh_frame:000000000000A3BE                 db  10h
.eh_frame:000000000000A3BF                 db  42h ; B
.eh_frame:000000000000A3C0                 db  0Eh
.eh_frame:000000000000A3C1                 db    8
.eh_frame:000000000000A3C2                 db  48h ; H
.eh_frame:000000000000A3C3                 db  0Bh
.eh_frame:000000000000A3C4                 db    0
.eh_frame:000000000000A3C5                 db    0
.eh_frame:000000000000A3C6                 db    0
.eh_frame:000000000000A3C7                 db    0
.eh_frame:000000000000A3C8                 db  44h ; D
.eh_frame:000000000000A3C9                 db    0
.eh_frame:000000000000A3CA                 db    0
.eh_frame:000000000000A3CB                 db    0
.eh_frame:000000000000A3CC                 db 0C4h
.eh_frame:000000000000A3CD                 db  0Bh
.eh_frame:000000000000A3CE                 db    0
.eh_frame:000000000000A3CF                 db    0
.eh_frame:000000000000A3D0                 db 0D0h
.eh_frame:000000000000A3D1                 db 0D8h
.eh_frame:000000000000A3D2                 db 0FFh
.eh_frame:000000000000A3D3                 db 0FFh
.eh_frame:000000000000A3D4                 db  65h ; e
.eh_frame:000000000000A3D5                 db    0
.eh_frame:000000000000A3D6                 db    0
.eh_frame:000000000000A3D7                 db    0
.eh_frame:000000000000A3D8                 db    0
.eh_frame:000000000000A3D9                 db  42h ; B
.eh_frame:000000000000A3DA                 db  0Eh
.eh_frame:000000000000A3DB                 db  10h
.eh_frame:000000000000A3DC                 db  8Fh
.eh_frame:000000000000A3DD                 db    2
.eh_frame:000000000000A3DE                 db  42h ; B
.eh_frame:000000000000A3DF                 db  0Eh
.eh_frame:000000000000A3E0                 db  18h
.eh_frame:000000000000A3E1                 db  8Eh
.eh_frame:000000000000A3E2                 db    3
.eh_frame:000000000000A3E3                 db  45h ; E
.eh_frame:000000000000A3E4                 db  0Eh
.eh_frame:000000000000A3E5                 db  20h
.eh_frame:000000000000A3E6                 db  8Dh
.eh_frame:000000000000A3E7                 db    4
.eh_frame:000000000000A3E8                 db  42h ; B
.eh_frame:000000000000A3E9                 db  0Eh
.eh_frame:000000000000A3EA                 db  28h ; (
.eh_frame:000000000000A3EB                 db  8Ch
.eh_frame:000000000000A3EC                 db    5
.eh_frame:000000000000A3ED                 db  48h ; H
.eh_frame:000000000000A3EE                 db  0Eh
.eh_frame:000000000000A3EF                 db  30h ; 0
.eh_frame:000000000000A3F0                 db  86h
.eh_frame:000000000000A3F1                 db    6
.eh_frame:000000000000A3F2                 db  48h ; H
.eh_frame:000000000000A3F3                 db  0Eh
.eh_frame:000000000000A3F4                 db  38h ; 8
.eh_frame:000000000000A3F5                 db  83h
.eh_frame:000000000000A3F6                 db    7
.eh_frame:000000000000A3F7                 db  4Dh ; M
.eh_frame:000000000000A3F8                 db  0Eh
.eh_frame:000000000000A3F9                 db  40h ; @
.eh_frame:000000000000A3FA                 db  72h ; r
.eh_frame:000000000000A3FB                 db  0Eh
.eh_frame:000000000000A3FC                 db  38h ; 8
.eh_frame:000000000000A3FD                 db  41h ; A
.eh_frame:000000000000A3FE                 db  0Eh
.eh_frame:000000000000A3FF                 db  30h ; 0
.eh_frame:000000000000A400                 db  41h ; A
.eh_frame:000000000000A401                 db  0Eh
.eh_frame:000000000000A402                 db  28h ; (
.eh_frame:000000000000A403                 db  42h ; B
.eh_frame:000000000000A404                 db  0Eh
.eh_frame:000000000000A405                 db  20h
.eh_frame:000000000000A406                 db  42h ; B
.eh_frame:000000000000A407                 db  0Eh
.eh_frame:000000000000A408                 db  18h
.eh_frame:000000000000A409                 db  42h ; B
.eh_frame:000000000000A40A                 db  0Eh
.eh_frame:000000000000A40B                 db  10h
.eh_frame:000000000000A40C                 db  42h ; B
.eh_frame:000000000000A40D                 db  0Eh
.eh_frame:000000000000A40E                 db    8
.eh_frame:000000000000A40F                 db    0
.eh_frame:000000000000A410                 db  14h
.eh_frame:000000000000A411                 db    0
.eh_frame:000000000000A412                 db    0
.eh_frame:000000000000A413                 db    0
.eh_frame:000000000000A414                 db  0Ch
.eh_frame:000000000000A415                 db  0Ch
.eh_frame:000000000000A416                 db    0
.eh_frame:000000000000A417                 db    0
.eh_frame:000000000000A418                 db 0F8h
.eh_frame:000000000000A419                 db 0D8h
.eh_frame:000000000000A41A                 db 0FFh
.eh_frame:000000000000A41B                 db 0FFh
.eh_frame:000000000000A41C                 db    2
.eh_frame:000000000000A41D                 db    0
.eh_frame:000000000000A41E                 db    0
.eh_frame:000000000000A41F                 db    0
.eh_frame:000000000000A420                 db    0
.eh_frame:000000000000A421                 db    0
.eh_frame:000000000000A422                 db    0
.eh_frame:000000000000A423                 db    0
.eh_frame:000000000000A424                 db    0
.eh_frame:000000000000A425                 db    0
.eh_frame:000000000000A426                 db    0
.eh_frame:000000000000A427                 db    0
.eh_frame:000000000000A428                 db  10h
.eh_frame:000000000000A429                 db    0
.eh_frame:000000000000A42A                 db    0
.eh_frame:000000000000A42B                 db    0
.eh_frame:000000000000A42C                 db  24h ; $
.eh_frame:000000000000A42D                 db  0Ch
.eh_frame:000000000000A42E                 db    0
.eh_frame:000000000000A42F                 db    0
.eh_frame:000000000000A430                 db 0F0h
.eh_frame:000000000000A431                 db 0D8h
.eh_frame:000000000000A432                 db 0FFh
.eh_frame:000000000000A433                 db 0FFh
.eh_frame:000000000000A434                 db  0Eh
.eh_frame:000000000000A435                 db    0
.eh_frame:000000000000A436                 db    0
.eh_frame:000000000000A437                 db    0
.eh_frame:000000000000A438                 db    0
.eh_frame:000000000000A439                 db    0
.eh_frame:000000000000A43A                 db    0
.eh_frame:000000000000A43B                 db    0
.eh_frame:000000000000A43C __FRAME_END__   db    0
.eh_frame:000000000000A43D                 db    0
.eh_frame:000000000000A43E                 db    0
.eh_frame:000000000000A43F                 db    0
.eh_frame:000000000000A43F _eh_frame       ends
.eh_frame:000000000000A43F
.init_array:000000000020ABD0 ; ELF Initialization Function Table
.init_array:000000000020ABD0 ; ===========================================================================
.init_array:000000000020ABD0
.init_array:000000000020ABD0 ; Segment type: Pure data
.init_array:000000000020ABD0 ; Segment permissions: Read/Write
.init_array:000000000020ABD0 _init_array     segment qword public 'DATA' use64
.init_array:000000000020ABD0                 assume cs:_init_array
.init_array:000000000020ABD0                 ;org 20ABD0h
.init_array:000000000020ABD0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020ABD0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020ABD0                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020ABD0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020ABD0
.fini_array:000000000020ABD8 ; ELF Termination Function Table
.fini_array:000000000020ABD8 ; ===========================================================================
.fini_array:000000000020ABD8
.fini_array:000000000020ABD8 ; Segment type: Pure data
.fini_array:000000000020ABD8 ; Segment permissions: Read/Write
.fini_array:000000000020ABD8 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020ABD8                 assume cs:_fini_array
.fini_array:000000000020ABD8                 ;org 20ABD8h
.fini_array:000000000020ABD8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020ABD8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020ABD8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020ABD8
.data.rel.ro:000000000020ABE0 ; ===========================================================================
.data.rel.ro:000000000020ABE0
.data.rel.ro:000000000020ABE0 ; Segment type: Pure data
.data.rel.ro:000000000020ABE0 ; Segment permissions: Read/Write
.data.rel.ro:000000000020ABE0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020ABE0                 assume cs:_data_rel_ro
.data.rel.ro:000000000020ABE0                 ;org 20ABE0h
.data.rel.ro:000000000020ABE0                 public quoting_style_args
.data.rel.ro:000000000020ABE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020ABE8                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020ABF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020ABF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020AC00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020AC08                 dq offset aC_0          ; "c"
.data.rel.ro:000000000020AC10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020AC18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020AC20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020AC28                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020AC30                 db    0
.data.rel.ro:000000000020AC31                 db    0
.data.rel.ro:000000000020AC32                 db    0
.data.rel.ro:000000000020AC33                 db    0
.data.rel.ro:000000000020AC34                 db    0
.data.rel.ro:000000000020AC35                 db    0
.data.rel.ro:000000000020AC36                 db    0
.data.rel.ro:000000000020AC37                 db    0
.data.rel.ro:000000000020AC37 _data_rel_ro    ends
.data.rel.ro:000000000020AC37
LOAD:000000000020AC38 ; ELF Dynamic Information
LOAD:000000000020AC38 ; ===========================================================================
LOAD:000000000020AC38
LOAD:000000000020AC38 ; Segment type: Pure data
LOAD:000000000020AC38 ; Segment permissions: Read/Write
LOAD:000000000020AC38 LOAD            segment byte public 'DATA' use64
LOAD:000000000020AC38                 assume cs:LOAD
LOAD:000000000020AC38                 ;org 20AC38h
LOAD:000000000020AC38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020AC38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020AC38                                         ; DT_NEEDED libc.so.6
LOAD:000000000020AC48                 Elf64_Dyn <0Ch, 12D8h>  ; DT_INIT
LOAD:000000000020AC58                 Elf64_Dyn <0Dh, 7D30h>  ; DT_FINI
LOAD:000000000020AC68                 Elf64_Dyn <19h, 20ABD0h> ; DT_INIT_ARRAY
LOAD:000000000020AC78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020AC88                 Elf64_Dyn <1Ah, 20ABD8h> ; DT_FINI_ARRAY
LOAD:000000000020AC98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020ACA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020ACB8                 Elf64_Dyn <5, 878h>     ; DT_STRTAB
LOAD:000000000020ACC8                 Elf64_Dyn <6, 2D8h>     ; DT_SYMTAB
LOAD:000000000020ACD8                 Elf64_Dyn <0Ah, 2C3h>   ; DT_STRSZ
LOAD:000000000020ACE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020ACF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020AD08                 Elf64_Dyn <3, 20AE28h>  ; DT_PLTGOT
LOAD:000000000020AD18                 Elf64_Dyn <2, 480h>     ; DT_PLTRELSZ
LOAD:000000000020AD28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020AD38                 Elf64_Dyn <17h, 0E58h>  ; DT_JMPREL
LOAD:000000000020AD48                 Elf64_Dyn <7, 0C18h>    ; DT_RELA
LOAD:000000000020AD58                 Elf64_Dyn <8, 240h>     ; DT_RELASZ
LOAD:000000000020AD68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020AD78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020AD88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020AD98                 Elf64_Dyn <6FFFFFFEh, 0BB8h> ; DT_VERNEED
LOAD:000000000020ADA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020ADB8                 Elf64_Dyn <6FFFFFF0h, 0B3Ch> ; DT_VERSYM
LOAD:000000000020ADC8                 Elf64_Dyn <6FFFFFF9h, 0Fh> ; DT_RELACOUNT
LOAD:000000000020ADD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020ADE8                 db    0
LOAD:000000000020ADE9                 db    0
LOAD:000000000020ADEA                 db    0
LOAD:000000000020ADEB                 db    0
LOAD:000000000020ADEC                 db    0
LOAD:000000000020ADED                 db    0
LOAD:000000000020ADEE                 db    0
LOAD:000000000020ADEF                 db    0
LOAD:000000000020ADF0                 db    0
LOAD:000000000020ADF1                 db    0
LOAD:000000000020ADF2                 db    0
LOAD:000000000020ADF3                 db    0
LOAD:000000000020ADF4                 db    0
LOAD:000000000020ADF5                 db    0
LOAD:000000000020ADF6                 db    0
LOAD:000000000020ADF7                 db    0
LOAD:000000000020ADF8                 db    0
LOAD:000000000020ADF9                 db    0
LOAD:000000000020ADFA                 db    0
LOAD:000000000020ADFB                 db    0
LOAD:000000000020ADFC                 db    0
LOAD:000000000020ADFD                 db    0
LOAD:000000000020ADFE                 db    0
LOAD:000000000020ADFF                 db    0
LOAD:000000000020AE00                 db    0
LOAD:000000000020AE01                 db    0
LOAD:000000000020AE02                 db    0
LOAD:000000000020AE03                 db    0
LOAD:000000000020AE04                 db    0
LOAD:000000000020AE05                 db    0
LOAD:000000000020AE06                 db    0
LOAD:000000000020AE07                 db    0
LOAD:000000000020AE08                 db    0
LOAD:000000000020AE09                 db    0
LOAD:000000000020AE0A                 db    0
LOAD:000000000020AE0B                 db    0
LOAD:000000000020AE0C                 db    0
LOAD:000000000020AE0D                 db    0
LOAD:000000000020AE0E                 db    0
LOAD:000000000020AE0F                 db    0
LOAD:000000000020AE10                 db    0
LOAD:000000000020AE11                 db    0
LOAD:000000000020AE12                 db    0
LOAD:000000000020AE13                 db    0
LOAD:000000000020AE14                 db    0
LOAD:000000000020AE15                 db    0
LOAD:000000000020AE16                 db    0
LOAD:000000000020AE17                 db    0
LOAD:000000000020AE18                 db    0
LOAD:000000000020AE19                 db    0
LOAD:000000000020AE1A                 db    0
LOAD:000000000020AE1B                 db    0
LOAD:000000000020AE1C                 db    0
LOAD:000000000020AE1D                 db    0
LOAD:000000000020AE1E                 db    0
LOAD:000000000020AE1F                 db    0
LOAD:000000000020AE20                 db    0
LOAD:000000000020AE21                 db    0
LOAD:000000000020AE22                 db    0
LOAD:000000000020AE23                 db    0
LOAD:000000000020AE24                 db    0
LOAD:000000000020AE25                 db    0
LOAD:000000000020AE26                 db    0
LOAD:000000000020AE27                 db    0
LOAD:000000000020AE27 LOAD            ends
LOAD:000000000020AE27
.got:000000000020AE28 ; ===========================================================================
.got:000000000020AE28
.got:000000000020AE28 ; Segment type: Pure data
.got:000000000020AE28 ; Segment permissions: Read/Write
.got:000000000020AE28 _got            segment qword public 'DATA' use64
.got:000000000020AE28                 assume cs:_got
.got:000000000020AE28                 ;org 20AE28h
.got:000000000020AE28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020AE30 qword_20AE30    dq 0                    ; DATA XREF: sub_12F0↑r
.got:000000000020AE38 qword_20AE38    dq 0                    ; DATA XREF: sub_12F0+6↑r
.got:000000000020AE40 __snprintf_chk_ptr dq offset __snprintf_chk
.got:000000000020AE40                                         ; DATA XREF: ___snprintf_chk↑r
.got:000000000020AE48 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:000000000020AE50 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020AE58 __errno_location_ptr dq offset __errno_location
.got:000000000020AE58                                         ; DATA XREF: ___errno_location↑r
.got:000000000020AE60 error_at_line_ptr dq offset error_at_line
.got:000000000020AE60                                         ; DATA XREF: _error_at_line↑r
.got:000000000020AE68 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020AE70 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020AE78 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020AE80 isatty_ptr      dq offset isatty        ; DATA XREF: _isatty↑r
.got:000000000020AE88 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020AE90 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020AE98 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020AE98                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020AEA0 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020AEA8 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020AEA8                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020AEB0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020AEB8 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:000000000020AEC0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020AEC0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020AEC8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020AED0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020AED8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020AEE0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020AEE8 geteuid_ptr     dq offset geteuid       ; DATA XREF: _geteuid↑r
.got:000000000020AEF0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020AEF8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020AEF8                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020AF00 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020AF08 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000020AF10 strtol_ptr      dq offset strtol        ; DATA XREF: _strtol↑r
.got:000000000020AF18 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020AF20 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020AF28 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:000000000020AF30 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020AF38 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020AF40 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020AF48 getegid_ptr     dq offset getegid       ; DATA XREF: _getegid↑r
.got:000000000020AF50 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020AF58 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020AF60 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020AF68 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020AF70 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020AF78 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020AF80 euidaccess_ptr  dq offset euidaccess    ; DATA XREF: _euidaccess↑r
.got:000000000020AF88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020AF90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020AF98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020AFA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020AFA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020AFA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020AFB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020AFB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020AFB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020AFC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020AFC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020AFC8 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020AFC8                                         ; DATA XREF: start+24↑r
.got:000000000020AFD0 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020AFD0                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020AFD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020AFD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020AFE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020AFE0                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020AFE0                                         ; __do_global_dtors_aux+9↑r
.got:000000000020AFE0 _got            ends
.got:000000000020AFE0
LOAD:000000000020AFE8 ; ===========================================================================
LOAD:000000000020AFE8
LOAD:000000000020AFE8 ; Segment type: Pure data
LOAD:000000000020AFE8 ; Segment permissions: Read/Write
LOAD:000000000020AFE8 LOAD            segment byte public 'DATA' use64
LOAD:000000000020AFE8                 assume cs:LOAD
LOAD:000000000020AFE8                 ;org 20AFE8h
LOAD:000000000020AFE8                 align 20h
LOAD:000000000020AFE8 LOAD            ends
LOAD:000000000020AFE8
.data:000000000020B000 ; ===========================================================================
.data:000000000020B000
.data:000000000020B000 ; Segment type: Pure data
.data:000000000020B000 ; Segment permissions: Read/Write
.data:000000000020B000 _data           segment align_32 public 'DATA' use64
.data:000000000020B000                 assume cs:_data
.data:000000000020B000                 ;org 20B000h
.data:000000000020B000                 public __data_start ; weak
.data:000000000020B000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020B000                                         ; data_start
.data:000000000020B001                 db    0
.data:000000000020B002                 db    0
.data:000000000020B003                 db    0
.data:000000000020B004                 db    0
.data:000000000020B005                 db    0
.data:000000000020B006                 db    0
.data:000000000020B007                 db    0
.data:000000000020B008                 public __dso_handle
.data:000000000020B008 ; void *_dso_handle
.data:000000000020B008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020B008                                         ; atexit↑r ...
.data:000000000020B010                 public exit_failure
.data:000000000020B010 ; int exit_failure
.data:000000000020B010 exit_failure    dd 1                    ; DATA XREF: main+4A↑w
.data:000000000020B010                                         ; close_stdout:loc_3382↑r ...
.data:000000000020B014                 align 20h
.data:000000000020B020                 public quote_quoting_options
.data:000000000020B020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020B020                                         ; quote_mem↑o ...
.data:000000000020B021                 db    0
.data:000000000020B022                 db    0
.data:000000000020B023                 db    0
.data:000000000020B024                 db    0
.data:000000000020B025                 db    0
.data:000000000020B026                 db    0
.data:000000000020B027                 db    0
.data:000000000020B028                 db    0
.data:000000000020B029                 db    0
.data:000000000020B02A                 db    0
.data:000000000020B02B                 db    0
.data:000000000020B02C                 db    0
.data:000000000020B02D                 db    0
.data:000000000020B02E                 db    0
.data:000000000020B02F                 db    0
.data:000000000020B030                 db    0
.data:000000000020B031                 db    0
.data:000000000020B032                 db    0
.data:000000000020B033                 db    0
.data:000000000020B034                 db    0
.data:000000000020B035                 db    0
.data:000000000020B036                 db    0
.data:000000000020B037                 db    0
.data:000000000020B038                 db    0
.data:000000000020B039                 db    0
.data:000000000020B03A                 db    0
.data:000000000020B03B                 db    0
.data:000000000020B03C                 db    0
.data:000000000020B03D                 db    0
.data:000000000020B03E                 db    0
.data:000000000020B03F                 db    0
.data:000000000020B040                 db    0
.data:000000000020B041                 db    0
.data:000000000020B042                 db    0
.data:000000000020B043                 db    0
.data:000000000020B044                 db    0
.data:000000000020B045                 db    0
.data:000000000020B046                 db    0
.data:000000000020B047                 db    0
.data:000000000020B048                 db    0
.data:000000000020B049                 db    0
.data:000000000020B04A                 db    0
.data:000000000020B04B                 db    0
.data:000000000020B04C                 db    0
.data:000000000020B04D                 db    0
.data:000000000020B04E                 db    0
.data:000000000020B04F                 db    0
.data:000000000020B050                 db    0
.data:000000000020B051                 db    0
.data:000000000020B052                 db    0
.data:000000000020B053                 db    0
.data:000000000020B054                 db    0
.data:000000000020B055                 db    0
.data:000000000020B056                 db    0
.data:000000000020B057                 db    0
.data:000000000020B058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020B058                                         ; quotearg_n_options:loc_484D↑r ...
.data:000000000020B05C                 align 20h
.data:000000000020B060 ; void *slotvec
.data:000000000020B060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020B060                                         ; quotearg_n_options+76↑w ...
.data:000000000020B068                 align 10h
.data:000000000020B070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020B070                                         ; quotearg_n_options+187↑r ...
.data:000000000020B078 off_20B078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020B078 _data           ends
.data:000000000020B078
.bss:000000000020B080 ; ===========================================================================
.bss:000000000020B080
.bss:000000000020B080 ; Segment type: Uninitialized
.bss:000000000020B080 ; Segment permissions: Read/Write
.bss:000000000020B080 _bss            segment align_32 public 'BSS' use64
.bss:000000000020B080                 assume cs:_bss
.bss:000000000020B080                 ;org 20B080h
.bss:000000000020B080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020B080                 public __bss_start ; weak
.bss:000000000020B080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000800↑o
.bss:000000000020B080                                         ; LOAD:0000000000000848↑o ...
.bss:000000000020B080                                         ; Alternative name is '__TMC_END__'
.bss:000000000020B080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020B080                                         ; _edata
.bss:000000000020B080                                         ; Copy of shared data
.bss:000000000020B088                 public stdout@@GLIBC_2_2_5
.bss:000000000020B088 ; FILE *stdout
.bss:000000000020B088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007E8↑o
.bss:000000000020B088                                         ; usage:loc_2DFD↑r ...
.bss:000000000020B088                                         ; Alternative name is 'stdout'
.bss:000000000020B088                                         ; Copy of shared data
.bss:000000000020B090                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020B090 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020B090                                         ; DATA XREF: LOAD:0000000000000818↑o
.bss:000000000020B090                                         ; LOAD:0000000000000830↑o ...
.bss:000000000020B090                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020B090                                         ; Copy of shared data
.bss:000000000020B098                 align 20h
.bss:000000000020B0A0                 public stderr@@GLIBC_2_2_5
.bss:000000000020B0A0 ; FILE *stderr
.bss:000000000020B0A0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000860↑o
.bss:000000000020B0A0                                         ; usage+3D↑r ...
.bss:000000000020B0A0                                         ; Alternative name is 'stderr'
.bss:000000000020B0A0                                         ; Copy of shared data
.bss:000000000020B0A8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020B0A8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020B0A9                 align 10h
.bss:000000000020B0B0 argv            dq ?                    ; DATA XREF: main+5C↑w
.bss:000000000020B0B0                                         ; main:loc_16B0↑r ...
.bss:000000000020B0B8 argc            dd ?                    ; DATA XREF: main+63↑w
.bss:000000000020B0B8                                         ; main+84↑r ...
.bss:000000000020B0BC pos             dd ?                    ; DATA XREF: main+69↑w
.bss:000000000020B0BC                                         ; main+7D↑r ...
.bss:000000000020B0C0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020B0C0                                         ; close_stdout+1B↑r
.bss:000000000020B0C1                 align 8
.bss:000000000020B0C8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020B0C8                                         ; close_stdout+56↑r
.bss:000000000020B0D0                 public program_name
.bss:000000000020B0D0 program_name    dq ?                    ; DATA XREF: usage+2A↑r
.bss:000000000020B0D0                                         ; set_program_name:loc_346D↑w
.bss:000000000020B0D8                 align 20h
.bss:000000000020B0E0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020B0E0                                         ; quotearg_free+46↑o ...
.bss:000000000020B0E1                 db    ? ;
.bss:000000000020B0E2                 db    ? ;
.bss:000000000020B0E3                 db    ? ;
.bss:000000000020B0E4                 db    ? ;
.bss:000000000020B0E5                 db    ? ;
.bss:000000000020B0E6                 db    ? ;
.bss:000000000020B0E7                 db    ? ;
.bss:000000000020B0E8                 db    ? ;
.bss:000000000020B0E9                 db    ? ;
.bss:000000000020B0EA                 db    ? ;
.bss:000000000020B0EB                 db    ? ;
.bss:000000000020B0EC                 db    ? ;
.bss:000000000020B0ED                 db    ? ;
.bss:000000000020B0EE                 db    ? ;
.bss:000000000020B0EF                 db    ? ;
.bss:000000000020B0F0                 db    ? ;
.bss:000000000020B0F1                 db    ? ;
.bss:000000000020B0F2                 db    ? ;
.bss:000000000020B0F3                 db    ? ;
.bss:000000000020B0F4                 db    ? ;
.bss:000000000020B0F5                 db    ? ;
.bss:000000000020B0F6                 db    ? ;
.bss:000000000020B0F7                 db    ? ;
.bss:000000000020B0F8                 db    ? ;
.bss:000000000020B0F9                 db    ? ;
.bss:000000000020B0FA                 db    ? ;
.bss:000000000020B0FB                 db    ? ;
.bss:000000000020B0FC                 db    ? ;
.bss:000000000020B0FD                 db    ? ;
.bss:000000000020B0FE                 db    ? ;
.bss:000000000020B0FF                 db    ? ;
.bss:000000000020B100                 db    ? ;
.bss:000000000020B101                 db    ? ;
.bss:000000000020B102                 db    ? ;
.bss:000000000020B103                 db    ? ;
.bss:000000000020B104                 db    ? ;
.bss:000000000020B105                 db    ? ;
.bss:000000000020B106                 db    ? ;
.bss:000000000020B107                 db    ? ;
.bss:000000000020B108                 db    ? ;
.bss:000000000020B109                 db    ? ;
.bss:000000000020B10A                 db    ? ;
.bss:000000000020B10B                 db    ? ;
.bss:000000000020B10C                 db    ? ;
.bss:000000000020B10D                 db    ? ;
.bss:000000000020B10E                 db    ? ;
.bss:000000000020B10F                 db    ? ;
.bss:000000000020B110                 db    ? ;
.bss:000000000020B111                 db    ? ;
.bss:000000000020B112                 db    ? ;
.bss:000000000020B113                 db    ? ;
.bss:000000000020B114                 db    ? ;
.bss:000000000020B115                 db    ? ;
.bss:000000000020B116                 db    ? ;
.bss:000000000020B117                 db    ? ;
.bss:000000000020B118                 db    ? ;
.bss:000000000020B119                 db    ? ;
.bss:000000000020B11A                 db    ? ;
.bss:000000000020B11B                 db    ? ;
.bss:000000000020B11C                 db    ? ;
.bss:000000000020B11D                 db    ? ;
.bss:000000000020B11E                 db    ? ;
.bss:000000000020B11F                 db    ? ;
.bss:000000000020B120                 db    ? ;
.bss:000000000020B121                 db    ? ;
.bss:000000000020B122                 db    ? ;
.bss:000000000020B123                 db    ? ;
.bss:000000000020B124                 db    ? ;
.bss:000000000020B125                 db    ? ;
.bss:000000000020B126                 db    ? ;
.bss:000000000020B127                 db    ? ;
.bss:000000000020B128                 db    ? ;
.bss:000000000020B129                 db    ? ;
.bss:000000000020B12A                 db    ? ;
.bss:000000000020B12B                 db    ? ;
.bss:000000000020B12C                 db    ? ;
.bss:000000000020B12D                 db    ? ;
.bss:000000000020B12E                 db    ? ;
.bss:000000000020B12F                 db    ? ;
.bss:000000000020B130                 db    ? ;
.bss:000000000020B131                 db    ? ;
.bss:000000000020B132                 db    ? ;
.bss:000000000020B133                 db    ? ;
.bss:000000000020B134                 db    ? ;
.bss:000000000020B135                 db    ? ;
.bss:000000000020B136                 db    ? ;
.bss:000000000020B137                 db    ? ;
.bss:000000000020B138                 db    ? ;
.bss:000000000020B139                 db    ? ;
.bss:000000000020B13A                 db    ? ;
.bss:000000000020B13B                 db    ? ;
.bss:000000000020B13C                 db    ? ;
.bss:000000000020B13D                 db    ? ;
.bss:000000000020B13E                 db    ? ;
.bss:000000000020B13F                 db    ? ;
.bss:000000000020B140                 db    ? ;
.bss:000000000020B141                 db    ? ;
.bss:000000000020B142                 db    ? ;
.bss:000000000020B143                 db    ? ;
.bss:000000000020B144                 db    ? ;
.bss:000000000020B145                 db    ? ;
.bss:000000000020B146                 db    ? ;
.bss:000000000020B147                 db    ? ;
.bss:000000000020B148                 db    ? ;
.bss:000000000020B149                 db    ? ;
.bss:000000000020B14A                 db    ? ;
.bss:000000000020B14B                 db    ? ;
.bss:000000000020B14C                 db    ? ;
.bss:000000000020B14D                 db    ? ;
.bss:000000000020B14E                 db    ? ;
.bss:000000000020B14F                 db    ? ;
.bss:000000000020B150                 db    ? ;
.bss:000000000020B151                 db    ? ;
.bss:000000000020B152                 db    ? ;
.bss:000000000020B153                 db    ? ;
.bss:000000000020B154                 db    ? ;
.bss:000000000020B155                 db    ? ;
.bss:000000000020B156                 db    ? ;
.bss:000000000020B157                 db    ? ;
.bss:000000000020B158                 db    ? ;
.bss:000000000020B159                 db    ? ;
.bss:000000000020B15A                 db    ? ;
.bss:000000000020B15B                 db    ? ;
.bss:000000000020B15C                 db    ? ;
.bss:000000000020B15D                 db    ? ;
.bss:000000000020B15E                 db    ? ;
.bss:000000000020B15F                 db    ? ;
.bss:000000000020B160                 db    ? ;
.bss:000000000020B161                 db    ? ;
.bss:000000000020B162                 db    ? ;
.bss:000000000020B163                 db    ? ;
.bss:000000000020B164                 db    ? ;
.bss:000000000020B165                 db    ? ;
.bss:000000000020B166                 db    ? ;
.bss:000000000020B167                 db    ? ;
.bss:000000000020B168                 db    ? ;
.bss:000000000020B169                 db    ? ;
.bss:000000000020B16A                 db    ? ;
.bss:000000000020B16B                 db    ? ;
.bss:000000000020B16C                 db    ? ;
.bss:000000000020B16D                 db    ? ;
.bss:000000000020B16E                 db    ? ;
.bss:000000000020B16F                 db    ? ;
.bss:000000000020B170                 db    ? ;
.bss:000000000020B171                 db    ? ;
.bss:000000000020B172                 db    ? ;
.bss:000000000020B173                 db    ? ;
.bss:000000000020B174                 db    ? ;
.bss:000000000020B175                 db    ? ;
.bss:000000000020B176                 db    ? ;
.bss:000000000020B177                 db    ? ;
.bss:000000000020B178                 db    ? ;
.bss:000000000020B179                 db    ? ;
.bss:000000000020B17A                 db    ? ;
.bss:000000000020B17B                 db    ? ;
.bss:000000000020B17C                 db    ? ;
.bss:000000000020B17D                 db    ? ;
.bss:000000000020B17E                 db    ? ;
.bss:000000000020B17F                 db    ? ;
.bss:000000000020B180                 db    ? ;
.bss:000000000020B181                 db    ? ;
.bss:000000000020B182                 db    ? ;
.bss:000000000020B183                 db    ? ;
.bss:000000000020B184                 db    ? ;
.bss:000000000020B185                 db    ? ;
.bss:000000000020B186                 db    ? ;
.bss:000000000020B187                 db    ? ;
.bss:000000000020B188                 db    ? ;
.bss:000000000020B189                 db    ? ;
.bss:000000000020B18A                 db    ? ;
.bss:000000000020B18B                 db    ? ;
.bss:000000000020B18C                 db    ? ;
.bss:000000000020B18D                 db    ? ;
.bss:000000000020B18E                 db    ? ;
.bss:000000000020B18F                 db    ? ;
.bss:000000000020B190                 db    ? ;
.bss:000000000020B191                 db    ? ;
.bss:000000000020B192                 db    ? ;
.bss:000000000020B193                 db    ? ;
.bss:000000000020B194                 db    ? ;
.bss:000000000020B195                 db    ? ;
.bss:000000000020B196                 db    ? ;
.bss:000000000020B197                 db    ? ;
.bss:000000000020B198                 db    ? ;
.bss:000000000020B199                 db    ? ;
.bss:000000000020B19A                 db    ? ;
.bss:000000000020B19B                 db    ? ;
.bss:000000000020B19C                 db    ? ;
.bss:000000000020B19D                 db    ? ;
.bss:000000000020B19E                 db    ? ;
.bss:000000000020B19F                 db    ? ;
.bss:000000000020B1A0                 db    ? ;
.bss:000000000020B1A1                 db    ? ;
.bss:000000000020B1A2                 db    ? ;
.bss:000000000020B1A3                 db    ? ;
.bss:000000000020B1A4                 db    ? ;
.bss:000000000020B1A5                 db    ? ;
.bss:000000000020B1A6                 db    ? ;
.bss:000000000020B1A7                 db    ? ;
.bss:000000000020B1A8                 db    ? ;
.bss:000000000020B1A9                 db    ? ;
.bss:000000000020B1AA                 db    ? ;
.bss:000000000020B1AB                 db    ? ;
.bss:000000000020B1AC                 db    ? ;
.bss:000000000020B1AD                 db    ? ;
.bss:000000000020B1AE                 db    ? ;
.bss:000000000020B1AF                 db    ? ;
.bss:000000000020B1B0                 db    ? ;
.bss:000000000020B1B1                 db    ? ;
.bss:000000000020B1B2                 db    ? ;
.bss:000000000020B1B3                 db    ? ;
.bss:000000000020B1B4                 db    ? ;
.bss:000000000020B1B5                 db    ? ;
.bss:000000000020B1B6                 db    ? ;
.bss:000000000020B1B7                 db    ? ;
.bss:000000000020B1B8                 db    ? ;
.bss:000000000020B1B9                 db    ? ;
.bss:000000000020B1BA                 db    ? ;
.bss:000000000020B1BB                 db    ? ;
.bss:000000000020B1BC                 db    ? ;
.bss:000000000020B1BD                 db    ? ;
.bss:000000000020B1BE                 db    ? ;
.bss:000000000020B1BF                 db    ? ;
.bss:000000000020B1C0                 db    ? ;
.bss:000000000020B1C1                 db    ? ;
.bss:000000000020B1C2                 db    ? ;
.bss:000000000020B1C3                 db    ? ;
.bss:000000000020B1C4                 db    ? ;
.bss:000000000020B1C5                 db    ? ;
.bss:000000000020B1C6                 db    ? ;
.bss:000000000020B1C7                 db    ? ;
.bss:000000000020B1C8                 db    ? ;
.bss:000000000020B1C9                 db    ? ;
.bss:000000000020B1CA                 db    ? ;
.bss:000000000020B1CB                 db    ? ;
.bss:000000000020B1CC                 db    ? ;
.bss:000000000020B1CD                 db    ? ;
.bss:000000000020B1CE                 db    ? ;
.bss:000000000020B1CF                 db    ? ;
.bss:000000000020B1D0                 db    ? ;
.bss:000000000020B1D1                 db    ? ;
.bss:000000000020B1D2                 db    ? ;
.bss:000000000020B1D3                 db    ? ;
.bss:000000000020B1D4                 db    ? ;
.bss:000000000020B1D5                 db    ? ;
.bss:000000000020B1D6                 db    ? ;
.bss:000000000020B1D7                 db    ? ;
.bss:000000000020B1D8                 db    ? ;
.bss:000000000020B1D9                 db    ? ;
.bss:000000000020B1DA                 db    ? ;
.bss:000000000020B1DB                 db    ? ;
.bss:000000000020B1DC                 db    ? ;
.bss:000000000020B1DD                 db    ? ;
.bss:000000000020B1DE                 db    ? ;
.bss:000000000020B1DF                 db    ? ;
.bss:000000000020B1E0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020B1E0                                         ; get_quoting_style↑o ...
.bss:000000000020B1F0 xmmword_20B1F0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020B1F0                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020B200 xmmword_20B200  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020B200                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020B210 qword_20B210    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020B210                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020B210 _bss            ends
.bss:000000000020B210
.prgend:000000000020B218 ; ===========================================================================
.prgend:000000000020B218
.prgend:000000000020B218 ; Segment type: Zero-length
.prgend:000000000020B218 _prgend         segment byte public '' use64
.prgend:000000000020B218 _end            label byte
.prgend:000000000020B218 _prgend         ends
.prgend:000000000020B218
extern:000000000020B220 ; ===========================================================================
extern:000000000020B220
extern:000000000020B220 ; Segment type: Externs
extern:000000000020B220 ; extern
extern:000000000020B220                 extrn __snprintf_chk:near
extern:000000000020B220                                         ; CODE XREF: ___snprintf_chk↑j
extern:000000000020B220                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:000000000020B228 ; void free(void *ptr)
extern:000000000020B228                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020B228                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020B230 ; void __noreturn abort(void)
extern:000000000020B230                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020B230                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020B238 ; int *_errno_location(void)
extern:000000000020B238                 extrn __errno_location:near
extern:000000000020B238                                         ; CODE XREF: ___errno_location↑j
extern:000000000020B238                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020B240 ; void error_at_line(int status, int errnum, const char *fname, unsigned int lineno, const char *format, ...)
extern:000000000020B240                 extrn error_at_line:near
extern:000000000020B240                                         ; CODE XREF: _error_at_line↑j
extern:000000000020B240                                         ; DATA XREF: .got:error_at_line_ptr↑o
extern:000000000020B248 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020B248                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020B248                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020B250 ; void __noreturn exit(int status)
extern:000000000020B250                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020B250                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020B258 ; size_t _fpending(FILE *fp)
extern:000000000020B258                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020B258                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020B260 ; int isatty(int fd)
extern:000000000020B260                 extrn isatty:near       ; CODE XREF: _isatty↑j
extern:000000000020B260                                         ; DATA XREF: .got:isatty_ptr↑o
extern:000000000020B268 ; char *textdomain(const char *domainname)
extern:000000000020B268                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020B268                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020B270 ; int fclose(FILE *stream)
extern:000000000020B270                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020B270                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020B278 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020B278                 extrn bindtextdomain:near
extern:000000000020B278                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020B278                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020B280 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020B280                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020B280                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020B288 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020B288                 extrn __ctype_get_mb_cur_max:near
extern:000000000020B288                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020B288                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020B290 ; size_t strlen(const char *s)
extern:000000000020B290                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020B290                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020B298 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020B298                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:000000000020B298                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:000000000020B2A0                 extrn __stack_chk_fail:near
extern:000000000020B2A0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020B2A0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020B2A8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020B2A8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020B2A8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020B2B0 ; char *strrchr(const char *s, int c)
extern:000000000020B2B0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020B2B0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020B2B8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020B2B8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020B2B8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020B2C0 ; void *memset(void *s, int c, size_t n)
extern:000000000020B2C0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020B2C0                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020B2C8 ; __uid_t geteuid(void)
extern:000000000020B2C8                 extrn geteuid:near      ; CODE XREF: _geteuid↑j
extern:000000000020B2C8                                         ; DATA XREF: .got:geteuid_ptr↑o
extern:000000000020B2D0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020B2D0                 extrn __libc_start_main:near
extern:000000000020B2D0                                         ; CODE XREF: start+24↑p
extern:000000000020B2D0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020B2D8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020B2D8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020B2D8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020B2E0 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020B2E0                 extrn fputs_unlocked:near
extern:000000000020B2E0                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020B2E0                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020B2E8 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020B2E8                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020B2E8                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020B2F0 ; int strcmp(const char *s1, const char *s2)
extern:000000000020B2F0                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020B2F0                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020B2F8 ; __int64 strtol(const char *nptr, char **endptr, int base)
extern:000000000020B2F8                 extrn strtol:near       ; CODE XREF: _strtol↑j
extern:000000000020B2F8                                         ; DATA XREF: .got:strtol_ptr↑o
extern:000000000020B300 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020B300                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020B300                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020B308 ; int fileno(FILE *stream)
extern:000000000020B308                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020B308                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020B310 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020B310                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:000000000020B310                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:000000000020B318 ; void *malloc(size_t size)
extern:000000000020B318                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020B318                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020B320 ; int fflush(FILE *stream)
extern:000000000020B320                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020B320                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020B328 ; char *nl_langinfo(nl_item item)
extern:000000000020B328                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020B328                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020B330 ; __gid_t getegid(void)
extern:000000000020B330                 extrn getegid:near      ; CODE XREF: _getegid↑j
extern:000000000020B330                                         ; DATA XREF: .got:getegid_ptr↑o
extern:000000000020B338 ; int _freading(FILE *fp)
extern:000000000020B338                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020B338                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020B340 ; void *realloc(void *ptr, size_t size)
extern:000000000020B340                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020B340                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020B348 ; char *setlocale(int category, const char *locale)
extern:000000000020B348                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020B348                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020B350                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020B350                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020B358 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020B358                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020B358                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020B360 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020B360                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020B360                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020B368 ; int euidaccess(const char *name, int type)
extern:000000000020B368                 extrn euidaccess:near   ; CODE XREF: _euidaccess↑j
extern:000000000020B368                                         ; DATA XREF: .got:euidaccess_ptr↑o
extern:000000000020B370 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020B370                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020B370                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020B378 ; void __noreturn exit(int status)
extern:000000000020B378                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020B378                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020B380 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020B380                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020B380                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020B388                 extrn __fprintf_chk:near
extern:000000000020B388                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020B388                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020B390 ; int mbsinit(const mbstate_t *ps)
extern:000000000020B390                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020B390                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020B398 ; int iswprint(wint_t wc)
extern:000000000020B398                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020B398                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020B3A0 ; int __fastcall __cxa_finalize(void *)
extern:000000000020B3A0                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020B3A0                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020B3A0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020B3A8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020B3A8                 extrn __ctype_b_loc:near
extern:000000000020B3A8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020B3A8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020B3B0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020B3B0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020B3B8                 extrn __gmon_start__:near ; weak
extern:000000000020B3B8                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020B3B8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020B3C0                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020B3C0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020B3C0
extern:000000000020B3C0
extern:000000000020B3C0                 end start
