LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 2E129BB218A1DB315B93A2B79676027E80356A9E24B6D9715BBF149D1280D366
LOAD:0000000000000000 ; Input MD5    : 6D5704F92906205F0DC5D44C6BC71CE5
LOAD:0000000000000000 ; Input CRC32  : 8BA59A46
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/paste
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'paste.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 26400h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 6D18h                ; Size in file image
LOAD:00000000000000D8                 dq 6D18h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 7B30h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 207B30h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 570h                 ; Size in file image
LOAD:0000000000000110                 dq 728h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 7C58h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 207C58h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 5F30h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 5F30h                ; Physical address
LOAD:00000000000001B0                 dq 264h                 ; Size in file image
LOAD:00000000000001B8                 dq 264h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 7B30h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 207B30h              ; Physical address
LOAD:0000000000000220                 dq 4D0h                 ; Size in file image
LOAD:0000000000000228                 dq 4D0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 19h, 54h, 7Fh, 16h, 0E3h, 7Dh, 20h, 2Dh, 94h, 0A4h ; Desc
LOAD:0000000000000284                 db 78h, 4, 44h, 0E8h, 48h, 4Ah, 80h, 14h, 94h, 98h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 33h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 33h, 34h, 3Ah
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aUflow - offset byte_880, 12h, 0, 0, offset dword_0,\ ; "__uflow"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_880, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_880, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_880, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncmp - offset byte_880, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aItmDeregistert - offset byte_880, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aExit - offset byte_880, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFpending - offset byte_880, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aClearerrUnlock - offset byte_880, 12h, 0, 0, \ ; "clearerr_unlocked"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_880, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aFclose - offset byte_880, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aBindtextdomain - offset byte_880, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aDcgettext - offset byte_880, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_880, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStrlen - offset byte_880, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStackChkFail - offset byte_880, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aGetoptLong - offset byte_880, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aMbrtowc - offset byte_880, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aOverflow - offset byte_880, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrrchr - offset byte_880, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aLseek - offset byte_880, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004D8                            0>
LOAD:00000000000004F0                 Elf64_Sym <offset aMemset - offset byte_880, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aPosixFadvise - offset byte_880, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aLibcStartMain - offset byte_880, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aMemcmp - offset byte_880, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aFputsUnlocked - offset byte_880, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aCalloc - offset byte_880, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aGmonStart - offset byte_880, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aMemcpy - offset byte_880, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aFileno - offset byte_880, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aMalloc - offset byte_880, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aFflush - offset byte_880, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aNlLanginfo - offset byte_880, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aFreading - offset byte_880, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aFwriteUnlocked - offset byte_880, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aRealloc - offset byte_880, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aSetlocale - offset byte_880, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aPrintfChk - offset byte_880, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aError - offset byte_880, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000688                            0>
LOAD:00000000000006A0                 Elf64_Sym <offset aFseeko - offset byte_880, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aFopen - offset byte_880, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:00000000000006B8                            0>
LOAD:00000000000006D0                 Elf64_Sym <offset aCxaAtexit - offset byte_880, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aExit+1 - offset byte_880, 12h, 0, 0, \ ; "exit"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFwrite - offset byte_880, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aFprintfChk - offset byte_880, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aItmRegistertmc - offset byte_880, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aMbsinit - offset byte_880, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aIswprint - offset byte_880, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aCxaFinalize - offset byte_880, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aCtypeBLoc - offset byte_880, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aStdout - offset byte_880, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000007A8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000007C0                 Elf64_Sym <offset aProgname - offset byte_880, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000007C0                            offset __bss_start, 8>
LOAD:00000000000007D8                 Elf64_Sym <offset aStdin - offset byte_880, 11h, 0, 19h, \ ; "stdin"
LOAD:00000000000007D8                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:00000000000007F0                 Elf64_Sym <offset aProgramInvocat - offset byte_880, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:00000000000007F0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000808                 Elf64_Sym <offset aPrognameFull - offset byte_880, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000808                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000820                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_880, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000820                            offset __bss_start, 8>
LOAD:0000000000000838                 Elf64_Sym <offset aStderr - offset byte_880, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000838                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000850                 Elf64_Sym <offset aOptind - offset byte_880, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000850                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000868                 Elf64_Sym <offset aOptarg - offset byte_880, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000868                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000880 ; ELF String Table
LOAD:0000000000000880 byte_880        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000880                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000881 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000BC8↓o
LOAD:000000000000088B aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000892 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000670↑o
LOAD:000000000000089F aClearerrUnlock db 'clearerr_unlocked',0
LOAD:000000000000089F                                         ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:00000000000008B1 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000658↑o
LOAD:00000000000008BB aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000490↑o
LOAD:00000000000008C3 aFopen          db 'fopen',0            ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:00000000000008C9 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:00000000000008D1 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000850↑o
LOAD:00000000000008D8 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:00000000000008E0 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000418↑o
LOAD:00000000000008EA aError          db 'error',0            ; DATA XREF: LOAD:0000000000000688↑o
LOAD:00000000000008F0 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000901 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000760↑o
LOAD:000000000000090A aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000912 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000918 aStdin          db 'stdin',0            ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:000000000000091E aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:000000000000091E                                         ; LOAD:00000000000006E8↑o
LOAD:0000000000000924 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000924                                         ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:000000000000093C aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:000000000000093C                                         ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000953 aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000961 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000968 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000448↑o
LOAD:000000000000096F aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000976 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000987 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:000000000000098E aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000718↑o
LOAD:000000000000099C aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:00000000000009A3 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:00000000000009A9 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:00000000000009B0 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:00000000000009B7 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:00000000000009BE aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000748↑o
LOAD:00000000000009C6 aUflow          db '__uflow',0          ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000009CE aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:00000000000009DA aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000790↑o
LOAD:00000000000009E8 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000868↑o
LOAD:00000000000009EF aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000610↑o
LOAD:00000000000009FA aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000A01 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000A0D aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000A14 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000A1B aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000A26 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A26                                         ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000A44 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000A53 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000A53                                         ; LOAD:00000000000003D0↑o
LOAD:0000000000000A62 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000A72 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000A72                                         ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A84 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000A8B aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000A96 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000AA5 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000AAA aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000AB5 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000AC5 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000AD2 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000BD8↓o
LOAD:0000000000000ADC aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000BE8↓o
LOAD:0000000000000AE8 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000BF8↓o
LOAD:0000000000000AF3 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000C08↓o
LOAD:0000000000000AFD aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000C18↓o
LOAD:0000000000000B09 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B09                                         ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000B25 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000B34 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B34                                         ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000B4E ; ELF GNU Symbol Version Table
LOAD:0000000000000B4E                 dw 0
LOAD:0000000000000B50                 dw 2                    ; __uflow@@GLIBC_2.2.5
LOAD:0000000000000B52                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000B54                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000B56                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000B58                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000B5A                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000B5C                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000B5E                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000B60                 dw 2                    ; clearerr_unlocked@@GLIBC_2.2.5
LOAD:0000000000000B62                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000B64                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000B66                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000B68                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000B6A                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000B6C                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000B6E                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000B70                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000B72                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000B74                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000B76                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000B78                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000B7A                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000B7C                 dw 2                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000B7E                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000B80                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000B82                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000B84                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000B86                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000B88                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000B8A                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000B8C                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000B8E                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000B90                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000B92                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000B94                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000B96                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000B98                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000B9A                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000B9C                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000B9E                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000BA0                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000BA2                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000BA4                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000BA6                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000BA8                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000BAA                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000BAC                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000BAE                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000BB0                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000BB2                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000BB4                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000BB6                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000BB8                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000BBA                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000BBC                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000BBE                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000BC0                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000BC2                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000BC4                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000BC6                 dw 0
LOAD:0000000000000BC8 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000BC8                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_880, 10h, 0> ; "libc.so.6"
LOAD:0000000000000BD8                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_880, \ ; "GLIBC_2.3"
LOAD:0000000000000BD8                                10h>
LOAD:0000000000000BE8                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_880, \ ; "GLIBC_2.3.4"
LOAD:0000000000000BE8                                10h>
LOAD:0000000000000BF8                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_880, \ ; "GLIBC_2.14"
LOAD:0000000000000BF8                                10h>
LOAD:0000000000000C08                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_880, \ ; "GLIBC_2.4"
LOAD:0000000000000C08                                10h>
LOAD:0000000000000C18                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_880, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000C28 ; ELF RELA Relocation Table
LOAD:0000000000000C28                 Elf64_Rela <207B30h, 8, 1AB0h> ; R_X86_64_RELATIVE +1AB0h
LOAD:0000000000000C40                 Elf64_Rela <207B38h, 8, 1A70h> ; R_X86_64_RELATIVE +1A70h
LOAD:0000000000000C58                 Elf64_Rela <207B40h, 8, 52F3h> ; R_X86_64_RELATIVE +52F3h
LOAD:0000000000000C70                 Elf64_Rela <207B60h, 8, 52FAh> ; R_X86_64_RELATIVE +52FAh
LOAD:0000000000000C88                 Elf64_Rela <207B80h, 8, 5305h> ; R_X86_64_RELATIVE +5305h
LOAD:0000000000000CA0                 Elf64_Rela <207BA0h, 8, 5315h> ; R_X86_64_RELATIVE +5315h
LOAD:0000000000000CB8                 Elf64_Rela <207BC0h, 8, 531Ah> ; R_X86_64_RELATIVE +531Ah
LOAD:0000000000000CD0                 Elf64_Rela <207C00h, 8, 56F1h> ; R_X86_64_RELATIVE +56F1h
LOAD:0000000000000CE8                 Elf64_Rela <207C08h, 8, 56F9h> ; R_X86_64_RELATIVE +56F9h
LOAD:0000000000000D00                 Elf64_Rela <207C10h, 8, 56FFh> ; R_X86_64_RELATIVE +56FFh
LOAD:0000000000000D18                 Elf64_Rela <207C18h, 8, 570Ch> ; R_X86_64_RELATIVE +570Ch
LOAD:0000000000000D30                 Elf64_Rela <207C20h, 8, 5719h> ; R_X86_64_RELATIVE +5719h
LOAD:0000000000000D48                 Elf64_Rela <207C28h, 8, 572Dh> ; R_X86_64_RELATIVE +572Dh
LOAD:0000000000000D60                 Elf64_Rela <207C30h, 8, 572Fh> ; R_X86_64_RELATIVE +572Fh
LOAD:0000000000000D78                 Elf64_Rela <207C38h, 8, 5712h> ; R_X86_64_RELATIVE +5712h
LOAD:0000000000000D90                 Elf64_Rela <207C40h, 8, 52C8h> ; R_X86_64_RELATIVE +52C8h
LOAD:0000000000000DA8                 Elf64_Rela <207C48h, 8, 5737h> ; R_X86_64_RELATIVE +5737h
LOAD:0000000000000DC0                 Elf64_Rela <208008h, 8, 208008h> ; R_X86_64_RELATIVE +208008h
LOAD:0000000000000DD8                 Elf64_Rela <208018h, 8, 568Ch> ; R_X86_64_RELATIVE +568Ch
LOAD:0000000000000DF0                 Elf64_Rela <208080h, 8, 208090h> ; R_X86_64_RELATIVE +208090h
LOAD:0000000000000E08                 Elf64_Rela <208098h, 8, 208120h> ; R_X86_64_RELATIVE +208120h
LOAD:0000000000000E20                 Elf64_Rela <207FC8h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000E38                 Elf64_Rela <207FD0h, 1800000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000E50                 Elf64_Rela <207FD8h, 1C00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000E68                 Elf64_Rela <207FE0h, 2E00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000E80                 Elf64_Rela <207FE8h, 3100000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000E98                 Elf64_Rela <2080A0h, 3400000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000EB0                 Elf64_Rela <2080A8h, 3300000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000EC8                 Elf64_Rela <2080B0h, 3500000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000000EE0                 Elf64_Rela <2080B8h, 3A00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000EF8                 Elf64_Rela <2080C0h, 3B00000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000000F10                 Elf64_Rela <2080C8h, 3700000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000F28                 Elf64_Rela <2080E0h, 3900000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000F40 ; ELF JMPREL Relocation Table
LOAD:0000000000000F40                 Elf64_Rela <207E60h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __uflow
LOAD:0000000000000F58                 Elf64_Rela <207E68h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000F70                 Elf64_Rela <207E70h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000F88                 Elf64_Rela <207E78h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000FA0                 Elf64_Rela <207E80h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000FB8                 Elf64_Rela <207E88h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000FD0                 Elf64_Rela <207E90h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000FE8                 Elf64_Rela <207E98h, 900000007h, 0> ; R_X86_64_JUMP_SLOT clearerr_unlocked
LOAD:0000000000001000                 Elf64_Rela <207EA0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001018                 Elf64_Rela <207EA8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001030                 Elf64_Rela <207EB0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001048                 Elf64_Rela <207EB8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001060                 Elf64_Rela <207EC0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001078                 Elf64_Rela <207EC8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001090                 Elf64_Rela <207ED0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000010A8                 Elf64_Rela <207ED8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000010C0                 Elf64_Rela <207EE0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000010D8                 Elf64_Rela <207EE8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:00000000000010F0                 Elf64_Rela <207EF0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001108                 Elf64_Rela <207EF8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001120                 Elf64_Rela <207F00h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001138                 Elf64_Rela <207F08h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:0000000000001150                 Elf64_Rela <207F10h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001168                 Elf64_Rela <207F18h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001180                 Elf64_Rela <207F20h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001198                 Elf64_Rela <207F28h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000011B0                 Elf64_Rela <207F30h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000011C8                 Elf64_Rela <207F38h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000011E0                 Elf64_Rela <207F40h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000011F8                 Elf64_Rela <207F48h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001210                 Elf64_Rela <207F50h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001228                 Elf64_Rela <207F58h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:0000000000001240                 Elf64_Rela <207F60h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001258                 Elf64_Rela <207F68h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001270                 Elf64_Rela <207F70h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001288                 Elf64_Rela <207F78h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000012A0                 Elf64_Rela <207F80h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000012B8                 Elf64_Rela <207F88h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:00000000000012D0                 Elf64_Rela <207F90h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000012E8                 Elf64_Rela <207F98h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001300                 Elf64_Rela <207FA0h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001318                 Elf64_Rela <207FA8h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001330                 Elf64_Rela <207FB0h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001348                 Elf64_Rela <207FB8h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001360                 Elf64_Rela <207FC0h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001360 LOAD            ends
LOAD:0000000000001360
.init:0000000000001378 ; ===========================================================================
.init:0000000000001378
.init:0000000000001378 ; Segment type: Pure code
.init:0000000000001378 ; Segment permissions: Read/Execute
.init:0000000000001378 _init           segment dword public 'CODE' use64
.init:0000000000001378                 assume cs:_init
.init:0000000000001378                 ;org 1378h
.init:0000000000001378                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001378
.init:0000000000001378 ; =============== S U B R O U T I N E =======================================
.init:0000000000001378
.init:0000000000001378
.init:0000000000001378                 public _init_proc
.init:0000000000001378 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001378                 sub     rsp, 8          ; _init
.init:000000000000137C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001383                 test    rax, rax
.init:0000000000001386                 jz      short loc_138A
.init:0000000000001388                 call    rax ; __gmon_start__
.init:000000000000138A
.init:000000000000138A loc_138A:                               ; CODE XREF: _init_proc+E↑j
.init:000000000000138A                 add     rsp, 8
.init:000000000000138E                 retn
.init:000000000000138E _init_proc      endp
.init:000000000000138E
.init:000000000000138E _init           ends
.init:000000000000138E
LOAD:000000000000138F ; ===========================================================================
LOAD:000000000000138F
LOAD:000000000000138F ; Segment type: Pure code
LOAD:000000000000138F ; Segment permissions: Read/Execute
LOAD:000000000000138F LOAD            segment byte public 'CODE' use64
LOAD:000000000000138F                 assume cs:LOAD
LOAD:000000000000138F                 ;org 138Fh
LOAD:000000000000138F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000138F                 align 10h
LOAD:000000000000138F LOAD            ends
LOAD:000000000000138F
.plt:0000000000001390 ; ===========================================================================
.plt:0000000000001390
.plt:0000000000001390 ; Segment type: Pure code
.plt:0000000000001390 ; Segment permissions: Read/Execute
.plt:0000000000001390 _plt            segment para public 'CODE' use64
.plt:0000000000001390                 assume cs:_plt
.plt:0000000000001390                 ;org 1390h
.plt:0000000000001390                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390
.plt:0000000000001390 sub_1390        proc near               ; CODE XREF: .plt:00000000000013AB↓j
.plt:0000000000001390                                         ; .plt:00000000000013BB↓j ...
.plt:0000000000001390 ; __unwind {
.plt:0000000000001390                 push    cs:qword_207E50
.plt:0000000000001396                 jmp     cs:qword_207E58
.plt:0000000000001396 sub_1390        endp
.plt:0000000000001396
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:000000000000139C                 align 20h
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; int __uflow(_IO_FILE *)
.plt:00000000000013A0 ___uflow        proc near               ; CODE XREF: paste_parallel:loc_1D90↓p
.plt:00000000000013A0                                         ; paste_parallel+46B↓p ...
.plt:00000000000013A0                 jmp     cs:__uflow_ptr
.plt:00000000000013A0 ___uflow        endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    0
.plt:00000000000013AB                 jmp     sub_1390
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ; void free(void *ptr)
.plt:00000000000013B0 _free           proc near               ; CODE XREF: main+20E↓p
.plt:00000000000013B0                                         ; paste_parallel+3B5↓p ...
.plt:00000000000013B0                 jmp     cs:free_ptr
.plt:00000000000013B0 _free           endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    1
.plt:00000000000013BB                 jmp     sub_1390
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: noreturn thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; void __noreturn abort(void)
.plt:00000000000013C0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000013C0                                         ; quotearg_buffer_restyled:def_2AB1↓p ...
.plt:00000000000013C0                 jmp     cs:abort_ptr
.plt:00000000000013C0 _abort          endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    2
.plt:00000000000013CB                 jmp     sub_1390
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; int *__errno_location(void)
.plt:00000000000013D0 ___errno_location proc near             ; CODE XREF: write_error+17↓p
.plt:00000000000013D0                                         ; main+2A7↓p ...
.plt:00000000000013D0                 jmp     cs:__errno_location_ptr
.plt:00000000000013D0 ___errno_location endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    3
.plt:00000000000013DB                 jmp     sub_1390
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000013E0 _strncmp        proc near               ; CODE XREF: usage+29C↓p
.plt:00000000000013E0                                         ; usage+35D↓p
.plt:00000000000013E0                 jmp     cs:strncmp_ptr
.plt:00000000000013E0 _strncmp        endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    4
.plt:00000000000013EB                 jmp     sub_1390
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: noreturn thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; void __noreturn _exit(int status)
.plt:00000000000013F0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000013F0                 jmp     cs:_exit_ptr
.plt:00000000000013F0 __exit          endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    5
.plt:00000000000013FB                 jmp     sub_1390
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ; size_t __fpending(FILE *fp)
.plt:0000000000001400 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001400                 jmp     cs:__fpending_ptr
.plt:0000000000001400 ___fpending     endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    6
.plt:000000000000140B                 jmp     sub_1390
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; void clearerr_unlocked(FILE *stream)
.plt:0000000000001410 _clearerr_unlocked proc near            ; CODE XREF: paste_parallel:loc_1EE2↓p
.plt:0000000000001410                                         ; paste_serial+1C5↓p
.plt:0000000000001410                 jmp     cs:clearerr_unlocked_ptr
.plt:0000000000001410 _clearerr_unlocked endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    7
.plt:000000000000141B                 jmp     sub_1390
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; char *textdomain(const char *domainname)
.plt:0000000000001420 _textdomain     proc near               ; CODE XREF: main+50↓p
.plt:0000000000001420                 jmp     cs:textdomain_ptr
.plt:0000000000001420 _textdomain     endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    8
.plt:000000000000142B                 jmp     sub_1390
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; int fclose(FILE *stream)
.plt:0000000000001430 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001430                                         ; rpl_fclose+6B↓j
.plt:0000000000001430                 jmp     cs:fclose_ptr
.plt:0000000000001430 _fclose         endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    9
.plt:000000000000143B                 jmp     sub_1390
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001440 _bindtextdomain proc near               ; CODE XREF: main+44↓p
.plt:0000000000001440                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001440 _bindtextdomain endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    0Ah
.plt:000000000000144B                 jmp     sub_1390
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001450 _dcgettext      proc near               ; CODE XREF: write_error+F↓p
.plt:0000000000001450                                         ; main+255↓p ...
.plt:0000000000001450                 jmp     cs:dcgettext_ptr
.plt:0000000000001450 _dcgettext      endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    0Bh
.plt:000000000000145B                 jmp     sub_1390
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001460 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001460                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001460 ___ctype_get_mb_cur_max endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    0Ch
.plt:000000000000146B                 jmp     sub_1390
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; size_t strlen(const char *s)
.plt:0000000000001470 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001470                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001470                 jmp     cs:strlen_ptr
.plt:0000000000001470 _strlen         endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    0Dh
.plt:000000000000147B                 jmp     sub_1390
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: noreturn thunk
.plt:0000000000001480
.plt:0000000000001480 ___stack_chk_fail proc near             ; CODE XREF: quotearg_buffer_restyled:loc_3C13↓p
.plt:0000000000001480                                         ; quotearg_n_style:loc_4239↓p ...
.plt:0000000000001480                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001480 ___stack_chk_fail endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    0Eh
.plt:000000000000148B                 jmp     sub_1390
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001490 _getopt_long    proc near               ; CODE XREF: main+85↓p
.plt:0000000000001490                 jmp     cs:getopt_long_ptr
.plt:0000000000001490 _getopt_long    endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    0Fh
.plt:000000000000149B                 jmp     sub_1390
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000014A0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000014A0                 jmp     cs:mbrtowc_ptr
.plt:00000000000014A0 _mbrtowc        endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    10h
.plt:00000000000014AB                 jmp     sub_1390
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; int __overflow(_IO_FILE *, int)
.plt:00000000000014B0 ___overflow     proc near               ; CODE XREF: paste_parallel+22B↓p
.plt:00000000000014B0                                         ; paste_parallel+4DD↓p ...
.plt:00000000000014B0                 jmp     cs:__overflow_ptr
.plt:00000000000014B0 ___overflow     endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    11h
.plt:00000000000014BB                 jmp     sub_1390
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; char *strrchr(const char *s, int c)
.plt:00000000000014C0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000014C0                 jmp     cs:strrchr_ptr
.plt:00000000000014C0 _strrchr        endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    12h
.plt:00000000000014CB                 jmp     sub_1390
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000014D0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000014D0                                         ; rpl_fseeko+3B↓p
.plt:00000000000014D0                 jmp     cs:lseek_ptr
.plt:00000000000014D0 _lseek          endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    13h
.plt:00000000000014DB                 jmp     sub_1390
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000014E0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000014E0                                         ; xzalloc+12↓j
.plt:00000000000014E0                 jmp     cs:memset_ptr
.plt:00000000000014E0 _memset         endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    14h
.plt:00000000000014EB                 jmp     sub_1390
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:00000000000014F0 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:00000000000014F0                                         ; fadvise+16↓j
.plt:00000000000014F0                 jmp     cs:posix_fadvise_ptr
.plt:00000000000014F0 _posix_fadvise  endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    15h
.plt:00000000000014FB                 jmp     sub_1390
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001500 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001500                 jmp     cs:memcmp_ptr
.plt:0000000000001500 _memcmp         endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    16h
.plt:000000000000150B                 jmp     sub_1390
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001510 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001510                                         ; usage+C2↓p ...
.plt:0000000000001510                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001510 _fputs_unlocked endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    17h
.plt:000000000000151B                 jmp     sub_1390
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001520 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001520                 jmp     cs:calloc_ptr
.plt:0000000000001520 _calloc         endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    18h
.plt:000000000000152B                 jmp     sub_1390
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001530 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001530                 jmp     cs:memcpy_ptr
.plt:0000000000001530 _memcpy         endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    19h
.plt:000000000000153B                 jmp     sub_1390
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; int fileno(FILE *stream)
.plt:0000000000001540 _fileno         proc near               ; CODE XREF: paste_parallel+E3↓p
.plt:0000000000001540                                         ; fadvise+8↓p ...
.plt:0000000000001540                 jmp     cs:fileno_ptr
.plt:0000000000001540 _fileno         endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    1Ah
.plt:000000000000154B                 jmp     sub_1390
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; void *malloc(size_t size)
.plt:0000000000001550 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001550                 jmp     cs:malloc_ptr
.plt:0000000000001550 _malloc         endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    1Bh
.plt:000000000000155B                 jmp     sub_1390
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; int fflush(FILE *stream)
.plt:0000000000001560 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001560                                         ; rpl_fflush+3B↓j
.plt:0000000000001560                 jmp     cs:fflush_ptr
.plt:0000000000001560 _fflush         endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    1Ch
.plt:000000000000156B                 jmp     sub_1390
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; char *nl_langinfo(nl_item item)
.plt:0000000000001570 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001570                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001570 _nl_langinfo    endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    1Dh
.plt:000000000000157B                 jmp     sub_1390
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; int __freading(FILE *fp)
.plt:0000000000001580 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001580                                         ; rpl_fflush+9↓p
.plt:0000000000001580                 jmp     cs:__freading_ptr
.plt:0000000000001580 ___freading     endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    1Eh
.plt:000000000000158B                 jmp     sub_1390
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001590 _fwrite_unlocked proc near              ; CODE XREF: paste_parallel+1AF↓p
.plt:0000000000001590                                         ; paste_parallel+370↓p
.plt:0000000000001590                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000001590 _fwrite_unlocked endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    1Fh
.plt:000000000000159B                 jmp     sub_1390
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000015A0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000015A0                 jmp     cs:realloc_ptr
.plt:00000000000015A0 _realloc        endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    20h ; ' '
.plt:00000000000015AB                 jmp     sub_1390
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; char *setlocale(int category, const char *locale)
.plt:00000000000015B0 _setlocale      proc near               ; CODE XREF: main+31↓p
.plt:00000000000015B0                                         ; usage+283↓p ...
.plt:00000000000015B0                 jmp     cs:setlocale_ptr
.plt:00000000000015B0 _setlocale      endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    21h ; '!'
.plt:00000000000015BB                 jmp     sub_1390
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:00000000000015C0                                         ; usage+277↓p ...
.plt:00000000000015C0                 jmp     cs:__printf_chk_ptr
.plt:00000000000015C0 ___printf_chk   endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    22h ; '"'
.plt:00000000000015CB                 jmp     sub_1390
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000015D0 _error          proc near               ; CODE XREF: write_error+28↓p
.plt:00000000000015D0                                         ; main+269↓p ...
.plt:00000000000015D0                 jmp     cs:error_ptr
.plt:00000000000015D0 _error          endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    23h ; '#'
.plt:00000000000015DB                 jmp     sub_1390
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000015E0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_4F3A↓j
.plt:00000000000015E0                 jmp     cs:fseeko_ptr
.plt:00000000000015E0 _fseeko         endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    24h ; '$'
.plt:00000000000015EB                 jmp     sub_1390
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; FILE *fopen(const char *filename, const char *modes)
.plt:00000000000015F0 _fopen          proc near               ; CODE XREF: paste_parallel+C9↓p
.plt:00000000000015F0                                         ; paste_serial+13A↓p
.plt:00000000000015F0                 jmp     cs:fopen_ptr
.plt:00000000000015F0 _fopen          endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    25h ; '%'
.plt:00000000000015FB                 jmp     sub_1390
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001600 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001600                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001600 ___cxa_atexit   endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    26h ; '&'
.plt:000000000000160B                 jmp     sub_1390
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: noreturn thunk
.plt:0000000000001610
.plt:0000000000001610 ; void __noreturn exit(int status)
.plt:0000000000001610 _exit           proc near               ; CODE XREF: main+FC↓p
.plt:0000000000001610                                         ; usage+58↓p
.plt:0000000000001610                 jmp     cs:exit_ptr
.plt:0000000000001610 _exit           endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    27h ; '''
.plt:000000000000161B                 jmp     sub_1390
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001620 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001620                 jmp     cs:fwrite_ptr
.plt:0000000000001620 _fwrite         endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    28h ; '('
.plt:000000000000162B                 jmp     sub_1390
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001630                                         ; version_etc_arn+37↓p ...
.plt:0000000000001630                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001630 ___fprintf_chk  endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    29h ; ')'
.plt:000000000000163B                 jmp     sub_1390
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001640 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001640                 jmp     cs:mbsinit_ptr
.plt:0000000000001640 _mbsinit        endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    2Ah ; '*'
.plt:000000000000164B                 jmp     sub_1390
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; int iswprint(wint_t wc)
.plt:0000000000001650 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001650                 jmp     cs:iswprint_ptr
.plt:0000000000001650 _iswprint       endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    2Bh ; '+'
.plt:000000000000165B                 jmp     sub_1390
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001660 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001660                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001660 ___ctype_b_loc  endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    2Ch ; ','
.plt:000000000000166B                 jmp     sub_1390
.plt:000000000000166B ; } // starts at 1390
.plt:000000000000166B _plt            ends
.plt:000000000000166B
.plt.got:0000000000001670 ; ===========================================================================
.plt.got:0000000000001670
.plt.got:0000000000001670 ; Segment type: Pure code
.plt.got:0000000000001670 ; Segment permissions: Read/Execute
.plt.got:0000000000001670 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001670                 assume cs:_plt_got
.plt.got:0000000000001670                 ;org 1670h
.plt.got:0000000000001670                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001670
.plt.got:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001670
.plt.got:0000000000001670 ; Attributes: thunk
.plt.got:0000000000001670
.plt.got:0000000000001670 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001670 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001670 ; __unwind {
.plt.got:0000000000001670                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001670 __cxa_finalize  endp
.plt.got:0000000000001670
.plt.got:0000000000001670 ; ---------------------------------------------------------------------------
.plt.got:0000000000001676                 align 8
.plt.got:0000000000001676 ; } // starts at 1670
.plt.got:0000000000001676 _plt_got        ends
.plt.got:0000000000001676
LOAD:0000000000001678 ; ===========================================================================
LOAD:0000000000001678
LOAD:0000000000001678 ; Segment type: Pure code
LOAD:0000000000001678 ; Segment permissions: Read/Execute
LOAD:0000000000001678 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001678                 assume cs:LOAD
LOAD:0000000000001678                 ;org 1678h
LOAD:0000000000001678                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001678                 align 20h
LOAD:0000000000001678 LOAD            ends
LOAD:0000000000001678
.text:0000000000001680 ; ===========================================================================
.text:0000000000001680
.text:0000000000001680 ; Segment type: Pure code
.text:0000000000001680 ; Segment permissions: Read/Execute
.text:0000000000001680 _text           segment para public 'CODE' use64
.text:0000000000001680                 assume cs:_text
.text:0000000000001680                 ;org 1680h
.text:0000000000001680                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001680
.text:0000000000001680 ; =============== S U B R O U T I N E =======================================
.text:0000000000001680
.text:0000000000001680
.text:0000000000001680 write_error     proc near               ; CODE XREF: paste_parallel:loc_1CF4↓p
.text:0000000000001680                                         ; paste_serial:loc_2328↓p
.text:0000000000001680 ; __unwind {
.text:0000000000001680                 push    rbx
.text:0000000000001681                 lea     rsi, msgid      ; "write error"
.text:0000000000001688                 mov     edx, 5          ; category
.text:000000000000168D                 xor     edi, edi        ; domainname
.text:000000000000168F                 call    _dcgettext
.text:0000000000001694                 mov     rbx, rax
.text:0000000000001697                 call    ___errno_location
.text:000000000000169C                 mov     esi, [rax]      ; errnum
.text:000000000000169E                 mov     rdx, rbx        ; format
.text:00000000000016A1                 mov     edi, 1          ; status
.text:00000000000016A6                 xor     eax, eax
.text:00000000000016A8                 call    _error
.text:00000000000016A8 ; } // starts at 1680
.text:00000000000016AD                 nop     dword ptr [rax]
.text:00000000000016AD write_error     endp ; sp-analysis failed
.text:00000000000016AD
.text:00000000000016B0
.text:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000016B0
.text:00000000000016B0
.text:00000000000016B0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000016B0                 public main
.text:00000000000016B0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000016B0 ; __unwind {
.text:00000000000016B0                 push    r13
.text:00000000000016B2                 push    r12
.text:00000000000016B4                 lea     r13, a0         ; "\\0"
.text:00000000000016BB                 push    rbp
.text:00000000000016BC                 push    rbx
.text:00000000000016BD                 mov     ebp, edi
.text:00000000000016BF                 mov     rbx, rsi
.text:00000000000016C2                 lea     r12, asc_52B5   ; "\t"
.text:00000000000016C9                 sub     rsp, 8
.text:00000000000016CD                 mov     rdi, [rsi]
.text:00000000000016D0                 call    set_program_name
.text:00000000000016D5                 lea     rsi, asc_52B5+1 ; locale
.text:00000000000016DC                 mov     edi, 6          ; category
.text:00000000000016E1                 call    _setlocale
.text:00000000000016E6                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:00000000000016ED                 lea     rdi, domainname ; "coreutils"
.text:00000000000016F4                 call    _bindtextdomain
.text:00000000000016F9                 lea     rdi, domainname ; "coreutils"
.text:0000000000001700                 call    _textdomain
.text:0000000000001705                 lea     rdi, close_stdout
.text:000000000000170C                 call    atexit
.text:0000000000001711                 mov     cs:have_read_stdin, 0
.text:0000000000001718                 mov     cs:serial_merge, 0
.text:000000000000171F
.text:000000000000171F loc_171F:                               ; CODE XREF: main+B3↓j
.text:000000000000171F                                         ; main+118↓j ...
.text:000000000000171F                 lea     rcx, longopts   ; longopts
.text:0000000000001726                 lea     rdx, shortopts  ; "d:sz"
.text:000000000000172D                 xor     r8d, r8d        ; longind
.text:0000000000001730                 mov     rsi, rbx        ; argv
.text:0000000000001733                 mov     edi, ebp        ; argc
.text:0000000000001735                 call    _getopt_long
.text:000000000000173A                 cmp     eax, 0FFFFFFFFh
.text:000000000000173D                 jz      loc_17DC
.text:0000000000001743                 cmp     eax, 64h ; 'd'
.text:0000000000001746                 jz      short loc_17B8
.text:0000000000001748                 jle     short loc_1768
.text:000000000000174A                 cmp     eax, 73h ; 's'
.text:000000000000174D                 jz      loc_17D0
.text:0000000000001753                 cmp     eax, 7Ah ; 'z'
.text:0000000000001756                 jnz     loc_1997
.text:000000000000175C                 mov     cs:line_delim, 0
.text:0000000000001763                 jmp     short loc_171F
.text:0000000000001763 ; ---------------------------------------------------------------------------
.text:0000000000001765                 align 8
.text:0000000000001768
.text:0000000000001768 loc_1768:                               ; CODE XREF: main+98↑j
.text:0000000000001768                 cmp     eax, 0FFFFFF7Dh
.text:000000000000176D                 jnz     loc_1989
.text:0000000000001773                 sub     rsp, 8
.text:0000000000001777                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000177E                 mov     rcx, cs:Version
.text:0000000000001785                 push    0
.text:0000000000001787                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:000000000000178E                 lea     r8, aDavidMIhnat ; "David M. Ihnat"
.text:0000000000001795                 lea     rdx, unk_5285
.text:000000000000179C                 lea     rsi, aPaste     ; "paste"
.text:00000000000017A3                 xor     eax, eax
.text:00000000000017A5                 call    version_etc
.text:00000000000017AA                 xor     edi, edi        ; status
.text:00000000000017AC                 call    _exit
.text:00000000000017AC ; ---------------------------------------------------------------------------
.text:00000000000017B1                 align 8
.text:00000000000017B8
.text:00000000000017B8 loc_17B8:                               ; CODE XREF: main+96↑j
.text:00000000000017B8                 mov     r12, cs:optarg@@GLIBC_2_2_5
.text:00000000000017BF                 cmp     byte ptr [r12], 0
.text:00000000000017C4                 cmovz   r12, r13
.text:00000000000017C8                 jmp     loc_171F
.text:00000000000017C8 ; ---------------------------------------------------------------------------
.text:00000000000017CD                 align 10h
.text:00000000000017D0
.text:00000000000017D0 loc_17D0:                               ; CODE XREF: main+9D↑j
.text:00000000000017D0                 mov     cs:serial_merge, 1
.text:00000000000017D7                 jmp     loc_171F
.text:00000000000017DC ; ---------------------------------------------------------------------------
.text:00000000000017DC
.text:00000000000017DC loc_17DC:                               ; CODE XREF: main+8D↑j
.text:00000000000017DC                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:00000000000017E3                 sub     ebp, eax
.text:00000000000017E5                 jnz     short loc_17F7
.text:00000000000017E7                 lea     rcx, aLt+2      ; "-"
.text:00000000000017EE                 mov     ebp, 1
.text:00000000000017F3                 mov     [rbx+rax*8], rcx
.text:00000000000017F7
.text:00000000000017F7 loc_17F7:                               ; CODE XREF: main+135↑j
.text:00000000000017F7                 mov     rdi, r12        ; src
.text:00000000000017FA                 call    xstrdup
.text:00000000000017FF                 mov     rcx, r12
.text:0000000000001802                 mov     cs:delims, rax
.text:0000000000001809                 jmp     short loc_181A
.text:0000000000001809 ; ---------------------------------------------------------------------------
.text:000000000000180B                 align 10h
.text:0000000000001810
.text:0000000000001810 loc_1810:                               ; CODE XREF: main+174↓j
.text:0000000000001810                 add     rcx, 1
.text:0000000000001814                 mov     [rax], dl
.text:0000000000001816
.text:0000000000001816 loc_1816:                               ; CODE XREF: main+1D3↓j
.text:0000000000001816                 add     rax, 1
.text:000000000000181A
.text:000000000000181A loc_181A:                               ; CODE XREF: main+159↑j
.text:000000000000181A                 movzx   edx, byte ptr [rcx]
.text:000000000000181D                 test    dl, dl
.text:000000000000181F                 jz      short loc_1885
.text:0000000000001821                 cmp     dl, 5Ch ; '\'
.text:0000000000001824                 jnz     short loc_1810
.text:0000000000001826                 movzx   edx, byte ptr [rcx+1]
.text:000000000000182A                 cmp     dl, 66h ; 'f'
.text:000000000000182D                 jz      loc_1981
.text:0000000000001833                 jg      short loc_185B
.text:0000000000001835                 cmp     dl, 30h ; '0'
.text:0000000000001838                 jz      loc_1979
.text:000000000000183E                 jle     loc_18DA
.text:0000000000001844                 cmp     dl, 5Ch ; '\'
.text:0000000000001847                 jz      loc_192B
.text:000000000000184D                 cmp     dl, 62h ; 'b'
.text:0000000000001850                 jnz     loc_193B
.text:0000000000001856                 mov     byte ptr [rax], 8
.text:0000000000001859                 jmp     short loc_187F
.text:000000000000185B ; ---------------------------------------------------------------------------
.text:000000000000185B
.text:000000000000185B loc_185B:                               ; CODE XREF: main+183↑j
.text:000000000000185B                 cmp     dl, 72h ; 'r'
.text:000000000000185E                 jz      loc_1971
.text:0000000000001864                 jle     loc_191E
.text:000000000000186A                 cmp     dl, 74h ; 't'
.text:000000000000186D                 jz      loc_1933
.text:0000000000001873                 cmp     dl, 76h ; 'v'
.text:0000000000001876                 jnz     loc_193B
.text:000000000000187C                 mov     byte ptr [rax], 0Bh
.text:000000000000187F
.text:000000000000187F loc_187F:                               ; CODE XREF: main+1A9↑j
.text:000000000000187F                                         ; main+276↓j ...
.text:000000000000187F                 add     rcx, 2
.text:0000000000001883                 jmp     short loc_1816
.text:0000000000001885 ; ---------------------------------------------------------------------------
.text:0000000000001885
.text:0000000000001885 loc_1885:                               ; CODE XREF: main+16F↑j
.text:0000000000001885                 cmp     cs:serial_merge, 0
.text:000000000000188C                 mov     cs:delim_end, rax
.text:0000000000001893                 lea     rdx, paste_parallel
.text:000000000000189A                 lea     rax, paste_serial
.text:00000000000018A1                 movsxd  rdi, ebp
.text:00000000000018A4                 cmovz   rax, rdx
.text:00000000000018A8                 movsxd  rdx, cs:optind@@GLIBC_2_2_5
.text:00000000000018AF                 lea     rsi, [rbx+rdx*8]
.text:00000000000018B3                 call    rax
.text:00000000000018B5                 mov     rdi, cs:delims  ; ptr
.text:00000000000018BC                 mov     ebx, eax
.text:00000000000018BE                 call    _free
.text:00000000000018C3                 cmp     cs:have_read_stdin, 0
.text:00000000000018CA                 jnz     short loc_1942
.text:00000000000018CC
.text:00000000000018CC loc_18CC:                               ; CODE XREF: main+2A1↓j
.text:00000000000018CC                 xor     ebx, 1
.text:00000000000018CF                 pop     rdx
.text:00000000000018D0                 movzx   eax, bl
.text:00000000000018D3                 pop     rbx
.text:00000000000018D4                 pop     rbp
.text:00000000000018D5                 pop     r12
.text:00000000000018D7                 pop     r13
.text:00000000000018D9                 retn
.text:00000000000018DA ; ---------------------------------------------------------------------------
.text:00000000000018DA
.text:00000000000018DA loc_18DA:                               ; CODE XREF: main+18E↑j
.text:00000000000018DA                 test    dl, dl
.text:00000000000018DC                 jnz     short loc_193B
.text:00000000000018DE                 mov     rdx, r12
.text:00000000000018E1                 mov     esi, 6
.text:00000000000018E6                 xor     edi, edi
.text:00000000000018E8                 mov     cs:delim_end, rax
.text:00000000000018EF                 call    quotearg_n_style_colon
.text:00000000000018F4                 lea     rsi, aDelimiterListE ; "delimiter list ends with an unescaped b"...
.text:00000000000018FB                 mov     rbx, rax
.text:00000000000018FE                 mov     edx, 5          ; category
.text:0000000000001903                 xor     edi, edi        ; domainname
.text:0000000000001905                 call    _dcgettext
.text:000000000000190A                 mov     rcx, rbx
.text:000000000000190D                 mov     rdx, rax        ; format
.text:0000000000001910                 xor     esi, esi        ; errnum
.text:0000000000001912                 mov     edi, 1          ; status
.text:0000000000001917                 xor     eax, eax
.text:0000000000001919                 call    _error
.text:000000000000191E
.text:000000000000191E loc_191E:                               ; CODE XREF: main+1B4↑j
.text:000000000000191E                 cmp     dl, 6Eh ; 'n'
.text:0000000000001921                 jnz     short loc_193B
.text:0000000000001923                 mov     byte ptr [rax], 0Ah
.text:0000000000001926                 jmp     loc_187F
.text:000000000000192B ; ---------------------------------------------------------------------------
.text:000000000000192B
.text:000000000000192B loc_192B:                               ; CODE XREF: main+197↑j
.text:000000000000192B                 mov     byte ptr [rax], 5Ch ; '\'
.text:000000000000192E                 jmp     loc_187F
.text:0000000000001933 ; ---------------------------------------------------------------------------
.text:0000000000001933
.text:0000000000001933 loc_1933:                               ; CODE XREF: main+1BD↑j
.text:0000000000001933                 mov     byte ptr [rax], 9
.text:0000000000001936                 jmp     loc_187F
.text:000000000000193B ; ---------------------------------------------------------------------------
.text:000000000000193B
.text:000000000000193B loc_193B:                               ; CODE XREF: main+1A0↑j
.text:000000000000193B                                         ; main+1C6↑j ...
.text:000000000000193B                 mov     [rax], dl
.text:000000000000193D                 jmp     loc_187F
.text:0000000000001942 ; ---------------------------------------------------------------------------
.text:0000000000001942
.text:0000000000001942 loc_1942:                               ; CODE XREF: main+21A↑j
.text:0000000000001942                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:0000000000001949                 call    rpl_fclose
.text:000000000000194E                 add     eax, 1
.text:0000000000001951                 jnz     loc_18CC
.text:0000000000001957                 call    ___errno_location
.text:000000000000195C                 mov     esi, [rax]      ; errnum
.text:000000000000195E                 lea     rdx, aLt+2      ; format
.text:0000000000001965                 mov     edi, 1          ; status
.text:000000000000196A                 xor     eax, eax
.text:000000000000196C                 call    _error
.text:0000000000001971
.text:0000000000001971 loc_1971:                               ; CODE XREF: main+1AE↑j
.text:0000000000001971                 mov     byte ptr [rax], 0Dh
.text:0000000000001974                 jmp     loc_187F
.text:0000000000001979 ; ---------------------------------------------------------------------------
.text:0000000000001979
.text:0000000000001979 loc_1979:                               ; CODE XREF: main+188↑j
.text:0000000000001979                 mov     byte ptr [rax], 0
.text:000000000000197C                 jmp     loc_187F
.text:0000000000001981 ; ---------------------------------------------------------------------------
.text:0000000000001981
.text:0000000000001981 loc_1981:                               ; CODE XREF: main+17D↑j
.text:0000000000001981                 mov     byte ptr [rax], 0Ch
.text:0000000000001984                 jmp     loc_187F
.text:0000000000001989 ; ---------------------------------------------------------------------------
.text:0000000000001989
.text:0000000000001989 loc_1989:                               ; CODE XREF: main+BD↑j
.text:0000000000001989                 cmp     eax, 0FFFFFF7Eh
.text:000000000000198E                 jnz     short loc_1997
.text:0000000000001990                 xor     edi, edi        ; status
.text:0000000000001992                 call    usage
.text:0000000000001997 ; ---------------------------------------------------------------------------
.text:0000000000001997
.text:0000000000001997 loc_1997:                               ; CODE XREF: main+A6↑j
.text:0000000000001997                                         ; main+2DE↑j
.text:0000000000001997                 mov     edi, 1          ; status
.text:000000000000199C                 call    usage
.text:000000000000199C ; } // starts at 16B0
.text:000000000000199C main            endp
.text:000000000000199C
.text:000000000000199C ; ---------------------------------------------------------------------------
.text:00000000000019A1                 align 10h
.text:00000000000019B0
.text:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000019B0
.text:00000000000019B0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000019B0
.text:00000000000019B0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000019B0                 public start
.text:00000000000019B0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000019B0 ; __unwind {
.text:00000000000019B0                 xor     ebp, ebp
.text:00000000000019B2                 mov     r9, rdx         ; rtld_fini
.text:00000000000019B5                 pop     rsi             ; argc
.text:00000000000019B6                 mov     rdx, rsp        ; ubp_av
.text:00000000000019B9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000019BD                 push    rax
.text:00000000000019BE                 push    rsp             ; stack_end
.text:00000000000019BF                 lea     r8, __libc_csu_fini ; fini
.text:00000000000019C6                 lea     rcx, __libc_csu_init ; init
.text:00000000000019CD                 lea     rdi, main       ; main
.text:00000000000019D4                 call    cs:__libc_start_main_ptr
.text:00000000000019DA                 hlt
.text:00000000000019DA ; } // starts at 19B0
.text:00000000000019DA start           endp
.text:00000000000019DA
.text:00000000000019DA ; ---------------------------------------------------------------------------
.text:00000000000019DB                 align 20h
.text:00000000000019E0
.text:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000019E0
.text:00000000000019E0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000019E0
.text:00000000000019E0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1A93↓p
.text:00000000000019E0                 lea     rdi, __bss_start
.text:00000000000019E7                 push    rbp
.text:00000000000019E8                 lea     rax, __bss_start
.text:00000000000019EF                 cmp     rax, rdi
.text:00000000000019F2                 mov     rbp, rsp
.text:00000000000019F5                 jz      short loc_1A10
.text:00000000000019F7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000019FE                 test    rax, rax
.text:0000000000001A01                 jz      short loc_1A10
.text:0000000000001A03                 pop     rbp
.text:0000000000001A04                 jmp     rax
.text:0000000000001A04 ; ---------------------------------------------------------------------------
.text:0000000000001A06                 align 10h
.text:0000000000001A10
.text:0000000000001A10 loc_1A10:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001A10                                         ; deregister_tm_clones+21↑j
.text:0000000000001A10                 pop     rbp
.text:0000000000001A11                 retn
.text:0000000000001A11 deregister_tm_clones endp
.text:0000000000001A11
.text:0000000000001A11 ; ---------------------------------------------------------------------------
.text:0000000000001A12                 align 20h
.text:0000000000001A20
.text:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A20
.text:0000000000001A20 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001A20
.text:0000000000001A20 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001A20                 lea     rdi, __bss_start
.text:0000000000001A27                 lea     rsi, __bss_start
.text:0000000000001A2E                 push    rbp
.text:0000000000001A2F                 sub     rsi, rdi
.text:0000000000001A32                 mov     rbp, rsp
.text:0000000000001A35                 sar     rsi, 3
.text:0000000000001A39                 mov     rax, rsi
.text:0000000000001A3C                 shr     rax, 3Fh
.text:0000000000001A40                 add     rsi, rax
.text:0000000000001A43                 sar     rsi, 1
.text:0000000000001A46                 jz      short loc_1A60
.text:0000000000001A48                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001A4F                 test    rax, rax
.text:0000000000001A52                 jz      short loc_1A60
.text:0000000000001A54                 pop     rbp
.text:0000000000001A55                 jmp     rax
.text:0000000000001A55 ; ---------------------------------------------------------------------------
.text:0000000000001A57                 align 20h
.text:0000000000001A60
.text:0000000000001A60 loc_1A60:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001A60                                         ; register_tm_clones+32↑j
.text:0000000000001A60                 pop     rbp
.text:0000000000001A61                 retn
.text:0000000000001A61 register_tm_clones endp
.text:0000000000001A61
.text:0000000000001A61 ; ---------------------------------------------------------------------------
.text:0000000000001A62                 align 10h
.text:0000000000001A70
.text:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A70
.text:0000000000001A70 ; Attributes: info_from_lumina
.text:0000000000001A70
.text:0000000000001A70 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001A70                 cmp     cs:completed_7697, 0
.text:0000000000001A77                 jnz     short locret_1AA8
.text:0000000000001A79                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001A81                 push    rbp
.text:0000000000001A82                 mov     rbp, rsp
.text:0000000000001A85                 jz      short loc_1A93
.text:0000000000001A87                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001A8E                 call    __cxa_finalize
.text:0000000000001A93
.text:0000000000001A93 loc_1A93:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001A93                 call    deregister_tm_clones
.text:0000000000001A98                 mov     cs:completed_7697, 1
.text:0000000000001A9F                 pop     rbp
.text:0000000000001AA0                 retn
.text:0000000000001AA0 ; ---------------------------------------------------------------------------
.text:0000000000001AA1                 align 8
.text:0000000000001AA8
.text:0000000000001AA8 locret_1AA8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001AA8                 rep retn
.text:0000000000001AA8 __do_global_dtors_aux endp
.text:0000000000001AA8
.text:0000000000001AA8 ; ---------------------------------------------------------------------------
.text:0000000000001AAA                 align 10h
.text:0000000000001AB0
.text:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AB0
.text:0000000000001AB0 ; Attributes: bp-based frame
.text:0000000000001AB0
.text:0000000000001AB0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001AB0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001AB0                 push    rbp
.text:0000000000001AB1                 mov     rbp, rsp
.text:0000000000001AB4                 pop     rbp
.text:0000000000001AB5                 jmp     register_tm_clones
.text:0000000000001AB5 frame_dummy     endp
.text:0000000000001AB5
.text:0000000000001AB5 ; ---------------------------------------------------------------------------
.text:0000000000001ABA                 align 20h
.text:0000000000001AC0
.text:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AC0
.text:0000000000001AC0
.text:0000000000001AC0 paste_parallel  proc near               ; DATA XREF: main+1E3↑o
.text:0000000000001AC0
.text:0000000000001AC0 var_70          = qword ptr -70h
.text:0000000000001AC0 var_68          = qword ptr -68h
.text:0000000000001AC0 var_60          = qword ptr -60h
.text:0000000000001AC0 ptr             = qword ptr -58h
.text:0000000000001AC0 errnum          = dword ptr -50h
.text:0000000000001AC0 var_4A          = byte ptr -4Ah
.text:0000000000001AC0 var_49          = byte ptr -49h
.text:0000000000001AC0 var_48          = qword ptr -48h
.text:0000000000001AC0 var_40          = qword ptr -40h
.text:0000000000001AC0
.text:0000000000001AC0 ; __unwind {
.text:0000000000001AC0                 push    r15
.text:0000000000001AC2                 push    r14
.text:0000000000001AC4                 push    r13
.text:0000000000001AC6                 push    r12
.text:0000000000001AC8                 push    rbp
.text:0000000000001AC9                 push    rbx
.text:0000000000001ACA                 mov     rbx, rdi
.text:0000000000001ACD                 add     rdi, 2
.text:0000000000001AD1                 sub     rsp, 48h
.text:0000000000001AD5                 mov     [rsp+78h+var_48], rsi
.text:0000000000001ADA                 call    xmalloc
.text:0000000000001ADF                 mov     edx, 8
.text:0000000000001AE4                 lea     rcx, [rbx+1]
.text:0000000000001AE8                 mov     [rsp+78h+ptr], rax
.text:0000000000001AED                 mov     rax, rdx
.text:0000000000001AF0                 mul     rcx
.text:0000000000001AF3                 jo      loc_2006
.text:0000000000001AF9                 xor     esi, esi
.text:0000000000001AFB
.text:0000000000001AFB loc_1AFB:                               ; CODE XREF: paste_parallel+54B↓j
.text:0000000000001AFB                 test    rax, rax
.text:0000000000001AFE                 js      loc_2010
.text:0000000000001B04                 test    rsi, rsi
.text:0000000000001B07                 jnz     loc_2010
.text:0000000000001B0D                 lea     rdi, ds:0[rcx*8]
.text:0000000000001B15                 call    xmalloc
.text:0000000000001B1A                 test    rbx, rbx
.text:0000000000001B1D                 mov     [rsp+78h+var_40], rax
.text:0000000000001B22                 jz      loc_1FFC
.text:0000000000001B28                 mov     r13, [rsp+78h+var_48]
.text:0000000000001B2D                 mov     [rsp+78h+var_49], 0
.text:0000000000001B32                 xor     r14d, r14d
.text:0000000000001B35                 lea     r12, aLt+2      ; "-"
.text:0000000000001B3C                 mov     ebp, 1
.text:0000000000001B41                 mov     r15, rax
.text:0000000000001B44                 jmp     short loc_1B65
.text:0000000000001B46 ; ---------------------------------------------------------------------------
.text:0000000000001B46
.text:0000000000001B46 loc_1B46:                               ; CODE XREF: paste_parallel+BD↓j
.text:0000000000001B46                 mov     rax, cs:stdin@@GLIBC_2_2_5
.text:0000000000001B4D                 add     r13, 8
.text:0000000000001B51                 mov     cs:have_read_stdin, bpl
.text:0000000000001B58                 mov     [r15+r14*8], rax
.text:0000000000001B5C                 add     r14, 1
.text:0000000000001B60                 cmp     rbx, r14
.text:0000000000001B63                 jz      short loc_1BD5
.text:0000000000001B65
.text:0000000000001B65 loc_1B65:                               ; CODE XREF: paste_parallel+84↑j
.text:0000000000001B65                                         ; paste_parallel+113↓j
.text:0000000000001B65                 mov     r8, [r13+0]
.text:0000000000001B69                 mov     ecx, 2
.text:0000000000001B6E                 mov     rdi, r12
.text:0000000000001B71                 mov     rsi, r8
.text:0000000000001B74                 repe cmpsb
.text:0000000000001B76                 setnbe  al
.text:0000000000001B79                 sbb     al, 0
.text:0000000000001B7B                 test    al, al
.text:0000000000001B7D                 jz      short loc_1B46
.text:0000000000001B7F                 lea     rsi, msgid+0Ah  ; modes
.text:0000000000001B86                 mov     rdi, r8         ; filename
.text:0000000000001B89                 call    _fopen
.text:0000000000001B8E                 test    rax, rax
.text:0000000000001B91                 mov     [r15+r14*8], rax
.text:0000000000001B95                 jz      loc_2015
.text:0000000000001B9B                 mov     rdi, rax        ; stream
.text:0000000000001B9E                 mov     [rsp+78h+var_70], rax
.text:0000000000001BA3                 call    _fileno
.text:0000000000001BA8                 test    eax, eax
.text:0000000000001BAA                 movzx   eax, [rsp+78h+var_49]
.text:0000000000001BAF                 mov     rcx, [rsp+78h+var_70]
.text:0000000000001BB4                 mov     esi, 2
.text:0000000000001BB9                 mov     rdi, rcx
.text:0000000000001BBC                 cmovz   eax, ebp
.text:0000000000001BBF                 add     r14, 1
.text:0000000000001BC3                 add     r13, 8
.text:0000000000001BC7                 mov     [rsp+78h+var_49], al
.text:0000000000001BCB                 call    fadvise
.text:0000000000001BD0                 cmp     rbx, r14
.text:0000000000001BD3                 jnz     short loc_1B65
.text:0000000000001BD5
.text:0000000000001BD5 loc_1BD5:                               ; CODE XREF: paste_parallel+A3↑j
.text:0000000000001BD5                 cmp     [rsp+78h+var_49], 0
.text:0000000000001BDA                 mov     [rsp+78h+var_70], r14
.text:0000000000001BDF                 jz      loc_1FE8
.text:0000000000001BE5                 cmp     cs:have_read_stdin, 0
.text:0000000000001BEC                 jnz     loc_2045
.text:0000000000001BF2                 mov     rax, [rsp+78h+var_70]
.text:0000000000001BF7                 mov     [rsp+78h+var_68], rax
.text:0000000000001BFC                 nop     dword ptr [rax+00h]
.text:0000000000001C00
.text:0000000000001C00 loc_1C00:                               ; CODE XREF: paste_parallel+3AA↓j
.text:0000000000001C00                                         ; paste_parallel+537↓j
.text:0000000000001C00                 mov     rbp, cs:delims
.text:0000000000001C07                 mov     r15, [rsp+78h+var_40]
.text:0000000000001C0C                 mov     ebx, 1
.text:0000000000001C11                 xor     r12d, r12d
.text:0000000000001C14                 mov     [rsp+78h+var_4A], 0
.text:0000000000001C19                 nop     dword ptr [rax+00000000h]
.text:0000000000001C20
.text:0000000000001C20 loc_1C20:                               ; CODE XREF: paste_parallel+2BE↓j
.text:0000000000001C20                 mov     r13, [r15]
.text:0000000000001C23                 test    r13, r13
.text:0000000000001C26                 jz      loc_1D36
.text:0000000000001C2C                 mov     rax, [r13+8]
.text:0000000000001C30                 cmp     [r13+10h], rax
.text:0000000000001C34                 jbe     loc_1F28
.text:0000000000001C3A                 lea     rdx, [rax+1]
.text:0000000000001C3E                 mov     [r13+8], rdx
.text:0000000000001C42                 movzx   r14d, byte ptr [rax]
.text:0000000000001C46                 call    ___errno_location
.text:0000000000001C4B                 mov     [rsp+78h+var_60], rax
.text:0000000000001C50                 mov     eax, [rax]
.text:0000000000001C52                 test    r12, r12
.text:0000000000001C55                 mov     [rsp+78h+errnum], eax
.text:0000000000001C59                 jz      short loc_1C82
.text:0000000000001C5B
.text:0000000000001C5B loc_1C5B:                               ; CODE XREF: paste_parallel+490↓j
.text:0000000000001C5B                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001C62                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:0000000000001C67                 mov     rdx, r12        ; n
.text:0000000000001C6A                 mov     esi, 1          ; size
.text:0000000000001C6F                 call    _fwrite_unlocked
.text:0000000000001C74                 cmp     r12, rax
.text:0000000000001C77                 jnz     short loc_1CF4
.text:0000000000001C79                 xor     r12d, r12d
.text:0000000000001C7C
.text:0000000000001C7C loc_1C7C:                               ; CODE XREF: paste_parallel+486↓j
.text:0000000000001C7C                                         ; paste_parallel+496↓j
.text:0000000000001C7C                 cmp     r14d, 0FFFFFFFFh
.text:0000000000001C80                 jz      short loc_1D00
.text:0000000000001C82
.text:0000000000001C82 loc_1C82:                               ; CODE XREF: paste_parallel+199↑j
.text:0000000000001C82                 movzx   eax, cs:line_delim
.text:0000000000001C89                 mov     esi, r14d
.text:0000000000001C8C                 cmp     r14d, eax
.text:0000000000001C8F                 jnz     short loc_1CD6
.text:0000000000001C91                 jmp     loc_1DD8
.text:0000000000001C91 ; ---------------------------------------------------------------------------
.text:0000000000001C96                 align 20h
.text:0000000000001CA0
.text:0000000000001CA0 loc_1CA0:                               ; CODE XREF: paste_parallel+225↓j
.text:0000000000001CA0                 lea     rax, [rdx+1]
.text:0000000000001CA4                 mov     [rdi+28h], rax
.text:0000000000001CA8                 mov     [rdx], sil
.text:0000000000001CAB
.text:0000000000001CAB loc_1CAB:                               ; CODE XREF: paste_parallel+232↓j
.text:0000000000001CAB                 mov     rdi, [r15]      ; _IO_FILE *
.text:0000000000001CAE                 mov     rax, [rdi+8]
.text:0000000000001CB2                 cmp     rax, [rdi+10h]
.text:0000000000001CB6                 jnb     loc_1D90
.text:0000000000001CBC                 lea     rdx, [rax+1]
.text:0000000000001CC0                 mov     [rdi+8], rdx
.text:0000000000001CC4                 movzx   esi, byte ptr [rax]
.text:0000000000001CC7
.text:0000000000001CC7 loc_1CC7:                               ; CODE XREF: paste_parallel+2DA↓j
.text:0000000000001CC7                 movzx   eax, cs:line_delim
.text:0000000000001CCE                 cmp     eax, esi
.text:0000000000001CD0                 jz      loc_1DD8
.text:0000000000001CD6
.text:0000000000001CD6 loc_1CD6:                               ; CODE XREF: paste_parallel+1CF↑j
.text:0000000000001CD6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000001CDD                 mov     rdx, [rdi+28h]
.text:0000000000001CE1                 cmp     rdx, [rdi+30h]
.text:0000000000001CE5                 jb      short loc_1CA0
.text:0000000000001CE7                 movzx   esi, sil        ; int
.text:0000000000001CEB                 call    ___overflow
.text:0000000000001CF0                 test    eax, eax
.text:0000000000001CF2                 jns     short loc_1CAB
.text:0000000000001CF4
.text:0000000000001CF4 loc_1CF4:                               ; CODE XREF: paste_parallel+1B7↑j
.text:0000000000001CF4                                         ; paste_parallel+378↓j ...
.text:0000000000001CF4                 call    write_error
.text:0000000000001CF9                 nop     dword ptr [rax+00000000h]
.text:0000000000001D00
.text:0000000000001D00 loc_1D00:                               ; CODE XREF: paste_parallel+1C0↑j
.text:0000000000001D00                 test    byte ptr [r13+0], 20h
.text:0000000000001D05                 jnz     loc_1EA0
.text:0000000000001D0B                 cmp     r13, cs:stdin@@GLIBC_2_2_5
.text:0000000000001D12                 mov     rdi, r13        ; stream
.text:0000000000001D15                 jz      loc_1EE2
.text:0000000000001D1B
.text:0000000000001D1B loc_1D1B:                               ; CODE XREF: paste_parallel+41C↓j
.text:0000000000001D1B                 call    rpl_fclose
.text:0000000000001D20                 cmp     eax, 0FFFFFFFFh
.text:0000000000001D23                 jz      loc_1F60
.text:0000000000001D29
.text:0000000000001D29 loc_1D29:                               ; CODE XREF: paste_parallel+427↓j
.text:0000000000001D29                                         ; paste_parallel+4D5↓j
.text:0000000000001D29                 sub     [rsp+78h+var_68], 1
.text:0000000000001D2F                 mov     qword ptr [r15], 0
.text:0000000000001D36
.text:0000000000001D36 loc_1D36:                               ; CODE XREF: paste_parallel+166↑j
.text:0000000000001D36                 cmp     [rsp+78h+var_70], rbx
.text:0000000000001D3B                 jz      loc_1E10
.text:0000000000001D41                 movzx   eax, byte ptr [rbp+0]
.text:0000000000001D45                 test    al, al
.text:0000000000001D47                 jz      short loc_1D56
.text:0000000000001D49                 mov     rcx, [rsp+78h+ptr]
.text:0000000000001D4E                 mov     [rcx+r12], al
.text:0000000000001D52                 add     r12, 1
.text:0000000000001D56
.text:0000000000001D56 loc_1D56:                               ; CODE XREF: paste_parallel+287↑j
.text:0000000000001D56                 add     rbp, 1
.text:0000000000001D5A                 cmp     cs:delim_end, rbp
.text:0000000000001D61                 jz      short loc_1DC9
.text:0000000000001D63
.text:0000000000001D63 loc_1D63:                               ; CODE XREF: paste_parallel+307↓j
.text:0000000000001D63                                         ; paste_parallel+310↓j ...
.text:0000000000001D63                 cmp     [rsp+78h+var_70], rbx
.text:0000000000001D68                 setnbe  dl
.text:0000000000001D6B                 cmp     [rsp+78h+var_68], 0
.text:0000000000001D71                 setnz   al
.text:0000000000001D74                 add     r15, 8
.text:0000000000001D78                 add     rbx, 1
.text:0000000000001D7C                 test    dl, al
.text:0000000000001D7E                 jnz     loc_1C20
.text:0000000000001D84                 jmp     loc_1E64
.text:0000000000001D84 ; ---------------------------------------------------------------------------
.text:0000000000001D89                 align 10h
.text:0000000000001D90
.text:0000000000001D90 loc_1D90:                               ; CODE XREF: paste_parallel+1F6↑j
.text:0000000000001D90                 call    ___uflow
.text:0000000000001D95                 cmp     eax, 0FFFFFFFFh
.text:0000000000001D98                 mov     esi, eax
.text:0000000000001D9A                 jnz     loc_1CC7
.text:0000000000001DA0                 cmp     [rsp+78h+var_70], rbx
.text:0000000000001DA5                 jz      loc_1EF0
.text:0000000000001DAB
.text:0000000000001DAB loc_1DAB:                               ; CODE XREF: paste_parallel+31D↓j
.text:0000000000001DAB                 movzx   eax, byte ptr [rbp+0]
.text:0000000000001DAF                 test    al, al
.text:0000000000001DB1                 jnz     loc_1F00
.text:0000000000001DB7
.text:0000000000001DB7 loc_1DB7:                               ; CODE XREF: paste_parallel+45F↓j
.text:0000000000001DB7                                         ; paste_parallel+51A↓j
.text:0000000000001DB7                 add     rbp, 1
.text:0000000000001DBB                 cmp     cs:delim_end, rbp
.text:0000000000001DC2                 mov     [rsp+78h+var_4A], 1
.text:0000000000001DC7                 jnz     short loc_1D63
.text:0000000000001DC9
.text:0000000000001DC9 loc_1DC9:                               ; CODE XREF: paste_parallel+2A1↑j
.text:0000000000001DC9                 mov     rbp, cs:delims
.text:0000000000001DD0                 jmp     short loc_1D63
.text:0000000000001DD0 ; ---------------------------------------------------------------------------
.text:0000000000001DD2                 align 8
.text:0000000000001DD8
.text:0000000000001DD8 loc_1DD8:                               ; CODE XREF: paste_parallel+1D1↑j
.text:0000000000001DD8                                         ; paste_parallel+210↑j
.text:0000000000001DD8                 cmp     [rsp+78h+var_70], rbx
.text:0000000000001DDD                 jnz     short loc_1DAB
.text:0000000000001DDF
.text:0000000000001DDF loc_1DDF:                               ; CODE XREF: paste_parallel+437↓j
.text:0000000000001DDF                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000001DE6                 mov     rdx, [rdi+28h]
.text:0000000000001DEA                 cmp     rdx, [rdi+30h]
.text:0000000000001DEE                 jnb     loc_1F9A
.text:0000000000001DF4                 lea     rcx, [rdx+1]
.text:0000000000001DF8                 mov     [rdi+28h], rcx
.text:0000000000001DFC                 mov     [rdx], al
.text:0000000000001DFE
.text:0000000000001DFE loc_1DFE:                               ; CODE XREF: paste_parallel+4E4↓j
.text:0000000000001DFE                 mov     [rsp+78h+var_4A], 1
.text:0000000000001E03                 jmp     loc_1D63
.text:0000000000001E03 ; ---------------------------------------------------------------------------
.text:0000000000001E08                 align 10h
.text:0000000000001E10
.text:0000000000001E10 loc_1E10:                               ; CODE XREF: paste_parallel+27B↑j
.text:0000000000001E10                 cmp     [rsp+78h+var_4A], 0
.text:0000000000001E15                 jz      short loc_1E64
.text:0000000000001E17                 test    r12, r12
.text:0000000000001E1A                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001E21                 jz      short loc_1E45
.text:0000000000001E23                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:0000000000001E28                 mov     rdx, r12        ; n
.text:0000000000001E2B                 mov     esi, 1          ; size
.text:0000000000001E30                 call    _fwrite_unlocked
.text:0000000000001E35                 cmp     rax, r12
.text:0000000000001E38                 jnz     loc_1CF4
.text:0000000000001E3E                 mov     rcx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001E45
.text:0000000000001E45 loc_1E45:                               ; CODE XREF: paste_parallel+361↑j
.text:0000000000001E45                 mov     rax, [rcx+28h]
.text:0000000000001E49                 cmp     rax, [rcx+30h]
.text:0000000000001E4D                 movzx   edx, cs:line_delim
.text:0000000000001E54                 jnb     loc_1FB0
.text:0000000000001E5A                 lea     rsi, [rax+1]
.text:0000000000001E5E                 mov     [rcx+28h], rsi
.text:0000000000001E62                 mov     [rax], dl
.text:0000000000001E64
.text:0000000000001E64 loc_1E64:                               ; CODE XREF: paste_parallel+2C4↑j
.text:0000000000001E64                                         ; paste_parallel+355↑j ...
.text:0000000000001E64                 cmp     [rsp+78h+var_68], 0
.text:0000000000001E6A                 jnz     loc_1C00
.text:0000000000001E70
.text:0000000000001E70 loc_1E70:                               ; CODE XREF: paste_parallel+541↓j
.text:0000000000001E70                 mov     rdi, [rsp+78h+var_40] ; ptr
.text:0000000000001E75                 call    _free
.text:0000000000001E7A                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:0000000000001E7F                 call    _free
.text:0000000000001E84                 movzx   eax, [rsp+78h+var_49]
.text:0000000000001E89                 add     rsp, 48h
.text:0000000000001E8D                 pop     rbx
.text:0000000000001E8E                 pop     rbp
.text:0000000000001E8F                 pop     r12
.text:0000000000001E91                 pop     r13
.text:0000000000001E93                 pop     r14
.text:0000000000001E95                 pop     r15
.text:0000000000001E97                 retn
.text:0000000000001E97 ; ---------------------------------------------------------------------------
.text:0000000000001E98                 align 20h
.text:0000000000001EA0
.text:0000000000001EA0 loc_1EA0:                               ; CODE XREF: paste_parallel+245↑j
.text:0000000000001EA0                 mov     rax, [rsp+78h+var_48]
.text:0000000000001EA5                 xor     edi, edi
.text:0000000000001EA7                 mov     esi, 3
.text:0000000000001EAC                 mov     rdx, [rax+rbx*8-8]
.text:0000000000001EB1                 call    quotearg_n_style_colon
.text:0000000000001EB6                 mov     esi, [rsp+78h+errnum] ; errnum
.text:0000000000001EBA                 lea     rdx, format+4   ; format
.text:0000000000001EC1                 xor     edi, edi        ; status
.text:0000000000001EC3                 mov     rcx, rax
.text:0000000000001EC6                 xor     eax, eax
.text:0000000000001EC8                 call    _error
.text:0000000000001ECD                 cmp     r13, cs:stdin@@GLIBC_2_2_5
.text:0000000000001ED4                 mov     [rsp+78h+var_49], 0
.text:0000000000001ED9                 mov     rdi, r13        ; stream
.text:0000000000001EDC                 jnz     loc_1D1B
.text:0000000000001EE2
.text:0000000000001EE2 loc_1EE2:                               ; CODE XREF: paste_parallel+255↑j
.text:0000000000001EE2                 call    _clearerr_unlocked
.text:0000000000001EE7                 jmp     loc_1D29
.text:0000000000001EE7 ; ---------------------------------------------------------------------------
.text:0000000000001EEC                 align 10h
.text:0000000000001EF0
.text:0000000000001EF0 loc_1EF0:                               ; CODE XREF: paste_parallel+2E5↑j
.text:0000000000001EF0                 movzx   eax, cs:line_delim
.text:0000000000001EF7                 jmp     loc_1DDF
.text:0000000000001EF7 ; ---------------------------------------------------------------------------
.text:0000000000001EFC                 align 20h
.text:0000000000001F00
.text:0000000000001F00 loc_1F00:                               ; CODE XREF: paste_parallel+2F1↑j
.text:0000000000001F00                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000001F07                 mov     rdx, [rdi+28h]
.text:0000000000001F0B                 cmp     rdx, [rdi+30h]
.text:0000000000001F0F                 jnb     loc_1FD0
.text:0000000000001F15                 lea     rcx, [rdx+1]
.text:0000000000001F19                 mov     [rdi+28h], rcx
.text:0000000000001F1D                 mov     [rdx], al
.text:0000000000001F1F                 jmp     loc_1DB7
.text:0000000000001F1F ; ---------------------------------------------------------------------------
.text:0000000000001F24                 align 8
.text:0000000000001F28
.text:0000000000001F28 loc_1F28:                               ; CODE XREF: paste_parallel+174↑j
.text:0000000000001F28                 mov     rdi, r13        ; _IO_FILE *
.text:0000000000001F2B                 call    ___uflow
.text:0000000000001F30                 mov     r14d, eax
.text:0000000000001F33                 call    ___errno_location
.text:0000000000001F38                 mov     [rsp+78h+var_60], rax
.text:0000000000001F3D                 mov     eax, [rax]
.text:0000000000001F3F                 test    r12, r12
.text:0000000000001F42                 mov     [rsp+78h+errnum], eax
.text:0000000000001F46                 jz      loc_1C7C
.text:0000000000001F4C                 cmp     r14d, 0FFFFFFFFh
.text:0000000000001F50                 jnz     loc_1C5B
.text:0000000000001F56                 jmp     loc_1C7C
.text:0000000000001F56 ; ---------------------------------------------------------------------------
.text:0000000000001F5B                 align 20h
.text:0000000000001F60
.text:0000000000001F60 loc_1F60:                               ; CODE XREF: paste_parallel+263↑j
.text:0000000000001F60                 mov     rax, [rsp+78h+var_48]
.text:0000000000001F65                 mov     esi, 3
.text:0000000000001F6A                 xor     edi, edi
.text:0000000000001F6C                 mov     rdx, [rax+rbx*8-8]
.text:0000000000001F71                 call    quotearg_n_style_colon
.text:0000000000001F76                 mov     rcx, rax
.text:0000000000001F79                 mov     rax, [rsp+78h+var_60]
.text:0000000000001F7E                 lea     rdx, format+4   ; format
.text:0000000000001F85                 xor     edi, edi        ; status
.text:0000000000001F87                 mov     esi, [rax]      ; errnum
.text:0000000000001F89                 xor     eax, eax
.text:0000000000001F8B                 call    _error
.text:0000000000001F90                 mov     [rsp+78h+var_49], 0
.text:0000000000001F95                 jmp     loc_1D29
.text:0000000000001F9A ; ---------------------------------------------------------------------------
.text:0000000000001F9A
.text:0000000000001F9A loc_1F9A:                               ; CODE XREF: paste_parallel+32E↑j
.text:0000000000001F9A                 movzx   esi, al         ; int
.text:0000000000001F9D                 call    ___overflow
.text:0000000000001FA2                 test    eax, eax
.text:0000000000001FA4                 jns     loc_1DFE
.text:0000000000001FAA                 jmp     loc_1CF4
.text:0000000000001FAA ; ---------------------------------------------------------------------------
.text:0000000000001FAF                 align 10h
.text:0000000000001FB0
.text:0000000000001FB0 loc_1FB0:                               ; CODE XREF: paste_parallel+394↑j
.text:0000000000001FB0                 movzx   esi, dl         ; int
.text:0000000000001FB3                 mov     rdi, rcx        ; _IO_FILE *
.text:0000000000001FB6                 call    ___overflow
.text:0000000000001FBB                 test    eax, eax
.text:0000000000001FBD                 jns     loc_1E64
.text:0000000000001FC3                 jmp     loc_1CF4
.text:0000000000001FC3 ; ---------------------------------------------------------------------------
.text:0000000000001FC8                 align 10h
.text:0000000000001FD0
.text:0000000000001FD0 loc_1FD0:                               ; CODE XREF: paste_parallel+44F↑j
.text:0000000000001FD0                 movzx   esi, al         ; int
.text:0000000000001FD3                 call    ___overflow
.text:0000000000001FD8                 test    eax, eax
.text:0000000000001FDA                 jns     loc_1DB7
.text:0000000000001FE0                 jmp     loc_1CF4
.text:0000000000001FE0 ; ---------------------------------------------------------------------------
.text:0000000000001FE5                 align 8
.text:0000000000001FE8
.text:0000000000001FE8 loc_1FE8:                               ; CODE XREF: paste_parallel+11F↑j
.text:0000000000001FE8                 mov     rax, [rsp+78h+var_70]
.text:0000000000001FED                 mov     [rsp+78h+var_49], 1
.text:0000000000001FF2                 mov     [rsp+78h+var_68], rax
.text:0000000000001FF7                 jmp     loc_1C00
.text:0000000000001FFC ; ---------------------------------------------------------------------------
.text:0000000000001FFC
.text:0000000000001FFC loc_1FFC:                               ; CODE XREF: paste_parallel+62↑j
.text:0000000000001FFC                 mov     [rsp+78h+var_49], 1
.text:0000000000002001                 jmp     loc_1E70
.text:0000000000002006 ; ---------------------------------------------------------------------------
.text:0000000000002006
.text:0000000000002006 loc_2006:                               ; CODE XREF: paste_parallel+33↑j
.text:0000000000002006                 mov     esi, 1
.text:000000000000200B                 jmp     loc_1AFB
.text:0000000000002010 ; ---------------------------------------------------------------------------
.text:0000000000002010
.text:0000000000002010 loc_2010:                               ; CODE XREF: paste_parallel+3E↑j
.text:0000000000002010                                         ; paste_parallel+47↑j
.text:0000000000002010                 call    xalloc_die
.text:0000000000002015 ; ---------------------------------------------------------------------------
.text:0000000000002015
.text:0000000000002015 loc_2015:                               ; CODE XREF: paste_parallel+D5↑j
.text:0000000000002015                 mov     rdx, [r13+0]
.text:0000000000002019                 mov     esi, 3
.text:000000000000201E                 xor     edi, edi
.text:0000000000002020                 call    quotearg_n_style_colon
.text:0000000000002025                 mov     rbx, rax
.text:0000000000002028                 call    ___errno_location
.text:000000000000202D                 mov     esi, [rax]      ; errnum
.text:000000000000202F                 lea     rdx, format+4   ; format
.text:0000000000002036                 mov     rcx, rbx
.text:0000000000002039                 mov     edi, 1          ; status
.text:000000000000203E                 xor     eax, eax
.text:0000000000002040                 call    _error
.text:0000000000002045
.text:0000000000002045 loc_2045:                               ; CODE XREF: paste_parallel+12C↑j
.text:0000000000002045                 lea     rsi, aStandardInputI ; "standard input is closed"
.text:000000000000204C                 mov     edx, 5          ; category
.text:0000000000002051                 xor     edi, edi        ; domainname
.text:0000000000002053                 call    _dcgettext
.text:0000000000002058                 xor     esi, esi        ; errnum
.text:000000000000205A                 mov     rdx, rax        ; format
.text:000000000000205D                 mov     edi, 1          ; status
.text:0000000000002062                 xor     eax, eax
.text:0000000000002064                 call    _error
.text:0000000000002064 ; } // starts at 1AC0
.text:0000000000002069                 nop     dword ptr [rax+00000000h]
.text:0000000000002069 paste_parallel  endp ; sp-analysis failed
.text:0000000000002069
.text:0000000000002070
.text:0000000000002070 ; =============== S U B R O U T I N E =======================================
.text:0000000000002070
.text:0000000000002070
.text:0000000000002070 paste_serial    proc near               ; DATA XREF: main+1EA↑o
.text:0000000000002070
.text:0000000000002070 var_48          = qword ptr -48h
.text:0000000000002070 var_3D          = byte ptr -3Dh
.text:0000000000002070 var_3C          = dword ptr -3Ch
.text:0000000000002070
.text:0000000000002070 ; __unwind {
.text:0000000000002070                 push    r15
.text:0000000000002072                 push    r14
.text:0000000000002074                 push    r13
.text:0000000000002076                 push    r12
.text:0000000000002078                 push    rbp
.text:0000000000002079                 push    rbx
.text:000000000000207A                 sub     rsp, 18h
.text:000000000000207E                 test    rdi, rdi
.text:0000000000002081                 jz      loc_2380
.text:0000000000002087                 mov     rbp, rdi
.text:000000000000208A                 mov     rbx, rsi
.text:000000000000208D                 call    ___errno_location
.text:0000000000002092                 mov     [rsp+48h+var_3D], 1
.text:0000000000002097                 mov     [rsp+48h+var_48], rax
.text:000000000000209B                 nop     dword ptr [rax+rax+00h]
.text:00000000000020A0
.text:00000000000020A0 loc_20A0:                               ; CODE XREF: paste_serial+1D2↓j
.text:00000000000020A0                 mov     rax, [rbx]
.text:00000000000020A3                 lea     rdi, aLt+2      ; "-"
.text:00000000000020AA                 mov     ecx, 2
.text:00000000000020AF                 mov     rsi, rax
.text:00000000000020B2                 repe cmpsb
.text:00000000000020B4                 setnbe  r9b
.text:00000000000020B8                 sbb     r9b, 0
.text:00000000000020BC                 movsx   r12d, r9b
.text:00000000000020C0                 test    r12d, r12d
.text:00000000000020C3                 jnz     loc_21A0
.text:00000000000020C9                 mov     r15, cs:stdin@@GLIBC_2_2_5
.text:00000000000020D0                 mov     cs:have_read_stdin, 1
.text:00000000000020D7
.text:00000000000020D7 loc_20D7:                               ; CODE XREF: paste_serial+158↓j
.text:00000000000020D7                 mov     rdx, [r15+8]
.text:00000000000020DB                 mov     rsi, [r15+10h]
.text:00000000000020DF                 mov     r14, cs:delims
.text:00000000000020E6                 cmp     rdx, rsi
.text:00000000000020E9                 jnb     loc_22A0
.text:00000000000020EF                 lea     rax, [rdx+1]
.text:00000000000020F3                 mov     [r15+8], rax
.text:00000000000020F7                 movzx   edx, byte ptr [rdx]
.text:00000000000020FA                 jmp     short loc_2120
.text:00000000000020FA ; ---------------------------------------------------------------------------
.text:00000000000020FC                 align 20h
.text:0000000000002100
.text:0000000000002100 loc_2100:                               ; CODE XREF: paste_serial+CE↓j
.text:0000000000002100                 movzx   eax, byte ptr [r14]
.text:0000000000002104                 test    al, al
.text:0000000000002106                 jnz     short loc_2168
.text:0000000000002108
.text:0000000000002108 loc_2108:                               ; CODE XREF: paste_serial+302↓j
.text:0000000000002108                 add     r14, 1
.text:000000000000210C                 cmp     cs:delim_end, r14
.text:0000000000002113                 jz      short loc_2194
.text:0000000000002115
.text:0000000000002115 loc_2115:                               ; CODE XREF: paste_serial+EF↓j
.text:0000000000002115                                         ; paste_serial+122↓j ...
.text:0000000000002115                 mov     rax, [r15+8]
.text:0000000000002119                 mov     rsi, [r15+10h]
.text:000000000000211D                 mov     edx, r13d
.text:0000000000002120
.text:0000000000002120 loc_2120:                               ; CODE XREF: paste_serial+8A↑j
.text:0000000000002120                                         ; paste_serial+322↓j
.text:0000000000002120                 cmp     rsi, rax
.text:0000000000002123                 jbe     loc_21D0
.text:0000000000002129                 lea     rsi, [rax+1]
.text:000000000000212D                 mov     [r15+8], rsi
.text:0000000000002131                 movzx   r13d, byte ptr [rax]
.text:0000000000002135
.text:0000000000002135 loc_2135:                               ; CODE XREF: paste_serial+176↓j
.text:0000000000002135                 movzx   eax, cs:line_delim
.text:000000000000213C                 cmp     eax, edx
.text:000000000000213E                 jz      short loc_2100
.text:0000000000002140                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002147                 mov     rax, [rdi+28h]
.text:000000000000214B                 cmp     rax, [rdi+30h]
.text:000000000000214F                 jnb     loc_2318
.text:0000000000002155                 lea     rsi, [rax+1]
.text:0000000000002159                 mov     [rdi+28h], rsi
.text:000000000000215D                 mov     [rax], dl
.text:000000000000215F                 jmp     short loc_2115
.text:000000000000215F ; ---------------------------------------------------------------------------
.text:0000000000002161                 align 8
.text:0000000000002168
.text:0000000000002168 loc_2168:                               ; CODE XREF: paste_serial+96↑j
.text:0000000000002168                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000216F                 mov     rdx, [rdi+28h]
.text:0000000000002173                 cmp     rdx, [rdi+30h]
.text:0000000000002177                 jnb     loc_2368
.text:000000000000217D                 add     r14, 1
.text:0000000000002181                 cmp     cs:delim_end, r14
.text:0000000000002188                 lea     rsi, [rdx+1]
.text:000000000000218C                 mov     [rdi+28h], rsi
.text:0000000000002190                 mov     [rdx], al
.text:0000000000002192                 jnz     short loc_2115
.text:0000000000002194
.text:0000000000002194 loc_2194:                               ; CODE XREF: paste_serial+A3↑j
.text:0000000000002194                 mov     r14, cs:delims
.text:000000000000219B                 jmp     loc_2115
.text:00000000000021A0 ; ---------------------------------------------------------------------------
.text:00000000000021A0
.text:00000000000021A0 loc_21A0:                               ; CODE XREF: paste_serial+53↑j
.text:00000000000021A0                 lea     rsi, msgid+0Ah  ; modes
.text:00000000000021A7                 mov     rdi, rax        ; filename
.text:00000000000021AA                 call    _fopen
.text:00000000000021AF                 test    rax, rax
.text:00000000000021B2                 mov     r15, rax
.text:00000000000021B5                 jz      loc_226A
.text:00000000000021BB                 mov     esi, 2
.text:00000000000021C0                 mov     rdi, rax
.text:00000000000021C3                 call    fadvise
.text:00000000000021C8                 jmp     loc_20D7
.text:00000000000021C8 ; ---------------------------------------------------------------------------
.text:00000000000021CD                 align 10h
.text:00000000000021D0
.text:00000000000021D0 loc_21D0:                               ; CODE XREF: paste_serial+B3↑j
.text:00000000000021D0                 mov     rdi, r15        ; _IO_FILE *
.text:00000000000021D3                 mov     [rsp+48h+var_3C], edx
.text:00000000000021D7                 call    ___uflow
.text:00000000000021DC                 cmp     eax, 0FFFFFFFFh
.text:00000000000021DF                 mov     r13d, eax
.text:00000000000021E2                 mov     edx, [rsp+48h+var_3C]
.text:00000000000021E6                 jnz     loc_2135
.text:00000000000021EC                 mov     rax, [rsp+48h+var_48]
.text:00000000000021F0                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000021F7                 mov     r13d, [rax]
.text:00000000000021FA                 mov     rax, [rdi+28h]
.text:00000000000021FE                 cmp     rax, [rdi+30h]
.text:0000000000002202                 jnb     loc_2330
.text:0000000000002208                 lea     rcx, [rax+1]
.text:000000000000220C                 mov     [rdi+28h], rcx
.text:0000000000002210                 mov     [rax], dl
.text:0000000000002212
.text:0000000000002212 loc_2212:                               ; CODE XREF: paste_serial+2D2↓j
.text:0000000000002212                 movzx   ecx, cs:line_delim
.text:0000000000002219                 cmp     ecx, edx
.text:000000000000221B                 mov     eax, ecx
.text:000000000000221D                 jnz     loc_22C1
.text:0000000000002223
.text:0000000000002223 loc_2223:                               ; CODE XREF: paste_serial+2EA↓j
.text:0000000000002223                 test    byte ptr [r15], 20h
.text:0000000000002227                 jnz     loc_22E6
.text:000000000000222D
.text:000000000000222D loc_222D:                               ; CODE XREF: paste_serial+270↓j
.text:000000000000222D                                         ; paste_serial+2A0↓j
.text:000000000000222D                 test    r12d, r12d
.text:0000000000002230                 mov     rdi, r15        ; stream
.text:0000000000002233                 jnz     short loc_2260
.text:0000000000002235                 call    _clearerr_unlocked
.text:000000000000223A
.text:000000000000223A loc_223A:                               ; CODE XREF: paste_serial+1F8↓j
.text:000000000000223A                                         ; paste_serial+227↓j
.text:000000000000223A                 add     rbx, 8
.text:000000000000223E                 sub     rbp, 1
.text:0000000000002242                 jnz     loc_20A0
.text:0000000000002248
.text:0000000000002248 loc_2248:                               ; CODE XREF: paste_serial+315↓j
.text:0000000000002248                 movzx   eax, [rsp+48h+var_3D]
.text:000000000000224D                 add     rsp, 18h
.text:0000000000002251                 pop     rbx
.text:0000000000002252                 pop     rbp
.text:0000000000002253                 pop     r12
.text:0000000000002255                 pop     r13
.text:0000000000002257                 pop     r14
.text:0000000000002259                 pop     r15
.text:000000000000225B                 retn
.text:000000000000225B ; ---------------------------------------------------------------------------
.text:000000000000225C                 align 20h
.text:0000000000002260
.text:0000000000002260 loc_2260:                               ; CODE XREF: paste_serial+1C3↑j
.text:0000000000002260                 call    rpl_fclose
.text:0000000000002265                 cmp     eax, 0FFFFFFFFh
.text:0000000000002268                 jnz     short loc_223A
.text:000000000000226A
.text:000000000000226A loc_226A:                               ; CODE XREF: paste_serial+145↑j
.text:000000000000226A                 mov     rdx, [rbx]
.text:000000000000226D                 mov     esi, 3
.text:0000000000002272                 xor     edi, edi
.text:0000000000002274                 call    quotearg_n_style_colon
.text:0000000000002279                 mov     rcx, rax
.text:000000000000227C                 mov     rax, [rsp+48h+var_48]
.text:0000000000002280                 lea     rdx, format+4   ; format
.text:0000000000002287                 xor     edi, edi        ; status
.text:0000000000002289                 mov     esi, [rax]      ; errnum
.text:000000000000228B                 xor     eax, eax
.text:000000000000228D                 call    _error
.text:0000000000002292                 mov     [rsp+48h+var_3D], 0
.text:0000000000002297                 jmp     short loc_223A
.text:0000000000002297 ; ---------------------------------------------------------------------------
.text:0000000000002299                 align 20h
.text:00000000000022A0
.text:00000000000022A0 loc_22A0:                               ; CODE XREF: paste_serial+79↑j
.text:00000000000022A0                 mov     rdi, r15        ; _IO_FILE *
.text:00000000000022A3                 call    ___uflow
.text:00000000000022A8                 mov     edx, eax
.text:00000000000022AA                 mov     rax, [rsp+48h+var_48]
.text:00000000000022AE                 cmp     edx, 0FFFFFFFFh
.text:00000000000022B1                 mov     r13d, [rax]
.text:00000000000022B4                 jnz     loc_238A
.text:00000000000022BA                 movzx   eax, cs:line_delim
.text:00000000000022C1
.text:00000000000022C1 loc_22C1:                               ; CODE XREF: paste_serial+1AD↑j
.text:00000000000022C1                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000022C8                 mov     rdx, [rdi+28h]
.text:00000000000022CC                 cmp     rdx, [rdi+30h]
.text:00000000000022D0                 jnb     short loc_2350
.text:00000000000022D2                 lea     rcx, [rdx+1]
.text:00000000000022D6                 mov     [rdi+28h], rcx
.text:00000000000022DA                 mov     [rdx], al
.text:00000000000022DC                 test    byte ptr [r15], 20h
.text:00000000000022E0                 jz      loc_222D
.text:00000000000022E6
.text:00000000000022E6 loc_22E6:                               ; CODE XREF: paste_serial+1B7↑j
.text:00000000000022E6                 mov     rdx, [rbx]
.text:00000000000022E9                 mov     esi, 3
.text:00000000000022EE                 xor     edi, edi
.text:00000000000022F0                 call    quotearg_n_style_colon
.text:00000000000022F5                 lea     rdx, format+4   ; format
.text:00000000000022FC                 mov     rcx, rax
.text:00000000000022FF                 mov     esi, r13d       ; errnum
.text:0000000000002302                 xor     edi, edi        ; status
.text:0000000000002304                 xor     eax, eax
.text:0000000000002306                 call    _error
.text:000000000000230B                 mov     [rsp+48h+var_3D], 0
.text:0000000000002310                 jmp     loc_222D
.text:0000000000002310 ; ---------------------------------------------------------------------------
.text:0000000000002315                 align 8
.text:0000000000002318
.text:0000000000002318 loc_2318:                               ; CODE XREF: paste_serial+DF↑j
.text:0000000000002318                 movzx   esi, dl         ; int
.text:000000000000231B                 call    ___overflow
.text:0000000000002320                 test    eax, eax
.text:0000000000002322                 jns     loc_2115
.text:0000000000002328
.text:0000000000002328 loc_2328:                               ; CODE XREF: paste_serial+2D8↓j
.text:0000000000002328                                         ; paste_serial+2F0↓j ...
.text:0000000000002328                 call    write_error
.text:000000000000232D                 nop     dword ptr [rax]
.text:0000000000002330
.text:0000000000002330 loc_2330:                               ; CODE XREF: paste_serial+192↑j
.text:0000000000002330                 movzx   esi, dl         ; int
.text:0000000000002333                 mov     [rsp+48h+var_3C], edx
.text:0000000000002337                 call    ___overflow
.text:000000000000233C                 test    eax, eax
.text:000000000000233E                 mov     edx, [rsp+48h+var_3C]
.text:0000000000002342                 jns     loc_2212
.text:0000000000002348                 jmp     short loc_2328
.text:0000000000002348 ; ---------------------------------------------------------------------------
.text:000000000000234A                 align 10h
.text:0000000000002350
.text:0000000000002350 loc_2350:                               ; CODE XREF: paste_serial+260↑j
.text:0000000000002350                 movzx   esi, al         ; int
.text:0000000000002353                 call    ___overflow
.text:0000000000002358                 test    eax, eax
.text:000000000000235A                 jns     loc_2223
.text:0000000000002360                 jmp     short loc_2328
.text:0000000000002360 ; ---------------------------------------------------------------------------
.text:0000000000002362                 align 8
.text:0000000000002368
.text:0000000000002368 loc_2368:                               ; CODE XREF: paste_serial+107↑j
.text:0000000000002368                 movzx   esi, al         ; int
.text:000000000000236B                 call    ___overflow
.text:0000000000002370                 test    eax, eax
.text:0000000000002372                 jns     loc_2108
.text:0000000000002378                 jmp     short loc_2328
.text:0000000000002378 ; ---------------------------------------------------------------------------
.text:000000000000237A                 align 20h
.text:0000000000002380
.text:0000000000002380 loc_2380:                               ; CODE XREF: paste_serial+11↑j
.text:0000000000002380                 mov     [rsp+48h+var_3D], 1
.text:0000000000002385                 jmp     loc_2248
.text:000000000000238A ; ---------------------------------------------------------------------------
.text:000000000000238A
.text:000000000000238A loc_238A:                               ; CODE XREF: paste_serial+244↑j
.text:000000000000238A                 mov     rax, [r15+8]
.text:000000000000238E                 mov     rsi, [r15+10h]
.text:0000000000002392                 jmp     loc_2120
.text:0000000000002392 ; } // starts at 2070
.text:0000000000002392 paste_serial    endp
.text:0000000000002392
.text:0000000000002392 ; ---------------------------------------------------------------------------
.text:0000000000002397                 align 20h
.text:00000000000023A0
.text:00000000000023A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000023A0
.text:00000000000023A0 ; Attributes: noreturn
.text:00000000000023A0
.text:00000000000023A0 ; void __fastcall __noreturn usage(int status)
.text:00000000000023A0                 public usage
.text:00000000000023A0 usage           proc near               ; CODE XREF: main+2E2↑p
.text:00000000000023A0                                         ; main+2EC↑p
.text:00000000000023A0
.text:00000000000023A0 var_A8          = qword ptr -0A8h
.text:00000000000023A0 var_A0          = qword ptr -0A0h
.text:00000000000023A0 var_98          = qword ptr -98h
.text:00000000000023A0 var_90          = qword ptr -90h
.text:00000000000023A0 var_88          = qword ptr -88h
.text:00000000000023A0 var_80          = qword ptr -80h
.text:00000000000023A0 var_78          = qword ptr -78h
.text:00000000000023A0 var_70          = qword ptr -70h
.text:00000000000023A0 var_68          = qword ptr -68h
.text:00000000000023A0 var_60          = qword ptr -60h
.text:00000000000023A0 var_58          = qword ptr -58h
.text:00000000000023A0 var_50          = qword ptr -50h
.text:00000000000023A0 var_48          = qword ptr -48h
.text:00000000000023A0 var_40          = qword ptr -40h
.text:00000000000023A0 var_30          = qword ptr -30h
.text:00000000000023A0
.text:00000000000023A0 ; __unwind {
.text:00000000000023A0                 push    r13
.text:00000000000023A2                 push    r12
.text:00000000000023A4                 mov     edx, 5          ; category
.text:00000000000023A9                 push    rbp
.text:00000000000023AA                 push    rbx
.text:00000000000023AB                 mov     ebp, edi
.text:00000000000023AD                 sub     rsp, 88h
.text:00000000000023B4                 mov     rbx, cs:program_name
.text:00000000000023BB                 mov     rax, fs:28h
.text:00000000000023C4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000023C9                 xor     eax, eax
.text:00000000000023CB                 test    edi, edi
.text:00000000000023CD                 jz      short loc_23FD
.text:00000000000023CF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000023D6                 xor     edi, edi        ; domainname
.text:00000000000023D8                 call    _dcgettext
.text:00000000000023DD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000023E4                 mov     rdx, rax
.text:00000000000023E7                 mov     rcx, rbx
.text:00000000000023EA                 mov     esi, 1
.text:00000000000023EF                 xor     eax, eax
.text:00000000000023F1                 call    ___fprintf_chk
.text:00000000000023F6
.text:00000000000023F6 loc_23F6:                               ; CODE XREF: usage+316↓j
.text:00000000000023F6                 mov     edi, ebp        ; status
.text:00000000000023F8                 call    _exit
.text:00000000000023FD ; ---------------------------------------------------------------------------
.text:00000000000023FD
.text:00000000000023FD loc_23FD:                               ; CODE XREF: usage+2D↑j
.text:00000000000023FD                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:0000000000002404                 xor     edi, edi        ; domainname
.text:0000000000002406                 call    _dcgettext
.text:000000000000240B                 mov     rdx, rbx
.text:000000000000240E                 mov     rsi, rax
.text:0000000000002411                 mov     edi, 1
.text:0000000000002416                 xor     eax, eax
.text:0000000000002418                 call    ___printf_chk
.text:000000000000241D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002424                 lea     rsi, aWriteLinesCons ; "Write lines consisting of the sequentia"...
.text:000000000000242B                 mov     edx, 5          ; category
.text:0000000000002430                 xor     edi, edi        ; domainname
.text:0000000000002432                 call    _dcgettext
.text:0000000000002437                 mov     rsi, rbx        ; stream
.text:000000000000243A                 mov     rdi, rax        ; s
.text:000000000000243D                 call    _fputs_unlocked
.text:0000000000002442                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002449                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:0000000000002450                 mov     edx, 5          ; category
.text:0000000000002455                 xor     edi, edi        ; domainname
.text:0000000000002457                 call    _dcgettext
.text:000000000000245C                 mov     rsi, rbx        ; stream
.text:000000000000245F                 mov     rdi, rax        ; s
.text:0000000000002462                 call    _fputs_unlocked
.text:0000000000002467                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000246E                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000002475                 mov     edx, 5          ; category
.text:000000000000247A                 xor     edi, edi        ; domainname
.text:000000000000247C                 call    _dcgettext
.text:0000000000002481                 mov     rsi, rbx        ; stream
.text:0000000000002484                 mov     rdi, rax        ; s
.text:0000000000002487                 call    _fputs_unlocked
.text:000000000000248C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002493                 lea     rsi, aDDelimitersLis ; "  -d, --delimiters=LIST   reuse charact"...
.text:000000000000249A                 mov     edx, 5          ; category
.text:000000000000249F                 xor     edi, edi        ; domainname
.text:00000000000024A1                 call    _dcgettext
.text:00000000000024A6                 mov     rsi, rbx        ; stream
.text:00000000000024A9                 mov     rdi, rax        ; s
.text:00000000000024AC                 call    _fputs_unlocked
.text:00000000000024B1                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000024B8                 lea     rsi, aZZeroTerminate ; "  -z, --zero-terminated    line delimit"...
.text:00000000000024BF                 mov     edx, 5          ; category
.text:00000000000024C4                 xor     edi, edi        ; domainname
.text:00000000000024C6                 call    _dcgettext
.text:00000000000024CB                 mov     rsi, rbx        ; stream
.text:00000000000024CE                 mov     rdi, rax        ; s
.text:00000000000024D1                 call    _fputs_unlocked
.text:00000000000024D6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000024DD                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000024E4                 mov     edx, 5          ; category
.text:00000000000024E9                 xor     edi, edi        ; domainname
.text:00000000000024EB                 call    _dcgettext
.text:00000000000024F0                 mov     rsi, rbx        ; stream
.text:00000000000024F3                 mov     rdi, rax        ; s
.text:00000000000024F6                 call    _fputs_unlocked
.text:00000000000024FB                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002502                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002509                 mov     edx, 5          ; category
.text:000000000000250E                 xor     edi, edi        ; domainname
.text:0000000000002510                 call    _dcgettext
.text:0000000000002515                 mov     rsi, rbx        ; stream
.text:0000000000002518                 mov     rdi, rax        ; s
.text:000000000000251B                 lea     rbx, aPaste     ; "paste"
.text:0000000000002522                 call    _fputs_unlocked
.text:0000000000002527                 lea     rax, asc_520F   ; "["
.text:000000000000252E                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000002535                 mov     [rsp+0A8h+var_48], 0
.text:000000000000253E                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002547                 mov     rdx, rsp
.text:000000000000254A                 mov     [rsp+0A8h+var_A8], rax
.text:000000000000254E                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000002555                 mov     [rsp+0A8h+var_78], rcx
.text:000000000000255A                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000002561                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002566                 lea     rax, domainname ; "coreutils"
.text:000000000000256D                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002572                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000002579                 mov     [rsp+0A8h+var_98], rax
.text:000000000000257E                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000002585                 mov     [rsp+0A8h+var_58], rcx
.text:000000000000258A                 mov     [rsp+0A8h+var_90], rax
.text:000000000000258F                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002596                 mov     [rsp+0A8h+var_88], rax
.text:000000000000259B                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:00000000000025A2                 mov     [rsp+0A8h+var_80], rax
.text:00000000000025A7                 mov     [rsp+0A8h+var_70], rax
.text:00000000000025AC                 mov     [rsp+0A8h+var_60], rax
.text:00000000000025B1                 mov     [rsp+0A8h+var_50], rax
.text:00000000000025B6                 db      2Eh
.text:00000000000025B6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000025C0
.text:00000000000025C0 loc_25C0:                               ; CODE XREF: usage+23D↓j
.text:00000000000025C0                 add     rdx, 10h
.text:00000000000025C4                 mov     rdi, [rdx]
.text:00000000000025C7                 test    rdi, rdi
.text:00000000000025CA                 jz      short loc_25DF
.text:00000000000025CC                 mov     ecx, 6
.text:00000000000025D1                 mov     rsi, rbx
.text:00000000000025D4                 repe cmpsb
.text:00000000000025D6                 setnbe  al
.text:00000000000025D9                 sbb     al, 0
.text:00000000000025DB                 test    al, al
.text:00000000000025DD                 jnz     short loc_25C0
.text:00000000000025DF
.text:00000000000025DF loc_25DF:                               ; CODE XREF: usage+22A↑j
.text:00000000000025DF                 mov     r12, [rdx+8]
.text:00000000000025E3                 xor     edi, edi        ; domainname
.text:00000000000025E5                 mov     edx, 5          ; category
.text:00000000000025EA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:00000000000025F1                 test    r12, r12
.text:00000000000025F4                 jz      loc_26BB
.text:00000000000025FA                 call    _dcgettext
.text:00000000000025FF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002606                 lea     rdx, unk_5285
.text:000000000000260D                 mov     rsi, rax
.text:0000000000002610                 mov     edi, 1
.text:0000000000002615                 xor     eax, eax
.text:0000000000002617                 call    ___printf_chk
.text:000000000000261C                 xor     esi, esi        ; locale
.text:000000000000261E                 mov     edi, 5          ; category
.text:0000000000002623                 call    _setlocale
.text:0000000000002628                 test    rax, rax
.text:000000000000262B                 jz      short loc_2649
.text:000000000000262D                 lea     rsi, s2         ; "en_"
.text:0000000000002634                 mov     edx, 3          ; n
.text:0000000000002639                 mov     rdi, rax        ; s1
.text:000000000000263C                 call    _strncmp
.text:0000000000002641                 test    eax, eax
.text:0000000000002643                 jnz     loc_2750
.text:0000000000002649
.text:0000000000002649 loc_2649:                               ; CODE XREF: usage+28B↑j
.text:0000000000002649                                         ; usage+3D5↓j
.text:0000000000002649                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002650                 xor     edi, edi        ; domainname
.text:0000000000002652                 mov     edx, 5          ; category
.text:0000000000002657                 call    _dcgettext
.text:000000000000265C                 lea     rcx, aPaste     ; "paste"
.text:0000000000002663                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000266A                 mov     rsi, rax
.text:000000000000266D                 mov     edi, 1
.text:0000000000002672                 xor     eax, eax
.text:0000000000002674                 call    ___printf_chk
.text:0000000000002679                 cmp     r12, rbx
.text:000000000000267C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002683                 lea     rbx, asc_52B5+1 ; ""
.text:000000000000268A                 cmovz   rbx, rcx
.text:000000000000268E
.text:000000000000268E loc_268E:                               ; CODE XREF: usage+3A4↓j
.text:000000000000268E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002695                 xor     edi, edi        ; domainname
.text:0000000000002697                 mov     edx, 5          ; category
.text:000000000000269C                 call    _dcgettext
.text:00000000000026A1                 mov     rcx, rbx
.text:00000000000026A4                 mov     rsi, rax
.text:00000000000026A7                 mov     rdx, r12
.text:00000000000026AA                 mov     edi, 1
.text:00000000000026AF                 xor     eax, eax
.text:00000000000026B1                 call    ___printf_chk
.text:00000000000026B6                 jmp     loc_23F6
.text:00000000000026BB ; ---------------------------------------------------------------------------
.text:00000000000026BB
.text:00000000000026BB loc_26BB:                               ; CODE XREF: usage+254↑j
.text:00000000000026BB                 call    _dcgettext
.text:00000000000026C0                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000026C7                 lea     rdx, unk_5285
.text:00000000000026CE                 mov     rsi, rax
.text:00000000000026D1                 mov     edi, 1
.text:00000000000026D6                 xor     eax, eax
.text:00000000000026D8                 call    ___printf_chk
.text:00000000000026DD                 xor     esi, esi        ; locale
.text:00000000000026DF                 mov     edi, 5          ; category
.text:00000000000026E4                 call    _setlocale
.text:00000000000026E9                 test    rax, rax
.text:00000000000026EC                 jz      short loc_2706
.text:00000000000026EE                 lea     rsi, s2         ; "en_"
.text:00000000000026F5                 mov     edx, 3          ; n
.text:00000000000026FA                 mov     rdi, rax        ; s1
.text:00000000000026FD                 call    _strncmp
.text:0000000000002702                 test    eax, eax
.text:0000000000002704                 jnz     short loc_2749
.text:0000000000002706
.text:0000000000002706 loc_2706:                               ; CODE XREF: usage+34C↑j
.text:0000000000002706                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000270D                 mov     edx, 5          ; category
.text:0000000000002712                 xor     edi, edi        ; domainname
.text:0000000000002714                 lea     r12, aPaste     ; "paste"
.text:000000000000271B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002722                 call    _dcgettext
.text:0000000000002727                 lea     rcx, aPaste     ; "paste"
.text:000000000000272E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002735                 mov     rsi, rax
.text:0000000000002738                 mov     edi, 1
.text:000000000000273D                 xor     eax, eax
.text:000000000000273F                 call    ___printf_chk
.text:0000000000002744                 jmp     loc_268E
.text:0000000000002749 ; ---------------------------------------------------------------------------
.text:0000000000002749
.text:0000000000002749 loc_2749:                               ; CODE XREF: usage+364↑j
.text:0000000000002749                 lea     r12, aPaste     ; "paste"
.text:0000000000002750
.text:0000000000002750 loc_2750:                               ; CODE XREF: usage+2A3↑j
.text:0000000000002750                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000002757                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000275E                 xor     edi, edi        ; domainname
.text:0000000000002760                 mov     edx, 5          ; category
.text:0000000000002765                 call    _dcgettext
.text:000000000000276A                 mov     rsi, r13        ; stream
.text:000000000000276D                 mov     rdi, rax        ; s
.text:0000000000002770                 call    _fputs_unlocked
.text:0000000000002775                 jmp     loc_2649
.text:0000000000002775 ; } // starts at 23A0
.text:0000000000002775 usage           endp
.text:0000000000002775
.text:0000000000002775 ; ---------------------------------------------------------------------------
.text:000000000000277A                 align 20h
.text:0000000000002780
.text:0000000000002780 ; =============== S U B R O U T I N E =======================================
.text:0000000000002780
.text:0000000000002780
.text:0000000000002780                 public close_stdout_set_file_name
.text:0000000000002780 close_stdout_set_file_name proc near
.text:0000000000002780 ; __unwind {
.text:0000000000002780                 mov     cs:file_name, rdi
.text:0000000000002787                 retn
.text:0000000000002787 ; } // starts at 2780
.text:0000000000002787 close_stdout_set_file_name endp
.text:0000000000002787
.text:0000000000002787 ; ---------------------------------------------------------------------------
.text:0000000000002788                 align 10h
.text:0000000000002790
.text:0000000000002790 ; =============== S U B R O U T I N E =======================================
.text:0000000000002790
.text:0000000000002790
.text:0000000000002790                 public close_stdout_set_ignore_EPIPE
.text:0000000000002790 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002790 ; __unwind {
.text:0000000000002790                 mov     cs:ignore_EPIPE, dil
.text:0000000000002797                 retn
.text:0000000000002797 ; } // starts at 2790
.text:0000000000002797 close_stdout_set_ignore_EPIPE endp
.text:0000000000002797
.text:0000000000002797 ; ---------------------------------------------------------------------------
.text:0000000000002798                 align 20h
.text:00000000000027A0
.text:00000000000027A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000027A0
.text:00000000000027A0 ; Attributes: info_from_lumina
.text:00000000000027A0
.text:00000000000027A0 ; void __cdecl close_stdout()
.text:00000000000027A0                 public close_stdout
.text:00000000000027A0 close_stdout    proc near               ; DATA XREF: main+55↑o
.text:00000000000027A0 ; __unwind {
.text:00000000000027A0                 push    rbp
.text:00000000000027A1                 push    rbx
.text:00000000000027A2                 sub     rsp, 8
.text:00000000000027A6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000027AD                 call    close_stream
.text:00000000000027B2                 test    eax, eax
.text:00000000000027B4                 jz      short loc_27CC
.text:00000000000027B6                 call    ___errno_location
.text:00000000000027BB                 cmp     cs:ignore_EPIPE, 0
.text:00000000000027C2                 mov     rbx, rax
.text:00000000000027C5                 jz      short loc_27E3
.text:00000000000027C7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000027CA                 jnz     short loc_27E3
.text:00000000000027CC
.text:00000000000027CC loc_27CC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000027CC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000027D3                 call    close_stream
.text:00000000000027D8                 test    eax, eax
.text:00000000000027DA                 jnz     short loc_2822
.text:00000000000027DC                 add     rsp, 8
.text:00000000000027E0                 pop     rbx
.text:00000000000027E1                 pop     rbp
.text:00000000000027E2                 retn
.text:00000000000027E3 ; ---------------------------------------------------------------------------
.text:00000000000027E3
.text:00000000000027E3 loc_27E3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000027E3                                         ; close_stdout+2A↑j
.text:00000000000027E3                 lea     rsi, msgid      ; "write error"
.text:00000000000027EA                 xor     edi, edi        ; domainname
.text:00000000000027EC                 mov     edx, 5          ; category
.text:00000000000027F1                 call    _dcgettext
.text:00000000000027F6                 mov     rdi, cs:file_name
.text:00000000000027FD                 mov     rbp, rax
.text:0000000000002800                 test    rdi, rdi
.text:0000000000002803                 jz      short loc_282D
.text:0000000000002805                 call    quotearg_colon
.text:000000000000280A                 mov     esi, [rbx]      ; errnum
.text:000000000000280C                 lea     rdx, format     ; "%s: %s"
.text:0000000000002813                 mov     rcx, rax
.text:0000000000002816                 mov     r8, rbp
.text:0000000000002819                 xor     edi, edi        ; status
.text:000000000000281B                 xor     eax, eax
.text:000000000000281D                 call    _error
.text:0000000000002822
.text:0000000000002822 loc_2822:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002822                                         ; close_stdout+A2↓j
.text:0000000000002822                 mov     edi, cs:exit_failure ; status
.text:0000000000002828                 call    __exit
.text:000000000000282D ; ---------------------------------------------------------------------------
.text:000000000000282D
.text:000000000000282D loc_282D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000282D                 mov     esi, [rbx]      ; errnum
.text:000000000000282F                 lea     rdx, format+4   ; format
.text:0000000000002836                 mov     rcx, rax
.text:0000000000002839                 xor     edi, edi        ; status
.text:000000000000283B                 xor     eax, eax
.text:000000000000283D                 call    _error
.text:0000000000002842                 jmp     short loc_2822
.text:0000000000002842 ; } // starts at 27A0
.text:0000000000002842 close_stdout    endp
.text:0000000000002842
.text:0000000000002842 ; ---------------------------------------------------------------------------
.text:0000000000002844                 align 10h
.text:0000000000002850
.text:0000000000002850 ; =============== S U B R O U T I N E =======================================
.text:0000000000002850
.text:0000000000002850
.text:0000000000002850 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:0000000000002850                 public fdadvise
.text:0000000000002850 fdadvise        proc near
.text:0000000000002850 ; __unwind {
.text:0000000000002850                 jmp     _posix_fadvise
.text:0000000000002850 ; } // starts at 2850
.text:0000000000002850 fdadvise        endp
.text:0000000000002850
.text:0000000000002850 ; ---------------------------------------------------------------------------
.text:0000000000002855                 align 20h
.text:0000000000002860
.text:0000000000002860 ; =============== S U B R O U T I N E =======================================
.text:0000000000002860
.text:0000000000002860
.text:0000000000002860                 public fadvise
.text:0000000000002860 fadvise         proc near               ; CODE XREF: paste_parallel+10B↑p
.text:0000000000002860                                         ; paste_serial+153↑p
.text:0000000000002860 ; __unwind {
.text:0000000000002860                 test    rdi, rdi
.text:0000000000002863                 jz      short locret_2880
.text:0000000000002865                 push    rbx
.text:0000000000002866                 mov     ebx, esi
.text:0000000000002868                 call    _fileno
.text:000000000000286D                 mov     ecx, ebx        ; advise
.text:000000000000286F                 xor     edx, edx        ; len
.text:0000000000002871                 xor     esi, esi        ; offset
.text:0000000000002873                 pop     rbx
.text:0000000000002874                 mov     edi, eax        ; fd
.text:0000000000002876                 jmp     _posix_fadvise
.text:0000000000002876 ; ---------------------------------------------------------------------------
.text:000000000000287B                 align 20h
.text:0000000000002880
.text:0000000000002880 locret_2880:                            ; CODE XREF: fadvise+3↑j
.text:0000000000002880                 rep retn
.text:0000000000002880 ; } // starts at 2860
.text:0000000000002880 fadvise         endp
.text:0000000000002880
.text:0000000000002880 ; ---------------------------------------------------------------------------
.text:0000000000002882                 align 10h
.text:0000000000002890
.text:0000000000002890 ; =============== S U B R O U T I N E =======================================
.text:0000000000002890
.text:0000000000002890
.text:0000000000002890                 public set_program_name
.text:0000000000002890 set_program_name proc near              ; CODE XREF: main+20↑p
.text:0000000000002890 ; __unwind {
.text:0000000000002890                 test    rdi, rdi
.text:0000000000002893                 push    rbx
.text:0000000000002894                 jz      short loc_290D
.text:0000000000002896                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000289B                 mov     rbx, rdi
.text:000000000000289E                 call    _strrchr
.text:00000000000028A3                 test    rax, rax
.text:00000000000028A6                 jz      short loc_28FD
.text:00000000000028A8                 lea     r8, [rax+1]
.text:00000000000028AC                 mov     rdx, r8
.text:00000000000028AF                 sub     rdx, rbx
.text:00000000000028B2                 cmp     rdx, 6
.text:00000000000028B6                 jle     short loc_28FD
.text:00000000000028B8                 lea     rsi, [rax-6]
.text:00000000000028BC                 lea     rdi, aLibs      ; "/.libs/"
.text:00000000000028C3                 mov     ecx, 7
.text:00000000000028C8                 repe cmpsb
.text:00000000000028CA                 setnbe  dl
.text:00000000000028CD                 sbb     dl, 0
.text:00000000000028D0                 test    dl, dl
.text:00000000000028D2                 jnz     short loc_28FD
.text:00000000000028D4                 lea     rdi, aLt        ; "lt-"
.text:00000000000028DB                 mov     ecx, 3
.text:00000000000028E0                 mov     rsi, r8
.text:00000000000028E3                 mov     rbx, r8
.text:00000000000028E6                 repe cmpsb
.text:00000000000028E8                 setnbe  dl
.text:00000000000028EB                 sbb     dl, 0
.text:00000000000028EE                 test    dl, dl
.text:00000000000028F0                 jnz     short loc_28FD
.text:00000000000028F2                 lea     rbx, [rax+4]
.text:00000000000028F6                 mov     cs:__bss_start, rbx
.text:00000000000028FD
.text:00000000000028FD loc_28FD:                               ; CODE XREF: set_program_name+16↑j
.text:00000000000028FD                                         ; set_program_name+26↑j ...
.text:00000000000028FD                 mov     cs:program_name, rbx
.text:0000000000002904                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000290B                 pop     rbx
.text:000000000000290C                 retn
.text:000000000000290D ; ---------------------------------------------------------------------------
.text:000000000000290D
.text:000000000000290D loc_290D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000290D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002914                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000291B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002920                 mov     esi, 1          ; size
.text:0000000000002925                 call    _fwrite
.text:000000000000292A                 call    _abort
.text:000000000000292A ; } // starts at 2890
.text:000000000000292A set_program_name endp
.text:000000000000292A
.text:000000000000292A ; ---------------------------------------------------------------------------
.text:000000000000292F                 align 10h
.text:0000000000002930
.text:0000000000002930 ; =============== S U B R O U T I N E =======================================
.text:0000000000002930
.text:0000000000002930 ; Attributes: info_from_lumina
.text:0000000000002930
.text:0000000000002930 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002930 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002930                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002930 ; __unwind {
.text:0000000000002930                 push    rbp
.text:0000000000002931                 push    rbx
.text:0000000000002932                 mov     rbp, rdi
.text:0000000000002935                 mov     ebx, esi
.text:0000000000002937                 sub     rsp, 8
.text:000000000000293B                 call    locale_charset
.text:0000000000002940                 movzx   edx, byte ptr [rax]
.text:0000000000002943                 and     edx, 0FFFFFFDFh
.text:0000000000002946                 cmp     dl, 55h ; 'U'
.text:0000000000002949                 jz      short loc_29C0
.text:000000000000294B                 cmp     dl, 47h ; 'G'
.text:000000000000294E                 jz      short loc_2970
.text:0000000000002950
.text:0000000000002950 loc_2950:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002950                                         ; gettext_quote+50↓j ...
.text:0000000000002950                 lea     rax, unk_56EB
.text:0000000000002957                 lea     rdx, asc_56ED   ; "'"
.text:000000000000295E                 cmp     ebx, 9
.text:0000000000002961                 cmovnz  rax, rdx
.text:0000000000002965                 add     rsp, 8
.text:0000000000002969                 pop     rbx
.text:000000000000296A                 pop     rbp
.text:000000000000296B                 retn
.text:000000000000296B ; ---------------------------------------------------------------------------
.text:000000000000296C                 align 10h
.text:0000000000002970
.text:0000000000002970 loc_2970:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002970                 movzx   edx, byte ptr [rax+1]
.text:0000000000002974                 and     edx, 0FFFFFFDFh
.text:0000000000002977                 cmp     dl, 42h ; 'B'
.text:000000000000297A                 jnz     short loc_2950
.text:000000000000297C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002980                 jnz     short loc_2950
.text:0000000000002982                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002986                 jnz     short loc_2950
.text:0000000000002988                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000298C                 jnz     short loc_2950
.text:000000000000298E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002992                 jnz     short loc_2950
.text:0000000000002994                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002998                 jnz     short loc_2950
.text:000000000000299A                 cmp     byte ptr [rax+7], 0
.text:000000000000299E                 jnz     short loc_2950
.text:00000000000029A0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000029A4                 lea     rax, unk_56E4
.text:00000000000029AB                 lea     rdx, unk_56E8
.text:00000000000029B2                 cmovnz  rax, rdx
.text:00000000000029B6                 add     rsp, 8
.text:00000000000029BA                 pop     rbx
.text:00000000000029BB                 pop     rbp
.text:00000000000029BC                 retn
.text:00000000000029BC ; ---------------------------------------------------------------------------
.text:00000000000029BD                 align 20h
.text:00000000000029C0
.text:00000000000029C0 loc_29C0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000029C0                 movzx   edx, byte ptr [rax+1]
.text:00000000000029C4                 and     edx, 0FFFFFFDFh
.text:00000000000029C7                 cmp     dl, 54h ; 'T'
.text:00000000000029CA                 jnz     short loc_2950
.text:00000000000029CC                 movzx   edx, byte ptr [rax+2]
.text:00000000000029D0                 and     edx, 0FFFFFFDFh
.text:00000000000029D3                 cmp     dl, 46h ; 'F'
.text:00000000000029D6                 jnz     loc_2950
.text:00000000000029DC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000029E0                 jnz     loc_2950
.text:00000000000029E6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000029EA                 jnz     loc_2950
.text:00000000000029F0                 cmp     byte ptr [rax+5], 0
.text:00000000000029F4                 jnz     loc_2950
.text:00000000000029FA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000029FE                 lea     rax, unk_56DC
.text:0000000000002A05                 lea     rdx, unk_56E0
.text:0000000000002A0C                 cmovnz  rax, rdx
.text:0000000000002A10                 add     rsp, 8
.text:0000000000002A14                 pop     rbx
.text:0000000000002A15                 pop     rbp
.text:0000000000002A16                 retn
.text:0000000000002A16 ; } // starts at 2930
.text:0000000000002A16 gettext_quote   endp
.text:0000000000002A16
.text:0000000000002A16 ; ---------------------------------------------------------------------------
.text:0000000000002A17                 align 20h
.text:0000000000002A20
.text:0000000000002A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A20
.text:0000000000002A20 ; Attributes: info_from_lumina
.text:0000000000002A20
.text:0000000000002A20 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002A20 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002A20                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002A20
.text:0000000000002A20 var_E0          = dword ptr -0E0h
.text:0000000000002A20 var_DB          = byte ptr -0DBh
.text:0000000000002A20 var_DA          = byte ptr -0DAh
.text:0000000000002A20 var_D9          = byte ptr -0D9h
.text:0000000000002A20 s               = qword ptr -0D8h
.text:0000000000002A20 n               = qword ptr -0D0h
.text:0000000000002A20 var_C8          = qword ptr -0C8h
.text:0000000000002A20 ps              = qword ptr -0C0h
.text:0000000000002A20 var_B8          = qword ptr -0B8h
.text:0000000000002A20 var_B0          = qword ptr -0B0h
.text:0000000000002A20 var_A8          = qword ptr -0A8h
.text:0000000000002A20 s2              = qword ptr -0A0h
.text:0000000000002A20 var_98          = qword ptr -98h
.text:0000000000002A20 var_90          = qword ptr -90h
.text:0000000000002A20 var_88          = qword ptr -88h
.text:0000000000002A20 var_80          = qword ptr -80h
.text:0000000000002A20 var_78          = qword ptr -78h
.text:0000000000002A20 var_70          = dword ptr -70h
.text:0000000000002A20 var_6C          = byte ptr -6Ch
.text:0000000000002A20 var_6B          = byte ptr -6Bh
.text:0000000000002A20 var_6A          = byte ptr -6Ah
.text:0000000000002A20 var_69          = byte ptr -69h
.text:0000000000002A20 var_68          = qword ptr -68h
.text:0000000000002A20 var_60          = qword ptr -60h
.text:0000000000002A20 wc              = dword ptr -4Ch
.text:0000000000002A20 var_48          = qword ptr -48h
.text:0000000000002A20 var_40          = qword ptr -40h
.text:0000000000002A20 arg_0           = qword ptr  8
.text:0000000000002A20 arg_8           = qword ptr  10h
.text:0000000000002A20 arg_10          = qword ptr  18h
.text:0000000000002A20
.text:0000000000002A20 ; __unwind {
.text:0000000000002A20                 push    r15
.text:0000000000002A22                 push    r14
.text:0000000000002A24                 mov     r15d, r8d
.text:0000000000002A27                 push    r13
.text:0000000000002A29                 push    r12
.text:0000000000002A2B                 mov     r14, rdi
.text:0000000000002A2E                 push    rbp
.text:0000000000002A2F                 push    rbx
.text:0000000000002A30                 mov     ebx, r9d
.text:0000000000002A33                 mov     r13, rsi
.text:0000000000002A36                 mov     rbp, rcx
.text:0000000000002A39                 and     ebx, 2
.text:0000000000002A3C                 sub     rsp, 0B8h
.text:0000000000002A43                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000002A4B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002A50                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002A55                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000002A5A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000002A5F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002A67                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002A6C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002A74                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002A79                 mov     rax, fs:28h
.text:0000000000002A82                 mov     [rsp+0E8h+var_40], rax
.text:0000000000002A8A                 xor     eax, eax
.text:0000000000002A8C                 call    ___ctype_get_mb_cur_max
.text:0000000000002A91                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002A95                 mov     [rsp+0E8h+var_90], rax
.text:0000000000002A9A                 ja      def_2AB1        ; jumptable 00000000000121F1 default case
.text:0000000000002AA0                 lea     rcx, jpt_2AB1
.text:0000000000002AA7                 mov     edx, r15d
.text:0000000000002AAA                 movsxd  rax, ds:(jpt_2AB1 - 5740h)[rcx+rdx*4]
.text:0000000000002AAE                 add     rax, rcx
.text:0000000000002AB1                 jmp     rax             ; switch jump
.text:0000000000002AB3 ; ---------------------------------------------------------------------------
.text:0000000000002AB3
.text:0000000000002AB3 loc_2AB3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002AB3                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002AB3                                         ; DATA XREF: ...
.text:0000000000002AB3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002AB8                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002ABD                 xor     r12d, r12d
.text:0000000000002AC0                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002AC9                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002ACE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002AD3
.text:0000000000002AD3 loc_2AD3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002AD3                 lea     rax, asc_56ED   ; "'"
.text:0000000000002ADA                 mov     [rsp+0E8h+n], 1
.text:0000000000002AE3                 xor     r15d, r15d
.text:0000000000002AE6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002AEE                 mov     [rsp+0E8h+s2], rax
.text:0000000000002AF3
.text:0000000000002AF3 loc_2AF3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002AF3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002AF3                 xor     r11d, r11d
.text:0000000000002AF6                 mov     rax, rbp
.text:0000000000002AF9                 mov     r8d, r12d
.text:0000000000002AFC                 mov     rbp, r11
.text:0000000000002AFF                 mov     r11, rax
.text:0000000000002B02                 nop     word ptr [rax+rax+00h]
.text:0000000000002B08
.text:0000000000002B08 loc_2B08:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002B08                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002B08                 cmp     r11, rbp
.text:0000000000002B0B                 setnz   r12b
.text:0000000000002B0F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002B13                 jnz     short loc_2B22
.text:0000000000002B15                 mov     rax, [rsp+0E8h+s]
.text:0000000000002B1A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000002B1E                 setnz   r12b
.text:0000000000002B22
.text:0000000000002B22 loc_2B22:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002B22                 test    r12b, r12b
.text:0000000000002B25                 jz      loc_3180
.text:0000000000002B2B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002B30                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002B35                 lea     r9, [rdi+rbp]
.text:0000000000002B39                 setnz   al
.text:0000000000002B3C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002B40                 mov     r10d, eax
.text:0000000000002B43                 jz      loc_2BF0
.text:0000000000002B49                 mov     rax, [rsp+0E8h+n]
.text:0000000000002B4E                 test    rax, rax
.text:0000000000002B51                 jz      loc_2F80
.text:0000000000002B57                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002B5B                 lea     rbx, [rbp+rax+0]
.text:0000000000002B60                 jnz     short loc_2B90
.text:0000000000002B62                 cmp     rax, 1
.text:0000000000002B66                 jbe     short loc_2B90
.text:0000000000002B68                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002B6D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002B72                 mov     [rsp+0E8h+ps], r9
.text:0000000000002B77                 call    _strlen
.text:0000000000002B7C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002B82                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002B88                 mov     r11, rax
.text:0000000000002B8B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002B90
.text:0000000000002B90 loc_2B90:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002B90                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002B90                 cmp     rbx, r11
.text:0000000000002B93                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002B98                 ja      loc_3150
.text:0000000000002B9E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002BA3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002BA8                 mov     rdi, r9         ; s1
.text:0000000000002BAB                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002BB0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002BB5                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002BBA                 call    _memcmp
.text:0000000000002BBF                 test    eax, eax
.text:0000000000002BC1                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002BC6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002BCC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002BD1                 jnz     loc_3150
.text:0000000000002BD7                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002BDC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002BE2                 jnz     loc_3B65
.text:0000000000002BE8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002BF0
.text:0000000000002BF0 loc_2BF0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002BF0                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002BF0                 movzx   ebx, byte ptr [r9]
.text:0000000000002BF4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002BF7                 ja      def_2C0E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002BFD                 lea     rcx, jpt_2C0E
.text:0000000000002C04                 movzx   edx, bl
.text:0000000000002C07                 movsxd  rax, ds:(jpt_2C0E - 576Ch)[rcx+rdx*4]
.text:0000000000002C0B                 add     rax, rcx
.text:0000000000002C0E                 jmp     rax             ; switch jump
.text:0000000000002C10 ; ---------------------------------------------------------------------------
.text:0000000000002C10
.text:0000000000002C10 loc_2C10:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002C10                                         ; DATA XREF: .rodata:jpt_2F9A↓o
.text:0000000000002C10                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002C13
.text:0000000000002C13 loc_2C13:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002C13                                         ; DATA XREF: .rodata:jpt_2C0E↓o
.text:0000000000002C13                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002C17                 setnz   al
.text:0000000000002C1A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002C1E                 jnz     short loc_2C2C
.text:0000000000002C20                 mov     rax, [rsp+0E8h+s]
.text:0000000000002C25                 cmp     byte ptr [rax+1], 0
.text:0000000000002C29                 setnz   al
.text:0000000000002C2C
.text:0000000000002C2C loc_2C2C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000002C2C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002C31                 setz    dl
.text:0000000000002C34                 test    al, al
.text:0000000000002C36                 jz      loc_2E88
.text:0000000000002C3C
.text:0000000000002C3C loc_2C3C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000002C3C                 xor     r12d, r12d
.text:0000000000002C3F                 xor     eax, eax
.text:0000000000002C41                 nop     dword ptr [rax+00000000h]
.text:0000000000002C48
.text:0000000000002C48 loc_2C48:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002C48                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002C48                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000002C4D                 jnz     loc_2D62
.text:0000000000002C53                 test    dl, dl
.text:0000000000002C55                 jnz     loc_2D62
.text:0000000000002C5B
.text:0000000000002C5B loc_2C5B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000002C5B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002C60                 test    rsi, rsi
.text:0000000000002C63                 jz      short loc_2C79
.text:0000000000002C65                 mov     edx, ebx
.text:0000000000002C67                 shr     dl, 5
.text:0000000000002C6A                 movzx   edx, dl
.text:0000000000002C6D                 mov     edx, [rsi+rdx*4]
.text:0000000000002C70                 bt      edx, ebx
.text:0000000000002C73                 jb      loc_2DC3
.text:0000000000002C79
.text:0000000000002C79 loc_2C79:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002C79                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002C79                 test    r10b, r10b
.text:0000000000002C7C                 jnz     loc_2DC3
.text:0000000000002C82                 xor     eax, 1
.text:0000000000002C85                 add     rbp, 1
.text:0000000000002C89                 and     eax, r8d
.text:0000000000002C8C
.text:0000000000002C8C loc_2C8C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000002C8C                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000002C8C                 test    al, al
.text:0000000000002C8E                 jz      short loc_2CB0
.text:0000000000002C90                 cmp     r13, r15
.text:0000000000002C93                 jbe     short loc_2C9A
.text:0000000000002C95                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002C9A
.text:0000000000002C9A loc_2C9A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000002C9A                 lea     rax, [r15+1]
.text:0000000000002C9E                 cmp     r13, rax
.text:0000000000002CA1                 jbe     short loc_2CA9
.text:0000000000002CA3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002CA9
.text:0000000000002CA9 loc_2CA9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002CA9                 add     r15, 2
.text:0000000000002CAD                 xor     r8d, r8d
.text:0000000000002CB0
.text:0000000000002CB0 loc_2CB0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002CB0                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002CB0                 cmp     r15, r13
.text:0000000000002CB3                 jnb     short loc_2CB9
.text:0000000000002CB5                 mov     [r14+r15], bl
.text:0000000000002CB9
.text:0000000000002CB9 loc_2CB9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002CB9                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000002CBE                 add     r15, 1
.text:0000000000002CC2                 mov     eax, 0
.text:0000000000002CC7                 test    r12b, r12b
.text:0000000000002CCA                 cmovz   edi, eax
.text:0000000000002CCD                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002CD2                 jmp     loc_2B08
.text:0000000000002CD2 ; ---------------------------------------------------------------------------
.text:0000000000002CD7                 align 20h
.text:0000000000002CE0
.text:0000000000002CE0 loc_2CE0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002CE0                                         ; DATA XREF: .rodata:jpt_2F9A↓o
.text:0000000000002CE0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002CE3
.text:0000000000002CE3 loc_2CE3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002CE3                                         ; DATA XREF: .rodata:jpt_2C0E↓o
.text:0000000000002CE3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002CE7                 cmp     eax, 2
.text:0000000000002CEA                 jz      loc_32A8
.text:0000000000002CF0                 cmp     eax, 5
.text:0000000000002CF3                 jz      loc_3268
.text:0000000000002CF9                 cmp     eax, 2
.text:0000000000002CFC                 mov     ebx, 3Fh ; '?'
.text:0000000000002D01                 setz    dl
.text:0000000000002D04                 xor     r12d, r12d
.text:0000000000002D07                 xor     eax, eax
.text:0000000000002D09                 jmp     loc_2C48
.text:0000000000002D09 ; ---------------------------------------------------------------------------
.text:0000000000002D0E                 align 10h
.text:0000000000002D10
.text:0000000000002D10 loc_2D10:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002D10                                         ; DATA XREF: .rodata:jpt_2F9A↓o
.text:0000000000002D10                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002D13
.text:0000000000002D13 loc_2D13:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D13                                         ; DATA XREF: .rodata:jpt_2C0E↓o
.text:0000000000002D13                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002D18                 jz      loc_3220
.text:0000000000002D1E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002D23                 xor     edx, edx
.text:0000000000002D25                 xor     eax, eax
.text:0000000000002D27                 mov     ebx, 27h ; '''
.text:0000000000002D2C                 jmp     loc_2C48
.text:0000000000002D2C ; ---------------------------------------------------------------------------
.text:0000000000002D31                 align 8
.text:0000000000002D38
.text:0000000000002D38 loc_2D38:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D38                                         ; DATA XREF: .rodata:jpt_2C0E↓o
.text:0000000000002D38                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000002D3D                 mov     ebx, 74h ; 't'
.text:0000000000002D42
.text:0000000000002D42 loc_2D42:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002D42                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002D42                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002D47                 setz    al
.text:0000000000002D4A                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002D4E                 jnz     loc_2E9E
.text:0000000000002D54
.text:0000000000002D54 loc_2D54:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002D54                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002D54                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002D59                 jnz     short loc_2DC0
.text:0000000000002D5B
.text:0000000000002D5B loc_2D5B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000002D5B                 mov     ebx, edx
.text:0000000000002D5D                 xor     r12d, r12d
.text:0000000000002D60                 xor     eax, eax
.text:0000000000002D62
.text:0000000000002D62 loc_2D62:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002D62                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002D62                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002D67                 jnz     loc_2C5B
.text:0000000000002D6D                 jmp     loc_2C79
.text:0000000000002D6D ; ---------------------------------------------------------------------------
.text:0000000000002D72                 align 8
.text:0000000000002D78
.text:0000000000002D78 loc_2D78:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D78                                         ; DATA XREF: .rodata:jpt_2C0E↓o
.text:0000000000002D78                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000002D7D                 mov     ebx, 62h ; 'b'
.text:0000000000002D82                 jmp     short loc_2D54
.text:0000000000002D82 ; ---------------------------------------------------------------------------
.text:0000000000002D84                 align 8
.text:0000000000002D88
.text:0000000000002D88 loc_2D88:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002D88                                         ; DATA XREF: .rodata:jpt_2C0E↓o
.text:0000000000002D88                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000002D8D                 jz      loc_3160
.text:0000000000002D93                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002D98                 jz      loc_2FB0
.text:0000000000002D9E
.text:0000000000002D9E loc_2D9E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000002D9E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002DA3                 jz      loc_2FB0
.text:0000000000002DA9                 cmp     [rsp+0E8h+n], 0
.text:0000000000002DAF                 jnz     loc_316B
.text:0000000000002DB5                 mov     ebx, 5Ch ; '\'
.text:0000000000002DBA                 nop     word ptr [rax+rax+00h]
.text:0000000000002DC0
.text:0000000000002DC0 loc_2DC0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002DC0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002DC0                 xor     r12d, r12d
.text:0000000000002DC3
.text:0000000000002DC3 loc_2DC3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002DC3                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002DC3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002DC8                 setz    dl
.text:0000000000002DCB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002DD0                 mov     eax, edx
.text:0000000000002DD2                 jnz     loc_3628
.text:0000000000002DD8                 mov     eax, r8d
.text:0000000000002DDB                 xor     eax, 1
.text:0000000000002DDE                 and     al, dl
.text:0000000000002DE0                 jz      short loc_2E11
.text:0000000000002DE2                 cmp     r13, r15
.text:0000000000002DE5                 jbe     short loc_2DEC
.text:0000000000002DE7                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002DEC
.text:0000000000002DEC loc_2DEC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000002DEC                 lea     rdx, [r15+1]
.text:0000000000002DF0                 cmp     r13, rdx
.text:0000000000002DF3                 jbe     short loc_2DFB
.text:0000000000002DF5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002DFB
.text:0000000000002DFB loc_2DFB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000002DFB                 lea     rdx, [r15+2]
.text:0000000000002DFF                 cmp     r13, rdx
.text:0000000000002E02                 jbe     short loc_2E0A
.text:0000000000002E04                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002E0A
.text:0000000000002E0A loc_2E0A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000002E0A                 add     r15, 3
.text:0000000000002E0E                 mov     r8d, eax
.text:0000000000002E11
.text:0000000000002E11 loc_2E11:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002E11                 cmp     r13, r15
.text:0000000000002E14                 jbe     short loc_2E1B
.text:0000000000002E16                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002E1B
.text:0000000000002E1B loc_2E1B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000002E1B                 add     r15, 1
.text:0000000000002E1F                 add     rbp, 1
.text:0000000000002E23                 jmp     loc_2CB0
.text:0000000000002E23 ; ---------------------------------------------------------------------------
.text:0000000000002E28                 align 10h
.text:0000000000002E30
.text:0000000000002E30 loc_2E30:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002E30                                         ; DATA XREF: .rodata:jpt_2C0E↓o
.text:0000000000002E30                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002E35                 jnz     loc_3003
.text:0000000000002E3B                 xor     edx, edx
.text:0000000000002E3D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002E42                 jz      loc_2D5B
.text:0000000000002E48                 add     rbp, 1
.text:0000000000002E4C                 jmp     loc_2B08
.text:0000000000002E4C ; ---------------------------------------------------------------------------
.text:0000000000002E51                 align 8
.text:0000000000002E58
.text:0000000000002E58 loc_2E58:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002E58                                         ; DATA XREF: .rodata:jpt_2C0E↓o
.text:0000000000002E58                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000002E5D                 setz    dl
.text:0000000000002E60                 xor     eax, eax
.text:0000000000002E62                 jmp     loc_2C48
.text:0000000000002E62 ; ---------------------------------------------------------------------------
.text:0000000000002E67                 align 10h
.text:0000000000002E70
.text:0000000000002E70 loc_2E70:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002E70                                         ; DATA XREF: .rodata:jpt_2C0E↓o
.text:0000000000002E70                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000002E75                 mov     ebx, 61h ; 'a'
.text:0000000000002E7A                 jmp     loc_2D54
.text:0000000000002E7A ; ---------------------------------------------------------------------------
.text:0000000000002E7F                 align 20h
.text:0000000000002E80
.text:0000000000002E80 loc_2E80:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002E80                                         ; DATA XREF: .rodata:jpt_2C0E↓o
.text:0000000000002E80                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000002E85                 setz    dl
.text:0000000000002E88
.text:0000000000002E88 loc_2E88:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000002E88                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000002E88                 test    rbp, rbp
.text:0000000000002E8B                 jnz     loc_2C3C
.text:0000000000002E91
.text:0000000000002E91 loc_2E91:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000002E91                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000002E91                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002E96                 and     al, dl
.text:0000000000002E98                 jz      loc_2C48
.text:0000000000002E9E
.text:0000000000002E9E loc_2E9E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000002E9E                 mov     rbp, r11
.text:0000000000002EA1                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002EA9                 jmp     loc_35A9
.text:0000000000002EA9 ; ---------------------------------------------------------------------------
.text:0000000000002EAE                 align 10h
.text:0000000000002EB0
.text:0000000000002EB0 loc_2EB0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002EB0                                         ; DATA XREF: .rodata:jpt_2C0E↓o
.text:0000000000002EB0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002EB5                 setz    dl
.text:0000000000002EB8                 xor     r12d, r12d
.text:0000000000002EBB                 jmp     short loc_2E91
.text:0000000000002EBB ; ---------------------------------------------------------------------------
.text:0000000000002EBD                 align 20h
.text:0000000000002EC0
.text:0000000000002EC0 loc_2EC0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002EC0                                         ; DATA XREF: .rodata:jpt_2C0E↓o
.text:0000000000002EC0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002EC5                 mov     ebx, 20h ; ' '
.text:0000000000002ECA                 setz    dl
.text:0000000000002ECD                 jmp     short loc_2E91
.text:0000000000002ECD ; ---------------------------------------------------------------------------
.text:0000000000002ECF                 align 10h
.text:0000000000002ED0
.text:0000000000002ED0 loc_2ED0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002ED0                                         ; DATA XREF: .rodata:jpt_2C0E↓o
.text:0000000000002ED0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002ED5                 mov     ebx, 72h ; 'r'
.text:0000000000002EDA                 jmp     loc_2D42
.text:0000000000002EDA ; ---------------------------------------------------------------------------
.text:0000000000002EDF                 align 20h
.text:0000000000002EE0
.text:0000000000002EE0 loc_2EE0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002EE0                                         ; DATA XREF: .rodata:jpt_2C0E↓o
.text:0000000000002EE0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002EE5                 mov     ebx, 66h ; 'f'
.text:0000000000002EEA                 jmp     loc_2D54
.text:0000000000002EEA ; ---------------------------------------------------------------------------
.text:0000000000002EEF                 align 10h
.text:0000000000002EF0
.text:0000000000002EF0 loc_2EF0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002EF0                                         ; DATA XREF: .rodata:jpt_2C0E↓o
.text:0000000000002EF0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002EF5                 mov     ebx, 76h ; 'v'
.text:0000000000002EFA                 jmp     loc_2D54
.text:0000000000002EFA ; ---------------------------------------------------------------------------
.text:0000000000002EFF                 align 20h
.text:0000000000002F00
.text:0000000000002F00 loc_2F00:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F00                                         ; DATA XREF: .rodata:jpt_2C0E↓o
.text:0000000000002F00                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002F05                 mov     ebx, 6Eh ; 'n'
.text:0000000000002F0A                 jmp     loc_2D42
.text:0000000000002F0A ; ---------------------------------------------------------------------------
.text:0000000000002F0F                 align 10h
.text:0000000000002F10
.text:0000000000002F10 def_2F9A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002F10                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002F10                                         ; DATA XREF: ...
.text:0000000000002F10                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002F13                 nop     dword ptr [rax+rax+00h]
.text:0000000000002F18
.text:0000000000002F18 def_2C0E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002F18                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002F18                                         ; DATA XREF: ...
.text:0000000000002F18                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002F1E                 jnz     loc_32C8
.text:0000000000002F24                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002F29                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000002F2E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002F33                 call    ___ctype_b_loc
.text:0000000000002F38                 mov     rcx, [rax]
.text:0000000000002F3B                 movzx   edx, bl
.text:0000000000002F3E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002F44                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002F4A                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000002F4F                 mov     edi, 1
.text:0000000000002F54                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000002F58                 and     ax, 4000h
.text:0000000000002F5C                 setnz   r12b
.text:0000000000002F60                 setz    al
.text:0000000000002F63                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002F67
.text:0000000000002F67 loc_2F67:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002F67                 test    al, al
.text:0000000000002F69                 jnz     loc_3901
.text:0000000000002F6F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002F74                 setz    dl
.text:0000000000002F77                 jmp     loc_2C48
.text:0000000000002F77 ; ---------------------------------------------------------------------------
.text:0000000000002F7C                 align 20h
.text:0000000000002F80
.text:0000000000002F80 loc_2F80:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000002F80                 movzx   ebx, byte ptr [r9]
.text:0000000000002F84                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002F87                 ja      short def_2F9A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002F89                 lea     rcx, jpt_2F9A
.text:0000000000002F90                 movzx   edx, bl
.text:0000000000002F93                 movsxd  rax, ds:(jpt_2F9A - 5968h)[rcx+rdx*4]
.text:0000000000002F97                 add     rax, rcx
.text:0000000000002F9A                 jmp     rax             ; switch jump
.text:0000000000002F9A ; ---------------------------------------------------------------------------
.text:0000000000002F9C                 align 20h
.text:0000000000002FA0
.text:0000000000002FA0 loc_2FA0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002FA0                                         ; DATA XREF: .rodata:jpt_2F9A↓o
.text:0000000000002FA0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000002FA3                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002FA8                 jnz     loc_2D9E
.text:0000000000002FAE                 xchg    ax, ax
.text:0000000000002FB0
.text:0000000000002FB0 loc_2FB0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002FB0                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002FB0                 mov     edx, 5Ch ; '\'
.text:0000000000002FB5                 mov     ebx, 5Ch ; '\'
.text:0000000000002FBA                 jmp     loc_2D54
.text:0000000000002FBA ; ---------------------------------------------------------------------------
.text:0000000000002FBF                 align 20h
.text:0000000000002FC0
.text:0000000000002FC0 loc_2FC0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002FC0                                         ; DATA XREF: .rodata:jpt_2F9A↓o
.text:0000000000002FC0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002FC5                 xor     r10d, r10d
.text:0000000000002FC8                 mov     ebx, 66h ; 'f'
.text:0000000000002FCD                 jmp     loc_2D54
.text:0000000000002FCD ; ---------------------------------------------------------------------------
.text:0000000000002FD2                 align 8
.text:0000000000002FD8
.text:0000000000002FD8 loc_2FD8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002FD8                                         ; DATA XREF: .rodata:jpt_2F9A↓o
.text:0000000000002FD8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000002FDD                 xor     r10d, r10d
.text:0000000000002FE0                 mov     ebx, 6Eh ; 'n'
.text:0000000000002FE5                 jmp     loc_2D42
.text:0000000000002FE5 ; ---------------------------------------------------------------------------
.text:0000000000002FEA                 align 10h
.text:0000000000002FF0
.text:0000000000002FF0 loc_2FF0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002FF0                                         ; DATA XREF: .rodata:jpt_2F9A↓o
.text:0000000000002FF0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002FF5                 jmp     loc_2DC0
.text:0000000000002FF5 ; ---------------------------------------------------------------------------
.text:0000000000002FFA                 align 20h
.text:0000000000003000
.text:0000000000003000 loc_3000:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003000                                         ; DATA XREF: .rodata:jpt_2F9A↓o
.text:0000000000003000                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003003
.text:0000000000003003 loc_3003:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003003                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003008                 setz    dl
.text:000000000000300B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003010                 jnz     loc_3BAA
.text:0000000000003016                 mov     eax, r8d
.text:0000000000003019                 mov     rcx, r15
.text:000000000000301C                 xor     eax, 1
.text:000000000000301F                 and     al, dl
.text:0000000000003021                 jz      short loc_3050
.text:0000000000003023                 cmp     r13, r15
.text:0000000000003026                 jbe     short loc_302D
.text:0000000000003028                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000302D
.text:000000000000302D loc_302D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000302D                 lea     rcx, [r15+1]
.text:0000000000003031                 cmp     r13, rcx
.text:0000000000003034                 jbe     short loc_303C
.text:0000000000003036                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000303C
.text:000000000000303C loc_303C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000303C                 lea     rcx, [r15+2]
.text:0000000000003040                 cmp     r13, rcx
.text:0000000000003043                 ja      loc_3679
.text:0000000000003049
.text:0000000000003049 loc_3049:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003049                 lea     rcx, [r15+3]
.text:000000000000304D                 mov     r8d, eax
.text:0000000000003050
.text:0000000000003050 loc_3050:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003050                 cmp     r13, rcx
.text:0000000000003053                 jbe     short loc_305A
.text:0000000000003055                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000305A
.text:000000000000305A loc_305A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000305A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000305F                 lea     r15, [rcx+1]
.text:0000000000003063                 jz      loc_3669
.text:0000000000003069                 lea     rax, [rbp+1]
.text:000000000000306D                 cmp     rax, r11
.text:0000000000003070                 jnb     short loc_308B
.text:0000000000003072                 mov     rax, [rsp+0E8h+s]
.text:0000000000003077                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000307C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003080                 sub     eax, 30h ; '0'
.text:0000000000003083                 cmp     al, 9
.text:0000000000003085                 jbe     loc_38B9
.text:000000000000308B
.text:000000000000308B loc_308B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000308B                 mov     eax, r12d
.text:000000000000308E                 mov     ebx, 30h ; '0'
.text:0000000000003093                 xor     r12d, r12d
.text:0000000000003096                 jmp     loc_2C48
.text:0000000000003096 ; ---------------------------------------------------------------------------
.text:000000000000309B                 align 20h
.text:00000000000030A0
.text:00000000000030A0 loc_30A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000030A0                                         ; DATA XREF: .rodata:jpt_2F9A↓o
.text:00000000000030A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000030A5                 mov     r12d, r10d
.text:00000000000030A8                 setz    dl
.text:00000000000030AB                 xor     r10d, r10d
.text:00000000000030AE                 xor     eax, eax
.text:00000000000030B0                 jmp     loc_2C48
.text:00000000000030B0 ; ---------------------------------------------------------------------------
.text:00000000000030B5                 align 8
.text:00000000000030B8
.text:00000000000030B8 loc_30B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000030B8                                         ; DATA XREF: .rodata:jpt_2F9A↓o
.text:00000000000030B8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000030BD                 setz    dl
.text:00000000000030C0                 xor     r10d, r10d
.text:00000000000030C3                 jmp     loc_2E88
.text:00000000000030C3 ; ---------------------------------------------------------------------------
.text:00000000000030C8                 align 10h
.text:00000000000030D0
.text:00000000000030D0 loc_30D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000030D0                                         ; DATA XREF: .rodata:jpt_2F9A↓o
.text:00000000000030D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000030D5                 setz    dl
.text:00000000000030D8                 xor     r10d, r10d
.text:00000000000030DB                 xor     r12d, r12d
.text:00000000000030DE                 jmp     loc_2E91
.text:00000000000030DE ; ---------------------------------------------------------------------------
.text:00000000000030E3                 align 8
.text:00000000000030E8
.text:00000000000030E8 loc_30E8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000030E8                                         ; DATA XREF: .rodata:jpt_2F9A↓o
.text:00000000000030E8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000030ED                 mov     r12d, r10d
.text:00000000000030F0                 mov     ebx, 20h ; ' '
.text:00000000000030F5                 setz    dl
.text:00000000000030F8                 xor     r10d, r10d
.text:00000000000030FB                 jmp     loc_2E91
.text:0000000000003100 ; ---------------------------------------------------------------------------
.text:0000000000003100
.text:0000000000003100 loc_3100:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003100                                         ; DATA XREF: .rodata:jpt_2F9A↓o
.text:0000000000003100                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003105                 xor     r10d, r10d
.text:0000000000003108                 mov     ebx, 72h ; 'r'
.text:000000000000310D                 jmp     loc_2D42
.text:000000000000310D ; ---------------------------------------------------------------------------
.text:0000000000003112                 align 8
.text:0000000000003118
.text:0000000000003118 loc_3118:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003118                                         ; DATA XREF: .rodata:jpt_2F9A↓o
.text:0000000000003118                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000311D                 jmp     loc_2DC0
.text:000000000000311D ; ---------------------------------------------------------------------------
.text:0000000000003122                 align 8
.text:0000000000003128
.text:0000000000003128 loc_3128:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003128                                         ; DATA XREF: .rodata:jpt_2F9A↓o
.text:0000000000003128                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000312D                 xor     r10d, r10d
.text:0000000000003130                 mov     ebx, 74h ; 't'
.text:0000000000003135                 jmp     loc_2D42
.text:0000000000003135 ; ---------------------------------------------------------------------------
.text:000000000000313A                 align 20h
.text:0000000000003140
.text:0000000000003140 loc_3140:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003140                                         ; DATA XREF: .rodata:jpt_2F9A↓o
.text:0000000000003140                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003145                 jmp     loc_2DC0
.text:0000000000003145 ; ---------------------------------------------------------------------------
.text:000000000000314A                 align 10h
.text:0000000000003150
.text:0000000000003150 loc_3150:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003150                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003150                 xor     r10d, r10d
.text:0000000000003153                 jmp     loc_2BF0
.text:0000000000003153 ; ---------------------------------------------------------------------------
.text:0000000000003158                 align 20h
.text:0000000000003160
.text:0000000000003160 loc_3160:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003160                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003165                 jnz     loc_3AD0
.text:000000000000316B
.text:000000000000316B loc_316B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000316B                 add     rbp, 1
.text:000000000000316F                 mov     eax, r8d
.text:0000000000003172                 xor     r12d, r12d
.text:0000000000003175                 mov     ebx, 5Ch ; '\'
.text:000000000000317A                 jmp     loc_2C8C
.text:000000000000317A ; ---------------------------------------------------------------------------
.text:000000000000317F                 align 20h
.text:0000000000003180
.text:0000000000003180 loc_3180:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003180                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003185                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000318A                 mov     r12d, r8d
.text:000000000000318D                 mov     rbp, r11
.text:0000000000003190                 setz    dl
.text:0000000000003193                 mov     eax, ebx
.text:0000000000003195                 test    r15, r15
.text:0000000000003198                 setz    cl
.text:000000000000319B                 and     eax, edx
.text:000000000000319D                 and     al, cl
.text:000000000000319F                 jnz     loc_3C06
.text:00000000000031A5                 mov     eax, ebx
.text:00000000000031A7                 xor     eax, 1
.text:00000000000031AA                 and     dl, al
.text:00000000000031AC                 jz      loc_3B1C
.text:00000000000031B2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000031B7                 jz      loc_3B1A
.text:00000000000031BD                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000031C2                 jnz     loc_3BBD
.text:00000000000031C8                 test    r13, r13
.text:00000000000031CB                 setz    al
.text:00000000000031CE                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000031D4                 setnz   dl
.text:00000000000031D7                 and     al, dl
.text:00000000000031D9                 jz      loc_3BFC
.text:00000000000031DF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000031E4
.text:00000000000031E4 loc_31E4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000031E4                 lea     rbx, asc_56ED   ; "'"
.text:00000000000031EB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000031EF                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000031F7                 mov     r15d, 1
.text:00000000000031FD                 mov     [rsp+0E8h+n], 1
.text:0000000000003206                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000320B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003210                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003214                 jmp     loc_2AF3
.text:0000000000003214 ; ---------------------------------------------------------------------------
.text:0000000000003219                 align 20h
.text:0000000000003220
.text:0000000000003220 loc_3220:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003220                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003225                 jnz     loc_3AD0
.text:000000000000322B                 test    r13, r13
.text:000000000000322E                 jz      loc_3630
.text:0000000000003234                 xor     edx, edx
.text:0000000000003236                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000323C                 jnz     loc_3630
.text:0000000000003242
.text:0000000000003242 loc_3242:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003242                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003242                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003247                 add     r15, 3
.text:000000000000324B                 xor     eax, eax
.text:000000000000324D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003252                 xor     r8d, r8d
.text:0000000000003255                 mov     r13, rdx
.text:0000000000003258                 mov     ebx, 27h ; '''
.text:000000000000325D                 jmp     loc_2C79
.text:000000000000325D ; ---------------------------------------------------------------------------
.text:0000000000003262                 align 8
.text:0000000000003268
.text:0000000000003268 loc_3268:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003268                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000326D                 jz      short loc_3290
.text:000000000000326F                 lea     rcx, [rbp+2]
.text:0000000000003273                 cmp     rcx, r11
.text:0000000000003276                 jnb     short loc_3290
.text:0000000000003278                 mov     rax, [rsp+0E8h+s]
.text:000000000000327D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000003282                 jz      loc_3A12
.text:0000000000003288                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003290
.text:0000000000003290 loc_3290:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003290                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003290                 xor     edx, edx
.text:0000000000003292                 xor     r12d, r12d
.text:0000000000003295                 xor     eax, eax
.text:0000000000003297                 mov     ebx, 3Fh ; '?'
.text:000000000000329C                 jmp     loc_2C48
.text:000000000000329C ; ---------------------------------------------------------------------------
.text:00000000000032A1                 align 8
.text:00000000000032A8
.text:00000000000032A8 loc_32A8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000032A8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000032AD                 jnz     loc_3AD0
.text:00000000000032B3                 xor     r12d, r12d
.text:00000000000032B6                 xor     eax, eax
.text:00000000000032B8                 mov     ebx, 3Fh ; '?'
.text:00000000000032BD                 jmp     loc_2C79
.text:00000000000032BD ; ---------------------------------------------------------------------------
.text:00000000000032C2                 align 8
.text:00000000000032C8
.text:00000000000032C8 loc_32C8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000032C8                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000032D0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000032D4                 mov     [rsp+0E8h+var_48], 0
.text:00000000000032E0                 mov     [rsp+0E8h+ps], rax
.text:00000000000032E5                 jnz     short loc_3314
.text:00000000000032E7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000032EC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:00000000000032F1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:00000000000032F6                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000032FB                 call    _strlen
.text:0000000000003300                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003306                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000330C                 mov     r11, rax
.text:000000000000330F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003314
.text:0000000000003314 loc_3314:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003314                 lea     rax, [rsp+0E8h+wc]
.text:000000000000331C                 xor     ecx, ecx
.text:000000000000331E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003322                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003327                 mov     rbx, rcx
.text:000000000000332A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003332                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003337                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000333C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003344                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003349                 mov     [rsp+0E8h+var_78], r13
.text:000000000000334E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003353
.text:0000000000003353 loc_3353:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003353                 mov     rax, [rsp+0E8h+s]
.text:0000000000003358                 lea     r14, [rbp+rbx+0]
.text:000000000000335D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003362                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003367                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000336C                 lea     r13, [rax+r14]
.text:0000000000003370                 sub     rdx, r14
.text:0000000000003373                 mov     rsi, r13
.text:0000000000003376                 call    rpl_mbrtowc
.text:000000000000337B                 test    rax, rax
.text:000000000000337E                 mov     r15, rax
.text:0000000000003381                 jz      short loc_33D1
.text:0000000000003383                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003387                 jz      loc_39A5
.text:000000000000338D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003391                 jz      loc_3931
.text:0000000000003397                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000339C                 setz    al
.text:000000000000339F                 and     al, [rsp+0E8h+var_D9]
.text:00000000000033A3                 jnz     loc_3540
.text:00000000000033A9
.text:00000000000033A9 loc_33A9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000033A9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000033A9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000033B0                 call    _iswprint
.text:00000000000033B5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000033BA                 test    eax, eax
.text:00000000000033BC                 mov     eax, 0
.text:00000000000033C1                 cmovz   r12d, eax
.text:00000000000033C5                 add     rbx, r15
.text:00000000000033C8                 call    _mbsinit
.text:00000000000033CD                 test    eax, eax
.text:00000000000033CF                 jz      short loc_3353
.text:00000000000033D1
.text:00000000000033D1 loc_33D1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:00000000000033D1                 mov     edx, r12d
.text:00000000000033D4                 mov     rdi, rbx
.text:00000000000033D7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000033DD                 xor     edx, 1
.text:00000000000033E0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000033E5                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000033EB                 and     dl, [rsp+0E8h+var_DB]
.text:00000000000033EF                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000033F7                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000033FC                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003401                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003406
.text:0000000000003406 loc_3406:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003406                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003406                 cmp     rdi, 1
.text:000000000000340A                 jbe     loc_3A0B
.text:0000000000003410
.text:0000000000003410 loc_3410:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003410                 mov     rcx, rdi
.text:0000000000003413                 xor     esi, esi
.text:0000000000003415                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000341B                 add     rcx, rbp
.text:000000000000341E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003423                 jmp     loc_34DE
.text:0000000000003423 ; ---------------------------------------------------------------------------
.text:0000000000003428                 align 10h
.text:0000000000003430
.text:0000000000003430 loc_3430:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003430                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003435                 setz    al
.text:0000000000003438                 test    r9b, r9b
.text:000000000000343B                 jnz     loc_38F0
.text:0000000000003441                 mov     esi, r8d
.text:0000000000003444                 xor     esi, 1
.text:0000000000003447                 and     al, sil
.text:000000000000344A                 jz      short loc_347B
.text:000000000000344C                 cmp     r13, r15
.text:000000000000344F                 jbe     short loc_3456
.text:0000000000003451                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003456
.text:0000000000003456 loc_3456:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003456                 lea     rsi, [r15+1]
.text:000000000000345A                 cmp     r13, rsi
.text:000000000000345D                 jbe     short loc_3465
.text:000000000000345F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003465
.text:0000000000003465 loc_3465:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003465                 lea     rsi, [r15+2]
.text:0000000000003469                 cmp     r13, rsi
.text:000000000000346C                 jbe     short loc_3474
.text:000000000000346E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003474
.text:0000000000003474 loc_3474:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000003474                 add     r15, 3
.text:0000000000003478                 mov     r8d, eax
.text:000000000000347B
.text:000000000000347B loc_347B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000347B                 cmp     r13, r15
.text:000000000000347E                 jbe     short loc_3485
.text:0000000000003480                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003485
.text:0000000000003485 loc_3485:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000003485                 lea     rax, [r15+1]
.text:0000000000003489                 cmp     r13, rax
.text:000000000000348C                 jbe     short loc_349B
.text:000000000000348E                 mov     eax, ebx
.text:0000000000003490                 shr     al, 6
.text:0000000000003493                 add     eax, 30h ; '0'
.text:0000000000003496                 mov     [r14+r15+1], al
.text:000000000000349B
.text:000000000000349B loc_349B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000349B                 lea     rax, [r15+2]
.text:000000000000349F                 cmp     r13, rax
.text:00000000000034A2                 jbe     short loc_34B4
.text:00000000000034A4                 mov     eax, ebx
.text:00000000000034A6                 shr     al, 3
.text:00000000000034A9                 and     eax, 7
.text:00000000000034AC                 add     eax, 30h ; '0'
.text:00000000000034AF                 mov     [r14+r15+2], al
.text:00000000000034B4
.text:00000000000034B4 loc_34B4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:00000000000034B4                 and     ebx, 7
.text:00000000000034B7                 add     rbp, 1
.text:00000000000034BB                 add     r15, 3
.text:00000000000034BF                 add     ebx, 30h ; '0'
.text:00000000000034C2                 cmp     rbp, rcx
.text:00000000000034C5                 jnb     loc_2CB0
.text:00000000000034CB                 mov     esi, edx
.text:00000000000034CD
.text:00000000000034CD loc_34CD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000034CD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000034CD                 cmp     r13, r15
.text:00000000000034D0                 jbe     short loc_34D6
.text:00000000000034D2                 mov     [r14+r15], bl
.text:00000000000034D6
.text:00000000000034D6 loc_34D6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:00000000000034D6                 movzx   ebx, byte ptr [rdi+rbp]
.text:00000000000034DA                 add     r15, 1
.text:00000000000034DE
.text:00000000000034DE loc_34DE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:00000000000034DE                 test    dl, dl
.text:00000000000034E0                 jnz     loc_3430
.text:00000000000034E6                 mov     eax, esi
.text:00000000000034E8                 xor     eax, 1
.text:00000000000034EB                 and     eax, r8d
.text:00000000000034EE                 test    r10b, r10b
.text:00000000000034F1                 jz      short loc_3501
.text:00000000000034F3                 cmp     r13, r15
.text:00000000000034F6                 jbe     short loc_34FD
.text:00000000000034F8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000034FD
.text:00000000000034FD loc_34FD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000034FD                 add     r15, 1
.text:0000000000003501
.text:0000000000003501 loc_3501:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003501                 add     rbp, 1
.text:0000000000003505                 cmp     rbp, rcx
.text:0000000000003508                 jnb     loc_2C8C
.text:000000000000350E                 test    al, al
.text:0000000000003510                 jz      loc_390E
.text:0000000000003516                 cmp     r13, r15
.text:0000000000003519                 jbe     short loc_3520
.text:000000000000351B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003520
.text:0000000000003520 loc_3520:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003520                 lea     rax, [r15+1]
.text:0000000000003524                 cmp     r13, rax
.text:0000000000003527                 jbe     short loc_352F
.text:0000000000003529                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000352F
.text:000000000000352F loc_352F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000352F                 add     r15, 2
.text:0000000000003533                 xor     r10d, r10d
.text:0000000000003536                 xor     r8d, r8d
.text:0000000000003539                 jmp     short loc_34CD
.text:0000000000003539 ; ---------------------------------------------------------------------------
.text:000000000000353B                 align 20h
.text:0000000000003540
.text:0000000000003540 loc_3540:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003540                 cmp     r15, 1
.text:0000000000003544                 jz      loc_33A9
.text:000000000000354A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000354F                 lea     rcx, [rdi+r15]
.text:0000000000003553                 lea     rdx, [rdi+r14+1]
.text:0000000000003558                 lea     r8, [rcx+r14]
.text:000000000000355C                 jmp     short loc_356D
.text:000000000000355C ; ---------------------------------------------------------------------------
.text:000000000000355E                 align 20h
.text:0000000000003560
.text:0000000000003560 loc_3560:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003560                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003560                 add     rdx, 1
.text:0000000000003564                 cmp     r8, rdx
.text:0000000000003567                 jz      loc_33A9
.text:000000000000356D
.text:000000000000356D loc_356D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000356D                 movzx   ecx, byte ptr [rdx]
.text:0000000000003570                 sub     ecx, 5Bh ; '['
.text:0000000000003573                 cmp     cl, 21h ; '!'
.text:0000000000003576                 ja      short loc_3560
.text:0000000000003578                 mov     esi, 1
.text:000000000000357D                 shl     rsi, cl
.text:0000000000003580                 mov     rcx, rsi
.text:0000000000003583                 mov     rsi, 20000002Bh
.text:000000000000358D                 test    rcx, rsi
.text:0000000000003590                 jz      short loc_3560
.text:0000000000003592                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003597                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000359C                 mov     rbp, [rsp+0E8h+var_B8]
.text:00000000000035A1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000035A9
.text:00000000000035A9 loc_35A9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:00000000000035A9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:00000000000035A9                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000035AE                 jz      short loc_35C0
.text:00000000000035B0                 test    al, al
.text:00000000000035B2                 mov     eax, 4
.text:00000000000035B7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000035BC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000035C0
.text:00000000000035C0 loc_35C0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000035C0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000035C0                 sub     rsp, 8
.text:00000000000035C4                 mov     rcx, rbp
.text:00000000000035C7                 mov     rsi, r13
.text:00000000000035CA                 push    [rsp+0F0h+var_88]
.text:00000000000035CE                 push    [rsp+0F8h+var_80]
.text:00000000000035D2                 mov     rdi, r14
.text:00000000000035D5                 push    0
.text:00000000000035D7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000035DF                 mov     r8d, [rsp+108h+var_E0]
.text:00000000000035E4                 mov     rdx, [rsp+108h+s]
.text:00000000000035E9                 and     r9d, 0FFFFFFFDh
.text:00000000000035ED                 call    quotearg_buffer_restyled
.text:00000000000035F2                 add     rsp, 20h
.text:00000000000035F6                 mov     r15, rax
.text:00000000000035F9
.text:00000000000035F9 loc_35F9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:00000000000035F9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:00000000000035F9                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003601                 xor     rbx, fs:28h
.text:000000000000360A                 mov     rax, r15
.text:000000000000360D                 jnz     loc_3C13
.text:0000000000003613                 add     rsp, 0B8h
.text:000000000000361A                 pop     rbx
.text:000000000000361B                 pop     rbp
.text:000000000000361C                 pop     r12
.text:000000000000361E                 pop     r13
.text:0000000000003620                 pop     r14
.text:0000000000003622                 pop     r15
.text:0000000000003624                 retn
.text:0000000000003624 ; ---------------------------------------------------------------------------
.text:0000000000003625                 align 8
.text:0000000000003628
.text:0000000000003628 loc_3628:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003628                 mov     rbp, r11
.text:000000000000362B                 jmp     loc_35A9
.text:0000000000003630 ; ---------------------------------------------------------------------------
.text:0000000000003630
.text:0000000000003630 loc_3630:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003630                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003630                 cmp     r13, r15
.text:0000000000003633                 jbe     short loc_363A
.text:0000000000003635                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000363A
.text:000000000000363A loc_363A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000363A                 lea     rax, [r15+1]
.text:000000000000363E                 cmp     r13, rax
.text:0000000000003641                 jbe     short loc_3649
.text:0000000000003643                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003649
.text:0000000000003649 loc_3649:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003649                 lea     rax, [r15+2]
.text:000000000000364D                 cmp     r13, rax
.text:0000000000003650                 jbe     loc_3C42
.text:0000000000003656                 mov     rdx, r13
.text:0000000000003659                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000365F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003664                 jmp     loc_3242
.text:0000000000003669 ; ---------------------------------------------------------------------------
.text:0000000000003669
.text:0000000000003669 loc_3669:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003669                 mov     eax, r12d
.text:000000000000366C                 mov     ebx, 30h ; '0'
.text:0000000000003671                 xor     r12d, r12d
.text:0000000000003674                 jmp     loc_2C79
.text:0000000000003679 ; ---------------------------------------------------------------------------
.text:0000000000003679
.text:0000000000003679 loc_3679:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000003679                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000367F                 jmp     loc_3049
.text:0000000000003684 ; ---------------------------------------------------------------------------
.text:0000000000003684
.text:0000000000003684 loc_3684:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003684                                         ; DATA XREF: .rodata:jpt_2AB1↓o
.text:0000000000003684                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000003686                 jnz     loc_2AB3        ; jumptable 00000000000121F1 case 1
.text:000000000000368C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003691
.text:0000000000003691 loc_3691:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000003691                 test    r13, r13
.text:0000000000003694                 jnz     loc_3C2A
.text:000000000000369A                 lea     rax, asc_56ED   ; "'"
.text:00000000000036A1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000036AA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000036AF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000036B4                 xor     r12d, r12d
.text:00000000000036B7                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000036BC                 mov     [rsp+0E8h+n], 1
.text:00000000000036C5                 mov     [rsp+0E8h+s2], rax
.text:00000000000036CA                 mov     r15d, 1
.text:00000000000036D0                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000036D8                 jmp     loc_2AF3
.text:00000000000036D8 ; ---------------------------------------------------------------------------
.text:00000000000036DD                 align 20h
.text:00000000000036E0
.text:00000000000036E0 loc_36E0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000036E0                                         ; DATA XREF: .rodata:jpt_2AB1↓o
.text:00000000000036E0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:00000000000036E2                 jnz     loc_3ADD
.text:00000000000036E8                 test    r13, r13
.text:00000000000036EB                 jz      loc_3916
.text:00000000000036F1                 mov     byte ptr [r14], 22h ; '"'
.text:00000000000036F5                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000036FA                 xor     r12d, r12d
.text:00000000000036FD                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003702                 mov     [rsp+0E8h+var_98], 0
.text:000000000000370B
.text:000000000000370B loc_370B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000370B                 lea     rax, unk_56EB
.text:0000000000003712                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003717                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000371C                 mov     [rsp+0E8h+n], 1
.text:0000000000003725                 mov     r15d, 1
.text:000000000000372B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003730                 jmp     loc_2AF3
.text:0000000000003735 ; ---------------------------------------------------------------------------
.text:0000000000003735
.text:0000000000003735 loc_3735:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003735                                         ; DATA XREF: .rodata:jpt_2AB1↓o
.text:0000000000003735                 lea     rax, unk_56EB   ; jumptable 00000000000121F1 case 6
.text:000000000000373C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003741                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003746                 xor     r12d, r12d
.text:0000000000003749                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003752                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003757                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000375C                 mov     [rsp+0E8h+n], 1
.text:0000000000003765                 xor     r15d, r15d
.text:0000000000003768                 mov     [rsp+0E8h+s2], rax
.text:000000000000376D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000003775                 jmp     loc_2AF3
.text:000000000000377A ; ---------------------------------------------------------------------------
.text:000000000000377A
.text:000000000000377A loc_377A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000377A                                         ; DATA XREF: .rodata:jpt_2AB1↓o
.text:000000000000377A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000377F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003784                 xor     r12d, r12d
.text:0000000000003787                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003790                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003795                 xor     r15d, r15d
.text:0000000000003798                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000379D                 mov     [rsp+0E8h+n], 0
.text:00000000000037A6                 mov     [rsp+0E8h+s2], 0
.text:00000000000037AF                 jmp     loc_2AF3
.text:00000000000037B4 ; ---------------------------------------------------------------------------
.text:00000000000037B4
.text:00000000000037B4 loc_37B4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000037B4                                         ; DATA XREF: .rodata:jpt_2AB1↓o
.text:00000000000037B4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:00000000000037B9                 jz      short loc_3811
.text:00000000000037BB                 lea     rsi, asc_56EF   ; "`"
.text:00000000000037C2                 xor     edi, edi        ; domainname
.text:00000000000037C4                 mov     edx, 5          ; category
.text:00000000000037C9                 call    _dcgettext
.text:00000000000037CE                 mov     rcx, rax
.text:00000000000037D1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000037D6                 lea     rax, asc_56EF   ; "`"
.text:00000000000037DD                 cmp     rcx, rax
.text:00000000000037E0                 jz      loc_3B7E
.text:00000000000037E6
.text:00000000000037E6 loc_37E6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:00000000000037E6                 lea     rsi, asc_56ED   ; "'"
.text:00000000000037ED                 xor     edi, edi        ; domainname
.text:00000000000037EF                 mov     edx, 5          ; category
.text:00000000000037F4                 call    _dcgettext
.text:00000000000037F9                 mov     rcx, rax
.text:00000000000037FC                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003801                 lea     rax, asc_56ED   ; "'"
.text:0000000000003808                 cmp     rcx, rax
.text:000000000000380B                 jz      loc_3B94
.text:0000000000003811
.text:0000000000003811 loc_3811:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003811                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003811                 xor     r15d, r15d
.text:0000000000003814                 test    ebx, ebx
.text:0000000000003816                 jz      loc_39DD
.text:000000000000381C
.text:000000000000381C loc_381C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000381C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000381C                 test    ebx, ebx
.text:000000000000381E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003823                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003828                 xor     r12d, r12d
.text:000000000000382B                 mov     rdi, rbx        ; s
.text:000000000000382E                 call    _strlen
.text:0000000000003833                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003838                 mov     [rsp+0E8h+n], rax
.text:000000000000383D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003842                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003847                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003850                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003855                 jmp     loc_2AF3
.text:000000000000385A ; ---------------------------------------------------------------------------
.text:000000000000385A
.text:000000000000385A loc_385A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000385A                                         ; DATA XREF: .rodata:jpt_2AB1↓o
.text:000000000000385A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000385F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003864                 xor     r12d, r12d
.text:0000000000003867                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003870                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003875                 xor     r15d, r15d
.text:0000000000003878                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000387D                 mov     [rsp+0E8h+n], 0
.text:0000000000003886                 mov     [rsp+0E8h+s2], 0
.text:000000000000388F                 jmp     loc_2AF3
.text:0000000000003894 ; ---------------------------------------------------------------------------
.text:0000000000003894
.text:0000000000003894 loc_3894:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003894                                         ; DATA XREF: .rodata:jpt_2AB1↓o
.text:0000000000003894                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003899                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000389E                 xor     r12d, r12d
.text:00000000000038A1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000038AA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000038AF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000038B4                 jmp     loc_2AD3
.text:00000000000038B9 ; ---------------------------------------------------------------------------
.text:00000000000038B9
.text:00000000000038B9 loc_38B9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:00000000000038B9                 cmp     r13, r15
.text:00000000000038BC                 jbe     short loc_38C3
.text:00000000000038BE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:00000000000038C3
.text:00000000000038C3 loc_38C3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:00000000000038C3                 lea     rax, [rcx+2]
.text:00000000000038C7                 cmp     r13, rax
.text:00000000000038CA                 jbe     short loc_38D2
.text:00000000000038CC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:00000000000038D2
.text:00000000000038D2 loc_38D2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:00000000000038D2                 mov     eax, r12d
.text:00000000000038D5                 lea     r15, [rcx+3]
.text:00000000000038D9                 xor     r12d, r12d
.text:00000000000038DC                 mov     ebx, 30h ; '0'
.text:00000000000038E1                 jmp     loc_2C48
.text:00000000000038E1 ; ---------------------------------------------------------------------------
.text:00000000000038E6                 align 10h
.text:00000000000038F0
.text:00000000000038F0 loc_38F0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:00000000000038F0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000038F5                 mov     rbp, r11
.text:00000000000038F8                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000038FC                 jmp     loc_35A9
.text:0000000000003901 ; ---------------------------------------------------------------------------
.text:0000000000003901
.text:0000000000003901 loc_3901:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003901                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003906                 xor     r12d, r12d
.text:0000000000003909                 jmp     loc_3410
.text:000000000000390E ; ---------------------------------------------------------------------------
.text:000000000000390E
.text:000000000000390E loc_390E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000390E                 xor     r10d, r10d
.text:0000000000003911                 jmp     loc_34CD
.text:0000000000003916 ; ---------------------------------------------------------------------------
.text:0000000000003916
.text:0000000000003916 loc_3916:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003916                 mov     [rsp+0E8h+var_98], 0
.text:000000000000391F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003924                 xor     r12d, r12d
.text:0000000000003927                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000392C                 jmp     loc_370B
.text:0000000000003931 ; ---------------------------------------------------------------------------
.text:0000000000003931
.text:0000000000003931 loc_3931:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003931                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003936                 mov     rsi, r14
.text:0000000000003939                 mov     rcx, r13
.text:000000000000393C                 mov     rax, rbx
.text:000000000000393F                 mov     rdi, rbx
.text:0000000000003942                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003948                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000394D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003955                 cmp     rsi, r11
.text:0000000000003958                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000395E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003966                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000396B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003970                 jnb     short loc_3998
.text:0000000000003972                 cmp     byte ptr [rcx], 0
.text:0000000000003975                 jnz     short loc_3987
.text:0000000000003977                 jmp     short loc_3998
.text:0000000000003977 ; ---------------------------------------------------------------------------
.text:0000000000003979                 align 20h
.text:0000000000003980
.text:0000000000003980 loc_3980:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003980                 cmp     byte ptr [r9+rax], 0
.text:0000000000003985                 jz      short loc_3995
.text:0000000000003987
.text:0000000000003987 loc_3987:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003987                 add     rax, 1
.text:000000000000398B                 lea     rdx, [rbp+rax+0]
.text:0000000000003990                 cmp     r11, rdx
.text:0000000000003993                 ja      short loc_3980
.text:0000000000003995
.text:0000000000003995 loc_3995:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003995                 mov     rdi, rax
.text:0000000000003998
.text:0000000000003998 loc_3998:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003998                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003998                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000399D                 xor     r12d, r12d
.text:00000000000039A0                 jmp     loc_3406
.text:00000000000039A5 ; ---------------------------------------------------------------------------
.text:00000000000039A5
.text:00000000000039A5 loc_39A5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:00000000000039A5                 mov     rdi, rbx
.text:00000000000039A8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000039AE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000039B3                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000039B9                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000039C1                 xor     r12d, r12d
.text:00000000000039C4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000039C9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000039CE                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000039D3                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000039D8                 jmp     loc_3406
.text:00000000000039DD ; ---------------------------------------------------------------------------
.text:00000000000039DD
.text:00000000000039DD loc_39DD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:00000000000039DD                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000039E2                 movzx   eax, byte ptr [rdx]
.text:00000000000039E5                 test    al, al
.text:00000000000039E7                 jz      loc_381C
.text:00000000000039ED                 nop     dword ptr [rax]
.text:00000000000039F0
.text:00000000000039F0 loc_39F0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000039F0                 cmp     r13, r15
.text:00000000000039F3                 jbe     short loc_39F9
.text:00000000000039F5                 mov     [r14+r15], al
.text:00000000000039F9
.text:00000000000039F9 loc_39F9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000039F9                 add     r15, 1
.text:00000000000039FD                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003A02                 test    al, al
.text:0000000000003A04                 jnz     short loc_39F0
.text:0000000000003A06                 jmp     loc_381C
.text:0000000000003A0B ; ---------------------------------------------------------------------------
.text:0000000000003A0B
.text:0000000000003A0B loc_3A0B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000003A0B                 mov     eax, edx
.text:0000000000003A0D                 jmp     loc_2F67
.text:0000000000003A12 ; ---------------------------------------------------------------------------
.text:0000000000003A12
.text:0000000000003A12 loc_3A12:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003A12                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003A16                 cmp     bl, 3Eh ; '>'
.text:0000000000003A19                 ja      loc_3290
.text:0000000000003A1F                 mov     rax, 7000A38200000000h
.text:0000000000003A29                 bt      rax, rbx
.text:0000000000003A2D                 jnb     loc_3290
.text:0000000000003A33                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003A38                 jnz     loc_3C22
.text:0000000000003A3E                 cmp     r13, r15
.text:0000000000003A41                 jbe     short loc_3A48
.text:0000000000003A43                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003A48
.text:0000000000003A48 loc_3A48:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003A48                 lea     rax, [r15+1]
.text:0000000000003A4C                 cmp     r13, rax
.text:0000000000003A4F                 jbe     short loc_3A57
.text:0000000000003A51                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003A57
.text:0000000000003A57 loc_3A57:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003A57                 lea     rax, [r15+2]
.text:0000000000003A5B                 cmp     r13, rax
.text:0000000000003A5E                 jbe     short loc_3A66
.text:0000000000003A60                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003A66
.text:0000000000003A66 loc_3A66:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003A66                 lea     rax, [r15+3]
.text:0000000000003A6A                 cmp     r13, rax
.text:0000000000003A6D                 jbe     short loc_3A75
.text:0000000000003A6F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003A75
.text:0000000000003A75 loc_3A75:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003A75                 add     r15, 4
.text:0000000000003A79                 xor     edx, edx
.text:0000000000003A7B                 xor     r12d, r12d
.text:0000000000003A7E                 xor     eax, eax
.text:0000000000003A80                 mov     rbp, rcx
.text:0000000000003A83                 jmp     loc_2C48
.text:0000000000003A88 ; ---------------------------------------------------------------------------
.text:0000000000003A88
.text:0000000000003A88 loc_3A88:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003A88                                         ; DATA XREF: .rodata:jpt_2AB1↓o
.text:0000000000003A88                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000003A8A                 jz      loc_3C18
.text:0000000000003A90                 lea     rax, asc_56ED   ; "'"
.text:0000000000003A97                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003A9C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003AA1                 xor     r12d, r12d
.text:0000000000003AA4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003AAD                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003AB2                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003AB7                 mov     [rsp+0E8h+n], 1
.text:0000000000003AC0                 xor     r15d, r15d
.text:0000000000003AC3                 mov     [rsp+0E8h+s2], rax
.text:0000000000003AC8                 jmp     loc_2AF3
.text:0000000000003AC8 ; ---------------------------------------------------------------------------
.text:0000000000003ACD                 align 10h
.text:0000000000003AD0
.text:0000000000003AD0 loc_3AD0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003AD0                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003AD0                 mov     rbp, r11
.text:0000000000003AD3                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003AD8                 jmp     loc_35A9
.text:0000000000003ADD ; ---------------------------------------------------------------------------
.text:0000000000003ADD
.text:0000000000003ADD loc_3ADD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000003ADD                 lea     rax, unk_56EB
.text:0000000000003AE4                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003AE9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003AEE                 xor     r12d, r12d
.text:0000000000003AF1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003AFA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003AFF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003B04                 mov     [rsp+0E8h+n], 1
.text:0000000000003B0D                 xor     r15d, r15d
.text:0000000000003B10                 mov     [rsp+0E8h+s2], rax
.text:0000000000003B15                 jmp     loc_2AF3
.text:0000000000003B1A ; ---------------------------------------------------------------------------
.text:0000000000003B1A
.text:0000000000003B1A loc_3B1A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000003B1A                 mov     eax, edx
.text:0000000000003B1C
.text:0000000000003B1C loc_3B1C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000003B1C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000003B1C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003B21                 test    rbx, rbx
.text:0000000000003B24                 jz      short loc_3B52
.text:0000000000003B26                 test    al, al
.text:0000000000003B28                 jz      short loc_3B52
.text:0000000000003B2A                 movzx   ecx, byte ptr [rbx]
.text:0000000000003B2D                 mov     rax, rbx
.text:0000000000003B30                 test    cl, cl
.text:0000000000003B32                 jz      short loc_3B52
.text:0000000000003B34                 mov     rdx, r15
.text:0000000000003B37                 sub     rax, r15
.text:0000000000003B3A
.text:0000000000003B3A loc_3B3A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000003B3A                 cmp     r13, rdx
.text:0000000000003B3D                 jbe     short loc_3B43
.text:0000000000003B3F                 mov     [r14+rdx], cl
.text:0000000000003B43
.text:0000000000003B43 loc_3B43:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003B43                 add     rdx, 1
.text:0000000000003B47                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000003B4B                 test    cl, cl
.text:0000000000003B4D                 jnz     short loc_3B3A
.text:0000000000003B4F                 mov     r15, rdx
.text:0000000000003B52
.text:0000000000003B52 loc_3B52:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003B52                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003B52                 cmp     r13, r15
.text:0000000000003B55                 jbe     loc_35F9
.text:0000000000003B5B                 mov     byte ptr [r14+r15], 0
.text:0000000000003B60                 jmp     loc_35F9
.text:0000000000003B65 ; ---------------------------------------------------------------------------
.text:0000000000003B65
.text:0000000000003B65 loc_3B65:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003B65                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003B6A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003B6F                 mov     rbp, r11
.text:0000000000003B72                 setz    al
.text:0000000000003B75                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003B79                 jmp     loc_35A9
.text:0000000000003B7E ; ---------------------------------------------------------------------------
.text:0000000000003B7E
.text:0000000000003B7E loc_3B7E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000003B7E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003B82                 mov     rdi, rcx
.text:0000000000003B85                 call    gettext_quote
.text:0000000000003B8A                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003B8F                 jmp     loc_37E6
.text:0000000000003B94 ; ---------------------------------------------------------------------------
.text:0000000000003B94
.text:0000000000003B94 loc_3B94:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003B94                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003B98                 mov     rdi, rcx
.text:0000000000003B9B                 call    gettext_quote
.text:0000000000003BA0                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003BA5                 jmp     loc_3811
.text:0000000000003BAA ; ---------------------------------------------------------------------------
.text:0000000000003BAA
.text:0000000000003BAA loc_3BAA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000003BAA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003BAF                 mov     rbp, r11
.text:0000000000003BB2                 mov     eax, edx
.text:0000000000003BB4                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003BB8                 jmp     loc_35A9
.text:0000000000003BBD ; ---------------------------------------------------------------------------
.text:0000000000003BBD
.text:0000000000003BBD loc_3BBD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000003BBD                 sub     rsp, 8
.text:0000000000003BC1                 mov     r8d, 5
.text:0000000000003BC7                 mov     rcx, r11
.text:0000000000003BCA                 push    [rsp+0F0h+var_88]
.text:0000000000003BCE                 push    [rsp+0F8h+var_80]
.text:0000000000003BD2                 mov     rdi, r14
.text:0000000000003BD5                 push    [rsp+100h+var_C8]
.text:0000000000003BD9                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003BE1                 mov     rdx, [rsp+108h+s]
.text:0000000000003BE6                 mov     rsi, [rsp+108h+var_98]
.text:0000000000003BEB                 call    quotearg_buffer_restyled
.text:0000000000003BF0                 add     rsp, 20h
.text:0000000000003BF4                 mov     r15, rax
.text:0000000000003BF7                 jmp     loc_35F9
.text:0000000000003BFC ; ---------------------------------------------------------------------------
.text:0000000000003BFC
.text:0000000000003BFC loc_3BFC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000003BFC                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003C01                 jmp     loc_3B1C
.text:0000000000003C06 ; ---------------------------------------------------------------------------
.text:0000000000003C06
.text:0000000000003C06 loc_3C06:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003C06                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003C0E                 jmp     loc_35A9
.text:0000000000003C13 ; ---------------------------------------------------------------------------
.text:0000000000003C13
.text:0000000000003C13 loc_3C13:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003C13                 call    ___stack_chk_fail
.text:0000000000003C18 ; ---------------------------------------------------------------------------
.text:0000000000003C18
.text:0000000000003C18 loc_3C18:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003C18                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003C1D                 jmp     loc_3691
.text:0000000000003C22 ; ---------------------------------------------------------------------------
.text:0000000000003C22
.text:0000000000003C22 loc_3C22:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003C22                 mov     rbp, r11
.text:0000000000003C25                 jmp     loc_35C0
.text:0000000000003C2A ; ---------------------------------------------------------------------------
.text:0000000000003C2A
.text:0000000000003C2A loc_3C2A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000003C2A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003C2F                 xor     eax, eax
.text:0000000000003C31                 xor     r12d, r12d
.text:0000000000003C34                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003C3D                 jmp     loc_31E4
.text:0000000000003C42 ; ---------------------------------------------------------------------------
.text:0000000000003C42
.text:0000000000003C42 loc_3C42:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003C42                 mov     rdx, r13
.text:0000000000003C45                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003C4A                 jmp     loc_3242
.text:0000000000003C4F ; ---------------------------------------------------------------------------
.text:0000000000003C4F
.text:0000000000003C4F def_2AB1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000003C4F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000003C4F ; } // starts at 2A20
.text:0000000000003C4F quotearg_buffer_restyled endp
.text:0000000000003C4F
.text:0000000000003C4F ; ---------------------------------------------------------------------------
.text:0000000000003C54                 align 20h
.text:0000000000003C60
.text:0000000000003C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C60
.text:0000000000003C60
.text:0000000000003C60 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003C60                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003C60
.text:0000000000003C60 var_50          = qword ptr -50h
.text:0000000000003C60 var_48          = qword ptr -48h
.text:0000000000003C60 var_40          = dword ptr -40h
.text:0000000000003C60 var_3C          = dword ptr -3Ch
.text:0000000000003C60
.text:0000000000003C60 ; __unwind {
.text:0000000000003C60                 push    r15
.text:0000000000003C62                 push    r14
.text:0000000000003C64                 movsxd  r15, edi
.text:0000000000003C67                 push    r13
.text:0000000000003C69                 push    r12
.text:0000000000003C6B                 mov     r14, rdx
.text:0000000000003C6E                 push    rbp
.text:0000000000003C6F                 push    rbx
.text:0000000000003C70                 mov     rbp, rcx
.text:0000000000003C73                 sub     rsp, 28h
.text:0000000000003C77                 mov     [rsp+58h+var_50], rsi
.text:0000000000003C7C                 call    ___errno_location
.text:0000000000003C81                 mov     r13, rax
.text:0000000000003C84                 mov     eax, [rax]
.text:0000000000003C86                 test    r15d, r15d
.text:0000000000003C89                 mov     rbx, cs:slotvec
.text:0000000000003C90                 mov     [rsp+58h+var_40], eax
.text:0000000000003C94                 js      loc_3E01
.text:0000000000003C9A                 cmp     cs:nslots, r15d
.text:0000000000003CA1                 jg      short loc_3D05
.text:0000000000003CA3                 cmp     r15d, 7FFFFFFFh
.text:0000000000003CAA                 jz      loc_3E06
.text:0000000000003CB0                 lea     r12d, [r15+1]
.text:0000000000003CB4                 lea     rax, slotvec0
.text:0000000000003CBB                 movsxd  rsi, r12d
.text:0000000000003CBE                 shl     rsi, 4
.text:0000000000003CC2                 cmp     rbx, rax
.text:0000000000003CC5                 jz      loc_3DE0
.text:0000000000003CCB                 mov     rdi, rbx
.text:0000000000003CCE                 call    xrealloc
.text:0000000000003CD3                 mov     rbx, rax
.text:0000000000003CD6                 mov     cs:slotvec, rax
.text:0000000000003CDD
.text:0000000000003CDD loc_3CDD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000003CDD                 movsxd  rdi, cs:nslots
.text:0000000000003CE4                 mov     edx, r12d
.text:0000000000003CE7                 xor     esi, esi        ; c
.text:0000000000003CE9                 sub     edx, edi
.text:0000000000003CEB                 shl     rdi, 4
.text:0000000000003CEF                 movsxd  rdx, edx
.text:0000000000003CF2                 add     rdi, rbx        ; s
.text:0000000000003CF5                 shl     rdx, 4          ; n
.text:0000000000003CF9                 call    _memset
.text:0000000000003CFE                 mov     cs:nslots, r12d
.text:0000000000003D05
.text:0000000000003D05 loc_3D05:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003D05                 mov     eax, [rbp+4]
.text:0000000000003D08                 shl     r15, 4
.text:0000000000003D0C                 sub     rsp, 8
.text:0000000000003D10                 add     rbx, r15
.text:0000000000003D13                 lea     r15, [rbp+8]
.text:0000000000003D17                 mov     r8d, [rbp+0]
.text:0000000000003D1B                 mov     r11, [rbx]
.text:0000000000003D1E                 mov     r12, [rbx+8]
.text:0000000000003D22                 mov     rcx, r14
.text:0000000000003D25                 or      eax, 1
.text:0000000000003D28                 mov     [rsp+60h+var_3C], eax
.text:0000000000003D2C                 push    qword ptr [rbp+30h]
.text:0000000000003D2F                 mov     r9d, eax
.text:0000000000003D32                 push    qword ptr [rbp+28h]
.text:0000000000003D35                 push    r15
.text:0000000000003D37                 mov     rsi, r11
.text:0000000000003D3A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003D3F                 mov     rdi, r12
.text:0000000000003D42                 mov     [rsp+78h+var_48], r11
.text:0000000000003D47                 call    quotearg_buffer_restyled
.text:0000000000003D4C                 add     rsp, 20h
.text:0000000000003D50                 mov     r11, [rsp+58h+var_48]
.text:0000000000003D55                 cmp     r11, rax
.text:0000000000003D58                 ja      short loc_3DC1
.text:0000000000003D5A                 lea     rsi, [rax+1]
.text:0000000000003D5E                 lea     rax, slot0
.text:0000000000003D65                 cmp     r12, rax
.text:0000000000003D68                 mov     [rbx], rsi
.text:0000000000003D6B                 jz      short loc_3D7F
.text:0000000000003D6D                 mov     rdi, r12        ; ptr
.text:0000000000003D70                 mov     [rsp+58h+var_48], rsi
.text:0000000000003D75                 call    _free
.text:0000000000003D7A                 mov     rsi, [rsp+58h+var_48]
.text:0000000000003D7F
.text:0000000000003D7F loc_3D7F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000003D7F                 mov     rdi, rsi
.text:0000000000003D82                 mov     [rsp+58h+var_48], rsi
.text:0000000000003D87                 call    xmalloc
.text:0000000000003D8C                 sub     rsp, 8
.text:0000000000003D90                 mov     [rbx+8], rax
.text:0000000000003D94                 mov     r8d, [rbp+0]
.text:0000000000003D98                 push    qword ptr [rbp+30h]
.text:0000000000003D9B                 push    qword ptr [rbp+28h]
.text:0000000000003D9E                 mov     rcx, r14
.text:0000000000003DA1                 push    r15
.text:0000000000003DA3                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003DA8                 mov     rdi, rax
.text:0000000000003DAB                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003DB0                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003DB5                 mov     r12, rax
.text:0000000000003DB8                 call    quotearg_buffer_restyled
.text:0000000000003DBD                 add     rsp, 20h
.text:0000000000003DC1
.text:0000000000003DC1 loc_3DC1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003DC1                 mov     eax, [rsp+58h+var_40]
.text:0000000000003DC5                 mov     [r13+0], eax
.text:0000000000003DC9                 add     rsp, 28h
.text:0000000000003DCD                 mov     rax, r12
.text:0000000000003DD0                 pop     rbx
.text:0000000000003DD1                 pop     rbp
.text:0000000000003DD2                 pop     r12
.text:0000000000003DD4                 pop     r13
.text:0000000000003DD6                 pop     r14
.text:0000000000003DD8                 pop     r15
.text:0000000000003DDA                 retn
.text:0000000000003DDA ; ---------------------------------------------------------------------------
.text:0000000000003DDB                 align 20h
.text:0000000000003DE0
.text:0000000000003DE0 loc_3DE0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003DE0                 xor     edi, edi
.text:0000000000003DE2                 call    xrealloc
.text:0000000000003DE7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000003DEF                 mov     rbx, rax
.text:0000000000003DF2                 mov     cs:slotvec, rax
.text:0000000000003DF9                 movups  xmmword ptr [rax], xmm0
.text:0000000000003DFC                 jmp     loc_3CDD
.text:0000000000003E01 ; ---------------------------------------------------------------------------
.text:0000000000003E01
.text:0000000000003E01 loc_3E01:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003E01                 call    _abort
.text:0000000000003E06 ; ---------------------------------------------------------------------------
.text:0000000000003E06
.text:0000000000003E06 loc_3E06:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003E06                 call    xalloc_die
.text:0000000000003E06 ; } // starts at 3C60
.text:0000000000003E06 quotearg_n_options endp
.text:0000000000003E06
.text:0000000000003E06 ; ---------------------------------------------------------------------------
.text:0000000000003E0B                 align 10h
.text:0000000000003E10
.text:0000000000003E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E10
.text:0000000000003E10 ; Attributes: info_from_lumina
.text:0000000000003E10
.text:0000000000003E10 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003E10                 public clone_quoting_options
.text:0000000000003E10 clone_quoting_options proc near
.text:0000000000003E10 ; __unwind {
.text:0000000000003E10                 push    r12
.text:0000000000003E12                 push    rbp
.text:0000000000003E13                 push    rbx
.text:0000000000003E14                 mov     rbx, rdi
.text:0000000000003E17                 call    ___errno_location
.text:0000000000003E1C                 mov     r12d, [rax]
.text:0000000000003E1F                 mov     rbp, rax
.text:0000000000003E22                 lea     rax, default_quoting_options
.text:0000000000003E29                 test    rbx, rbx
.text:0000000000003E2C                 mov     esi, 38h ; '8'  ; n
.text:0000000000003E31                 cmovz   rbx, rax
.text:0000000000003E35                 mov     rdi, rbx        ; src
.text:0000000000003E38                 call    xmemdup
.text:0000000000003E3D                 mov     [rbp+0], r12d
.text:0000000000003E41                 pop     rbx
.text:0000000000003E42                 pop     rbp
.text:0000000000003E43                 pop     r12
.text:0000000000003E45                 retn
.text:0000000000003E45 ; } // starts at 3E10
.text:0000000000003E45 clone_quoting_options endp
.text:0000000000003E45
.text:0000000000003E45 ; ---------------------------------------------------------------------------
.text:0000000000003E46                 align 10h
.text:0000000000003E50
.text:0000000000003E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E50
.text:0000000000003E50
.text:0000000000003E50                 public get_quoting_style
.text:0000000000003E50 get_quoting_style proc near
.text:0000000000003E50 ; __unwind {
.text:0000000000003E50                 lea     rax, default_quoting_options
.text:0000000000003E57                 test    rdi, rdi
.text:0000000000003E5A                 cmovz   rdi, rax
.text:0000000000003E5E                 mov     eax, [rdi]
.text:0000000000003E60                 retn
.text:0000000000003E60 ; } // starts at 3E50
.text:0000000000003E60 get_quoting_style endp
.text:0000000000003E60
.text:0000000000003E60 ; ---------------------------------------------------------------------------
.text:0000000000003E61                 align 10h
.text:0000000000003E70
.text:0000000000003E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E70
.text:0000000000003E70
.text:0000000000003E70                 public set_quoting_style
.text:0000000000003E70 set_quoting_style proc near
.text:0000000000003E70 ; __unwind {
.text:0000000000003E70                 lea     rax, default_quoting_options
.text:0000000000003E77                 test    rdi, rdi
.text:0000000000003E7A                 cmovz   rdi, rax
.text:0000000000003E7E                 mov     [rdi], esi
.text:0000000000003E80                 retn
.text:0000000000003E80 ; } // starts at 3E70
.text:0000000000003E80 set_quoting_style endp
.text:0000000000003E80
.text:0000000000003E80 ; ---------------------------------------------------------------------------
.text:0000000000003E81                 align 10h
.text:0000000000003E90
.text:0000000000003E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E90
.text:0000000000003E90 ; Attributes: info_from_lumina
.text:0000000000003E90
.text:0000000000003E90 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000003E90                 public set_char_quoting
.text:0000000000003E90 set_char_quoting proc near
.text:0000000000003E90 ; __unwind {
.text:0000000000003E90                 lea     rax, default_quoting_options
.text:0000000000003E97                 test    rdi, rdi
.text:0000000000003E9A                 mov     ecx, esi
.text:0000000000003E9C                 cmovz   rdi, rax
.text:0000000000003EA0                 mov     eax, esi
.text:0000000000003EA2                 and     ecx, 1Fh
.text:0000000000003EA5                 shr     al, 5
.text:0000000000003EA8                 movzx   eax, al
.text:0000000000003EAB                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003EB0                 mov     esi, [rdi]
.text:0000000000003EB2                 mov     eax, esi
.text:0000000000003EB4                 shr     eax, cl
.text:0000000000003EB6                 xor     edx, eax
.text:0000000000003EB8                 and     eax, 1
.text:0000000000003EBB                 and     edx, 1
.text:0000000000003EBE                 shl     edx, cl
.text:0000000000003EC0                 xor     edx, esi
.text:0000000000003EC2                 mov     [rdi], edx
.text:0000000000003EC4                 retn
.text:0000000000003EC4 ; } // starts at 3E90
.text:0000000000003EC4 set_char_quoting endp
.text:0000000000003EC4
.text:0000000000003EC4 ; ---------------------------------------------------------------------------
.text:0000000000003EC5                 align 10h
.text:0000000000003ED0
.text:0000000000003ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003ED0
.text:0000000000003ED0
.text:0000000000003ED0                 public set_quoting_flags
.text:0000000000003ED0 set_quoting_flags proc near
.text:0000000000003ED0 ; __unwind {
.text:0000000000003ED0                 lea     rax, default_quoting_options
.text:0000000000003ED7                 test    rdi, rdi
.text:0000000000003EDA                 cmovz   rdi, rax
.text:0000000000003EDE                 mov     eax, [rdi+4]
.text:0000000000003EE1                 mov     [rdi+4], esi
.text:0000000000003EE4                 retn
.text:0000000000003EE4 ; } // starts at 3ED0
.text:0000000000003EE4 set_quoting_flags endp
.text:0000000000003EE4
.text:0000000000003EE4 ; ---------------------------------------------------------------------------
.text:0000000000003EE5                 align 10h
.text:0000000000003EF0
.text:0000000000003EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EF0
.text:0000000000003EF0 ; Attributes: info_from_lumina
.text:0000000000003EF0
.text:0000000000003EF0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003EF0                 public set_custom_quoting
.text:0000000000003EF0 set_custom_quoting proc near
.text:0000000000003EF0 ; __unwind {
.text:0000000000003EF0                 lea     rax, default_quoting_options
.text:0000000000003EF7                 test    rdi, rdi
.text:0000000000003EFA                 cmovz   rdi, rax
.text:0000000000003EFE                 test    rsi, rsi
.text:0000000000003F01                 mov     dword ptr [rdi], 0Ah
.text:0000000000003F07                 jz      short loc_3F17
.text:0000000000003F09                 test    rdx, rdx
.text:0000000000003F0C                 jz      short loc_3F17
.text:0000000000003F0E                 mov     [rdi+28h], rsi
.text:0000000000003F12                 mov     [rdi+30h], rdx
.text:0000000000003F16                 retn
.text:0000000000003F17 ; ---------------------------------------------------------------------------
.text:0000000000003F17
.text:0000000000003F17 loc_3F17:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003F17                                         ; set_custom_quoting+1C↑j
.text:0000000000003F17                 sub     rsp, 8
.text:0000000000003F1B                 call    _abort
.text:0000000000003F1B ; } // starts at 3EF0
.text:0000000000003F1B set_custom_quoting endp
.text:0000000000003F1B
.text:0000000000003F20
.text:0000000000003F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F20
.text:0000000000003F20 ; Attributes: info_from_lumina
.text:0000000000003F20
.text:0000000000003F20 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003F20                 public quotearg_buffer
.text:0000000000003F20 quotearg_buffer proc near
.text:0000000000003F20
.text:0000000000003F20 var_40          = qword ptr -40h
.text:0000000000003F20
.text:0000000000003F20 ; __unwind {
.text:0000000000003F20                 push    r15
.text:0000000000003F22                 push    r14
.text:0000000000003F24                 lea     rax, default_quoting_options
.text:0000000000003F2B                 push    r13
.text:0000000000003F2D                 push    r12
.text:0000000000003F2F                 mov     r13, rdi
.text:0000000000003F32                 push    rbp
.text:0000000000003F33                 push    rbx
.text:0000000000003F34                 mov     rbx, r8
.text:0000000000003F37                 mov     r14, rsi
.text:0000000000003F3A                 mov     r15, rdx
.text:0000000000003F3D                 sub     rsp, 18h
.text:0000000000003F41                 test    r8, r8
.text:0000000000003F44                 cmovz   rbx, rax
.text:0000000000003F48                 mov     [rsp+48h+var_40], rcx
.text:0000000000003F4D                 call    ___errno_location
.text:0000000000003F52                 mov     r12d, [rax]
.text:0000000000003F55                 mov     rbp, rax
.text:0000000000003F58                 lea     rax, [rbx+8]
.text:0000000000003F5C                 sub     rsp, 8
.text:0000000000003F60                 mov     r9d, [rbx+4]
.text:0000000000003F64                 push    qword ptr [rbx+30h]
.text:0000000000003F67                 mov     r8d, [rbx]
.text:0000000000003F6A                 push    qword ptr [rbx+28h]
.text:0000000000003F6D                 mov     rdx, r15
.text:0000000000003F70                 push    rax
.text:0000000000003F71                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003F76                 mov     rsi, r14
.text:0000000000003F79                 mov     rdi, r13
.text:0000000000003F7C                 call    quotearg_buffer_restyled
.text:0000000000003F81                 mov     [rbp+0], r12d
.text:0000000000003F85                 add     rsp, 38h
.text:0000000000003F89                 pop     rbx
.text:0000000000003F8A                 pop     rbp
.text:0000000000003F8B                 pop     r12
.text:0000000000003F8D                 pop     r13
.text:0000000000003F8F                 pop     r14
.text:0000000000003F91                 pop     r15
.text:0000000000003F93                 retn
.text:0000000000003F93 ; } // starts at 3F20
.text:0000000000003F93 quotearg_buffer endp
.text:0000000000003F93
.text:0000000000003F93 ; ---------------------------------------------------------------------------
.text:0000000000003F94                 align 20h
.text:0000000000003FA0
.text:0000000000003FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FA0
.text:0000000000003FA0 ; Attributes: info_from_lumina
.text:0000000000003FA0
.text:0000000000003FA0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000003FA0                 public quotearg_alloc_mem
.text:0000000000003FA0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000003FA0
.text:0000000000003FA0 var_5C          = dword ptr -5Ch
.text:0000000000003FA0 var_58          = qword ptr -58h
.text:0000000000003FA0 var_50          = qword ptr -50h
.text:0000000000003FA0 var_48          = qword ptr -48h
.text:0000000000003FA0 var_40          = qword ptr -40h
.text:0000000000003FA0
.text:0000000000003FA0 ; __unwind {
.text:0000000000003FA0                 push    r15
.text:0000000000003FA2                 push    r14
.text:0000000000003FA4                 lea     rax, default_quoting_options
.text:0000000000003FAB                 push    r13
.text:0000000000003FAD                 push    r12
.text:0000000000003FAF                 mov     r12, rdx
.text:0000000000003FB2                 push    rbp
.text:0000000000003FB3                 push    rbx
.text:0000000000003FB4                 mov     rbx, rcx
.text:0000000000003FB7                 mov     r14, rdi
.text:0000000000003FBA                 mov     r15, rsi
.text:0000000000003FBD                 sub     rsp, 38h
.text:0000000000003FC1                 test    rcx, rcx
.text:0000000000003FC4                 cmovz   rbx, rax
.text:0000000000003FC8                 xor     ebp, ebp
.text:0000000000003FCA                 call    ___errno_location
.text:0000000000003FCF                 test    r12, r12
.text:0000000000003FD2                 mov     r13, rax
.text:0000000000003FD5                 mov     eax, [rax]
.text:0000000000003FD7                 setz    bpl
.text:0000000000003FDB                 or      ebp, [rbx+4]
.text:0000000000003FDE                 lea     r10, [rbx+8]
.text:0000000000003FE2                 sub     rsp, 8
.text:0000000000003FE6                 mov     r8d, [rbx]
.text:0000000000003FE9                 mov     rcx, r15
.text:0000000000003FEC                 mov     [rsp+70h+var_5C], eax
.text:0000000000003FF0                 push    qword ptr [rbx+30h]
.text:0000000000003FF3                 mov     rdx, r14
.text:0000000000003FF6                 push    qword ptr [rbx+28h]
.text:0000000000003FF9                 push    r10
.text:0000000000003FFB                 xor     esi, esi
.text:0000000000003FFD                 mov     r9d, ebp
.text:0000000000004000                 xor     edi, edi
.text:0000000000004002                 mov     [rsp+88h+var_48], r10
.text:0000000000004007                 call    quotearg_buffer_restyled
.text:000000000000400C                 lea     rsi, [rax+1]
.text:0000000000004010                 mov     [rsp+88h+var_40], rax
.text:0000000000004015                 add     rsp, 20h
.text:0000000000004019                 mov     rdi, rsi
.text:000000000000401C                 mov     [rsp+68h+var_50], rsi
.text:0000000000004021                 call    xmalloc
.text:0000000000004026                 mov     [rsp+68h+var_58], rax
.text:000000000000402B                 sub     rsp, 8
.text:000000000000402F                 push    qword ptr [rbx+30h]
.text:0000000000004032                 push    qword ptr [rbx+28h]
.text:0000000000004035                 mov     r10, [rsp+80h+var_48]
.text:000000000000403A                 mov     r9d, ebp
.text:000000000000403D                 mov     r8d, [rbx]
.text:0000000000004040                 mov     rcx, r15
.text:0000000000004043                 mov     rdx, r14
.text:0000000000004046                 mov     rdi, rax
.text:0000000000004049                 push    r10
.text:000000000000404B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004050                 call    quotearg_buffer_restyled
.text:0000000000004055                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004059                 add     rsp, 20h
.text:000000000000405D                 test    r12, r12
.text:0000000000004060                 mov     [r13+0], eax
.text:0000000000004064                 jz      short loc_406F
.text:0000000000004066                 mov     r11, [rsp+68h+var_40]
.text:000000000000406B                 mov     [r12], r11
.text:000000000000406F
.text:000000000000406F loc_406F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000406F                 mov     rax, [rsp+68h+var_58]
.text:0000000000004074                 add     rsp, 38h
.text:0000000000004078                 pop     rbx
.text:0000000000004079                 pop     rbp
.text:000000000000407A                 pop     r12
.text:000000000000407C                 pop     r13
.text:000000000000407E                 pop     r14
.text:0000000000004080                 pop     r15
.text:0000000000004082                 retn
.text:0000000000004082 ; } // starts at 3FA0
.text:0000000000004082 quotearg_alloc_mem endp
.text:0000000000004082
.text:0000000000004082 ; ---------------------------------------------------------------------------
.text:0000000000004083                 align 10h
.text:0000000000004090
.text:0000000000004090 ; =============== S U B R O U T I N E =======================================
.text:0000000000004090
.text:0000000000004090
.text:0000000000004090                 public quotearg_alloc
.text:0000000000004090 quotearg_alloc  proc near
.text:0000000000004090 ; __unwind {
.text:0000000000004090                 mov     rcx, rdx
.text:0000000000004093                 xor     edx, edx
.text:0000000000004095                 jmp     quotearg_alloc_mem
.text:0000000000004095 ; } // starts at 4090
.text:0000000000004095 quotearg_alloc  endp
.text:0000000000004095
.text:0000000000004095 ; ---------------------------------------------------------------------------
.text:000000000000409A                 align 20h
.text:00000000000040A0
.text:00000000000040A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040A0
.text:00000000000040A0 ; Attributes: info_from_lumina
.text:00000000000040A0
.text:00000000000040A0 ; void __cdecl quotearg_free()
.text:00000000000040A0                 public quotearg_free
.text:00000000000040A0 quotearg_free   proc near
.text:00000000000040A0 ; __unwind {
.text:00000000000040A0                 mov     eax, cs:nslots
.text:00000000000040A6                 push    r12
.text:00000000000040A8                 mov     r12, cs:slotvec
.text:00000000000040AF                 push    rbp
.text:00000000000040B0                 push    rbx
.text:00000000000040B1                 cmp     eax, 1
.text:00000000000040B4                 jle     short loc_40E1
.text:00000000000040B6                 sub     eax, 2
.text:00000000000040B9                 lea     rbx, [r12+18h]
.text:00000000000040BE                 shl     rax, 4
.text:00000000000040C2                 lea     rbp, [r12+rax+28h]
.text:00000000000040C7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000040D0
.text:00000000000040D0 loc_40D0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000040D0                 mov     rdi, [rbx]      ; ptr
.text:00000000000040D3                 add     rbx, 10h
.text:00000000000040D7                 call    _free
.text:00000000000040DC                 cmp     rbx, rbp
.text:00000000000040DF                 jnz     short loc_40D0
.text:00000000000040E1
.text:00000000000040E1 loc_40E1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000040E1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000040E6                 lea     rbx, slot0
.text:00000000000040ED                 cmp     rdi, rbx
.text:00000000000040F0                 jz      short loc_4109
.text:00000000000040F2                 call    _free
.text:00000000000040F7                 mov     cs:slotvec0, 100h
.text:0000000000004102                 mov     cs:off_208098, rbx
.text:0000000000004109
.text:0000000000004109 loc_4109:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004109                 lea     rbx, slotvec0
.text:0000000000004110                 cmp     r12, rbx
.text:0000000000004113                 jz      short loc_4124
.text:0000000000004115                 mov     rdi, r12        ; ptr
.text:0000000000004118                 call    _free
.text:000000000000411D                 mov     cs:slotvec, rbx
.text:0000000000004124
.text:0000000000004124 loc_4124:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004124                 pop     rbx
.text:0000000000004125                 mov     cs:nslots, 1
.text:000000000000412F                 pop     rbp
.text:0000000000004130                 pop     r12
.text:0000000000004132                 retn
.text:0000000000004132 ; } // starts at 40A0
.text:0000000000004132 quotearg_free   endp
.text:0000000000004132
.text:0000000000004132 ; ---------------------------------------------------------------------------
.text:0000000000004133                 align 20h
.text:0000000000004140
.text:0000000000004140 ; =============== S U B R O U T I N E =======================================
.text:0000000000004140
.text:0000000000004140
.text:0000000000004140                 public quotearg_n
.text:0000000000004140 quotearg_n      proc near
.text:0000000000004140 ; __unwind {
.text:0000000000004140                 lea     rcx, default_quoting_options
.text:0000000000004147                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000414E                 jmp     quotearg_n_options
.text:000000000000414E ; } // starts at 4140
.text:000000000000414E quotearg_n      endp
.text:000000000000414E
.text:000000000000414E ; ---------------------------------------------------------------------------
.text:0000000000004153                 align 20h
.text:0000000000004160
.text:0000000000004160 ; =============== S U B R O U T I N E =======================================
.text:0000000000004160
.text:0000000000004160
.text:0000000000004160                 public quotearg_n_mem
.text:0000000000004160 quotearg_n_mem  proc near
.text:0000000000004160 ; __unwind {
.text:0000000000004160                 lea     rcx, default_quoting_options
.text:0000000000004167                 jmp     quotearg_n_options
.text:0000000000004167 ; } // starts at 4160
.text:0000000000004167 quotearg_n_mem  endp
.text:0000000000004167
.text:0000000000004167 ; ---------------------------------------------------------------------------
.text:000000000000416C                 align 10h
.text:0000000000004170
.text:0000000000004170 ; =============== S U B R O U T I N E =======================================
.text:0000000000004170
.text:0000000000004170
.text:0000000000004170                 public quotearg
.text:0000000000004170 quotearg        proc near
.text:0000000000004170 ; __unwind {
.text:0000000000004170                 lea     rcx, default_quoting_options
.text:0000000000004177                 mov     rsi, rdi
.text:000000000000417A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004181                 xor     edi, edi
.text:0000000000004183                 jmp     quotearg_n_options
.text:0000000000004183 ; } // starts at 4170
.text:0000000000004183 quotearg        endp
.text:0000000000004183
.text:0000000000004183 ; ---------------------------------------------------------------------------
.text:0000000000004188                 align 10h
.text:0000000000004190
.text:0000000000004190 ; =============== S U B R O U T I N E =======================================
.text:0000000000004190
.text:0000000000004190
.text:0000000000004190                 public quotearg_mem
.text:0000000000004190 quotearg_mem    proc near
.text:0000000000004190 ; __unwind {
.text:0000000000004190                 lea     rcx, default_quoting_options
.text:0000000000004197                 mov     rdx, rsi
.text:000000000000419A                 mov     rsi, rdi
.text:000000000000419D                 xor     edi, edi
.text:000000000000419F                 jmp     quotearg_n_options
.text:000000000000419F ; } // starts at 4190
.text:000000000000419F quotearg_mem    endp
.text:000000000000419F
.text:000000000000419F ; ---------------------------------------------------------------------------
.text:00000000000041A4                 align 10h
.text:00000000000041B0
.text:00000000000041B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041B0
.text:00000000000041B0 ; Attributes: info_from_lumina
.text:00000000000041B0
.text:00000000000041B0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000041B0                 public quotearg_n_style
.text:00000000000041B0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:00000000000041B0
.text:00000000000041B0 var_48          = dword ptr -48h
.text:00000000000041B0 var_44          = qword ptr -44h
.text:00000000000041B0 var_3C          = qword ptr -3Ch
.text:00000000000041B0 var_34          = qword ptr -34h
.text:00000000000041B0 var_2C          = qword ptr -2Ch
.text:00000000000041B0 var_24          = qword ptr -24h
.text:00000000000041B0 var_1C          = qword ptr -1Ch
.text:00000000000041B0 var_14          = dword ptr -14h
.text:00000000000041B0 var_10          = qword ptr -10h
.text:00000000000041B0
.text:00000000000041B0 ; __unwind {
.text:00000000000041B0                 sub     rsp, 48h
.text:00000000000041B4                 mov     rax, rdx
.text:00000000000041B7                 mov     rdx, fs:28h
.text:00000000000041C0                 mov     [rsp+48h+var_10], rdx
.text:00000000000041C5                 xor     edx, edx
.text:00000000000041C7                 cmp     esi, 0Ah
.text:00000000000041CA                 jz      short loc_4234
.text:00000000000041CC                 mov     [rsp+48h+var_48], esi
.text:00000000000041CF                 mov     rcx, rsp
.text:00000000000041D2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000041D9                 mov     rsi, rax
.text:00000000000041DC                 mov     [rsp+48h+var_44], 0
.text:00000000000041E5                 mov     [rsp+48h+var_3C], 0
.text:00000000000041EE                 mov     [rsp+48h+var_34], 0
.text:00000000000041F7                 mov     [rsp+48h+var_2C], 0
.text:0000000000004200                 mov     [rsp+48h+var_24], 0
.text:0000000000004209                 mov     [rsp+48h+var_1C], 0
.text:0000000000004212                 mov     [rsp+48h+var_14], 0
.text:000000000000421A                 call    quotearg_n_options
.text:000000000000421F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004224                 xor     rcx, fs:28h
.text:000000000000422D                 jnz     short loc_4239
.text:000000000000422F                 add     rsp, 48h
.text:0000000000004233                 retn
.text:0000000000004234 ; ---------------------------------------------------------------------------
.text:0000000000004234
.text:0000000000004234 loc_4234:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004234                 call    _abort
.text:0000000000004239 ; ---------------------------------------------------------------------------
.text:0000000000004239
.text:0000000000004239 loc_4239:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004239                 call    ___stack_chk_fail
.text:0000000000004239 ; } // starts at 41B0
.text:0000000000004239 quotearg_n_style endp
.text:0000000000004239
.text:0000000000004239 ; ---------------------------------------------------------------------------
.text:000000000000423E                 align 20h
.text:0000000000004240
.text:0000000000004240 ; =============== S U B R O U T I N E =======================================
.text:0000000000004240
.text:0000000000004240 ; Attributes: info_from_lumina
.text:0000000000004240
.text:0000000000004240 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004240                 public quotearg_n_style_mem
.text:0000000000004240 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004240
.text:0000000000004240 var_48          = dword ptr -48h
.text:0000000000004240 var_44          = qword ptr -44h
.text:0000000000004240 var_3C          = qword ptr -3Ch
.text:0000000000004240 var_34          = qword ptr -34h
.text:0000000000004240 var_2C          = qword ptr -2Ch
.text:0000000000004240 var_24          = qword ptr -24h
.text:0000000000004240 var_1C          = qword ptr -1Ch
.text:0000000000004240 var_14          = dword ptr -14h
.text:0000000000004240 var_10          = qword ptr -10h
.text:0000000000004240
.text:0000000000004240 ; __unwind {
.text:0000000000004240                 sub     rsp, 48h
.text:0000000000004244                 mov     rax, rdx
.text:0000000000004247                 mov     rdx, rcx
.text:000000000000424A                 mov     rcx, fs:28h
.text:0000000000004253                 mov     [rsp+48h+var_10], rcx
.text:0000000000004258                 xor     ecx, ecx
.text:000000000000425A                 cmp     esi, 0Ah
.text:000000000000425D                 jz      short loc_42C0
.text:000000000000425F                 mov     [rsp+48h+var_48], esi
.text:0000000000004262                 mov     rcx, rsp
.text:0000000000004265                 mov     rsi, rax
.text:0000000000004268                 mov     [rsp+48h+var_44], 0
.text:0000000000004271                 mov     [rsp+48h+var_3C], 0
.text:000000000000427A                 mov     [rsp+48h+var_34], 0
.text:0000000000004283                 mov     [rsp+48h+var_2C], 0
.text:000000000000428C                 mov     [rsp+48h+var_24], 0
.text:0000000000004295                 mov     [rsp+48h+var_1C], 0
.text:000000000000429E                 mov     [rsp+48h+var_14], 0
.text:00000000000042A6                 call    quotearg_n_options
.text:00000000000042AB                 mov     rdx, [rsp+48h+var_10]
.text:00000000000042B0                 xor     rdx, fs:28h
.text:00000000000042B9                 jnz     short loc_42C5
.text:00000000000042BB                 add     rsp, 48h
.text:00000000000042BF                 retn
.text:00000000000042C0 ; ---------------------------------------------------------------------------
.text:00000000000042C0
.text:00000000000042C0 loc_42C0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000042C0                 call    _abort
.text:00000000000042C5 ; ---------------------------------------------------------------------------
.text:00000000000042C5
.text:00000000000042C5 loc_42C5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000042C5                 call    ___stack_chk_fail
.text:00000000000042C5 ; } // starts at 4240
.text:00000000000042C5 quotearg_n_style_mem endp
.text:00000000000042C5
.text:00000000000042C5 ; ---------------------------------------------------------------------------
.text:00000000000042CA                 align 10h
.text:00000000000042D0
.text:00000000000042D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042D0
.text:00000000000042D0
.text:00000000000042D0                 public quotearg_style
.text:00000000000042D0 quotearg_style  proc near
.text:00000000000042D0 ; __unwind {
.text:00000000000042D0                 mov     rdx, rsi
.text:00000000000042D3                 mov     esi, edi
.text:00000000000042D5                 xor     edi, edi
.text:00000000000042D7                 jmp     quotearg_n_style
.text:00000000000042D7 ; } // starts at 42D0
.text:00000000000042D7 quotearg_style  endp
.text:00000000000042D7
.text:00000000000042D7 ; ---------------------------------------------------------------------------
.text:00000000000042DC                 align 20h
.text:00000000000042E0
.text:00000000000042E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042E0
.text:00000000000042E0
.text:00000000000042E0                 public quotearg_style_mem
.text:00000000000042E0 quotearg_style_mem proc near
.text:00000000000042E0 ; __unwind {
.text:00000000000042E0                 mov     rcx, rdx
.text:00000000000042E3                 mov     rdx, rsi
.text:00000000000042E6                 mov     esi, edi
.text:00000000000042E8                 xor     edi, edi
.text:00000000000042EA                 jmp     quotearg_n_style_mem
.text:00000000000042EA ; } // starts at 42E0
.text:00000000000042EA quotearg_style_mem endp
.text:00000000000042EA
.text:00000000000042EA ; ---------------------------------------------------------------------------
.text:00000000000042EF                 align 10h
.text:00000000000042F0
.text:00000000000042F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042F0
.text:00000000000042F0 ; Attributes: info_from_lumina
.text:00000000000042F0
.text:00000000000042F0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:00000000000042F0                 public quotearg_char_mem
.text:00000000000042F0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:00000000000042F0                                         ; quotearg_colon+C↓j ...
.text:00000000000042F0
.text:00000000000042F0 var_48          = xmmword ptr -48h
.text:00000000000042F0 var_38          = xmmword ptr -38h
.text:00000000000042F0 var_28          = xmmword ptr -28h
.text:00000000000042F0 var_18          = qword ptr -18h
.text:00000000000042F0 var_10          = qword ptr -10h
.text:00000000000042F0
.text:00000000000042F0 ; __unwind {
.text:00000000000042F0                 sub     rsp, 48h
.text:00000000000042F4                 mov     ecx, edx
.text:00000000000042F6                 mov     rax, fs:28h
.text:00000000000042FF                 mov     [rsp+48h+var_10], rax
.text:0000000000004304                 xor     eax, eax
.text:0000000000004306                 mov     rax, cs:qword_208250
.text:000000000000430D                 mov     r8, rsp
.text:0000000000004310                 and     ecx, 1Fh
.text:0000000000004313                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000431B                 mov     [rsp+48h+var_18], rax
.text:0000000000004320                 mov     eax, edx
.text:0000000000004322                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004326                 shr     al, 5
.text:0000000000004329                 movzx   eax, al
.text:000000000000432C                 lea     r9, [r8+rax*4+8]
.text:0000000000004331                 movdqa  xmm0, cs:xmmword_208230
.text:0000000000004339                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000433E                 movdqa  xmm0, cs:xmmword_208240
.text:0000000000004346                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000434B                 mov     edx, [r9]
.text:000000000000434E                 mov     eax, edx
.text:0000000000004350                 shr     eax, cl
.text:0000000000004352                 not     eax
.text:0000000000004354                 and     eax, 1
.text:0000000000004357                 shl     eax, cl
.text:0000000000004359                 mov     rcx, r8
.text:000000000000435C                 xor     eax, edx
.text:000000000000435E                 mov     rdx, rsi
.text:0000000000004361                 mov     rsi, rdi
.text:0000000000004364                 mov     [r9], eax
.text:0000000000004367                 xor     edi, edi
.text:0000000000004369                 call    quotearg_n_options
.text:000000000000436E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000004373                 xor     rsi, fs:28h
.text:000000000000437C                 jnz     short loc_4383
.text:000000000000437E                 add     rsp, 48h
.text:0000000000004382                 retn
.text:0000000000004383 ; ---------------------------------------------------------------------------
.text:0000000000004383
.text:0000000000004383 loc_4383:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000004383                 call    ___stack_chk_fail
.text:0000000000004383 ; } // starts at 42F0
.text:0000000000004383 quotearg_char_mem endp
.text:0000000000004383
.text:0000000000004383 ; ---------------------------------------------------------------------------
.text:0000000000004388                 align 10h
.text:0000000000004390
.text:0000000000004390 ; =============== S U B R O U T I N E =======================================
.text:0000000000004390
.text:0000000000004390
.text:0000000000004390                 public quotearg_char
.text:0000000000004390 quotearg_char   proc near
.text:0000000000004390 ; __unwind {
.text:0000000000004390                 movsx   edx, sil
.text:0000000000004394                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000439B                 jmp     quotearg_char_mem
.text:000000000000439B ; } // starts at 4390
.text:000000000000439B quotearg_char   endp
.text:000000000000439B
.text:00000000000043A0
.text:00000000000043A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043A0
.text:00000000000043A0
.text:00000000000043A0                 public quotearg_colon
.text:00000000000043A0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000043A0 ; __unwind {
.text:00000000000043A0                 mov     edx, 3Ah ; ':'
.text:00000000000043A5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000043AC                 jmp     quotearg_char_mem
.text:00000000000043AC ; } // starts at 43A0
.text:00000000000043AC quotearg_colon  endp
.text:00000000000043AC
.text:00000000000043AC ; ---------------------------------------------------------------------------
.text:00000000000043B1                 align 20h
.text:00000000000043C0
.text:00000000000043C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043C0
.text:00000000000043C0
.text:00000000000043C0                 public quotearg_colon_mem
.text:00000000000043C0 quotearg_colon_mem proc near
.text:00000000000043C0 ; __unwind {
.text:00000000000043C0                 mov     edx, 3Ah ; ':'
.text:00000000000043C5                 jmp     quotearg_char_mem
.text:00000000000043C5 ; } // starts at 43C0
.text:00000000000043C5 quotearg_colon_mem endp
.text:00000000000043C5
.text:00000000000043C5 ; ---------------------------------------------------------------------------
.text:00000000000043CA                 align 10h
.text:00000000000043D0
.text:00000000000043D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043D0
.text:00000000000043D0 ; Attributes: info_from_lumina
.text:00000000000043D0
.text:00000000000043D0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:00000000000043D0                 public quotearg_n_style_colon
.text:00000000000043D0 quotearg_n_style_colon proc near        ; CODE XREF: main+23F↑p
.text:00000000000043D0                                         ; paste_parallel+3F1↑p ...
.text:00000000000043D0
.text:00000000000043D0 var_48          = dword ptr -48h
.text:00000000000043D0 var_44          = qword ptr -44h
.text:00000000000043D0 var_3C          = qword ptr -3Ch
.text:00000000000043D0 var_34          = qword ptr -34h
.text:00000000000043D0 var_2C          = qword ptr -2Ch
.text:00000000000043D0 var_24          = qword ptr -24h
.text:00000000000043D0 var_1C          = qword ptr -1Ch
.text:00000000000043D0 var_14          = dword ptr -14h
.text:00000000000043D0 var_10          = qword ptr -10h
.text:00000000000043D0
.text:00000000000043D0 ; __unwind {
.text:00000000000043D0                 sub     rsp, 48h
.text:00000000000043D4                 mov     rax, rdx
.text:00000000000043D7                 mov     rdx, fs:28h
.text:00000000000043E0                 mov     [rsp+48h+var_10], rdx
.text:00000000000043E5                 xor     edx, edx
.text:00000000000043E7                 cmp     esi, 0Ah
.text:00000000000043EA                 jz      short loc_4454
.text:00000000000043EC                 mov     [rsp+48h+var_48], esi
.text:00000000000043EF                 mov     rcx, rsp
.text:00000000000043F2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000043F9                 mov     rsi, rax
.text:00000000000043FC                 mov     [rsp+48h+var_44], 0
.text:0000000000004405                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000440E                 mov     [rsp+48h+var_34], 0
.text:0000000000004417                 mov     [rsp+48h+var_2C], 0
.text:0000000000004420                 mov     [rsp+48h+var_24], 0
.text:0000000000004429                 mov     [rsp+48h+var_1C], 0
.text:0000000000004432                 mov     [rsp+48h+var_14], 0
.text:000000000000443A                 call    quotearg_n_options
.text:000000000000443F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004444                 xor     rcx, fs:28h
.text:000000000000444D                 jnz     short loc_4459
.text:000000000000444F                 add     rsp, 48h
.text:0000000000004453                 retn
.text:0000000000004454 ; ---------------------------------------------------------------------------
.text:0000000000004454
.text:0000000000004454 loc_4454:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004454                 call    _abort
.text:0000000000004459 ; ---------------------------------------------------------------------------
.text:0000000000004459
.text:0000000000004459 loc_4459:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004459                 call    ___stack_chk_fail
.text:0000000000004459 ; } // starts at 43D0
.text:0000000000004459 quotearg_n_style_colon endp
.text:0000000000004459
.text:0000000000004459 ; ---------------------------------------------------------------------------
.text:000000000000445E                 align 20h
.text:0000000000004460
.text:0000000000004460 ; =============== S U B R O U T I N E =======================================
.text:0000000000004460
.text:0000000000004460 ; Attributes: info_from_lumina
.text:0000000000004460
.text:0000000000004460 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004460                 public quotearg_n_custom_mem
.text:0000000000004460 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004460                                         ; quotearg_custom+12↓j ...
.text:0000000000004460
.text:0000000000004460 var_48          = xmmword ptr -48h
.text:0000000000004460 var_38          = xmmword ptr -38h
.text:0000000000004460 var_28          = xmmword ptr -28h
.text:0000000000004460 var_18          = qword ptr -18h
.text:0000000000004460 var_10          = qword ptr -10h
.text:0000000000004460
.text:0000000000004460 ; __unwind {
.text:0000000000004460                 sub     rsp, 48h
.text:0000000000004464                 mov     r9, rcx
.text:0000000000004467                 mov     rcx, cs:qword_208250
.text:000000000000446E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004476                 mov     rax, fs:28h
.text:000000000000447F                 mov     [rsp+48h+var_10], rax
.text:0000000000004484                 xor     eax, eax
.text:0000000000004486                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000448A                 test    rsi, rsi
.text:000000000000448D                 mov     [rsp+48h+var_18], rcx
.text:0000000000004492                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000004499                 movdqa  xmm0, cs:xmmword_208230
.text:00000000000044A1                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000044A6                 movdqa  xmm0, cs:xmmword_208240
.text:00000000000044AE                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000044B3                 jz      short loc_44E7
.text:00000000000044B5                 test    rdx, rdx
.text:00000000000044B8                 jz      short loc_44E7
.text:00000000000044BA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:00000000000044BF                 mov     [rsp+48h+var_18], rdx
.text:00000000000044C4                 mov     rcx, rsp
.text:00000000000044C7                 mov     rdx, r8
.text:00000000000044CA                 mov     rsi, r9
.text:00000000000044CD                 call    quotearg_n_options
.text:00000000000044D2                 mov     rdi, [rsp+48h+var_10]
.text:00000000000044D7                 xor     rdi, fs:28h
.text:00000000000044E0                 jnz     short loc_44EC
.text:00000000000044E2                 add     rsp, 48h
.text:00000000000044E6                 retn
.text:00000000000044E7 ; ---------------------------------------------------------------------------
.text:00000000000044E7
.text:00000000000044E7 loc_44E7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:00000000000044E7                                         ; quotearg_n_custom_mem+58↑j
.text:00000000000044E7                 call    _abort
.text:00000000000044EC ; ---------------------------------------------------------------------------
.text:00000000000044EC
.text:00000000000044EC loc_44EC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:00000000000044EC                 call    ___stack_chk_fail
.text:00000000000044EC ; } // starts at 4460
.text:00000000000044EC quotearg_n_custom_mem endp
.text:00000000000044EC
.text:00000000000044EC ; ---------------------------------------------------------------------------
.text:00000000000044F1                 align 20h
.text:0000000000004500
.text:0000000000004500 ; =============== S U B R O U T I N E =======================================
.text:0000000000004500
.text:0000000000004500
.text:0000000000004500                 public quotearg_n_custom
.text:0000000000004500 quotearg_n_custom proc near
.text:0000000000004500 ; __unwind {
.text:0000000000004500                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004507                 jmp     quotearg_n_custom_mem
.text:0000000000004507 ; } // starts at 4500
.text:0000000000004507 quotearg_n_custom endp
.text:0000000000004507
.text:0000000000004507 ; ---------------------------------------------------------------------------
.text:000000000000450C                 align 10h
.text:0000000000004510
.text:0000000000004510 ; =============== S U B R O U T I N E =======================================
.text:0000000000004510
.text:0000000000004510
.text:0000000000004510                 public quotearg_custom
.text:0000000000004510 quotearg_custom proc near
.text:0000000000004510 ; __unwind {
.text:0000000000004510                 mov     rcx, rdx
.text:0000000000004513                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000451A                 mov     rdx, rsi
.text:000000000000451D                 mov     rsi, rdi
.text:0000000000004520                 xor     edi, edi
.text:0000000000004522                 jmp     quotearg_n_custom_mem
.text:0000000000004522 ; } // starts at 4510
.text:0000000000004522 quotearg_custom endp
.text:0000000000004522
.text:0000000000004522 ; ---------------------------------------------------------------------------
.text:0000000000004527                 align 10h
.text:0000000000004530
.text:0000000000004530 ; =============== S U B R O U T I N E =======================================
.text:0000000000004530
.text:0000000000004530
.text:0000000000004530                 public quotearg_custom_mem
.text:0000000000004530 quotearg_custom_mem proc near
.text:0000000000004530 ; __unwind {
.text:0000000000004530                 mov     r8, rcx
.text:0000000000004533                 mov     rcx, rdx
.text:0000000000004536                 mov     rdx, rsi
.text:0000000000004539                 mov     rsi, rdi
.text:000000000000453C                 xor     edi, edi
.text:000000000000453E                 jmp     quotearg_n_custom_mem
.text:000000000000453E ; } // starts at 4530
.text:000000000000453E quotearg_custom_mem endp
.text:000000000000453E
.text:000000000000453E ; ---------------------------------------------------------------------------
.text:0000000000004543                 align 10h
.text:0000000000004550
.text:0000000000004550 ; =============== S U B R O U T I N E =======================================
.text:0000000000004550
.text:0000000000004550
.text:0000000000004550                 public quote_n_mem
.text:0000000000004550 quote_n_mem     proc near
.text:0000000000004550 ; __unwind {
.text:0000000000004550                 lea     rcx, quote_quoting_options
.text:0000000000004557                 jmp     quotearg_n_options
.text:0000000000004557 ; } // starts at 4550
.text:0000000000004557 quote_n_mem     endp
.text:0000000000004557
.text:0000000000004557 ; ---------------------------------------------------------------------------
.text:000000000000455C                 align 20h
.text:0000000000004560
.text:0000000000004560 ; =============== S U B R O U T I N E =======================================
.text:0000000000004560
.text:0000000000004560
.text:0000000000004560                 public quote_mem
.text:0000000000004560 quote_mem       proc near
.text:0000000000004560 ; __unwind {
.text:0000000000004560                 lea     rcx, quote_quoting_options
.text:0000000000004567                 mov     rdx, rsi
.text:000000000000456A                 mov     rsi, rdi
.text:000000000000456D                 xor     edi, edi
.text:000000000000456F                 jmp     quotearg_n_options
.text:000000000000456F ; } // starts at 4560
.text:000000000000456F quote_mem       endp
.text:000000000000456F
.text:000000000000456F ; ---------------------------------------------------------------------------
.text:0000000000004574                 align 20h
.text:0000000000004580
.text:0000000000004580 ; =============== S U B R O U T I N E =======================================
.text:0000000000004580
.text:0000000000004580
.text:0000000000004580                 public quote_n
.text:0000000000004580 quote_n         proc near
.text:0000000000004580 ; __unwind {
.text:0000000000004580                 lea     rcx, quote_quoting_options
.text:0000000000004587                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000458E                 jmp     quotearg_n_options
.text:000000000000458E ; } // starts at 4580
.text:000000000000458E quote_n         endp
.text:000000000000458E
.text:000000000000458E ; ---------------------------------------------------------------------------
.text:0000000000004593                 align 20h
.text:00000000000045A0
.text:00000000000045A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045A0
.text:00000000000045A0
.text:00000000000045A0                 public quote
.text:00000000000045A0 quote           proc near
.text:00000000000045A0 ; __unwind {
.text:00000000000045A0                 lea     rcx, quote_quoting_options
.text:00000000000045A7                 mov     rsi, rdi
.text:00000000000045AA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000045B1                 xor     edi, edi
.text:00000000000045B3                 jmp     quotearg_n_options
.text:00000000000045B3 ; } // starts at 45A0
.text:00000000000045B3 quote           endp
.text:00000000000045B3
.text:00000000000045B3 ; ---------------------------------------------------------------------------
.text:00000000000045B8                 align 20h
.text:00000000000045C0
.text:00000000000045C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045C0
.text:00000000000045C0
.text:00000000000045C0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000045C0                 public version_etc_arn
.text:00000000000045C0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_49FB↓j
.text:00000000000045C0                                         ; version_etc_va:loc_4A4B↓p ...
.text:00000000000045C0
.text:00000000000045C0 var_58          = qword ptr -58h
.text:00000000000045C0 var_50          = qword ptr -50h
.text:00000000000045C0 var_48          = qword ptr -48h
.text:00000000000045C0 var_40          = qword ptr -40h
.text:00000000000045C0
.text:00000000000045C0 ; __unwind {
.text:00000000000045C0                 push    r15
.text:00000000000045C2                 push    r14
.text:00000000000045C4                 push    r13
.text:00000000000045C6                 push    r12
.text:00000000000045C8                 mov     r12, r9
.text:00000000000045CB                 push    rbp
.text:00000000000045CC                 push    rbx
.text:00000000000045CD                 mov     rbp, rdi
.text:00000000000045D0                 mov     rbx, r8
.text:00000000000045D3                 sub     rsp, 28h
.text:00000000000045D7                 test    rsi, rsi
.text:00000000000045DA                 jz      loc_46F8
.text:00000000000045E0                 mov     r8, rdx
.text:00000000000045E3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:00000000000045EA                 mov     r9, rcx
.text:00000000000045ED                 xor     eax, eax
.text:00000000000045EF                 mov     rcx, rsi
.text:00000000000045F2                 mov     esi, 1
.text:00000000000045F7                 call    ___fprintf_chk
.text:00000000000045FC
.text:00000000000045FC loc_45FC:                               ; CODE XREF: version_etc_arn+151↓j
.text:00000000000045FC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000004603                 xor     edi, edi        ; domainname
.text:0000000000004605                 mov     edx, 5          ; category
.text:000000000000460A                 call    _dcgettext
.text:000000000000460F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004616                 mov     rcx, rax
.text:0000000000004619                 mov     r8d, 7E3h
.text:000000000000461F                 mov     esi, 1
.text:0000000000004624                 mov     rdi, rbp
.text:0000000000004627                 xor     eax, eax
.text:0000000000004629                 call    ___fprintf_chk
.text:000000000000462E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004635                 xor     edi, edi        ; domainname
.text:0000000000004637                 mov     edx, 5          ; category
.text:000000000000463C                 call    _dcgettext
.text:0000000000004641                 mov     rsi, rbp        ; stream
.text:0000000000004644                 mov     rdi, rax        ; s
.text:0000000000004647                 call    _fputs_unlocked
.text:000000000000464C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004650                 ja      def_4664        ; jumptable 0000000000004664 default case
.text:0000000000004656                 lea     rdx, jpt_4664
.text:000000000000465D                 movsxd  rax, ds:(jpt_4664 - 5EA8h)[rdx+r12*4]
.text:0000000000004661                 add     rax, rdx
.text:0000000000004664                 jmp     rax             ; switch jump
.text:0000000000004664 ; ---------------------------------------------------------------------------
.text:0000000000004666                 align 10h
.text:0000000000004670
.text:0000000000004670 loc_4670:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004670                                         ; DATA XREF: .rodata:jpt_4664↓o
.text:0000000000004670                 mov     r9, [rbx+38h]   ; jumptable 0000000000004664 case 8
.text:0000000000004674                 mov     rax, [rbx+10h]
.text:0000000000004678                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000467F                 mov     r8, [rbx+8]
.text:0000000000004683                 mov     edx, 5          ; category
.text:0000000000004688                 xor     edi, edi        ; domainname
.text:000000000000468A                 mov     r13, [rbx+30h]
.text:000000000000468E                 mov     r12, [rbx+28h]
.text:0000000000004692                 mov     [rsp+58h+var_48], r9
.text:0000000000004697                 mov     r15, [rbx+20h]
.text:000000000000469B                 mov     r14, [rbx+18h]
.text:000000000000469F                 mov     [rsp+58h+var_58], rax
.text:00000000000046A3                 mov     [rsp+58h+var_50], r8
.text:00000000000046A8                 mov     rbx, [rbx]
.text:00000000000046AB                 call    _dcgettext
.text:00000000000046B0                 sub     rsp, 8
.text:00000000000046B4
.text:00000000000046B4 loc_46B4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:00000000000046B4                 mov     r9, [rsp+60h+var_48]
.text:00000000000046B9                 mov     rdx, rax
.text:00000000000046BC                 mov     rcx, rbx
.text:00000000000046BF                 mov     esi, 1
.text:00000000000046C4                 mov     rdi, rbp
.text:00000000000046C7                 xor     eax, eax
.text:00000000000046C9                 push    r9
.text:00000000000046CB                 push    r13
.text:00000000000046CD                 push    r12
.text:00000000000046CF                 push    r15
.text:00000000000046D1                 push    r14
.text:00000000000046D3                 mov     r9, [rsp+88h+var_58]
.text:00000000000046D8                 mov     r8, [rsp+88h+var_50]
.text:00000000000046DD                 call    ___fprintf_chk
.text:00000000000046E2                 add     rsp, 30h
.text:00000000000046E6
.text:00000000000046E6 loc_46E6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000046E6                                         ; DATA XREF: .rodata:jpt_4664↓o
.text:00000000000046E6                 add     rsp, 28h        ; jumptable 0000000000004664 case 0
.text:00000000000046EA                 pop     rbx
.text:00000000000046EB                 pop     rbp
.text:00000000000046EC                 pop     r12
.text:00000000000046EE                 pop     r13
.text:00000000000046F0                 pop     r14
.text:00000000000046F2                 pop     r15
.text:00000000000046F4                 retn
.text:00000000000046F4 ; ---------------------------------------------------------------------------
.text:00000000000046F5                 align 8
.text:00000000000046F8
.text:00000000000046F8 loc_46F8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:00000000000046F8                 mov     r8, rcx
.text:00000000000046FB                 mov     rcx, rdx
.text:00000000000046FE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000004705                 mov     esi, 1
.text:000000000000470A                 xor     eax, eax
.text:000000000000470C                 call    ___fprintf_chk
.text:0000000000004711                 jmp     loc_45FC
.text:0000000000004711 ; ---------------------------------------------------------------------------
.text:0000000000004716                 align 20h
.text:0000000000004720
.text:0000000000004720 loc_4720:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004720                                         ; DATA XREF: .rodata:jpt_4664↓o
.text:0000000000004720                 mov     r10, [rbx+40h]  ; jumptable 0000000000004664 case 9
.text:0000000000004724                 mov     r9, [rbx+38h]
.text:0000000000004728                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000472F                 mov     rax, [rbx+10h]
.text:0000000000004733                 mov     r8, [rbx+8]
.text:0000000000004737                 mov     edx, 5          ; category
.text:000000000000473C                 mov     r13, [rbx+30h]
.text:0000000000004740                 mov     r12, [rbx+28h]
.text:0000000000004744                 mov     r15, [rbx+20h]
.text:0000000000004748                 mov     r14, [rbx+18h]
.text:000000000000474C                 mov     rbx, [rbx]
.text:000000000000474F                 mov     [rsp+58h+var_40], r10
.text:0000000000004754                 mov     [rsp+58h+var_48], r9
.text:0000000000004759                 mov     [rsp+58h+var_58], rax
.text:000000000000475D                 mov     [rsp+58h+var_50], r8
.text:0000000000004762
.text:0000000000004762 loc_4762:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004762                 xor     edi, edi        ; domainname
.text:0000000000004764                 call    _dcgettext
.text:0000000000004769                 mov     r10, [rsp+58h+var_40]
.text:000000000000476E                 push    r10
.text:0000000000004770                 jmp     loc_46B4
.text:0000000000004770 ; ---------------------------------------------------------------------------
.text:0000000000004775                 align 8
.text:0000000000004778
.text:0000000000004778 loc_4778:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004778                                         ; DATA XREF: .rodata:jpt_4664↓o
.text:0000000000004778                 mov     rbx, [rbx]      ; jumptable 0000000000004664 case 1
.text:000000000000477B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000004782                 mov     edx, 5          ; category
.text:0000000000004787                 xor     edi, edi        ; domainname
.text:0000000000004789                 call    _dcgettext
.text:000000000000478E                 add     rsp, 28h
.text:0000000000004792                 mov     rcx, rbx
.text:0000000000004795                 mov     rdi, rbp
.text:0000000000004798                 pop     rbx
.text:0000000000004799                 pop     rbp
.text:000000000000479A                 pop     r12
.text:000000000000479C                 pop     r13
.text:000000000000479E                 pop     r14
.text:00000000000047A0                 pop     r15
.text:00000000000047A2                 mov     rdx, rax
.text:00000000000047A5                 mov     esi, 1
.text:00000000000047AA                 xor     eax, eax
.text:00000000000047AC                 jmp     ___fprintf_chk
.text:00000000000047AC ; ---------------------------------------------------------------------------
.text:00000000000047B1                 align 8
.text:00000000000047B8
.text:00000000000047B8 loc_47B8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000047B8                                         ; DATA XREF: .rodata:jpt_4664↓o
.text:00000000000047B8                 mov     r12, [rbx+8]    ; jumptable 0000000000004664 case 2
.text:00000000000047BC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000047C3                 mov     rbx, [rbx]
.text:00000000000047C6                 mov     edx, 5          ; category
.text:00000000000047CB                 xor     edi, edi        ; domainname
.text:00000000000047CD                 call    _dcgettext
.text:00000000000047D2                 add     rsp, 28h
.text:00000000000047D6                 mov     r8, r12
.text:00000000000047D9                 mov     rcx, rbx
.text:00000000000047DC                 mov     rdi, rbp
.text:00000000000047DF                 mov     rdx, rax
.text:00000000000047E2                 mov     esi, 1
.text:00000000000047E7                 pop     rbx
.text:00000000000047E8                 pop     rbp
.text:00000000000047E9                 pop     r12
.text:00000000000047EB                 pop     r13
.text:00000000000047ED                 pop     r14
.text:00000000000047EF                 pop     r15
.text:00000000000047F1                 xor     eax, eax
.text:00000000000047F3                 jmp     ___fprintf_chk
.text:00000000000047F3 ; ---------------------------------------------------------------------------
.text:00000000000047F8                 align 20h
.text:0000000000004800
.text:0000000000004800 loc_4800:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004800                                         ; DATA XREF: .rodata:jpt_4664↓o
.text:0000000000004800                 mov     r13, [rbx+10h]  ; jumptable 0000000000004664 case 3
.text:0000000000004804                 mov     r12, [rbx+8]
.text:0000000000004808                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000480F                 mov     rbx, [rbx]
.text:0000000000004812                 mov     edx, 5          ; category
.text:0000000000004817                 xor     edi, edi        ; domainname
.text:0000000000004819                 call    _dcgettext
.text:000000000000481E                 add     rsp, 28h
.text:0000000000004822                 mov     r9, r13
.text:0000000000004825                 mov     r8, r12
.text:0000000000004828                 mov     rcx, rbx
.text:000000000000482B                 mov     rdi, rbp
.text:000000000000482E                 mov     rdx, rax
.text:0000000000004831                 pop     rbx
.text:0000000000004832                 pop     rbp
.text:0000000000004833                 pop     r12
.text:0000000000004835                 pop     r13
.text:0000000000004837                 pop     r14
.text:0000000000004839                 pop     r15
.text:000000000000483B                 mov     esi, 1
.text:0000000000004840                 xor     eax, eax
.text:0000000000004842                 jmp     ___fprintf_chk
.text:0000000000004842 ; ---------------------------------------------------------------------------
.text:0000000000004847                 align 10h
.text:0000000000004850
.text:0000000000004850 loc_4850:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004850                                         ; DATA XREF: .rodata:jpt_4664↓o
.text:0000000000004850                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004664 case 4
.text:0000000000004857                 mov     edx, 5          ; category
.text:000000000000485C                 xor     edi, edi        ; domainname
.text:000000000000485E                 mov     r14, [rbx+18h]
.text:0000000000004862                 mov     r13, [rbx+10h]
.text:0000000000004866                 mov     r12, [rbx+8]
.text:000000000000486A                 mov     rbx, [rbx]
.text:000000000000486D                 call    _dcgettext
.text:0000000000004872                 sub     rsp, 8
.text:0000000000004876
.text:0000000000004876 loc_4876:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000004876                 push    r14
.text:0000000000004878                 mov     rdx, rax
.text:000000000000487B                 mov     r9, r13
.text:000000000000487E                 mov     r8, r12
.text:0000000000004881                 mov     rcx, rbx
.text:0000000000004884                 mov     rdi, rbp
.text:0000000000004887                 mov     esi, 1
.text:000000000000488C                 xor     eax, eax
.text:000000000000488E                 call    ___fprintf_chk
.text:0000000000004893                 pop     rax
.text:0000000000004894                 pop     rdx
.text:0000000000004895                 add     rsp, 28h
.text:0000000000004899                 pop     rbx
.text:000000000000489A                 pop     rbp
.text:000000000000489B                 pop     r12
.text:000000000000489D                 pop     r13
.text:000000000000489F                 pop     r14
.text:00000000000048A1                 pop     r15
.text:00000000000048A3                 retn
.text:00000000000048A3 ; ---------------------------------------------------------------------------
.text:00000000000048A4                 align 8
.text:00000000000048A8
.text:00000000000048A8 loc_48A8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000048A8                                         ; DATA XREF: .rodata:jpt_4664↓o
.text:00000000000048A8                 mov     r15, [rbx+20h]  ; jumptable 0000000000004664 case 5
.text:00000000000048AC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:00000000000048B3                 mov     edx, 5          ; category
.text:00000000000048B8                 xor     edi, edi        ; domainname
.text:00000000000048BA                 mov     r14, [rbx+18h]
.text:00000000000048BE                 mov     r13, [rbx+10h]
.text:00000000000048C2                 mov     r12, [rbx+8]
.text:00000000000048C6                 mov     rbx, [rbx]
.text:00000000000048C9                 call    _dcgettext
.text:00000000000048CE                 push    r15
.text:00000000000048D0                 jmp     short loc_4876
.text:00000000000048D0 ; ---------------------------------------------------------------------------
.text:00000000000048D2                 align 8
.text:00000000000048D8
.text:00000000000048D8 loc_48D8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000048D8                                         ; DATA XREF: .rodata:jpt_4664↓o
.text:00000000000048D8                 mov     r8, [rbx+8]     ; jumptable 0000000000004664 case 6
.text:00000000000048DC                 mov     r12, [rbx+28h]
.text:00000000000048E0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:00000000000048E7                 mov     r15, [rbx+20h]
.text:00000000000048EB                 mov     r14, [rbx+18h]
.text:00000000000048EF                 mov     edx, 5          ; category
.text:00000000000048F4                 mov     r13, [rbx+10h]
.text:00000000000048F8                 xor     edi, edi        ; domainname
.text:00000000000048FA                 mov     rbx, [rbx]
.text:00000000000048FD                 mov     [rsp+58h+var_58], r8
.text:0000000000004901                 call    _dcgettext
.text:0000000000004906                 sub     rsp, 8
.text:000000000000490A                 mov     r9, r13
.text:000000000000490D                 push    r12
.text:000000000000490F                 push    r15
.text:0000000000004911                 push    r14
.text:0000000000004913
.text:0000000000004913 loc_4913:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004913                 mov     r8, [rsp+78h+var_58]
.text:0000000000004918                 mov     rcx, rbx
.text:000000000000491B                 mov     rdx, rax
.text:000000000000491E                 mov     rdi, rbp
.text:0000000000004921                 mov     esi, 1
.text:0000000000004926                 xor     eax, eax
.text:0000000000004928                 call    ___fprintf_chk
.text:000000000000492D                 add     rsp, 20h
.text:0000000000004931                 add     rsp, 28h
.text:0000000000004935                 pop     rbx
.text:0000000000004936                 pop     rbp
.text:0000000000004937                 pop     r12
.text:0000000000004939                 pop     r13
.text:000000000000493B                 pop     r14
.text:000000000000493D                 pop     r15
.text:000000000000493F                 retn
.text:0000000000004940 ; ---------------------------------------------------------------------------
.text:0000000000004940
.text:0000000000004940 loc_4940:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004940                                         ; DATA XREF: .rodata:jpt_4664↓o
.text:0000000000004940                 mov     r9, [rbx+10h]   ; jumptable 0000000000004664 case 7
.text:0000000000004944                 mov     r13, [rbx+30h]
.text:0000000000004948                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000494F                 mov     r12, [rbx+28h]
.text:0000000000004953                 mov     r15, [rbx+20h]
.text:0000000000004957                 mov     edx, 5          ; category
.text:000000000000495C                 mov     r14, [rbx+18h]
.text:0000000000004960                 mov     r8, [rbx+8]
.text:0000000000004964                 xor     edi, edi        ; domainname
.text:0000000000004966                 mov     [rsp+58h+var_50], r9
.text:000000000000496B                 mov     rbx, [rbx]
.text:000000000000496E                 mov     [rsp+58h+var_58], r8
.text:0000000000004972                 call    _dcgettext
.text:0000000000004977                 push    r13
.text:0000000000004979                 push    r12
.text:000000000000497B                 push    r15
.text:000000000000497D                 push    r14
.text:000000000000497F                 mov     r9, [rsp+78h+var_50]
.text:0000000000004984                 jmp     short loc_4913
.text:0000000000004984 ; ---------------------------------------------------------------------------
.text:0000000000004986                 align 10h
.text:0000000000004990
.text:0000000000004990 def_4664:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004990                 mov     r10, [rbx+40h]  ; jumptable 0000000000004664 default case
.text:0000000000004994                 mov     r9, [rbx+38h]
.text:0000000000004998                 mov     edx, 5
.text:000000000000499D                 mov     rax, [rbx+10h]
.text:00000000000049A1                 mov     r8, [rbx+8]
.text:00000000000049A5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000049AC                 mov     r13, [rbx+30h]
.text:00000000000049B0                 mov     r12, [rbx+28h]
.text:00000000000049B4                 mov     r15, [rbx+20h]
.text:00000000000049B8                 mov     r14, [rbx+18h]
.text:00000000000049BC                 mov     [rsp+58h+var_40], r10
.text:00000000000049C1                 mov     [rsp+58h+var_48], r9
.text:00000000000049C6                 mov     [rsp+58h+var_58], rax
.text:00000000000049CA                 mov     [rsp+58h+var_50], r8
.text:00000000000049CF                 mov     rbx, [rbx]
.text:00000000000049D2                 jmp     loc_4762
.text:00000000000049D2 ; } // starts at 45C0
.text:00000000000049D2 version_etc_arn endp
.text:00000000000049D2
.text:00000000000049D2 ; ---------------------------------------------------------------------------
.text:00000000000049D7                 align 20h
.text:00000000000049E0
.text:00000000000049E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049E0
.text:00000000000049E0 ; Attributes: info_from_lumina
.text:00000000000049E0
.text:00000000000049E0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:00000000000049E0                 public version_etc_ar
.text:00000000000049E0 version_etc_ar  proc near
.text:00000000000049E0 ; __unwind {
.text:00000000000049E0                 xor     r9d, r9d
.text:00000000000049E3                 cmp     qword ptr [r8], 0
.text:00000000000049E7                 jz      short loc_49FB
.text:00000000000049E9                 nop     dword ptr [rax+00000000h]
.text:00000000000049F0
.text:00000000000049F0 loc_49F0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000049F0                 add     r9, 1
.text:00000000000049F4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000049F9                 jnz     short loc_49F0
.text:00000000000049FB
.text:00000000000049FB loc_49FB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000049FB                 jmp     version_etc_arn
.text:00000000000049FB ; } // starts at 49E0
.text:00000000000049FB version_etc_ar  endp
.text:00000000000049FB
.text:0000000000004A00
.text:0000000000004A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A00
.text:0000000000004A00 ; Attributes: info_from_lumina
.text:0000000000004A00
.text:0000000000004A00 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004A00                 public version_etc_va
.text:0000000000004A00 version_etc_va  proc near
.text:0000000000004A00
.text:0000000000004A00 authtab         = qword ptr -68h
.text:0000000000004A00 var_10          = qword ptr -10h
.text:0000000000004A00
.text:0000000000004A00 ; __unwind {
.text:0000000000004A00                 sub     rsp, 68h
.text:0000000000004A04                 mov     r10, r8
.text:0000000000004A07                 xor     r9d, r9d
.text:0000000000004A0A                 mov     rax, fs:28h
.text:0000000000004A13                 mov     [rsp+68h+var_10], rax
.text:0000000000004A18                 xor     eax, eax
.text:0000000000004A1A                 mov     r8, rsp
.text:0000000000004A1D                 nop     dword ptr [rax]
.text:0000000000004A20
.text:0000000000004A20 loc_4A20:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004A20                 mov     eax, [r10]
.text:0000000000004A23                 cmp     eax, 2Fh ; '/'
.text:0000000000004A26                 ja      short loc_4A6A
.text:0000000000004A28                 mov     r11d, eax
.text:0000000000004A2B                 add     r11, [r10+10h]
.text:0000000000004A2F                 add     eax, 8
.text:0000000000004A32                 mov     [r10], eax
.text:0000000000004A35
.text:0000000000004A35 loc_4A35:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004A35                 mov     rax, [r11]
.text:0000000000004A38                 test    rax, rax
.text:0000000000004A3B                 mov     [r8+r9*8], rax
.text:0000000000004A3F                 jz      short loc_4A4B
.text:0000000000004A41                 add     r9, 1
.text:0000000000004A45                 cmp     r9, 0Ah
.text:0000000000004A49                 jnz     short loc_4A20
.text:0000000000004A4B
.text:0000000000004A4B loc_4A4B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000004A4B                 call    version_etc_arn
.text:0000000000004A50                 mov     rax, [rsp+68h+var_10]
.text:0000000000004A55                 xor     rax, fs:28h
.text:0000000000004A5E                 jnz     short loc_4A65
.text:0000000000004A60                 add     rsp, 68h
.text:0000000000004A64                 retn
.text:0000000000004A65 ; ---------------------------------------------------------------------------
.text:0000000000004A65
.text:0000000000004A65 loc_4A65:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004A65                 call    ___stack_chk_fail
.text:0000000000004A6A ; ---------------------------------------------------------------------------
.text:0000000000004A6A
.text:0000000000004A6A loc_4A6A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000004A6A                 mov     r11, [r10+8]
.text:0000000000004A6E                 lea     rax, [r11+8]
.text:0000000000004A72                 mov     [r10+8], rax
.text:0000000000004A76                 jmp     short loc_4A35
.text:0000000000004A76 ; } // starts at 4A00
.text:0000000000004A76 version_etc_va  endp
.text:0000000000004A76
.text:0000000000004A76 ; ---------------------------------------------------------------------------
.text:0000000000004A78                 align 20h
.text:0000000000004A80
.text:0000000000004A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A80
.text:0000000000004A80 ; Attributes: info_from_lumina
.text:0000000000004A80
.text:0000000000004A80 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000004A80                 public version_etc
.text:0000000000004A80 version_etc     proc near               ; CODE XREF: main+F5↑p
.text:0000000000004A80
.text:0000000000004A80 var_C0          = dword ptr -0C0h
.text:0000000000004A80 var_B8          = qword ptr -0B8h
.text:0000000000004A80 var_B0          = qword ptr -0B0h
.text:0000000000004A80 var_A8          = byte ptr -0A8h
.text:0000000000004A80 var_50          = qword ptr -50h
.text:0000000000004A80 var_48          = byte ptr -48h
.text:0000000000004A80 var_28          = qword ptr -28h
.text:0000000000004A80 var_20          = qword ptr -20h
.text:0000000000004A80 arg_0           = byte ptr  8
.text:0000000000004A80
.text:0000000000004A80 ; __unwind {
.text:0000000000004A80                 push    rbp
.text:0000000000004A81                 push    rbx
.text:0000000000004A82                 mov     r10d, 20h ; ' '
.text:0000000000004A88                 xor     r11d, r11d
.text:0000000000004A8B                 sub     rsp, 0B8h
.text:0000000000004A92                 mov     rax, fs:28h
.text:0000000000004A9B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000004AA0                 xor     eax, eax
.text:0000000000004AA2                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000004AAA                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004AB2                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000004ABA                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000004ABF                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004AC7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000004ACF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004AD4                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000004ADC                 xor     r9d, r9d
.text:0000000000004ADF                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004AE4                 mov     rbp, rax
.text:0000000000004AE7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004AF0
.text:0000000000004AF0 loc_4AF0:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004AF0                 cmp     r10d, 2Fh ; '/'
.text:0000000000004AF4                 ja      short loc_4B4C
.text:0000000000004AF6                 mov     eax, r10d
.text:0000000000004AF9                 mov     r11d, 1
.text:0000000000004AFF                 add     r10d, 8
.text:0000000000004B03                 add     rax, rbp
.text:0000000000004B06
.text:0000000000004B06 loc_4B06:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004B06                 mov     rax, [rax]
.text:0000000000004B09                 test    rax, rax
.text:0000000000004B0C                 mov     [r8+r9*8], rax
.text:0000000000004B10                 jz      short loc_4B1C
.text:0000000000004B12                 add     r9, 1
.text:0000000000004B16                 cmp     r9, 0Ah
.text:0000000000004B1A                 jnz     short loc_4AF0
.text:0000000000004B1C
.text:0000000000004B1C loc_4B1C:                               ; CODE XREF: version_etc+90↑j
.text:0000000000004B1C                 test    r11b, r11b
.text:0000000000004B1F                 jnz     short loc_4B45
.text:0000000000004B21
.text:0000000000004B21 loc_4B21:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004B21                 call    version_etc_arn
.text:0000000000004B26                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000004B2B                 xor     rax, fs:28h
.text:0000000000004B34                 jnz     short loc_4B40
.text:0000000000004B36                 add     rsp, 0B8h
.text:0000000000004B3D                 pop     rbx
.text:0000000000004B3E                 pop     rbp
.text:0000000000004B3F                 retn
.text:0000000000004B40 ; ---------------------------------------------------------------------------
.text:0000000000004B40
.text:0000000000004B40 loc_4B40:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004B40                 call    ___stack_chk_fail
.text:0000000000004B45 ; ---------------------------------------------------------------------------
.text:0000000000004B45
.text:0000000000004B45 loc_4B45:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004B45                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000004B4A                 jmp     short loc_4B21
.text:0000000000004B4C ; ---------------------------------------------------------------------------
.text:0000000000004B4C
.text:0000000000004B4C loc_4B4C:                               ; CODE XREF: version_etc+74↑j
.text:0000000000004B4C                 mov     rax, rbx
.text:0000000000004B4F                 add     rbx, 8
.text:0000000000004B53                 jmp     short loc_4B06
.text:0000000000004B53 ; } // starts at 4A80
.text:0000000000004B53 version_etc     endp
.text:0000000000004B53
.text:0000000000004B53 ; ---------------------------------------------------------------------------
.text:0000000000004B55                 align 20h
.text:0000000000004B60
.text:0000000000004B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B60
.text:0000000000004B60 ; Attributes: info_from_lumina
.text:0000000000004B60
.text:0000000000004B60 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004B60                 public emit_bug_reporting_address
.text:0000000000004B60 emit_bug_reporting_address proc near
.text:0000000000004B60 ; __unwind {
.text:0000000000004B60                 push    rbx
.text:0000000000004B61                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004B68                 mov     edx, 5          ; category
.text:0000000000004B6D                 xor     edi, edi        ; domainname
.text:0000000000004B6F                 call    _dcgettext
.text:0000000000004B74                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000004B7B                 mov     rsi, rax
.text:0000000000004B7E                 mov     edi, 1
.text:0000000000004B83                 xor     eax, eax
.text:0000000000004B85                 call    ___printf_chk
.text:0000000000004B8A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004B91                 mov     edx, 5          ; category
.text:0000000000004B96                 xor     edi, edi        ; domainname
.text:0000000000004B98                 call    _dcgettext
.text:0000000000004B9D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004BA4                 lea     rdx, unk_5285
.text:0000000000004BAB                 mov     rsi, rax
.text:0000000000004BAE                 mov     edi, 1
.text:0000000000004BB3                 xor     eax, eax
.text:0000000000004BB5                 call    ___printf_chk
.text:0000000000004BBA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004BC1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004BC8                 xor     edi, edi        ; domainname
.text:0000000000004BCA                 mov     edx, 5          ; category
.text:0000000000004BCF                 call    _dcgettext
.text:0000000000004BD4                 mov     rsi, rbx        ; stream
.text:0000000000004BD7                 mov     rdi, rax        ; s
.text:0000000000004BDA                 pop     rbx
.text:0000000000004BDB                 jmp     _fputs_unlocked
.text:0000000000004BDB ; } // starts at 4B60
.text:0000000000004BDB emit_bug_reporting_address endp
.text:0000000000004BDB
.text:0000000000004BE0
.text:0000000000004BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BE0
.text:0000000000004BE0
.text:0000000000004BE0                 public xmalloc
.text:0000000000004BE0 xmalloc         proc near               ; CODE XREF: paste_parallel+1A↑p
.text:0000000000004BE0                                         ; paste_parallel+55↑p ...
.text:0000000000004BE0 ; __unwind {
.text:0000000000004BE0                 push    rbx
.text:0000000000004BE1                 mov     rbx, rdi
.text:0000000000004BE4                 call    _malloc
.text:0000000000004BE9                 test    rax, rax
.text:0000000000004BEC                 jnz     short loc_4BF3
.text:0000000000004BEE                 test    rbx, rbx
.text:0000000000004BF1                 jnz     short loc_4BF5
.text:0000000000004BF3
.text:0000000000004BF3 loc_4BF3:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004BF3                 pop     rbx
.text:0000000000004BF4                 retn
.text:0000000000004BF5 ; ---------------------------------------------------------------------------
.text:0000000000004BF5
.text:0000000000004BF5 loc_4BF5:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004BF5                 call    xalloc_die
.text:0000000000004BF5 ; } // starts at 4BE0
.text:0000000000004BF5 xmalloc         endp
.text:0000000000004BF5
.text:0000000000004BF5 ; ---------------------------------------------------------------------------
.text:0000000000004BFA                 align 20h
.text:0000000000004C00
.text:0000000000004C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C00
.text:0000000000004C00 ; Attributes: info_from_lumina
.text:0000000000004C00
.text:0000000000004C00 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004C00                 public xnmalloc
.text:0000000000004C00 xnmalloc        proc near
.text:0000000000004C00 ; __unwind {
.text:0000000000004C00                 mov     rax, rdi
.text:0000000000004C03                 mul     rsi
.text:0000000000004C06                 mov     rdi, rax
.text:0000000000004C09                 seto    al
.text:0000000000004C0C                 test    rdi, rdi
.text:0000000000004C0F                 js      short loc_4C1B
.text:0000000000004C11                 movzx   eax, al
.text:0000000000004C14                 test    rax, rax
.text:0000000000004C17                 jnz     short loc_4C1B
.text:0000000000004C19                 jmp     short xmalloc
.text:0000000000004C1B ; ---------------------------------------------------------------------------
.text:0000000000004C1B
.text:0000000000004C1B loc_4C1B:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000004C1B                                         ; xnmalloc+17↑j
.text:0000000000004C1B                 sub     rsp, 8
.text:0000000000004C1F                 call    xalloc_die
.text:0000000000004C1F ; } // starts at 4C00
.text:0000000000004C1F xnmalloc        endp
.text:0000000000004C1F
.text:0000000000004C1F ; ---------------------------------------------------------------------------
.text:0000000000004C24                 align 10h
.text:0000000000004C30
.text:0000000000004C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C30
.text:0000000000004C30
.text:0000000000004C30                 public xcharalloc
.text:0000000000004C30 xcharalloc      proc near
.text:0000000000004C30 ; __unwind {
.text:0000000000004C30                 jmp     short xmalloc
.text:0000000000004C30 ; } // starts at 4C30
.text:0000000000004C30 xcharalloc      endp
.text:0000000000004C30
.text:0000000000004C30 ; ---------------------------------------------------------------------------
.text:0000000000004C32                 align 20h
.text:0000000000004C40
.text:0000000000004C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C40
.text:0000000000004C40 ; Attributes: info_from_lumina
.text:0000000000004C40
.text:0000000000004C40 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004C40                 public xrealloc
.text:0000000000004C40 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004C40                                         ; quotearg_n_options+182↑p ...
.text:0000000000004C40 ; __unwind {
.text:0000000000004C40                 test    rsi, rsi
.text:0000000000004C43                 push    rbx
.text:0000000000004C44                 mov     rbx, rsi
.text:0000000000004C47                 jnz     short loc_4C4E
.text:0000000000004C49                 test    rdi, rdi
.text:0000000000004C4C                 jnz     short loc_4C68
.text:0000000000004C4E
.text:0000000000004C4E loc_4C4E:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000004C4E                 mov     rsi, rbx        ; size
.text:0000000000004C51                 call    _realloc
.text:0000000000004C56                 test    rax, rax
.text:0000000000004C59                 jnz     short loc_4C60
.text:0000000000004C5B                 test    rbx, rbx
.text:0000000000004C5E                 jnz     short loc_4C71
.text:0000000000004C60
.text:0000000000004C60 loc_4C60:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004C60                 pop     rbx
.text:0000000000004C61                 retn
.text:0000000000004C61 ; ---------------------------------------------------------------------------
.text:0000000000004C62                 align 8
.text:0000000000004C68
.text:0000000000004C68 loc_4C68:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004C68                 call    _free
.text:0000000000004C6D                 xor     eax, eax
.text:0000000000004C6F                 pop     rbx
.text:0000000000004C70                 retn
.text:0000000000004C71 ; ---------------------------------------------------------------------------
.text:0000000000004C71
.text:0000000000004C71 loc_4C71:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004C71                 call    xalloc_die
.text:0000000000004C71 ; } // starts at 4C40
.text:0000000000004C71 xrealloc        endp
.text:0000000000004C71
.text:0000000000004C71 ; ---------------------------------------------------------------------------
.text:0000000000004C76                 align 20h
.text:0000000000004C80
.text:0000000000004C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C80
.text:0000000000004C80 ; Attributes: info_from_lumina
.text:0000000000004C80
.text:0000000000004C80 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004C80                 public xnrealloc
.text:0000000000004C80 xnrealloc       proc near
.text:0000000000004C80 ; __unwind {
.text:0000000000004C80                 mov     rax, rsi
.text:0000000000004C83                 mul     rdx
.text:0000000000004C86                 mov     rsi, rax
.text:0000000000004C89                 seto    al
.text:0000000000004C8C                 test    rsi, rsi
.text:0000000000004C8F                 js      short loc_4C9B
.text:0000000000004C91                 movzx   eax, al
.text:0000000000004C94                 test    rax, rax
.text:0000000000004C97                 jnz     short loc_4C9B
.text:0000000000004C99                 jmp     short xrealloc
.text:0000000000004C9B ; ---------------------------------------------------------------------------
.text:0000000000004C9B
.text:0000000000004C9B loc_4C9B:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000004C9B                                         ; xnrealloc+17↑j
.text:0000000000004C9B                 sub     rsp, 8
.text:0000000000004C9F                 call    xalloc_die
.text:0000000000004C9F ; } // starts at 4C80
.text:0000000000004C9F xnrealloc       endp
.text:0000000000004C9F
.text:0000000000004C9F ; ---------------------------------------------------------------------------
.text:0000000000004CA4                 align 10h
.text:0000000000004CB0
.text:0000000000004CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CB0
.text:0000000000004CB0 ; Attributes: info_from_lumina
.text:0000000000004CB0
.text:0000000000004CB0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004CB0                 public x2nrealloc
.text:0000000000004CB0 x2nrealloc      proc near
.text:0000000000004CB0 ; __unwind {
.text:0000000000004CB0                 test    rdi, rdi
.text:0000000000004CB3                 mov     r9, rdx
.text:0000000000004CB6                 mov     rcx, [rsi]
.text:0000000000004CB9                 jz      short loc_4CF0
.text:0000000000004CBB                 xor     edx, edx
.text:0000000000004CBD                 mov     rax, 5555555555555554h
.text:0000000000004CC7                 div     r9
.text:0000000000004CCA                 cmp     rax, rcx
.text:0000000000004CCD                 jbe     short loc_4D0B
.text:0000000000004CCF                 mov     rax, rcx
.text:0000000000004CD2                 shr     rax, 1
.text:0000000000004CD5                 lea     rcx, [rax+rcx+1]
.text:0000000000004CDA
.text:0000000000004CDA loc_4CDA:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000004CDA                 mov     [rsi], rcx
.text:0000000000004CDD                 imul    rcx, r9
.text:0000000000004CE1                 mov     rsi, rcx
.text:0000000000004CE4                 jmp     xrealloc
.text:0000000000004CE4 ; ---------------------------------------------------------------------------
.text:0000000000004CE9                 align 10h
.text:0000000000004CF0
.text:0000000000004CF0 loc_4CF0:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004CF0                 test    rcx, rcx
.text:0000000000004CF3                 jz      short loc_4D18
.text:0000000000004CF5
.text:0000000000004CF5 loc_4CF5:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004CF5                 mov     rax, rcx
.text:0000000000004CF8                 mul     r9
.text:0000000000004CFB                 seto    dl
.text:0000000000004CFE                 test    rax, rax
.text:0000000000004D01                 movzx   edx, dl
.text:0000000000004D04                 js      short loc_4D0B
.text:0000000000004D06                 test    rdx, rdx
.text:0000000000004D09                 jz      short loc_4CDA
.text:0000000000004D0B
.text:0000000000004D0B loc_4D0B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000004D0B                                         ; x2nrealloc+54↑j
.text:0000000000004D0B                 sub     rsp, 8
.text:0000000000004D0F                 call    xalloc_die
.text:0000000000004D0F ; ---------------------------------------------------------------------------
.text:0000000000004D14                 align 8
.text:0000000000004D18
.text:0000000000004D18 loc_4D18:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004D18                 xor     edx, edx
.text:0000000000004D1A                 mov     eax, 80h
.text:0000000000004D1F                 xor     r8d, r8d
.text:0000000000004D22                 div     r9
.text:0000000000004D25                 test    rax, rax
.text:0000000000004D28                 setz    r8b
.text:0000000000004D2C                 lea     rcx, [r8+rax]
.text:0000000000004D30                 jmp     short loc_4CF5
.text:0000000000004D30 ; } // starts at 4CB0
.text:0000000000004D30 x2nrealloc      endp
.text:0000000000004D30
.text:0000000000004D30 ; ---------------------------------------------------------------------------
.text:0000000000004D32                 align 20h
.text:0000000000004D40
.text:0000000000004D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D40
.text:0000000000004D40 ; Attributes: info_from_lumina
.text:0000000000004D40
.text:0000000000004D40 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004D40                 public x2realloc
.text:0000000000004D40 x2realloc       proc near
.text:0000000000004D40 ; __unwind {
.text:0000000000004D40                 test    rdi, rdi
.text:0000000000004D43                 mov     rax, [rsi]
.text:0000000000004D46                 jz      short loc_4D70
.text:0000000000004D48                 mov     rdx, 5555555555555553h
.text:0000000000004D52                 cmp     rax, rdx
.text:0000000000004D55                 ja      short loc_4D81
.text:0000000000004D57                 mov     rdx, rax
.text:0000000000004D5A                 shr     rdx, 1
.text:0000000000004D5D                 lea     rax, [rdx+rax+1]
.text:0000000000004D62
.text:0000000000004D62 loc_4D62:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004D62                 mov     [rsi], rax
.text:0000000000004D65                 mov     rsi, rax
.text:0000000000004D68                 jmp     xrealloc
.text:0000000000004D68 ; ---------------------------------------------------------------------------
.text:0000000000004D6D                 align 10h
.text:0000000000004D70
.text:0000000000004D70 loc_4D70:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000004D70                 test    rax, rax
.text:0000000000004D73                 mov     edx, 80h
.text:0000000000004D78                 cmovz   rax, rdx
.text:0000000000004D7C                 test    rax, rax
.text:0000000000004D7F                 jns     short loc_4D62
.text:0000000000004D81
.text:0000000000004D81 loc_4D81:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000004D81                 sub     rsp, 8
.text:0000000000004D85                 call    xalloc_die
.text:0000000000004D85 ; } // starts at 4D40
.text:0000000000004D85 x2realloc       endp
.text:0000000000004D85
.text:0000000000004D85 ; ---------------------------------------------------------------------------
.text:0000000000004D8A                 align 10h
.text:0000000000004D90
.text:0000000000004D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D90
.text:0000000000004D90
.text:0000000000004D90 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004D90                 public xzalloc
.text:0000000000004D90 xzalloc         proc near
.text:0000000000004D90 ; __unwind {
.text:0000000000004D90                 push    rbx
.text:0000000000004D91                 mov     rbx, rdi
.text:0000000000004D94                 call    xmalloc
.text:0000000000004D99                 mov     rdx, rbx        ; n
.text:0000000000004D9C                 xor     esi, esi        ; c
.text:0000000000004D9E                 mov     rdi, rax        ; s
.text:0000000000004DA1                 pop     rbx
.text:0000000000004DA2                 jmp     _memset
.text:0000000000004DA2 ; } // starts at 4D90
.text:0000000000004DA2 xzalloc         endp
.text:0000000000004DA2
.text:0000000000004DA2 ; ---------------------------------------------------------------------------
.text:0000000000004DA7                 align 10h
.text:0000000000004DB0
.text:0000000000004DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DB0
.text:0000000000004DB0 ; Attributes: info_from_lumina
.text:0000000000004DB0
.text:0000000000004DB0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004DB0                 public xcalloc
.text:0000000000004DB0 xcalloc         proc near
.text:0000000000004DB0 ; __unwind {
.text:0000000000004DB0                 mov     rax, rdi
.text:0000000000004DB3                 sub     rsp, 8
.text:0000000000004DB7                 mul     rsi
.text:0000000000004DBA                 seto    dl
.text:0000000000004DBD                 test    rax, rax
.text:0000000000004DC0                 js      short loc_4DD9
.text:0000000000004DC2                 movzx   edx, dl
.text:0000000000004DC5                 test    rdx, rdx
.text:0000000000004DC8                 jnz     short loc_4DD9
.text:0000000000004DCA                 call    _calloc
.text:0000000000004DCF                 test    rax, rax
.text:0000000000004DD2                 jz      short loc_4DD9
.text:0000000000004DD4                 add     rsp, 8
.text:0000000000004DD8                 retn
.text:0000000000004DD9 ; ---------------------------------------------------------------------------
.text:0000000000004DD9
.text:0000000000004DD9 loc_4DD9:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004DD9                                         ; xcalloc+18↑j ...
.text:0000000000004DD9                 call    xalloc_die
.text:0000000000004DD9 ; } // starts at 4DB0
.text:0000000000004DD9 xcalloc         endp
.text:0000000000004DD9
.text:0000000000004DD9 ; ---------------------------------------------------------------------------
.text:0000000000004DDE                 align 20h
.text:0000000000004DE0
.text:0000000000004DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DE0
.text:0000000000004DE0 ; Attributes: info_from_lumina
.text:0000000000004DE0
.text:0000000000004DE0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004DE0                 public xmemdup
.text:0000000000004DE0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004DE0                                         ; xstrdup+11↓j
.text:0000000000004DE0 ; __unwind {
.text:0000000000004DE0                 push    rbp
.text:0000000000004DE1                 push    rbx
.text:0000000000004DE2                 mov     rbp, rdi
.text:0000000000004DE5                 mov     rdi, rsi
.text:0000000000004DE8                 mov     rbx, rsi
.text:0000000000004DEB                 sub     rsp, 8
.text:0000000000004DEF                 call    xmalloc
.text:0000000000004DF4                 add     rsp, 8
.text:0000000000004DF8                 mov     rdx, rbx        ; n
.text:0000000000004DFB                 mov     rsi, rbp        ; src
.text:0000000000004DFE                 pop     rbx
.text:0000000000004DFF                 pop     rbp
.text:0000000000004E00                 mov     rdi, rax        ; dest
.text:0000000000004E03                 jmp     _memcpy
.text:0000000000004E03 ; } // starts at 4DE0
.text:0000000000004E03 xmemdup         endp
.text:0000000000004E03
.text:0000000000004E03 ; ---------------------------------------------------------------------------
.text:0000000000004E08                 align 10h
.text:0000000000004E10
.text:0000000000004E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E10
.text:0000000000004E10
.text:0000000000004E10 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004E10                 public xstrdup
.text:0000000000004E10 xstrdup         proc near               ; CODE XREF: main+14A↑p
.text:0000000000004E10 ; __unwind {
.text:0000000000004E10                 push    rbx
.text:0000000000004E11                 mov     rbx, rdi
.text:0000000000004E14                 call    _strlen
.text:0000000000004E19                 mov     rdi, rbx        ; src
.text:0000000000004E1C                 lea     rsi, [rax+1]    ; n
.text:0000000000004E20                 pop     rbx
.text:0000000000004E21                 jmp     short xmemdup
.text:0000000000004E21 ; } // starts at 4E10
.text:0000000000004E21 xstrdup         endp
.text:0000000000004E21
.text:0000000000004E21 ; ---------------------------------------------------------------------------
.text:0000000000004E23                 align 10h
.text:0000000000004E30
.text:0000000000004E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E30
.text:0000000000004E30 ; Attributes: noreturn info_from_lumina
.text:0000000000004E30
.text:0000000000004E30 ; void __cdecl xalloc_die()
.text:0000000000004E30                 public xalloc_die
.text:0000000000004E30 xalloc_die      proc near               ; CODE XREF: paste_parallel:loc_2010↑p
.text:0000000000004E30                                         ; quotearg_n_options:loc_3E06↑p ...
.text:0000000000004E30 ; __unwind {
.text:0000000000004E30                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004E37                 sub     rsp, 8
.text:0000000000004E3B                 mov     edx, 5          ; category
.text:0000000000004E40                 xor     edi, edi        ; domainname
.text:0000000000004E42                 call    _dcgettext
.text:0000000000004E47                 mov     edi, cs:exit_failure ; status
.text:0000000000004E4D                 lea     rdx, format+4   ; format
.text:0000000000004E54                 mov     rcx, rax
.text:0000000000004E57                 xor     esi, esi        ; errnum
.text:0000000000004E59                 xor     eax, eax
.text:0000000000004E5B                 call    _error
.text:0000000000004E60                 call    _abort
.text:0000000000004E60 ; } // starts at 4E30
.text:0000000000004E60 xalloc_die      endp
.text:0000000000004E60
.text:0000000000004E60 ; ---------------------------------------------------------------------------
.text:0000000000004E65                 align 10h
.text:0000000000004E70
.text:0000000000004E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E70
.text:0000000000004E70 ; Attributes: info_from_lumina
.text:0000000000004E70
.text:0000000000004E70 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004E70                 public rpl_fclose
.text:0000000000004E70 rpl_fclose      proc near               ; CODE XREF: main+299↑p
.text:0000000000004E70                                         ; paste_parallel:loc_1D1B↑p ...
.text:0000000000004E70 ; __unwind {
.text:0000000000004E70                 push    r12
.text:0000000000004E72                 push    rbp
.text:0000000000004E73                 push    rbx
.text:0000000000004E74                 mov     rbx, rdi
.text:0000000000004E77                 call    _fileno
.text:0000000000004E7C                 test    eax, eax
.text:0000000000004E7E                 mov     rdi, rbx        ; fp
.text:0000000000004E81                 js      short loc_4ED7
.text:0000000000004E83                 call    ___freading
.text:0000000000004E88                 test    eax, eax
.text:0000000000004E8A                 jnz     short loc_4EB8
.text:0000000000004E8C
.text:0000000000004E8C loc_4E8C:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000004E8C                 mov     rdi, rbx        ; stream
.text:0000000000004E8F                 call    rpl_fflush
.text:0000000000004E94                 test    eax, eax
.text:0000000000004E96                 jz      short loc_4ED4
.text:0000000000004E98                 call    ___errno_location
.text:0000000000004E9D                 mov     r12d, [rax]
.text:0000000000004EA0                 mov     rdi, rbx        ; stream
.text:0000000000004EA3                 mov     rbp, rax
.text:0000000000004EA6                 call    _fclose
.text:0000000000004EAB                 test    r12d, r12d
.text:0000000000004EAE                 jnz     short loc_4EE0
.text:0000000000004EB0
.text:0000000000004EB0 loc_4EB0:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004EB0                 pop     rbx
.text:0000000000004EB1                 pop     rbp
.text:0000000000004EB2                 pop     r12
.text:0000000000004EB4                 retn
.text:0000000000004EB4 ; ---------------------------------------------------------------------------
.text:0000000000004EB5                 align 8
.text:0000000000004EB8
.text:0000000000004EB8 loc_4EB8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004EB8                 mov     rdi, rbx        ; stream
.text:0000000000004EBB                 call    _fileno
.text:0000000000004EC0                 xor     esi, esi        ; offset
.text:0000000000004EC2                 mov     edx, 1          ; whence
.text:0000000000004EC7                 mov     edi, eax        ; fd
.text:0000000000004EC9                 call    _lseek
.text:0000000000004ECE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004ED2                 jnz     short loc_4E8C
.text:0000000000004ED4
.text:0000000000004ED4 loc_4ED4:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000004ED4                 mov     rdi, rbx        ; stream
.text:0000000000004ED7
.text:0000000000004ED7 loc_4ED7:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000004ED7                 pop     rbx
.text:0000000000004ED8                 pop     rbp
.text:0000000000004ED9                 pop     r12
.text:0000000000004EDB                 jmp     _fclose
.text:0000000000004EE0 ; ---------------------------------------------------------------------------
.text:0000000000004EE0
.text:0000000000004EE0 loc_4EE0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004EE0                 mov     [rbp+0], r12d
.text:0000000000004EE4                 mov     eax, 0FFFFFFFFh
.text:0000000000004EE9                 jmp     short loc_4EB0
.text:0000000000004EE9 ; } // starts at 4E70
.text:0000000000004EE9 rpl_fclose      endp
.text:0000000000004EE9
.text:0000000000004EE9 ; ---------------------------------------------------------------------------
.text:0000000000004EEB                 align 10h
.text:0000000000004EF0
.text:0000000000004EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EF0
.text:0000000000004EF0 ; Attributes: info_from_lumina
.text:0000000000004EF0
.text:0000000000004EF0 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000004EF0                 public rpl_fflush
.text:0000000000004EF0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000004EF0 ; __unwind {
.text:0000000000004EF0                 test    rdi, rdi
.text:0000000000004EF3                 push    rbx
.text:0000000000004EF4                 mov     rbx, rdi
.text:0000000000004EF7                 jz      short loc_4F0A
.text:0000000000004EF9                 call    ___freading
.text:0000000000004EFE                 test    eax, eax
.text:0000000000004F00                 jz      short loc_4F0A
.text:0000000000004F02                 test    dword ptr [rbx], 100h
.text:0000000000004F08                 jnz     short loc_4F18
.text:0000000000004F0A
.text:0000000000004F0A loc_4F0A:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000004F0A                                         ; rpl_fflush+10↑j
.text:0000000000004F0A                 mov     rdi, rbx        ; stream
.text:0000000000004F0D                 pop     rbx
.text:0000000000004F0E                 jmp     _fflush
.text:0000000000004F0E ; ---------------------------------------------------------------------------
.text:0000000000004F13                 align 8
.text:0000000000004F18
.text:0000000000004F18 loc_4F18:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000004F18                 mov     rdi, rbx
.text:0000000000004F1B                 mov     edx, 1
.text:0000000000004F20                 xor     esi, esi
.text:0000000000004F22                 call    rpl_fseeko
.text:0000000000004F27                 mov     rdi, rbx        ; stream
.text:0000000000004F2A                 pop     rbx
.text:0000000000004F2B                 jmp     _fflush
.text:0000000000004F2B ; } // starts at 4EF0
.text:0000000000004F2B rpl_fflush      endp
.text:0000000000004F2B
.text:0000000000004F30
.text:0000000000004F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F30
.text:0000000000004F30 ; Attributes: info_from_lumina
.text:0000000000004F30
.text:0000000000004F30 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004F30                 public rpl_fseeko
.text:0000000000004F30 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004F30 ; __unwind {
.text:0000000000004F30                 mov     rax, [rdi+8]
.text:0000000000004F34                 cmp     [rdi+10h], rax
.text:0000000000004F38                 jz      short loc_4F40
.text:0000000000004F3A
.text:0000000000004F3A loc_4F3A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000004F3A                                         ; rpl_fseeko+1F↓j
.text:0000000000004F3A                 jmp     _fseeko
.text:0000000000004F3A ; ---------------------------------------------------------------------------
.text:0000000000004F3F                 align 20h
.text:0000000000004F40
.text:0000000000004F40 loc_4F40:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000004F40                 mov     rax, [rdi+20h]
.text:0000000000004F44                 cmp     [rdi+28h], rax
.text:0000000000004F48                 jnz     short loc_4F3A
.text:0000000000004F4A                 cmp     qword ptr [rdi+48h], 0
.text:0000000000004F4F                 jnz     short loc_4F3A
.text:0000000000004F51                 push    r12
.text:0000000000004F53                 push    rbp
.text:0000000000004F54                 mov     r12d, edx
.text:0000000000004F57                 push    rbx
.text:0000000000004F58                 mov     rbp, rsi
.text:0000000000004F5B                 mov     rbx, rdi
.text:0000000000004F5E                 call    _fileno
.text:0000000000004F63                 mov     edx, r12d       ; whence
.text:0000000000004F66                 mov     rsi, rbp        ; offset
.text:0000000000004F69                 mov     edi, eax        ; fd
.text:0000000000004F6B                 call    _lseek
.text:0000000000004F70                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004F74                 jz      short loc_4F82
.text:0000000000004F76                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000004F79                 mov     [rbx+90h], rax
.text:0000000000004F80                 xor     eax, eax
.text:0000000000004F82
.text:0000000000004F82 loc_4F82:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000004F82                 pop     rbx
.text:0000000000004F83                 pop     rbp
.text:0000000000004F84                 pop     r12
.text:0000000000004F86                 retn
.text:0000000000004F86 ; } // starts at 4F30
.text:0000000000004F86 rpl_fseeko      endp
.text:0000000000004F86
.text:0000000000004F86 ; ---------------------------------------------------------------------------
.text:0000000000004F87                 align 10h
.text:0000000000004F90
.text:0000000000004F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F90
.text:0000000000004F90 ; Attributes: info_from_lumina
.text:0000000000004F90
.text:0000000000004F90 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000004F90                 public rpl_mbrtowc
.text:0000000000004F90 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000004F90
.text:0000000000004F90 pwc             = dword ptr -34h
.text:0000000000004F90 var_30          = qword ptr -30h
.text:0000000000004F90
.text:0000000000004F90 ; __unwind {
.text:0000000000004F90                 push    r13
.text:0000000000004F92                 push    r12
.text:0000000000004F94                 mov     r13, rsi
.text:0000000000004F97                 push    rbp
.text:0000000000004F98                 push    rbx
.text:0000000000004F99                 mov     rbx, rdi
.text:0000000000004F9C                 mov     r12, rdx
.text:0000000000004F9F                 sub     rsp, 18h
.text:0000000000004FA3                 mov     rax, fs:28h
.text:0000000000004FAC                 mov     [rsp+38h+var_30], rax
.text:0000000000004FB1                 xor     eax, eax
.text:0000000000004FB3                 lea     rax, [rsp+38h+pwc]
.text:0000000000004FB8                 test    rdi, rdi
.text:0000000000004FBB                 cmovz   rbx, rax
.text:0000000000004FBF                 mov     rdi, rbx        ; pwc
.text:0000000000004FC2                 call    _mbrtowc
.text:0000000000004FC7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000004FCB                 mov     rbp, rax
.text:0000000000004FCE                 jbe     short loc_4FF0
.text:0000000000004FD0                 test    r12, r12
.text:0000000000004FD3                 jz      short loc_4FF0
.text:0000000000004FD5                 xor     edi, edi
.text:0000000000004FD7                 call    hard_locale
.text:0000000000004FDC                 test    al, al
.text:0000000000004FDE                 jnz     short loc_4FF0
.text:0000000000004FE0                 movzx   eax, byte ptr [r13+0]
.text:0000000000004FE5                 mov     ebp, 1
.text:0000000000004FEA                 mov     [rbx], eax
.text:0000000000004FEC                 nop     dword ptr [rax+00h]
.text:0000000000004FF0
.text:0000000000004FF0 loc_4FF0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000004FF0                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000004FF0                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004FF5                 xor     rdx, fs:28h
.text:0000000000004FFE                 mov     rax, rbp
.text:0000000000005001                 jnz     short loc_500E
.text:0000000000005003                 add     rsp, 18h
.text:0000000000005007                 pop     rbx
.text:0000000000005008                 pop     rbp
.text:0000000000005009                 pop     r12
.text:000000000000500B                 pop     r13
.text:000000000000500D                 retn
.text:000000000000500E ; ---------------------------------------------------------------------------
.text:000000000000500E
.text:000000000000500E loc_500E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000500E                 call    ___stack_chk_fail
.text:000000000000500E ; } // starts at 4F90
.text:000000000000500E rpl_mbrtowc     endp
.text:000000000000500E
.text:000000000000500E ; ---------------------------------------------------------------------------
.text:0000000000005013                 align 20h
.text:0000000000005020
.text:0000000000005020 ; =============== S U B R O U T I N E =======================================
.text:0000000000005020
.text:0000000000005020 ; Attributes: info_from_lumina
.text:0000000000005020
.text:0000000000005020 ; int __fastcall close_stream(FILE *stream)
.text:0000000000005020                 public close_stream
.text:0000000000005020 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000005020                                         ; close_stdout+33↑p
.text:0000000000005020 ; __unwind {
.text:0000000000005020                 push    r12
.text:0000000000005022                 push    rbp
.text:0000000000005023                 mov     rbp, rdi
.text:0000000000005026                 push    rbx
.text:0000000000005027                 call    ___fpending
.text:000000000000502C                 mov     ebx, [rbp+0]
.text:000000000000502F                 mov     rdi, rbp        ; stream
.text:0000000000005032                 mov     r12, rax
.text:0000000000005035                 call    rpl_fclose
.text:000000000000503A                 and     ebx, 20h
.text:000000000000503D                 test    ebx, ebx
.text:000000000000503F                 jnz     short loc_5058
.text:0000000000005041                 test    eax, eax
.text:0000000000005043                 jz      short loc_504F
.text:0000000000005045                 test    r12, r12
.text:0000000000005048                 mov     eax, 0FFFFFFFFh
.text:000000000000504D                 jz      short loc_5088
.text:000000000000504F
.text:000000000000504F loc_504F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000504F                 pop     rbx
.text:0000000000005050                 pop     rbp
.text:0000000000005051                 pop     r12
.text:0000000000005053                 retn
.text:0000000000005053 ; ---------------------------------------------------------------------------
.text:0000000000005054                 align 8
.text:0000000000005058
.text:0000000000005058 loc_5058:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000005058                 test    eax, eax
.text:000000000000505A                 jnz     short loc_5078
.text:000000000000505C                 call    ___errno_location
.text:0000000000005061                 mov     dword ptr [rax], 0
.text:0000000000005067                 mov     eax, 0FFFFFFFFh
.text:000000000000506C                 pop     rbx
.text:000000000000506D                 pop     rbp
.text:000000000000506E                 pop     r12
.text:0000000000005070                 retn
.text:0000000000005070 ; ---------------------------------------------------------------------------
.text:0000000000005071                 align 8
.text:0000000000005078
.text:0000000000005078 loc_5078:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000005078                 pop     rbx
.text:0000000000005079                 mov     eax, 0FFFFFFFFh
.text:000000000000507E                 pop     rbp
.text:000000000000507F                 pop     r12
.text:0000000000005081                 retn
.text:0000000000005081 ; ---------------------------------------------------------------------------
.text:0000000000005082                 align 8
.text:0000000000005088
.text:0000000000005088 loc_5088:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000005088                 call    ___errno_location
.text:000000000000508D                 cmp     dword ptr [rax], 9
.text:0000000000005090                 pop     rbx
.text:0000000000005091                 pop     rbp
.text:0000000000005092                 pop     r12
.text:0000000000005094                 setnz   al
.text:0000000000005097                 movzx   eax, al
.text:000000000000509A                 neg     eax
.text:000000000000509C                 retn
.text:000000000000509C ; } // starts at 5020
.text:000000000000509C close_stream    endp
.text:000000000000509C
.text:000000000000509C ; ---------------------------------------------------------------------------
.text:000000000000509D                 align 20h
.text:00000000000050A0
.text:00000000000050A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050A0
.text:00000000000050A0
.text:00000000000050A0                 public hard_locale
.text:00000000000050A0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:00000000000050A0 ; __unwind {
.text:00000000000050A0                 sub     rsp, 8
.text:00000000000050A4                 xor     esi, esi        ; locale
.text:00000000000050A6                 call    _setlocale
.text:00000000000050AB                 mov     rdx, rax
.text:00000000000050AE                 mov     eax, 1
.text:00000000000050B3                 test    rdx, rdx
.text:00000000000050B6                 jz      short loc_50D5
.text:00000000000050B8                 lea     rdi, aC         ; "C"
.text:00000000000050BF                 mov     ecx, 2
.text:00000000000050C4                 mov     rsi, rdx
.text:00000000000050C7                 repe cmpsb
.text:00000000000050C9                 setnbe  cl
.text:00000000000050CC                 sbb     cl, 0
.text:00000000000050CF                 xor     eax, eax
.text:00000000000050D1                 test    cl, cl
.text:00000000000050D3                 jnz     short loc_50E0
.text:00000000000050D5
.text:00000000000050D5 loc_50D5:                               ; CODE XREF: hard_locale+16↑j
.text:00000000000050D5                 add     rsp, 8
.text:00000000000050D9                 retn
.text:00000000000050D9 ; ---------------------------------------------------------------------------
.text:00000000000050DA                 align 20h
.text:00000000000050E0
.text:00000000000050E0 loc_50E0:                               ; CODE XREF: hard_locale+33↑j
.text:00000000000050E0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000050E7                 mov     ecx, 6
.text:00000000000050EC                 mov     rsi, rdx
.text:00000000000050EF                 repe cmpsb
.text:00000000000050F1                 setnbe  al
.text:00000000000050F4                 sbb     al, 0
.text:00000000000050F6                 test    al, al
.text:00000000000050F8                 setnz   al
.text:00000000000050FB                 add     rsp, 8
.text:00000000000050FF                 retn
.text:00000000000050FF ; } // starts at 50A0
.text:00000000000050FF hard_locale     endp
.text:00000000000050FF
.text:0000000000005100
.text:0000000000005100 ; =============== S U B R O U T I N E =======================================
.text:0000000000005100
.text:0000000000005100
.text:0000000000005100                 public locale_charset
.text:0000000000005100 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005100 ; __unwind {
.text:0000000000005100                 sub     rsp, 8
.text:0000000000005104                 mov     edi, 0Eh        ; item
.text:0000000000005109                 call    _nl_langinfo
.text:000000000000510E                 test    rax, rax
.text:0000000000005111                 jz      short loc_5130
.text:0000000000005113                 cmp     byte ptr [rax], 0
.text:0000000000005116                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000511D                 cmovz   rax, rdx
.text:0000000000005121                 add     rsp, 8
.text:0000000000005125                 retn
.text:0000000000005125 ; ---------------------------------------------------------------------------
.text:0000000000005126                 align 10h
.text:0000000000005130
.text:0000000000005130 loc_5130:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000005130                 lea     rax, aAscii     ; "ASCII"
.text:0000000000005137                 add     rsp, 8
.text:000000000000513B                 retn
.text:000000000000513B ; } // starts at 5100
.text:000000000000513B locale_charset  endp
.text:000000000000513B
.text:000000000000513B ; ---------------------------------------------------------------------------
.text:000000000000513C                 align 20h
.text:0000000000005140
.text:0000000000005140 ; =============== S U B R O U T I N E =======================================
.text:0000000000005140
.text:0000000000005140 ; Attributes: info_from_lumina
.text:0000000000005140
.text:0000000000005140 ; void _libc_csu_init(void)
.text:0000000000005140                 public __libc_csu_init
.text:0000000000005140 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000005140 ; __unwind {
.text:0000000000005140                 push    r15
.text:0000000000005142                 push    r14
.text:0000000000005144                 mov     r15, rdx
.text:0000000000005147                 push    r13
.text:0000000000005149                 push    r12
.text:000000000000514B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000005152                 push    rbp
.text:0000000000005153                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000515A                 push    rbx
.text:000000000000515B                 mov     r13d, edi
.text:000000000000515E                 mov     r14, rsi
.text:0000000000005161                 sub     rbp, r12
.text:0000000000005164                 sub     rsp, 8
.text:0000000000005168                 sar     rbp, 3
.text:000000000000516C                 call    _init_proc
.text:0000000000005171                 test    rbp, rbp
.text:0000000000005174                 jz      short loc_5196
.text:0000000000005176                 xor     ebx, ebx
.text:0000000000005178                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005180
.text:0000000000005180 loc_5180:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000005180                 mov     rdx, r15
.text:0000000000005183                 mov     rsi, r14
.text:0000000000005186                 mov     edi, r13d
.text:0000000000005189                 call    ds:(__frame_dummy_init_array_entry - 207B30h)[r12+rbx*8]
.text:000000000000518D                 add     rbx, 1
.text:0000000000005191                 cmp     rbp, rbx
.text:0000000000005194                 jnz     short loc_5180
.text:0000000000005196
.text:0000000000005196 loc_5196:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000005196                 add     rsp, 8
.text:000000000000519A                 pop     rbx
.text:000000000000519B                 pop     rbp
.text:000000000000519C                 pop     r12
.text:000000000000519E                 pop     r13
.text:00000000000051A0                 pop     r14
.text:00000000000051A2                 pop     r15
.text:00000000000051A4                 retn
.text:00000000000051A4 ; } // starts at 5140
.text:00000000000051A4 __libc_csu_init endp
.text:00000000000051A4
.text:00000000000051A4 ; ---------------------------------------------------------------------------
.text:00000000000051A5                 align 10h
.text:00000000000051B0
.text:00000000000051B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051B0
.text:00000000000051B0
.text:00000000000051B0 ; void _libc_csu_fini(void)
.text:00000000000051B0                 public __libc_csu_fini
.text:00000000000051B0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000051B0 ; __unwind {
.text:00000000000051B0                 rep retn
.text:00000000000051B0 ; } // starts at 51B0
.text:00000000000051B0 __libc_csu_fini endp
.text:00000000000051B0
.text:00000000000051B0 ; ---------------------------------------------------------------------------
.text:00000000000051B2                 align 20h
.text:00000000000051C0
.text:00000000000051C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051C0
.text:00000000000051C0
.text:00000000000051C0 atexit          proc near               ; CODE XREF: main+5C↑p
.text:00000000000051C0 ; __unwind {
.text:00000000000051C0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:00000000000051C7                 xor     esi, esi        ; obj
.text:00000000000051C9                 jmp     ___cxa_atexit
.text:00000000000051C9 ; } // starts at 51C0
.text:00000000000051C9 atexit          endp
.text:00000000000051C9
.text:00000000000051C9 _text           ends
.text:00000000000051C9
LOAD:00000000000051CE ; ===========================================================================
LOAD:00000000000051CE
LOAD:00000000000051CE ; Segment type: Pure code
LOAD:00000000000051CE ; Segment permissions: Read/Execute
LOAD:00000000000051CE LOAD            segment byte public 'CODE' use64
LOAD:00000000000051CE                 assume cs:LOAD
LOAD:00000000000051CE                 ;org 51CEh
LOAD:00000000000051CE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000051CE                 align 10h
LOAD:00000000000051CE LOAD            ends
LOAD:00000000000051CE
.fini:00000000000051D0 ; ===========================================================================
.fini:00000000000051D0
.fini:00000000000051D0 ; Segment type: Pure code
.fini:00000000000051D0 ; Segment permissions: Read/Execute
.fini:00000000000051D0 _fini           segment dword public 'CODE' use64
.fini:00000000000051D0                 assume cs:_fini
.fini:00000000000051D0                 ;org 51D0h
.fini:00000000000051D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00000000000051D0
.fini:00000000000051D0 ; =============== S U B R O U T I N E =======================================
.fini:00000000000051D0
.fini:00000000000051D0
.fini:00000000000051D0                 public _term_proc
.fini:00000000000051D0 _term_proc      proc near
.fini:00000000000051D0                 sub     rsp, 8          ; _fini
.fini:00000000000051D4                 add     rsp, 8
.fini:00000000000051D8                 retn
.fini:00000000000051D8 _term_proc      endp
.fini:00000000000051D8
.fini:00000000000051D8 _fini           ends
.fini:00000000000051D8
LOAD:00000000000051D9 ; ===========================================================================
LOAD:00000000000051D9
LOAD:00000000000051D9 ; Segment type: Pure code
LOAD:00000000000051D9 ; Segment permissions: Read/Execute
LOAD:00000000000051D9 LOAD            segment byte public 'CODE' use64
LOAD:00000000000051D9                 assume cs:LOAD
LOAD:00000000000051D9                 ;org 51D9h
LOAD:00000000000051D9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000051D9                 align 20h
LOAD:00000000000051D9 LOAD            ends
LOAD:00000000000051D9
.rodata:00000000000051E0 ; ===========================================================================
.rodata:00000000000051E0
.rodata:00000000000051E0 ; Segment type: Pure data
.rodata:00000000000051E0 ; Segment permissions: Read
.rodata:00000000000051E0 _rodata         segment align_32 public 'CONST' use64
.rodata:00000000000051E0                 assume cs:_rodata
.rodata:00000000000051E0                 ;org 51E0h
.rodata:00000000000051E0                 public _IO_stdin_used
.rodata:00000000000051E0 _IO_stdin_used  db    1
.rodata:00000000000051E1                 db    0
.rodata:00000000000051E2                 db    2
.rodata:00000000000051E3                 db    0
.rodata:00000000000051E4 ; const char msgid[]
.rodata:00000000000051E4 msgid           db 'write error',0      ; DATA XREF: write_error+1↑o
.rodata:00000000000051E4                                         ; close_stdout:loc_27E3↑o ...
.rodata:00000000000051F0 ; const char aStandardInputI[]
.rodata:00000000000051F0 aStandardInputI db 'standard input is closed',0
.rodata:00000000000051F0                                         ; DATA XREF: paste_parallel:loc_2045↑o
.rodata:0000000000005209 aPaste          db 'paste',0            ; DATA XREF: main+EC↑o
.rodata:0000000000005209                                         ; usage+17B↑o ...
.rodata:000000000000520F asc_520F        db '[',0                ; DATA XREF: usage+187↑o
.rodata:0000000000005211 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1AE↑o
.rodata:0000000000005221 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000005221                                         ; DATA XREF: usage+1DE↑o
.rodata:0000000000005221                                         ; usage+2DC↑o ...
.rodata:0000000000005237 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1EF↑o
.rodata:0000000000005241 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1FB↑o
.rodata:0000000000005250 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+18E↑o
.rodata:000000000000525A aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+1BA↑o
.rodata:0000000000005264 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1D2↑o
.rodata:000000000000526E ; const char aSOnlineHelpS[]
.rodata:000000000000526E aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+24A↑o
.rodata:000000000000526E                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000005285 unk_5285        db  47h ; G             ; DATA XREF: main+E5↑o
.rodata:0000000000005285                                         ; usage+266↑o ...
.rodata:0000000000005286                 db  4Eh ; N
.rodata:0000000000005287                 db  55h ; U
.rodata:0000000000005288                 db  20h
.rodata:0000000000005289 ; const char domainname[]
.rodata:0000000000005289 domainname      db 'coreutils',0        ; DATA XREF: main+3D↑o
.rodata:0000000000005289                                         ; main+49↑o ...
.rodata:0000000000005293 ; const char s2[]
.rodata:0000000000005293 s2              db 'en_',0              ; DATA XREF: usage+28D↑o
.rodata:0000000000005293                                         ; usage+34E↑o
.rodata:0000000000005297 ; const char aFullDocumentat[]
.rodata:0000000000005297 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000005297                                         ; DATA XREF: usage:loc_2649↑o
.rodata:0000000000005297                                         ; usage:loc_2706↑o
.rodata:00000000000052B2 a0              db '\0',0               ; DATA XREF: main+4↑o
.rodata:00000000000052B5 asc_52B5        db 9,0                  ; DATA XREF: main+12↑o
.rodata:00000000000052B5                                         ; main+25↑o ...
.rodata:00000000000052B7 ; const char dirname[]
.rodata:00000000000052B7 dirname         db '/usr/local/share/locale',0
.rodata:00000000000052B7                                         ; DATA XREF: main+36↑o
.rodata:00000000000052CF aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+D7↑o
.rodata:00000000000052DF aDavidMIhnat    db 'David M. Ihnat',0   ; DATA XREF: main+DE↑o
.rodata:00000000000052EE ; const char shortopts[]
.rodata:00000000000052EE shortopts       db 'd:sz',0             ; DATA XREF: main+76↑o
.rodata:00000000000052F3 aSerial         db 'serial',0           ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:00000000000052FA aDelimiters     db 'delimiters',0       ; DATA XREF: .data.rel.ro:0000000000207B60↓o
.rodata:0000000000005305 aZeroTerminated db 'zero-terminated',0  ; DATA XREF: .data.rel.ro:0000000000207B80↓o
.rodata:0000000000005315 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000207BA0↓o
.rodata:000000000000531A aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000207BC0↓o
.rodata:0000000000005322                 align 8
.rodata:0000000000005328 ; const char aTrySHelpForMor[]
.rodata:0000000000005328 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000005328                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000534F                 align 10h
.rodata:0000000000005350 ; const char aUsageSOptionFi[]
.rodata:0000000000005350 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.rodata:0000000000005350                                         ; DATA XREF: usage:loc_23FD↑o
.rodata:0000000000005371                 align 8
.rodata:0000000000005378 ; const char aWriteLinesCons[]
.rodata:0000000000005378 aWriteLinesCons db 'Write lines consisting of the sequentially corresponding lines fr'
.rodata:0000000000005378                                         ; DATA XREF: usage+84↑o
.rodata:0000000000005378                 db 'om',0Ah
.rodata:0000000000005378                 db 'each FILE, separated by TABs, to standard output.',0Ah,0
.rodata:00000000000053EF                 align 10h
.rodata:00000000000053F0 ; const char aWithNoFileOrWh[]
.rodata:00000000000053F0 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:00000000000053F0                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:0000000000005428 ; const char aMandatoryArgum[]
.rodata:0000000000005428 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+CE↑o
.rodata:0000000000005428                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000005428                 db 'ns too.',0Ah,0
.rodata:0000000000005473                 align 8
.rodata:0000000000005478 ; const char aDDelimitersLis[]
.rodata:0000000000005478 aDDelimitersLis db '  -d, --delimiters=LIST   reuse characters from LIST instead of T'
.rodata:0000000000005478                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000005478                 db 'ABs',0Ah
.rodata:0000000000005478                 db '  -s, --serial            paste one file at a time instead of in '
.rodata:0000000000005478                 db 'parallel',0Ah,0
.rodata:0000000000005508 ; const char aZZeroTerminate[]
.rodata:0000000000005508 aZZeroTerminate db '  -z, --zero-terminated    line delimiter is NUL, not newline',0Ah
.rodata:0000000000005508                                         ; DATA XREF: usage+118↑o
.rodata:0000000000005508                 db 0
.rodata:0000000000005547                 align 8
.rodata:0000000000005548 ; const char aHelpDisplayThi[]
.rodata:0000000000005548 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000005548                                         ; DATA XREF: usage+13D↑o
.rodata:0000000000005575                 align 8
.rodata:0000000000005578 ; const char aVersionOutputV[]
.rodata:0000000000005578 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000005578                                         ; DATA XREF: usage+162↑o
.rodata:00000000000055AE                 align 10h
.rodata:00000000000055B0 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:00000000000055B0                                         ; DATA XREF: usage+25F↑o
.rodata:00000000000055B0                                         ; usage+2C3↑o ...
.rodata:00000000000055D8 ; const char aReportAnyTrans[]
.rodata:00000000000055D8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:00000000000055D8                                         ; DATA XREF: usage+3B7↑o
.rodata:00000000000055D8                 db 'am/>',0Ah,0
.rodata:000000000000561F                 align 20h
.rodata:0000000000005620 ; const char aOrAvailableLoc[]
.rodata:0000000000005620 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000005620                                         ; DATA XREF: usage:loc_268E↑o
.rodata:0000000000005653                 align 8
.rodata:0000000000005658 ; const char aDelimiterListE[]
.rodata:0000000000005658 aDelimiterListE db 'delimiter list ends with an unescaped backslash: %s',0
.rodata:0000000000005658                                         ; DATA XREF: main+244↑o
.rodata:000000000000568C a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000005691 ; const char format[]
.rodata:0000000000005691 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000005691                                         ; paste_parallel+3FA↑o ...
.rodata:0000000000005698 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000005698                                         ; DATA XREF: set_program_name+84↑o
.rodata:00000000000056D0 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:00000000000056D8 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:00000000000056D8                                         ; main+137↑o ...
.rodata:00000000000056DC unk_56DC        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:00000000000056DD                 db  80h
.rodata:00000000000056DE                 db  98h
.rodata:00000000000056DF                 db    0
.rodata:00000000000056E0 unk_56E0        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:00000000000056E1                 db  80h
.rodata:00000000000056E2                 db  99h
.rodata:00000000000056E3                 db    0
.rodata:00000000000056E4 unk_56E4        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:00000000000056E5                 db    7
.rodata:00000000000056E6                 db  65h ; e
.rodata:00000000000056E7                 db    0
.rodata:00000000000056E8 unk_56E8        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:00000000000056E9                 db 0AFh
.rodata:00000000000056EA                 db    0
.rodata:00000000000056EB unk_56EB        db  22h ; "             ; DATA XREF: gettext_quote:loc_2950↑o
.rodata:00000000000056EB                                         ; quotearg_buffer_restyled:loc_370B↑o ...
.rodata:00000000000056EC                 db    0
.rodata:00000000000056ED ; const char asc_56ED[2]
.rodata:00000000000056ED asc_56ED        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:00000000000056ED                                         ; quotearg_buffer_restyled:loc_2AD3↑o ...
.rodata:00000000000056EF ; const char asc_56EF[2]
.rodata:00000000000056EF asc_56EF        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:00000000000056EF                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:00000000000056F1 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:00000000000056F9 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000207C08↓o
.rodata:00000000000056FF aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000207C10↓o
.rodata:000000000000570C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000207C18↓o
.rodata:000000000000570C                                         ; .data.rel.ro:0000000000207C38↓o
.rodata:0000000000005719 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000005719                                         ; DATA XREF: .data.rel.ro:0000000000207C20↓o
.rodata:000000000000572D aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000207C28↓o
.rodata:000000000000572F aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000207C30↓o
.rodata:0000000000005737 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000207C48↓o
.rodata:000000000000573F                 align 20h
.rodata:0000000000005740 jpt_2AB1        dd offset loc_385A - 5740h
.rodata:0000000000005740                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000005740                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000005740                 dd offset loc_2AB3 - 5740h ; jump table for switch statement
.rodata:0000000000005740                 dd offset loc_3A88 - 5740h
.rodata:0000000000005740                 dd offset loc_3894 - 5740h
.rodata:0000000000005740                 dd offset loc_3684 - 5740h
.rodata:0000000000005740                 dd offset loc_36E0 - 5740h
.rodata:0000000000005740                 dd offset loc_3735 - 5740h
.rodata:0000000000005740                 dd offset loc_377A - 5740h
.rodata:0000000000005740                 dd offset loc_37B4 - 5740h
.rodata:0000000000005740                 dd offset loc_37B4 - 5740h
.rodata:0000000000005740                 dd offset loc_37B4 - 5740h
.rodata:000000000000576C jpt_2C0E        dd offset loc_2E30 - 576Ch, offset def_2C0E - 576Ch, offset def_2C0E - 576Ch
.rodata:000000000000576C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000576C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000576C                 dd offset def_2C0E - 576Ch, offset def_2C0E - 576Ch, offset def_2C0E - 576Ch ; jump table for switch statement
.rodata:000000000000576C                 dd offset def_2C0E - 576Ch, offset loc_2E70 - 576Ch, offset loc_2D78 - 576Ch
.rodata:000000000000576C                 dd offset loc_2D38 - 576Ch, offset loc_2F00 - 576Ch, offset loc_2EF0 - 576Ch
.rodata:000000000000576C                 dd offset loc_2EE0 - 576Ch, offset loc_2ED0 - 576Ch, offset def_2C0E - 576Ch
.rodata:000000000000576C                 dd offset def_2C0E - 576Ch, offset def_2C0E - 576Ch, offset def_2C0E - 576Ch
.rodata:000000000000576C                 dd offset def_2C0E - 576Ch, offset def_2C0E - 576Ch, offset def_2C0E - 576Ch
.rodata:000000000000576C                 dd offset def_2C0E - 576Ch, offset def_2C0E - 576Ch, offset def_2C0E - 576Ch
.rodata:000000000000576C                 dd offset def_2C0E - 576Ch, offset def_2C0E - 576Ch, offset def_2C0E - 576Ch
.rodata:000000000000576C                 dd offset def_2C0E - 576Ch, offset def_2C0E - 576Ch, offset def_2C0E - 576Ch
.rodata:000000000000576C                 dd offset def_2C0E - 576Ch, offset def_2C0E - 576Ch, offset loc_2EC0 - 576Ch
.rodata:000000000000576C                 dd offset loc_2EB0 - 576Ch, offset loc_2EB0 - 576Ch, offset loc_2E80 - 576Ch
.rodata:000000000000576C                 dd offset loc_2EB0 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2EB0 - 576Ch
.rodata:000000000000576C                 dd offset loc_2D13 - 576Ch, offset loc_2EB0 - 576Ch, offset loc_2EB0 - 576Ch
.rodata:000000000000576C                 dd offset loc_2EB0 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2EB0 - 576Ch
.rodata:000000000000576C                 dd offset loc_2EB0 - 576Ch, offset loc_2EB0 - 576Ch, offset loc_2EB0 - 576Ch
.rodata:000000000000576C                 dd offset loc_2CE3 - 576Ch, offset def_2C0E - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2EB0 - 576Ch, offset loc_2D88 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2EB0 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2EB0 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch, offset loc_2E58 - 576Ch
.rodata:000000000000576C                 dd offset loc_2C13 - 576Ch, offset loc_2EB0 - 576Ch, offset loc_2C13 - 576Ch
.rodata:000000000000576C                 dd offset loc_2E80 - 576Ch
.rodata:0000000000005968 jpt_2F9A        dd offset loc_3000 - 5968h, offset def_2F9A - 5968h, offset def_2F9A - 5968h
.rodata:0000000000005968                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000005968                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000005968                 dd offset def_2F9A - 5968h, offset def_2F9A - 5968h, offset def_2F9A - 5968h ; jump table for switch statement
.rodata:0000000000005968                 dd offset def_2F9A - 5968h, offset loc_2FF0 - 5968h, offset loc_3140 - 5968h
.rodata:0000000000005968                 dd offset loc_3128 - 5968h, offset loc_2FD8 - 5968h, offset loc_3118 - 5968h
.rodata:0000000000005968                 dd offset loc_2FC0 - 5968h, offset loc_3100 - 5968h, offset def_2F9A - 5968h
.rodata:0000000000005968                 dd offset def_2F9A - 5968h, offset def_2F9A - 5968h, offset def_2F9A - 5968h
.rodata:0000000000005968                 dd offset def_2F9A - 5968h, offset def_2F9A - 5968h, offset def_2F9A - 5968h
.rodata:0000000000005968                 dd offset def_2F9A - 5968h, offset def_2F9A - 5968h, offset def_2F9A - 5968h
.rodata:0000000000005968                 dd offset def_2F9A - 5968h, offset def_2F9A - 5968h, offset def_2F9A - 5968h
.rodata:0000000000005968                 dd offset def_2F9A - 5968h, offset def_2F9A - 5968h, offset def_2F9A - 5968h
.rodata:0000000000005968                 dd offset def_2F9A - 5968h, offset def_2F9A - 5968h, offset loc_30E8 - 5968h
.rodata:0000000000005968                 dd offset loc_30D0 - 5968h, offset loc_30D0 - 5968h, offset loc_30B8 - 5968h
.rodata:0000000000005968                 dd offset loc_30D0 - 5968h, offset loc_30A0 - 5968h, offset loc_30D0 - 5968h
.rodata:0000000000005968                 dd offset loc_2D10 - 5968h, offset loc_30D0 - 5968h, offset loc_30D0 - 5968h
.rodata:0000000000005968                 dd offset loc_30D0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30D0 - 5968h
.rodata:0000000000005968                 dd offset loc_30D0 - 5968h, offset loc_30D0 - 5968h, offset loc_30D0 - 5968h
.rodata:0000000000005968                 dd offset loc_2CE0 - 5968h, offset def_2F9A - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30D0 - 5968h, offset loc_2FA0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30D0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30D0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_30A0 - 5968h, offset loc_30A0 - 5968h, offset loc_30A0 - 5968h
.rodata:0000000000005968                 dd offset loc_2C10 - 5968h, offset loc_30D0 - 5968h, offset loc_2C10 - 5968h
.rodata:0000000000005968                 dd offset loc_30B8 - 5968h
.rodata:0000000000005B64                 align 20h
.rodata:0000000000005B80                 public quoting_style_vals
.rodata:0000000000005B80 quoting_style_vals db    0
.rodata:0000000000005B81                 db    0
.rodata:0000000000005B82                 db    0
.rodata:0000000000005B83                 db    0
.rodata:0000000000005B84                 db    1
.rodata:0000000000005B85                 db    0
.rodata:0000000000005B86                 db    0
.rodata:0000000000005B87                 db    0
.rodata:0000000000005B88                 db    2
.rodata:0000000000005B89                 db    0
.rodata:0000000000005B8A                 db    0
.rodata:0000000000005B8B                 db    0
.rodata:0000000000005B8C                 db    3
.rodata:0000000000005B8D                 db    0
.rodata:0000000000005B8E                 db    0
.rodata:0000000000005B8F                 db    0
.rodata:0000000000005B90                 db    4
.rodata:0000000000005B91                 db    0
.rodata:0000000000005B92                 db    0
.rodata:0000000000005B93                 db    0
.rodata:0000000000005B94                 db    5
.rodata:0000000000005B95                 db    0
.rodata:0000000000005B96                 db    0
.rodata:0000000000005B97                 db    0
.rodata:0000000000005B98                 db    6
.rodata:0000000000005B99                 db    0
.rodata:0000000000005B9A                 db    0
.rodata:0000000000005B9B                 db    0
.rodata:0000000000005B9C                 db    7
.rodata:0000000000005B9D                 db    0
.rodata:0000000000005B9E                 db    0
.rodata:0000000000005B9F                 db    0
.rodata:0000000000005BA0                 db    8
.rodata:0000000000005BA1                 db    0
.rodata:0000000000005BA2                 db    0
.rodata:0000000000005BA3                 db    0
.rodata:0000000000005BA4                 db    9
.rodata:0000000000005BA5                 db    0
.rodata:0000000000005BA6                 db    0
.rodata:0000000000005BA7                 db    0
.rodata:0000000000005BA8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000005BB4 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000005BBB ; const char aC_0[]
.rodata:0000000000005BBB aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_45FC↑o
.rodata:0000000000005BBF ; const char aWrittenByS[]
.rodata:0000000000005BBF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000005BBF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000005BCF ; const char aWrittenBySAndS[]
.rodata:0000000000005BCF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000005BCF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000005BE6 ; const char aWrittenBySSAnd[]
.rodata:0000000000005BE6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000005BE6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000005C02 ; const char aReportBugsToS[]
.rodata:0000000000005C02 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000005C02                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000005C17 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000005C17                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000005C2D ; const char aSHomePageS[]
.rodata:0000000000005C2D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000005C2D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000005C41                 align 8
.rodata:0000000000005C48 ; const char aLicenseGplv3Gn[]
.rodata:0000000000005C48 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000005C48                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000005C48                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000005C48                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000005C48                 db '.',0Ah
.rodata:0000000000005C48                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000005C48                 db 0Ah,0
.rodata:0000000000005D14                 align 8
.rodata:0000000000005D18 ; const char aWrittenBySSSAn[]
.rodata:0000000000005D18 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005D18                                         ; DATA XREF: version_etc_arn:loc_4850↑o
.rodata:0000000000005D18                 db 'and %s.',0Ah,0
.rodata:0000000000005D38 ; const char aWrittenBySSSSA[]
.rodata:0000000000005D38 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005D38                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000005D38                 db '%s, and %s.',0Ah,0
.rodata:0000000000005D5C                 align 20h
.rodata:0000000000005D60 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000005D60 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005D60                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000005D60                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000005D88 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000005D88 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005D88                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000005D88                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000005DB4                 align 8
.rodata:0000000000005DB8 ; const char aWrittenBySSSSS[]
.rodata:0000000000005DB8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005DB8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000005DB8                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005DB8                 db 'and %s.',0Ah,0
.rodata:0000000000005DE8 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000005DE8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005DE8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000005DE8                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005DE8                 db '%s, and %s.',0Ah,0
.rodata:0000000000005E1C                 align 20h
.rodata:0000000000005E20 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005E20                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000005E20                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005E20                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000005E5C                 align 20h
.rodata:0000000000005E60 ; const char aGeneralHelpUsi[]
.rodata:0000000000005E60 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000005E60                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000005E60                 db 0
.rodata:0000000000005EA1                 align 8
.rodata:0000000000005EA8 jpt_4664        dd offset loc_46E6 - 5EA8h
.rodata:0000000000005EA8                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000005EA8                                         ; version_etc_arn+9D↑r
.rodata:0000000000005EA8                 dd offset loc_4778 - 5EA8h ; jump table for switch statement
.rodata:0000000000005EA8                 dd offset loc_47B8 - 5EA8h
.rodata:0000000000005EA8                 dd offset loc_4800 - 5EA8h
.rodata:0000000000005EA8                 dd offset loc_4850 - 5EA8h
.rodata:0000000000005EA8                 dd offset loc_48A8 - 5EA8h
.rodata:0000000000005EA8                 dd offset loc_48D8 - 5EA8h
.rodata:0000000000005EA8                 dd offset loc_4940 - 5EA8h
.rodata:0000000000005EA8                 dd offset loc_4670 - 5EA8h
.rodata:0000000000005EA8                 dd offset loc_4720 - 5EA8h
.rodata:0000000000005ED0                 align 20h
.rodata:0000000000005EE0                 public version_etc_copyright
.rodata:0000000000005EE0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000005EE0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000005F0F ; const char aMemoryExhauste[]
.rodata:0000000000005F0F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000005F20 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000005F22 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_50E0↑o
.rodata:0000000000005F28 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000005F28                                         ; locale_charset:loc_5130↑o
.rodata:0000000000005F28 _rodata         ends
.rodata:0000000000005F28
LOAD:0000000000005F2E ; ===========================================================================
LOAD:0000000000005F2E
LOAD:0000000000005F2E ; Segment type: Pure code
LOAD:0000000000005F2E ; Segment permissions: Read/Execute
LOAD:0000000000005F2E LOAD            segment byte public 'CODE' use64
LOAD:0000000000005F2E                 assume cs:LOAD
LOAD:0000000000005F2E                 ;org 5F2Eh
LOAD:0000000000005F2E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005F2E                 align 10h
LOAD:0000000000005F2E LOAD            ends
LOAD:0000000000005F2E
.eh_frame_hdr:0000000000005F30 ; ===========================================================================
.eh_frame_hdr:0000000000005F30
.eh_frame_hdr:0000000000005F30 ; Segment type: Pure data
.eh_frame_hdr:0000000000005F30 ; Segment permissions: Read
.eh_frame_hdr:0000000000005F30 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000005F30                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000005F30                 ;org 5F30h
.eh_frame_hdr:0000000000005F30 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000005F31                 db  1Bh
.eh_frame_hdr:0000000000005F32                 db    3
.eh_frame_hdr:0000000000005F33                 db  3Bh ; ;
.eh_frame_hdr:0000000000005F34                 db  64h ; d
.eh_frame_hdr:0000000000005F35                 db    2
.eh_frame_hdr:0000000000005F36                 db    0
.eh_frame_hdr:0000000000005F37                 db    0
.eh_frame_hdr:0000000000005F38                 db  4Bh ; K
.eh_frame_hdr:0000000000005F39                 db    0
.eh_frame_hdr:0000000000005F3A                 db    0
.eh_frame_hdr:0000000000005F3B                 db    0
.eh_frame_hdr:0000000000005F3C                 db  60h ; `
.eh_frame_hdr:0000000000005F3D                 db 0B4h
.eh_frame_hdr:0000000000005F3E                 db 0FFh
.eh_frame_hdr:0000000000005F3F                 db 0FFh
.eh_frame_hdr:0000000000005F40                 db 0B0h
.eh_frame_hdr:0000000000005F41                 db    2
.eh_frame_hdr:0000000000005F42                 db    0
.eh_frame_hdr:0000000000005F43                 db    0
.eh_frame_hdr:0000000000005F44                 db  40h ; @
.eh_frame_hdr:0000000000005F45                 db 0B7h
.eh_frame_hdr:0000000000005F46                 db 0FFh
.eh_frame_hdr:0000000000005F47                 db 0FFh
.eh_frame_hdr:0000000000005F48                 db 0D8h
.eh_frame_hdr:0000000000005F49                 db    2
.eh_frame_hdr:0000000000005F4A                 db    0
.eh_frame_hdr:0000000000005F4B                 db    0
.eh_frame_hdr:0000000000005F4C                 db  50h ; P
.eh_frame_hdr:0000000000005F4D                 db 0B7h
.eh_frame_hdr:0000000000005F4E                 db 0FFh
.eh_frame_hdr:0000000000005F4F                 db 0FFh
.eh_frame_hdr:0000000000005F50                 db 0F0h
.eh_frame_hdr:0000000000005F51                 db    2
.eh_frame_hdr:0000000000005F52                 db    0
.eh_frame_hdr:0000000000005F53                 db    0
.eh_frame_hdr:0000000000005F54                 db  80h
.eh_frame_hdr:0000000000005F55                 db 0B7h
.eh_frame_hdr:0000000000005F56                 db 0FFh
.eh_frame_hdr:0000000000005F57                 db 0FFh
.eh_frame_hdr:0000000000005F58                 db 0D0h
.eh_frame_hdr:0000000000005F59                 db    3
.eh_frame_hdr:0000000000005F5A                 db    0
.eh_frame_hdr:0000000000005F5B                 db    0
.eh_frame_hdr:0000000000005F5C                 db  80h
.eh_frame_hdr:0000000000005F5D                 db 0BAh
.eh_frame_hdr:0000000000005F5E                 db 0FFh
.eh_frame_hdr:0000000000005F5F                 db 0FFh
.eh_frame_hdr:0000000000005F60                 db  80h
.eh_frame_hdr:0000000000005F61                 db    2
.eh_frame_hdr:0000000000005F62                 db    0
.eh_frame_hdr:0000000000005F63                 db    0
.eh_frame_hdr:0000000000005F64                 db  90h
.eh_frame_hdr:0000000000005F65                 db 0BBh
.eh_frame_hdr:0000000000005F66                 db 0FFh
.eh_frame_hdr:0000000000005F67                 db 0FFh
.eh_frame_hdr:0000000000005F68                 db    8
.eh_frame_hdr:0000000000005F69                 db    3
.eh_frame_hdr:0000000000005F6A                 db    0
.eh_frame_hdr:0000000000005F6B                 db    0
.eh_frame_hdr:0000000000005F6C                 db  40h ; @
.eh_frame_hdr:0000000000005F6D                 db 0C1h
.eh_frame_hdr:0000000000005F6E                 db 0FFh
.eh_frame_hdr:0000000000005F6F                 db 0FFh
.eh_frame_hdr:0000000000005F70                 db  58h ; X
.eh_frame_hdr:0000000000005F71                 db    3
.eh_frame_hdr:0000000000005F72                 db    0
.eh_frame_hdr:0000000000005F73                 db    0
.eh_frame_hdr:0000000000005F74                 db  70h ; p
.eh_frame_hdr:0000000000005F75                 db 0C4h
.eh_frame_hdr:0000000000005F76                 db 0FFh
.eh_frame_hdr:0000000000005F77                 db 0FFh
.eh_frame_hdr:0000000000005F78                 db 0A4h
.eh_frame_hdr:0000000000005F79                 db    3
.eh_frame_hdr:0000000000005F7A                 db    0
.eh_frame_hdr:0000000000005F7B                 db    0
.eh_frame_hdr:0000000000005F7C                 db  50h ; P
.eh_frame_hdr:0000000000005F7D                 db 0C8h
.eh_frame_hdr:0000000000005F7E                 db 0FFh
.eh_frame_hdr:0000000000005F7F                 db 0FFh
.eh_frame_hdr:0000000000005F80                 db  18h
.eh_frame_hdr:0000000000005F81                 db    4
.eh_frame_hdr:0000000000005F82                 db    0
.eh_frame_hdr:0000000000005F83                 db    0
.eh_frame_hdr:0000000000005F84                 db  60h ; `
.eh_frame_hdr:0000000000005F85                 db 0C8h
.eh_frame_hdr:0000000000005F86                 db 0FFh
.eh_frame_hdr:0000000000005F87                 db 0FFh
.eh_frame_hdr:0000000000005F88                 db  2Ch ; ,
.eh_frame_hdr:0000000000005F89                 db    4
.eh_frame_hdr:0000000000005F8A                 db    0
.eh_frame_hdr:0000000000005F8B                 db    0
.eh_frame_hdr:0000000000005F8C                 db  70h ; p
.eh_frame_hdr:0000000000005F8D                 db 0C8h
.eh_frame_hdr:0000000000005F8E                 db 0FFh
.eh_frame_hdr:0000000000005F8F                 db 0FFh
.eh_frame_hdr:0000000000005F90                 db  40h ; @
.eh_frame_hdr:0000000000005F91                 db    4
.eh_frame_hdr:0000000000005F92                 db    0
.eh_frame_hdr:0000000000005F93                 db    0
.eh_frame_hdr:0000000000005F94                 db  20h
.eh_frame_hdr:0000000000005F95                 db 0C9h
.eh_frame_hdr:0000000000005F96                 db 0FFh
.eh_frame_hdr:0000000000005F97                 db 0FFh
.eh_frame_hdr:0000000000005F98                 db  70h ; p
.eh_frame_hdr:0000000000005F99                 db    4
.eh_frame_hdr:0000000000005F9A                 db    0
.eh_frame_hdr:0000000000005F9B                 db    0
.eh_frame_hdr:0000000000005F9C                 db  30h ; 0
.eh_frame_hdr:0000000000005F9D                 db 0C9h
.eh_frame_hdr:0000000000005F9E                 db 0FFh
.eh_frame_hdr:0000000000005F9F                 db 0FFh
.eh_frame_hdr:0000000000005FA0                 db  84h
.eh_frame_hdr:0000000000005FA1                 db    4
.eh_frame_hdr:0000000000005FA2                 db    0
.eh_frame_hdr:0000000000005FA3                 db    0
.eh_frame_hdr:0000000000005FA4                 db  60h ; `
.eh_frame_hdr:0000000000005FA5                 db 0C9h
.eh_frame_hdr:0000000000005FA6                 db 0FFh
.eh_frame_hdr:0000000000005FA7                 db 0FFh
.eh_frame_hdr:0000000000005FA8                 db 0A0h
.eh_frame_hdr:0000000000005FA9                 db    4
.eh_frame_hdr:0000000000005FAA                 db    0
.eh_frame_hdr:0000000000005FAB                 db    0
.eh_frame_hdr:0000000000005FAC                 db    0
.eh_frame_hdr:0000000000005FAD                 db 0CAh
.eh_frame_hdr:0000000000005FAE                 db 0FFh
.eh_frame_hdr:0000000000005FAF                 db 0FFh
.eh_frame_hdr:0000000000005FB0                 db 0C0h
.eh_frame_hdr:0000000000005FB1                 db    4
.eh_frame_hdr:0000000000005FB2                 db    0
.eh_frame_hdr:0000000000005FB3                 db    0
.eh_frame_hdr:0000000000005FB4                 db 0F0h
.eh_frame_hdr:0000000000005FB5                 db 0CAh
.eh_frame_hdr:0000000000005FB6                 db 0FFh
.eh_frame_hdr:0000000000005FB7                 db 0FFh
.eh_frame_hdr:0000000000005FB8                 db    4
.eh_frame_hdr:0000000000005FB9                 db    5
.eh_frame_hdr:0000000000005FBA                 db    0
.eh_frame_hdr:0000000000005FBB                 db    0
.eh_frame_hdr:0000000000005FBC                 db  30h ; 0
.eh_frame_hdr:0000000000005FBD                 db 0DDh
.eh_frame_hdr:0000000000005FBE                 db 0FFh
.eh_frame_hdr:0000000000005FBF                 db 0FFh
.eh_frame_hdr:0000000000005FC0                 db  7Ch ; |
.eh_frame_hdr:0000000000005FC1                 db    5
.eh_frame_hdr:0000000000005FC2                 db    0
.eh_frame_hdr:0000000000005FC3                 db    0
.eh_frame_hdr:0000000000005FC4                 db 0E0h
.eh_frame_hdr:0000000000005FC5                 db 0DEh
.eh_frame_hdr:0000000000005FC6                 db 0FFh
.eh_frame_hdr:0000000000005FC7                 db 0FFh
.eh_frame_hdr:0000000000005FC8                 db 0E8h
.eh_frame_hdr:0000000000005FC9                 db    5
.eh_frame_hdr:0000000000005FCA                 db    0
.eh_frame_hdr:0000000000005FCB                 db    0
.eh_frame_hdr:0000000000005FCC                 db  20h
.eh_frame_hdr:0000000000005FCD                 db 0DFh
.eh_frame_hdr:0000000000005FCE                 db 0FFh
.eh_frame_hdr:0000000000005FCF                 db 0FFh
.eh_frame_hdr:0000000000005FD0                 db  14h
.eh_frame_hdr:0000000000005FD1                 db    6
.eh_frame_hdr:0000000000005FD2                 db    0
.eh_frame_hdr:0000000000005FD3                 db    0
.eh_frame_hdr:0000000000005FD4                 db  40h ; @
.eh_frame_hdr:0000000000005FD5                 db 0DFh
.eh_frame_hdr:0000000000005FD6                 db 0FFh
.eh_frame_hdr:0000000000005FD7                 db 0FFh
.eh_frame_hdr:0000000000005FD8                 db  28h ; (
.eh_frame_hdr:0000000000005FD9                 db    6
.eh_frame_hdr:0000000000005FDA                 db    0
.eh_frame_hdr:0000000000005FDB                 db    0
.eh_frame_hdr:0000000000005FDC                 db  60h ; `
.eh_frame_hdr:0000000000005FDD                 db 0DFh
.eh_frame_hdr:0000000000005FDE                 db 0FFh
.eh_frame_hdr:0000000000005FDF                 db 0FFh
.eh_frame_hdr:0000000000005FE0                 db  3Ch ; <
.eh_frame_hdr:0000000000005FE1                 db    6
.eh_frame_hdr:0000000000005FE2                 db    0
.eh_frame_hdr:0000000000005FE3                 db    0
.eh_frame_hdr:0000000000005FE4                 db 0A0h
.eh_frame_hdr:0000000000005FE5                 db 0DFh
.eh_frame_hdr:0000000000005FE6                 db 0FFh
.eh_frame_hdr:0000000000005FE7                 db 0FFh
.eh_frame_hdr:0000000000005FE8                 db  50h ; P
.eh_frame_hdr:0000000000005FE9                 db    6
.eh_frame_hdr:0000000000005FEA                 db    0
.eh_frame_hdr:0000000000005FEB                 db    0
.eh_frame_hdr:0000000000005FEC                 db 0C0h
.eh_frame_hdr:0000000000005FED                 db 0DFh
.eh_frame_hdr:0000000000005FEE                 db 0FFh
.eh_frame_hdr:0000000000005FEF                 db 0FFh
.eh_frame_hdr:0000000000005FF0                 db  64h ; d
.eh_frame_hdr:0000000000005FF1                 db    6
.eh_frame_hdr:0000000000005FF2                 db    0
.eh_frame_hdr:0000000000005FF3                 db    0
.eh_frame_hdr:0000000000005FF4                 db 0F0h
.eh_frame_hdr:0000000000005FF5                 db 0DFh
.eh_frame_hdr:0000000000005FF6                 db 0FFh
.eh_frame_hdr:0000000000005FF7                 db 0FFh
.eh_frame_hdr:0000000000005FF8                 db  78h ; x
.eh_frame_hdr:0000000000005FF9                 db    6
.eh_frame_hdr:0000000000005FFA                 db    0
.eh_frame_hdr:0000000000005FFB                 db    0
.eh_frame_hdr:0000000000005FFC                 db  70h ; p
.eh_frame_hdr:0000000000005FFD                 db 0E0h
.eh_frame_hdr:0000000000005FFE                 db 0FFh
.eh_frame_hdr:0000000000005FFF                 db 0FFh
.eh_frame_hdr:0000000000006000                 db 0CCh
.eh_frame_hdr:0000000000006001                 db    6
.eh_frame_hdr:0000000000006002                 db    0
.eh_frame_hdr:0000000000006003                 db    0
.eh_frame_hdr:0000000000006004                 db  60h ; `
.eh_frame_hdr:0000000000006005                 db 0E1h
.eh_frame_hdr:0000000000006006                 db 0FFh
.eh_frame_hdr:0000000000006007                 db 0FFh
.eh_frame_hdr:0000000000006008                 db  38h ; 8
.eh_frame_hdr:0000000000006009                 db    7
.eh_frame_hdr:000000000000600A                 db    0
.eh_frame_hdr:000000000000600B                 db    0
.eh_frame_hdr:000000000000600C                 db  70h ; p
.eh_frame_hdr:000000000000600D                 db 0E1h
.eh_frame_hdr:000000000000600E                 db 0FFh
.eh_frame_hdr:000000000000600F                 db 0FFh
.eh_frame_hdr:0000000000006010                 db  4Ch ; L
.eh_frame_hdr:0000000000006011                 db    7
.eh_frame_hdr:0000000000006012                 db    0
.eh_frame_hdr:0000000000006013                 db    0
.eh_frame_hdr:0000000000006014                 db  10h
.eh_frame_hdr:0000000000006015                 db 0E2h
.eh_frame_hdr:0000000000006016                 db 0FFh
.eh_frame_hdr:0000000000006017                 db 0FFh
.eh_frame_hdr:0000000000006018                 db  78h ; x
.eh_frame_hdr:0000000000006019                 db    7
.eh_frame_hdr:000000000000601A                 db    0
.eh_frame_hdr:000000000000601B                 db    0
.eh_frame_hdr:000000000000601C                 db  30h ; 0
.eh_frame_hdr:000000000000601D                 db 0E2h
.eh_frame_hdr:000000000000601E                 db 0FFh
.eh_frame_hdr:000000000000601F                 db 0FFh
.eh_frame_hdr:0000000000006020                 db  8Ch
.eh_frame_hdr:0000000000006021                 db    7
.eh_frame_hdr:0000000000006022                 db    0
.eh_frame_hdr:0000000000006023                 db    0
.eh_frame_hdr:0000000000006024                 db  40h ; @
.eh_frame_hdr:0000000000006025                 db 0E2h
.eh_frame_hdr:0000000000006026                 db 0FFh
.eh_frame_hdr:0000000000006027                 db 0FFh
.eh_frame_hdr:0000000000006028                 db 0A0h
.eh_frame_hdr:0000000000006029                 db    7
.eh_frame_hdr:000000000000602A                 db    0
.eh_frame_hdr:000000000000602B                 db    0
.eh_frame_hdr:000000000000602C                 db  60h ; `
.eh_frame_hdr:000000000000602D                 db 0E2h
.eh_frame_hdr:000000000000602E                 db 0FFh
.eh_frame_hdr:000000000000602F                 db 0FFh
.eh_frame_hdr:0000000000006030                 db 0B4h
.eh_frame_hdr:0000000000006031                 db    7
.eh_frame_hdr:0000000000006032                 db    0
.eh_frame_hdr:0000000000006033                 db    0
.eh_frame_hdr:0000000000006034                 db  80h
.eh_frame_hdr:0000000000006035                 db 0E2h
.eh_frame_hdr:0000000000006036                 db 0FFh
.eh_frame_hdr:0000000000006037                 db 0FFh
.eh_frame_hdr:0000000000006038                 db 0C8h
.eh_frame_hdr:0000000000006039                 db    7
.eh_frame_hdr:000000000000603A                 db    0
.eh_frame_hdr:000000000000603B                 db    0
.eh_frame_hdr:000000000000603C                 db  10h
.eh_frame_hdr:000000000000603D                 db 0E3h
.eh_frame_hdr:000000000000603E                 db 0FFh
.eh_frame_hdr:000000000000603F                 db 0FFh
.eh_frame_hdr:0000000000006040                 db 0E4h
.eh_frame_hdr:0000000000006041                 db    7
.eh_frame_hdr:0000000000006042                 db    0
.eh_frame_hdr:0000000000006043                 db    0
.eh_frame_hdr:0000000000006044                 db 0A0h
.eh_frame_hdr:0000000000006045                 db 0E3h
.eh_frame_hdr:0000000000006046                 db 0FFh
.eh_frame_hdr:0000000000006047                 db 0FFh
.eh_frame_hdr:0000000000006048                 db    0
.eh_frame_hdr:0000000000006049                 db    8
.eh_frame_hdr:000000000000604A                 db    0
.eh_frame_hdr:000000000000604B                 db    0
.eh_frame_hdr:000000000000604C                 db 0B0h
.eh_frame_hdr:000000000000604D                 db 0E3h
.eh_frame_hdr:000000000000604E                 db 0FFh
.eh_frame_hdr:000000000000604F                 db 0FFh
.eh_frame_hdr:0000000000006050                 db  14h
.eh_frame_hdr:0000000000006051                 db    8
.eh_frame_hdr:0000000000006052                 db    0
.eh_frame_hdr:0000000000006053                 db    0
.eh_frame_hdr:0000000000006054                 db 0C0h
.eh_frame_hdr:0000000000006055                 db 0E3h
.eh_frame_hdr:0000000000006056                 db 0FFh
.eh_frame_hdr:0000000000006057                 db 0FFh
.eh_frame_hdr:0000000000006058                 db  28h ; (
.eh_frame_hdr:0000000000006059                 db    8
.eh_frame_hdr:000000000000605A                 db    0
.eh_frame_hdr:000000000000605B                 db    0
.eh_frame_hdr:000000000000605C                 db  60h ; `
.eh_frame_hdr:000000000000605D                 db 0E4h
.eh_frame_hdr:000000000000605E                 db 0FFh
.eh_frame_hdr:000000000000605F                 db 0FFh
.eh_frame_hdr:0000000000006060                 db  44h ; D
.eh_frame_hdr:0000000000006061                 db    8
.eh_frame_hdr:0000000000006062                 db    0
.eh_frame_hdr:0000000000006063                 db    0
.eh_frame_hdr:0000000000006064                 db  70h ; p
.eh_frame_hdr:0000000000006065                 db 0E4h
.eh_frame_hdr:0000000000006066                 db 0FFh
.eh_frame_hdr:0000000000006067                 db 0FFh
.eh_frame_hdr:0000000000006068                 db  58h ; X
.eh_frame_hdr:0000000000006069                 db    8
.eh_frame_hdr:000000000000606A                 db    0
.eh_frame_hdr:000000000000606B                 db    0
.eh_frame_hdr:000000000000606C                 db  90h
.eh_frame_hdr:000000000000606D                 db 0E4h
.eh_frame_hdr:000000000000606E                 db 0FFh
.eh_frame_hdr:000000000000606F                 db 0FFh
.eh_frame_hdr:0000000000006070                 db  6Ch ; l
.eh_frame_hdr:0000000000006071                 db    8
.eh_frame_hdr:0000000000006072                 db    0
.eh_frame_hdr:0000000000006073                 db    0
.eh_frame_hdr:0000000000006074                 db 0A0h
.eh_frame_hdr:0000000000006075                 db 0E4h
.eh_frame_hdr:0000000000006076                 db 0FFh
.eh_frame_hdr:0000000000006077                 db 0FFh
.eh_frame_hdr:0000000000006078                 db  80h
.eh_frame_hdr:0000000000006079                 db    8
.eh_frame_hdr:000000000000607A                 db    0
.eh_frame_hdr:000000000000607B                 db    0
.eh_frame_hdr:000000000000607C                 db  30h ; 0
.eh_frame_hdr:000000000000607D                 db 0E5h
.eh_frame_hdr:000000000000607E                 db 0FFh
.eh_frame_hdr:000000000000607F                 db 0FFh
.eh_frame_hdr:0000000000006080                 db  9Ch
.eh_frame_hdr:0000000000006081                 db    8
.eh_frame_hdr:0000000000006082                 db    0
.eh_frame_hdr:0000000000006083                 db    0
.eh_frame_hdr:0000000000006084                 db 0D0h
.eh_frame_hdr:0000000000006085                 db 0E5h
.eh_frame_hdr:0000000000006086                 db 0FFh
.eh_frame_hdr:0000000000006087                 db 0FFh
.eh_frame_hdr:0000000000006088                 db 0B8h
.eh_frame_hdr:0000000000006089                 db    8
.eh_frame_hdr:000000000000608A                 db    0
.eh_frame_hdr:000000000000608B                 db    0
.eh_frame_hdr:000000000000608C                 db 0E0h
.eh_frame_hdr:000000000000608D                 db 0E5h
.eh_frame_hdr:000000000000608E                 db 0FFh
.eh_frame_hdr:000000000000608F                 db 0FFh
.eh_frame_hdr:0000000000006090                 db 0CCh
.eh_frame_hdr:0000000000006091                 db    8
.eh_frame_hdr:0000000000006092                 db    0
.eh_frame_hdr:0000000000006093                 db    0
.eh_frame_hdr:0000000000006094                 db    0
.eh_frame_hdr:0000000000006095                 db 0E6h
.eh_frame_hdr:0000000000006096                 db 0FFh
.eh_frame_hdr:0000000000006097                 db 0FFh
.eh_frame_hdr:0000000000006098                 db 0E0h
.eh_frame_hdr:0000000000006099                 db    8
.eh_frame_hdr:000000000000609A                 db    0
.eh_frame_hdr:000000000000609B                 db    0
.eh_frame_hdr:000000000000609C                 db  20h
.eh_frame_hdr:000000000000609D                 db 0E6h
.eh_frame_hdr:000000000000609E                 db 0FFh
.eh_frame_hdr:000000000000609F                 db 0FFh
.eh_frame_hdr:00000000000060A0                 db 0F4h
.eh_frame_hdr:00000000000060A1                 db    8
.eh_frame_hdr:00000000000060A2                 db    0
.eh_frame_hdr:00000000000060A3                 db    0
.eh_frame_hdr:00000000000060A4                 db  30h ; 0
.eh_frame_hdr:00000000000060A5                 db 0E6h
.eh_frame_hdr:00000000000060A6                 db 0FFh
.eh_frame_hdr:00000000000060A7                 db 0FFh
.eh_frame_hdr:00000000000060A8                 db    8
.eh_frame_hdr:00000000000060A9                 db    9
.eh_frame_hdr:00000000000060AA                 db    0
.eh_frame_hdr:00000000000060AB                 db    0
.eh_frame_hdr:00000000000060AC                 db  50h ; P
.eh_frame_hdr:00000000000060AD                 db 0E6h
.eh_frame_hdr:00000000000060AE                 db 0FFh
.eh_frame_hdr:00000000000060AF                 db 0FFh
.eh_frame_hdr:00000000000060B0                 db  1Ch
.eh_frame_hdr:00000000000060B1                 db    9
.eh_frame_hdr:00000000000060B2                 db    0
.eh_frame_hdr:00000000000060B3                 db    0
.eh_frame_hdr:00000000000060B4                 db  70h ; p
.eh_frame_hdr:00000000000060B5                 db 0E6h
.eh_frame_hdr:00000000000060B6                 db 0FFh
.eh_frame_hdr:00000000000060B7                 db 0FFh
.eh_frame_hdr:00000000000060B8                 db  30h ; 0
.eh_frame_hdr:00000000000060B9                 db    9
.eh_frame_hdr:00000000000060BA                 db    0
.eh_frame_hdr:00000000000060BB                 db    0
.eh_frame_hdr:00000000000060BC                 db  90h
.eh_frame_hdr:00000000000060BD                 db 0E6h
.eh_frame_hdr:00000000000060BE                 db 0FFh
.eh_frame_hdr:00000000000060BF                 db 0FFh
.eh_frame_hdr:00000000000060C0                 db  48h ; H
.eh_frame_hdr:00000000000060C1                 db    9
.eh_frame_hdr:00000000000060C2                 db    0
.eh_frame_hdr:00000000000060C3                 db    0
.eh_frame_hdr:00000000000060C4                 db 0B0h
.eh_frame_hdr:00000000000060C5                 db 0EAh
.eh_frame_hdr:00000000000060C6                 db 0FFh
.eh_frame_hdr:00000000000060C7                 db 0FFh
.eh_frame_hdr:00000000000060C8                 db  5Ch ; \
.eh_frame_hdr:00000000000060C9                 db  0Ah
.eh_frame_hdr:00000000000060CA                 db    0
.eh_frame_hdr:00000000000060CB                 db    0
.eh_frame_hdr:00000000000060CC                 db 0D0h
.eh_frame_hdr:00000000000060CD                 db 0EAh
.eh_frame_hdr:00000000000060CE                 db 0FFh
.eh_frame_hdr:00000000000060CF                 db 0FFh
.eh_frame_hdr:00000000000060D0                 db  70h ; p
.eh_frame_hdr:00000000000060D1                 db  0Ah
.eh_frame_hdr:00000000000060D2                 db    0
.eh_frame_hdr:00000000000060D3                 db    0
.eh_frame_hdr:00000000000060D4                 db  50h ; P
.eh_frame_hdr:00000000000060D5                 db 0EBh
.eh_frame_hdr:00000000000060D6                 db 0FFh
.eh_frame_hdr:00000000000060D7                 db 0FFh
.eh_frame_hdr:00000000000060D8                 db  8Ch
.eh_frame_hdr:00000000000060D9                 db  0Ah
.eh_frame_hdr:00000000000060DA                 db    0
.eh_frame_hdr:00000000000060DB                 db    0
.eh_frame_hdr:00000000000060DC                 db  30h ; 0
.eh_frame_hdr:00000000000060DD                 db 0ECh
.eh_frame_hdr:00000000000060DE                 db 0FFh
.eh_frame_hdr:00000000000060DF                 db 0FFh
.eh_frame_hdr:00000000000060E0                 db 0B8h
.eh_frame_hdr:00000000000060E1                 db  0Ah
.eh_frame_hdr:00000000000060E2                 db    0
.eh_frame_hdr:00000000000060E3                 db    0
.eh_frame_hdr:00000000000060E4                 db 0B0h
.eh_frame_hdr:00000000000060E5                 db 0ECh
.eh_frame_hdr:00000000000060E6                 db 0FFh
.eh_frame_hdr:00000000000060E7                 db 0FFh
.eh_frame_hdr:00000000000060E8                 db 0D8h
.eh_frame_hdr:00000000000060E9                 db  0Ah
.eh_frame_hdr:00000000000060EA                 db    0
.eh_frame_hdr:00000000000060EB                 db    0
.eh_frame_hdr:00000000000060EC                 db 0D0h
.eh_frame_hdr:00000000000060ED                 db 0ECh
.eh_frame_hdr:00000000000060EE                 db 0FFh
.eh_frame_hdr:00000000000060EF                 db 0FFh
.eh_frame_hdr:00000000000060F0                 db 0F4h
.eh_frame_hdr:00000000000060F1                 db  0Ah
.eh_frame_hdr:00000000000060F2                 db    0
.eh_frame_hdr:00000000000060F3                 db    0
.eh_frame_hdr:00000000000060F4                 db    0
.eh_frame_hdr:00000000000060F5                 db 0EDh
.eh_frame_hdr:00000000000060F6                 db 0FFh
.eh_frame_hdr:00000000000060F7                 db 0FFh
.eh_frame_hdr:00000000000060F8                 db    8
.eh_frame_hdr:00000000000060F9                 db  0Bh
.eh_frame_hdr:00000000000060FA                 db    0
.eh_frame_hdr:00000000000060FB                 db    0
.eh_frame_hdr:00000000000060FC                 db  10h
.eh_frame_hdr:00000000000060FD                 db 0EDh
.eh_frame_hdr:00000000000060FE                 db 0FFh
.eh_frame_hdr:00000000000060FF                 db 0FFh
.eh_frame_hdr:0000000000006100                 db  1Ch
.eh_frame_hdr:0000000000006101                 db  0Bh
.eh_frame_hdr:0000000000006102                 db    0
.eh_frame_hdr:0000000000006103                 db    0
.eh_frame_hdr:0000000000006104                 db  50h ; P
.eh_frame_hdr:0000000000006105                 db 0EDh
.eh_frame_hdr:0000000000006106                 db 0FFh
.eh_frame_hdr:0000000000006107                 db 0FFh
.eh_frame_hdr:0000000000006108                 db  40h ; @
.eh_frame_hdr:0000000000006109                 db  0Bh
.eh_frame_hdr:000000000000610A                 db    0
.eh_frame_hdr:000000000000610B                 db    0
.eh_frame_hdr:000000000000610C                 db  80h
.eh_frame_hdr:000000000000610D                 db 0EDh
.eh_frame_hdr:000000000000610E                 db 0FFh
.eh_frame_hdr:000000000000610F                 db 0FFh
.eh_frame_hdr:0000000000006110                 db  54h ; T
.eh_frame_hdr:0000000000006111                 db  0Bh
.eh_frame_hdr:0000000000006112                 db    0
.eh_frame_hdr:0000000000006113                 db    0
.eh_frame_hdr:0000000000006114                 db  10h
.eh_frame_hdr:0000000000006115                 db 0EEh
.eh_frame_hdr:0000000000006116                 db 0FFh
.eh_frame_hdr:0000000000006117                 db 0FFh
.eh_frame_hdr:0000000000006118                 db  6Ch ; l
.eh_frame_hdr:0000000000006119                 db  0Bh
.eh_frame_hdr:000000000000611A                 db    0
.eh_frame_hdr:000000000000611B                 db    0
.eh_frame_hdr:000000000000611C                 db  60h ; `
.eh_frame_hdr:000000000000611D                 db 0EEh
.eh_frame_hdr:000000000000611E                 db 0FFh
.eh_frame_hdr:000000000000611F                 db 0FFh
.eh_frame_hdr:0000000000006120                 db  84h
.eh_frame_hdr:0000000000006121                 db  0Bh
.eh_frame_hdr:0000000000006122                 db    0
.eh_frame_hdr:0000000000006123                 db    0
.eh_frame_hdr:0000000000006124                 db  80h
.eh_frame_hdr:0000000000006125                 db 0EEh
.eh_frame_hdr:0000000000006126                 db 0FFh
.eh_frame_hdr:0000000000006127                 db 0FFh
.eh_frame_hdr:0000000000006128                 db 0A0h
.eh_frame_hdr:0000000000006129                 db  0Bh
.eh_frame_hdr:000000000000612A                 db    0
.eh_frame_hdr:000000000000612B                 db    0
.eh_frame_hdr:000000000000612C                 db 0B0h
.eh_frame_hdr:000000000000612D                 db 0EEh
.eh_frame_hdr:000000000000612E                 db 0FFh
.eh_frame_hdr:000000000000612F                 db 0FFh
.eh_frame_hdr:0000000000006130                 db 0BCh
.eh_frame_hdr:0000000000006131                 db  0Bh
.eh_frame_hdr:0000000000006132                 db    0
.eh_frame_hdr:0000000000006133                 db    0
.eh_frame_hdr:0000000000006134                 db 0E0h
.eh_frame_hdr:0000000000006135                 db 0EEh
.eh_frame_hdr:0000000000006136                 db 0FFh
.eh_frame_hdr:0000000000006137                 db 0FFh
.eh_frame_hdr:0000000000006138                 db 0E4h
.eh_frame_hdr:0000000000006139                 db  0Bh
.eh_frame_hdr:000000000000613A                 db    0
.eh_frame_hdr:000000000000613B                 db    0
.eh_frame_hdr:000000000000613C                 db    0
.eh_frame_hdr:000000000000613D                 db 0EFh
.eh_frame_hdr:000000000000613E                 db 0FFh
.eh_frame_hdr:000000000000613F                 db 0FFh
.eh_frame_hdr:0000000000006140                 db    0
.eh_frame_hdr:0000000000006141                 db  0Ch
.eh_frame_hdr:0000000000006142                 db    0
.eh_frame_hdr:0000000000006143                 db    0
.eh_frame_hdr:0000000000006144                 db  40h ; @
.eh_frame_hdr:0000000000006145                 db 0EFh
.eh_frame_hdr:0000000000006146                 db 0FFh
.eh_frame_hdr:0000000000006147                 db 0FFh
.eh_frame_hdr:0000000000006148                 db  18h
.eh_frame_hdr:0000000000006149                 db  0Ch
.eh_frame_hdr:000000000000614A                 db    0
.eh_frame_hdr:000000000000614B                 db    0
.eh_frame_hdr:000000000000614C                 db 0C0h
.eh_frame_hdr:000000000000614D                 db 0EFh
.eh_frame_hdr:000000000000614E                 db 0FFh
.eh_frame_hdr:000000000000614F                 db 0FFh
.eh_frame_hdr:0000000000006150                 db  50h ; P
.eh_frame_hdr:0000000000006151                 db  0Ch
.eh_frame_hdr:0000000000006152                 db    0
.eh_frame_hdr:0000000000006153                 db    0
.eh_frame_hdr:0000000000006154                 db    0
.eh_frame_hdr:0000000000006155                 db 0F0h
.eh_frame_hdr:0000000000006156                 db 0FFh
.eh_frame_hdr:0000000000006157                 db 0FFh
.eh_frame_hdr:0000000000006158                 db  70h ; p
.eh_frame_hdr:0000000000006159                 db  0Ch
.eh_frame_hdr:000000000000615A                 db    0
.eh_frame_hdr:000000000000615B                 db    0
.eh_frame_hdr:000000000000615C                 db  60h ; `
.eh_frame_hdr:000000000000615D                 db 0F0h
.eh_frame_hdr:000000000000615E                 db 0FFh
.eh_frame_hdr:000000000000615F                 db 0FFh
.eh_frame_hdr:0000000000006160                 db 0A0h
.eh_frame_hdr:0000000000006161                 db  0Ch
.eh_frame_hdr:0000000000006162                 db    0
.eh_frame_hdr:0000000000006163                 db    0
.eh_frame_hdr:0000000000006164                 db 0F0h
.eh_frame_hdr:0000000000006165                 db 0F0h
.eh_frame_hdr:0000000000006166                 db 0FFh
.eh_frame_hdr:0000000000006167                 db 0FFh
.eh_frame_hdr:0000000000006168                 db 0E0h
.eh_frame_hdr:0000000000006169                 db  0Ch
.eh_frame_hdr:000000000000616A                 db    0
.eh_frame_hdr:000000000000616B                 db    0
.eh_frame_hdr:000000000000616C                 db  70h ; p
.eh_frame_hdr:000000000000616D                 db 0F1h
.eh_frame_hdr:000000000000616E                 db 0FFh
.eh_frame_hdr:000000000000616F                 db 0FFh
.eh_frame_hdr:0000000000006170                 db  30h ; 0
.eh_frame_hdr:0000000000006171                 db  0Dh
.eh_frame_hdr:0000000000006172                 db    0
.eh_frame_hdr:0000000000006173                 db    0
.eh_frame_hdr:0000000000006174                 db 0D0h
.eh_frame_hdr:0000000000006175                 db 0F1h
.eh_frame_hdr:0000000000006176                 db 0FFh
.eh_frame_hdr:0000000000006177                 db 0FFh
.eh_frame_hdr:0000000000006178                 db  50h ; P
.eh_frame_hdr:0000000000006179                 db  0Dh
.eh_frame_hdr:000000000000617A                 db    0
.eh_frame_hdr:000000000000617B                 db    0
.eh_frame_hdr:000000000000617C                 db  10h
.eh_frame_hdr:000000000000617D                 db 0F2h
.eh_frame_hdr:000000000000617E                 db 0FFh
.eh_frame_hdr:000000000000617F                 db 0FFh
.eh_frame_hdr:0000000000006180                 db  70h ; p
.eh_frame_hdr:0000000000006181                 db  0Dh
.eh_frame_hdr:0000000000006182                 db    0
.eh_frame_hdr:0000000000006183                 db    0
.eh_frame_hdr:0000000000006184                 db  80h
.eh_frame_hdr:0000000000006185                 db 0F2h
.eh_frame_hdr:0000000000006186                 db 0FFh
.eh_frame_hdr:0000000000006187                 db 0FFh
.eh_frame_hdr:0000000000006188                 db 0B8h
.eh_frame_hdr:0000000000006189                 db  0Dh
.eh_frame_hdr:000000000000618A                 db    0
.eh_frame_hdr:000000000000618B                 db    0
.eh_frame_hdr:000000000000618C                 db  90h
.eh_frame_hdr:000000000000618D                 db 0F2h
.eh_frame_hdr:000000000000618E                 db 0FFh
.eh_frame_hdr:000000000000618F                 db 0FFh
.eh_frame_hdr:0000000000006190                 db 0D0h
.eh_frame_hdr:0000000000006191                 db  0Dh
.eh_frame_hdr:0000000000006192                 db    0
.eh_frame_hdr:0000000000006193                 db    0
.eh_frame_hdr:0000000000006193 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000006193
LOAD:0000000000006194 ; ===========================================================================
LOAD:0000000000006194
LOAD:0000000000006194 ; Segment type: Pure code
LOAD:0000000000006194 ; Segment permissions: Read/Execute
LOAD:0000000000006194 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006194                 assume cs:LOAD
LOAD:0000000000006194                 ;org 6194h
LOAD:0000000000006194                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006194                 align 8
LOAD:0000000000006194 LOAD            ends
LOAD:0000000000006194
.eh_frame:0000000000006198 ; ===========================================================================
.eh_frame:0000000000006198
.eh_frame:0000000000006198 ; Segment type: Pure data
.eh_frame:0000000000006198 ; Segment permissions: Read
.eh_frame:0000000000006198 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000006198                 assume cs:_eh_frame
.eh_frame:0000000000006198                 ;org 6198h
.eh_frame:0000000000006198                 db  14h
.eh_frame:0000000000006199                 db    0
.eh_frame:000000000000619A                 db    0
.eh_frame:000000000000619B                 db    0
.eh_frame:000000000000619C                 db    0
.eh_frame:000000000000619D                 db    0
.eh_frame:000000000000619E                 db    0
.eh_frame:000000000000619F                 db    0
.eh_frame:00000000000061A0                 db    1
.eh_frame:00000000000061A1                 db  7Ah ; z
.eh_frame:00000000000061A2                 db  52h ; R
.eh_frame:00000000000061A3                 db    0
.eh_frame:00000000000061A4                 db    1
.eh_frame:00000000000061A5                 db  78h ; x
.eh_frame:00000000000061A6                 db  10h
.eh_frame:00000000000061A7                 db    1
.eh_frame:00000000000061A8                 db  1Bh
.eh_frame:00000000000061A9                 db  0Ch
.eh_frame:00000000000061AA                 db    7
.eh_frame:00000000000061AB                 db    8
.eh_frame:00000000000061AC                 db  90h
.eh_frame:00000000000061AD                 db    1
.eh_frame:00000000000061AE                 db    7
.eh_frame:00000000000061AF                 db  10h
.eh_frame:00000000000061B0                 db  14h
.eh_frame:00000000000061B1                 db    0
.eh_frame:00000000000061B2                 db    0
.eh_frame:00000000000061B3                 db    0
.eh_frame:00000000000061B4                 db  1Ch
.eh_frame:00000000000061B5                 db    0
.eh_frame:00000000000061B6                 db    0
.eh_frame:00000000000061B7                 db    0
.eh_frame:00000000000061B8                 db 0F8h
.eh_frame:00000000000061B9                 db 0B7h
.eh_frame:00000000000061BA                 db 0FFh
.eh_frame:00000000000061BB                 db 0FFh
.eh_frame:00000000000061BC                 db  2Bh ; +
.eh_frame:00000000000061BD                 db    0
.eh_frame:00000000000061BE                 db    0
.eh_frame:00000000000061BF                 db    0
.eh_frame:00000000000061C0                 db    0
.eh_frame:00000000000061C1                 db    0
.eh_frame:00000000000061C2                 db    0
.eh_frame:00000000000061C3                 db    0
.eh_frame:00000000000061C4                 db    0
.eh_frame:00000000000061C5                 db    0
.eh_frame:00000000000061C6                 db    0
.eh_frame:00000000000061C7                 db    0
.eh_frame:00000000000061C8                 db  14h
.eh_frame:00000000000061C9                 db    0
.eh_frame:00000000000061CA                 db    0
.eh_frame:00000000000061CB                 db    0
.eh_frame:00000000000061CC                 db    0
.eh_frame:00000000000061CD                 db    0
.eh_frame:00000000000061CE                 db    0
.eh_frame:00000000000061CF                 db    0
.eh_frame:00000000000061D0                 db    1
.eh_frame:00000000000061D1                 db  7Ah ; z
.eh_frame:00000000000061D2                 db  52h ; R
.eh_frame:00000000000061D3                 db    0
.eh_frame:00000000000061D4                 db    1
.eh_frame:00000000000061D5                 db  78h ; x
.eh_frame:00000000000061D6                 db  10h
.eh_frame:00000000000061D7                 db    1
.eh_frame:00000000000061D8                 db  1Bh
.eh_frame:00000000000061D9                 db  0Ch
.eh_frame:00000000000061DA                 db    7
.eh_frame:00000000000061DB                 db    8
.eh_frame:00000000000061DC                 db  90h
.eh_frame:00000000000061DD                 db    1
.eh_frame:00000000000061DE                 db    0
.eh_frame:00000000000061DF                 db    0
.eh_frame:00000000000061E0                 db  24h ; $
.eh_frame:00000000000061E1                 db    0
.eh_frame:00000000000061E2                 db    0
.eh_frame:00000000000061E3                 db    0
.eh_frame:00000000000061E4                 db  1Ch
.eh_frame:00000000000061E5                 db    0
.eh_frame:00000000000061E6                 db    0
.eh_frame:00000000000061E7                 db    0
.eh_frame:00000000000061E8                 db 0A8h
.eh_frame:00000000000061E9                 db 0B1h
.eh_frame:00000000000061EA                 db 0FFh
.eh_frame:00000000000061EB                 db 0FFh
.eh_frame:00000000000061EC                 db 0E0h
.eh_frame:00000000000061ED                 db    2
.eh_frame:00000000000061EE                 db    0
.eh_frame:00000000000061EF                 db    0
.eh_frame:00000000000061F0                 db    0
.eh_frame:00000000000061F1                 db  0Eh
.eh_frame:00000000000061F2                 db  10h
.eh_frame:00000000000061F3                 db  46h ; F
.eh_frame:00000000000061F4                 db  0Eh
.eh_frame:00000000000061F5                 db  18h
.eh_frame:00000000000061F6                 db  4Ah ; J
.eh_frame:00000000000061F7                 db  0Fh
.eh_frame:00000000000061F8                 db  0Bh
.eh_frame:00000000000061F9                 db  77h ; w
.eh_frame:00000000000061FA                 db    8
.eh_frame:00000000000061FB                 db  80h
.eh_frame:00000000000061FC                 db    0
.eh_frame:00000000000061FD                 db  3Fh ; ?
.eh_frame:00000000000061FE                 db  1Ah
.eh_frame:00000000000061FF                 db  3Bh ; ;
.eh_frame:0000000000006200                 db  2Ah ; *
.eh_frame:0000000000006201                 db  33h ; 3
.eh_frame:0000000000006202                 db  24h ; $
.eh_frame:0000000000006203                 db  22h ; "
.eh_frame:0000000000006204                 db    0
.eh_frame:0000000000006205                 db    0
.eh_frame:0000000000006206                 db    0
.eh_frame:0000000000006207                 db    0
.eh_frame:0000000000006208                 db  14h
.eh_frame:0000000000006209                 db    0
.eh_frame:000000000000620A                 db    0
.eh_frame:000000000000620B                 db    0
.eh_frame:000000000000620C                 db  44h ; D
.eh_frame:000000000000620D                 db    0
.eh_frame:000000000000620E                 db    0
.eh_frame:000000000000620F                 db    0
.eh_frame:0000000000006210                 db  60h ; `
.eh_frame:0000000000006211                 db 0B4h
.eh_frame:0000000000006212                 db 0FFh
.eh_frame:0000000000006213                 db 0FFh
.eh_frame:0000000000006214                 db    8
.eh_frame:0000000000006215                 db    0
.eh_frame:0000000000006216                 db    0
.eh_frame:0000000000006217                 db    0
.eh_frame:0000000000006218                 db    0
.eh_frame:0000000000006219                 db    0
.eh_frame:000000000000621A                 db    0
.eh_frame:000000000000621B                 db    0
.eh_frame:000000000000621C                 db    0
.eh_frame:000000000000621D                 db    0
.eh_frame:000000000000621E                 db    0
.eh_frame:000000000000621F                 db    0
.eh_frame:0000000000006220                 db  14h
.eh_frame:0000000000006221                 db    0
.eh_frame:0000000000006222                 db    0
.eh_frame:0000000000006223                 db    0
.eh_frame:0000000000006224                 db  5Ch ; \
.eh_frame:0000000000006225                 db    0
.eh_frame:0000000000006226                 db    0
.eh_frame:0000000000006227                 db    0
.eh_frame:0000000000006228                 db  58h ; X
.eh_frame:0000000000006229                 db 0B4h
.eh_frame:000000000000622A                 db 0FFh
.eh_frame:000000000000622B                 db 0FFh
.eh_frame:000000000000622C                 db  2Dh ; -
.eh_frame:000000000000622D                 db    0
.eh_frame:000000000000622E                 db    0
.eh_frame:000000000000622F                 db    0
.eh_frame:0000000000006230                 db    0
.eh_frame:0000000000006231                 db  41h ; A
.eh_frame:0000000000006232                 db  0Eh
.eh_frame:0000000000006233                 db  10h
.eh_frame:0000000000006234                 db  83h
.eh_frame:0000000000006235                 db    2
.eh_frame:0000000000006236                 db    0
.eh_frame:0000000000006237                 db    0
.eh_frame:0000000000006238                 db  4Ch ; L
.eh_frame:0000000000006239                 db    0
.eh_frame:000000000000623A                 db    0
.eh_frame:000000000000623B                 db    0
.eh_frame:000000000000623C                 db  74h ; t
.eh_frame:000000000000623D                 db    0
.eh_frame:000000000000623E                 db    0
.eh_frame:000000000000623F                 db    0
.eh_frame:0000000000006240                 db  80h
.eh_frame:0000000000006241                 db 0B8h
.eh_frame:0000000000006242                 db 0FFh
.eh_frame:0000000000006243                 db 0FFh
.eh_frame:0000000000006244                 db 0A9h
.eh_frame:0000000000006245                 db    5
.eh_frame:0000000000006246                 db    0
.eh_frame:0000000000006247                 db    0
.eh_frame:0000000000006248                 db    0
.eh_frame:0000000000006249                 db  42h ; B
.eh_frame:000000000000624A                 db  0Eh
.eh_frame:000000000000624B                 db  10h
.eh_frame:000000000000624C                 db  8Fh
.eh_frame:000000000000624D                 db    2
.eh_frame:000000000000624E                 db  42h ; B
.eh_frame:000000000000624F                 db  0Eh
.eh_frame:0000000000006250                 db  18h
.eh_frame:0000000000006251                 db  8Eh
.eh_frame:0000000000006252                 db    3
.eh_frame:0000000000006253                 db  42h ; B
.eh_frame:0000000000006254                 db  0Eh
.eh_frame:0000000000006255                 db  20h
.eh_frame:0000000000006256                 db  8Dh
.eh_frame:0000000000006257                 db    4
.eh_frame:0000000000006258                 db  42h ; B
.eh_frame:0000000000006259                 db  0Eh
.eh_frame:000000000000625A                 db  28h ; (
.eh_frame:000000000000625B                 db  8Ch
.eh_frame:000000000000625C                 db    5
.eh_frame:000000000000625D                 db  41h ; A
.eh_frame:000000000000625E                 db  0Eh
.eh_frame:000000000000625F                 db  30h ; 0
.eh_frame:0000000000006260                 db  86h
.eh_frame:0000000000006261                 db    6
.eh_frame:0000000000006262                 db  41h ; A
.eh_frame:0000000000006263                 db  0Eh
.eh_frame:0000000000006264                 db  38h ; 8
.eh_frame:0000000000006265                 db  83h
.eh_frame:0000000000006266                 db    7
.eh_frame:0000000000006267                 db  4Bh ; K
.eh_frame:0000000000006268                 db  0Eh
.eh_frame:0000000000006269                 db  80h
.eh_frame:000000000000626A                 db    1
.eh_frame:000000000000626B                 db    3
.eh_frame:000000000000626C                 db 0B8h
.eh_frame:000000000000626D                 db    3
.eh_frame:000000000000626E                 db  0Ah
.eh_frame:000000000000626F                 db  0Eh
.eh_frame:0000000000006270                 db  38h ; 8
.eh_frame:0000000000006271                 db  41h ; A
.eh_frame:0000000000006272                 db  0Eh
.eh_frame:0000000000006273                 db  30h ; 0
.eh_frame:0000000000006274                 db  41h ; A
.eh_frame:0000000000006275                 db  0Eh
.eh_frame:0000000000006276                 db  28h ; (
.eh_frame:0000000000006277                 db  42h ; B
.eh_frame:0000000000006278                 db  0Eh
.eh_frame:0000000000006279                 db  20h
.eh_frame:000000000000627A                 db  42h ; B
.eh_frame:000000000000627B                 db  0Eh
.eh_frame:000000000000627C                 db  18h
.eh_frame:000000000000627D                 db  42h ; B
.eh_frame:000000000000627E                 db  0Eh
.eh_frame:000000000000627F                 db  10h
.eh_frame:0000000000006280                 db  42h ; B
.eh_frame:0000000000006281                 db  0Eh
.eh_frame:0000000000006282                 db    8
.eh_frame:0000000000006283                 db  49h ; I
.eh_frame:0000000000006284                 db  0Bh
.eh_frame:0000000000006285                 db    0
.eh_frame:0000000000006286                 db    0
.eh_frame:0000000000006287                 db    0
.eh_frame:0000000000006288                 db  48h ; H
.eh_frame:0000000000006289                 db    0
.eh_frame:000000000000628A                 db    0
.eh_frame:000000000000628B                 db    0
.eh_frame:000000000000628C                 db 0C4h
.eh_frame:000000000000628D                 db    0
.eh_frame:000000000000628E                 db    0
.eh_frame:000000000000628F                 db    0
.eh_frame:0000000000006290                 db 0E0h
.eh_frame:0000000000006291                 db 0BDh
.eh_frame:0000000000006292                 db 0FFh
.eh_frame:0000000000006293                 db 0FFh
.eh_frame:0000000000006294                 db  27h ; '
.eh_frame:0000000000006295                 db    3
.eh_frame:0000000000006296                 db    0
.eh_frame:0000000000006297                 db    0
.eh_frame:0000000000006298                 db    0
.eh_frame:0000000000006299                 db  42h ; B
.eh_frame:000000000000629A                 db  0Eh
.eh_frame:000000000000629B                 db  10h
.eh_frame:000000000000629C                 db  8Fh
.eh_frame:000000000000629D                 db    2
.eh_frame:000000000000629E                 db  42h ; B
.eh_frame:000000000000629F                 db  0Eh
.eh_frame:00000000000062A0                 db  18h
.eh_frame:00000000000062A1                 db  8Eh
.eh_frame:00000000000062A2                 db    3
.eh_frame:00000000000062A3                 db  42h ; B
.eh_frame:00000000000062A4                 db  0Eh
.eh_frame:00000000000062A5                 db  20h
.eh_frame:00000000000062A6                 db  8Dh
.eh_frame:00000000000062A7                 db    4
.eh_frame:00000000000062A8                 db  42h ; B
.eh_frame:00000000000062A9                 db  0Eh
.eh_frame:00000000000062AA                 db  28h ; (
.eh_frame:00000000000062AB                 db  8Ch
.eh_frame:00000000000062AC                 db    5
.eh_frame:00000000000062AD                 db  41h ; A
.eh_frame:00000000000062AE                 db  0Eh
.eh_frame:00000000000062AF                 db  30h ; 0
.eh_frame:00000000000062B0                 db  86h
.eh_frame:00000000000062B1                 db    6
.eh_frame:00000000000062B2                 db  41h ; A
.eh_frame:00000000000062B3                 db  0Eh
.eh_frame:00000000000062B4                 db  38h ; 8
.eh_frame:00000000000062B5                 db  83h
.eh_frame:00000000000062B6                 db    7
.eh_frame:00000000000062B7                 db  44h ; D
.eh_frame:00000000000062B8                 db  0Eh
.eh_frame:00000000000062B9                 db  50h ; P
.eh_frame:00000000000062BA                 db    3
.eh_frame:00000000000062BB                 db 0D3h
.eh_frame:00000000000062BC                 db    1
.eh_frame:00000000000062BD                 db  0Ah
.eh_frame:00000000000062BE                 db  0Eh
.eh_frame:00000000000062BF                 db  38h ; 8
.eh_frame:00000000000062C0                 db  41h ; A
.eh_frame:00000000000062C1                 db  0Eh
.eh_frame:00000000000062C2                 db  30h ; 0
.eh_frame:00000000000062C3                 db  41h ; A
.eh_frame:00000000000062C4                 db  0Eh
.eh_frame:00000000000062C5                 db  28h ; (
.eh_frame:00000000000062C6                 db  42h ; B
.eh_frame:00000000000062C7                 db  0Eh
.eh_frame:00000000000062C8                 db  20h
.eh_frame:00000000000062C9                 db  42h ; B
.eh_frame:00000000000062CA                 db  0Eh
.eh_frame:00000000000062CB                 db  18h
.eh_frame:00000000000062CC                 db  42h ; B
.eh_frame:00000000000062CD                 db  0Eh
.eh_frame:00000000000062CE                 db  10h
.eh_frame:00000000000062CF                 db  42h ; B
.eh_frame:00000000000062D0                 db  0Eh
.eh_frame:00000000000062D1                 db    8
.eh_frame:00000000000062D2                 db  45h ; E
.eh_frame:00000000000062D3                 db  0Bh
.eh_frame:00000000000062D4                 db  28h ; (
.eh_frame:00000000000062D5                 db    0
.eh_frame:00000000000062D6                 db    0
.eh_frame:00000000000062D7                 db    0
.eh_frame:00000000000062D8                 db  10h
.eh_frame:00000000000062D9                 db    1
.eh_frame:00000000000062DA                 db    0
.eh_frame:00000000000062DB                 db    0
.eh_frame:00000000000062DC                 db 0C4h
.eh_frame:00000000000062DD                 db 0C0h
.eh_frame:00000000000062DE                 db 0FFh
.eh_frame:00000000000062DF                 db 0FFh
.eh_frame:00000000000062E0                 db 0DAh
.eh_frame:00000000000062E1                 db    3
.eh_frame:00000000000062E2                 db    0
.eh_frame:00000000000062E3                 db    0
.eh_frame:00000000000062E4                 db    0
.eh_frame:00000000000062E5                 db  42h ; B
.eh_frame:00000000000062E6                 db  0Eh
.eh_frame:00000000000062E7                 db  10h
.eh_frame:00000000000062E8                 db  8Dh
.eh_frame:00000000000062E9                 db    2
.eh_frame:00000000000062EA                 db  42h ; B
.eh_frame:00000000000062EB                 db  0Eh
.eh_frame:00000000000062EC                 db  18h
.eh_frame:00000000000062ED                 db  8Ch
.eh_frame:00000000000062EE                 db    3
.eh_frame:00000000000062EF                 db  46h ; F
.eh_frame:00000000000062F0                 db  0Eh
.eh_frame:00000000000062F1                 db  20h
.eh_frame:00000000000062F2                 db  86h
.eh_frame:00000000000062F3                 db    4
.eh_frame:00000000000062F4                 db  41h ; A
.eh_frame:00000000000062F5                 db  0Eh
.eh_frame:00000000000062F6                 db  28h ; (
.eh_frame:00000000000062F7                 db  83h
.eh_frame:00000000000062F8                 db    5
.eh_frame:00000000000062F9                 db  49h ; I
.eh_frame:00000000000062FA                 db  0Eh
.eh_frame:00000000000062FB                 db 0B0h
.eh_frame:00000000000062FC                 db    1
.eh_frame:00000000000062FD                 db    0
.eh_frame:00000000000062FE                 db    0
.eh_frame:00000000000062FF                 db    0
.eh_frame:0000000000006300                 db  44h ; D
.eh_frame:0000000000006301                 db    0
.eh_frame:0000000000006302                 db    0
.eh_frame:0000000000006303                 db    0
.eh_frame:0000000000006304                 db  3Ch ; <
.eh_frame:0000000000006305                 db    1
.eh_frame:0000000000006306                 db    0
.eh_frame:0000000000006307                 db    0
.eh_frame:0000000000006308                 db 0A8h
.eh_frame:0000000000006309                 db 0B3h
.eh_frame:000000000000630A                 db 0FFh
.eh_frame:000000000000630B                 db 0FFh
.eh_frame:000000000000630C                 db 0F1h
.eh_frame:000000000000630D                 db    2
.eh_frame:000000000000630E                 db    0
.eh_frame:000000000000630F                 db    0
.eh_frame:0000000000006310                 db    0
.eh_frame:0000000000006311                 db  42h ; B
.eh_frame:0000000000006312                 db  0Eh
.eh_frame:0000000000006313                 db  10h
.eh_frame:0000000000006314                 db  8Dh
.eh_frame:0000000000006315                 db    2
.eh_frame:0000000000006316                 db  42h ; B
.eh_frame:0000000000006317                 db  0Eh
.eh_frame:0000000000006318                 db  18h
.eh_frame:0000000000006319                 db  8Ch
.eh_frame:000000000000631A                 db    3
.eh_frame:000000000000631B                 db  48h ; H
.eh_frame:000000000000631C                 db  0Eh
.eh_frame:000000000000631D                 db  20h
.eh_frame:000000000000631E                 db  86h
.eh_frame:000000000000631F                 db    4
.eh_frame:0000000000006320                 db  41h ; A
.eh_frame:0000000000006321                 db  0Eh
.eh_frame:0000000000006322                 db  28h ; (
.eh_frame:0000000000006323                 db  83h
.eh_frame:0000000000006324                 db    5
.eh_frame:0000000000006325                 db  50h ; P
.eh_frame:0000000000006326                 db  0Eh
.eh_frame:0000000000006327                 db  30h ; 0
.eh_frame:0000000000006328                 db    2
.eh_frame:0000000000006329                 db 0AAh
.eh_frame:000000000000632A                 db  0Ah
.eh_frame:000000000000632B                 db  0Eh
.eh_frame:000000000000632C                 db  38h ; 8
.eh_frame:000000000000632D                 db  50h ; P
.eh_frame:000000000000632E                 db  0Eh
.eh_frame:000000000000632F                 db  40h ; @
.eh_frame:0000000000006330                 db  71h ; q
.eh_frame:0000000000006331                 db  0Bh
.eh_frame:0000000000006332                 db    3
.eh_frame:0000000000006333                 db  18h
.eh_frame:0000000000006334                 db    1
.eh_frame:0000000000006335                 db  0Ah
.eh_frame:0000000000006336                 db  0Eh
.eh_frame:0000000000006337                 db  28h ; (
.eh_frame:0000000000006338                 db  44h ; D
.eh_frame:0000000000006339                 db  0Eh
.eh_frame:000000000000633A                 db  20h
.eh_frame:000000000000633B                 db  41h ; A
.eh_frame:000000000000633C                 db  0Eh
.eh_frame:000000000000633D                 db  18h
.eh_frame:000000000000633E                 db  42h ; B
.eh_frame:000000000000633F                 db  0Eh
.eh_frame:0000000000006340                 db  10h
.eh_frame:0000000000006341                 db  42h ; B
.eh_frame:0000000000006342                 db  0Eh
.eh_frame:0000000000006343                 db    8
.eh_frame:0000000000006344                 db  41h ; A
.eh_frame:0000000000006345                 db  0Bh
.eh_frame:0000000000006346                 db    0
.eh_frame:0000000000006347                 db    0
.eh_frame:0000000000006348                 db  10h
.eh_frame:0000000000006349                 db    0
.eh_frame:000000000000634A                 db    0
.eh_frame:000000000000634B                 db    0
.eh_frame:000000000000634C                 db  84h
.eh_frame:000000000000634D                 db    1
.eh_frame:000000000000634E                 db    0
.eh_frame:000000000000634F                 db    0
.eh_frame:0000000000006350                 db  30h ; 0
.eh_frame:0000000000006351                 db 0C4h
.eh_frame:0000000000006352                 db 0FFh
.eh_frame:0000000000006353                 db 0FFh
.eh_frame:0000000000006354                 db    8
.eh_frame:0000000000006355                 db    0
.eh_frame:0000000000006356                 db    0
.eh_frame:0000000000006357                 db    0
.eh_frame:0000000000006358                 db    0
.eh_frame:0000000000006359                 db    0
.eh_frame:000000000000635A                 db    0
.eh_frame:000000000000635B                 db    0
.eh_frame:000000000000635C                 db  10h
.eh_frame:000000000000635D                 db    0
.eh_frame:000000000000635E                 db    0
.eh_frame:000000000000635F                 db    0
.eh_frame:0000000000006360                 db  98h
.eh_frame:0000000000006361                 db    1
.eh_frame:0000000000006362                 db    0
.eh_frame:0000000000006363                 db    0
.eh_frame:0000000000006364                 db  2Ch ; ,
.eh_frame:0000000000006365                 db 0C4h
.eh_frame:0000000000006366                 db 0FFh
.eh_frame:0000000000006367                 db 0FFh
.eh_frame:0000000000006368                 db    8
.eh_frame:0000000000006369                 db    0
.eh_frame:000000000000636A                 db    0
.eh_frame:000000000000636B                 db    0
.eh_frame:000000000000636C                 db    0
.eh_frame:000000000000636D                 db    0
.eh_frame:000000000000636E                 db    0
.eh_frame:000000000000636F                 db    0
.eh_frame:0000000000006370                 db  2Ch ; ,
.eh_frame:0000000000006371                 db    0
.eh_frame:0000000000006372                 db    0
.eh_frame:0000000000006373                 db    0
.eh_frame:0000000000006374                 db 0ACh
.eh_frame:0000000000006375                 db    1
.eh_frame:0000000000006376                 db    0
.eh_frame:0000000000006377                 db    0
.eh_frame:0000000000006378                 db  28h ; (
.eh_frame:0000000000006379                 db 0C4h
.eh_frame:000000000000637A                 db 0FFh
.eh_frame:000000000000637B                 db 0FFh
.eh_frame:000000000000637C                 db 0A4h
.eh_frame:000000000000637D                 db    0
.eh_frame:000000000000637E                 db    0
.eh_frame:000000000000637F                 db    0
.eh_frame:0000000000006380                 db    0
.eh_frame:0000000000006381                 db  41h ; A
.eh_frame:0000000000006382                 db  0Eh
.eh_frame:0000000000006383                 db  10h
.eh_frame:0000000000006384                 db  86h
.eh_frame:0000000000006385                 db    2
.eh_frame:0000000000006386                 db  41h ; A
.eh_frame:0000000000006387                 db  0Eh
.eh_frame:0000000000006388                 db  18h
.eh_frame:0000000000006389                 db  83h
.eh_frame:000000000000638A                 db    3
.eh_frame:000000000000638B                 db  44h ; D
.eh_frame:000000000000638C                 db  0Eh
.eh_frame:000000000000638D                 db  20h
.eh_frame:000000000000638E                 db  7Ah ; z
.eh_frame:000000000000638F                 db  0Ah
.eh_frame:0000000000006390                 db  0Eh
.eh_frame:0000000000006391                 db  18h
.eh_frame:0000000000006392                 db  41h ; A
.eh_frame:0000000000006393                 db  0Eh
.eh_frame:0000000000006394                 db  10h
.eh_frame:0000000000006395                 db  41h ; A
.eh_frame:0000000000006396                 db  0Eh
.eh_frame:0000000000006397                 db    8
.eh_frame:0000000000006398                 db  41h ; A
.eh_frame:0000000000006399                 db  0Bh
.eh_frame:000000000000639A                 db    0
.eh_frame:000000000000639B                 db    0
.eh_frame:000000000000639C                 db    0
.eh_frame:000000000000639D                 db    0
.eh_frame:000000000000639E                 db    0
.eh_frame:000000000000639F                 db    0
.eh_frame:00000000000063A0                 db  10h
.eh_frame:00000000000063A1                 db    0
.eh_frame:00000000000063A2                 db    0
.eh_frame:00000000000063A3                 db    0
.eh_frame:00000000000063A4                 db 0DCh
.eh_frame:00000000000063A5                 db    1
.eh_frame:00000000000063A6                 db    0
.eh_frame:00000000000063A7                 db    0
.eh_frame:00000000000063A8                 db 0A8h
.eh_frame:00000000000063A9                 db 0C4h
.eh_frame:00000000000063AA                 db 0FFh
.eh_frame:00000000000063AB                 db 0FFh
.eh_frame:00000000000063AC                 db    5
.eh_frame:00000000000063AD                 db    0
.eh_frame:00000000000063AE                 db    0
.eh_frame:00000000000063AF                 db    0
.eh_frame:00000000000063B0                 db    0
.eh_frame:00000000000063B1                 db    0
.eh_frame:00000000000063B2                 db    0
.eh_frame:00000000000063B3                 db    0
.eh_frame:00000000000063B4                 db  18h
.eh_frame:00000000000063B5                 db    0
.eh_frame:00000000000063B6                 db    0
.eh_frame:00000000000063B7                 db    0
.eh_frame:00000000000063B8                 db 0F0h
.eh_frame:00000000000063B9                 db    1
.eh_frame:00000000000063BA                 db    0
.eh_frame:00000000000063BB                 db    0
.eh_frame:00000000000063BC                 db 0A4h
.eh_frame:00000000000063BD                 db 0C4h
.eh_frame:00000000000063BE                 db 0FFh
.eh_frame:00000000000063BF                 db 0FFh
.eh_frame:00000000000063C0                 db  22h ; "
.eh_frame:00000000000063C1                 db    0
.eh_frame:00000000000063C2                 db    0
.eh_frame:00000000000063C3                 db    0
.eh_frame:00000000000063C4                 db    0
.eh_frame:00000000000063C5                 db  46h ; F
.eh_frame:00000000000063C6                 db  0Eh
.eh_frame:00000000000063C7                 db  10h
.eh_frame:00000000000063C8                 db  83h
.eh_frame:00000000000063C9                 db    2
.eh_frame:00000000000063CA                 db  4Eh ; N
.eh_frame:00000000000063CB                 db 0C3h
.eh_frame:00000000000063CC                 db  0Eh
.eh_frame:00000000000063CD                 db    8
.eh_frame:00000000000063CE                 db    0
.eh_frame:00000000000063CF                 db    0
.eh_frame:00000000000063D0                 db  1Ch
.eh_frame:00000000000063D1                 db    0
.eh_frame:00000000000063D2                 db    0
.eh_frame:00000000000063D3                 db    0
.eh_frame:00000000000063D4                 db  0Ch
.eh_frame:00000000000063D5                 db    2
.eh_frame:00000000000063D6                 db    0
.eh_frame:00000000000063D7                 db    0
.eh_frame:00000000000063D8                 db 0B8h
.eh_frame:00000000000063D9                 db 0C4h
.eh_frame:00000000000063DA                 db 0FFh
.eh_frame:00000000000063DB                 db 0FFh
.eh_frame:00000000000063DC                 db  9Fh
.eh_frame:00000000000063DD                 db    0
.eh_frame:00000000000063DE                 db    0
.eh_frame:00000000000063DF                 db    0
.eh_frame:00000000000063E0                 db    0
.eh_frame:00000000000063E1                 db  44h ; D
.eh_frame:00000000000063E2                 db  0Eh
.eh_frame:00000000000063E3                 db  10h
.eh_frame:00000000000063E4                 db  83h
.eh_frame:00000000000063E5                 db    2
.eh_frame:00000000000063E6                 db    2
.eh_frame:00000000000063E7                 db  78h ; x
.eh_frame:00000000000063E8                 db  0Ah
.eh_frame:00000000000063E9                 db  0Eh
.eh_frame:00000000000063EA                 db    8
.eh_frame:00000000000063EB                 db  41h ; A
.eh_frame:00000000000063EC                 db  0Bh
.eh_frame:00000000000063ED                 db    0
.eh_frame:00000000000063EE                 db    0
.eh_frame:00000000000063EF                 db    0
.eh_frame:00000000000063F0                 db  40h ; @
.eh_frame:00000000000063F1                 db    0
.eh_frame:00000000000063F2                 db    0
.eh_frame:00000000000063F3                 db    0
.eh_frame:00000000000063F4                 db  2Ch ; ,
.eh_frame:00000000000063F5                 db    2
.eh_frame:00000000000063F6                 db    0
.eh_frame:00000000000063F7                 db    0
.eh_frame:00000000000063F8                 db  38h ; 8
.eh_frame:00000000000063F9                 db 0C5h
.eh_frame:00000000000063FA                 db 0FFh
.eh_frame:00000000000063FB                 db 0FFh
.eh_frame:00000000000063FC                 db 0E7h
.eh_frame:00000000000063FD                 db    0
.eh_frame:00000000000063FE                 db    0
.eh_frame:00000000000063FF                 db    0
.eh_frame:0000000000006400                 db    0
.eh_frame:0000000000006401                 db  41h ; A
.eh_frame:0000000000006402                 db  0Eh
.eh_frame:0000000000006403                 db  10h
.eh_frame:0000000000006404                 db  86h
.eh_frame:0000000000006405                 db    2
.eh_frame:0000000000006406                 db  41h ; A
.eh_frame:0000000000006407                 db  0Eh
.eh_frame:0000000000006408                 db  18h
.eh_frame:0000000000006409                 db  83h
.eh_frame:000000000000640A                 db    3
.eh_frame:000000000000640B                 db  49h ; I
.eh_frame:000000000000640C                 db  0Eh
.eh_frame:000000000000640D                 db  20h
.eh_frame:000000000000640E                 db  6Eh ; n
.eh_frame:000000000000640F                 db  0Ah
.eh_frame:0000000000006410                 db  0Eh
.eh_frame:0000000000006411                 db  18h
.eh_frame:0000000000006412                 db  41h ; A
.eh_frame:0000000000006413                 db  0Eh
.eh_frame:0000000000006414                 db  10h
.eh_frame:0000000000006415                 db  41h ; A
.eh_frame:0000000000006416                 db  0Eh
.eh_frame:0000000000006417                 db    8
.eh_frame:0000000000006418                 db  45h ; E
.eh_frame:0000000000006419                 db  0Bh
.eh_frame:000000000000641A                 db    2
.eh_frame:000000000000641B                 db  4Ah ; J
.eh_frame:000000000000641C                 db  0Ah
.eh_frame:000000000000641D                 db  0Eh
.eh_frame:000000000000641E                 db  18h
.eh_frame:000000000000641F                 db  41h ; A
.eh_frame:0000000000006420                 db  0Eh
.eh_frame:0000000000006421                 db  10h
.eh_frame:0000000000006422                 db  41h ; A
.eh_frame:0000000000006423                 db  0Eh
.eh_frame:0000000000006424                 db    8
.eh_frame:0000000000006425                 db  44h ; D
.eh_frame:0000000000006426                 db  0Bh
.eh_frame:0000000000006427                 db    2
.eh_frame:0000000000006428                 db  54h ; T
.eh_frame:0000000000006429                 db  0Eh
.eh_frame:000000000000642A                 db  18h
.eh_frame:000000000000642B                 db  41h ; A
.eh_frame:000000000000642C                 db  0Eh
.eh_frame:000000000000642D                 db  10h
.eh_frame:000000000000642E                 db  41h ; A
.eh_frame:000000000000642F                 db  0Eh
.eh_frame:0000000000006430                 db    8
.eh_frame:0000000000006431                 db    0
.eh_frame:0000000000006432                 db    0
.eh_frame:0000000000006433                 db    0
.eh_frame:0000000000006434                 db  74h ; t
.eh_frame:0000000000006435                 db    0
.eh_frame:0000000000006436                 db    0
.eh_frame:0000000000006437                 db    0
.eh_frame:0000000000006438                 db  70h ; p
.eh_frame:0000000000006439                 db    2
.eh_frame:000000000000643A                 db    0
.eh_frame:000000000000643B                 db    0
.eh_frame:000000000000643C                 db 0E4h
.eh_frame:000000000000643D                 db 0C5h
.eh_frame:000000000000643E                 db 0FFh
.eh_frame:000000000000643F                 db 0FFh
.eh_frame:0000000000006440                 db  34h ; 4
.eh_frame:0000000000006441                 db  12h
.eh_frame:0000000000006442                 db    0
.eh_frame:0000000000006443                 db    0
.eh_frame:0000000000006444                 db    0
.eh_frame:0000000000006445                 db  42h ; B
.eh_frame:0000000000006446                 db  0Eh
.eh_frame:0000000000006447                 db  10h
.eh_frame:0000000000006448                 db  8Fh
.eh_frame:0000000000006449                 db    2
.eh_frame:000000000000644A                 db  42h ; B
.eh_frame:000000000000644B                 db  0Eh
.eh_frame:000000000000644C                 db  18h
.eh_frame:000000000000644D                 db  8Eh
.eh_frame:000000000000644E                 db    3
.eh_frame:000000000000644F                 db  45h ; E
.eh_frame:0000000000006450                 db  0Eh
.eh_frame:0000000000006451                 db  20h
.eh_frame:0000000000006452                 db  8Dh
.eh_frame:0000000000006453                 db    4
.eh_frame:0000000000006454                 db  42h ; B
.eh_frame:0000000000006455                 db  0Eh
.eh_frame:0000000000006456                 db  28h ; (
.eh_frame:0000000000006457                 db  8Ch
.eh_frame:0000000000006458                 db    5
.eh_frame:0000000000006459                 db  44h ; D
.eh_frame:000000000000645A                 db  0Eh
.eh_frame:000000000000645B                 db  30h ; 0
.eh_frame:000000000000645C                 db  86h
.eh_frame:000000000000645D                 db    6
.eh_frame:000000000000645E                 db  41h ; A
.eh_frame:000000000000645F                 db  0Eh
.eh_frame:0000000000006460                 db  38h ; 8
.eh_frame:0000000000006461                 db  83h
.eh_frame:0000000000006462                 db    7
.eh_frame:0000000000006463                 db  53h ; S
.eh_frame:0000000000006464                 db  0Eh
.eh_frame:0000000000006465                 db 0F0h
.eh_frame:0000000000006466                 db    1
.eh_frame:0000000000006467                 db    3
.eh_frame:0000000000006468                 db  81h
.eh_frame:0000000000006469                 db  0Bh
.eh_frame:000000000000646A                 db  0Eh
.eh_frame:000000000000646B                 db 0F8h
.eh_frame:000000000000646C                 db    1
.eh_frame:000000000000646D                 db  4Ah ; J
.eh_frame:000000000000646E                 db  0Eh
.eh_frame:000000000000646F                 db  80h
.eh_frame:0000000000006470                 db    2
.eh_frame:0000000000006471                 db  44h ; D
.eh_frame:0000000000006472                 db  0Eh
.eh_frame:0000000000006473                 db  88h
.eh_frame:0000000000006474                 db    2
.eh_frame:0000000000006475                 db  45h ; E
.eh_frame:0000000000006476                 db  0Eh
.eh_frame:0000000000006477                 db  90h
.eh_frame:0000000000006478                 db    2
.eh_frame:0000000000006479                 db  5Fh ; _
.eh_frame:000000000000647A                 db  0Eh
.eh_frame:000000000000647B                 db 0F0h
.eh_frame:000000000000647C                 db    1
.eh_frame:000000000000647D                 db  64h ; d
.eh_frame:000000000000647E                 db  0Ah
.eh_frame:000000000000647F                 db  0Eh
.eh_frame:0000000000006480                 db  38h ; 8
.eh_frame:0000000000006481                 db  41h ; A
.eh_frame:0000000000006482                 db  0Eh
.eh_frame:0000000000006483                 db  30h ; 0
.eh_frame:0000000000006484                 db  41h ; A
.eh_frame:0000000000006485                 db  0Eh
.eh_frame:0000000000006486                 db  28h ; (
.eh_frame:0000000000006487                 db  42h ; B
.eh_frame:0000000000006488                 db  0Eh
.eh_frame:0000000000006489                 db  20h
.eh_frame:000000000000648A                 db  42h ; B
.eh_frame:000000000000648B                 db  0Eh
.eh_frame:000000000000648C                 db  18h
.eh_frame:000000000000648D                 db  42h ; B
.eh_frame:000000000000648E                 db  0Eh
.eh_frame:000000000000648F                 db  10h
.eh_frame:0000000000006490                 db  42h ; B
.eh_frame:0000000000006491                 db  0Eh
.eh_frame:0000000000006492                 db    8
.eh_frame:0000000000006493                 db  44h ; D
.eh_frame:0000000000006494                 db  0Bh
.eh_frame:0000000000006495                 db    3
.eh_frame:0000000000006496                 db  99h
.eh_frame:0000000000006497                 db    5
.eh_frame:0000000000006498                 db  0Eh
.eh_frame:0000000000006499                 db 0F8h
.eh_frame:000000000000649A                 db    1
.eh_frame:000000000000649B                 db  4Dh ; M
.eh_frame:000000000000649C                 db  0Eh
.eh_frame:000000000000649D                 db  80h
.eh_frame:000000000000649E                 db    2
.eh_frame:000000000000649F                 db  44h ; D
.eh_frame:00000000000064A0                 db  0Eh
.eh_frame:00000000000064A1                 db  88h
.eh_frame:00000000000064A2                 db    2
.eh_frame:00000000000064A3                 db  47h ; G
.eh_frame:00000000000064A4                 db  0Eh
.eh_frame:00000000000064A5                 db  90h
.eh_frame:00000000000064A6                 db    2
.eh_frame:00000000000064A7                 db  5Bh ; [
.eh_frame:00000000000064A8                 db  0Eh
.eh_frame:00000000000064A9                 db 0F0h
.eh_frame:00000000000064AA                 db    1
.eh_frame:00000000000064AB                 db    0
.eh_frame:00000000000064AC                 db  68h ; h
.eh_frame:00000000000064AD                 db    0
.eh_frame:00000000000064AE                 db    0
.eh_frame:00000000000064AF                 db    0
.eh_frame:00000000000064B0                 db 0E8h
.eh_frame:00000000000064B1                 db    2
.eh_frame:00000000000064B2                 db    0
.eh_frame:00000000000064B3                 db    0
.eh_frame:00000000000064B4                 db 0ACh
.eh_frame:00000000000064B5                 db 0D7h
.eh_frame:00000000000064B6                 db 0FFh
.eh_frame:00000000000064B7                 db 0FFh
.eh_frame:00000000000064B8                 db 0ABh
.eh_frame:00000000000064B9                 db    1
.eh_frame:00000000000064BA                 db    0
.eh_frame:00000000000064BB                 db    0
.eh_frame:00000000000064BC                 db    0
.eh_frame:00000000000064BD                 db  42h ; B
.eh_frame:00000000000064BE                 db  0Eh
.eh_frame:00000000000064BF                 db  10h
.eh_frame:00000000000064C0                 db  8Fh
.eh_frame:00000000000064C1                 db    2
.eh_frame:00000000000064C2                 db  42h ; B
.eh_frame:00000000000064C3                 db  0Eh
.eh_frame:00000000000064C4                 db  18h
.eh_frame:00000000000064C5                 db  8Eh
.eh_frame:00000000000064C6                 db    3
.eh_frame:00000000000064C7                 db  45h ; E
.eh_frame:00000000000064C8                 db  0Eh
.eh_frame:00000000000064C9                 db  20h
.eh_frame:00000000000064CA                 db  8Dh
.eh_frame:00000000000064CB                 db    4
.eh_frame:00000000000064CC                 db  42h ; B
.eh_frame:00000000000064CD                 db  0Eh
.eh_frame:00000000000064CE                 db  28h ; (
.eh_frame:00000000000064CF                 db  8Ch
.eh_frame:00000000000064D0                 db    5
.eh_frame:00000000000064D1                 db  44h ; D
.eh_frame:00000000000064D2                 db  0Eh
.eh_frame:00000000000064D3                 db  30h ; 0
.eh_frame:00000000000064D4                 db  86h
.eh_frame:00000000000064D5                 db    6
.eh_frame:00000000000064D6                 db  41h ; A
.eh_frame:00000000000064D7                 db  0Eh
.eh_frame:00000000000064D8                 db  38h ; 8
.eh_frame:00000000000064D9                 db  83h
.eh_frame:00000000000064DA                 db    7
.eh_frame:00000000000064DB                 db  47h ; G
.eh_frame:00000000000064DC                 db  0Eh
.eh_frame:00000000000064DD                 db  60h ; `
.eh_frame:00000000000064DE                 db    2
.eh_frame:00000000000064DF                 db  99h
.eh_frame:00000000000064E0                 db  0Eh
.eh_frame:00000000000064E1                 db  68h ; h
.eh_frame:00000000000064E2                 db  5Fh ; _
.eh_frame:00000000000064E3                 db  0Eh
.eh_frame:00000000000064E4                 db  70h ; p
.eh_frame:00000000000064E5                 db  46h ; F
.eh_frame:00000000000064E6                 db  0Eh
.eh_frame:00000000000064E7                 db  78h ; x
.eh_frame:00000000000064E8                 db  42h ; B
.eh_frame:00000000000064E9                 db  0Eh
.eh_frame:00000000000064EA                 db  80h
.eh_frame:00000000000064EB                 db    1
.eh_frame:00000000000064EC                 db  59h ; Y
.eh_frame:00000000000064ED                 db  0Eh
.eh_frame:00000000000064EE                 db  60h ; `
.eh_frame:00000000000064EF                 db    2
.eh_frame:00000000000064F0                 db  40h ; @
.eh_frame:00000000000064F1                 db  0Eh
.eh_frame:00000000000064F2                 db  68h ; h
.eh_frame:00000000000064F3                 db  4Bh ; K
.eh_frame:00000000000064F4                 db  0Eh
.eh_frame:00000000000064F5                 db  70h ; p
.eh_frame:00000000000064F6                 db  43h ; C
.eh_frame:00000000000064F7                 db  0Eh
.eh_frame:00000000000064F8                 db  78h ; x
.eh_frame:00000000000064F9                 db  45h ; E
.eh_frame:00000000000064FA                 db  0Eh
.eh_frame:00000000000064FB                 db  80h
.eh_frame:00000000000064FC                 db    1
.eh_frame:00000000000064FD                 db  5Eh ; ^
.eh_frame:00000000000064FE                 db  0Eh
.eh_frame:00000000000064FF                 db  60h ; `
.eh_frame:0000000000006500                 db  4Ch ; L
.eh_frame:0000000000006501                 db  0Ah
.eh_frame:0000000000006502                 db  0Eh
.eh_frame:0000000000006503                 db  38h ; 8
.eh_frame:0000000000006504                 db  44h ; D
.eh_frame:0000000000006505                 db  0Eh
.eh_frame:0000000000006506                 db  30h ; 0
.eh_frame:0000000000006507                 db  41h ; A
.eh_frame:0000000000006508                 db  0Eh
.eh_frame:0000000000006509                 db  28h ; (
.eh_frame:000000000000650A                 db  42h ; B
.eh_frame:000000000000650B                 db  0Eh
.eh_frame:000000000000650C                 db  20h
.eh_frame:000000000000650D                 db  42h ; B
.eh_frame:000000000000650E                 db  0Eh
.eh_frame:000000000000650F                 db  18h
.eh_frame:0000000000006510                 db  42h ; B
.eh_frame:0000000000006511                 db  0Eh
.eh_frame:0000000000006512                 db  10h
.eh_frame:0000000000006513                 db  42h ; B
.eh_frame:0000000000006514                 db  0Eh
.eh_frame:0000000000006515                 db    8
.eh_frame:0000000000006516                 db  46h ; F
.eh_frame:0000000000006517                 db  0Bh
.eh_frame:0000000000006518                 db  28h ; (
.eh_frame:0000000000006519                 db    0
.eh_frame:000000000000651A                 db    0
.eh_frame:000000000000651B                 db    0
.eh_frame:000000000000651C                 db  54h ; T
.eh_frame:000000000000651D                 db    3
.eh_frame:000000000000651E                 db    0
.eh_frame:000000000000651F                 db    0
.eh_frame:0000000000006520                 db 0F0h
.eh_frame:0000000000006521                 db 0D8h
.eh_frame:0000000000006522                 db 0FFh
.eh_frame:0000000000006523                 db 0FFh
.eh_frame:0000000000006524                 db  36h ; 6
.eh_frame:0000000000006525                 db    0
.eh_frame:0000000000006526                 db    0
.eh_frame:0000000000006527                 db    0
.eh_frame:0000000000006528                 db    0
.eh_frame:0000000000006529                 db  42h ; B
.eh_frame:000000000000652A                 db  0Eh
.eh_frame:000000000000652B                 db  10h
.eh_frame:000000000000652C                 db  8Ch
.eh_frame:000000000000652D                 db    2
.eh_frame:000000000000652E                 db  41h ; A
.eh_frame:000000000000652F                 db  0Eh
.eh_frame:0000000000006530                 db  18h
.eh_frame:0000000000006531                 db  86h
.eh_frame:0000000000006532                 db    3
.eh_frame:0000000000006533                 db  41h ; A
.eh_frame:0000000000006534                 db  0Eh
.eh_frame:0000000000006535                 db  20h
.eh_frame:0000000000006536                 db  83h
.eh_frame:0000000000006537                 db    4
.eh_frame:0000000000006538                 db  6Eh ; n
.eh_frame:0000000000006539                 db  0Eh
.eh_frame:000000000000653A                 db  18h
.eh_frame:000000000000653B                 db  41h ; A
.eh_frame:000000000000653C                 db  0Eh
.eh_frame:000000000000653D                 db  10h
.eh_frame:000000000000653E                 db  42h ; B
.eh_frame:000000000000653F                 db  0Eh
.eh_frame:0000000000006540                 db    8
.eh_frame:0000000000006541                 db    0
.eh_frame:0000000000006542                 db    0
.eh_frame:0000000000006543                 db    0
.eh_frame:0000000000006544                 db  10h
.eh_frame:0000000000006545                 db    0
.eh_frame:0000000000006546                 db    0
.eh_frame:0000000000006547                 db    0
.eh_frame:0000000000006548                 db  80h
.eh_frame:0000000000006549                 db    3
.eh_frame:000000000000654A                 db    0
.eh_frame:000000000000654B                 db    0
.eh_frame:000000000000654C                 db    4
.eh_frame:000000000000654D                 db 0D9h
.eh_frame:000000000000654E                 db 0FFh
.eh_frame:000000000000654F                 db 0FFh
.eh_frame:0000000000006550                 db  11h
.eh_frame:0000000000006551                 db    0
.eh_frame:0000000000006552                 db    0
.eh_frame:0000000000006553                 db    0
.eh_frame:0000000000006554                 db    0
.eh_frame:0000000000006555                 db    0
.eh_frame:0000000000006556                 db    0
.eh_frame:0000000000006557                 db    0
.eh_frame:0000000000006558                 db  10h
.eh_frame:0000000000006559                 db    0
.eh_frame:000000000000655A                 db    0
.eh_frame:000000000000655B                 db    0
.eh_frame:000000000000655C                 db  94h
.eh_frame:000000000000655D                 db    3
.eh_frame:000000000000655E                 db    0
.eh_frame:000000000000655F                 db    0
.eh_frame:0000000000006560                 db  10h
.eh_frame:0000000000006561                 db 0D9h
.eh_frame:0000000000006562                 db 0FFh
.eh_frame:0000000000006563                 db 0FFh
.eh_frame:0000000000006564                 db  11h
.eh_frame:0000000000006565                 db    0
.eh_frame:0000000000006566                 db    0
.eh_frame:0000000000006567                 db    0
.eh_frame:0000000000006568                 db    0
.eh_frame:0000000000006569                 db    0
.eh_frame:000000000000656A                 db    0
.eh_frame:000000000000656B                 db    0
.eh_frame:000000000000656C                 db  10h
.eh_frame:000000000000656D                 db    0
.eh_frame:000000000000656E                 db    0
.eh_frame:000000000000656F                 db    0
.eh_frame:0000000000006570                 db 0A8h
.eh_frame:0000000000006571                 db    3
.eh_frame:0000000000006572                 db    0
.eh_frame:0000000000006573                 db    0
.eh_frame:0000000000006574                 db  1Ch
.eh_frame:0000000000006575                 db 0D9h
.eh_frame:0000000000006576                 db 0FFh
.eh_frame:0000000000006577                 db 0FFh
.eh_frame:0000000000006578                 db  35h ; 5
.eh_frame:0000000000006579                 db    0
.eh_frame:000000000000657A                 db    0
.eh_frame:000000000000657B                 db    0
.eh_frame:000000000000657C                 db    0
.eh_frame:000000000000657D                 db    0
.eh_frame:000000000000657E                 db    0
.eh_frame:000000000000657F                 db    0
.eh_frame:0000000000006580                 db  10h
.eh_frame:0000000000006581                 db    0
.eh_frame:0000000000006582                 db    0
.eh_frame:0000000000006583                 db    0
.eh_frame:0000000000006584                 db 0BCh
.eh_frame:0000000000006585                 db    3
.eh_frame:0000000000006586                 db    0
.eh_frame:0000000000006587                 db    0
.eh_frame:0000000000006588                 db  48h ; H
.eh_frame:0000000000006589                 db 0D9h
.eh_frame:000000000000658A                 db 0FFh
.eh_frame:000000000000658B                 db 0FFh
.eh_frame:000000000000658C                 db  15h
.eh_frame:000000000000658D                 db    0
.eh_frame:000000000000658E                 db    0
.eh_frame:000000000000658F                 db    0
.eh_frame:0000000000006590                 db    0
.eh_frame:0000000000006591                 db    0
.eh_frame:0000000000006592                 db    0
.eh_frame:0000000000006593                 db    0
.eh_frame:0000000000006594                 db  10h
.eh_frame:0000000000006595                 db    0
.eh_frame:0000000000006596                 db    0
.eh_frame:0000000000006597                 db    0
.eh_frame:0000000000006598                 db 0D0h
.eh_frame:0000000000006599                 db    3
.eh_frame:000000000000659A                 db    0
.eh_frame:000000000000659B                 db    0
.eh_frame:000000000000659C                 db  54h ; T
.eh_frame:000000000000659D                 db 0D9h
.eh_frame:000000000000659E                 db 0FFh
.eh_frame:000000000000659F                 db 0FFh
.eh_frame:00000000000065A0                 db  30h ; 0
.eh_frame:00000000000065A1                 db    0
.eh_frame:00000000000065A2                 db    0
.eh_frame:00000000000065A3                 db    0
.eh_frame:00000000000065A4                 db    0
.eh_frame:00000000000065A5                 db  6Bh ; k
.eh_frame:00000000000065A6                 db  0Eh
.eh_frame:00000000000065A7                 db  10h
.eh_frame:00000000000065A8                 db  50h ; P
.eh_frame:00000000000065A9                 db    0
.eh_frame:00000000000065AA                 db    0
.eh_frame:00000000000065AB                 db    0
.eh_frame:00000000000065AC                 db 0E4h
.eh_frame:00000000000065AD                 db    3
.eh_frame:00000000000065AE                 db    0
.eh_frame:00000000000065AF                 db    0
.eh_frame:00000000000065B0                 db  70h ; p
.eh_frame:00000000000065B1                 db 0D9h
.eh_frame:00000000000065B2                 db 0FFh
.eh_frame:00000000000065B3                 db 0FFh
.eh_frame:00000000000065B4                 db  74h ; t
.eh_frame:00000000000065B5                 db    0
.eh_frame:00000000000065B6                 db    0
.eh_frame:00000000000065B7                 db    0
.eh_frame:00000000000065B8                 db    0
.eh_frame:00000000000065B9                 db  42h ; B
.eh_frame:00000000000065BA                 db  0Eh
.eh_frame:00000000000065BB                 db  10h
.eh_frame:00000000000065BC                 db  8Fh
.eh_frame:00000000000065BD                 db    2
.eh_frame:00000000000065BE                 db  42h ; B
.eh_frame:00000000000065BF                 db  0Eh
.eh_frame:00000000000065C0                 db  18h
.eh_frame:00000000000065C1                 db  8Eh
.eh_frame:00000000000065C2                 db    3
.eh_frame:00000000000065C3                 db  49h ; I
.eh_frame:00000000000065C4                 db  0Eh
.eh_frame:00000000000065C5                 db  20h
.eh_frame:00000000000065C6                 db  8Dh
.eh_frame:00000000000065C7                 db    4
.eh_frame:00000000000065C8                 db  42h ; B
.eh_frame:00000000000065C9                 db  0Eh
.eh_frame:00000000000065CA                 db  28h ; (
.eh_frame:00000000000065CB                 db  8Ch
.eh_frame:00000000000065CC                 db    5
.eh_frame:00000000000065CD                 db  44h ; D
.eh_frame:00000000000065CE                 db  0Eh
.eh_frame:00000000000065CF                 db  30h ; 0
.eh_frame:00000000000065D0                 db  86h
.eh_frame:00000000000065D1                 db    6
.eh_frame:00000000000065D2                 db  41h ; A
.eh_frame:00000000000065D3                 db  0Eh
.eh_frame:00000000000065D4                 db  38h ; 8
.eh_frame:00000000000065D5                 db  83h
.eh_frame:00000000000065D6                 db    7
.eh_frame:00000000000065D7                 db  4Dh ; M
.eh_frame:00000000000065D8                 db  0Eh
.eh_frame:00000000000065D9                 db  50h ; P
.eh_frame:00000000000065DA                 db  5Fh ; _
.eh_frame:00000000000065DB                 db  0Eh
.eh_frame:00000000000065DC                 db  58h ; X
.eh_frame:00000000000065DD                 db  47h ; G
.eh_frame:00000000000065DE                 db  0Eh
.eh_frame:00000000000065DF                 db  60h ; `
.eh_frame:00000000000065E0                 db  46h ; F
.eh_frame:00000000000065E1                 db  0Eh
.eh_frame:00000000000065E2                 db  68h ; h
.eh_frame:00000000000065E3                 db  44h ; D
.eh_frame:00000000000065E4                 db  0Eh
.eh_frame:00000000000065E5                 db  70h ; p
.eh_frame:00000000000065E6                 db  58h ; X
.eh_frame:00000000000065E7                 db  0Eh
.eh_frame:00000000000065E8                 db  38h ; 8
.eh_frame:00000000000065E9                 db  41h ; A
.eh_frame:00000000000065EA                 db  0Eh
.eh_frame:00000000000065EB                 db  30h ; 0
.eh_frame:00000000000065EC                 db  41h ; A
.eh_frame:00000000000065ED                 db  0Eh
.eh_frame:00000000000065EE                 db  28h ; (
.eh_frame:00000000000065EF                 db  42h ; B
.eh_frame:00000000000065F0                 db  0Eh
.eh_frame:00000000000065F1                 db  20h
.eh_frame:00000000000065F2                 db  42h ; B
.eh_frame:00000000000065F3                 db  0Eh
.eh_frame:00000000000065F4                 db  18h
.eh_frame:00000000000065F5                 db  42h ; B
.eh_frame:00000000000065F6                 db  0Eh
.eh_frame:00000000000065F7                 db  10h
.eh_frame:00000000000065F8                 db  42h ; B
.eh_frame:00000000000065F9                 db  0Eh
.eh_frame:00000000000065FA                 db    8
.eh_frame:00000000000065FB                 db    0
.eh_frame:00000000000065FC                 db  68h ; h
.eh_frame:00000000000065FD                 db    0
.eh_frame:00000000000065FE                 db    0
.eh_frame:00000000000065FF                 db    0
.eh_frame:0000000000006600                 db  38h ; 8
.eh_frame:0000000000006601                 db    4
.eh_frame:0000000000006602                 db    0
.eh_frame:0000000000006603                 db    0
.eh_frame:0000000000006604                 db  9Ch
.eh_frame:0000000000006605                 db 0D9h
.eh_frame:0000000000006606                 db 0FFh
.eh_frame:0000000000006607                 db 0FFh
.eh_frame:0000000000006608                 db 0E3h
.eh_frame:0000000000006609                 db    0
.eh_frame:000000000000660A                 db    0
.eh_frame:000000000000660B                 db    0
.eh_frame:000000000000660C                 db    0
.eh_frame:000000000000660D                 db  42h ; B
.eh_frame:000000000000660E                 db  0Eh
.eh_frame:000000000000660F                 db  10h
.eh_frame:0000000000006610                 db  8Fh
.eh_frame:0000000000006611                 db    2
.eh_frame:0000000000006612                 db  42h ; B
.eh_frame:0000000000006613                 db  0Eh
.eh_frame:0000000000006614                 db  18h
.eh_frame:0000000000006615                 db  8Eh
.eh_frame:0000000000006616                 db    3
.eh_frame:0000000000006617                 db  49h ; I
.eh_frame:0000000000006618                 db  0Eh
.eh_frame:0000000000006619                 db  20h
.eh_frame:000000000000661A                 db  8Dh
.eh_frame:000000000000661B                 db    4
.eh_frame:000000000000661C                 db  42h ; B
.eh_frame:000000000000661D                 db  0Eh
.eh_frame:000000000000661E                 db  28h ; (
.eh_frame:000000000000661F                 db  8Ch
.eh_frame:0000000000006620                 db    5
.eh_frame:0000000000006621                 db  44h ; D
.eh_frame:0000000000006622                 db  0Eh
.eh_frame:0000000000006623                 db  30h ; 0
.eh_frame:0000000000006624                 db  86h
.eh_frame:0000000000006625                 db    6
.eh_frame:0000000000006626                 db  41h ; A
.eh_frame:0000000000006627                 db  0Eh
.eh_frame:0000000000006628                 db  38h ; 8
.eh_frame:0000000000006629                 db  83h
.eh_frame:000000000000662A                 db    7
.eh_frame:000000000000662B                 db  4Dh ; M
.eh_frame:000000000000662C                 db  0Eh
.eh_frame:000000000000662D                 db  70h ; p
.eh_frame:000000000000662E                 db  65h ; e
.eh_frame:000000000000662F                 db  0Eh
.eh_frame:0000000000006630                 db  78h ; x
.eh_frame:0000000000006631                 db  4Dh ; M
.eh_frame:0000000000006632                 db  0Eh
.eh_frame:0000000000006633                 db  80h
.eh_frame:0000000000006634                 db    1
.eh_frame:0000000000006635                 db  46h ; F
.eh_frame:0000000000006636                 db  0Eh
.eh_frame:0000000000006637                 db  88h
.eh_frame:0000000000006638                 db    1
.eh_frame:0000000000006639                 db  42h ; B
.eh_frame:000000000000663A                 db  0Eh
.eh_frame:000000000000663B                 db  90h
.eh_frame:000000000000663C                 db    1
.eh_frame:000000000000663D                 db  5Eh ; ^
.eh_frame:000000000000663E                 db  0Eh
.eh_frame:000000000000663F                 db  70h ; p
.eh_frame:0000000000006640                 db  56h ; V
.eh_frame:0000000000006641                 db  0Eh
.eh_frame:0000000000006642                 db  78h ; x
.eh_frame:0000000000006643                 db  43h ; C
.eh_frame:0000000000006644                 db  0Eh
.eh_frame:0000000000006645                 db  80h
.eh_frame:0000000000006646                 db    1
.eh_frame:0000000000006647                 db  43h ; C
.eh_frame:0000000000006648                 db  0Eh
.eh_frame:0000000000006649                 db  88h
.eh_frame:000000000000664A                 db    1
.eh_frame:000000000000664B                 db  56h ; V
.eh_frame:000000000000664C                 db  0Eh
.eh_frame:000000000000664D                 db  90h
.eh_frame:000000000000664E                 db    1
.eh_frame:000000000000664F                 db  52h ; R
.eh_frame:0000000000006650                 db  0Eh
.eh_frame:0000000000006651                 db  70h ; p
.eh_frame:0000000000006652                 db  5Bh ; [
.eh_frame:0000000000006653                 db  0Eh
.eh_frame:0000000000006654                 db  38h ; 8
.eh_frame:0000000000006655                 db  41h ; A
.eh_frame:0000000000006656                 db  0Eh
.eh_frame:0000000000006657                 db  30h ; 0
.eh_frame:0000000000006658                 db  41h ; A
.eh_frame:0000000000006659                 db  0Eh
.eh_frame:000000000000665A                 db  28h ; (
.eh_frame:000000000000665B                 db  42h ; B
.eh_frame:000000000000665C                 db  0Eh
.eh_frame:000000000000665D                 db  20h
.eh_frame:000000000000665E                 db  42h ; B
.eh_frame:000000000000665F                 db  0Eh
.eh_frame:0000000000006660                 db  18h
.eh_frame:0000000000006661                 db  42h ; B
.eh_frame:0000000000006662                 db  0Eh
.eh_frame:0000000000006663                 db  10h
.eh_frame:0000000000006664                 db  42h ; B
.eh_frame:0000000000006665                 db  0Eh
.eh_frame:0000000000006666                 db    8
.eh_frame:0000000000006667                 db    0
.eh_frame:0000000000006668                 db  10h
.eh_frame:0000000000006669                 db    0
.eh_frame:000000000000666A                 db    0
.eh_frame:000000000000666B                 db    0
.eh_frame:000000000000666C                 db 0A4h
.eh_frame:000000000000666D                 db    4
.eh_frame:000000000000666E                 db    0
.eh_frame:000000000000666F                 db    0
.eh_frame:0000000000006670                 db  20h
.eh_frame:0000000000006671                 db 0DAh
.eh_frame:0000000000006672                 db 0FFh
.eh_frame:0000000000006673                 db 0FFh
.eh_frame:0000000000006674                 db  0Ah
.eh_frame:0000000000006675                 db    0
.eh_frame:0000000000006676                 db    0
.eh_frame:0000000000006677                 db    0
.eh_frame:0000000000006678                 db    0
.eh_frame:0000000000006679                 db    0
.eh_frame:000000000000667A                 db    0
.eh_frame:000000000000667B                 db    0
.eh_frame:000000000000667C                 db  28h ; (
.eh_frame:000000000000667D                 db    0
.eh_frame:000000000000667E                 db    0
.eh_frame:000000000000667F                 db    0
.eh_frame:0000000000006680                 db 0B8h
.eh_frame:0000000000006681                 db    4
.eh_frame:0000000000006682                 db    0
.eh_frame:0000000000006683                 db    0
.eh_frame:0000000000006684                 db  1Ch
.eh_frame:0000000000006685                 db 0DAh
.eh_frame:0000000000006686                 db 0FFh
.eh_frame:0000000000006687                 db 0FFh
.eh_frame:0000000000006688                 db  93h
.eh_frame:0000000000006689                 db    0
.eh_frame:000000000000668A                 db    0
.eh_frame:000000000000668B                 db    0
.eh_frame:000000000000668C                 db    0
.eh_frame:000000000000668D                 db  48h ; H
.eh_frame:000000000000668E                 db  0Eh
.eh_frame:000000000000668F                 db  10h
.eh_frame:0000000000006690                 db  8Ch
.eh_frame:0000000000006691                 db    2
.eh_frame:0000000000006692                 db  48h ; H
.eh_frame:0000000000006693                 db  0Eh
.eh_frame:0000000000006694                 db  18h
.eh_frame:0000000000006695                 db  86h
.eh_frame:0000000000006696                 db    3
.eh_frame:0000000000006697                 db  41h ; A
.eh_frame:0000000000006698                 db  0Eh
.eh_frame:0000000000006699                 db  20h
.eh_frame:000000000000669A                 db  83h
.eh_frame:000000000000669B                 db    4
.eh_frame:000000000000669C                 db    2
.eh_frame:000000000000669D                 db  74h ; t
.eh_frame:000000000000669E                 db  0Eh
.eh_frame:000000000000669F                 db  18h
.eh_frame:00000000000066A0                 db  4Bh ; K
.eh_frame:00000000000066A1                 db  0Eh
.eh_frame:00000000000066A2                 db  10h
.eh_frame:00000000000066A3                 db  42h ; B
.eh_frame:00000000000066A4                 db  0Eh
.eh_frame:00000000000066A5                 db    8
.eh_frame:00000000000066A6                 db    0
.eh_frame:00000000000066A7                 db    0
.eh_frame:00000000000066A8                 db  10h
.eh_frame:00000000000066A9                 db    0
.eh_frame:00000000000066AA                 db    0
.eh_frame:00000000000066AB                 db    0
.eh_frame:00000000000066AC                 db 0E4h
.eh_frame:00000000000066AD                 db    4
.eh_frame:00000000000066AE                 db    0
.eh_frame:00000000000066AF                 db    0
.eh_frame:00000000000066B0                 db  90h
.eh_frame:00000000000066B1                 db 0DAh
.eh_frame:00000000000066B2                 db 0FFh
.eh_frame:00000000000066B3                 db 0FFh
.eh_frame:00000000000066B4                 db  13h
.eh_frame:00000000000066B5                 db    0
.eh_frame:00000000000066B6                 db    0
.eh_frame:00000000000066B7                 db    0
.eh_frame:00000000000066B8                 db    0
.eh_frame:00000000000066B9                 db    0
.eh_frame:00000000000066BA                 db    0
.eh_frame:00000000000066BB                 db    0
.eh_frame:00000000000066BC                 db  10h
.eh_frame:00000000000066BD                 db    0
.eh_frame:00000000000066BE                 db    0
.eh_frame:00000000000066BF                 db    0
.eh_frame:00000000000066C0                 db 0F8h
.eh_frame:00000000000066C1                 db    4
.eh_frame:00000000000066C2                 db    0
.eh_frame:00000000000066C3                 db    0
.eh_frame:00000000000066C4                 db  9Ch
.eh_frame:00000000000066C5                 db 0DAh
.eh_frame:00000000000066C6                 db 0FFh
.eh_frame:00000000000066C7                 db 0FFh
.eh_frame:00000000000066C8                 db  0Ch
.eh_frame:00000000000066C9                 db    0
.eh_frame:00000000000066CA                 db    0
.eh_frame:00000000000066CB                 db    0
.eh_frame:00000000000066CC                 db    0
.eh_frame:00000000000066CD                 db    0
.eh_frame:00000000000066CE                 db    0
.eh_frame:00000000000066CF                 db    0
.eh_frame:00000000000066D0                 db  10h
.eh_frame:00000000000066D1                 db    0
.eh_frame:00000000000066D2                 db    0
.eh_frame:00000000000066D3                 db    0
.eh_frame:00000000000066D4                 db  0Ch
.eh_frame:00000000000066D5                 db    5
.eh_frame:00000000000066D6                 db    0
.eh_frame:00000000000066D7                 db    0
.eh_frame:00000000000066D8                 db  98h
.eh_frame:00000000000066D9                 db 0DAh
.eh_frame:00000000000066DA                 db 0FFh
.eh_frame:00000000000066DB                 db 0FFh
.eh_frame:00000000000066DC                 db  18h
.eh_frame:00000000000066DD                 db    0
.eh_frame:00000000000066DE                 db    0
.eh_frame:00000000000066DF                 db    0
.eh_frame:00000000000066E0                 db    0
.eh_frame:00000000000066E1                 db    0
.eh_frame:00000000000066E2                 db    0
.eh_frame:00000000000066E3                 db    0
.eh_frame:00000000000066E4                 db  10h
.eh_frame:00000000000066E5                 db    0
.eh_frame:00000000000066E6                 db    0
.eh_frame:00000000000066E7                 db    0
.eh_frame:00000000000066E8                 db  20h
.eh_frame:00000000000066E9                 db    5
.eh_frame:00000000000066EA                 db    0
.eh_frame:00000000000066EB                 db    0
.eh_frame:00000000000066EC                 db 0A4h
.eh_frame:00000000000066ED                 db 0DAh
.eh_frame:00000000000066EE                 db 0FFh
.eh_frame:00000000000066EF                 db 0FFh
.eh_frame:00000000000066F0                 db  14h
.eh_frame:00000000000066F1                 db    0
.eh_frame:00000000000066F2                 db    0
.eh_frame:00000000000066F3                 db    0
.eh_frame:00000000000066F4                 db    0
.eh_frame:00000000000066F5                 db    0
.eh_frame:00000000000066F6                 db    0
.eh_frame:00000000000066F7                 db    0
.eh_frame:00000000000066F8                 db  18h
.eh_frame:00000000000066F9                 db    0
.eh_frame:00000000000066FA                 db    0
.eh_frame:00000000000066FB                 db    0
.eh_frame:00000000000066FC                 db  34h ; 4
.eh_frame:00000000000066FD                 db    5
.eh_frame:00000000000066FE                 db    0
.eh_frame:00000000000066FF                 db    0
.eh_frame:0000000000006700                 db 0B0h
.eh_frame:0000000000006701                 db 0DAh
.eh_frame:0000000000006702                 db 0FFh
.eh_frame:0000000000006703                 db 0FFh
.eh_frame:0000000000006704                 db  8Eh
.eh_frame:0000000000006705                 db    0
.eh_frame:0000000000006706                 db    0
.eh_frame:0000000000006707                 db    0
.eh_frame:0000000000006708                 db    0
.eh_frame:0000000000006709                 db  44h ; D
.eh_frame:000000000000670A                 db  0Eh
.eh_frame:000000000000670B                 db  50h ; P
.eh_frame:000000000000670C                 db    2
.eh_frame:000000000000670D                 db  7Fh ; 
.eh_frame:000000000000670E                 db  0Ah
.eh_frame:000000000000670F                 db  0Eh
.eh_frame:0000000000006710                 db    8
.eh_frame:0000000000006711                 db  41h ; A
.eh_frame:0000000000006712                 db  0Bh
.eh_frame:0000000000006713                 db    0
.eh_frame:0000000000006714                 db  18h
.eh_frame:0000000000006715                 db    0
.eh_frame:0000000000006716                 db    0
.eh_frame:0000000000006717                 db    0
.eh_frame:0000000000006718                 db  50h ; P
.eh_frame:0000000000006719                 db    5
.eh_frame:000000000000671A                 db    0
.eh_frame:000000000000671B                 db    0
.eh_frame:000000000000671C                 db  24h ; $
.eh_frame:000000000000671D                 db 0DBh
.eh_frame:000000000000671E                 db 0FFh
.eh_frame:000000000000671F                 db 0FFh
.eh_frame:0000000000006720                 db  8Ah
.eh_frame:0000000000006721                 db    0
.eh_frame:0000000000006722                 db    0
.eh_frame:0000000000006723                 db    0
.eh_frame:0000000000006724                 db    0
.eh_frame:0000000000006725                 db  44h ; D
.eh_frame:0000000000006726                 db  0Eh
.eh_frame:0000000000006727                 db  50h ; P
.eh_frame:0000000000006728                 db    2
.eh_frame:0000000000006729                 db  7Bh ; {
.eh_frame:000000000000672A                 db  0Ah
.eh_frame:000000000000672B                 db  0Eh
.eh_frame:000000000000672C                 db    8
.eh_frame:000000000000672D                 db  41h ; A
.eh_frame:000000000000672E                 db  0Bh
.eh_frame:000000000000672F                 db    0
.eh_frame:0000000000006730                 db  10h
.eh_frame:0000000000006731                 db    0
.eh_frame:0000000000006732                 db    0
.eh_frame:0000000000006733                 db    0
.eh_frame:0000000000006734                 db  6Ch ; l
.eh_frame:0000000000006735                 db    5
.eh_frame:0000000000006736                 db    0
.eh_frame:0000000000006737                 db    0
.eh_frame:0000000000006738                 db  98h
.eh_frame:0000000000006739                 db 0DBh
.eh_frame:000000000000673A                 db 0FFh
.eh_frame:000000000000673B                 db 0FFh
.eh_frame:000000000000673C                 db  0Ch
.eh_frame:000000000000673D                 db    0
.eh_frame:000000000000673E                 db    0
.eh_frame:000000000000673F                 db    0
.eh_frame:0000000000006740                 db    0
.eh_frame:0000000000006741                 db    0
.eh_frame:0000000000006742                 db    0
.eh_frame:0000000000006743                 db    0
.eh_frame:0000000000006744                 db  10h
.eh_frame:0000000000006745                 db    0
.eh_frame:0000000000006746                 db    0
.eh_frame:0000000000006747                 db    0
.eh_frame:0000000000006748                 db  80h
.eh_frame:0000000000006749                 db    5
.eh_frame:000000000000674A                 db    0
.eh_frame:000000000000674B                 db    0
.eh_frame:000000000000674C                 db  94h
.eh_frame:000000000000674D                 db 0DBh
.eh_frame:000000000000674E                 db 0FFh
.eh_frame:000000000000674F                 db 0FFh
.eh_frame:0000000000006750                 db  0Fh
.eh_frame:0000000000006751                 db    0
.eh_frame:0000000000006752                 db    0
.eh_frame:0000000000006753                 db    0
.eh_frame:0000000000006754                 db    0
.eh_frame:0000000000006755                 db    0
.eh_frame:0000000000006756                 db    0
.eh_frame:0000000000006757                 db    0
.eh_frame:0000000000006758                 db  18h
.eh_frame:0000000000006759                 db    0
.eh_frame:000000000000675A                 db    0
.eh_frame:000000000000675B                 db    0
.eh_frame:000000000000675C                 db  94h
.eh_frame:000000000000675D                 db    5
.eh_frame:000000000000675E                 db    0
.eh_frame:000000000000675F                 db    0
.eh_frame:0000000000006760                 db  90h
.eh_frame:0000000000006761                 db 0DBh
.eh_frame:0000000000006762                 db 0FFh
.eh_frame:0000000000006763                 db 0FFh
.eh_frame:0000000000006764                 db  98h
.eh_frame:0000000000006765                 db    0
.eh_frame:0000000000006766                 db    0
.eh_frame:0000000000006767                 db    0
.eh_frame:0000000000006768                 db    0
.eh_frame:0000000000006769                 db  44h ; D
.eh_frame:000000000000676A                 db  0Eh
.eh_frame:000000000000676B                 db  50h ; P
.eh_frame:000000000000676C                 db    2
.eh_frame:000000000000676D                 db  8Eh
.eh_frame:000000000000676E                 db  0Ah
.eh_frame:000000000000676F                 db  0Eh
.eh_frame:0000000000006770                 db    8
.eh_frame:0000000000006771                 db  41h ; A
.eh_frame:0000000000006772                 db  0Bh
.eh_frame:0000000000006773                 db    0
.eh_frame:0000000000006774                 db  10h
.eh_frame:0000000000006775                 db    0
.eh_frame:0000000000006776                 db    0
.eh_frame:0000000000006777                 db    0
.eh_frame:0000000000006778                 db 0B0h
.eh_frame:0000000000006779                 db    5
.eh_frame:000000000000677A                 db    0
.eh_frame:000000000000677B                 db    0
.eh_frame:000000000000677C                 db  14h
.eh_frame:000000000000677D                 db 0DCh
.eh_frame:000000000000677E                 db 0FFh
.eh_frame:000000000000677F                 db 0FFh
.eh_frame:0000000000006780                 db  10h
.eh_frame:0000000000006781                 db    0
.eh_frame:0000000000006782                 db    0
.eh_frame:0000000000006783                 db    0
.eh_frame:0000000000006784                 db    0
.eh_frame:0000000000006785                 db    0
.eh_frame:0000000000006786                 db    0
.eh_frame:0000000000006787                 db    0
.eh_frame:0000000000006788                 db  10h
.eh_frame:0000000000006789                 db    0
.eh_frame:000000000000678A                 db    0
.eh_frame:000000000000678B                 db    0
.eh_frame:000000000000678C                 db 0C4h
.eh_frame:000000000000678D                 db    5
.eh_frame:000000000000678E                 db    0
.eh_frame:000000000000678F                 db    0
.eh_frame:0000000000006790                 db  10h
.eh_frame:0000000000006791                 db 0DCh
.eh_frame:0000000000006792                 db 0FFh
.eh_frame:0000000000006793                 db 0FFh
.eh_frame:0000000000006794                 db  11h
.eh_frame:0000000000006795                 db    0
.eh_frame:0000000000006796                 db    0
.eh_frame:0000000000006797                 db    0
.eh_frame:0000000000006798                 db    0
.eh_frame:0000000000006799                 db    0
.eh_frame:000000000000679A                 db    0
.eh_frame:000000000000679B                 db    0
.eh_frame:000000000000679C                 db  10h
.eh_frame:000000000000679D                 db    0
.eh_frame:000000000000679E                 db    0
.eh_frame:000000000000679F                 db    0
.eh_frame:00000000000067A0                 db 0D8h
.eh_frame:00000000000067A1                 db    5
.eh_frame:00000000000067A2                 db    0
.eh_frame:00000000000067A3                 db    0
.eh_frame:00000000000067A4                 db  1Ch
.eh_frame:00000000000067A5                 db 0DCh
.eh_frame:00000000000067A6                 db 0FFh
.eh_frame:00000000000067A7                 db 0FFh
.eh_frame:00000000000067A8                 db  0Ah
.eh_frame:00000000000067A9                 db    0
.eh_frame:00000000000067AA                 db    0
.eh_frame:00000000000067AB                 db    0
.eh_frame:00000000000067AC                 db    0
.eh_frame:00000000000067AD                 db    0
.eh_frame:00000000000067AE                 db    0
.eh_frame:00000000000067AF                 db    0
.eh_frame:00000000000067B0                 db  18h
.eh_frame:00000000000067B1                 db    0
.eh_frame:00000000000067B2                 db    0
.eh_frame:00000000000067B3                 db    0
.eh_frame:00000000000067B4                 db 0ECh
.eh_frame:00000000000067B5                 db    5
.eh_frame:00000000000067B6                 db    0
.eh_frame:00000000000067B7                 db    0
.eh_frame:00000000000067B8                 db  18h
.eh_frame:00000000000067B9                 db 0DCh
.eh_frame:00000000000067BA                 db 0FFh
.eh_frame:00000000000067BB                 db 0FFh
.eh_frame:00000000000067BC                 db  8Eh
.eh_frame:00000000000067BD                 db    0
.eh_frame:00000000000067BE                 db    0
.eh_frame:00000000000067BF                 db    0
.eh_frame:00000000000067C0                 db    0
.eh_frame:00000000000067C1                 db  44h ; D
.eh_frame:00000000000067C2                 db  0Eh
.eh_frame:00000000000067C3                 db  50h ; P
.eh_frame:00000000000067C4                 db    2
.eh_frame:00000000000067C5                 db  7Fh ; 
.eh_frame:00000000000067C6                 db  0Ah
.eh_frame:00000000000067C7                 db  0Eh
.eh_frame:00000000000067C8                 db    8
.eh_frame:00000000000067C9                 db  41h ; A
.eh_frame:00000000000067CA                 db  0Bh
.eh_frame:00000000000067CB                 db    0
.eh_frame:00000000000067CC                 db  18h
.eh_frame:00000000000067CD                 db    0
.eh_frame:00000000000067CE                 db    0
.eh_frame:00000000000067CF                 db    0
.eh_frame:00000000000067D0                 db    8
.eh_frame:00000000000067D1                 db    6
.eh_frame:00000000000067D2                 db    0
.eh_frame:00000000000067D3                 db    0
.eh_frame:00000000000067D4                 db  8Ch
.eh_frame:00000000000067D5                 db 0DCh
.eh_frame:00000000000067D6                 db 0FFh
.eh_frame:00000000000067D7                 db 0FFh
.eh_frame:00000000000067D8                 db  91h
.eh_frame:00000000000067D9                 db    0
.eh_frame:00000000000067DA                 db    0
.eh_frame:00000000000067DB                 db    0
.eh_frame:00000000000067DC                 db    0
.eh_frame:00000000000067DD                 db  44h ; D
.eh_frame:00000000000067DE                 db  0Eh
.eh_frame:00000000000067DF                 db  50h ; P
.eh_frame:00000000000067E0                 db    2
.eh_frame:00000000000067E1                 db  82h
.eh_frame:00000000000067E2                 db  0Ah
.eh_frame:00000000000067E3                 db  0Eh
.eh_frame:00000000000067E4                 db    8
.eh_frame:00000000000067E5                 db  41h ; A
.eh_frame:00000000000067E6                 db  0Bh
.eh_frame:00000000000067E7                 db    0
.eh_frame:00000000000067E8                 db  10h
.eh_frame:00000000000067E9                 db    0
.eh_frame:00000000000067EA                 db    0
.eh_frame:00000000000067EB                 db    0
.eh_frame:00000000000067EC                 db  24h ; $
.eh_frame:00000000000067ED                 db    6
.eh_frame:00000000000067EE                 db    0
.eh_frame:00000000000067EF                 db    0
.eh_frame:00000000000067F0                 db  10h
.eh_frame:00000000000067F1                 db 0DDh
.eh_frame:00000000000067F2                 db 0FFh
.eh_frame:00000000000067F3                 db 0FFh
.eh_frame:00000000000067F4                 db  0Ch
.eh_frame:00000000000067F5                 db    0
.eh_frame:00000000000067F6                 db    0
.eh_frame:00000000000067F7                 db    0
.eh_frame:00000000000067F8                 db    0
.eh_frame:00000000000067F9                 db    0
.eh_frame:00000000000067FA                 db    0
.eh_frame:00000000000067FB                 db    0
.eh_frame:00000000000067FC                 db  10h
.eh_frame:00000000000067FD                 db    0
.eh_frame:00000000000067FE                 db    0
.eh_frame:00000000000067FF                 db    0
.eh_frame:0000000000006800                 db  38h ; 8
.eh_frame:0000000000006801                 db    6
.eh_frame:0000000000006802                 db    0
.eh_frame:0000000000006803                 db    0
.eh_frame:0000000000006804                 db  0Ch
.eh_frame:0000000000006805                 db 0DDh
.eh_frame:0000000000006806                 db 0FFh
.eh_frame:0000000000006807                 db 0FFh
.eh_frame:0000000000006808                 db  17h
.eh_frame:0000000000006809                 db    0
.eh_frame:000000000000680A                 db    0
.eh_frame:000000000000680B                 db    0
.eh_frame:000000000000680C                 db    0
.eh_frame:000000000000680D                 db    0
.eh_frame:000000000000680E                 db    0
.eh_frame:000000000000680F                 db    0
.eh_frame:0000000000006810                 db  10h
.eh_frame:0000000000006811                 db    0
.eh_frame:0000000000006812                 db    0
.eh_frame:0000000000006813                 db    0
.eh_frame:0000000000006814                 db  4Ch ; L
.eh_frame:0000000000006815                 db    6
.eh_frame:0000000000006816                 db    0
.eh_frame:0000000000006817                 db    0
.eh_frame:0000000000006818                 db  18h
.eh_frame:0000000000006819                 db 0DDh
.eh_frame:000000000000681A                 db 0FFh
.eh_frame:000000000000681B                 db 0FFh
.eh_frame:000000000000681C                 db  13h
.eh_frame:000000000000681D                 db    0
.eh_frame:000000000000681E                 db    0
.eh_frame:000000000000681F                 db    0
.eh_frame:0000000000006820                 db    0
.eh_frame:0000000000006821                 db    0
.eh_frame:0000000000006822                 db    0
.eh_frame:0000000000006823                 db    0
.eh_frame:0000000000006824                 db  10h
.eh_frame:0000000000006825                 db    0
.eh_frame:0000000000006826                 db    0
.eh_frame:0000000000006827                 db    0
.eh_frame:0000000000006828                 db  60h ; `
.eh_frame:0000000000006829                 db    6
.eh_frame:000000000000682A                 db    0
.eh_frame:000000000000682B                 db    0
.eh_frame:000000000000682C                 db  24h ; $
.eh_frame:000000000000682D                 db 0DDh
.eh_frame:000000000000682E                 db 0FFh
.eh_frame:000000000000682F                 db 0FFh
.eh_frame:0000000000006830                 db  0Ch
.eh_frame:0000000000006831                 db    0
.eh_frame:0000000000006832                 db    0
.eh_frame:0000000000006833                 db    0
.eh_frame:0000000000006834                 db    0
.eh_frame:0000000000006835                 db    0
.eh_frame:0000000000006836                 db    0
.eh_frame:0000000000006837                 db    0
.eh_frame:0000000000006838                 db  10h
.eh_frame:0000000000006839                 db    0
.eh_frame:000000000000683A                 db    0
.eh_frame:000000000000683B                 db    0
.eh_frame:000000000000683C                 db  74h ; t
.eh_frame:000000000000683D                 db    6
.eh_frame:000000000000683E                 db    0
.eh_frame:000000000000683F                 db    0
.eh_frame:0000000000006840                 db  20h
.eh_frame:0000000000006841                 db 0DDh
.eh_frame:0000000000006842                 db 0FFh
.eh_frame:0000000000006843                 db 0FFh
.eh_frame:0000000000006844                 db  14h
.eh_frame:0000000000006845                 db    0
.eh_frame:0000000000006846                 db    0
.eh_frame:0000000000006847                 db    0
.eh_frame:0000000000006848                 db    0
.eh_frame:0000000000006849                 db    0
.eh_frame:000000000000684A                 db    0
.eh_frame:000000000000684B                 db    0
.eh_frame:000000000000684C                 db  10h
.eh_frame:000000000000684D                 db    0
.eh_frame:000000000000684E                 db    0
.eh_frame:000000000000684F                 db    0
.eh_frame:0000000000006850                 db  88h
.eh_frame:0000000000006851                 db    6
.eh_frame:0000000000006852                 db    0
.eh_frame:0000000000006853                 db    0
.eh_frame:0000000000006854                 db  2Ch ; ,
.eh_frame:0000000000006855                 db 0DDh
.eh_frame:0000000000006856                 db 0FFh
.eh_frame:0000000000006857                 db 0FFh
.eh_frame:0000000000006858                 db  13h
.eh_frame:0000000000006859                 db    0
.eh_frame:000000000000685A                 db    0
.eh_frame:000000000000685B                 db    0
.eh_frame:000000000000685C                 db    0
.eh_frame:000000000000685D                 db    0
.eh_frame:000000000000685E                 db    0
.eh_frame:000000000000685F                 db    0
.eh_frame:0000000000006860                 db  14h
.eh_frame:0000000000006861                 db    0
.eh_frame:0000000000006862                 db    0
.eh_frame:0000000000006863                 db    0
.eh_frame:0000000000006864                 db  9Ch
.eh_frame:0000000000006865                 db    6
.eh_frame:0000000000006866                 db    0
.eh_frame:0000000000006867                 db    0
.eh_frame:0000000000006868                 db  38h ; 8
.eh_frame:0000000000006869                 db 0DDh
.eh_frame:000000000000686A                 db 0FFh
.eh_frame:000000000000686B                 db 0FFh
.eh_frame:000000000000686C                 db  18h
.eh_frame:000000000000686D                 db    0
.eh_frame:000000000000686E                 db    0
.eh_frame:000000000000686F                 db    0
.eh_frame:0000000000006870                 db    0
.eh_frame:0000000000006871                 db    0
.eh_frame:0000000000006872                 db    0
.eh_frame:0000000000006873                 db    0
.eh_frame:0000000000006874                 db    0
.eh_frame:0000000000006875                 db    0
.eh_frame:0000000000006876                 db    0
.eh_frame:0000000000006877                 db    0
.eh_frame:0000000000006878                 db  10h
.eh_frame:0000000000006879                 db    1
.eh_frame:000000000000687A                 db    0
.eh_frame:000000000000687B                 db    0
.eh_frame:000000000000687C                 db 0B4h
.eh_frame:000000000000687D                 db    6
.eh_frame:000000000000687E                 db    0
.eh_frame:000000000000687F                 db    0
.eh_frame:0000000000006880                 db  40h ; @
.eh_frame:0000000000006881                 db 0DDh
.eh_frame:0000000000006882                 db 0FFh
.eh_frame:0000000000006883                 db 0FFh
.eh_frame:0000000000006884                 db  17h
.eh_frame:0000000000006885                 db    4
.eh_frame:0000000000006886                 db    0
.eh_frame:0000000000006887                 db    0
.eh_frame:0000000000006888                 db    0
.eh_frame:0000000000006889                 db  42h ; B
.eh_frame:000000000000688A                 db  0Eh
.eh_frame:000000000000688B                 db  10h
.eh_frame:000000000000688C                 db  8Fh
.eh_frame:000000000000688D                 db    2
.eh_frame:000000000000688E                 db  42h ; B
.eh_frame:000000000000688F                 db  0Eh
.eh_frame:0000000000006890                 db  18h
.eh_frame:0000000000006891                 db  8Eh
.eh_frame:0000000000006892                 db    3
.eh_frame:0000000000006893                 db  42h ; B
.eh_frame:0000000000006894                 db  0Eh
.eh_frame:0000000000006895                 db  20h
.eh_frame:0000000000006896                 db  8Dh
.eh_frame:0000000000006897                 db    4
.eh_frame:0000000000006898                 db  42h ; B
.eh_frame:0000000000006899                 db  0Eh
.eh_frame:000000000000689A                 db  28h ; (
.eh_frame:000000000000689B                 db  8Ch
.eh_frame:000000000000689C                 db    5
.eh_frame:000000000000689D                 db  44h ; D
.eh_frame:000000000000689E                 db  0Eh
.eh_frame:000000000000689F                 db  30h ; 0
.eh_frame:00000000000068A0                 db  86h
.eh_frame:00000000000068A1                 db    6
.eh_frame:00000000000068A2                 db  41h ; A
.eh_frame:00000000000068A3                 db  0Eh
.eh_frame:00000000000068A4                 db  38h ; 8
.eh_frame:00000000000068A5                 db  83h
.eh_frame:00000000000068A6                 db    7
.eh_frame:00000000000068A7                 db  4Ah ; J
.eh_frame:00000000000068A8                 db  0Eh
.eh_frame:00000000000068A9                 db  60h ; `
.eh_frame:00000000000068AA                 db    2
.eh_frame:00000000000068AB                 db 0DDh
.eh_frame:00000000000068AC                 db  0Eh
.eh_frame:00000000000068AD                 db  68h ; h
.eh_frame:00000000000068AE                 db  57h ; W
.eh_frame:00000000000068AF                 db  0Eh
.eh_frame:00000000000068B0                 db  70h ; p
.eh_frame:00000000000068B1                 db  42h ; B
.eh_frame:00000000000068B2                 db  0Eh
.eh_frame:00000000000068B3                 db  78h ; x
.eh_frame:00000000000068B4                 db  42h ; B
.eh_frame:00000000000068B5                 db  0Eh
.eh_frame:00000000000068B6                 db  80h
.eh_frame:00000000000068B7                 db    1
.eh_frame:00000000000068B8                 db  42h ; B
.eh_frame:00000000000068B9                 db  0Eh
.eh_frame:00000000000068BA                 db  88h
.eh_frame:00000000000068BB                 db    1
.eh_frame:00000000000068BC                 db  42h ; B
.eh_frame:00000000000068BD                 db  0Eh
.eh_frame:00000000000068BE                 db  90h
.eh_frame:00000000000068BF                 db    1
.eh_frame:00000000000068C0                 db  53h ; S
.eh_frame:00000000000068C1                 db  0Eh
.eh_frame:00000000000068C2                 db  60h ; `
.eh_frame:00000000000068C3                 db  44h ; D
.eh_frame:00000000000068C4                 db  0Ah
.eh_frame:00000000000068C5                 db  0Eh
.eh_frame:00000000000068C6                 db  38h ; 8
.eh_frame:00000000000068C7                 db  41h ; A
.eh_frame:00000000000068C8                 db  0Eh
.eh_frame:00000000000068C9                 db  30h ; 0
.eh_frame:00000000000068CA                 db  41h ; A
.eh_frame:00000000000068CB                 db  0Eh
.eh_frame:00000000000068CC                 db  28h ; (
.eh_frame:00000000000068CD                 db  42h ; B
.eh_frame:00000000000068CE                 db  0Eh
.eh_frame:00000000000068CF                 db  20h
.eh_frame:00000000000068D0                 db  42h ; B
.eh_frame:00000000000068D1                 db  0Eh
.eh_frame:00000000000068D2                 db  18h
.eh_frame:00000000000068D3                 db  42h ; B
.eh_frame:00000000000068D4                 db  0Eh
.eh_frame:00000000000068D5                 db  10h
.eh_frame:00000000000068D6                 db  42h ; B
.eh_frame:00000000000068D7                 db  0Eh
.eh_frame:00000000000068D8                 db    8
.eh_frame:00000000000068D9                 db  44h ; D
.eh_frame:00000000000068DA                 db  0Bh
.eh_frame:00000000000068DB                 db    2
.eh_frame:00000000000068DC                 db  78h ; x
.eh_frame:00000000000068DD                 db  0Ah
.eh_frame:00000000000068DE                 db  0Eh
.eh_frame:00000000000068DF                 db  68h ; h
.eh_frame:00000000000068E0                 db  48h ; H
.eh_frame:00000000000068E1                 db  0Bh
.eh_frame:00000000000068E2                 db  5Ah ; Z
.eh_frame:00000000000068E3                 db  0Ah
.eh_frame:00000000000068E4                 db  0Eh
.eh_frame:00000000000068E5                 db  38h ; 8
.eh_frame:00000000000068E6                 db  47h ; G
.eh_frame:00000000000068E7                 db  0Eh
.eh_frame:00000000000068E8                 db  30h ; 0
.eh_frame:00000000000068E9                 db  41h ; A
.eh_frame:00000000000068EA                 db  0Eh
.eh_frame:00000000000068EB                 db  28h ; (
.eh_frame:00000000000068EC                 db  42h ; B
.eh_frame:00000000000068ED                 db  0Eh
.eh_frame:00000000000068EE                 db  20h
.eh_frame:00000000000068EF                 db  42h ; B
.eh_frame:00000000000068F0                 db  0Eh
.eh_frame:00000000000068F1                 db  18h
.eh_frame:00000000000068F2                 db  42h ; B
.eh_frame:00000000000068F3                 db  0Eh
.eh_frame:00000000000068F4                 db  10h
.eh_frame:00000000000068F5                 db  42h ; B
.eh_frame:00000000000068F6                 db  0Eh
.eh_frame:00000000000068F7                 db    8
.eh_frame:00000000000068F8                 db  56h ; V
.eh_frame:00000000000068F9                 db  0Bh
.eh_frame:00000000000068FA                 db  5Eh ; ^
.eh_frame:00000000000068FB                 db  0Ah
.eh_frame:00000000000068FC                 db  0Eh
.eh_frame:00000000000068FD                 db  38h ; 8
.eh_frame:00000000000068FE                 db  52h ; R
.eh_frame:00000000000068FF                 db  0Eh
.eh_frame:0000000000006900                 db  30h ; 0
.eh_frame:0000000000006901                 db  41h ; A
.eh_frame:0000000000006902                 db  0Eh
.eh_frame:0000000000006903                 db  28h ; (
.eh_frame:0000000000006904                 db  42h ; B
.eh_frame:0000000000006905                 db  0Eh
.eh_frame:0000000000006906                 db  20h
.eh_frame:0000000000006907                 db  42h ; B
.eh_frame:0000000000006908                 db  0Eh
.eh_frame:0000000000006909                 db  18h
.eh_frame:000000000000690A                 db  42h ; B
.eh_frame:000000000000690B                 db  0Eh
.eh_frame:000000000000690C                 db  10h
.eh_frame:000000000000690D                 db  42h ; B
.eh_frame:000000000000690E                 db  0Eh
.eh_frame:000000000000690F                 db    8
.eh_frame:0000000000006910                 db  4Fh ; O
.eh_frame:0000000000006911                 db  0Bh
.eh_frame:0000000000006912                 db  62h ; b
.eh_frame:0000000000006913                 db  0Ah
.eh_frame:0000000000006914                 db  0Eh
.eh_frame:0000000000006915                 db  38h ; 8
.eh_frame:0000000000006916                 db  50h ; P
.eh_frame:0000000000006917                 db  0Eh
.eh_frame:0000000000006918                 db  30h ; 0
.eh_frame:0000000000006919                 db  41h ; A
.eh_frame:000000000000691A                 db  0Eh
.eh_frame:000000000000691B                 db  28h ; (
.eh_frame:000000000000691C                 db  42h ; B
.eh_frame:000000000000691D                 db  0Eh
.eh_frame:000000000000691E                 db  20h
.eh_frame:000000000000691F                 db  42h ; B
.eh_frame:0000000000006920                 db  0Eh
.eh_frame:0000000000006921                 db  18h
.eh_frame:0000000000006922                 db  42h ; B
.eh_frame:0000000000006923                 db  0Eh
.eh_frame:0000000000006924                 db  10h
.eh_frame:0000000000006925                 db  42h ; B
.eh_frame:0000000000006926                 db  0Eh
.eh_frame:0000000000006927                 db    8
.eh_frame:0000000000006928                 db  55h ; U
.eh_frame:0000000000006929                 db  0Bh
.eh_frame:000000000000692A                 db  66h ; f
.eh_frame:000000000000692B                 db  0Eh
.eh_frame:000000000000692C                 db  68h ; h
.eh_frame:000000000000692D                 db  42h ; B
.eh_frame:000000000000692E                 db  0Eh
.eh_frame:000000000000692F                 db  70h ; p
.eh_frame:0000000000006930                 db  5Ch ; \
.eh_frame:0000000000006931                 db  0Eh
.eh_frame:0000000000006932                 db  68h ; h
.eh_frame:0000000000006933                 db  41h ; A
.eh_frame:0000000000006934                 db  0Eh
.eh_frame:0000000000006935                 db  60h ; `
.eh_frame:0000000000006936                 db  44h ; D
.eh_frame:0000000000006937                 db  0Ah
.eh_frame:0000000000006938                 db  0Eh
.eh_frame:0000000000006939                 db  38h ; 8
.eh_frame:000000000000693A                 db  41h ; A
.eh_frame:000000000000693B                 db  0Eh
.eh_frame:000000000000693C                 db  30h ; 0
.eh_frame:000000000000693D                 db  41h ; A
.eh_frame:000000000000693E                 db  0Eh
.eh_frame:000000000000693F                 db  28h ; (
.eh_frame:0000000000006940                 db  42h ; B
.eh_frame:0000000000006941                 db  0Eh
.eh_frame:0000000000006942                 db  20h
.eh_frame:0000000000006943                 db  42h ; B
.eh_frame:0000000000006944                 db  0Eh
.eh_frame:0000000000006945                 db  18h
.eh_frame:0000000000006946                 db  42h ; B
.eh_frame:0000000000006947                 db  0Eh
.eh_frame:0000000000006948                 db  10h
.eh_frame:0000000000006949                 db  42h ; B
.eh_frame:000000000000694A                 db  0Eh
.eh_frame:000000000000694B                 db    8
.eh_frame:000000000000694C                 db  45h ; E
.eh_frame:000000000000694D                 db  0Bh
.eh_frame:000000000000694E                 db  68h ; h
.eh_frame:000000000000694F                 db  0Ah
.eh_frame:0000000000006950                 db  0Eh
.eh_frame:0000000000006951                 db  68h ; h
.eh_frame:0000000000006952                 db  48h ; H
.eh_frame:0000000000006953                 db  0Bh
.eh_frame:0000000000006954                 db  72h ; r
.eh_frame:0000000000006955                 db  0Eh
.eh_frame:0000000000006956                 db  68h ; h
.eh_frame:0000000000006957                 db  45h ; E
.eh_frame:0000000000006958                 db  0Eh
.eh_frame:0000000000006959                 db  70h ; p
.eh_frame:000000000000695A                 db  42h ; B
.eh_frame:000000000000695B                 db  0Eh
.eh_frame:000000000000695C                 db  78h ; x
.eh_frame:000000000000695D                 db  42h ; B
.eh_frame:000000000000695E                 db  0Eh
.eh_frame:000000000000695F                 db  80h
.eh_frame:0000000000006960                 db    1
.eh_frame:0000000000006961                 db  5Eh ; ^
.eh_frame:0000000000006962                 db  0Eh
.eh_frame:0000000000006963                 db  60h ; `
.eh_frame:0000000000006964                 db  44h ; D
.eh_frame:0000000000006965                 db  0Ah
.eh_frame:0000000000006966                 db  0Eh
.eh_frame:0000000000006967                 db  38h ; 8
.eh_frame:0000000000006968                 db  41h ; A
.eh_frame:0000000000006969                 db  0Eh
.eh_frame:000000000000696A                 db  30h ; 0
.eh_frame:000000000000696B                 db  41h ; A
.eh_frame:000000000000696C                 db  0Eh
.eh_frame:000000000000696D                 db  28h ; (
.eh_frame:000000000000696E                 db  42h ; B
.eh_frame:000000000000696F                 db  0Eh
.eh_frame:0000000000006970                 db  20h
.eh_frame:0000000000006971                 db  42h ; B
.eh_frame:0000000000006972                 db  0Eh
.eh_frame:0000000000006973                 db  18h
.eh_frame:0000000000006974                 db  42h ; B
.eh_frame:0000000000006975                 db  0Eh
.eh_frame:0000000000006976                 db  10h
.eh_frame:0000000000006977                 db  42h ; B
.eh_frame:0000000000006978                 db  0Eh
.eh_frame:0000000000006979                 db    8
.eh_frame:000000000000697A                 db  41h ; A
.eh_frame:000000000000697B                 db  0Bh
.eh_frame:000000000000697C                 db  79h ; y
.eh_frame:000000000000697D                 db  0Ah
.eh_frame:000000000000697E                 db  0Eh
.eh_frame:000000000000697F                 db  68h ; h
.eh_frame:0000000000006980                 db  42h ; B
.eh_frame:0000000000006981                 db  0Eh
.eh_frame:0000000000006982                 db  70h ; p
.eh_frame:0000000000006983                 db  42h ; B
.eh_frame:0000000000006984                 db  0Eh
.eh_frame:0000000000006985                 db  78h ; x
.eh_frame:0000000000006986                 db  42h ; B
.eh_frame:0000000000006987                 db  0Eh
.eh_frame:0000000000006988                 db  80h
.eh_frame:0000000000006989                 db    1
.eh_frame:000000000000698A                 db  51h ; Q
.eh_frame:000000000000698B                 db  0Bh
.eh_frame:000000000000698C                 db  10h
.eh_frame:000000000000698D                 db    0
.eh_frame:000000000000698E                 db    0
.eh_frame:000000000000698F                 db    0
.eh_frame:0000000000006990                 db 0C8h
.eh_frame:0000000000006991                 db    7
.eh_frame:0000000000006992                 db    0
.eh_frame:0000000000006993                 db    0
.eh_frame:0000000000006994                 db  4Ch ; L
.eh_frame:0000000000006995                 db 0E0h
.eh_frame:0000000000006996                 db 0FFh
.eh_frame:0000000000006997                 db 0FFh
.eh_frame:0000000000006998                 db  20h
.eh_frame:0000000000006999                 db    0
.eh_frame:000000000000699A                 db    0
.eh_frame:000000000000699B                 db    0
.eh_frame:000000000000699C                 db    0
.eh_frame:000000000000699D                 db    0
.eh_frame:000000000000699E                 db    0
.eh_frame:000000000000699F                 db    0
.eh_frame:00000000000069A0                 db  18h
.eh_frame:00000000000069A1                 db    0
.eh_frame:00000000000069A2                 db    0
.eh_frame:00000000000069A3                 db    0
.eh_frame:00000000000069A4                 db 0DCh
.eh_frame:00000000000069A5                 db    7
.eh_frame:00000000000069A6                 db    0
.eh_frame:00000000000069A7                 db    0
.eh_frame:00000000000069A8                 db  58h ; X
.eh_frame:00000000000069A9                 db 0E0h
.eh_frame:00000000000069AA                 db 0FFh
.eh_frame:00000000000069AB                 db 0FFh
.eh_frame:00000000000069AC                 db  78h ; x
.eh_frame:00000000000069AD                 db    0
.eh_frame:00000000000069AE                 db    0
.eh_frame:00000000000069AF                 db    0
.eh_frame:00000000000069B0                 db    0
.eh_frame:00000000000069B1                 db  44h ; D
.eh_frame:00000000000069B2                 db  0Eh
.eh_frame:00000000000069B3                 db  70h ; p
.eh_frame:00000000000069B4                 db    2
.eh_frame:00000000000069B5                 db  60h ; `
.eh_frame:00000000000069B6                 db  0Ah
.eh_frame:00000000000069B7                 db  0Eh
.eh_frame:00000000000069B8                 db    8
.eh_frame:00000000000069B9                 db  41h ; A
.eh_frame:00000000000069BA                 db  0Bh
.eh_frame:00000000000069BB                 db    0
.eh_frame:00000000000069BC                 db  28h ; (
.eh_frame:00000000000069BD                 db    0
.eh_frame:00000000000069BE                 db    0
.eh_frame:00000000000069BF                 db    0
.eh_frame:00000000000069C0                 db 0F8h
.eh_frame:00000000000069C1                 db    7
.eh_frame:00000000000069C2                 db    0
.eh_frame:00000000000069C3                 db    0
.eh_frame:00000000000069C4                 db 0BCh
.eh_frame:00000000000069C5                 db 0E0h
.eh_frame:00000000000069C6                 db 0FFh
.eh_frame:00000000000069C7                 db 0FFh
.eh_frame:00000000000069C8                 db 0D5h
.eh_frame:00000000000069C9                 db    0
.eh_frame:00000000000069CA                 db    0
.eh_frame:00000000000069CB                 db    0
.eh_frame:00000000000069CC                 db    0
.eh_frame:00000000000069CD                 db  41h ; A
.eh_frame:00000000000069CE                 db  0Eh
.eh_frame:00000000000069CF                 db  10h
.eh_frame:00000000000069D0                 db  86h
.eh_frame:00000000000069D1                 db    2
.eh_frame:00000000000069D2                 db  41h ; A
.eh_frame:00000000000069D3                 db  0Eh
.eh_frame:00000000000069D4                 db  18h
.eh_frame:00000000000069D5                 db  83h
.eh_frame:00000000000069D6                 db    3
.eh_frame:00000000000069D7                 db  50h ; P
.eh_frame:00000000000069D8                 db  0Eh
.eh_frame:00000000000069D9                 db 0D0h
.eh_frame:00000000000069DA                 db    1
.eh_frame:00000000000069DB                 db    2
.eh_frame:00000000000069DC                 db 0ABh
.eh_frame:00000000000069DD                 db  0Ah
.eh_frame:00000000000069DE                 db  0Eh
.eh_frame:00000000000069DF                 db  18h
.eh_frame:00000000000069E0                 db  41h ; A
.eh_frame:00000000000069E1                 db  0Eh
.eh_frame:00000000000069E2                 db  10h
.eh_frame:00000000000069E3                 db  41h ; A
.eh_frame:00000000000069E4                 db  0Eh
.eh_frame:00000000000069E5                 db    8
.eh_frame:00000000000069E6                 db  41h ; A
.eh_frame:00000000000069E7                 db  0Bh
.eh_frame:00000000000069E8                 db  1Ch
.eh_frame:00000000000069E9                 db    0
.eh_frame:00000000000069EA                 db    0
.eh_frame:00000000000069EB                 db    0
.eh_frame:00000000000069EC                 db  24h ; $
.eh_frame:00000000000069ED                 db    8
.eh_frame:00000000000069EE                 db    0
.eh_frame:00000000000069EF                 db    0
.eh_frame:00000000000069F0                 db  70h ; p
.eh_frame:00000000000069F1                 db 0E1h
.eh_frame:00000000000069F2                 db 0FFh
.eh_frame:00000000000069F3                 db 0FFh
.eh_frame:00000000000069F4                 db  80h
.eh_frame:00000000000069F5                 db    0
.eh_frame:00000000000069F6                 db    0
.eh_frame:00000000000069F7                 db    0
.eh_frame:00000000000069F8                 db    0
.eh_frame:00000000000069F9                 db  41h ; A
.eh_frame:00000000000069FA                 db  0Eh
.eh_frame:00000000000069FB                 db  10h
.eh_frame:00000000000069FC                 db  83h
.eh_frame:00000000000069FD                 db    2
.eh_frame:00000000000069FE                 db    2
.eh_frame:00000000000069FF                 db  7Ah ; z
.eh_frame:0000000000006A00                 db  0Eh
.eh_frame:0000000000006A01                 db    8
.eh_frame:0000000000006A02                 db    0
.eh_frame:0000000000006A03                 db    0
.eh_frame:0000000000006A04                 db    0
.eh_frame:0000000000006A05                 db    0
.eh_frame:0000000000006A06                 db    0
.eh_frame:0000000000006A07                 db    0
.eh_frame:0000000000006A08                 db  18h
.eh_frame:0000000000006A09                 db    0
.eh_frame:0000000000006A0A                 db    0
.eh_frame:0000000000006A0B                 db    0
.eh_frame:0000000000006A0C                 db  44h ; D
.eh_frame:0000000000006A0D                 db    8
.eh_frame:0000000000006A0E                 db    0
.eh_frame:0000000000006A0F                 db    0
.eh_frame:0000000000006A10                 db 0D0h
.eh_frame:0000000000006A11                 db 0E1h
.eh_frame:0000000000006A12                 db 0FFh
.eh_frame:0000000000006A13                 db 0FFh
.eh_frame:0000000000006A14                 db  1Ah
.eh_frame:0000000000006A15                 db    0
.eh_frame:0000000000006A16                 db    0
.eh_frame:0000000000006A17                 db    0
.eh_frame:0000000000006A18                 db    0
.eh_frame:0000000000006A19                 db  41h ; A
.eh_frame:0000000000006A1A                 db  0Eh
.eh_frame:0000000000006A1B                 db  10h
.eh_frame:0000000000006A1C                 db  83h
.eh_frame:0000000000006A1D                 db    2
.eh_frame:0000000000006A1E                 db  53h ; S
.eh_frame:0000000000006A1F                 db  0Ah
.eh_frame:0000000000006A20                 db  0Eh
.eh_frame:0000000000006A21                 db    8
.eh_frame:0000000000006A22                 db  41h ; A
.eh_frame:0000000000006A23                 db  0Bh
.eh_frame:0000000000006A24                 db  10h
.eh_frame:0000000000006A25                 db    0
.eh_frame:0000000000006A26                 db    0
.eh_frame:0000000000006A27                 db    0
.eh_frame:0000000000006A28                 db  60h ; `
.eh_frame:0000000000006A29                 db    8
.eh_frame:0000000000006A2A                 db    0
.eh_frame:0000000000006A2B                 db    0
.eh_frame:0000000000006A2C                 db 0D4h
.eh_frame:0000000000006A2D                 db 0E1h
.eh_frame:0000000000006A2E                 db 0FFh
.eh_frame:0000000000006A2F                 db 0FFh
.eh_frame:0000000000006A30                 db  24h ; $
.eh_frame:0000000000006A31                 db    0
.eh_frame:0000000000006A32                 db    0
.eh_frame:0000000000006A33                 db    0
.eh_frame:0000000000006A34                 db    0
.eh_frame:0000000000006A35                 db  5Fh ; _
.eh_frame:0000000000006A36                 db  0Eh
.eh_frame:0000000000006A37                 db  10h
.eh_frame:0000000000006A38                 db  10h
.eh_frame:0000000000006A39                 db    0
.eh_frame:0000000000006A3A                 db    0
.eh_frame:0000000000006A3B                 db    0
.eh_frame:0000000000006A3C                 db  74h ; t
.eh_frame:0000000000006A3D                 db    8
.eh_frame:0000000000006A3E                 db    0
.eh_frame:0000000000006A3F                 db    0
.eh_frame:0000000000006A40                 db 0F0h
.eh_frame:0000000000006A41                 db 0E1h
.eh_frame:0000000000006A42                 db 0FFh
.eh_frame:0000000000006A43                 db 0FFh
.eh_frame:0000000000006A44                 db    2
.eh_frame:0000000000006A45                 db    0
.eh_frame:0000000000006A46                 db    0
.eh_frame:0000000000006A47                 db    0
.eh_frame:0000000000006A48                 db    0
.eh_frame:0000000000006A49                 db    0
.eh_frame:0000000000006A4A                 db    0
.eh_frame:0000000000006A4B                 db    0
.eh_frame:0000000000006A4C                 db  20h
.eh_frame:0000000000006A4D                 db    0
.eh_frame:0000000000006A4E                 db    0
.eh_frame:0000000000006A4F                 db    0
.eh_frame:0000000000006A50                 db  88h
.eh_frame:0000000000006A51                 db    8
.eh_frame:0000000000006A52                 db    0
.eh_frame:0000000000006A53                 db    0
.eh_frame:0000000000006A54                 db 0ECh
.eh_frame:0000000000006A55                 db 0E1h
.eh_frame:0000000000006A56                 db 0FFh
.eh_frame:0000000000006A57                 db 0FFh
.eh_frame:0000000000006A58                 db  36h ; 6
.eh_frame:0000000000006A59                 db    0
.eh_frame:0000000000006A5A                 db    0
.eh_frame:0000000000006A5B                 db    0
.eh_frame:0000000000006A5C                 db    0
.eh_frame:0000000000006A5D                 db  44h ; D
.eh_frame:0000000000006A5E                 db  0Eh
.eh_frame:0000000000006A5F                 db  10h
.eh_frame:0000000000006A60                 db  83h
.eh_frame:0000000000006A61                 db    2
.eh_frame:0000000000006A62                 db  5Dh ; ]
.eh_frame:0000000000006A63                 db  0Ah
.eh_frame:0000000000006A64                 db  0Eh
.eh_frame:0000000000006A65                 db    8
.eh_frame:0000000000006A66                 db  47h ; G
.eh_frame:0000000000006A67                 db  0Bh
.eh_frame:0000000000006A68                 db  48h ; H
.eh_frame:0000000000006A69                 db  0Ah
.eh_frame:0000000000006A6A                 db  0Eh
.eh_frame:0000000000006A6B                 db    8
.eh_frame:0000000000006A6C                 db  41h ; A
.eh_frame:0000000000006A6D                 db  0Bh
.eh_frame:0000000000006A6E                 db    0
.eh_frame:0000000000006A6F                 db    0
.eh_frame:0000000000006A70                 db  10h
.eh_frame:0000000000006A71                 db    0
.eh_frame:0000000000006A72                 db    0
.eh_frame:0000000000006A73                 db    0
.eh_frame:0000000000006A74                 db 0ACh
.eh_frame:0000000000006A75                 db    8
.eh_frame:0000000000006A76                 db    0
.eh_frame:0000000000006A77                 db    0
.eh_frame:0000000000006A78                 db    8
.eh_frame:0000000000006A79                 db 0E2h
.eh_frame:0000000000006A7A                 db 0FFh
.eh_frame:0000000000006A7B                 db 0FFh
.eh_frame:0000000000006A7C                 db  24h ; $
.eh_frame:0000000000006A7D                 db    0
.eh_frame:0000000000006A7E                 db    0
.eh_frame:0000000000006A7F                 db    0
.eh_frame:0000000000006A80                 db    0
.eh_frame:0000000000006A81                 db  5Fh ; _
.eh_frame:0000000000006A82                 db  0Eh
.eh_frame:0000000000006A83                 db  10h
.eh_frame:0000000000006A84                 db  14h
.eh_frame:0000000000006A85                 db    0
.eh_frame:0000000000006A86                 db    0
.eh_frame:0000000000006A87                 db    0
.eh_frame:0000000000006A88                 db 0C0h
.eh_frame:0000000000006A89                 db    8
.eh_frame:0000000000006A8A                 db    0
.eh_frame:0000000000006A8B                 db    0
.eh_frame:0000000000006A8C                 db  24h ; $
.eh_frame:0000000000006A8D                 db 0E2h
.eh_frame:0000000000006A8E                 db 0FFh
.eh_frame:0000000000006A8F                 db 0FFh
.eh_frame:0000000000006A90                 db  82h
.eh_frame:0000000000006A91                 db    0
.eh_frame:0000000000006A92                 db    0
.eh_frame:0000000000006A93                 db    0
.eh_frame:0000000000006A94                 db    0
.eh_frame:0000000000006A95                 db    2
.eh_frame:0000000000006A96                 db  5Fh ; _
.eh_frame:0000000000006A97                 db  0Eh
.eh_frame:0000000000006A98                 db  10h
.eh_frame:0000000000006A99                 db  49h ; I
.eh_frame:0000000000006A9A                 db  0Eh
.eh_frame:0000000000006A9B                 db    8
.eh_frame:0000000000006A9C                 db  14h
.eh_frame:0000000000006A9D                 db    0
.eh_frame:0000000000006A9E                 db    0
.eh_frame:0000000000006A9F                 db    0
.eh_frame:0000000000006AA0                 db 0D8h
.eh_frame:0000000000006AA1                 db    8
.eh_frame:0000000000006AA2                 db    0
.eh_frame:0000000000006AA3                 db    0
.eh_frame:0000000000006AA4                 db  9Ch
.eh_frame:0000000000006AA5                 db 0E2h
.eh_frame:0000000000006AA6                 db 0FFh
.eh_frame:0000000000006AA7                 db 0FFh
.eh_frame:0000000000006AA8                 db  4Ah ; J
.eh_frame:0000000000006AA9                 db    0
.eh_frame:0000000000006AAA                 db    0
.eh_frame:0000000000006AAB                 db    0
.eh_frame:0000000000006AAC                 db    0
.eh_frame:0000000000006AAD                 db    2
.eh_frame:0000000000006AAE                 db  45h ; E
.eh_frame:0000000000006AAF                 db  0Eh
.eh_frame:0000000000006AB0                 db  10h
.eh_frame:0000000000006AB1                 db    0
.eh_frame:0000000000006AB2                 db    0
.eh_frame:0000000000006AB3                 db    0
.eh_frame:0000000000006AB4                 db  18h
.eh_frame:0000000000006AB5                 db    0
.eh_frame:0000000000006AB6                 db    0
.eh_frame:0000000000006AB7                 db    0
.eh_frame:0000000000006AB8                 db 0F0h
.eh_frame:0000000000006AB9                 db    8
.eh_frame:0000000000006ABA                 db    0
.eh_frame:0000000000006ABB                 db    0
.eh_frame:0000000000006ABC                 db 0D4h
.eh_frame:0000000000006ABD                 db 0E2h
.eh_frame:0000000000006ABE                 db 0FFh
.eh_frame:0000000000006ABF                 db 0FFh
.eh_frame:0000000000006AC0                 db  17h
.eh_frame:0000000000006AC1                 db    0
.eh_frame:0000000000006AC2                 db    0
.eh_frame:0000000000006AC3                 db    0
.eh_frame:0000000000006AC4                 db    0
.eh_frame:0000000000006AC5                 db  41h ; A
.eh_frame:0000000000006AC6                 db  0Eh
.eh_frame:0000000000006AC7                 db  10h
.eh_frame:0000000000006AC8                 db  83h
.eh_frame:0000000000006AC9                 db    2
.eh_frame:0000000000006ACA                 db  51h ; Q
.eh_frame:0000000000006ACB                 db  0Eh
.eh_frame:0000000000006ACC                 db    8
.eh_frame:0000000000006ACD                 db    0
.eh_frame:0000000000006ACE                 db    0
.eh_frame:0000000000006ACF                 db    0
.eh_frame:0000000000006AD0                 db  18h
.eh_frame:0000000000006AD1                 db    0
.eh_frame:0000000000006AD2                 db    0
.eh_frame:0000000000006AD3                 db    0
.eh_frame:0000000000006AD4                 db  0Ch
.eh_frame:0000000000006AD5                 db    9
.eh_frame:0000000000006AD6                 db    0
.eh_frame:0000000000006AD7                 db    0
.eh_frame:0000000000006AD8                 db 0D8h
.eh_frame:0000000000006AD9                 db 0E2h
.eh_frame:0000000000006ADA                 db 0FFh
.eh_frame:0000000000006ADB                 db 0FFh
.eh_frame:0000000000006ADC                 db  2Eh ; .
.eh_frame:0000000000006ADD                 db    0
.eh_frame:0000000000006ADE                 db    0
.eh_frame:0000000000006ADF                 db    0
.eh_frame:0000000000006AE0                 db    0
.eh_frame:0000000000006AE1                 db  47h ; G
.eh_frame:0000000000006AE2                 db  0Eh
.eh_frame:0000000000006AE3                 db  10h
.eh_frame:0000000000006AE4                 db  61h ; a
.eh_frame:0000000000006AE5                 db  0Ah
.eh_frame:0000000000006AE6                 db  0Eh
.eh_frame:0000000000006AE7                 db    8
.eh_frame:0000000000006AE8                 db  41h ; A
.eh_frame:0000000000006AE9                 db  0Bh
.eh_frame:0000000000006AEA                 db    0
.eh_frame:0000000000006AEB                 db    0
.eh_frame:0000000000006AEC                 db  24h ; $
.eh_frame:0000000000006AED                 db    0
.eh_frame:0000000000006AEE                 db    0
.eh_frame:0000000000006AEF                 db    0
.eh_frame:0000000000006AF0                 db  28h ; (
.eh_frame:0000000000006AF1                 db    9
.eh_frame:0000000000006AF2                 db    0
.eh_frame:0000000000006AF3                 db    0
.eh_frame:0000000000006AF4                 db 0ECh
.eh_frame:0000000000006AF5                 db 0E2h
.eh_frame:0000000000006AF6                 db 0FFh
.eh_frame:0000000000006AF7                 db 0FFh
.eh_frame:0000000000006AF8                 db  28h ; (
.eh_frame:0000000000006AF9                 db    0
.eh_frame:0000000000006AFA                 db    0
.eh_frame:0000000000006AFB                 db    0
.eh_frame:0000000000006AFC                 db    0
.eh_frame:0000000000006AFD                 db  41h ; A
.eh_frame:0000000000006AFE                 db  0Eh
.eh_frame:0000000000006AFF                 db  10h
.eh_frame:0000000000006B00                 db  86h
.eh_frame:0000000000006B01                 db    2
.eh_frame:0000000000006B02                 db  41h ; A
.eh_frame:0000000000006B03                 db  0Eh
.eh_frame:0000000000006B04                 db  18h
.eh_frame:0000000000006B05                 db  83h
.eh_frame:0000000000006B06                 db    3
.eh_frame:0000000000006B07                 db  4Dh ; M
.eh_frame:0000000000006B08                 db  0Eh
.eh_frame:0000000000006B09                 db  20h
.eh_frame:0000000000006B0A                 db  49h ; I
.eh_frame:0000000000006B0B                 db  0Eh
.eh_frame:0000000000006B0C                 db  18h
.eh_frame:0000000000006B0D                 db  47h ; G
.eh_frame:0000000000006B0E                 db  0Eh
.eh_frame:0000000000006B0F                 db  10h
.eh_frame:0000000000006B10                 db  41h ; A
.eh_frame:0000000000006B11                 db  0Eh
.eh_frame:0000000000006B12                 db    8
.eh_frame:0000000000006B13                 db    0
.eh_frame:0000000000006B14                 db  18h
.eh_frame:0000000000006B15                 db    0
.eh_frame:0000000000006B16                 db    0
.eh_frame:0000000000006B17                 db    0
.eh_frame:0000000000006B18                 db  50h ; P
.eh_frame:0000000000006B19                 db    9
.eh_frame:0000000000006B1A                 db    0
.eh_frame:0000000000006B1B                 db    0
.eh_frame:0000000000006B1C                 db 0F4h
.eh_frame:0000000000006B1D                 db 0E2h
.eh_frame:0000000000006B1E                 db 0FFh
.eh_frame:0000000000006B1F                 db 0FFh
.eh_frame:0000000000006B20                 db  13h
.eh_frame:0000000000006B21                 db    0
.eh_frame:0000000000006B22                 db    0
.eh_frame:0000000000006B23                 db    0
.eh_frame:0000000000006B24                 db    0
.eh_frame:0000000000006B25                 db  41h ; A
.eh_frame:0000000000006B26                 db  0Eh
.eh_frame:0000000000006B27                 db  10h
.eh_frame:0000000000006B28                 db  83h
.eh_frame:0000000000006B29                 db    2
.eh_frame:0000000000006B2A                 db  50h ; P
.eh_frame:0000000000006B2B                 db  0Eh
.eh_frame:0000000000006B2C                 db    8
.eh_frame:0000000000006B2D                 db    0
.eh_frame:0000000000006B2E                 db    0
.eh_frame:0000000000006B2F                 db    0
.eh_frame:0000000000006B30                 db  14h
.eh_frame:0000000000006B31                 db    0
.eh_frame:0000000000006B32                 db    0
.eh_frame:0000000000006B33                 db    0
.eh_frame:0000000000006B34                 db  6Ch ; l
.eh_frame:0000000000006B35                 db    9
.eh_frame:0000000000006B36                 db    0
.eh_frame:0000000000006B37                 db    0
.eh_frame:0000000000006B38                 db 0F8h
.eh_frame:0000000000006B39                 db 0E2h
.eh_frame:0000000000006B3A                 db 0FFh
.eh_frame:0000000000006B3B                 db 0FFh
.eh_frame:0000000000006B3C                 db  35h ; 5
.eh_frame:0000000000006B3D                 db    0
.eh_frame:0000000000006B3E                 db    0
.eh_frame:0000000000006B3F                 db    0
.eh_frame:0000000000006B40                 db    0
.eh_frame:0000000000006B41                 db  4Bh ; K
.eh_frame:0000000000006B42                 db  0Eh
.eh_frame:0000000000006B43                 db  10h
.eh_frame:0000000000006B44                 db    0
.eh_frame:0000000000006B45                 db    0
.eh_frame:0000000000006B46                 db    0
.eh_frame:0000000000006B47                 db    0
.eh_frame:0000000000006B48                 db  34h ; 4
.eh_frame:0000000000006B49                 db    0
.eh_frame:0000000000006B4A                 db    0
.eh_frame:0000000000006B4B                 db    0
.eh_frame:0000000000006B4C                 db  84h
.eh_frame:0000000000006B4D                 db    9
.eh_frame:0000000000006B4E                 db    0
.eh_frame:0000000000006B4F                 db    0
.eh_frame:0000000000006B50                 db  20h
.eh_frame:0000000000006B51                 db 0E3h
.eh_frame:0000000000006B52                 db 0FFh
.eh_frame:0000000000006B53                 db 0FFh
.eh_frame:0000000000006B54                 db  7Bh ; {
.eh_frame:0000000000006B55                 db    0
.eh_frame:0000000000006B56                 db    0
.eh_frame:0000000000006B57                 db    0
.eh_frame:0000000000006B58                 db    0
.eh_frame:0000000000006B59                 db  42h ; B
.eh_frame:0000000000006B5A                 db  0Eh
.eh_frame:0000000000006B5B                 db  10h
.eh_frame:0000000000006B5C                 db  8Ch
.eh_frame:0000000000006B5D                 db    2
.eh_frame:0000000000006B5E                 db  41h ; A
.eh_frame:0000000000006B5F                 db  0Eh
.eh_frame:0000000000006B60                 db  18h
.eh_frame:0000000000006B61                 db  86h
.eh_frame:0000000000006B62                 db    3
.eh_frame:0000000000006B63                 db  41h ; A
.eh_frame:0000000000006B64                 db  0Eh
.eh_frame:0000000000006B65                 db  20h
.eh_frame:0000000000006B66                 db  83h
.eh_frame:0000000000006B67                 db    4
.eh_frame:0000000000006B68                 db  7Dh ; }
.eh_frame:0000000000006B69                 db  0Ah
.eh_frame:0000000000006B6A                 db  0Eh
.eh_frame:0000000000006B6B                 db  18h
.eh_frame:0000000000006B6C                 db  41h ; A
.eh_frame:0000000000006B6D                 db  0Eh
.eh_frame:0000000000006B6E                 db  10h
.eh_frame:0000000000006B6F                 db  42h ; B
.eh_frame:0000000000006B70                 db  0Eh
.eh_frame:0000000000006B71                 db    8
.eh_frame:0000000000006B72                 db  44h ; D
.eh_frame:0000000000006B73                 db  0Bh
.eh_frame:0000000000006B74                 db  60h ; `
.eh_frame:0000000000006B75                 db  0Ah
.eh_frame:0000000000006B76                 db  0Eh
.eh_frame:0000000000006B77                 db  18h
.eh_frame:0000000000006B78                 db  41h ; A
.eh_frame:0000000000006B79                 db  0Eh
.eh_frame:0000000000006B7A                 db  10h
.eh_frame:0000000000006B7B                 db  42h ; B
.eh_frame:0000000000006B7C                 db  0Eh
.eh_frame:0000000000006B7D                 db    8
.eh_frame:0000000000006B7E                 db  45h ; E
.eh_frame:0000000000006B7F                 db  0Bh
.eh_frame:0000000000006B80                 db  1Ch
.eh_frame:0000000000006B81                 db    0
.eh_frame:0000000000006B82                 db    0
.eh_frame:0000000000006B83                 db    0
.eh_frame:0000000000006B84                 db 0BCh
.eh_frame:0000000000006B85                 db    9
.eh_frame:0000000000006B86                 db    0
.eh_frame:0000000000006B87                 db    0
.eh_frame:0000000000006B88                 db  68h ; h
.eh_frame:0000000000006B89                 db 0E3h
.eh_frame:0000000000006B8A                 db 0FFh
.eh_frame:0000000000006B8B                 db 0FFh
.eh_frame:0000000000006B8C                 db  40h ; @
.eh_frame:0000000000006B8D                 db    0
.eh_frame:0000000000006B8E                 db    0
.eh_frame:0000000000006B8F                 db    0
.eh_frame:0000000000006B90                 db    0
.eh_frame:0000000000006B91                 db  44h ; D
.eh_frame:0000000000006B92                 db  0Eh
.eh_frame:0000000000006B93                 db  10h
.eh_frame:0000000000006B94                 db  83h
.eh_frame:0000000000006B95                 db    2
.eh_frame:0000000000006B96                 db  5Ah ; Z
.eh_frame:0000000000006B97                 db  0Ah
.eh_frame:0000000000006B98                 db  0Eh
.eh_frame:0000000000006B99                 db    8
.eh_frame:0000000000006B9A                 db  4Ah ; J
.eh_frame:0000000000006B9B                 db  0Bh
.eh_frame:0000000000006B9C                 db  53h ; S
.eh_frame:0000000000006B9D                 db  0Eh
.eh_frame:0000000000006B9E                 db    8
.eh_frame:0000000000006B9F                 db    0
.eh_frame:0000000000006BA0                 db  2Ch ; ,
.eh_frame:0000000000006BA1                 db    0
.eh_frame:0000000000006BA2                 db    0
.eh_frame:0000000000006BA3                 db    0
.eh_frame:0000000000006BA4                 db 0DCh
.eh_frame:0000000000006BA5                 db    9
.eh_frame:0000000000006BA6                 db    0
.eh_frame:0000000000006BA7                 db    0
.eh_frame:0000000000006BA8                 db  88h
.eh_frame:0000000000006BA9                 db 0E3h
.eh_frame:0000000000006BAA                 db 0FFh
.eh_frame:0000000000006BAB                 db 0FFh
.eh_frame:0000000000006BAC                 db  57h ; W
.eh_frame:0000000000006BAD                 db    0
.eh_frame:0000000000006BAE                 db    0
.eh_frame:0000000000006BAF                 db    0
.eh_frame:0000000000006BB0                 db    0
.eh_frame:0000000000006BB1                 db  63h ; c
.eh_frame:0000000000006BB2                 db  0Eh
.eh_frame:0000000000006BB3                 db  10h
.eh_frame:0000000000006BB4                 db  8Ch
.eh_frame:0000000000006BB5                 db    2
.eh_frame:0000000000006BB6                 db  41h ; A
.eh_frame:0000000000006BB7                 db  0Eh
.eh_frame:0000000000006BB8                 db  18h
.eh_frame:0000000000006BB9                 db  86h
.eh_frame:0000000000006BBA                 db    3
.eh_frame:0000000000006BBB                 db  44h ; D
.eh_frame:0000000000006BBC                 db  0Eh
.eh_frame:0000000000006BBD                 db  20h
.eh_frame:0000000000006BBE                 db  83h
.eh_frame:0000000000006BBF                 db    4
.eh_frame:0000000000006BC0                 db  6Bh ; k
.eh_frame:0000000000006BC1                 db  0Eh
.eh_frame:0000000000006BC2                 db  18h
.eh_frame:0000000000006BC3                 db  41h ; A
.eh_frame:0000000000006BC4                 db  0Eh
.eh_frame:0000000000006BC5                 db  10h
.eh_frame:0000000000006BC6                 db  42h ; B
.eh_frame:0000000000006BC7                 db  0Eh
.eh_frame:0000000000006BC8                 db    8
.eh_frame:0000000000006BC9                 db    0
.eh_frame:0000000000006BCA                 db    0
.eh_frame:0000000000006BCB                 db    0
.eh_frame:0000000000006BCC                 db    0
.eh_frame:0000000000006BCD                 db    0
.eh_frame:0000000000006BCE                 db    0
.eh_frame:0000000000006BCF                 db    0
.eh_frame:0000000000006BD0                 db  3Ch ; <
.eh_frame:0000000000006BD1                 db    0
.eh_frame:0000000000006BD2                 db    0
.eh_frame:0000000000006BD3                 db    0
.eh_frame:0000000000006BD4                 db  0Ch
.eh_frame:0000000000006BD5                 db  0Ah
.eh_frame:0000000000006BD6                 db    0
.eh_frame:0000000000006BD7                 db    0
.eh_frame:0000000000006BD8                 db 0B8h
.eh_frame:0000000000006BD9                 db 0E3h
.eh_frame:0000000000006BDA                 db 0FFh
.eh_frame:0000000000006BDB                 db 0FFh
.eh_frame:0000000000006BDC                 db  83h
.eh_frame:0000000000006BDD                 db    0
.eh_frame:0000000000006BDE                 db    0
.eh_frame:0000000000006BDF                 db    0
.eh_frame:0000000000006BE0                 db    0
.eh_frame:0000000000006BE1                 db  42h ; B
.eh_frame:0000000000006BE2                 db  0Eh
.eh_frame:0000000000006BE3                 db  10h
.eh_frame:0000000000006BE4                 db  8Dh
.eh_frame:0000000000006BE5                 db    2
.eh_frame:0000000000006BE6                 db  42h ; B
.eh_frame:0000000000006BE7                 db  0Eh
.eh_frame:0000000000006BE8                 db  18h
.eh_frame:0000000000006BE9                 db  8Ch
.eh_frame:0000000000006BEA                 db    3
.eh_frame:0000000000006BEB                 db  44h ; D
.eh_frame:0000000000006BEC                 db  0Eh
.eh_frame:0000000000006BED                 db  20h
.eh_frame:0000000000006BEE                 db  86h
.eh_frame:0000000000006BEF                 db    4
.eh_frame:0000000000006BF0                 db  41h ; A
.eh_frame:0000000000006BF1                 db  0Eh
.eh_frame:0000000000006BF2                 db  28h ; (
.eh_frame:0000000000006BF3                 db  83h
.eh_frame:0000000000006BF4                 db    5
.eh_frame:0000000000006BF5                 db  4Ah ; J
.eh_frame:0000000000006BF6                 db  0Eh
.eh_frame:0000000000006BF7                 db  40h ; @
.eh_frame:0000000000006BF8                 db    2
.eh_frame:0000000000006BF9                 db  64h ; d
.eh_frame:0000000000006BFA                 db  0Ah
.eh_frame:0000000000006BFB                 db  0Eh
.eh_frame:0000000000006BFC                 db  28h ; (
.eh_frame:0000000000006BFD                 db  41h ; A
.eh_frame:0000000000006BFE                 db  0Eh
.eh_frame:0000000000006BFF                 db  20h
.eh_frame:0000000000006C00                 db  41h ; A
.eh_frame:0000000000006C01                 db  0Eh
.eh_frame:0000000000006C02                 db  18h
.eh_frame:0000000000006C03                 db  42h ; B
.eh_frame:0000000000006C04                 db  0Eh
.eh_frame:0000000000006C05                 db  10h
.eh_frame:0000000000006C06                 db  42h ; B
.eh_frame:0000000000006C07                 db  0Eh
.eh_frame:0000000000006C08                 db    8
.eh_frame:0000000000006C09                 db  41h ; A
.eh_frame:0000000000006C0A                 db  0Bh
.eh_frame:0000000000006C0B                 db    0
.eh_frame:0000000000006C0C                 db    0
.eh_frame:0000000000006C0D                 db    0
.eh_frame:0000000000006C0E                 db    0
.eh_frame:0000000000006C0F                 db    0
.eh_frame:0000000000006C10                 db  4Ch ; L
.eh_frame:0000000000006C11                 db    0
.eh_frame:0000000000006C12                 db    0
.eh_frame:0000000000006C13                 db    0
.eh_frame:0000000000006C14                 db  4Ch ; L
.eh_frame:0000000000006C15                 db  0Ah
.eh_frame:0000000000006C16                 db    0
.eh_frame:0000000000006C17                 db    0
.eh_frame:0000000000006C18                 db    8
.eh_frame:0000000000006C19                 db 0E4h
.eh_frame:0000000000006C1A                 db 0FFh
.eh_frame:0000000000006C1B                 db 0FFh
.eh_frame:0000000000006C1C                 db  7Dh ; }
.eh_frame:0000000000006C1D                 db    0
.eh_frame:0000000000006C1E                 db    0
.eh_frame:0000000000006C1F                 db    0
.eh_frame:0000000000006C20                 db    0
.eh_frame:0000000000006C21                 db  42h ; B
.eh_frame:0000000000006C22                 db  0Eh
.eh_frame:0000000000006C23                 db  10h
.eh_frame:0000000000006C24                 db  8Ch
.eh_frame:0000000000006C25                 db    2
.eh_frame:0000000000006C26                 db  41h ; A
.eh_frame:0000000000006C27                 db  0Eh
.eh_frame:0000000000006C28                 db  18h
.eh_frame:0000000000006C29                 db  86h
.eh_frame:0000000000006C2A                 db    3
.eh_frame:0000000000006C2B                 db  44h ; D
.eh_frame:0000000000006C2C                 db  0Eh
.eh_frame:0000000000006C2D                 db  20h
.eh_frame:0000000000006C2E                 db  83h
.eh_frame:0000000000006C2F                 db    4
.eh_frame:0000000000006C30                 db  69h ; i
.eh_frame:0000000000006C31                 db  0Ah
.eh_frame:0000000000006C32                 db  0Eh
.eh_frame:0000000000006C33                 db  18h
.eh_frame:0000000000006C34                 db  41h ; A
.eh_frame:0000000000006C35                 db  0Eh
.eh_frame:0000000000006C36                 db  10h
.eh_frame:0000000000006C37                 db  42h ; B
.eh_frame:0000000000006C38                 db  0Eh
.eh_frame:0000000000006C39                 db    8
.eh_frame:0000000000006C3A                 db  45h ; E
.eh_frame:0000000000006C3B                 db  0Bh
.eh_frame:0000000000006C3C                 db  55h ; U
.eh_frame:0000000000006C3D                 db  0Ah
.eh_frame:0000000000006C3E                 db  0Eh
.eh_frame:0000000000006C3F                 db  18h
.eh_frame:0000000000006C40                 db  41h ; A
.eh_frame:0000000000006C41                 db  0Eh
.eh_frame:0000000000006C42                 db  10h
.eh_frame:0000000000006C43                 db  42h ; B
.eh_frame:0000000000006C44                 db  0Eh
.eh_frame:0000000000006C45                 db    8
.eh_frame:0000000000006C46                 db  48h ; H
.eh_frame:0000000000006C47                 db  0Bh
.eh_frame:0000000000006C48                 db  41h ; A
.eh_frame:0000000000006C49                 db  0Ah
.eh_frame:0000000000006C4A                 db  0Eh
.eh_frame:0000000000006C4B                 db  18h
.eh_frame:0000000000006C4C                 db  46h ; F
.eh_frame:0000000000006C4D                 db  0Eh
.eh_frame:0000000000006C4E                 db  10h
.eh_frame:0000000000006C4F                 db  42h ; B
.eh_frame:0000000000006C50                 db  0Eh
.eh_frame:0000000000006C51                 db    8
.eh_frame:0000000000006C52                 db  47h ; G
.eh_frame:0000000000006C53                 db  0Bh
.eh_frame:0000000000006C54                 db  49h ; I
.eh_frame:0000000000006C55                 db  0Eh
.eh_frame:0000000000006C56                 db  18h
.eh_frame:0000000000006C57                 db  41h ; A
.eh_frame:0000000000006C58                 db  0Eh
.eh_frame:0000000000006C59                 db  10h
.eh_frame:0000000000006C5A                 db  42h ; B
.eh_frame:0000000000006C5B                 db  0Eh
.eh_frame:0000000000006C5C                 db    8
.eh_frame:0000000000006C5D                 db    0
.eh_frame:0000000000006C5E                 db    0
.eh_frame:0000000000006C5F                 db    0
.eh_frame:0000000000006C60                 db  1Ch
.eh_frame:0000000000006C61                 db    0
.eh_frame:0000000000006C62                 db    0
.eh_frame:0000000000006C63                 db    0
.eh_frame:0000000000006C64                 db  9Ch
.eh_frame:0000000000006C65                 db  0Ah
.eh_frame:0000000000006C66                 db    0
.eh_frame:0000000000006C67                 db    0
.eh_frame:0000000000006C68                 db  38h ; 8
.eh_frame:0000000000006C69                 db 0E4h
.eh_frame:0000000000006C6A                 db 0FFh
.eh_frame:0000000000006C6B                 db 0FFh
.eh_frame:0000000000006C6C                 db  60h ; `
.eh_frame:0000000000006C6D                 db    0
.eh_frame:0000000000006C6E                 db    0
.eh_frame:0000000000006C6F                 db    0
.eh_frame:0000000000006C70                 db    0
.eh_frame:0000000000006C71                 db  44h ; D
.eh_frame:0000000000006C72                 db  0Eh
.eh_frame:0000000000006C73                 db  10h
.eh_frame:0000000000006C74                 db  75h ; u
.eh_frame:0000000000006C75                 db  0Ah
.eh_frame:0000000000006C76                 db  0Eh
.eh_frame:0000000000006C77                 db    8
.eh_frame:0000000000006C78                 db  47h ; G
.eh_frame:0000000000006C79                 db  0Bh
.eh_frame:0000000000006C7A                 db  5Fh ; _
.eh_frame:0000000000006C7B                 db  0Eh
.eh_frame:0000000000006C7C                 db    8
.eh_frame:0000000000006C7D                 db    0
.eh_frame:0000000000006C7E                 db    0
.eh_frame:0000000000006C7F                 db    0
.eh_frame:0000000000006C80                 db  1Ch
.eh_frame:0000000000006C81                 db    0
.eh_frame:0000000000006C82                 db    0
.eh_frame:0000000000006C83                 db    0
.eh_frame:0000000000006C84                 db 0BCh
.eh_frame:0000000000006C85                 db  0Ah
.eh_frame:0000000000006C86                 db    0
.eh_frame:0000000000006C87                 db    0
.eh_frame:0000000000006C88                 db  78h ; x
.eh_frame:0000000000006C89                 db 0E4h
.eh_frame:0000000000006C8A                 db 0FFh
.eh_frame:0000000000006C8B                 db 0FFh
.eh_frame:0000000000006C8C                 db  3Ch ; <
.eh_frame:0000000000006C8D                 db    0
.eh_frame:0000000000006C8E                 db    0
.eh_frame:0000000000006C8F                 db    0
.eh_frame:0000000000006C90                 db    0
.eh_frame:0000000000006C91                 db  44h ; D
.eh_frame:0000000000006C92                 db  0Eh
.eh_frame:0000000000006C93                 db  10h
.eh_frame:0000000000006C94                 db  61h ; a
.eh_frame:0000000000006C95                 db  0Ah
.eh_frame:0000000000006C96                 db  0Eh
.eh_frame:0000000000006C97                 db    8
.eh_frame:0000000000006C98                 db  4Bh ; K
.eh_frame:0000000000006C99                 db  0Bh
.eh_frame:0000000000006C9A                 db  4Bh ; K
.eh_frame:0000000000006C9B                 db  0Eh
.eh_frame:0000000000006C9C                 db    8
.eh_frame:0000000000006C9D                 db    0
.eh_frame:0000000000006C9E                 db    0
.eh_frame:0000000000006C9F                 db    0
.eh_frame:0000000000006CA0                 db  44h ; D
.eh_frame:0000000000006CA1                 db    0
.eh_frame:0000000000006CA2                 db    0
.eh_frame:0000000000006CA3                 db    0
.eh_frame:0000000000006CA4                 db 0DCh
.eh_frame:0000000000006CA5                 db  0Ah
.eh_frame:0000000000006CA6                 db    0
.eh_frame:0000000000006CA7                 db    0
.eh_frame:0000000000006CA8                 db  98h
.eh_frame:0000000000006CA9                 db 0E4h
.eh_frame:0000000000006CAA                 db 0FFh
.eh_frame:0000000000006CAB                 db 0FFh
.eh_frame:0000000000006CAC                 db  65h ; e
.eh_frame:0000000000006CAD                 db    0
.eh_frame:0000000000006CAE                 db    0
.eh_frame:0000000000006CAF                 db    0
.eh_frame:0000000000006CB0                 db    0
.eh_frame:0000000000006CB1                 db  42h ; B
.eh_frame:0000000000006CB2                 db  0Eh
.eh_frame:0000000000006CB3                 db  10h
.eh_frame:0000000000006CB4                 db  8Fh
.eh_frame:0000000000006CB5                 db    2
.eh_frame:0000000000006CB6                 db  42h ; B
.eh_frame:0000000000006CB7                 db  0Eh
.eh_frame:0000000000006CB8                 db  18h
.eh_frame:0000000000006CB9                 db  8Eh
.eh_frame:0000000000006CBA                 db    3
.eh_frame:0000000000006CBB                 db  45h ; E
.eh_frame:0000000000006CBC                 db  0Eh
.eh_frame:0000000000006CBD                 db  20h
.eh_frame:0000000000006CBE                 db  8Dh
.eh_frame:0000000000006CBF                 db    4
.eh_frame:0000000000006CC0                 db  42h ; B
.eh_frame:0000000000006CC1                 db  0Eh
.eh_frame:0000000000006CC2                 db  28h ; (
.eh_frame:0000000000006CC3                 db  8Ch
.eh_frame:0000000000006CC4                 db    5
.eh_frame:0000000000006CC5                 db  48h ; H
.eh_frame:0000000000006CC6                 db  0Eh
.eh_frame:0000000000006CC7                 db  30h ; 0
.eh_frame:0000000000006CC8                 db  86h
.eh_frame:0000000000006CC9                 db    6
.eh_frame:0000000000006CCA                 db  48h ; H
.eh_frame:0000000000006CCB                 db  0Eh
.eh_frame:0000000000006CCC                 db  38h ; 8
.eh_frame:0000000000006CCD                 db  83h
.eh_frame:0000000000006CCE                 db    7
.eh_frame:0000000000006CCF                 db  4Dh ; M
.eh_frame:0000000000006CD0                 db  0Eh
.eh_frame:0000000000006CD1                 db  40h ; @
.eh_frame:0000000000006CD2                 db  72h ; r
.eh_frame:0000000000006CD3                 db  0Eh
.eh_frame:0000000000006CD4                 db  38h ; 8
.eh_frame:0000000000006CD5                 db  41h ; A
.eh_frame:0000000000006CD6                 db  0Eh
.eh_frame:0000000000006CD7                 db  30h ; 0
.eh_frame:0000000000006CD8                 db  41h ; A
.eh_frame:0000000000006CD9                 db  0Eh
.eh_frame:0000000000006CDA                 db  28h ; (
.eh_frame:0000000000006CDB                 db  42h ; B
.eh_frame:0000000000006CDC                 db  0Eh
.eh_frame:0000000000006CDD                 db  20h
.eh_frame:0000000000006CDE                 db  42h ; B
.eh_frame:0000000000006CDF                 db  0Eh
.eh_frame:0000000000006CE0                 db  18h
.eh_frame:0000000000006CE1                 db  42h ; B
.eh_frame:0000000000006CE2                 db  0Eh
.eh_frame:0000000000006CE3                 db  10h
.eh_frame:0000000000006CE4                 db  42h ; B
.eh_frame:0000000000006CE5                 db  0Eh
.eh_frame:0000000000006CE6                 db    8
.eh_frame:0000000000006CE7                 db    0
.eh_frame:0000000000006CE8                 db  14h
.eh_frame:0000000000006CE9                 db    0
.eh_frame:0000000000006CEA                 db    0
.eh_frame:0000000000006CEB                 db    0
.eh_frame:0000000000006CEC                 db  24h ; $
.eh_frame:0000000000006CED                 db  0Bh
.eh_frame:0000000000006CEE                 db    0
.eh_frame:0000000000006CEF                 db    0
.eh_frame:0000000000006CF0                 db 0C0h
.eh_frame:0000000000006CF1                 db 0E4h
.eh_frame:0000000000006CF2                 db 0FFh
.eh_frame:0000000000006CF3                 db 0FFh
.eh_frame:0000000000006CF4                 db    2
.eh_frame:0000000000006CF5                 db    0
.eh_frame:0000000000006CF6                 db    0
.eh_frame:0000000000006CF7                 db    0
.eh_frame:0000000000006CF8                 db    0
.eh_frame:0000000000006CF9                 db    0
.eh_frame:0000000000006CFA                 db    0
.eh_frame:0000000000006CFB                 db    0
.eh_frame:0000000000006CFC                 db    0
.eh_frame:0000000000006CFD                 db    0
.eh_frame:0000000000006CFE                 db    0
.eh_frame:0000000000006CFF                 db    0
.eh_frame:0000000000006D00                 db  10h
.eh_frame:0000000000006D01                 db    0
.eh_frame:0000000000006D02                 db    0
.eh_frame:0000000000006D03                 db    0
.eh_frame:0000000000006D04                 db  3Ch ; <
.eh_frame:0000000000006D05                 db  0Bh
.eh_frame:0000000000006D06                 db    0
.eh_frame:0000000000006D07                 db    0
.eh_frame:0000000000006D08                 db 0B8h
.eh_frame:0000000000006D09                 db 0E4h
.eh_frame:0000000000006D0A                 db 0FFh
.eh_frame:0000000000006D0B                 db 0FFh
.eh_frame:0000000000006D0C                 db  0Eh
.eh_frame:0000000000006D0D                 db    0
.eh_frame:0000000000006D0E                 db    0
.eh_frame:0000000000006D0F                 db    0
.eh_frame:0000000000006D10                 db    0
.eh_frame:0000000000006D11                 db    0
.eh_frame:0000000000006D12                 db    0
.eh_frame:0000000000006D13                 db    0
.eh_frame:0000000000006D14 __FRAME_END__   db    0
.eh_frame:0000000000006D15                 db    0
.eh_frame:0000000000006D16                 db    0
.eh_frame:0000000000006D17                 db    0
.eh_frame:0000000000006D17 _eh_frame       ends
.eh_frame:0000000000006D17
.init_array:0000000000207B30 ; ELF Initialization Function Table
.init_array:0000000000207B30 ; ===========================================================================
.init_array:0000000000207B30
.init_array:0000000000207B30 ; Segment type: Pure data
.init_array:0000000000207B30 ; Segment permissions: Read/Write
.init_array:0000000000207B30 _init_array     segment qword public 'DATA' use64
.init_array:0000000000207B30                 assume cs:_init_array
.init_array:0000000000207B30                 ;org 207B30h
.init_array:0000000000207B30 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000207B30                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000207B30                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000207B30 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000207B30
.fini_array:0000000000207B38 ; ELF Termination Function Table
.fini_array:0000000000207B38 ; ===========================================================================
.fini_array:0000000000207B38
.fini_array:0000000000207B38 ; Segment type: Pure data
.fini_array:0000000000207B38 ; Segment permissions: Read/Write
.fini_array:0000000000207B38 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000207B38                 assume cs:_fini_array
.fini_array:0000000000207B38                 ;org 207B38h
.fini_array:0000000000207B38 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000207B38                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000207B38 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000207B38
.data.rel.ro:0000000000207B40 ; ===========================================================================
.data.rel.ro:0000000000207B40
.data.rel.ro:0000000000207B40 ; Segment type: Pure data
.data.rel.ro:0000000000207B40 ; Segment permissions: Read/Write
.data.rel.ro:0000000000207B40 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000207B40                 assume cs:_data_rel_ro
.data.rel.ro:0000000000207B40                 ;org 207B40h
.data.rel.ro:0000000000207B40 ; struct option longopts
.data.rel.ro:0000000000207B40 longopts        dq offset aSerial       ; name
.data.rel.ro:0000000000207B40                                         ; DATA XREF: main:loc_171F↑o
.data.rel.ro:0000000000207B40                 dd 0                    ; has_arg ; "serial"
.data.rel.ro:0000000000207B40                 db 4 dup(0)
.data.rel.ro:0000000000207B40                 dq 0                    ; flag
.data.rel.ro:0000000000207B40                 dd 73h                  ; val
.data.rel.ro:0000000000207B40                 db 4 dup(0)
.data.rel.ro:0000000000207B60                 dq offset aDelimiters   ; "delimiters"
.data.rel.ro:0000000000207B68                 db    1
.data.rel.ro:0000000000207B69                 db    0
.data.rel.ro:0000000000207B6A                 db    0
.data.rel.ro:0000000000207B6B                 db    0
.data.rel.ro:0000000000207B6C                 db    0
.data.rel.ro:0000000000207B6D                 db    0
.data.rel.ro:0000000000207B6E                 db    0
.data.rel.ro:0000000000207B6F                 db    0
.data.rel.ro:0000000000207B70                 db    0
.data.rel.ro:0000000000207B71                 db    0
.data.rel.ro:0000000000207B72                 db    0
.data.rel.ro:0000000000207B73                 db    0
.data.rel.ro:0000000000207B74                 db    0
.data.rel.ro:0000000000207B75                 db    0
.data.rel.ro:0000000000207B76                 db    0
.data.rel.ro:0000000000207B77                 db    0
.data.rel.ro:0000000000207B78                 db  64h ; d
.data.rel.ro:0000000000207B79                 db    0
.data.rel.ro:0000000000207B7A                 db    0
.data.rel.ro:0000000000207B7B                 db    0
.data.rel.ro:0000000000207B7C                 db    0
.data.rel.ro:0000000000207B7D                 db    0
.data.rel.ro:0000000000207B7E                 db    0
.data.rel.ro:0000000000207B7F                 db    0
.data.rel.ro:0000000000207B80                 dq offset aZeroTerminated ; "zero-terminated"
.data.rel.ro:0000000000207B88                 db    0
.data.rel.ro:0000000000207B89                 db    0
.data.rel.ro:0000000000207B8A                 db    0
.data.rel.ro:0000000000207B8B                 db    0
.data.rel.ro:0000000000207B8C                 db    0
.data.rel.ro:0000000000207B8D                 db    0
.data.rel.ro:0000000000207B8E                 db    0
.data.rel.ro:0000000000207B8F                 db    0
.data.rel.ro:0000000000207B90                 db    0
.data.rel.ro:0000000000207B91                 db    0
.data.rel.ro:0000000000207B92                 db    0
.data.rel.ro:0000000000207B93                 db    0
.data.rel.ro:0000000000207B94                 db    0
.data.rel.ro:0000000000207B95                 db    0
.data.rel.ro:0000000000207B96                 db    0
.data.rel.ro:0000000000207B97                 db    0
.data.rel.ro:0000000000207B98                 db  7Ah ; z
.data.rel.ro:0000000000207B99                 db    0
.data.rel.ro:0000000000207B9A                 db    0
.data.rel.ro:0000000000207B9B                 db    0
.data.rel.ro:0000000000207B9C                 db    0
.data.rel.ro:0000000000207B9D                 db    0
.data.rel.ro:0000000000207B9E                 db    0
.data.rel.ro:0000000000207B9F                 db    0
.data.rel.ro:0000000000207BA0                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000207BA8                 db    0
.data.rel.ro:0000000000207BA9                 db    0
.data.rel.ro:0000000000207BAA                 db    0
.data.rel.ro:0000000000207BAB                 db    0
.data.rel.ro:0000000000207BAC                 db    0
.data.rel.ro:0000000000207BAD                 db    0
.data.rel.ro:0000000000207BAE                 db    0
.data.rel.ro:0000000000207BAF                 db    0
.data.rel.ro:0000000000207BB0                 db    0
.data.rel.ro:0000000000207BB1                 db    0
.data.rel.ro:0000000000207BB2                 db    0
.data.rel.ro:0000000000207BB3                 db    0
.data.rel.ro:0000000000207BB4                 db    0
.data.rel.ro:0000000000207BB5                 db    0
.data.rel.ro:0000000000207BB6                 db    0
.data.rel.ro:0000000000207BB7                 db    0
.data.rel.ro:0000000000207BB8                 db  7Eh ; ~
.data.rel.ro:0000000000207BB9                 db 0FFh
.data.rel.ro:0000000000207BBA                 db 0FFh
.data.rel.ro:0000000000207BBB                 db 0FFh
.data.rel.ro:0000000000207BBC                 db    0
.data.rel.ro:0000000000207BBD                 db    0
.data.rel.ro:0000000000207BBE                 db    0
.data.rel.ro:0000000000207BBF                 db    0
.data.rel.ro:0000000000207BC0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000207BC8                 db    0
.data.rel.ro:0000000000207BC9                 db    0
.data.rel.ro:0000000000207BCA                 db    0
.data.rel.ro:0000000000207BCB                 db    0
.data.rel.ro:0000000000207BCC                 db    0
.data.rel.ro:0000000000207BCD                 db    0
.data.rel.ro:0000000000207BCE                 db    0
.data.rel.ro:0000000000207BCF                 db    0
.data.rel.ro:0000000000207BD0                 db    0
.data.rel.ro:0000000000207BD1                 db    0
.data.rel.ro:0000000000207BD2                 db    0
.data.rel.ro:0000000000207BD3                 db    0
.data.rel.ro:0000000000207BD4                 db    0
.data.rel.ro:0000000000207BD5                 db    0
.data.rel.ro:0000000000207BD6                 db    0
.data.rel.ro:0000000000207BD7                 db    0
.data.rel.ro:0000000000207BD8                 db  7Dh ; }
.data.rel.ro:0000000000207BD9                 db 0FFh
.data.rel.ro:0000000000207BDA                 db 0FFh
.data.rel.ro:0000000000207BDB                 db 0FFh
.data.rel.ro:0000000000207BDC                 db    0
.data.rel.ro:0000000000207BDD                 db    0
.data.rel.ro:0000000000207BDE                 db    0
.data.rel.ro:0000000000207BDF                 db    0
.data.rel.ro:0000000000207BE0                 db    0
.data.rel.ro:0000000000207BE1                 db    0
.data.rel.ro:0000000000207BE2                 db    0
.data.rel.ro:0000000000207BE3                 db    0
.data.rel.ro:0000000000207BE4                 db    0
.data.rel.ro:0000000000207BE5                 db    0
.data.rel.ro:0000000000207BE6                 db    0
.data.rel.ro:0000000000207BE7                 db    0
.data.rel.ro:0000000000207BE8                 db    0
.data.rel.ro:0000000000207BE9                 db    0
.data.rel.ro:0000000000207BEA                 db    0
.data.rel.ro:0000000000207BEB                 db    0
.data.rel.ro:0000000000207BEC                 db    0
.data.rel.ro:0000000000207BED                 db    0
.data.rel.ro:0000000000207BEE                 db    0
.data.rel.ro:0000000000207BEF                 db    0
.data.rel.ro:0000000000207BF0                 db    0
.data.rel.ro:0000000000207BF1                 db    0
.data.rel.ro:0000000000207BF2                 db    0
.data.rel.ro:0000000000207BF3                 db    0
.data.rel.ro:0000000000207BF4                 db    0
.data.rel.ro:0000000000207BF5                 db    0
.data.rel.ro:0000000000207BF6                 db    0
.data.rel.ro:0000000000207BF7                 db    0
.data.rel.ro:0000000000207BF8                 db    0
.data.rel.ro:0000000000207BF9                 db    0
.data.rel.ro:0000000000207BFA                 db    0
.data.rel.ro:0000000000207BFB                 db    0
.data.rel.ro:0000000000207BFC                 db    0
.data.rel.ro:0000000000207BFD                 db    0
.data.rel.ro:0000000000207BFE                 db    0
.data.rel.ro:0000000000207BFF                 db    0
.data.rel.ro:0000000000207C00                 public quoting_style_args
.data.rel.ro:0000000000207C00 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000207C08                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000207C10                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000207C18                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000207C20                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000207C28                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000207C30                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000207C38                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000207C40                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000207C48                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000207C50                 db    0
.data.rel.ro:0000000000207C51                 db    0
.data.rel.ro:0000000000207C52                 db    0
.data.rel.ro:0000000000207C53                 db    0
.data.rel.ro:0000000000207C54                 db    0
.data.rel.ro:0000000000207C55                 db    0
.data.rel.ro:0000000000207C56                 db    0
.data.rel.ro:0000000000207C57                 db    0
.data.rel.ro:0000000000207C57 _data_rel_ro    ends
.data.rel.ro:0000000000207C57
LOAD:0000000000207C58 ; ELF Dynamic Information
LOAD:0000000000207C58 ; ===========================================================================
LOAD:0000000000207C58
LOAD:0000000000207C58 ; Segment type: Pure data
LOAD:0000000000207C58 ; Segment permissions: Read/Write
LOAD:0000000000207C58 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207C58                 assume cs:LOAD
LOAD:0000000000207C58                 ;org 207C58h
LOAD:0000000000207C58 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000207C58                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000207C58                                         ; DT_NEEDED libc.so.6
LOAD:0000000000207C68                 Elf64_Dyn <0Ch, 1378h>  ; DT_INIT
LOAD:0000000000207C78                 Elf64_Dyn <0Dh, 51D0h>  ; DT_FINI
LOAD:0000000000207C88                 Elf64_Dyn <19h, 207B30h> ; DT_INIT_ARRAY
LOAD:0000000000207C98                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000207CA8                 Elf64_Dyn <1Ah, 207B38h> ; DT_FINI_ARRAY
LOAD:0000000000207CB8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000207CC8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000207CD8                 Elf64_Dyn <5, 880h>     ; DT_STRTAB
LOAD:0000000000207CE8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000207CF8                 Elf64_Dyn <0Ah, 2CEh>   ; DT_STRSZ
LOAD:0000000000207D08                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000207D18                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000207D28                 Elf64_Dyn <3, 207E48h>  ; DT_PLTGOT
LOAD:0000000000207D38                 Elf64_Dyn <2, 438h>     ; DT_PLTRELSZ
LOAD:0000000000207D48                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000207D58                 Elf64_Dyn <17h, 0F40h>  ; DT_JMPREL
LOAD:0000000000207D68                 Elf64_Dyn <7, 0C28h>    ; DT_RELA
LOAD:0000000000207D78                 Elf64_Dyn <8, 318h>     ; DT_RELASZ
LOAD:0000000000207D88                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000207D98                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000207DA8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000207DB8                 Elf64_Dyn <6FFFFFFEh, 0BC8h> ; DT_VERNEED
LOAD:0000000000207DC8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000207DD8                 Elf64_Dyn <6FFFFFF0h, 0B4Eh> ; DT_VERSYM
LOAD:0000000000207DE8                 Elf64_Dyn <6FFFFFF9h, 15h> ; DT_RELACOUNT
LOAD:0000000000207DF8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000207E08                 db    0
LOAD:0000000000207E09                 db    0
LOAD:0000000000207E0A                 db    0
LOAD:0000000000207E0B                 db    0
LOAD:0000000000207E0C                 db    0
LOAD:0000000000207E0D                 db    0
LOAD:0000000000207E0E                 db    0
LOAD:0000000000207E0F                 db    0
LOAD:0000000000207E10                 db    0
LOAD:0000000000207E11                 db    0
LOAD:0000000000207E12                 db    0
LOAD:0000000000207E13                 db    0
LOAD:0000000000207E14                 db    0
LOAD:0000000000207E15                 db    0
LOAD:0000000000207E16                 db    0
LOAD:0000000000207E17                 db    0
LOAD:0000000000207E18                 db    0
LOAD:0000000000207E19                 db    0
LOAD:0000000000207E1A                 db    0
LOAD:0000000000207E1B                 db    0
LOAD:0000000000207E1C                 db    0
LOAD:0000000000207E1D                 db    0
LOAD:0000000000207E1E                 db    0
LOAD:0000000000207E1F                 db    0
LOAD:0000000000207E20                 db    0
LOAD:0000000000207E21                 db    0
LOAD:0000000000207E22                 db    0
LOAD:0000000000207E23                 db    0
LOAD:0000000000207E24                 db    0
LOAD:0000000000207E25                 db    0
LOAD:0000000000207E26                 db    0
LOAD:0000000000207E27                 db    0
LOAD:0000000000207E28                 db    0
LOAD:0000000000207E29                 db    0
LOAD:0000000000207E2A                 db    0
LOAD:0000000000207E2B                 db    0
LOAD:0000000000207E2C                 db    0
LOAD:0000000000207E2D                 db    0
LOAD:0000000000207E2E                 db    0
LOAD:0000000000207E2F                 db    0
LOAD:0000000000207E30                 db    0
LOAD:0000000000207E31                 db    0
LOAD:0000000000207E32                 db    0
LOAD:0000000000207E33                 db    0
LOAD:0000000000207E34                 db    0
LOAD:0000000000207E35                 db    0
LOAD:0000000000207E36                 db    0
LOAD:0000000000207E37                 db    0
LOAD:0000000000207E38                 db    0
LOAD:0000000000207E39                 db    0
LOAD:0000000000207E3A                 db    0
LOAD:0000000000207E3B                 db    0
LOAD:0000000000207E3C                 db    0
LOAD:0000000000207E3D                 db    0
LOAD:0000000000207E3E                 db    0
LOAD:0000000000207E3F                 db    0
LOAD:0000000000207E40                 db    0
LOAD:0000000000207E41                 db    0
LOAD:0000000000207E42                 db    0
LOAD:0000000000207E43                 db    0
LOAD:0000000000207E44                 db    0
LOAD:0000000000207E45                 db    0
LOAD:0000000000207E46                 db    0
LOAD:0000000000207E47                 db    0
LOAD:0000000000207E47 LOAD            ends
LOAD:0000000000207E47
.got:0000000000207E48 ; ===========================================================================
.got:0000000000207E48
.got:0000000000207E48 ; Segment type: Pure data
.got:0000000000207E48 ; Segment permissions: Read/Write
.got:0000000000207E48 _got            segment qword public 'DATA' use64
.got:0000000000207E48                 assume cs:_got
.got:0000000000207E48                 ;org 207E48h
.got:0000000000207E48 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000207E50 qword_207E50    dq 0                    ; DATA XREF: sub_1390↑r
.got:0000000000207E58 qword_207E58    dq 0                    ; DATA XREF: sub_1390+6↑r
.got:0000000000207E60 __uflow_ptr     dq offset __uflow       ; DATA XREF: ___uflow↑r
.got:0000000000207E68 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000207E70 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000207E78 __errno_location_ptr dq offset __errno_location
.got:0000000000207E78                                         ; DATA XREF: ___errno_location↑r
.got:0000000000207E80 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000207E88 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000207E90 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000207E98 clearerr_unlocked_ptr dq offset clearerr_unlocked
.got:0000000000207E98                                         ; DATA XREF: _clearerr_unlocked↑r
.got:0000000000207EA0 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000207EA8 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000207EB0 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000207EB0                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000207EB8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000207EC0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000207EC0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000207EC8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000207ED0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000207ED0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000207ED8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000207EE0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000207EE8 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000207EF0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000207EF8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000207F00 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000207F08 posix_fadvise_ptr dq offset posix_fadvise
.got:0000000000207F08                                         ; DATA XREF: _posix_fadvise↑r
.got:0000000000207F10 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000207F18 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000207F18                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000207F20 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000207F28 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000207F30 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000207F38 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000207F40 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000207F48 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000207F50 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000207F58 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:0000000000207F58                                         ; DATA XREF: _fwrite_unlocked↑r
.got:0000000000207F60 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000207F68 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000207F70 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000207F78 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000207F80 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000207F88 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000207F90 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000207F98 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000207FA0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000207FA8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000207FA8                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000207FB0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000207FB8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000207FC0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000207FC0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000207FC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000207FC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000207FD0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000207FD0                                         ; DATA XREF: start+24↑r
.got:0000000000207FD8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000207FD8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000207FE0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000207FE0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000207FE8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000207FE8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000207FE8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000207FE8 _got            ends
.got:0000000000207FE8
LOAD:0000000000207FF0 ; ===========================================================================
LOAD:0000000000207FF0
LOAD:0000000000207FF0 ; Segment type: Pure data
LOAD:0000000000207FF0 ; Segment permissions: Read/Write
LOAD:0000000000207FF0 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207FF0                 assume cs:LOAD
LOAD:0000000000207FF0                 ;org 207FF0h
LOAD:0000000000207FF0                 align 20h
LOAD:0000000000207FF0 LOAD            ends
LOAD:0000000000207FF0
.data:0000000000208000 ; ===========================================================================
.data:0000000000208000
.data:0000000000208000 ; Segment type: Pure data
.data:0000000000208000 ; Segment permissions: Read/Write
.data:0000000000208000 _data           segment align_32 public 'DATA' use64
.data:0000000000208000                 assume cs:_data
.data:0000000000208000                 ;org 208000h
.data:0000000000208000                 public __data_start ; weak
.data:0000000000208000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000208000                                         ; data_start
.data:0000000000208001                 db    0
.data:0000000000208002                 db    0
.data:0000000000208003                 db    0
.data:0000000000208004                 db    0
.data:0000000000208005                 db    0
.data:0000000000208006                 db    0
.data:0000000000208007                 db    0
.data:0000000000208008                 public __dso_handle
.data:0000000000208008 ; void *_dso_handle
.data:0000000000208008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000208008                                         ; atexit↑r ...
.data:0000000000208010 line_delim      db 0Ah                  ; DATA XREF: main+AC↑w
.data:0000000000208010                                         ; paste_parallel:loc_1C82↑r ...
.data:0000000000208011                 align 8
.data:0000000000208018                 public Version
.data:0000000000208018 Version         dq offset a831          ; DATA XREF: main+CE↑r
.data:0000000000208018                                         ; "8.31"
.data:0000000000208020                 public exit_failure
.data:0000000000208020 ; int exit_failure
.data:0000000000208020 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2822↑r
.data:0000000000208020                                         ; xalloc_die+17↑r
.data:0000000000208024                 align 20h
.data:0000000000208040                 public quote_quoting_options
.data:0000000000208040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000208040                                         ; quote_mem↑o ...
.data:0000000000208041                 db    0
.data:0000000000208042                 db    0
.data:0000000000208043                 db    0
.data:0000000000208044                 db    0
.data:0000000000208045                 db    0
.data:0000000000208046                 db    0
.data:0000000000208047                 db    0
.data:0000000000208048                 db    0
.data:0000000000208049                 db    0
.data:000000000020804A                 db    0
.data:000000000020804B                 db    0
.data:000000000020804C                 db    0
.data:000000000020804D                 db    0
.data:000000000020804E                 db    0
.data:000000000020804F                 db    0
.data:0000000000208050                 db    0
.data:0000000000208051                 db    0
.data:0000000000208052                 db    0
.data:0000000000208053                 db    0
.data:0000000000208054                 db    0
.data:0000000000208055                 db    0
.data:0000000000208056                 db    0
.data:0000000000208057                 db    0
.data:0000000000208058                 db    0
.data:0000000000208059                 db    0
.data:000000000020805A                 db    0
.data:000000000020805B                 db    0
.data:000000000020805C                 db    0
.data:000000000020805D                 db    0
.data:000000000020805E                 db    0
.data:000000000020805F                 db    0
.data:0000000000208060                 db    0
.data:0000000000208061                 db    0
.data:0000000000208062                 db    0
.data:0000000000208063                 db    0
.data:0000000000208064                 db    0
.data:0000000000208065                 db    0
.data:0000000000208066                 db    0
.data:0000000000208067                 db    0
.data:0000000000208068                 db    0
.data:0000000000208069                 db    0
.data:000000000020806A                 db    0
.data:000000000020806B                 db    0
.data:000000000020806C                 db    0
.data:000000000020806D                 db    0
.data:000000000020806E                 db    0
.data:000000000020806F                 db    0
.data:0000000000208070                 db    0
.data:0000000000208071                 db    0
.data:0000000000208072                 db    0
.data:0000000000208073                 db    0
.data:0000000000208074                 db    0
.data:0000000000208075                 db    0
.data:0000000000208076                 db    0
.data:0000000000208077                 db    0
.data:0000000000208078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000208078                                         ; quotearg_n_options:loc_3CDD↑r ...
.data:000000000020807C                 align 20h
.data:0000000000208080 ; void *slotvec
.data:0000000000208080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000208080                                         ; quotearg_n_options+76↑w ...
.data:0000000000208088                 align 10h
.data:0000000000208090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000208090                                         ; quotearg_n_options+187↑r ...
.data:0000000000208098 off_208098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000208098 _data           ends
.data:0000000000208098
.bss:00000000002080A0 ; ===========================================================================
.bss:00000000002080A0
.bss:00000000002080A0 ; Segment type: Uninitialized
.bss:00000000002080A0 ; Segment permissions: Read/Write
.bss:00000000002080A0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002080A0                 assume cs:_bss
.bss:00000000002080A0                 ;org 2080A0h
.bss:00000000002080A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002080A0                 public __bss_start ; weak
.bss:00000000002080A0 __bss_start     dq ?                    ; DATA XREF: LOAD:00000000000007C0↑o
.bss:00000000002080A0                                         ; LOAD:0000000000000820↑o ...
.bss:00000000002080A0                                         ; Alternative name is '__TMC_END__'
.bss:00000000002080A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:00000000002080A0                                         ; _edata
.bss:00000000002080A0                                         ; Copy of shared data
.bss:00000000002080A8                 public stdout@@GLIBC_2_2_5
.bss:00000000002080A8 ; FILE *stdout
.bss:00000000002080A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007A8↑o
.bss:00000000002080A8                                         ; main+C7↑r ...
.bss:00000000002080A8                                         ; Alternative name is 'stdout'
.bss:00000000002080A8                                         ; Copy of shared data
.bss:00000000002080B0                 public stdin@@GLIBC_2_2_5
.bss:00000000002080B0 ; _IO_FILE *stdin
.bss:00000000002080B0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:00000000000007D8↑o
.bss:00000000002080B0                                         ; main:loc_1942↑r ...
.bss:00000000002080B0                                         ; Alternative name is 'stdin'
.bss:00000000002080B0                                         ; Copy of shared data
.bss:00000000002080B8                 public optind@@GLIBC_2_2_5
.bss:00000000002080B8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000850↑o
.bss:00000000002080B8                                         ; main:loc_17DC↑r ...
.bss:00000000002080B8                                         ; Alternative name is 'optind'
.bss:00000000002080B8                                         ; Copy of shared data
.bss:00000000002080BC                 align 20h
.bss:00000000002080C0                 public optarg@@GLIBC_2_2_5
.bss:00000000002080C0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000868↑o
.bss:00000000002080C0                                         ; main:loc_17B8↑r
.bss:00000000002080C0                                         ; Alternative name is 'optarg'
.bss:00000000002080C0                                         ; Copy of shared data
.bss:00000000002080C8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002080C8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002080C8                                         ; DATA XREF: LOAD:00000000000007F0↑o
.bss:00000000002080C8                                         ; LOAD:0000000000000808↑o ...
.bss:00000000002080C8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002080C8                                         ; Copy of shared data
.bss:00000000002080D0                 align 20h
.bss:00000000002080E0                 public stderr@@GLIBC_2_2_5
.bss:00000000002080E0 ; FILE *stderr
.bss:00000000002080E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000838↑o
.bss:00000000002080E0                                         ; usage+3D↑r ...
.bss:00000000002080E0                                         ; Alternative name is 'stderr'
.bss:00000000002080E0                                         ; Copy of shared data
.bss:00000000002080E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002080E8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002080E9                 align 10h
.bss:00000000002080F0 delim_end       dq ?                    ; DATA XREF: main+1DC↑w
.bss:00000000002080F0                                         ; main+238↑w ...
.bss:00000000002080F8 ; void *delims
.bss:00000000002080F8 delims          dq ?                    ; DATA XREF: main+152↑w
.bss:00000000002080F8                                         ; main+205↑r ...
.bss:0000000000208100 serial_merge    db ?                    ; DATA XREF: main+68↑w
.bss:0000000000208100                                         ; main:loc_17D0↑w ...
.bss:0000000000208101 have_read_stdin db ?                    ; DATA XREF: main+61↑w
.bss:0000000000208101                                         ; main+213↑r ...
.bss:0000000000208102                 align 8
.bss:0000000000208108 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:0000000000208108                                         ; close_stdout+1B↑r
.bss:0000000000208109                 align 10h
.bss:0000000000208110 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:0000000000208110                                         ; close_stdout+56↑r
.bss:0000000000208118                 public program_name
.bss:0000000000208118 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:0000000000208118                                         ; set_program_name:loc_28FD↑w
.bss:0000000000208120 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000208120                                         ; quotearg_free+46↑o ...
.bss:0000000000208121                 db    ? ;
.bss:0000000000208122                 db    ? ;
.bss:0000000000208123                 db    ? ;
.bss:0000000000208124                 db    ? ;
.bss:0000000000208125                 db    ? ;
.bss:0000000000208126                 db    ? ;
.bss:0000000000208127                 db    ? ;
.bss:0000000000208128                 db    ? ;
.bss:0000000000208129                 db    ? ;
.bss:000000000020812A                 db    ? ;
.bss:000000000020812B                 db    ? ;
.bss:000000000020812C                 db    ? ;
.bss:000000000020812D                 db    ? ;
.bss:000000000020812E                 db    ? ;
.bss:000000000020812F                 db    ? ;
.bss:0000000000208130                 db    ? ;
.bss:0000000000208131                 db    ? ;
.bss:0000000000208132                 db    ? ;
.bss:0000000000208133                 db    ? ;
.bss:0000000000208134                 db    ? ;
.bss:0000000000208135                 db    ? ;
.bss:0000000000208136                 db    ? ;
.bss:0000000000208137                 db    ? ;
.bss:0000000000208138                 db    ? ;
.bss:0000000000208139                 db    ? ;
.bss:000000000020813A                 db    ? ;
.bss:000000000020813B                 db    ? ;
.bss:000000000020813C                 db    ? ;
.bss:000000000020813D                 db    ? ;
.bss:000000000020813E                 db    ? ;
.bss:000000000020813F                 db    ? ;
.bss:0000000000208140                 db    ? ;
.bss:0000000000208141                 db    ? ;
.bss:0000000000208142                 db    ? ;
.bss:0000000000208143                 db    ? ;
.bss:0000000000208144                 db    ? ;
.bss:0000000000208145                 db    ? ;
.bss:0000000000208146                 db    ? ;
.bss:0000000000208147                 db    ? ;
.bss:0000000000208148                 db    ? ;
.bss:0000000000208149                 db    ? ;
.bss:000000000020814A                 db    ? ;
.bss:000000000020814B                 db    ? ;
.bss:000000000020814C                 db    ? ;
.bss:000000000020814D                 db    ? ;
.bss:000000000020814E                 db    ? ;
.bss:000000000020814F                 db    ? ;
.bss:0000000000208150                 db    ? ;
.bss:0000000000208151                 db    ? ;
.bss:0000000000208152                 db    ? ;
.bss:0000000000208153                 db    ? ;
.bss:0000000000208154                 db    ? ;
.bss:0000000000208155                 db    ? ;
.bss:0000000000208156                 db    ? ;
.bss:0000000000208157                 db    ? ;
.bss:0000000000208158                 db    ? ;
.bss:0000000000208159                 db    ? ;
.bss:000000000020815A                 db    ? ;
.bss:000000000020815B                 db    ? ;
.bss:000000000020815C                 db    ? ;
.bss:000000000020815D                 db    ? ;
.bss:000000000020815E                 db    ? ;
.bss:000000000020815F                 db    ? ;
.bss:0000000000208160                 db    ? ;
.bss:0000000000208161                 db    ? ;
.bss:0000000000208162                 db    ? ;
.bss:0000000000208163                 db    ? ;
.bss:0000000000208164                 db    ? ;
.bss:0000000000208165                 db    ? ;
.bss:0000000000208166                 db    ? ;
.bss:0000000000208167                 db    ? ;
.bss:0000000000208168                 db    ? ;
.bss:0000000000208169                 db    ? ;
.bss:000000000020816A                 db    ? ;
.bss:000000000020816B                 db    ? ;
.bss:000000000020816C                 db    ? ;
.bss:000000000020816D                 db    ? ;
.bss:000000000020816E                 db    ? ;
.bss:000000000020816F                 db    ? ;
.bss:0000000000208170                 db    ? ;
.bss:0000000000208171                 db    ? ;
.bss:0000000000208172                 db    ? ;
.bss:0000000000208173                 db    ? ;
.bss:0000000000208174                 db    ? ;
.bss:0000000000208175                 db    ? ;
.bss:0000000000208176                 db    ? ;
.bss:0000000000208177                 db    ? ;
.bss:0000000000208178                 db    ? ;
.bss:0000000000208179                 db    ? ;
.bss:000000000020817A                 db    ? ;
.bss:000000000020817B                 db    ? ;
.bss:000000000020817C                 db    ? ;
.bss:000000000020817D                 db    ? ;
.bss:000000000020817E                 db    ? ;
.bss:000000000020817F                 db    ? ;
.bss:0000000000208180                 db    ? ;
.bss:0000000000208181                 db    ? ;
.bss:0000000000208182                 db    ? ;
.bss:0000000000208183                 db    ? ;
.bss:0000000000208184                 db    ? ;
.bss:0000000000208185                 db    ? ;
.bss:0000000000208186                 db    ? ;
.bss:0000000000208187                 db    ? ;
.bss:0000000000208188                 db    ? ;
.bss:0000000000208189                 db    ? ;
.bss:000000000020818A                 db    ? ;
.bss:000000000020818B                 db    ? ;
.bss:000000000020818C                 db    ? ;
.bss:000000000020818D                 db    ? ;
.bss:000000000020818E                 db    ? ;
.bss:000000000020818F                 db    ? ;
.bss:0000000000208190                 db    ? ;
.bss:0000000000208191                 db    ? ;
.bss:0000000000208192                 db    ? ;
.bss:0000000000208193                 db    ? ;
.bss:0000000000208194                 db    ? ;
.bss:0000000000208195                 db    ? ;
.bss:0000000000208196                 db    ? ;
.bss:0000000000208197                 db    ? ;
.bss:0000000000208198                 db    ? ;
.bss:0000000000208199                 db    ? ;
.bss:000000000020819A                 db    ? ;
.bss:000000000020819B                 db    ? ;
.bss:000000000020819C                 db    ? ;
.bss:000000000020819D                 db    ? ;
.bss:000000000020819E                 db    ? ;
.bss:000000000020819F                 db    ? ;
.bss:00000000002081A0                 db    ? ;
.bss:00000000002081A1                 db    ? ;
.bss:00000000002081A2                 db    ? ;
.bss:00000000002081A3                 db    ? ;
.bss:00000000002081A4                 db    ? ;
.bss:00000000002081A5                 db    ? ;
.bss:00000000002081A6                 db    ? ;
.bss:00000000002081A7                 db    ? ;
.bss:00000000002081A8                 db    ? ;
.bss:00000000002081A9                 db    ? ;
.bss:00000000002081AA                 db    ? ;
.bss:00000000002081AB                 db    ? ;
.bss:00000000002081AC                 db    ? ;
.bss:00000000002081AD                 db    ? ;
.bss:00000000002081AE                 db    ? ;
.bss:00000000002081AF                 db    ? ;
.bss:00000000002081B0                 db    ? ;
.bss:00000000002081B1                 db    ? ;
.bss:00000000002081B2                 db    ? ;
.bss:00000000002081B3                 db    ? ;
.bss:00000000002081B4                 db    ? ;
.bss:00000000002081B5                 db    ? ;
.bss:00000000002081B6                 db    ? ;
.bss:00000000002081B7                 db    ? ;
.bss:00000000002081B8                 db    ? ;
.bss:00000000002081B9                 db    ? ;
.bss:00000000002081BA                 db    ? ;
.bss:00000000002081BB                 db    ? ;
.bss:00000000002081BC                 db    ? ;
.bss:00000000002081BD                 db    ? ;
.bss:00000000002081BE                 db    ? ;
.bss:00000000002081BF                 db    ? ;
.bss:00000000002081C0                 db    ? ;
.bss:00000000002081C1                 db    ? ;
.bss:00000000002081C2                 db    ? ;
.bss:00000000002081C3                 db    ? ;
.bss:00000000002081C4                 db    ? ;
.bss:00000000002081C5                 db    ? ;
.bss:00000000002081C6                 db    ? ;
.bss:00000000002081C7                 db    ? ;
.bss:00000000002081C8                 db    ? ;
.bss:00000000002081C9                 db    ? ;
.bss:00000000002081CA                 db    ? ;
.bss:00000000002081CB                 db    ? ;
.bss:00000000002081CC                 db    ? ;
.bss:00000000002081CD                 db    ? ;
.bss:00000000002081CE                 db    ? ;
.bss:00000000002081CF                 db    ? ;
.bss:00000000002081D0                 db    ? ;
.bss:00000000002081D1                 db    ? ;
.bss:00000000002081D2                 db    ? ;
.bss:00000000002081D3                 db    ? ;
.bss:00000000002081D4                 db    ? ;
.bss:00000000002081D5                 db    ? ;
.bss:00000000002081D6                 db    ? ;
.bss:00000000002081D7                 db    ? ;
.bss:00000000002081D8                 db    ? ;
.bss:00000000002081D9                 db    ? ;
.bss:00000000002081DA                 db    ? ;
.bss:00000000002081DB                 db    ? ;
.bss:00000000002081DC                 db    ? ;
.bss:00000000002081DD                 db    ? ;
.bss:00000000002081DE                 db    ? ;
.bss:00000000002081DF                 db    ? ;
.bss:00000000002081E0                 db    ? ;
.bss:00000000002081E1                 db    ? ;
.bss:00000000002081E2                 db    ? ;
.bss:00000000002081E3                 db    ? ;
.bss:00000000002081E4                 db    ? ;
.bss:00000000002081E5                 db    ? ;
.bss:00000000002081E6                 db    ? ;
.bss:00000000002081E7                 db    ? ;
.bss:00000000002081E8                 db    ? ;
.bss:00000000002081E9                 db    ? ;
.bss:00000000002081EA                 db    ? ;
.bss:00000000002081EB                 db    ? ;
.bss:00000000002081EC                 db    ? ;
.bss:00000000002081ED                 db    ? ;
.bss:00000000002081EE                 db    ? ;
.bss:00000000002081EF                 db    ? ;
.bss:00000000002081F0                 db    ? ;
.bss:00000000002081F1                 db    ? ;
.bss:00000000002081F2                 db    ? ;
.bss:00000000002081F3                 db    ? ;
.bss:00000000002081F4                 db    ? ;
.bss:00000000002081F5                 db    ? ;
.bss:00000000002081F6                 db    ? ;
.bss:00000000002081F7                 db    ? ;
.bss:00000000002081F8                 db    ? ;
.bss:00000000002081F9                 db    ? ;
.bss:00000000002081FA                 db    ? ;
.bss:00000000002081FB                 db    ? ;
.bss:00000000002081FC                 db    ? ;
.bss:00000000002081FD                 db    ? ;
.bss:00000000002081FE                 db    ? ;
.bss:00000000002081FF                 db    ? ;
.bss:0000000000208200                 db    ? ;
.bss:0000000000208201                 db    ? ;
.bss:0000000000208202                 db    ? ;
.bss:0000000000208203                 db    ? ;
.bss:0000000000208204                 db    ? ;
.bss:0000000000208205                 db    ? ;
.bss:0000000000208206                 db    ? ;
.bss:0000000000208207                 db    ? ;
.bss:0000000000208208                 db    ? ;
.bss:0000000000208209                 db    ? ;
.bss:000000000020820A                 db    ? ;
.bss:000000000020820B                 db    ? ;
.bss:000000000020820C                 db    ? ;
.bss:000000000020820D                 db    ? ;
.bss:000000000020820E                 db    ? ;
.bss:000000000020820F                 db    ? ;
.bss:0000000000208210                 db    ? ;
.bss:0000000000208211                 db    ? ;
.bss:0000000000208212                 db    ? ;
.bss:0000000000208213                 db    ? ;
.bss:0000000000208214                 db    ? ;
.bss:0000000000208215                 db    ? ;
.bss:0000000000208216                 db    ? ;
.bss:0000000000208217                 db    ? ;
.bss:0000000000208218                 db    ? ;
.bss:0000000000208219                 db    ? ;
.bss:000000000020821A                 db    ? ;
.bss:000000000020821B                 db    ? ;
.bss:000000000020821C                 db    ? ;
.bss:000000000020821D                 db    ? ;
.bss:000000000020821E                 db    ? ;
.bss:000000000020821F                 db    ? ;
.bss:0000000000208220 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000208220                                         ; get_quoting_style↑o ...
.bss:0000000000208230 xmmword_208230  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000208230                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000208240 xmmword_208240  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000208240                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000208250 qword_208250    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000208250                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000208250 _bss            ends
.bss:0000000000208250
.prgend:0000000000208258 ; ===========================================================================
.prgend:0000000000208258
.prgend:0000000000208258 ; Segment type: Zero-length
.prgend:0000000000208258 _prgend         segment byte public '' use64
.prgend:0000000000208258 _end            label byte
.prgend:0000000000208258 _prgend         ends
.prgend:0000000000208258
extern:0000000000208260 ; ===========================================================================
extern:0000000000208260
extern:0000000000208260 ; Segment type: Externs
extern:0000000000208260 ; extern
extern:0000000000208260 ; int _uflow(_IO_FILE *)
extern:0000000000208260                 extrn __uflow:near      ; CODE XREF: ___uflow↑j
extern:0000000000208260                                         ; DATA XREF: .got:__uflow_ptr↑o
extern:0000000000208268 ; void free(void *ptr)
extern:0000000000208268                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000208268                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000208270 ; void __noreturn abort(void)
extern:0000000000208270                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000208270                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000208278 ; int *_errno_location(void)
extern:0000000000208278                 extrn __errno_location:near
extern:0000000000208278                                         ; CODE XREF: ___errno_location↑j
extern:0000000000208278                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000208280 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000208280                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000208280                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000208288 ; void __noreturn exit(int status)
extern:0000000000208288                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000208288                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000208290 ; size_t _fpending(FILE *fp)
extern:0000000000208290                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000208290                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000208298 ; void clearerr_unlocked(FILE *stream)
extern:0000000000208298                 extrn clearerr_unlocked:near
extern:0000000000208298                                         ; CODE XREF: _clearerr_unlocked↑j
extern:0000000000208298                                         ; DATA XREF: .got:clearerr_unlocked_ptr↑o
extern:00000000002082A0 ; char *textdomain(const char *domainname)
extern:00000000002082A0                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:00000000002082A0                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:00000000002082A8 ; int fclose(FILE *stream)
extern:00000000002082A8                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:00000000002082A8                                         ; DATA XREF: .got:fclose_ptr↑o
extern:00000000002082B0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:00000000002082B0                 extrn bindtextdomain:near
extern:00000000002082B0                                         ; CODE XREF: _bindtextdomain↑j
extern:00000000002082B0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:00000000002082B8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:00000000002082B8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:00000000002082B8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:00000000002082C0 ; size_t _ctype_get_mb_cur_max(void)
extern:00000000002082C0                 extrn __ctype_get_mb_cur_max:near
extern:00000000002082C0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:00000000002082C0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002082C8 ; size_t strlen(const char *s)
extern:00000000002082C8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002082C8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002082D0                 extrn __stack_chk_fail:near
extern:00000000002082D0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002082D0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002082D8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002082D8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002082D8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002082E0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002082E0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002082E0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002082E8 ; int _overflow(_IO_FILE *, int)
extern:00000000002082E8                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:00000000002082E8                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:00000000002082F0 ; char *strrchr(const char *s, int c)
extern:00000000002082F0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002082F0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002082F8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002082F8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002082F8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000208300 ; void *memset(void *s, int c, size_t n)
extern:0000000000208300                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000000000208300                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000208308 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:0000000000208308                 extrn posix_fadvise:near
extern:0000000000208308                                         ; CODE XREF: _posix_fadvise↑j
extern:0000000000208308                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:0000000000208310 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000208310                 extrn __libc_start_main:near
extern:0000000000208310                                         ; CODE XREF: start+24↑p
extern:0000000000208310                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000208318 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000208318                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000208318                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000208320 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000208320                 extrn fputs_unlocked:near
extern:0000000000208320                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000208320                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000208328 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000208328                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000208328                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000208330 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000208330                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000208330                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000208338 ; int fileno(FILE *stream)
extern:0000000000208338                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000208338                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000208340 ; void *malloc(size_t size)
extern:0000000000208340                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000208340                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000208348 ; int fflush(FILE *stream)
extern:0000000000208348                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000208348                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000208350 ; char *nl_langinfo(nl_item item)
extern:0000000000208350                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000208350                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000208358 ; int _freading(FILE *fp)
extern:0000000000208358                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000208358                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000208360 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:0000000000208360                 extrn fwrite_unlocked:near
extern:0000000000208360                                         ; CODE XREF: _fwrite_unlocked↑j
extern:0000000000208360                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:0000000000208368 ; void *realloc(void *ptr, size_t size)
extern:0000000000208368                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000208368                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000208370 ; char *setlocale(int category, const char *locale)
extern:0000000000208370                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000208370                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000208378                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000208378                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000208380 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000208380                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000208380                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000208388 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000208388                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000208388                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000208390 ; FILE *fopen(const char *filename, const char *modes)
extern:0000000000208390                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:0000000000208390                                         ; DATA XREF: .got:fopen_ptr↑o
extern:0000000000208398 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000208398                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000208398                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:00000000002083A0 ; void __noreturn exit(int status)
extern:00000000002083A0                 extrn exit:near         ; CODE XREF: _exit↑j
extern:00000000002083A0                                         ; DATA XREF: .got:exit_ptr↑o
extern:00000000002083A8 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:00000000002083A8                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:00000000002083A8                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:00000000002083B0                 extrn __fprintf_chk:near
extern:00000000002083B0                                         ; CODE XREF: ___fprintf_chk↑j
extern:00000000002083B0                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:00000000002083B8 ; int mbsinit(const mbstate_t *ps)
extern:00000000002083B8                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:00000000002083B8                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:00000000002083C0 ; int iswprint(wint_t wc)
extern:00000000002083C0                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:00000000002083C0                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002083C8 ; int __fastcall __cxa_finalize(void *)
extern:00000000002083C8                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002083C8                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002083C8                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002083D0 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002083D0                 extrn __ctype_b_loc:near
extern:00000000002083D0                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002083D0                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002083D8                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002083D8                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002083E0                 extrn __gmon_start__:near ; weak
extern:00000000002083E0                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002083E0                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002083E8                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002083E8                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002083E8
extern:00000000002083E8
extern:00000000002083E8                 end start
